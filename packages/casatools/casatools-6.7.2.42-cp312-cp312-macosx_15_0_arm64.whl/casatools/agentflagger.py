##################### generated by xml-casa (v2) from agentflagger.xml ##############
##################### 5e2c98ee52cd9e0baec765091e60850b ##############################
from __future__ import absolute_import 
from .__casac__.agentflagger import agentflagger as _agentflagger

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class agentflagger:
    _info_group_ = """agentflagger"""
    _info_desc_ = """Tool for manual and automated flagging"""
    ### self
    def __init__(self, *args, **kwargs):
        """Create a *agentflagger* tool, and initialize some variables.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _agentflagger()

    def done(self):
        """
        """
        return self._swigobj.done()

    def open(self, msname='', ntime=float(0.0)):
        """
        """
        return self._swigobj.open(msname, ntime)

    def selectdata(self, config={ }, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', timerange='', correlation='', intent='', observation=''):
        """
        """
        return self._swigobj.selectdata(config, field, spw, array, feed, scan, antenna, uvrange, timerange, correlation, intent, observation)

    def parseagentparameters(self, aparams):
        """The specific data selection parameters for the agent (flagging mode)
        are parsed. These parameters are the data selection and mode-specific parameters.
        See the example below:
        """
        return self._swigobj.parseagentparameters(aparams)

    def init(self):
        """This method will initialize the agents and create a list of agents
        with their specific parameters. It takes no parameters.
        """
        return self._swigobj.init()

    def run(self, writeflags=True, sequential=True):
        """Execute a list of flagging agents and write or not to the MS/cal table. The parameter
        writeflags controls whether or not to write to the MS.
        """
        return self._swigobj.run(writeflags, sequential)

    def getflagversionlist(self, printflags=True):
        """Print out the list of flag versions in the MS, unless the parameter printflags=False. The list of names is returned.
        """
        return self._swigobj.getflagversionlist(printflags)

    def printflagselection(self):
        """Print out a list of current flag selections.
        """
        return self._swigobj.printflagselection()

    def saveflagversion(self, versionname='', comment='', merge=''):
        """
        """
        return self._swigobj.saveflagversion(versionname, comment, merge)

    def restoreflagversion(self, versionname=[  ], merge=''):
        """
        """
        return self._swigobj.restoreflagversion(versionname, merge)

    def deleteflagversion(self, versionname=[  ]):
        """
        """
        return self._swigobj.deleteflagversion(versionname)

    def parsemanualparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', autocorr=False, apply=True):
        """
        """
        return self._swigobj.parsemanualparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, autocorr, apply)

    def parseclipparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', datacolumn='DATA', clipminmax=[  ], clipoutside=True, channelavg=False, chanbin=int(1), timeavg=False, timebin='', clipzeros=False, apply=True):
        """
        """
        return self._swigobj.parseclipparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, datacolumn, clipminmax, clipoutside, channelavg, chanbin, timeavg, timebin, clipzeros, apply)

    def parsequackparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', quackmode='beg', quackinterval=float(1.0), quackincrement=False, apply=True):
        """
        """
        return self._swigobj.parsequackparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, quackmode, quackinterval, quackincrement, apply)

    def parseelevationparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', lowerlimit=float(0.0), upperlimit=float(90.0), apply=True):
        """
        """
        return self._swigobj.parseelevationparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, lowerlimit, upperlimit, apply)

    def parsetfcropparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=float(0.0), combinescans=False, datacolumn='DATA', timecutoff=float(4.0), freqcutoff=float(3.0), timefit='line', freqfit='poly', maxnpieces=int(7), flagdimension='freqtime', usewindowstats='none', halfwin=int(1), extendflags=True, apply=True, channelavg=False, chanbin=int(1), timeavg=False, timebin=''):
        """
        """
        return self._swigobj.parsetfcropparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, ntime, combinescans, datacolumn, timecutoff, freqcutoff, timefit, freqfit, maxnpieces, flagdimension, usewindowstats, halfwin, extendflags, apply, channelavg, chanbin, timeavg, timebin)

    def parseantintparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', antint_ref_antenna='', minchanfrac=float(0.6), verbose=False, apply=True):
        """
        """
        return self._swigobj.parseantintparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, antint_ref_antenna, minchanfrac, verbose, apply)

    def parseextendparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', ntime=float(0.0), combinescans=False, extendpols=True, growtime=float(50.0), growfreq=float(50.0), growaround=False, flagneartime=False, flagnearfreq=False, apply=True):
        """
        """
        return self._swigobj.parseextendparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, ntime, combinescans, extendpols, growtime, growfreq, growaround, flagneartime, flagnearfreq, apply)

    def parsesummaryparameters(self, field='', spw='', array='', feed='', scan='', antenna='', uvrange='', time='', correlation='', intent='', observation='', spwchan=False, spwcorr=False, basecnt=False, fieldcnt=False, name=''):
        """
        """
        return self._swigobj.parsesummaryparameters(field, spw, array, feed, scan, antenna, uvrange, time, correlation, intent, observation, spwchan, spwcorr, basecnt, fieldcnt, name)


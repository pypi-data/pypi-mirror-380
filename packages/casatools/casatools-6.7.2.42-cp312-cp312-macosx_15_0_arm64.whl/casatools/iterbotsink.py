##################### generated by xml-casa (v2) from iterbotsink.xml ###############
##################### b25d6595d07722f33e1e5b4402041667 ##############################
from __future__ import absolute_import 
from .__casac__.iterbotsink import iterbotsink as _iterbotsink

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class iterbotsink:
    _info_group_ = """synthesisiterbot"""
    _info_desc_ = """tool for synthesis imaging"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct {tt synthesisiterbot} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _iterbotsink()

    def setupiteration(self, iterpars={ }):
        """
        """
        return self._swigobj.setupiteration(iterpars)

    def cleanComplete(self, lastcyclecheck=False, reachedMajorLimit=False):
        """
        """
        return self._swigobj.cleanComplete(lastcyclecheck, reachedMajorLimit)

    def endmajorcycle(self):
        """
        """
        return self._swigobj.endmajorcycle()

    def resetminorcycleinfo(self):
        """
        """
        return self._swigobj.resetminorcycleinfo()

    def getminorcyclecontrols(self):
        """
        """
        return self._swigobj.getminorcyclecontrols()

    def mergeexecrecord(self, execrecord={ }, immod=int()):
        """
        """
        return self._swigobj.mergeexecrecord(execrecord, immod)

    def changestopflag(self, stopflag=False):
        """
        """
        return self._swigobj.changestopflag(stopflag)

    def mergeinitrecord(self, initrecord={ }, immod=int()):
        """
        """
        return self._swigobj.mergeinitrecord(initrecord, immod)

    def getiterationdetails(self):
        """
        """
        return self._swigobj.getiterationdetails()

    def pauseforinteraction(self):
        """
        """
        return self._swigobj.pauseforinteraction()

    def getiterationsummary(self):
        """
        """
        return self._swigobj.getiterationsummary()

    def done(self):
        """
        """
        return self._swigobj.done()


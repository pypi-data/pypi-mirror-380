##################### generated by xml-casa (v2) from atmosphere.xml ################
##################### e79b0bbe7303e5be53ed0d1656b65f07 ##############################
from __future__ import absolute_import 
from .__casac__.atmosphere import atmosphere as _atmosphere

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class atmosphere:
    _info_group_ = """atmosphere"""
    _info_desc_ = """Atmosphere model"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct an {tt atmosphere} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _atmosphere()

    def close(self):
        """
        """
        return self._swigobj.close()

    def done(self):
        """
        """
        return self._swigobj.done()

    def getAtmVersion(self):
        """Returns the version of ATM library implemented to this tool.
        """
        return self._swigobj.getAtmVersion()

    def listAtmosphereTypes(self):
        """Returns a list of index numbers and corresponding atmosphere types
        used by the ATM library.
        """
        return self._swigobj.listAtmosphereTypes()

    def initAtmProfile(self, altitude={'value': float(5000.), 'unit': 'm'}, temperature={'value': float(270.0), 'unit': 'K'}, pressure={'value': float(560.0), 'unit': 'mbar'}, maxAltitude={'value': float(48.0), 'unit': 'km'}, humidity=float(20.0), dTem_dh={'value': float(-5.6), 'unit': 'K/km'}, dP={'value': float(10.0), 'unit': 'mbar'}, dPm=float(1.2), h0={'value': float(2.0), 'unit': 'km'}, atmType=int(1), layerBoundaries=[  ], layerTemperature=[  ]):
        """An atmospheric profile is composed of 4 quantities as a function of
        altitude z:
        
        * the layer thickness
        * the pressure P
        * the temperature T and
        * the gas densities for H2O, O3, CO and N2O.
        
        
        This method is needed for computing the absorption and phase
        coefficients, as well as for performing radiative transfer
        calculations (only layer thickness/T are needed).
        
        This method builds an atmospheric profile that can be used to calculate
        absorption and phase coefficients, as well as to perform forward
        and/or retrieval radiative transfer calculations. It is composed of a
        set of parameters needed to build a layer thickness/P/T/gas densities
        densities profile from simple parameters currently available at
        observatories (from weather stations for example) using functions from
        the ATM library. The set of input parameters consists of the pressure
        P, the temperature T and the relative humidity at the ground, the
        altitude of the site, the tropospheric temperature lapse rate,... The
        profile is built as: thickness of the considered atmospheric layers
        above the site, and mean P,T,H2O,O3,CO,N2O in them. The total number
        of atmospheric layers in the particular profile is also available (a
        negative value indicates an error).  The zenith column of water vapor
        can be calculated by simply integrating the H2O profile.
        """
        return self._swigobj.initAtmProfile(altitude, temperature, pressure, maxAltitude, humidity, dTem_dh, dP, dPm, h0, atmType, layerBoundaries, layerTemperature)

    def updateAtmProfile(self, altitude={'value': float(5000.), 'unit': 'm'}, temperature={'value': float(270.0), 'unit': 'K'}, pressure={'value': float(560.0), 'unit': 'mbar'}, humidity=float(20.0), dTem_dh={'value': float(-5.6), 'unit': 'K/km'}, h0={'value': float(2.0), 'unit': 'km'}):
        """This is used to update the {tt atmosphere} tool when basic
        atmospheric parameters.change.
        """
        return self._swigobj.updateAtmProfile(altitude, temperature, pressure, humidity, dTem_dh, h0)

    def getBasicAtmParms(self):
        """
        """
        return self._swigobj.getBasicAtmParms()

    def getNumLayers(self):
        """
        """
        return self._swigobj.getNumLayers()

    def getGroundWH2O(self):
        """Method to get the zenith column  of water vapor. It is computed by
        simply integrating the H2O profile:
        """
        return self._swigobj.getGroundWH2O()

    def getProfile(self):
        """Get the atmospheric profile.
        """
        return self._swigobj.getProfile()

    def initSpectralWindow(self, nbands=int(1), fCenter={'value': float(90), 'unit': 'GHz'}, fWidth={'value': float(0.64), 'unit': 'GHz'}, fRes={'value': float(0.0), 'unit': 'GHz'}):
        """function that defines a spectral window, computes absorption and emmision coefficients for this window,
        using the atmospheric model profile.
        
        NOTE: This method should be invoked after setting atmospheric profile model by initAtmProfile.
        """
        return self._swigobj.initSpectralWindow(nbands, fCenter, fWidth, fRes)

    def addSpectralWindow(self, fCenter={'value': float(350), 'unit': 'GHz'}, fWidth={'value': float(0.008), 'unit': 'GHz'}, fRes={'value': float(0.002), 'unit': 'GHz'}):
        """Add a new spectral window, uniformly sampled, this spectral window
        having no sideband.
        """
        return self._swigobj.addSpectralWindow(fCenter, fWidth, fRes)

    def getNumSpectralWindows(self):
        """
        """
        return self._swigobj.getNumSpectralWindows()

    def getNumChan(self, spwid=int(0)):
        """Return the number of channels of ith band ( passes in as parameter ).
        """
        return self._swigobj.getNumChan(spwid)

    def getRefChan(self, spwid=int(0)):
        """Return the reference channel of the given spectral window
        """
        return self._swigobj.getRefChan(spwid)

    def getRefFreq(self, spwid=int(0)):
        """Return the reference frequency of the given spectral window
        """
        return self._swigobj.getRefFreq(spwid)

    def getChanSep(self, spwid=int(0)):
        """Return the channel separation of the given spectral window
        """
        return self._swigobj.getChanSep(spwid)

    def getChanFreq(self, chanNum=int(0), spwid=int(0)):
        """Return the channel frequency for a given grid point for the specified spectral window.
        
        """
        return self._swigobj.getChanFreq(chanNum, spwid)

    def getSpectralWindow(self, spwid=int(0)):
        """Return the spectral grid for the specified spectral window.
        
        """
        return self._swigobj.getSpectralWindow(spwid)

    def getChanNum(self, freq, spwid=int(0)):
        """Return the channel number for given frequency in the specified
        spectral window relative to the reference channel number.
        
        """
        return self._swigobj.getChanNum(freq, spwid)

    def getBandwidth(self, spwid=int(0)):
        """Get the frequency range encompassing the list of frequency grid points for the specified spectral window.
        
        """
        return self._swigobj.getBandwidth(spwid)

    def getMinFreq(self, spwid=int(0)):
        """Get lowest frequency channel for the specified spectral window.
        
        """
        return self._swigobj.getMinFreq(spwid)

    def getMaxFreq(self, spwid=int(0)):
        """Get highest frequency channel for the specified spectral window.
        
        """
        return self._swigobj.getMaxFreq(spwid)

    def getDryOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated Dry Opacity for one channel in a band.
        """
        return self._swigobj.getDryOpacity(nc, spwid)

    def getDryContOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated Dry Continuum Opacity for one channel in a band.
        """
        return self._swigobj.getDryContOpacity(nc, spwid)

    def getO2LinesOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated O2 Lines Opacity for one channel in a band.
        """
        return self._swigobj.getO2LinesOpacity(nc, spwid)

    def getO3LinesOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated O3 Lines Opacity for one channel in a band.
        """
        return self._swigobj.getO3LinesOpacity(nc, spwid)

    def getCOLinesOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated CO Lines Opacity for one channel in a band.
        """
        return self._swigobj.getCOLinesOpacity(nc, spwid)

    def getN2OLinesOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated N2O Lines Opacity for one channel in a band.
        """
        return self._swigobj.getN2OLinesOpacity(nc, spwid)

    def getWetOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith Wet Opacity for one channel in a band.
        """
        return self._swigobj.getWetOpacity(nc, spwid)

    def getH2OLinesOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith H2O Lines Opacity for one channel in a band.
        """
        return self._swigobj.getH2OLinesOpacity(nc, spwid)

    def getH2OContOpacity(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith H2O Continuum Opacity for one channel in a band.
        """
        return self._swigobj.getH2OContOpacity(nc, spwid)

    def getDryOpacitySpec(self, spwid=int(0)):
        """Get the integrated Dry opacity along the atmospheric path on each channel in a band.
        """
        return self._swigobj.getDryOpacitySpec(spwid)

    def getWetOpacitySpec(self, spwid=int(0)):
        """Getthe integrated zenith Wet Opacity along the atmospheric path on each channel in a band.
        """
        return self._swigobj.getWetOpacitySpec(spwid)

    def getDispersivePhaseDelay(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith H2O Atmospheric Phase Delay (Dispersive part)
        for the current conditions, for channel number nc of spectral window spwid.
        """
        return self._swigobj.getDispersivePhaseDelay(nc, spwid)

    def getDispersiveWetPhaseDelay(self, nc=int(-1), spwid=int(0)):
        """Function to retrievethe the integrated Atmospheric Phase Delay
        (Dispersive part) along the atmospheric path corresponding to the 1st
        guess water column.
        """
        return self._swigobj.getDispersiveWetPhaseDelay(nc, spwid)

    def getNonDispersiveWetPhaseDelay(self, nc=int(-1), spwid=int(0)):
        """Function to retrieve the integrated wet Atmospheric Phase Delay
        (NonDispersive part) along the atmospheric path corresponding to the 1st
        guess water column.
        """
        return self._swigobj.getNonDispersiveWetPhaseDelay(nc, spwid)

    def getNonDispersiveDryPhaseDelay(self, nc=int(-1), spwid=int(0)):
        """Function to retrieve the integrated dry Atmospheric Phase Delay
        (NonDispersive part) along the atmospheric path corresponding to the 1st
        guess water column.
        """
        return self._swigobj.getNonDispersiveDryPhaseDelay(nc, spwid)

    def getNonDispersivePhaseDelay(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith H2O Atmospheric Phase Delay (Non-Dispersive
        part) for the current conditions, for channel number nc of spectral
        window spwid.
        """
        return self._swigobj.getNonDispersivePhaseDelay(nc, spwid)

    def getDispersivePathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated zenith H2O Atmospheric Path length (Dispersive part)
        along the atmospheric path corresponding to the user water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getDispersivePathLength(nc, spwid)

    def getDispersiveWetPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated wet Atmospheric Path length (Dispersive part)
        along the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getDispersiveWetPathLength(nc, spwid)

    def getNonDispersiveWetPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated wet Atmospheric Path length (NonDispersive part)
        along the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getNonDispersiveWetPathLength(nc, spwid)

    def getNonDispersiveDryPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated dry Atmospheric Path length (NonDispersive part)
        along the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getNonDispersiveDryPathLength(nc, spwid)

    def getO2LinesPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated Atmospheric Path length (due to O2 Lines) along
        the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getO2LinesPathLength(nc, spwid)

    def getO3LinesPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated Atmospheric Path length (due to O3 Lines) along
        the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getO3LinesPathLength(nc, spwid)

    def getCOLinesPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated Atmospheric Path length (due to CO Lines)
        along the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getCOLinesPathLength(nc, spwid)

    def getN2OLinesPathLength(self, nc=int(-1), spwid=int(0)):
        """Retrieve the integrated Atmospheric Path length (due to N2O Lines)
        along the atmospheric path corresponding to the 1st guess water column
        for channel nc in spectral window spwid.
        """
        return self._swigobj.getN2OLinesPathLength(nc, spwid)

    def getNonDispersivePathLength(self, nc=int(-1), spwid=int(0)):
        """Get the integrated zenith H2O Atmospheric Path length (Non-Dispersive part)
        for the current conditions, for channel nc in spectral window spwid.
        """
        return self._swigobj.getNonDispersivePathLength(nc, spwid)

    def getAbsH2OLines(self, nl, nf=int(0), spwid=int(0)):
        """Accessor to get H2O lines Absorption Coefficient at layer nl,
        spectral window spwid and channel nf.
        """
        return self._swigobj.getAbsH2OLines(nl, nf, spwid)

    def getAbsH2OCont(self, nl, nf=int(0), spwid=int(0)):
        """Get H2O continuum Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsH2OCont(nl, nf, spwid)

    def getAbsO2Lines(self, nl, nf=int(0), spwid=int(0)):
        """Get O2 lines Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsO2Lines(nl, nf, spwid)

    def getAbsDryCont(self, nl, nf=int(0), spwid=int(0)):
        """Get Dry Continuum Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsDryCont(nl, nf, spwid)

    def getAbsO3Lines(self, nl, nf=int(0), spwid=int(0)):
        """Get O3 lines Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsO3Lines(nl, nf, spwid)

    def getAbsCOLines(self, nl, nf=int(0), spwid=int(0)):
        """Get CO lines Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsCOLines(nl, nf, spwid)

    def getAbsN2OLines(self, nl, nf=int(0), spwid=int(0)):
        """Get N2O lines Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsN2OLines(nl, nf, spwid)

    def getAbsTotalDry(self, nl, nf=int(0), spwid=int(0)):
        """Get total dry Absorption Coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsTotalDry(nl, nf, spwid)

    def getAbsTotalWet(self, nl, nf=int(0), spwid=int(0)):
        """Get total wet absorption coefficient at layer nl,
        spectral window spwid and frequency channel nf
        """
        return self._swigobj.getAbsTotalWet(nl, nf, spwid)

    def setUserWH2O(self, wh2o={'value': float(0.0), 'unit': 'mm'}):
        """Set user zenith water vapor column for forward radiative transfer
        calculations.
        """
        return self._swigobj.setUserWH2O(wh2o)

    def getUserWH2O(self):
        """Get user zenith water vapor column for forward radiative transfer
        calculations.
        """
        return self._swigobj.getUserWH2O()

    def setAirMass(self, airmass):
        """Setter for air mass in SkyStatus without performing water vapor retrieval.
        """
        return self._swigobj.setAirMass(airmass)

    def getAirMass(self):
        """Accessor to get airmass.
        """
        return self._swigobj.getAirMass()

    def setSkyBackgroundTemperature(self, tbgr={'value': float(2.73), 'unit': 'K'}):
        """Set sky background temperature in SkyStatus without performing water vapor retrieval
        """
        return self._swigobj.setSkyBackgroundTemperature(tbgr)

    def getSkyBackgroundTemperature(self):
        """Get the sky background temperature
        """
        return self._swigobj.getSkyBackgroundTemperature()

    def getAverageTebbSky(self, spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Returns the average Equivalent Blackbody Temperature in spectral
        window spwid, for the current conditions and a perfect sky coupling.
        """
        return self._swigobj.getAverageTebbSky(spwid, wh2o)

    def getTebbSky(self, nc=int(-1), spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Gets the Equivalent Blackbody Temperature in spectral window spwid and
        channel nc, for the current (user) Water Vapor Column wh2o,
        the current Air Mass, and perfect Sky Coupling to the sky.
        """
        return self._swigobj.getTebbSky(nc, spwid, wh2o)

    def getTebbSkySpec(self, spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Gets the Equivalent Blackbody Temperatures in a spectral window spwid
        for the current (user) Water Vapor Column wh2o, the current Air Mass, and
        perfect Sky Coupling to the sky.
        """
        return self._swigobj.getTebbSkySpec(spwid, wh2o)

    def getAverageTrjSky(self, spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Returns the average Rayleigh-Jeans Temperature in spectral
        window spwid, for the current (user) Water Vapor Column wh2o,
        the current Air Mass, and perfect Sky Coupling to the sky.
        """
        return self._swigobj.getAverageTrjSky(spwid, wh2o)

    def getTrjSky(self, nc=int(-1), spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Gets the Rayleigh-Jeans Temperature in spectral window spwid and
        channel nc, for the current (user) Water Vapor Column wh2o, the
        current Air Mass, and perfect Sky Coupling to the sky.
        """
        return self._swigobj.getTrjSky(nc, spwid, wh2o)

    def getTrjSkySpec(self, spwid=int(0), wh2o={'value': float(-1), 'unit': 'mm'}):
        """Gets the Rayleigh-Jeans Temperatures in a spectral window spwid
        for the current (user) Water Vapor Column wh2o, the current Air
        Mass, and perfect Sky Coupling to the sky.
        """
        return self._swigobj.getTrjSkySpec(spwid, wh2o)


##################### generated by xml-casa (v2) from wvr.xml #######################
##################### d56356a215967c4b7f57f9c4ec48c762 ##############################
from __future__ import absolute_import 
from .__casac__.wvr import wvr as _wvr

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class wvr:
    _info_group_ = """wvr"""
    _info_desc_ = """Operate on ALMA Water Vapour Radiometer (WVR) data"""
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _wvr()

    def gcal(self, vis='', output='', toffset=float(0.), nsol=int(1), segsource=False, reverse=False, reversespw=[  ], disperse=False, cont=False, wvrflag='', sourceflag=[  ], statfield=[  ], statsource=[  ], tie=[  ], smooth=int(1), scale=float(1.0), maxdistm=float(500.), minnumants=int(2), mingoodfrac=float(0.8), usefieldtab=False, spw=[  ], wvrspw=[  ], refant='', offsets='', rseed=int(0), logfile='wvrgcal.log'):
        """Generate a gain table based on Water Vapour Radiometer data
        
        """
        return self._swigobj.gcal(vis, output, toffset, nsol, segsource, reverse, reversespw, disperse, cont, wvrflag, sourceflag, statfield, statsource, tie, smooth, scale, maxdistm, minnumants, mingoodfrac, usefieldtab, spw, wvrspw, refant, offsets, rseed, logfile)


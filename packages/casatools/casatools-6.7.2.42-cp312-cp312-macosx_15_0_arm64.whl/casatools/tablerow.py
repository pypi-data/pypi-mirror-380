##################### generated by xml-casa (v2) from tablerow.xml ##################
##################### 94ee20623ed1b02d54a5c72a1fc176c4 ##############################
from __future__ import absolute_import 
from .__casac__.tablerow import tablerow as _tablerow

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class tablerow:
    _info_group_ = """table"""
    _info_desc_ = """Access table rows from casa6"""
    ### self, table=None, columnnames=[  ], exclude=False
    def __init__(self, table=None, columnnames=[  ], exclude=False, *args, **kwargs):
        """
        """
        schema = {'table': {'type': 'ctableTool', 'nullable': True}, 'columnnames': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'exclude': {'type': 'cBool'}}
        doc = {'table': table, 'columnnames': columnnames, 'exclude': exclude}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _tablerow(_pc.document['table']._swigobj if hasattr(_pc.document['table'],'_swigobj') else _pc.document['table'], _pc.document['columnnames'], _pc.document['exclude'])

    def _iswritable(self):
        """check to see if row can be modified
        
        """
        return self._swigobj._iswritable()

    def iswritable(self):
        """check to see if row can be modified
        
        """
        return self._swigobj.iswritable()

    def _get(self, rownr):
        """get a single row specified by rownr
        
        """
        return self._swigobj._get(rownr)

    def get(self, rownr):
        """get a single row specified by rownr
        
        """
        return self._swigobj.get(rownr)

    def _put(self, rownr, value, matchingfields=True):
        """put a single row specified by rownr
        
        """
        return self._swigobj._put(rownr, value, matchingfields)

    def put(self, rownr, value, matchingfields=True):
        """put a single row specified by rownr
        
        """
        return self._swigobj.put(rownr, value, matchingfields)

    def __len__(self):
        """return the number of available rows for use in subscription
        
        """
        return self._swigobj.__len__()

    def __getitem__(self, rownr=None):
        """get one row from the referenced table used in subscription
        
        """
        return self._swigobj.__getitem__(rownr)

    def done(self):
        """Release the table resources. After this call, the tablerow object will no longer
        be useful.
        
        """
        return self._swigobj.done()


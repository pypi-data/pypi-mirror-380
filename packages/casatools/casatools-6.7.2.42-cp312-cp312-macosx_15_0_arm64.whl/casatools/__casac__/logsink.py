# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _logsink
else:
    import _logsink

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class logsink(object):
    r"""Proxy of C++ casac::logsink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(self, _filename=string("casa.log")) -> logsink"""
        _logsink.logsink_swiginit(self, _logsink.new_logsink(*args, **kwargs))

    def origin(self, *args, **kwargs):
        r"""
        origin(self, _fromwhere=string("")) -> bool


        Summary:
            Set the origin of the message

        Description:

        Sets the origin of messages to be displayed

        Input Parameters:
            fromwhere                 The origin of a log messages

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_origin(self, *args, **kwargs)

    def processorOrigin(self, *args, **kwargs):
        r"""
        processorOrigin(self, _fromwhere=string("")) -> bool


        Summary:
            Set the CASA processor origin

        Description:

        Sets the CASA processor origin which is shown at the end of each log origin

        Input Parameters:
            fromwhere                 Input CASA processor origin name

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_processorOrigin(self, *args, **kwargs)

    def filter(self, *args, **kwargs):
        r"""
        filter(self, _level=string("DEBUG2")) -> bool


        Summary:
            Set the filter level

        Description:

        Set the filter level of logging messages to be displayed.
        This will determine what log messages go into the log file. The logger itself
        can adjust what gets displayed so you could set INFO5 and then filter in the
        logger everything above INFO1.

        Input Parameters:
            level                     Level of messages to display to the console/log file

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_filter(self, *args, **kwargs)

    def filterMsg(self, *args, **kwargs):
        r"""
        filterMsg(self, _msgList=std::vector< std::string >({}))


        Summary:
            Add messages to the filter out list

        Description:

        Add messages to the filter out list

        Input Parameters:
            msgList                   Array of strings identifying messages to filter out

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_filterMsg(self, *args, **kwargs)

    def clearFilterMsgList(self):
        r"""
        clearFilterMsgList(self)


        Summary:
            Clear list of messages to be filter out

        Description:

        Clear list of messages to be filter out

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_clearFilterMsgList(self)

    def post(self, *args, **kwargs):
        r"""
        post(self, _message=string(""), _priority=string("INFO"), _origin=string("")) -> bool


        Summary:
            Post a message

        Description:

        If the message passes the filter, write it (same as postLocally)

        Input Parameters:
            message                   Message to be posted
            priority                  Priority of message to be posted
            origin                    Origin of message to be posted

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_post(self, *args, **kwargs)

    def postLocally(self, *args, **kwargs):
        r"""
        postLocally(self, _message=string(""), _priority=string("INFO"), _origin=string("")) -> bool


        Summary:
            Post locally

        Description:

        If the message passes the filter, write it

        Input Parameters:
            message                   Message to be posted
            priority                  Priority of message to be posted
            origin                    Origin of message to be posted

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_postLocally(self, *args, **kwargs)

    def localId(self):
        r"""
        localId(self) -> string


        Summary:
            Get local ID

        Description:

        Returns the id for this class

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_localId(self)

    def version(self):
        r"""
        version(self) -> string


        Summary:
            version of CASA

        Description:

        Returns the version of CASA as well as sending it to the log

        Example:

        casalog.version()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_version(self)

    def id(self):
        r"""
        id(self) -> string


        Summary:
            Get ID

        Description:

        Returns the ID of the LogSink in use

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_id(self)

    def setglobal(self, *args, **kwargs):
        r"""
        setglobal(self, _isglobal=bool(true)) -> bool


        Summary:
            Set this logger to be the global logger

        Input Parameters:
            isglobal                  Use as global logger

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setglobal(self, *args, **kwargs)

    def setlogfile(self, *args, **kwargs):
        r"""
        setlogfile(self, _filename=string("casapy.log")) -> bool


        Summary:
            Set the name of file for logger output

        Input Parameters:
            filename                  filename for logger

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setlogfile(self, *args, **kwargs)

    def showconsole(self, *args, **kwargs):
        r"""
        showconsole(self, _onconsole=bool(false)) -> bool


        Summary:
            Choose to send messages to the console/terminal

        Input Parameters:
            onconsole                 All messages to the console as well as log file

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_showconsole(self, *args, **kwargs)

    def logfile(self):
        r"""
        logfile(self) -> string


        Summary:
            Returns the full path of the log file

        Description:

        Returns the full path of the log file

        Example:

        logfile = casalog.logfile()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_logfile(self)

    def ompNumThreadsTest(self):
        r"""
        ompNumThreadsTest(self) -> long


        Summary:
            Determines the number of OpenMP threads in the current parallel region using an OpenMP reduction pragma

        Example:

        omp_num_thread = casalog.ompNumThreadsTest()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompNumThreadsTest(self)

    def ompGetNumThreads(self):
        r"""
        ompGetNumThreads(self) -> long


        Summary:
            Returns the number of OpenMP threads in the current parallel region

        Example:

        omp_num_thread = casalog.ompNumThreadsTest()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompGetNumThreads(self)

    def ompSetNumThreads(self, *args, **kwargs):
        r"""
        ompSetNumThreads(self, _numThreads=long(1)) -> bool


        Summary:
            Specifies the number of OpenMP threads used by default in subsequent parallel regions

        Input Parameters:
            numThreads                

        Example:

        casalog.ompSetNumThreads(2)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompSetNumThreads(self, *args, **kwargs)

    def setMemoryTotal(self, *args, **kwargs):
        r"""
        setMemoryTotal(self, _memory=long(0)) -> long


        Summary:
            Sets the memory total value to be returned by HostInfo

        Input Parameters:
            memory                    

        Example:

        casalog.setMemoryTotal(4*1024)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setMemoryTotal(self, *args, **kwargs)

    def setMemoryFraction(self, *args, **kwargs):
        r"""
        setMemoryFraction(self, _memfrac=long(0)) -> long


        Summary:
            Sets the memory fraction value to be returned by HostInfo

        Input Parameters:
            memfrac                   

        Example:

        casalog.setMemoryFraction(50)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setMemoryFraction(self, *args, **kwargs)

    def setNumCPUs(self, *args, **kwargs):
        r"""
        setNumCPUs(self, _cores=long(0)) -> long


        Summary:
            Sets the number of CPUs to be returned by HostInfo

        Input Parameters:
            cores                     

        Example:

        casalog.setNumCPUs(4)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setNumCPUs(self, *args, **kwargs)

    def getMemoryTotal(self, *args, **kwargs):
        r"""
        getMemoryTotal(self, _use_aipsrc=bool(true)) -> long


        Summary:
            Returns the memory total value from HostInfo

        Input Parameters:
            use_aipsrc                

        Example:

        casalog.getMemoryTotal(true)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getMemoryTotal(self, *args, **kwargs)

    def getNumCPUs(self, *args, **kwargs):
        r"""
        getNumCPUs(self, _use_aipsrc=bool(true)) -> long


        Summary:
            Returns the number of CPUs from HostInfo

        Input Parameters:
            use_aipsrc                

        Example:

        casalog.getNumCPUs(true)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getNumCPUs(self, *args, **kwargs)

    def getOrigin(self):
        r"""
        getOrigin(self) -> string


        Summary:
            Get the origin of the message

        Description:

        Gets the origin of messages to be displayed

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getOrigin(self)
    __swig_destroy__ = _logsink.delete_logsink

# Register logsink in _logsink:
_logsink.logsink_swigregister(logsink)


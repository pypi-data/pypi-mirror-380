# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mstransformer
else:
    import _mstransformer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class mstransformer(object):
    r"""Proxy of C++ casac::mstransformer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> mstransformer"""
        _mstransformer.mstransformer_swiginit(self, _mstransformer.new_mstransformer())

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Destroy the mstransformer tool

        Example:

        mt.done()

        --------------------------------------------------------------------------------

        """
        return _mstransformer.mstransformer_done(self)

    def config(self, *args, **kwargs):
        r"""
        config(self, _pars=initialize_record("")) -> bool


        Summary:
            Configure the mstransformer tool.

        Input Parameters:
            pars                      The record (dictionary) pars must contain at least the input MS name and output MS name. Other parameters that can go in the dictionary are the MS data selection parameters such as: spw, scan, antenna, field, state, correlation, array, uvrange, timerange, observation and any of the transformation parameters. This function can be run again to change the current parameters or add new ones. For the full list of parameters, please see help mstransform. Example: myparams = {'inputms':'myfile.ms', 'outputms':'myout.ms', 'datacolumn':'DATA', 'spw':'0,1,2', 'combinespws':True} 

        Example:

        mt.config(pars)

        --------------------------------------------------------------------------------

        """
        return _mstransformer.mstransformer_config(self, *args, **kwargs)

    def open(self):
        r"""
        open(self) -> bool


        Summary:
            Open the MS and select the data

        Description:

        It assumes that mt.config() was run before.

        Example:

        mt.open()

        --------------------------------------------------------------------------------

        """
        return _mstransformer.mstransformer_open(self)

    def run(self):
        r"""
        run(self) -> record *


        Summary:
            Execute the mstransformer tool and apply the transformations

        Description:


        Execute the tool and apply the transformations.

        Example:

        mt.run()

        --------------------------------------------------------------------------------

        """
        return _mstransformer.mstransformer_run(self)

    def mergespwtables(self, *args, **kwargs):
        r"""
        mergespwtables(self, _filenames=std::vector< std::string >({})) -> bool


        Summary:
            Merge the spw sub-tables of a list of subMSs.

        Description:


        Merge the spw sub-tables of a list of subMSs.


        Input Parameters:
            filenames                 List of tables/MS names.

        Example:

        mt.mergespwtables([])

        --------------------------------------------------------------------------------

        """
        return _mstransformer.mstransformer_mergespwtables(self, *args, **kwargs)
    __swig_destroy__ = _mstransformer.delete_mstransformer

# Register mstransformer in _mstransformer:
_mstransformer.mstransformer_swigregister(mstransformer)


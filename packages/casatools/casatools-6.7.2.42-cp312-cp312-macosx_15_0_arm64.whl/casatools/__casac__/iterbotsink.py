# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _iterbotsink
else:
    import _iterbotsink

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class iterbotsink(object):
    r"""Proxy of C++ casac::iterbotsink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> iterbotsink"""
        _iterbotsink.iterbotsink_swiginit(self, _iterbotsink.new_iterbotsink())

    def setupiteration(self, *args, **kwargs):
        r"""
        setupiteration(self, _iterpars=initialize_record("")) -> record *


        Summary:
            Set parameters to control iteration mechanisms

        Input Parameters:
            iterpars                  All parameters that control iterations

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_setupiteration(self, *args, **kwargs)

    def cleanComplete(self, *args, **kwargs):
        r"""
        cleanComplete(self, _lastcyclecheck=bool(false), _reachedMajorLimit=bool(false)) -> long


        Summary:
            Return true when we have completed this clean

        Input Parameters:
            lastcyclecheck            Check using peak residual before major cycle.
            reachedMajorLimit         Let the iterbot know if we've reached our desired limit for major cycles.

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_cleanComplete(self, *args, **kwargs)

    def endmajorcycle(self):
        r"""
        endmajorcycle(self) -> bool


        Summary:
            Record the end of a major cycle

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_endmajorcycle(self)

    def resetminorcycleinfo(self):
        r"""
        resetminorcycleinfo(self) -> bool


        Summary:
            Reset info about peak residual and masks, before start minor cycles

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_resetminorcycleinfo(self)

    def getminorcyclecontrols(self):
        r"""
        getminorcyclecontrols(self) -> record *


        Summary:
            Get the controller for a minor cycle

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getminorcyclecontrols(self)

    def mergeexecrecord(self, *args, **kwargs):
        r"""
        mergeexecrecord(self, _execrecord=initialize_record(""), _immod=long()) -> bool


        Summary:
            Update the iterbot with iteration stats from the deconvolver

        Input Parameters:
            execrecord                Pass in the output of synthesisdeconvolver.executeminorcycle()
            immod                     Outlier field id

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_mergeexecrecord(self, *args, **kwargs)

    def changestopflag(self, *args, **kwargs):
        r"""
        changestopflag(self, _stopflag=bool(false)) -> bool


        Summary:
            Change the stop flag (for interactive clean)

        Input Parameters:
            stopflag                  Set to False for the next cleanComplete() check to stop the run

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_changestopflag(self, *args, **kwargs)

    def mergeinitrecord(self, *args, **kwargs):
        r"""
        mergeinitrecord(self, _initrecord=initialize_record(""), _immod=long()) -> bool


        Summary:
            Initialize the iterbot with starting peak residuals

        Input Parameters:
            initrecord                Pass in the output of synthesisdeconvolver.initminorcycle()
            immod                     Outlier field id

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_mergeinitrecord(self, *args, **kwargs)

    def getiterationdetails(self):
        r"""
        getiterationdetails(self) -> record *


        Summary:
            Return a record with the details of the iteration

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getiterationdetails(self)

    def pauseforinteraction(self):
        r"""
        pauseforinteraction(self) -> record *


        Summary:
            Pause for interaction

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_pauseforinteraction(self)

    def getiterationsummary(self):
        r"""
        getiterationsummary(self) -> record *


        Summary:
            Return a record with a summary of the iteration

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getiterationsummary(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_done(self)
    __swig_destroy__ = _iterbotsink.delete_iterbotsink

# Register iterbotsink in _iterbotsink:
_iterbotsink.iterbotsink_swigregister(iterbotsink)


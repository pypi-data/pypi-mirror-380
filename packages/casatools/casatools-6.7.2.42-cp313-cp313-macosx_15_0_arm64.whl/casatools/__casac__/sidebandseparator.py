# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sidebandseparator
else:
    import _sidebandseparator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class sidebandseparator(object):
    r"""Proxy of C++ casac::sidebandseparator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> sidebandseparator"""
        _sidebandseparator.sidebandseparator_swiginit(self, _sidebandseparator.new_sidebandseparator())

    def open(self, *args, **kwargs):
        r"""
        open(self, _imagename=std::vector< std::string >({})) -> bool


        Summary:
            Construct a sideband separator tool

        Description:




        Input Parameters:
            imagename                 A list of image names

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_open(self, *args, **kwargs)

    def close(self):
        r"""
        close(self) -> bool


        Summary:
            Close the sideband separator tool

        Description:


        Close tools and write data to disk. This is a synonym for done.


        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_close(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the sideband separator tool

        Description:


        Close tools and write data to disk. This is a synonym for done.


        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_done(self)

    def setshift(self, *args, **kwargs):
        r"""
        setshift(self, _shift=std::vector< double >({}), _signal=bool(true)) -> bool


        Description:




        Input Parameters:
            shift                     
            signal                    

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setshift(self, *args, **kwargs)

    def setlimit(self, *args, **kwargs):
        r"""
        setlimit(self, _threshold=double(0.2)) -> bool


        Description:




        Input Parameters:
            threshold                 

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setlimit(self, *args, **kwargs)

    def setboth(self, *args, **kwargs):
        r"""
        setboth(self, _getbothside=bool(false)) -> bool


        Description:




        Input Parameters:
            getbothside               

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setboth(self, *args, **kwargs)

    def set_imageband_frequency(self, *args, **kwargs):
        r"""
        set_imageband_frequency(self, _refpix=double(0.0), _refval=Quantity(std::vector<double>(1,-1.0),"Hz")) -> bool


        Description:




        Input Parameters:
            refpix                    
            refval                    

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_set_imageband_frequency(self, *args, **kwargs)

    def setsolveother(self, *args, **kwargs):
        r"""
        setsolveother(self, _subtract_from_other=bool(false)) -> bool


        Description:




        Input Parameters:
            subtract_from_other       

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setsolveother(self, *args, **kwargs)

    def separate(self, *args, **kwargs):
        r"""
        separate(self, _outfile=string(""), _overwrite=bool(false)) -> bool


        Description:




        Input Parameters:
            outfile                   
            overwrite                 

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_separate(self, *args, **kwargs)
    __swig_destroy__ = _sidebandseparator.delete_sidebandseparator

# Register sidebandseparator in _sidebandseparator:
_sidebandseparator.sidebandseparator_swigregister(sidebandseparator)


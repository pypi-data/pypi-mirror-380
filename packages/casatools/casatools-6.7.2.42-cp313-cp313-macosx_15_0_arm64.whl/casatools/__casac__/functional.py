# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _functional
else:
    import _functional

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class functional(object):
    r"""Proxy of C++ casac::functional class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> functional"""
        _functional.functional_swiginit(self, _functional.new_functional())

    def f(self, *args, **kwargs):
        r"""
        f(self, _x=casac::variant( )) -> casac::variant *


        Summary:
            Calculate the value of the functional

        Description:



        Calculate the value of the functional.

        Input Parameters:
            x                         real argument values

        Example:

        gfn = fn.gaussian1d(2, 0, 1)
        #returns 0.125
        gfn.f(1)
        # returns array([  1.25000000e-01,   3.05175781e-05])
        gfn.f([1,2])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_f(self, *args, **kwargs)

    def ndim(self):
        r"""
        ndim(self) -> long


        Summary:
            Get the number of dimensions

        Description:


        Return the number of dimensions.

        Example:

        a = fn.gaussian1d()
        # nd is set to 1
        nd = fn.ndim()

        --------------------------------------------------------------------------------

        """
        return _functional.functional_ndim(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Free resources of the functional

        Description:



        Free the functional's resources.

        Example:

        - a:=dfs.gaussian1d()
        - a.setparameters([2,1,3])
        T
        - a.state()
        [type=0, order=-1, ndim=1, npar=3, params=[2 1 3] , masks=[T T T] ]
        - a.done()
        T
        - is_functional(a)
        F
        - a
        F

        --------------------------------------------------------------------------------

        """
        return _functional.functional_done(self)

    def gaussian1d(self, *args, **kwargs):
        r"""
        gaussian1d(self, _amplitude=double(1), _center=double(0), _fwhm=double(1)) -> functional


        Summary:
            Create and return a new functional tool representing a 1D Gaussian function

        Description:



        Create a 1-dimensional Gaussian with the specified amplitude, fwhm, and
        center.

        Input Parameters:
            amplitude                 amplitude of Gaussian
            center                    center of Gaussian
            fwhm                      FWHM of Gaussian

        Example:

        # get the value and derivatives of a Gaussian with
        # height=2; center at x=1; a width of 1 at x=[0,1,2]
        gfn = fn.gaussian1d(2,1,1)

        # returns array([ 0.125,  2.   ,  0.125])
        vals = gfn.f([0, 1, 2])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_gaussian1d(self, *args, **kwargs)

    def gaussian2d(self, *args, **kwargs):
        r"""
        gaussian2d(self, _amplitude=double(1), _center=std::vector< double >({-1}), _fwhm=std::vector< double >({-1}), _pa=casac::variant( )) -> functional


        Summary:
            Create a 2D Gaussian function

        Description:



        Create a 2-dimensional Gaussian with the specified amplitude, fwhms, and
        center. The created functional has method {em f}  to
        calculate the function value at a series of {em x, y} values, or the
        value.

        Input Parameters:
            amplitude                 Amplitude of Gaussian
            center                    Center (x,y) position. Must have exactly 2 elements.
            fwhm                      FWHM of the axes. Must have exactly 2 elements.
            pa                        The angle between the positive y axis and the major axis, measured counterclockwise.

        Example:

        # major axis along the y axis
        g2d = fn.gaussian2d(1,[0,0],[3,2],'90deg')

        # both these commands return 0.5
        v = g2d([0, 1])
        v = g2d([1.5, 0])

        # returns array([ 0.5,  0.5])
        v =  g2d.f([0,1,1.5,0])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_gaussian2d(self, *args, **kwargs)

    def polynomial(self, *args, **kwargs):
        r"""
        polynomial(self, _coefficients=std::vector< double >({0})) -> functional


        Summary:
            Create and return a new functional tool representing a 1D polynomial function, y = c_0 + c_1*x + c_2*x**2 + ... + c_n*x**n

        Description:



        Create a 1-dimensional polynomial function with the specified coefficents.

        Input Parameters:
            coefficients              Array of coefficients. Number of coefficients determines order of polynomial.

        Example:

        # get the value and derivatives of 3 + 2*x + 4*x*x
        poly = fn.powerlogpoly(3, 2, 4)

        # value at 3
        vals = poly.f(3)

        --------------------------------------------------------------------------------

        """
        return _functional.functional_polynomial(self, *args, **kwargs)

    def powerlogpoly(self, *args, **kwargs):
        r"""
        powerlogpoly(self, _coefficients=std::vector< double >({0})) -> functional


        Summary:
            Create and return a new functional tool representing a 1D power log polynomial function, y = c_0 * x**( c_1 + c_2*ln(x) + c_3*ln(x)**2 + ... c_n*ln(x)**(n-1)

        Description:



        Create a 1-dimensional power log polynomial function with the specified coefficents.

        Input Parameters:
            coefficients              Array of coefficients.

        Example:

        # get the value and derivatives of 2*x**(1+ln(x))
        plp = fn.powerlogpoly(2,1,1)

        # value at 3
        vals = plp.f(3)

        --------------------------------------------------------------------------------

        """
        return _functional.functional_powerlogpoly(self, *args, **kwargs)
    __swig_destroy__ = _functional.delete_functional

# Register functional in _functional:
_functional.functional_swigregister(functional)


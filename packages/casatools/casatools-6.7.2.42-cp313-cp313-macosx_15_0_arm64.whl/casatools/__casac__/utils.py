# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _utils
else:
    import _utils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class utils(object):
    r"""Proxy of C++ casac::utils class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> utils"""
        _utils.utils_swiginit(self, _utils.new_utils())

    def getrc(self, *args, **kwargs):
        r"""
        getrc(self, _rcvar=string("")) -> string


        Input Parameters:
            rcvar                     Returns the value of the rc variable given. If no value is give it returns the root directory of CASA.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_getrc(self, *args, **kwargs)

    def removetable(self, *args, **kwargs):
        r"""
        removetable(self, _tablenames=std::vector< std::string >({})) -> bool


        Input Parameters:
            tablenames                Removes tables safely

        --------------------------------------------------------------------------------

        """
        return _utils.utils_removetable(self, *args, **kwargs)

    def tableinfo(self, *args, **kwargs):
        r"""
        tableinfo(self, _tablename=string("")) -> record *


        Summary:
            Get information about a particular table

        Description:


        Currently this only returns the pid of the process locking the table (lockpid), if the lock
        is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
        or 'unknown'. However, the hope is that this will eventually return a complete description of
        the table.


        Input Parameters:
            tablename                 path to table

        --------------------------------------------------------------------------------

        """
        return _utils.utils_tableinfo(self, *args, **kwargs)

    def lockedtables(self):
        r"""
        lockedtables(self) -> std::vector< std::string >


        Summary:
            get the tables locked by this process

        --------------------------------------------------------------------------------

        """
        return _utils.utils_lockedtables(self)

    def hostinfo(self):
        r"""
        hostinfo(self) -> record *


        Summary:
            returns host information

        --------------------------------------------------------------------------------

        """
        return _utils.utils_hostinfo(self)

    def c_exception(self):
        r"""
        c_exception(self) -> string


        Summary:
            Returns detailed information about last C-level exception

        Description:

        Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
        exception message and the stack trace (mangled; use the shell's c++filt to demangle)
        from the last CASA C++ exception.  The information is from the last one generated
        and may not represent an exception from the last action; c_exception_clear can be
        used to remove stale information.  The information's exception might also
        have been caught in the C++ code and not have been translated into a Python-level
        exception.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_c_exception(self)

    def c_exception_clear(self):
        r"""
        c_exception_clear(self)


        Summary:
            Clears information about last C-level exception

        Description:

        Clears the CASA C++ exception information.  This allows the user to be sure that
        information retrieved using c_exception is not from an exception in the
        distant past.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_c_exception_clear(self)

    def _trigger_segfault(self, *args, **kwargs):
        r"""
        _trigger_segfault(self, _faultType=long(0)) -> bool


        Summary:
            Crashes casa with segfault.

        Description:


        This triggers a segfault for testing the crash reporter.  Obviously you
        shouldn't call this unless that's what you want.  It's in here for
        development/debugging purposes and ought to be removed before you see this.


        Input Parameters:
            faultType                 How to kill the program

        --------------------------------------------------------------------------------

        """
        return _utils.utils__trigger_segfault(self, *args, **kwargs)

    def tryit(self, *args, **kwargs):
        r"""
        tryit(self, _input=initialize_record("")) -> double


        Description:


        test variant convesion

        Input Parameters:
            input                     testing variant

        --------------------------------------------------------------------------------

        """
        return _utils.utils_tryit(self, *args, **kwargs)

    def maxint(self):
        r"""
        maxint(self) -> long


        Description:

        maximum number an C++ int can hold

        --------------------------------------------------------------------------------

        """
        return _utils.utils_maxint(self)

    def minint(self):
        r"""
        minint(self) -> long


        Description:

        minimum number an C++ int can hold

        --------------------------------------------------------------------------------

        """
        return _utils.utils_minint(self)

    def maxlong(self):
        r"""
        maxlong(self) -> long


        Description:

        maximum number an C++ long can hold

        --------------------------------------------------------------------------------

        """
        return _utils.utils_maxlong(self)

    def minlong(self):
        r"""
        minlong(self) -> long


        Description:

        minimum number an C++ long can hold

        --------------------------------------------------------------------------------

        """
        return _utils.utils_minlong(self)

    def initialize(self, *args, **kwargs):
        r"""
        initialize(self, _python_path=string(""), _distro_data_path=string(""), _default_path=std::vector< std::string >({}), _nogui=bool(false), _agg=bool(false), _pipeline=bool(false), _cachedir=string("")) -> bool


        Summary:
            initialize CASAtools

        Description:


        returns true if initalization was performed; returns false if initialization was already done

        Input Parameters:
            python_path               path to python executable
            distro_data_path          path to the data provided by the casadata pkg
            default_path              directories that should constitute the default data path
            nogui                     are guis disabled at startup
            agg                       was the graphical backend disabled at startup
            pipeline                  was the pipeline included at startup
            cachedir                  the cachedir used in configuration at startup

        --------------------------------------------------------------------------------

        """
        return _utils.utils_initialize(self, *args, **kwargs)

    def rundata(self):
        r"""
        rundata(self) -> string


        Summary:
            path to the measures data

        Description:

        path to the measures data. This function is deprecated measurespath should be used instead.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_rundata(self)

    def measurespath(self):
        r"""
        measurespath(self) -> string


        Summary:
            path to the measures data

        Description:

        path to the measures data

        --------------------------------------------------------------------------------

        """
        return _utils.utils_measurespath(self)

    def setrundata(self, *args, **kwargs):
        r"""
        setrundata(self, _path=string(""))


        Summary:
            set path to the measures data

        Description:


        Set path to the measures data. Must be called during initalization
        before Measures module is initialized. This function is deprecated.
        setmeasurespath should be used instead.

        Input Parameters:
            path                      path to IERS data

        --------------------------------------------------------------------------------

        """
        return _utils.utils_setrundata(self, *args, **kwargs)

    def setmeasurespath(self, *args, **kwargs):
        r"""
        setmeasurespath(self, _path=string(""))


        Summary:
            set path to the measures data

        Description:


        Set path to the measures data. Must be called during initalization
        before Measures module is initialized.

        Input Parameters:
            path                      path to IERS data

        --------------------------------------------------------------------------------

        """
        return _utils.utils_setmeasurespath(self, *args, **kwargs)

    def defaultpath(self):
        r"""
        defaultpath(self) -> std::vector< std::string >


        Summary:
            returns the default data path

        Description:


        Returns the default data path. This path is used unless the user has set the current path to something else using the setpath function.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_defaultpath(self)

    def setpath(self, *args, **kwargs):
        r"""
        setpath(self, _dirs=std::vector< std::string >({})) -> bool


        Summary:
            sets the data path to the specified list of directories

        Description:


        Sets the data path to the specified list of directories. Returns true if all directories were added
        returns false otherwise.

        Input Parameters:
            dirs                      directories that should constitute the data path

        --------------------------------------------------------------------------------

        """
        return _utils.utils_setpath(self, *args, **kwargs)

    def getpath(self):
        r"""
        getpath(self) -> std::vector< std::string >


        Summary:
            retrieves the data path

        Description:


        Returns the list of directories that are currently in the data path.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_getpath(self)

    def clearpath(self):
        r"""
        clearpath(self)


        Summary:
            removes all directories from the data path

        Description:


        Removes all directories from the data path.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_clearpath(self)

    def resolve(self, *args, **kwargs):
        r"""
        resolve(self, _path=string("")) -> string


        Summary:
            resolve a complete path from a subdirectory using the data path

        Description:


        If the provided path already represents a file or a directory, it is returned. If it does not,
        this function tries to find a complete path by matching up this partial directory with the
        elements of the data path.

        Input Parameters:
            path                      path to be expanded

        --------------------------------------------------------------------------------

        """
        return _utils.utils_resolve(self, *args, **kwargs)

    def getnogui(self):
        r"""
        getnogui(self) -> bool


        Summary:
            gets the nogui config value

        Description:


        Returns the value of the nogui parameter used at startup. Defaults to False.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_getnogui(self)

    def getagg(self):
        r"""
        getagg(self) -> bool


        Summary:
            gets the agg config value

        Description:


        Returns the value of the agg parameter used at startup. Defaults to False.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_getagg(self)

    def getpipeline(self):
        r"""
        getpipeline(self) -> bool


        Summary:
            gets the pipeline config value

        Description:


        Returns the value of the pipeline parameter used at startup. Defaults to False.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_getpipeline(self)

    def getcachedir(self):
        r"""
        getcachedir(self) -> string


        Summary:
            gets the cachedir config value

        Description:


        Returns the value of the cachedir parameter used at startup.


        --------------------------------------------------------------------------------

        """
        return _utils.utils_getcachedir(self)

    def registry(self):
        r"""
        registry(self) -> record *


        Summary:
            retrieve registry information

        Description:


        returns record containing the URI for the CASAtools registry which can be used by other unix processes to access the registry

        --------------------------------------------------------------------------------

        """
        return _utils.utils_registry(self)

    def services(self):
        r"""
        services(self) -> record *


        Summary:
            retrieve registered services

        Description:


        returns record containing the information about the services that have been registered with CASAtools

        --------------------------------------------------------------------------------

        """
        return _utils.utils_services(self)

    def remove_service(self, *args, **kwargs):
        r"""
        remove_service(self, _uri=string("")) -> bool


        Summary:
            remove a service using its URI

        Description:


        Remove a service from the registry using the URI for the
        service. The URI should be a string that looks something
        like '0.0.0.0:34101'. This function returns true if the
        removal was successful. Otherwise, it returns false.

        Input Parameters:
            uri                       uri (Address) of the service to remove.

        --------------------------------------------------------------------------------

        """
        return _utils.utils_remove_service(self, *args, **kwargs)

    def shutdown(self):
        r"""
        shutdown(self)


        Summary:
            shutdown signal from python

        Description:


        python is shutting down cleanup anything that is outstanding

        --------------------------------------------------------------------------------

        """
        return _utils.utils_shutdown(self)

    def getpython(self):
        r"""
        getpython(self) -> string


        Summary:
            get path to python executable

        --------------------------------------------------------------------------------

        """
        return _utils.utils_getpython(self)

    def version(self):
        r"""
        version(self) -> std::vector< long >


        Summary:
            returns four element vector for the version

        Description:



        Returns a four element vector representing the version (major, minor, patch and feature).

        --------------------------------------------------------------------------------

        """
        return _utils.utils_version(self)

    def version_variant(self):
        r"""
        version_variant(self) -> string


        Summary:
            returns the target instrument f.e. ALMA or VLA

        Description:



        Returns the target instrument. This helps distinguish versions that otherwise may have the same version number

        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_variant(self)

    def version_desc(self):
        r"""
        version_desc(self) -> string


        Summary:
            returns the descriptive version string, e.g. DEV or REL

        Description:



        The descriptive string describes a particular packaged version. During a development
        cycle there are different sorts of packaged distributions. For example, a development
        version ('DEV') or a release version ('REL').

        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_desc(self)

    def version_info(self):
        r"""
        version_info(self) -> string


        Summary:
            Returns the complete version description as a string.

        Description:



        Returns a description string that includes the version information and the descriptive string..

        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_info(self)

    def version_string(self):
        r"""
        version_string(self) -> string


        Summary:
            Returns the complete version description as a string but without the description (i.e. git hash) string.

        Description:



        Returns a description string that includes the version information and the descriptive string..

        --------------------------------------------------------------------------------

        """
        return _utils.utils_version_string(self)

    def compare_version(self, *args, **kwargs):
        r"""
        compare_version(self, _comparitor=string(""), _vec=std::vector< long >({})) -> bool


        Summary:
            Returns the complete version description as a string.

        Description:



        Returns a description string that includes the version information and the descriptive string..

        Input Parameters:
            comparitor                what sort of comparison to do, one of >, <, <=, >=, ==, = !=
            vec                       vector to use to compare current version number against vec

        --------------------------------------------------------------------------------

        """
        return _utils.utils_compare_version(self, *args, **kwargs)
    __swig_destroy__ = _utils.delete_utils

# Register utils in _utils:
_utils.utils_swigregister(utils)


# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _synthesisnormalizer
else:
    import _synthesisnormalizer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class synthesisnormalizer(object):
    r"""Proxy of C++ casac::synthesisnormalizer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> synthesisnormalizer"""
        _synthesisnormalizer.synthesisnormalizer_swiginit(self, _synthesisnormalizer.new_synthesisnormalizer())

    def setupnormalizer(self, *args, **kwargs):
        r"""
        setupnormalizer(self, _normpars=initialize_record("")) -> bool


        Summary:
            Set parameters to control scatter/gather operations

        Input Parameters:
            normpars                  All parameters for gather/scatter. Mainly file names

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_setupnormalizer(self, *args, **kwargs)

    def gatherweightdensity(self):
        r"""
        gatherweightdensity(self) -> bool


        Summary:
            Gather Gridded Weight images

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherweightdensity(self)

    def scatterweightdensity(self):
        r"""
        scatterweightdensity(self) -> string


        Summary:
            Scatter summed Gridded Weight images

        Description:


        scatter sum gridded weight image for continuum Briggs style to other siimagestore
        returns the disk name if it exists

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_scatterweightdensity(self)

    def gatherpsfweight(self):
        r"""
        gatherpsfweight(self) -> bool


        Summary:
            Gather PSFs if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherpsfweight(self)

    def gatherresidual(self):
        r"""
        gatherresidual(self) -> bool


        Summary:
            Gather Residual Imaged if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherresidual(self)

    def dividepsfbyweight(self):
        r"""
        dividepsfbyweight(self) -> bool


        Summary:
            Divide psf by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_dividepsfbyweight(self)

    def makepsfbeamset(self):
        r"""
        makepsfbeamset(self) -> bool


        Summary:
            make the psf beamset and store it in the psf image

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_makepsfbeamset(self)

    def divideweightbysumwt(self):
        r"""
        divideweightbysumwt(self) -> bool


        Summary:
            Divide psf by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_divideweightbysumwt(self)

    def normalizeprimarybeam(self):
        r"""
        normalizeprimarybeam(self) -> bool


        Summary:
            Normalize PB to peak 1

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_normalizeprimarybeam(self)

    def divideresidualbyweight(self, *args, **kwargs):
        r"""
        divideresidualbyweight(self, _singledish=bool(false)) -> bool


        Summary:
            Divide residual by weight

        Input Parameters:
            singledish                

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_divideresidualbyweight(self, *args, **kwargs)

    def dividemodelbyweight(self):
        r"""
        dividemodelbyweight(self) -> bool


        Summary:
            Divide model by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_dividemodelbyweight(self)

    def multiplymodelbyweight(self):
        r"""
        multiplymodelbyweight(self) -> bool


        Summary:
            Multiply model by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_multiplymodelbyweight(self)

    def scattermodel(self):
        r"""
        scattermodel(self) -> bool


        Summary:
            Scatter model if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_scattermodel(self)

    def getimstore(self):
        r"""
        getimstore(self) -> casac::synthesisimstore *


        Summary:
            Get Image store

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_getimstore(self)

    def unlockimages(self):
        r"""
        unlockimages(self) -> bool


        Summary:
            unlock the images held by this normalizer

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_unlockimages(self)

    def setimstore(self, _imstore=None):
        r"""
        setimstore(self, _imstore=None) -> bool


        Summary:
            Set ImageStore

        Input Parameters:
            imstore                   Image Store object

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_setimstore(self, _imstore)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_done(self)
    __swig_destroy__ = _synthesisnormalizer.delete_synthesisnormalizer

# Register synthesisnormalizer in _synthesisnormalizer:
_synthesisnormalizer.synthesisnormalizer_swigregister(synthesisnormalizer)


# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _msmetadata
else:
    import _msmetadata

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class msmetadata(object):
    r"""Proxy of C++ casac::msmetadata class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> msmetadata"""
        _msmetadata.msmetadata_swiginit(self, _msmetadata.new_msmetadata())

    def almaspws(self, *args, **kwargs):
        r"""
        almaspws(self, _chavg=bool(false), _fdm=bool(false), _sqld=bool(false), _tdm=bool(false), _wvr=bool(false), _complement=bool(false)) -> std::vector< long >


        Summary:
            Get a list of spectral window IDs with ALMA-specific attributes.

        Description:


        Get spectral window IDs based on ALMA-specific criteria. The inputs are or'ed together
        to form the returned list. If complement=True, then the complement of the selection
        is returned.

        If the SPECTRAL_WINDOW table has the optional BBC_NO column and if the name
        of the spectral window matches the regular expression 'BB_[0-9]#SQLD', where
        [0-9] indicates that a single integer matches, the window is classified as
        a *square law detector spectral window*.

        The following algorithm is used to identify WVR spwectral windows:

        1. check for water vapor radiometer (WVR) spectral windows using the spectral window
        name 'WVR#NOMINAL' and report these.
        2. If no SPWs match that string, then the names are checked for 'WVR' and are reported instead.

        If the window is not found to be a WVR window, it is then checked if

        The window is classified as a *channel average spectral window* if it is not
        a WVR window, if the number of channels is one, and the spectral window name
        does not contain the string 'FULL_RES'

        The window is classified as an *FDM window* if it is neither a WVR window nor
        a channel average window and if either

        1. its bandwidth is less than 2 GHz, or
        2. the number of channels it contains is greater than or equal to 15 but not
        equal to 256, 128, 64, 32, 16, 248, 124, 62, or 31, or
        3. the product of the number of polarizations and the number of
        channels it contains exceeds 256.

        The window is classified as a *TDM spectral window* if it is neither a WVR window,
        a channel average window, nor an FDM window.



        Input Parameters:
            chavg                     Get channel average spectral windows?
            fdm                       Get FDM spectral windows?
            sqld                      Get square law (i.e. total power) detector spectral windows?
            tdm                       Get TDM spectral windows?
            wvr                       Get WVR spectral windows?
            complement                Return the complement of the selected set?

        Example:

        msmd.open('my.ms')
        # get all square law detector spectral window IDs
        msmd.almaspws(sqld=True)
        # get all spectral window IDs other than those associated with square law detectors
        msmd.almaspws(sqld=True, complement=True)

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_almaspws(self, *args, **kwargs)

    def antennadiameter(self, *args, **kwargs):
        r"""
        antennadiameter(self, _antenna=casac::variant( )) -> record *


        Summary:
            Get the diameter for the specified antenna.

        Description:


        Get the diameter for the specified antenna. The antenna can be specified either by
        its zero-based ID from the ANTENNA table or by its name in that table. The returned
        dictionary is a valid quantity. If a negative integer is provided for the antenna, then
        all atenna diameters will be returned in a dictionary that has keys that are the antenna IDs
        and values that are dictionaries, each being a valid quantity representing the diameter for
        that antenna ID.


        Input Parameters:
            antenna                   Zero-based antenna in the ANTENNA table, or antenna name. A negative integer will cause all antenna diameters to be returned.

        Example:

        msmd.open('my.ms')
        # Get the diameter of the antenna named 'VB2'
        diameter = msmd.antennadiameter('VB2')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennadiameter(self, *args, **kwargs)

    def antennaids(self, *args, **kwargs):
        r"""
        antennaids(self, _name=casac::variant( ), _mindiameter=casac::variant( ), _maxdiameter=casac::variant( ), _obsid=long(-1)) -> std::vector< long >


        Summary:
            Get the zero-based antenna ID for the specfied antenna name.

        Description:


        Get the zero-based antenna IDs for the specfied antenna names and the specified diameter
        range for the specified observation ID. An array of unique IDs in order of the specified names is returned.
        Note that if a specified name is listed mulitple times in the ANTENNA table, the largest
        ID is returned, unless the observation ID is specified to be non-negative, in which case, the
        returned IDs are filtered based on the specified observation ID.
        If no names and no diameter range is specified, all IDs are returned.


        Input Parameters:
            name                      Antenna names (string or string array) for which to get the corresponding IDs. Note that * matches any number of characters of all character classes.
            mindiameter               Minimum antenna diameter, expressed as a quantity.
            maxdiameter               Maximum antenna diameter, expressed as a quantity.
            obsid                     Observation ID. If negative, all observation IDs are considered.

        Example:

        msmd.open('my.ms')
        # get the zero-based antenna IDs for the antenna named 'VB2'
        antenna_id = msmd.antennaids('VB2')[0]
        # get the zero-based antenna IDs for all antennas with diameters between 9m and 11m
        antenna_ids = msmd.antennaids(mindiameter='9m', maxdiameter=qa.quantity('11m'))
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennaids(self, *args, **kwargs)

    def antennanames(self, *args, **kwargs):
        r"""
        antennanames(self, _antennaids=casac::variant( )) -> std::vector< std::string >


        Summary:
            Get the names of the antennas for the specfied zero-based antenna IDs.

        Description:


        Get the name of the antenna for the specfied zero-based antenna ID. If antennaids is not specified,
        all antenna names are returned.


        Input Parameters:
            antennaids                Zero-based antenna IDs (int or int array) for which to get the antenna names.

        Example:

        msmd.open('my.ms')
        # get the name associated with antenna ID 31
        antenna_name = msmd.antennanames(31)[0]
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennanames(self, *args, **kwargs)

    def antennaoffset(self, *args, **kwargs):
        r"""
        antennaoffset(self, _which=casac::variant( )) -> record *


        Summary:
            Get the offset position of the specified antenna relative to the array reference position.

        Description:


        Get the offset position of the specified antenna relative to the array reference position. Antenna may
        be specified as a zero-based integer (row number in the ANTENNA table) or a string representing a valid
        antenna name. The returned
        record contains the longitude, latitude, and elevation offsets as quantity records. The reported longitude and
        latitude offsets are measured along the surface of a sphere whose center is coincident with the center of
        the earth and whose surface contains the observatory reference position.


        Input Parameters:
            which                     Zero-based antenna in the ANTENNA table, or antenna name.

        Example:

        msmd.open('my.ms')
        # get the offset of the (zero-based) 3rd antenna in the ANTENNA table
        antennna_offset = msmd.antennaoffset(3)
        # get the offset of antenna DV02
        antennna_offset = msmd.antennaoffset('DV02')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennaoffset(self, *args, **kwargs)

    def antennaposition(self, *args, **kwargs):
        r"""
        antennaposition(self, _which=casac::variant( )) -> record *


        Summary:
            Get the position of the specified antenna.

        Description:


        Get the position of the specified antenna. The returned record represents a position measure,
        and can be used as such by the measures (me) tool.


        Input Parameters:
            which                     Zero-based antenna ID in the ANTENNA table or antenna name.

        Example:

        msmd.open('my.ms')
        # get the position of the (zero-based) 3rd antenna in the ANTENNA table
        antennna_position = msmd.antennaposition(3)
        # get the position of the antenna named DV07
        antennna_position = msmd.antennaposition('DV07')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennaposition(self, *args, **kwargs)

    def antennastations(self, *args, **kwargs):
        r"""
        antennastations(self, _which=casac::variant( ), _obsid=long(-1)) -> std::vector< std::string >


        Summary:
            Get the station names of the specified antennas.

        Description:


        Get the station names of the specified antennas. If a specified antenna name is listed multiple
        times in the ANTENNA table, obsid is negative, and which is specified as an array of names, then
        the station associated with the largest ID for that antenna is returned. If obsid is nonnegative,
        returned stations are filtered based on that. If which is specified as a string (antenna name),
        then all the stations associated with that antenna are returned.


        Input Parameters:
            which                     Zero-based antenna ID(s) in the ANTENNA table or antenna name(s). Single numeric id less than zero retrieves all station names.
            obsid                     Observation ID. If negative, all observation IDs are considered.

        Example:

        msmd.open('my.ms')
        # get all station names
        stations = msmd.antennastations(-1)
        # get the stations of the antennas named DV07 and DV01
        stations = msmd.antennaposition(['DV07', 'DV01'])
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennastations(self, *args, **kwargs)

    def antennasforscan(self, *args, **kwargs):
        r"""
        antennasforscan(self, _scan=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique antenna IDs for the specified scan, obsservation ID, and array ID.

        Description:


        Get an array of the unique antennaIDs for the specified scan, observation ID, and array ID.


        Input Parameters:
            scan                      Scan number for which to return the intents.
            obsid                     Observation ID. If less than 0, all observation IDs are used.
            arrayid                   Array ID. If less than 0, all array IDs are used.

        Example:

        msmd.open('my.ms')
        # get the antennas associated with scan 4 (all observation IDs, all array IDs)
        antennas = msmd.antennasforscan(4)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_antennasforscan(self, *args, **kwargs)

    def bandwidths(self, *args, **kwargs):
        r"""
        bandwidths(self, _spw=casac::variant( )) -> casac::variant *


        Summary:
            Get the bandwidths in Hz for the specified spectral windows. If spw less than zero, return bandwidths for all spectral windows.

        Description:


        Get the bandwidths in Hz for the specified spectral windows. If spw less than zero, return bandwidths for all spectral windows.


        Input Parameters:
            spw                       Spectral window IDs, if integer less than zero, return bandwidths for all spectral windows.

        Example:

        msmd.open('my.ms')
        # get bandwdith for spectral window 2.
        baseband = msmd.bandwidth(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_bandwidths(self, *args, **kwargs)

    def baseband(self, *args, **kwargs):
        r"""
        baseband(self, _spw=long(0L)) -> long


        Summary:
            Get the baseband for the specified spectral window.

        Description:


        Get the baseband for the specified spectral window.


        Input Parameters:
            spw                       Spectral window ID.

        Example:

        msmd.open('my.ms')
        # get baseband for spectral window 2.
        baseband = msmd.baseband(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_baseband(self, *args, **kwargs)

    def baselines(self):
        r"""
        baselines(self) -> casac::variant *


        Summary:
            Get a two dimensional boolean array representing baselines for data recorded in the MS.

        Description:


        Get a two dimensional boolean array representing baselines for data recorded in the MS. A value of True means
        there is at least one row in the MS main table for that baseline, False means no rows for that baseline. Autocorrelation
        'baseline' information is also present via the values along the diagonal.


        Example:

        msmd.open('my.ms')
        # get the baseline matrix for this data set
        baselines = msmd.baselines()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_baselines(self)

    def chanavgspws(self):
        r"""
        chanavgspws(self) -> std::vector< long >


        Summary:
            Get an array of spectral window IDs used for channel averages. These are windows that do have 1 channel.

        Description:



        Get an array of spectral window IDs used for channel averages. These are windows that do have 1 channel.


        Example:

        msmd.open('my.ms')
        # get the spectral window IDs used for channel averages.
        chan_avg_spws = msmd.chanavgspws()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_chanavgspws(self)

    def chaneffbws(self, *args, **kwargs):
        r"""
        chaneffbws(self, _spw=long(0L), _unit=string(""), _asvel=bool(false)) -> std::vector< double >


        Summary:
            Get an array of channel effective bandwidths for the specified spectral window.

        Description:


        Get an array of channel effective bandwidths for the specified spectral window. The parameter
        asvel indicates if velocity widths (True) or frequency widths (False) should be returned.
        The unit parameter specifies the units that the returned values should have. If empty (default),
        'Hz' will be used if asvel=False, or 'km/s' will be used if asvel=True.


        Input Parameters:
            spw                       Spectral window ID.
            unit                      Desired unit of returned quantities. Empty means 'Hz' if asvel=False, 'km/s' if asvel=True.
            asvel                     Should return values be equivalent velocity widths?

        Example:

        msmd.open('my.ms')
        # get the channel effective bandwidths for spectral window 2, in m/s
        chan_ebw = msmd.chaneffbws(2, 'm/s', True)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_chaneffbws(self, *args, **kwargs)

    def chanfreqs(self, *args, **kwargs):
        r"""
        chanfreqs(self, _spw=long(0L), _unit=string("Hz")) -> std::vector< double >


        Summary:
            Get an array of channel frequencies for the specified spectral window.

        Description:


        Get an array of channel frequencies for the specified spectral window.


        Input Parameters:
            spw                       Spectral window ID.
            unit                      Convert frequencies to this unit.

        Example:

        msmd.open('my.ms')
        # get the channel frequencies for spectral window 2.
        chan_freqs = msmd.chanfreqs(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_chanfreqs(self, *args, **kwargs)

    def chanres(self, *args, **kwargs):
        r"""
        chanres(self, _spw=long(0L), _unit=string(""), _asvel=bool(false)) -> std::vector< double >


        Summary:
            Get an array of channel resolutions for the specified spectral window.

        Description:


        Get an array of channel resolutions for the specified spectral window. The parameter
        asvel indicates if velocity widths (True) or frequency widths (False) should be returned.
        The unit parameter specifies the units that the returned values should have. If empty (default),
        'Hz' will be used if asvel=False, or 'km/s' will be used if asvel=True.


        Input Parameters:
            spw                       Spectral window ID.
            unit                      Desired unit of returned quantities. Empty means 'Hz' if asvel=False, 'km/s' if asvel=True.
            asvel                     Should return values be equivalent velocity resolutions?

        Example:

        msmd.open('my.ms')
        # get the channel resolutions for spectral window 2, in m/s
        chan_res = msmd.chanres(2, 'm/s', True)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_chanres(self, *args, **kwargs)

    def chanwidths(self, *args, **kwargs):
        r"""
        chanwidths(self, _spw=long(0L), _unit=string("Hz")) -> std::vector< double >


        Summary:
            Get an array of channel widths for the specified spectral window.

        Description:


        Get an array of channel widths for the specified spectral window.


        Input Parameters:
            spw                       Spectral window ID.
            unit                      Convert frequencies to this unit.

        Example:

        msmd.open('my.ms')
        # get the channel widths for spectral window 2.
        chan_freqs = msmd.chanwidths(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_chanwidths(self, *args, **kwargs)

    def close(self):
        r"""
        close(self) -> bool


        Summary:
            Close this tool and reclaim system resources associated with it.

        Description:


        This method will close the tool and reclaim system resources it has been using. Returns true if successful.


        Example:

        msmd.open('my.ms')
        # do things with tool
        # finish, close tool and free up resources.
        msmd.close()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_close(self)

    def corrbit(self, *args, **kwargs):
        r"""
        corrbit(self, _spw=casac::variant( )) -> casac::variant *


        Summary:
            Get the value of the SPECTRAL_WINDOW::SDM_CORR_BIT column for the specified spw.

        Description:


        Get the value of SPECTRAL_WINDOW::SDM_CORR_BIT column for the specified spw.
        If spw >= 0 is specified, a string value is returned. If spw <0, a list
        of string values with length equal to the number of spectral windows is returned.
        If the SPECTRAL_WINDOW::SDM_CORR_BIT column does not exist, either
        'UNKNOWN' is returned if spw>=0, or a list with nspw entries of
        'UNKNOWN' is returned if spw<0. A list of integers may also be
        supplied for the spw parameter. In this case, all integers should be in the
        range [0, spw-1] or an exception will be thrown. The return value will
        be a list containing the corresponding CORR_BIT values in the order
        of the spws specified.


        Input Parameters:
            spw                       Spectral window ID(s). May be an integer or list of integers. If integer, <0 implies all.

        Example:

        msmd.open('my.ms')
        # get value of SPECTRAL_WINDOW::SDM_CORR_BIT column for spw=2.
        cb = msmd.corrbit(spw=2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_corrbit(self, *args, **kwargs)

    def corrprodsforpol(self, *args, **kwargs):
        r"""
        corrprodsforpol(self, _pol=long(-1)) -> casac::variant *


        Summary:
            Get the correlation products associated with the specified polarization ID

        Description:


        Get the correlation products associated with the specified polarization ID.


        Input Parameters:
            pol                       Polarization ID. Must be nonnegative.

        Example:

        msmd.open('my.ms')
        # get correlation products for polarization ID 3
        corrprods = msmd.corrprodsforpol(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_corrprodsforpol(self, *args, **kwargs)

    def corrtypesforpol(self, *args, **kwargs):
        r"""
        corrtypesforpol(self, _pol=long(-1)) -> std::vector< long >


        Summary:
            Get the correlation types associated with the specified polarization ID

        Description:


        Get the correlation types associated with the specified polarization ID.


        Input Parameters:
            pol                       Polarization ID. Must be nonnegative.

        Example:

        msmd.open('my.ms')
        # get correlation types for polarization ID 3
        corrtypes = msmd.corrtypesforpol(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_corrtypesforpol(self, *args, **kwargs)

    def datadescids(self, *args, **kwargs):
        r"""
        datadescids(self, _spw=long(-1), _pol=long(-1)) -> std::vector< long >


        Summary:
            Get the data description IDs associated with the specified spectral window and/or polarization ID

        Description:


        Get a list of data description IDs associated with the specified spectral window ID
        and/or polarization ID. Values of less than zero for either means all IDs should be used
        in the selection.


        Input Parameters:
            spw                       Spectral window ID. Less than zero implies any,
            pol                       Polarization ID. Less than zero implies any.

        Example:

        msmd.open('my.ms')
        # get all data description IDs associated with spw 2.
        msmd.datadescids(spw=2)
        # same as before but limit the IDs returned to those associated with
        # polarization ID 3
        msmd.datadescids(spw=2, pol=3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_datadescids(self, *args, **kwargs)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close this tool and reclaim system resources associated with it.

        Description:


        This method will close the tool and reclaim system resources it has been using. Returns true if successful.


        Example:

        msmd.open('my.ms')
        # do things with tool
        # finish, close tool and free up resources.
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_done(self)

    def effexposuretime(self):
        r"""
        effexposuretime(self) -> record *


        Summary:
            Get the effective exposure (on-source integration time)

        Description:


        Get the effective exposure time (equivalent to what might be more commonly known as total integration
        time or total sample time) is calculated by summing over all rows in the main MS table, excluding
        autocorrelations or rows where FLAG_ROW is false, thusly:

        sum[over i] (exposure[i]*sum[over j](UFBW[i, j])/ncorrelations[i] )/ nmaxbaselines

        where exposure[i] is the value of EXPOSURE for the ith row, the inner sum is performed over each correlation
        for that row, UFBW is the unflagged fractional bandwidth is determined by summing all the widths of the
        unflagged channels for that correlation and dividing by the total bandwidth of all spectral windows observed
        at the timestamp of row i, ncorrelations is the number of correlations determined by the number of rows in
        the FLAG matrix for MS row i, and nmaxbaselines is the maximum number of antenna pairs,
        nantennas*(nantennas-1)/2, where nantennas is the number of antennas in the ANTENNA table. This method returns
        a quantity (a dictionary having a numerical value and a string unit).


        Example:

        msmd.open('my.ms')
        # get the effective exposure time.
        exposure_time = msmd.effexposuretime()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_effexposuretime(self)

    def exposuretime(self, *args, **kwargs):
        r"""
        exposuretime(self, _scan=long(0), _spwid=long(0), _polid=long(-1), _obsid=long(0), _arrayid=long(0)) -> record *


        Summary:
            Get the exposure time for the specified scan, spwid, polarization ID, array ID, and observation ID.

        Description:


        Get the exposure time for the specified scan, spwid, polarization ID, array ID, and observation ID.
        This is the exposure time of the record with the lowest time stamp of the records associated with
        these parameters. Returns a quantity dictionary. If polid is not specified (or specified and negative)
        and there is only one polarization ID in for the specified combination of scan, spwid, obsID, and
        arrayID, then that polarization ID is used. If there are multiple polarization IDs for the
        combination of other parameters, a list of these is logged and an empty dictionary is returned.


        Input Parameters:
            scan                      Scan number.
            spwid                     Spectral window ID.
            polid                     Polarization ID.
            obsid                     Observation ID.
            arrayid                   Array ID.

        Example:

        msmd.open('my.ms')
        # get the exposure time for scan 1, spwid 2, and polid 3
        # for obsid=0 and arrayid=0
        integration_time = msmd.exposuretime(scan=1, spwid=2, polid=3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_exposuretime(self, *args, **kwargs)

    def fdmspws(self):
        r"""
        fdmspws(self) -> std::vector< long >


        Summary:
            Get an array of spectral window IDs used for FDM.

        Description:


        Get an array of spectral window IDs used for FDM. These windows
        are defined by the rules in the description of the method
        almaspws().


        Example:

        msmd.open('my.ms')
        # get the spectral window IDs used for FDM.
        fdm_spws = msmd.fdmspws()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fdmspws(self)

    def fieldnames(self):
        r"""
        fieldnames(self) -> std::vector< std::string >


        Summary:
            Get an array of field names as they appear in the FIELD table.

        Description:


        Get an array of field names as they appear in the FIELD table.


        Example:

        msmd.open('my.ms')
        # get list of field names in the ms
        fieldnames = msmd.fieldnames()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldnames(self)

    def fieldsforintent(self, *args, **kwargs):
        r"""
        fieldsforintent(self, _intent=string(""), _asnames=bool(false)) -> casac::variant *


        Summary:
            Get an array of the unique fields for the specified intent.

        Description:


        Get an array of the unique fields for the specified intent. Note that * matches any number of characters of all character classes.


        Input Parameters:
            intent                    Intent (case sensitive) for which to return the fields.
            asnames                   If true, return the field names. If false, return the zero-based field IDs.

        Example:

        msmd.open('my.ms')
        # get the field names for intent 'observe target'
        field_names = msmd.fieldsforintent('observe target', True, regex=False)
        # get the field IDs for intent 'observe target'
        field_IDs = msmd.fieldsforintent('observe target', False, regex=False)
        # get all field IDs for all intents which contain 'WVR'
        field_IDs = msmd.fieldsforIntent('*WVR*')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforintent(self, *args, **kwargs)

    def fieldsforname(self, *args, **kwargs):
        r"""
        fieldsforname(self, _name=string("")) -> std::vector< long >


        Summary:
            Get an array of the unique, zero-based field IDs for the specified field name.

        Description:


        Get an array of the unique, zero-based field IDs for the specified field name. If the field name is the
        empty string (the default), a list of all unique field IDs in the main table of the MS will be returned.


        Input Parameters:
            name                      Field name (case sensitive) for which to return the fields.

        Example:

        msmd.open('my.ms')
        # get the field IDs for field name 'Enceladus'
        fields = msmd.fieldsforname('Enceladus')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforname(self, *args, **kwargs)

    def fieldsforscan(self, *args, **kwargs):
        r"""
        fieldsforscan(self, _scan=long(-1), _asnames=bool(false), _obsid=long(-1), _arrayid=long(-1)) -> casac::variant *


        Summary:
            Get an array of the unique fields for the specified scan number, observation ID, and array ID.

        Description:


        Get an array of the unique fields for the specified scan number, observation ID, and array ID.


        Input Parameters:
            scan                      Scan number for which to return the fields.
            asnames                   If true, return the field names. If false, return the zero-based field IDs.
            obsid                     Observation ID. A negative value means use all observation IDs.
            arrayid                   Array ID. A negative value means use all array IDs.

        Example:

        msmd.open('my.ms')
        # get the field names for scan number 5 (for all array IDs and all observation IDs).
        field_names = msmd.fieldsforscan(5, True)
        # get the field IDs for scan number 5 (for all array IDs and all observation IDs)
        field_IDs = msmd.fieldsforscan(5, False)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforscan(self, *args, **kwargs)

    def fieldsforscans(self, *args, **kwargs):
        r"""
        fieldsforscans(self, _scans=std::vector< long >({}), _asnames=bool(false), _obsid=long(-1), _arrayid=long(-1), _asmap=bool(false)) -> casac::variant *


        Summary:
            Get an array or dictionary of the unique fields for the specified scan numbers, observationID, and array ID.

        Description:


        Get an array or dictionary of the unique fields for the specified scan numbers, observation ID, and array ID.
        If asnames=True, the values returned will be the field names, if False, they will be field IDs.
        If asmap=True, the structure returned will be a dictionary which maps scan number (as a string) to fields.
        In this case, both obsid and arrayid must be nonnegative. If asmap=False, a single array of fields is returned
        that matches the query. In this case, if obsid and/or arrayid are negative, then it indicates that all
        fields matching any obsid and/or arrayid should be returned. An empty array specified for scans means
        that all scans for the selected obsid and arrayid should be included.


        Input Parameters:
            scans                     Scan numbers for which to return the fields.
            asnames                   If true, return the field names. If false, return the zero-based field IDs.
            obsid                     Observation ID. A negative value means use all observation IDs.
            arrayid                   Array ID. A negative value means use all array IDs.
            asmap                     Return a dictionary mapping scan numbers to fields?

        Example:

        msmd.open('my.ms')
        # get the field names for scan numbers 5 and 10 (all obsids, all arrayids)
        field_names = msmd.fieldsforscan([5, 10], True)
        # get the field IDs for scan numbers 5 and 10 (all obsids, all arrayids)
        field_IDs = msmd.fieldsforscan([5, 10], False)
        # get mapping of scans to fields for arrayid=2 and obsid=4
        scans_to_fields = msmd.fieldsforscan(obsid=4, arrayid=2, asmap=True)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforscans(self, *args, **kwargs)

    def fieldsforsource(self, *args, **kwargs):
        r"""
        fieldsforsource(self, _source=long(-1), _asnames=bool(false)) -> casac::variant *


        Summary:
            Get an array of the unique fields for the specified source ID.

        Description:


        Get an array of the unique fields for the specified source.


        Input Parameters:
            source                    Zero-based source ID for which to return the fields.
            asnames                   If true, return the field names. If false, return the zero-based field IDs.

        Example:

        msmd.open('my.ms')
        # get the field names for source ID 1
        field_names = msmd.fieldsforsource(1, True)
        # get the field IDs for source ID 1
        field_IDs = msmd.fieldsforsource(1, False)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforsource(self, *args, **kwargs)

    def fieldsforsources(self, *args, **kwargs):
        r"""
        fieldsforsources(self, _asnames=bool(false)) -> record *


        Summary:
            Get a map of source IDs to fields.

        Description:


        Get a map of source IDs to fields. The keys (source IDs) will be strings.


        Input Parameters:
            asnames                   If true, return the field names. If false, return the zero-based field IDs.

        Example:

        msmd.open('my.ms')
        # get the source to field name map
        sources_to_fields = msmd.fieldsforsources(True)
        # access the field names for source 1
        field = sources_to_fields['1']
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforsources(self, *args, **kwargs)

    def fieldsforspw(self, *args, **kwargs):
        r"""
        fieldsforspw(self, _spw=long(-1), _asnames=bool(false)) -> casac::variant *


        Summary:
            Get an array of the unique fields for the specified spectral window.

        Description:


        Get an array of the unique fields for the specified spectral window.


        Input Parameters:
            spw                       Zero-based spectral window ID for which to return the fields.
            asnames                   If true, return the field names. If false, return the zero-based field IDs.

        Example:

        msmd.open('my.ms')
        # get the field names for spectral window 1
        field_names = msmd.fieldsforspw(1, True)
        # get the field IDs for spectral window 1
        field_IDs = msmd.fieldsforspw(1, False)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsforspw(self, *args, **kwargs)

    def fieldsfortimes(self, *args, **kwargs):
        r"""
        fieldsfortimes(self, _time=double(-1), _tol=double(0)) -> std::vector< long >


        Summary:
            Get an array of the unique, zero-based, field IDs for the specified time range (time-tol to time+tol).

        Description:


        Get an array of the unique, zero-based, fieldIDs for the specified time range (time-tol to time+tol).


        Input Parameters:
            time                      Time at center of time range.
            tol                       Time on either side of center for specifying range.

        Example:

        msmd.open('my.ms')
        # get the field IDs associated with the specified time range
        fields = msmd.fieldsfortimes(4.8428293714e+09, 20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_fieldsfortimes(self, *args, **kwargs)

    def intents(self):
        r"""
        intents(self) -> std::vector< std::string >


        Summary:
            Get an array of the unique intents associated with the MS.

        Description:


        Get an array of the unique intents associated with the MS.


        Example:

        msmd.open('my.ms')
        # get the intents associated with the MS
        intents = msmd.intents()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_intents(self)

    def intentsforfield(self, *args, **kwargs):
        r"""
        intentsforfield(self, _field=casac::variant( )) -> std::vector< std::string >


        Summary:
            Get an array of the unique intents for the specified field.

        Description:


        Get an array of the unique intents for the specified field.


        Input Parameters:
            field                     Field ID or name for which to return the intents.

        Example:

        msmd.open('my.ms')
        # get the intents associated with field 4
        intents = msmd.intentsforfield(4)
        # get intents for field 'MOS'
        intents2 = msmd.intentsforfield('MOS')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_intentsforfield(self, *args, **kwargs)

    def intentsforscan(self, *args, **kwargs):
        r"""
        intentsforscan(self, _scan=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< std::string >


        Summary:
            Get an array of the unique intents for the specified scan, obsservation ID, and array ID.

        Description:


        Get an array of the unique intents for the specified scan, observation ID, and array ID.


        Input Parameters:
            scan                      Scan number for which to return the intents.
            obsid                     Observation ID. A negative value means use all observation IDs.
            arrayid                   Array ID. A negative value means use all array IDs.

        Example:

        msmd.open('my.ms')
        # get the intents associated with scan 4 (all obsids, all arrayids)
        intents = msmd.intentsforscan(4)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_intentsforscan(self, *args, **kwargs)

    def intentsforspw(self, *args, **kwargs):
        r"""
        intentsforspw(self, _spw=long(-1)) -> std::vector< std::string >


        Summary:
            Get an array of the unique intents for the specified spectral window ID.

        Description:


        Get an array of the unique intents for the specified spectral window ID.


        Input Parameters:
            spw                       Spectral window ID (>=0) for which to return the intents.

        Example:

        msmd.open('my.ms')
        # get the intents associated with spectral window ID 3
        intents = msmd.intentsforspw(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_intentsforspw(self, *args, **kwargs)

    def meanfreq(self, *args, **kwargs):
        r"""
        meanfreq(self, _spw=long(0L), _unit=string("Hz")) -> double


        Summary:
            Get the mean frequency for the specified spectral window.

        Description:


        Get the mean frequency for the specified spectral window.


        Input Parameters:
            spw                       Spectral window ID.
            unit                      Convert frequencies to this unit.

        Example:

        msmd.open('my.ms')
        # get the mean frequency for spectral window 2.
        mean_freq = msmd.meanfreq(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_meanfreq(self, *args, **kwargs)

    def name(self):
        r"""
        name(self) -> string


        Summary:
            Get the name of the attached MS.

        Description:


        Get the name of the attached MS.


        Example:

        msmd.open('my.ms')
        # get its name
        myname = msmd.name()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_name(self)

    def namesforfields(self, *args, **kwargs):
        r"""
        namesforfields(self, _fieldids=casac::variant( )) -> std::vector< std::string >


        Summary:
            Get the name of the specified field.

        Description:


        Get the name of the specified field.


        Input Parameters:
            fieldids                  Zero-based field IDs for which to get the names (integer or interger array). Unspecified will return all field names.

        Example:

        msmd.open('my.ms')
        # get the name for field 8 and 2.
        field_names = msmd.namesforfields([8, 2])
        # get all field names
        all_field_nams = namesforfields()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_namesforfields(self, *args, **kwargs)

    def namesforspws(self, *args, **kwargs):
        r"""
        namesforspws(self, _spwids=casac::variant( )) -> std::vector< std::string >


        Summary:
            Get the name of the specified spws.

        Description:


        Get the name of the specified spw(s).


        Input Parameters:
            spwids                    Zero-based spw ID(s) for which to get the names (integer or interger array). Unspecified will return all spw names.

        Example:

        msmd.open('my.ms')
        # get the name for spws 8 and 2.
        spw_names = msmd.namesforspws([8, 2])
        # get all spw names
        all_spw_names = msmd.namesforspws()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_namesforspws(self, *args, **kwargs)

    def nantennas(self):
        r"""
        nantennas(self) -> long


        Summary:
            Get the number of antennas associated with the MS.

        Description:


        Get the number of antennas associated with the MS.


        Example:

        msmd.open('my.ms')
        number_of_antennas = msmd.nantennas()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nantennas(self)

    def narrays(self):
        r"""
        narrays(self) -> long


        Summary:
            Get the number of arrays associated with the MS from the ARRAY table.

        Description:


        Get the number of arrays associated with the MS from the ARRAY table.


        Example:

        msmd.open('my.ms')
        number_of_array_ids = msmd.narrays()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_narrays(self)

    def nbaselines(self, *args, **kwargs):
        r"""
        nbaselines(self, _ac=bool(false)) -> long


        Summary:
            Get the number of baselines represented in the main MS table.

        Description:


        Get the number of unique baselines (antenna pairs) represented in the main MS table. This can, in theory, be less than
        n*(n-1)/2 (n being the number of antennas in the ANTENNA table), if data for certain baselines
        are not included in the main MS table. Autocorrelation 'baselines' are included in this count if ac=True.


        Input Parameters:
            ac                        Include auto-correlation 'baselines'?

        Example:

        msmd.open('my.ms')
        number_of_baselines = msmd.nbaselines()
        number_of_baselines_including_ac = msmd.nbaselines(True)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nbaselines(self, *args, **kwargs)

    def nchan(self, *args, **kwargs):
        r"""
        nchan(self, _spw=long(0L)) -> long


        Summary:
            Get the number of channels associated with the specified spectral window.

        Description:


        Get the number of channels associated with the specified spectral window.


        Input Parameters:
            spw                       Zero-based spw ID for which to get the number of channels.

        Example:

        msmd.open('my.ms')
        nchan = msmd.nchan(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nchan(self, *args, **kwargs)

    def ncorrforpol(self, *args, **kwargs):
        r"""
        ncorrforpol(self, _polid=long(-1)) -> casac::variant *


        Summary:
            Get the number of correlations for the specified polarization ID.

        Description:


        Get the number of correlations for the specified polarization ID. If the specified polarization ID
        is negative, an array of numbers of correlations is returned. The indices of that array represent polarization IDs.


        Input Parameters:
            polid                     Zero-based polarization ID. A negative number will cause all the numbers of correlations to be returned.

        Example:

        msmd.open('my.ms')
        # get the number of correlations associated with polarization ID 4
        polid = msmd.ncorrforpol(4)
        # get the array of numbers of correlations from the POLARIZATION table
        polids = msmd.ncorrforpol(-1)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_ncorrforpol(self, *args, **kwargs)

    def nfields(self):
        r"""
        nfields(self) -> long


        Summary:
            Get the number of fields associated with the MS.

        Description:


        Get the number of fields associated with the MS.


        Example:

        msmd.open('my.ms')
        number_of_fields = msmd.nfields()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nfields(self)

    def nobservations(self):
        r"""
        nobservations(self) -> long


        Summary:
            Get the number of observations associated with the MS from the OBSERVATIONS table.

        Description:


        Get the number of observations associated with the MS from the OBSERVATIONS table.


        Example:

        msmd.open('my.ms')
        number_of_obs_ids = msmd.nobservations()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nobservations(self)

    def nspw(self, *args, **kwargs):
        r"""
        nspw(self, _includewvr=bool(true)) -> long


        Summary:
            Get the number of spectral windows associated with the MS.

        Description:


        This method will return the number of spectral windows in the associated MS.


        Input Parameters:
            includewvr                Include wvr spectral windows? If false, exclude wvr windows from count.

        Example:

        msmd.open('my.ms')
        number_of_spectral_windows = msmd.nspw()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nspw(self, *args, **kwargs)

    def nstates(self):
        r"""
        nstates(self) -> long


        Summary:
            Get the number of states (from the STATE table) associated with the MS.

        Description:


        This method will return the number of states (number of rows in the STATES table) in the associated MS.


        Example:

        msmd.open('my.ms')
        number_of_states = msmd.nstates()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nstates(self)

    def nscans(self):
        r"""
        nscans(self) -> long


        Summary:
            Get the number of scans associated with the MS.

        Description:


        Get the number of scans associated with the MS.


        Example:

        msmd.open('my.ms')
        number_of_scans = msmd.nscans()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nscans(self)

    def nsources(self):
        r"""
        nsources(self) -> long


        Summary:
            Get the number of unique values from the SOURCE_ID column in the SOURCE table.

        Description:


        Get the number of unique values from the SOURCE_ID column in the SOURCE table. The number of rows in the
        SOURCE table may be greater than this value.


        Example:

        msmd.open('my.ms')
        number_of_unique_source_ids = msmd.nsources()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nsources(self)

    def nrows(self, *args, **kwargs):
        r"""
        nrows(self, _autoc=bool(true), _flagged=bool(true)) -> double


        Summary:
            Get the number of visibilities (from the main table) associated with the MS.

        Description:


        Get the number of visibilities (from the main table) associated with the MS.


        Input Parameters:
            autoc                     Include autocorrelation data? If False, only cross correlation rows will be summed.
            flagged                   Include flagged data? If False, only unflagged or patially flagged rows will be summed.

        Example:

        msmd.open('my.ms')
        # get the total number of rows
        nrows = msmd.nrows()
        # got the number of cross correlation rows
        ncross = msmd.nrows(auto=False)
        # get the number of unflagged rows
        ngood = msmd.nrows(flagged=False)
        # get the number of unflagged cross correlation rows
        ncrossunflagged = msmd.nrows(auto=False, flagged=False)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_nrows(self, *args, **kwargs)

    def observers(self):
        r"""
        observers(self) -> std::vector< std::string >


        Summary:
            Get an array observers as they are listed in the OBSERVATIONS table.

        Description:


        Get an array of observers as they are listed in the OBSERVATIONS table.


        Example:

        msmd.open('my.ms')
        # get the observers
        observers = msmd.observers()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_observers(self)

    def observatorynames(self):
        r"""
        observatorynames(self) -> std::vector< std::string >


        Summary:
            Get an array of MS telescope (observatory) names as they are listed in the OBSERVATIONS table.

        Description:


        Get an array of MS telescope (observatory) names as they are listed in the OBSERVATIONS table.


        Example:

        msmd.open('my.ms')
        # get the telescope names
        telescope_names = msmd.telescopenames()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_observatorynames(self)

    def observatoryposition(self, *args, **kwargs):
        r"""
        observatoryposition(self, _which=long(0)) -> record *


        Summary:
            Get the position of the specified telescope.

        Description:


        Get the position of the specified telescope.


        Input Parameters:
            which                     Zero-based telescope position in the OBSERVATIONS table (see msmd.telescopenames()).

        Example:

        msmd.open('my.ms')
        # get the position of the 0th telescope
        telescope_position = msmd.telescopeposition(0)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_observatoryposition(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        r"""
        open(self, _msfile=string(""), _maxcache=float(50)) -> bool


        Summary:
            Attach the MS metadata tool to the specified MS

        Description:


        Attach this tool to the specified MS. This method runs a few basic MS validation tests, and if any of these
        fail (which indicates that the MS is invalid), an error occurs and the tool is not attached to the MS.
        Note that it is ultimately the user's responsibility to ensure that the MS is valid. Running the methods
        of this tool on an invalid MS may result in incorrect results or even a crash of CASA. Such invalidities
        include any MS subtable not having appropriate information (eg, an OBSERVATION subtable not having enough rows
        to account for all the OBSERVATION_IDs in the main table).


        Input Parameters:
            msfile                    Name of the existing measurement set
            maxcache                  Maximum cache size, in megabytes, to use.

        Example:

        msmd.open('my.ms')
        # do stuff and close it
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_open(self, *args, **kwargs)

    def phasecenter(self, *args, **kwargs):
        r"""
        phasecenter(self, _fieldid=long(0), _epoch=initialize_record("")) -> record *


        Summary:
            Get the phasecenter direction from a field ID and time if necessary

        Description:


        Get a direction measures for the phasecenter of the field id and time specified


        Input Parameters:
            fieldid                   Zero-based field ID for which to get the phasecenter; default  fieldid=0
            epoch                     Optional time, expressed as a measures epoch dictionary, if field id has a polynomial in time phasecenter or an ephemerides table attached to the ID. Default value means evaluate at the origin TIME in the FIELD table

        Example:

        msmd.open('my.ms')
        # get phasecenter for field ID 1
        mydir = msmd.phasecenter(1);
        # if the phasecenter is a polynomial or has an ephemerides attached to
        # it a time is needed to get the phase direction
        ep=me.epoch('utc', '2015/03/15/15:30:55')
        mydir2=msmd.phasecenter(2, ep)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_phasecenter(self, *args, **kwargs)

    def pointingdirection(self, *args, **kwargs):
        r"""
        pointingdirection(self, _rownum=long(0), _interpolate=bool(false), _initialrow=long(0)) -> record *


        Summary:
            Get the pointing direction for antennas at the specified row number in the main MS table.

        Description:


        Get the pointing direction for antennas at the specified row number in the main MS table. Returns a record
        containing the time, antenna IDs and corresponding pointing directions.


        Input Parameters:
            rownum                    Row number in the main MS table.
            interpolate               Interpolate pointings in case the interval in the main table is shorter than that in the pointing table (often the case in fast-scanning in single dish observaitions)
            initialrow                Initial guess of row index in pointing table to start search.

        Example:

        msmd.open('my.ms')
        # get the pointing directions for row ID 500
        dirs = msmd.pointingdirection(500)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_pointingdirection(self, *args, **kwargs)

    def polidfordatadesc(self, *args, **kwargs):
        r"""
        polidfordatadesc(self, _ddid=long(-1)) -> casac::variant *


        Summary:
            Get the polarization ID associated with the specified data description ID.

        Description:


        Get the polarization ID associated with the specified data description ID. If the specified data description ID
        is negative, an array of polarization IDs is returned. The indices of that array represent data description IDs.


        Input Parameters:
            ddid                      Zero-based data description ID. A negative number will cause all the polarization IDs to be returned.

        Example:

        msmd.open('my.ms')
        # get the polarization ID associated with data description ID 3
        polid = msmd.polidfordatadesc(3)
        # get the array of polarization IDs in the order they appear in the DATA_DESCRIPTION table
        polids = msmd.polidfordatadesc(-1)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_polidfordatadesc(self, *args, **kwargs)

    def projects(self):
        r"""
        projects(self) -> std::vector< std::string >


        Summary:
            Get an array projects as they are listed in the OBSERVATIONS table.

        Description:


        Get an array of projects as they are listed in the OBSERVATIONS table.


        Example:

        msmd.open('my.ms')
        # get the projects
        projects = msmd.projects()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_projects(self)

    def propermotions(self):
        r"""
        propermotions(self) -> record *


        Summary:
            Get the values of the PROPER_MOTION column from the SOURCE table.

        Description:


        Get the values of the DIRECTION column from the SOURCE table. Returns a dictionary in which the
        keys are the associated zero-based row numbers, represented as strings, in the SOURCE table. The
        associated values are two element dictionaries, with keys 'longitude' and 'latitude', containing
        the longitudinal and latidinal components of the proper motion, which are valid quantity dictionaries.


        Example:

        msmd.open('my.ms')
        # get PROPER_MOTION column values from the SOURCE table
        mu = msmd.propermotions()
        msmd.done()
        # the direction associated with zero-based row number 10
        mu10 = mu['10']

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_propermotions(self)

    def refdir(self, *args, **kwargs):
        r"""
        refdir(self, _field=casac::variant( ), _epoch=initialize_record("")) -> record *


        Summary:
            Get the reference direction from a field ID and time if necessary

        Description:


        Get a direction measure for the reference direction of the field and time specified


        Input Parameters:
            field                     Zero-based field ID or field name for which to get the reference direction; default  field=0
            epoch                     Optional time, expressed as a measures epoch dictionary, if associated field has a polynomial in time reference direction or an ephemerides table attached it. Default value means evaluate at the origin TIME in the FIELD table

        Example:

        msmd.open('my.ms')
        # get reference direction for field ID 1
        mydir = msmd.refdir(1);
        # if the reference direction is a polynomial or has an ephemerides attached to
        # it a time is needed to get the reference direction
        ep=me.epoch('utc', '2015/03/15/15:30:55')
        mydir2=msmd.phasecenter(2, ep)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_refdir(self, *args, **kwargs)

    def reffreq(self, *args, **kwargs):
        r"""
        reffreq(self, _spw=long(-1)) -> record *


        Summary:
            Get the reference frequency of the specified spectral window.

        Description:


        Get the reference frequency of the specified spectral window. The returned frequency is in
        the form of a valid measures dictionary.


        Input Parameters:
            spw                       Zero-based spectral window ID.

        Example:

        msmd.open('my.ms')
        # get the reference frequency for spw ID 20
        reffreq = msmd.reffreq(20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_reffreq(self, *args, **kwargs)

    def restfreqs(self, *args, **kwargs):
        r"""
        restfreqs(self, _sourceid=long(0), _spw=long(0)) -> casac::variant *


        Summary:
            Get the rest frequencies from the SOURCE table for the specified source and spectral window.

        Description:


        Get the rest frequencies from the SOURCE table for the specified source and spectral window.
        The return value will be a dictionary of frequency measures if the rest frequencies are
        defined for the specified inputs, or False if they do not.


        Input Parameters:
            sourceid                  Zero-based source ID (from the SOURCE::SOURCE_ID column).
            spw                       Zero-based spectral window ID.

        Example:

        msmd.open('my.ms')
        # get the rest frequencies for source ID 2 and spw ID 20
        reffreq = msmd.restfreqs(2, 20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_restfreqs(self, *args, **kwargs)

    def rxbands(self, *args, **kwargs):
        r"""
        rxbands(self, _spwids=casac::variant( )) -> std::vector< long >


        Summary:
            ALMA-specific. Get the values of the receiver bands for the specified spws.

        Description:


        ALMA-only. Returns an integer array containing the receiver band
        of the specified spw(s). A return value of -1 means no receiver
        band number could be determined. The name of the spw is first
        checked to determine if the receiver band value is encoded
        there. If not, the corresponding spectral window ID is sought in
        the ASDM_RECEIVER table, if it exists, and if it has less than
        or equal number of rows compared to the SPECTRAL_WINDOW table.
        If the corresponding spectral window can be found in the
        ASDM_RECEIVER table, then the corresponding frequencyBand column
        value is checked to determine if the receiver band information
        is encoded there. In the case where the spectral window ID is
        present in multiple cells of the spectralWindowId column, the
        first row in which the ID is found is used to determine the
        receiver band. If all these tests fail, -1 is returned for the
        specified spectral window.


        Input Parameters:
            spwids                    Zero-based spw ID(s) for which to get the values (integer or interger array). Unspecified will return all receiver band values.

        Example:

        msmd.open('my.ms')
        # get the receiver bands for spws 8 and 2.
        rx_bands = msmd.rxbands([8, 2])
        # get all receiver bands
        all_rx_bands = msmd.rxbands()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_rxbands(self, *args, **kwargs)

    def scannumbers(self, *args, **kwargs):
        r"""
        scannumbers(self, _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers associated with the MS for the specified observation ID and array ID.

        Description:


        This method will return an array of unique scan numbers in the associated MS for the specified observation ID and array ID.


        Input Parameters:
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # scan numbers for all obsids and all arrayids
        scan_numbers = msmd.scannumbers()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scannumbers(self, *args, **kwargs)

    def scansforfield(self, *args, **kwargs):
        r"""
        scansforfield(self, _field=casac::variant( ), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers associated with the specified field, observation ID, and array ID.

        Description:


        Get an array of the unique scan numbers associated with the specified field, observation ID, and array ID.


        Input Parameters:
            field                     Field ID or field name (case sensitive) for which to return the scan numbers.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the scan numbers associated with field 'planet Z' (all obsids, all arrayids)
        scan_numbers = msmd.scansforfield('planet Z')
        # get the scan numbers associated with field ID 5 (all obsids, all arrayids)
        scan_numbers = msmd.scansforfield(5)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforfield(self, *args, **kwargs)

    def scansforfields(self, *args, **kwargs):
        r"""
        scansforfields(self, _obsid=long(0), _arrayid=long(0)) -> record *


        Summary:
            Get a dictionary of which maps field ID to scan numbers for the specified observation ID and array ID.

        Description:


        Get a dictionary of which maps field ID to scan numbers for the specified observation ID
        and array ID. The keys (field IDs) will be strings. obsid and arrayid must both
        be non-negative.


        Input Parameters:
            obsid                     Observation ID. Must be non-negative.
            arrayid                   Array ID. Must be non-negative.

        Example:

        msmd.open('my.ms')
        # get the field - scan map for arrayID 1 and obsID 2
        field_to_scans = msmd.scansforfields(arrayid=1, obsid=2)
        # access the scans associated with field ID 2
        field_to_scans2 = field_to_scans['2']
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforfields(self, *args, **kwargs)

    def scansforintent(self, *args, **kwargs):
        r"""
        scansforintent(self, _intent=string(""), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers associated with the specified intent, observation ID, and arrayID.

        Description:


        Get an array of the unique scan numbers associated with the specified intent, observation ID, and arrayID.
        The '*' character matches any number of characters from all character classes.


        Input Parameters:
            intent                    Intent (case-sensitive) for which to return the scan numbers.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the scan numbers associated with intent 'detect planet X' (all obsids, all arrayids)
        scan_numbers = msmd.scansforintent('detect planet X', regex=False)
        # got all the scan numbers associated with all intents which contain 'WVR' (all obsids, all arrayids)
        scan_numbers = msmd.scansforintent('*WVR*')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforintent(self, *args, **kwargs)

    def scansforspw(self, *args, **kwargs):
        r"""
        scansforspw(self, _spw=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers associated with the specified zero-based spectral window ID, observation ID, and array ID.

        Description:


        Get an array of the unique scan numbers associated with the specified zero-based spectral window ID, observation ID, and array ID.


        Input Parameters:
            spw                       Zero-based spectral window ID for which to return the scan numbers.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the scan numbers associated with spectral window ID 14, all obsids, all arrayids
        scan_numbers = msmd.scansforspw(14)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforspw(self, *args, **kwargs)

    def scansforspws(self, *args, **kwargs):
        r"""
        scansforspws(self, _obsid=long(0), _arrayid=long(0)) -> record *


        Summary:
            Get a dictionary of which maps spw ID to scan numbers for the specified observation ID and array ID.

        Description:


        Get a dictionary of which maps spw ID to scan numbers for the specified observation ID
        and array ID. The keys (spectral window IDs) will be strings. obsid and arrayid must both
        be non-negative.


        Input Parameters:
            obsid                     Observation ID. Must be non-negative.
            arrayid                   Array ID. Must be non-negative.

        Example:

        msmd.open('my.ms')
        # get the spw - scan map for arrayID 1 and obsID 2
        spw_to_scans = msmd.scansforspws(arrayid=1, obsid=2)
        # access the scans associated with spw ID 2
        spw_to_scans2 = spw_to_scans['2']
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforspws(self, *args, **kwargs)

    def scansforstate(self, *args, **kwargs):
        r"""
        scansforstate(self, _state=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers for the specified state, observation ID, and array ID.

        Description:


        Get an array of the unique scan numbers for the specified state, observation ID, and array ID.


        Input Parameters:
            state                     ID of state for which to return the scan numbers.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the scan numbers associated with state 2, all obsids, all arrayids
        scans = msmd.scansforstate(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansforstate(self, *args, **kwargs)

    def scansfortimes(self, *args, **kwargs):
        r"""
        scansfortimes(self, _time=double(-1), _tol=double(0), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique scan numbers for the specified time range (time-tol to time+tol), observation ID, and array ID.

        Description:


        Get an array of the unique scan numbers for the specified time range (time-tol to time+tol), observation ID, and array ID.


        Input Parameters:
            time                      Time at center of time range.
            tol                       Time difference on either side of center for specifying range.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the scan numbers associated with the specified time range (all obsids, all array ids)
        scans = msmd.scansfortimes(4.84282937e+09, 20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_scansfortimes(self, *args, **kwargs)

    def schedule(self, *args, **kwargs):
        r"""
        schedule(self, _obsid=long(-1)) -> std::vector< std::string >


        Summary:
            Get the schedule information for the specified observation ID.

        Description:


        Get the schedule information for the specified observation ID.


        Input Parameters:
            obsid                     Observation ID.

        Example:

        msmd.open('my.ms')
        # get the schdule information for observation ID = 2
        schedule = msmd.schedule()[2]
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_schedule(self, *args, **kwargs)

    def sideband(self, *args, **kwargs):
        r"""
        sideband(self, _spw=long(0L)) -> long


        Summary:
            Get the sideband for the specified spectral window.

        Description:


        Get the sideband for the specified spectral window.


        Input Parameters:
            spw                       Spectral window ID.

        Example:

        msmd.open('my.ms')
        # get sideband for spectral window 2.
        sideband = msmd.sideband(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sideband(self, *args, **kwargs)

    def sourcedirs(self):
        r"""
        sourcedirs(self) -> record *


        Summary:
            Get the values of the DIRECTION column from the SOURCE table.

        Description:


        Get the values of the DIRECTION column from the SOURCE table. Returns a dictionary in which the
        keys are the associated row numbers, represented as strings, in the SOURCE table. Each value
        in the returned dictionary is a valid direction measure.


        Example:

        msmd.open('my.ms')
        # get DIRECTION column values from the SOURCE table
        sourcedirs = msmd.sourcedirs()
        msmd.done()
        # the direction associated with zero-based row number 10
        dir10 = sourcedirs['10']
        # convert it to B1950, using the measure interface
        dir10_B1950 = me.convert(dir10, 'B1950')

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sourcedirs(self)

    def sourcetimes(self):
        r"""
        sourcetimes(self) -> record *


        Summary:
            Get the values of the TIME column from the SOURCE table.

        Description:


        Get the values of the TIME column from the SOURCE table. Returns a dictionary in which the
        keys are the associated row numbers, represented as strings, in the SOURCE table. Each value
        in the returned dictionary is a valid time quantity.


        Example:

        msmd.open('my.ms')
        # get TIME column values from the SOURCE table
        sourcetimes = msmd.sourcetimes()
        msmd.done()
        # the time associated with zero-based row number 10
        time10 = sourcetimes['10']

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sourcetimes(self)

    def sourceidforfield(self, *args, **kwargs):
        r"""
        sourceidforfield(self, _field=long(-1)) -> long


        Summary:
            Get the source ID from the field table for the specified field ID.

        Description:


        Get the source ID from the field table for the specified field ID.


        Input Parameters:
            field                     Zero-based field ID for which to return the source ID from the field table.

        Example:

        msmd.open('my.ms')
        # get source ID associated with field ID 2
        sourceid = msmd.sourceidforfield(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sourceidforfield(self, *args, **kwargs)

    def sourceidsfromsourcetable(self):
        r"""
        sourceidsfromsourcetable(self) -> std::vector< long >


        Summary:
            Get the values of the SOURCE_ID column from the SOURCE table.

        Description:


        Get the values of the SOURCE_ID column from the SOURCE table. It is unfortunate that the SOURCE
        table has a column named SOURCE_ID, because implicitly the 'ID' of a row in an MS subtable is
        generally meant to reflect a row number in that table, but that is not the case for the SOURCE table.


        Example:

        msmd.open('my.ms')
        # get SOURCE_ID column values from the SOURCE table
        sourceids = msmd.sourceidsfromsourcetable()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sourceidsfromsourcetable(self)

    def sourcenames(self):
        r"""
        sourcenames(self) -> std::vector< std::string >


        Summary:
            Get the values of the SOURCE_NAME column from the SOURCE table.

        Description:


        Get the values of the SOURCE_NAME column from the SOURCE table.


        Example:

        msmd.open('my.ms')
        # get SOURCE_NAME column values from the SOURCE table
        sourcenames = msmd.sourcenames()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_sourcenames(self)

    def spwsforbaseband(self, *args, **kwargs):
        r"""
        spwsforbaseband(self, _baseband=long(-1), _sqldmode=string("include")) -> casac::variant *


        Summary:
            Get the spws associated with the specified baseband or dictionary that maps baseband to spws.

        Description:


        Get the spectral windows associated with the specified baseband or dictionary that maps baseband to spectral windows.


        Input Parameters:
            baseband                  Baseband number. If <0, return a dictionary mapping basebands to spws.
            sqldmode                  If 'include', include SQLD windows, if 'exclude', exclude SQLD windows, if 'only', include only SQLD windows. Case insenstive, inimum match honored.

        Example:

        msmd.open('my.ms')
        # get the spectral window IDs associated with all the basebands in this dataset
        basebandtospwdict = msmd.spwsforbasebands()
        # get an array of spws associated with baseband 2.
        spwsforbb2 = msmd.spwsforbasebands(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforbaseband(self, *args, **kwargs)

    def spwfordatadesc(self, *args, **kwargs):
        r"""
        spwfordatadesc(self, _ddid=long(-1)) -> casac::variant *


        Summary:
            Get the spectral window ID associated with the specified data description ID.

        Description:


        Get the spectral window ID associated with the specified data description ID. If the specified data description ID
        is negative, an array of spectral window IDs is returned. The indices of that array represent data description IDs.


        Input Parameters:
            ddid                      Zero-based data description ID. A negative number will cause all the spectral window IDs to be returned.

        Example:

        msmd.open('my.ms')
        # get the spectral window ID associated with data description ID 3
        spw = msmd.spwfordatadesc(3)
        # get the array of spectral window IDs in the order they appear in the DATA_DESCRIPTION table
        spws = msmd.spwfordatadesc(-1)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwfordatadesc(self, *args, **kwargs)

    def spwsforfield(self, *args, **kwargs):
        r"""
        spwsforfield(self, _field=casac::variant( )) -> std::vector< long >


        Summary:
            Get an array of the unique spectral window IDs for the specified field.

        Description:


        Get an array of the unique spectral window IDs for the specified field.


        Input Parameters:
            field                     Field (case sensitive string or zero-based integer ID) for which to return the spectral window IDs.

        Example:

        msmd.open('my.ms')
        # get the spectral window IDs associated with field 'Fomalhaut'
        spws = msmd.spwsforfield('Fomalhaut')
        # get spectral window IDs associated with field ID 2
        spws = msmd.spwsforfield(2)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforfield(self, *args, **kwargs)

    def spwsforfields(self):
        r"""
        spwsforfields(self) -> record *


        Summary:
            Get a dictionary which maps field IDs to spectral window IDs.

        Description:


        Get a dictionary which maps field IDs to spectral window IDs. The field IDs are keys in the
        returned dictionary. To access a particular element, one must ensure the key is a string.


        Example:

        msmd.open('my.ms')
        # get the map of field IDs to spw IDs
        field_to_spw_map = msmd.spwsforfields()
        spws_for_field_5 = field_to_spw_map[str(5)]
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforfields(self)

    def spwsforintent(self, *args, **kwargs):
        r"""
        spwsforintent(self, _intent=string("")) -> std::vector< long >


        Summary:
            Get an array of the unique spectral window IDs for the specified intent.

        Description:


        Get an array of the unique spectral window IDs for the specified intent. The '*' character matches any number of characters from all character classes.


        Input Parameters:
            intent                    Intent (case sensitive) for which to return the spectral window IDs.

        Example:

        msmd.open('my.ms')
        # get the spectral window IDs associated with 'MY COOL INTENT'
        spws = msmd.spwsforintent('MY COOL INTENT')
        # got all the spw IDs associated with all intents which contain 'WVR'
        scan_numbers = msmd.spwsforintent('*WVR*')
        msmd.done()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforintent(self, *args, **kwargs)

    def spwsfornames(self, *args, **kwargs):
        r"""
        spwsfornames(self, _spwids=casac::variant( )) -> record *


        Summary:
            Get the IDs of the specified spw names.

        Description:


        Get the IDs of the specified spw(s). Returns a dictionary where the keys
        are the requested spectral window names that are present in the data set
        and the values are arrays of the spectral window IDs corresponding to the
        name. If a specified name is not present, a warning message is logged and
        that name is not included in the returned dictionary. Specifying no names
        results in a dictionary containing the name to spw ID mapping for the
        entire data set.


        Input Parameters:
            spwids                    Names of the spws for which IDs are needed (string or string array). Unspecified will return all spw names.

        Example:

        msmd.open('my.ms')
        # get the IDs for spws named 'CO' and 'HCN'
        spw_ids = msmd.spwsfornames(['CO', 'HCN'])
        # get the complete spw name to ID map
        spw_names_to_ids = msmd.spwsfornames()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsfornames(self, *args, **kwargs)

    def spwsforscan(self, *args, **kwargs):
        r"""
        spwsforscan(self, _scan=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique spectral window IDs for the specified scan number, observation ID, and array ID.

        Description:


        Get an array of the unique spectral window IDs for the specified scan number, observation ID, and array ID.


        Input Parameters:
            scan                      Scan number for which to return the spectral window IDs.
            obsid                     Observation ID. A negative value means that all observation IDs should be used.
            arrayid                   Array ID. A negative value means that all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the spectral window IDs associated with scan number 20, all obsids, all arrayids.
        spws = msmd.spwsforscan(20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforscan(self, *args, **kwargs)

    def spwsforscans(self, *args, **kwargs):
        r"""
        spwsforscans(self, _obsid=long(0), _arrayid=long(0)) -> record *


        Summary:
            Get a dictionary of which maps scan number to spectral windows for the specified observation ID and array ID.

        Description:


        Get a dictionary of which maps scan number to spectral windows for the specified observation ID and array ID. The keys (scan
        numbers) will be strings. obsid and arrayid must both be non-negative.


        Input Parameters:
            obsid                     Observation ID. Must be non-negative.
            arrayid                   Array ID. Must be non-negative.

        Example:

        msmd.open('my.ms')
        # get the scan - spw map for arrayID 1 and obsID 2
        scan_to_spws = msmd.spwsforscans(arrayid=1, obsid=2)
        # access the spws associated with scan 2
        spws_for_scan2 = scan_to_spws['2']
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_spwsforscans(self, *args, **kwargs)

    def subwindows(self, *args, **kwargs):
        r"""
        subwindows(self, _spwids=casac::variant( )) -> std::vector< long >


        Summary:
            ALMA-specific. Get the values of the subwindows for the specified spws.

        Description:


        ALMA-only. Returns an integer array containing the subwindow of
        the specified spw(s). The spw name is checked to determine if
        the subwindow value is encoded within it. A return value of -1
        indicates that a subwindow number could be determined.


        Input Parameters:
            spwids                    Zero-based spw ID(s) for which to get the values (integer or interger array). Unspecified will return all receiver band values.

        Example:

        msmd.open('my.ms')
        # get the subwindows for spws 8 and 2.
        sws = msmd.subwindows([8, 2])
        # get all subwindows
        all_sws = msmd.subwindows()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_subwindows(self, *args, **kwargs)

    def statesforscan(self, *args, **kwargs):
        r"""
        statesforscan(self, _scan=long(-1), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< long >


        Summary:
            Get an array of the unique state IDs for the specified scan number, observation ID, and array ID.

        Description:


        Get an array of the unique state IDs for the specified scan number, observation ID, and array ID.


        Input Parameters:
            scan                      Scan number for which to return the state IDs.
            obsid                     Observation ID. A negative value means that all observation IDs should be used.
            arrayid                   Array ID. A negative value means that all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the state IDs associated with scan number 251, all obsids, all arrayids
        states = msmd.statesforscan(251)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_statesforscan(self, *args, **kwargs)

    def statesforscans(self, *args, **kwargs):
        r"""
        statesforscans(self, _obsid=long(0), _arrayid=long(0)) -> record *


        Summary:
            Get a dictionary which maps scan numbers to state IDs for the specified array and observation IDs.

        Description:


        Get a dictionary which maps scan numbers to state IDs for the specified array and observation IDs. The returned dictionary
        will have scan numbers, as strings, as keys.


        Input Parameters:
            obsid                     Observation ID, must be nonnegative.
            arrayid                   Array ID, must be nonnegative.

        Example:

        msmd.open('my.ms')
        # get the map of scan numbers to state IDs for arrayID=1, obsID=2
        scans_to_states = msmd.statesforscans(obsID=2, arrayID=1)
        states_for_scan_5 = scans_to_states[str(5)]
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_statesforscans(self, *args, **kwargs)

    def summary(self):
        r"""
        summary(self) -> record *


        Summary:
            Get dictionary summarizing the MS.

        Description:


        Get dictionary summarizing the MS.


        Example:

        msmd.open('my.ms')
        # get the summary
        summary = msmd.summary()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_summary(self)

    def tdmspws(self):
        r"""
        tdmspws(self) -> std::vector< long >


        Summary:
            Get an array of spectral window IDs used for TDM.

        Description:


        Get an array of spectral window IDs used for TDM. These windows
        are defined by the rules in the description of the method
        almaspws().


        Example:

        msmd.open('my.ms')
        # get the spectral window IDs used for TDM.
        tdm_spws = msmd.tdmspws()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_tdmspws(self)

    def timerangeforobs(self, *args, **kwargs):
        r"""
        timerangeforobs(self, _obsid=long(-1)) -> record *


        Summary:
            Get the time range for the specified observation ID

        Description:


        Get the time range for the specified observation ID. The return value is a dictionary containing
        keys 'begin' and 'end'. Each of the associated value are dictionaries representing epochs which
        are valid measure records. The values are taken directly from the OBSERVATION subtable; no
        half-intervals are added or subtracted.


        Input Parameters:
            obsid                     Zero-based observation ID for which to get the time range.

        Example:

        msmd.open('my.ms')
        # get the time range associated with observation ID 3
        timerange = msmd.timerangeforobs(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timerangeforobs(self, *args, **kwargs)

    def timesforfield(self, *args, **kwargs):
        r"""
        timesforfield(self, _field=long(-1)) -> std::vector< double >


        Summary:
            Get an array of the unique times for the specified field.

        Description:


        Get an array of the unique times associated with the specified field ID. The times correspond to those in the TIME column, so are values of the time system associated with that column and have units associated with that column. Only unique times are returned; duplicates are dropped. Providing a negative field ID will result in an exception being thrown.


        Input Parameters:
            field                     Zero-based field ID for which to return the times.

        Example:

        msmd.open('my.ms')
        # get the times associated with field 3
        times = msmd.timesforfield(3)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timesforfield(self, *args, **kwargs)

    def timesforintent(self, *args, **kwargs):
        r"""
        timesforintent(self, _intent=string("")) -> std::vector< double >


        Summary:
            Get an array of the unique times for the specified intent.

        Description:


        Get an array of the unique times associated with the specified intent.  The times correspond to those in the TIME column, so are values of the time system associated with that column and have units associated with that column. Only unique times are returned; duplicates are dropped.


        Input Parameters:
            intent                    Intent for which to return the times.

        Example:

        msmd.open('my.ms')
        # get the times associated with intent 'myintent'
        times = msmd.timesforintent('myintent')
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timesforintent(self, *args, **kwargs)

    def timesforscan(self, *args, **kwargs):
        r"""
        timesforscan(self, _scan=long(-1), _obsid=long(-1), _arrayid=long(-1), _perspw=bool(false)) -> casac::variant *


        Summary:
            Get the unique times for the specified scan number, observation ID, and array ID.

        Description:


        Get the unique times for the specified scan number, observation ID, and array ID. If perspw=True, the returned data structure is
        a dictionary that has keys representing zero-based spectral window IDs and values representing the unique values of the TIME column
        corrsponding to the specified scan and that corresponding spectral window ID. If False, an array of unique values from the TIME
        column for the specified scan is returned; there is no separation into spectral window IDs.


        Input Parameters:
            scan                      Scan number for which to return the times.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.
            perspw                    Return output dictionary with keys representing spectral window IDs (True), or an array of all times (False).

        Example:

        msmd.open('my.ms')
        # get the times associated with scan number 10, all obsids, all arrayids.
        times = msmd.timesforscan(10)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timesforscan(self, *args, **kwargs)

    def timesforscans(self, *args, **kwargs):
        r"""
        timesforscans(self, _scans=casac::variant( ), _obsid=long(-1), _arrayid=long(-1)) -> std::vector< double >


        Summary:
            Get an array of the unique times for the specified scan numbers, observation ID, and array ID.

        Description:


        Get an array of the unique times for the specified scan numbers, observation ID, and array ID.  The times correspond to those in the TIME column, so are values of the time system associated with that column and have units associated with that column. Only unique times are returned; duplicates are dropped. For the scans parameter, a single non-negative integer or a list of non-negative integers, all of which are valid scan numbers in the MS, must be supplied.


        Input Parameters:
            scans                     Scan number(s) for which to return the times.
            obsid                     Observation ID. A negative value indicates all observation IDs should be used.
            arrayid                   Array ID. A negative value indicates all array IDs should be used.

        Example:

        msmd.open('my.ms')
        # get the times associated with scan numbers 10 and 20, all obsids, all arrayids
        times = msmd.timesforscans([10,20])
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timesforscans(self, *args, **kwargs)

    def timesforspws(self, *args, **kwargs):
        r"""
        timesforspws(self, _spw=casac::variant( )) -> casac::variant *


        Summary:
            Get the unique times corresponding to the specified spectral window(s).

        Description:


        Get the unique times corresponding to the specified spectral window(s). The input indicates the
        spws for which times are to be retrieved, and can be a single integer or an array of
        integers. If a single, non-negative integer, an array of unique times associated with
        that spectral window are returned. Otherwise, a dictionary of times associated with the
        specified spectral windows are returned, with the spws (as strings) as the keys and the
        times as the values. A negative integer will cause a dictionary of all spws and their
        associated times to be returned.


        Input Parameters:
            spw                       Zero-based spectral window ID(s). A negative integer will cause the all the times for all spws to be returned.

        Example:

        msmd.open('my.ms')
        # get the times associated with spws 10 and 20
        times = msmd.timesforspws([10,20])
        # print the times for spw 10
        print times['10']
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_timesforspws(self, *args, **kwargs)

    def transitions(self, *args, **kwargs):
        r"""
        transitions(self, _sourceid=long(0), _spw=long(0)) -> casac::variant *


        Summary:
            Get the spectral transitions from the SOURCE table for the specified source and spectral window.

        Description:


        Get the spectral transitions from the SOURCE table for the specified source and spectral window.
        The return value will be an array of transitions if the transitions are
        defined for the specified inputs, or False if they do not.


        Input Parameters:
            sourceid                  Zero-based source ID (from the SOURCE::SOURCE_ID column).
            spw                       Zero-based spectral window ID.

        Example:

        msmd.open('my.ms')
        # get the transitions for source ID 2 and spw ID 20
        reffreq = msmd.transitions(2, 20)
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_transitions(self, *args, **kwargs)

    def wvrspws(self, *args, **kwargs):
        r"""
        wvrspws(self, _complement=bool(false)) -> std::vector< long >


        Summary:
            Get an array of spectral window IDs used for WVR. These are windows that have 4 channels.

        Description:



        Get an array of spectral window IDs used for WVR. These are windows that have 4 channels.
        If complement is True, return the complement set instead (all non-wvr spw IDs). WVR windows
        are identified using the algorithm
        1. check for water vapor radiometer (WVR) spectral windows using the spectral window
        name 'WVR#NOMINAL' and report these.
        2. If no SPWs match that string, then the names are checked for 'WVR' and are reported instead.


        Input Parameters:
            complement                If True, return all non-wvr spws.

        Example:

        msmd.open('my.ms')
        # get the spectral window IDs used for WVR.
        wvr_spws = msmd.wvrspws()
        msmd.done()

        --------------------------------------------------------------------------------

        """
        return _msmetadata.msmetadata_wvrspws(self, *args, **kwargs)
    __swig_destroy__ = _msmetadata.delete_msmetadata

# Register msmetadata in _msmetadata:
_msmetadata.msmetadata_swigregister(msmetadata)


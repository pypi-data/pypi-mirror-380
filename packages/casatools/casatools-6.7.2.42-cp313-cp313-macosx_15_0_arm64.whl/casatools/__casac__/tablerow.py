# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tablerow
else:
    import _tablerow

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class tablerow(object):
    r"""Proxy of C++ casac::tablerow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(self, _table=None, _columnnames=std::vector< std::string >({}), _exclude=bool(false)) -> tablerow"""
        _tablerow.tablerow_swiginit(self, _tablerow.new_tablerow(*args, **kwargs))

    def _iswritable(self):
        r"""
        _iswritable(self) -> bool


        Summary:
            check to see if row can be modified

        Description:


        check to see if row can be modified


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__iswritable(self)

    def iswritable(self):
        r"""
        iswritable(self) -> bool


        Summary:
            check to see if row can be modified

        Description:


        check to see if row can be modified


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_iswritable(self)

    def _get(self, *args, **kwargs):
        r"""
        _get(self, _rownr=long(0L)) -> record *


        Summary:
            get a single row

        Description:


        get a single row specified by rownr


        Input Parameters:
            rownr                     row number to retrieve

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__get(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        r"""
        get(self, _rownr=long(0L)) -> record *


        Summary:
            get a single row

        Description:


        get a single row specified by rownr


        Input Parameters:
            rownr                     row number to retrieve

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_get(self, *args, **kwargs)

    def _put(self, *args, **kwargs):
        r"""
        _put(self, _rownr=long(0L), _value=initialize_record(""), _matchingfields=bool(true)) -> bool


        Summary:
            put a single row

        Description:


        put a single row specified by rownr


        Input Parameters:
            rownr                     row number to store
            value                     row record to store
            matchingfields             If true, this means that the value may contain more fields and only fields matching a column name will be used. 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__put(self, *args, **kwargs)

    def put(self, *args, **kwargs):
        r"""
        put(self, _rownr=long(0L), _value=initialize_record(""), _matchingfields=bool(true)) -> bool


        Summary:
            put a single row

        Description:


        put a single row specified by rownr


        Input Parameters:
            rownr                     row number to store
            value                     row record to store
            matchingfields             If true, this means that the value may contain more fields and only fields matching a column name will be used. 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_put(self, *args, **kwargs)

    def __len__(self):
        r"""
        __len__(self) -> long


        Summary:
            number of rows available

        Description:


        return the number of available rows for use in subscription


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow___len__(self)

    def __getitem__(self, _rownr=None):
        r"""
        __getitem__(self, _rownr=None) -> PyObj *


        Summary:
            get row from table

        Description:


        get one row from the referenced table used in subscription


        Input Parameters:
            rownr                      Row number to return 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow___getitem__(self, _rownr)

    def done(self):
        r"""
        done(self)


        Summary:
            release references to the table resources

        Description:


        Release the table resources. After this call, the tablerow object will no longer
        be useful.


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_done(self)
    __swig_destroy__ = _tablerow.delete_tablerow

# Register tablerow in _tablerow:
_tablerow.tablerow_swigregister(tablerow)


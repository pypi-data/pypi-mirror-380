##################### generated by xml-casa (v2) from spectralline.xml ##############
##################### 457889d5971195da41697d078aca882f ##############################
from __future__ import absolute_import 
from .__casac__.spectralline import spectralline as _spectralline

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce
_wrap_spectralline = lambda swig_object: spectralline(swig_object=swig_object)

class spectralline:
    _info_group_ = """spectralline"""
    _info_desc_ = """spectral line tool"""
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _spectralline()

    def splattotable(self, filenames=[  ], table=''):
        """This method reads a spectral line list(s) downloaded from Splatalogue (www.splatalogue.net) and loads it into a CASA table which
        can be queried via eg this tool's search function.
        
        REQUIRMENTS OF THE DOWNLOADED FILES
        
        The downloaded files must be in a specific format for this method to succeed. The columns are the
        important things; one can filter the results as one desires using Splatalogue, but the particular columns must be present as described
        below. The columns which must be present in the downloaded file in this exact order are: "Species", "NRAO Recommended", "Chemical Name",
        "Freq in GHz", "Resolved QNs", "CDMS/JPL Intensity", "Sij^2; (D2)",
        "Log10 (Aij)", "EL (K)", "EU (K)", "Linelist". In order to get these columns in this order, one should
        select exactly the following items on the Splatalogue search interface. Under "Specify Ranges" one should select "GHz" for the frequency unit.
        Under "Line Strength Display" select exactly "CDMS/JPL Intensity",
        "Sij u2", and "Aij". Under "Energy Levels", one should select exactly "Elower (K)" and "Eupper (K)". Under "Miscellaneous", one should
        select exactly "Display Ordered Frequency ONLY" and "Display NRAO Recommended Frequencies". One should then initiate the search and on
        the resulting page, one should select the Tab Field Separator and then export the list. The resulting list should be in the proper
        format for importing into CASA.
        
        RETURN VALUE
        This method returns an open spectralline tool which references the new table. The new table can also be opened by
        a spectralline tool using the open method (eg sl.open(tablename)).
        
        """
        return _wrap_spectralline(swig_object=self._swigobj.splattotable(filenames, table))

    def open(self, table=''):
        """This method opens a CASA Splatalogue spectral line table. The table should have been created with
        splattotable(), search(), or any other sl method which creates a new CASA spectral line table. If no
        table name is supplied, the default CASA spectral line table included in the system will be opened.  The
        opened tool can then be used to query the table via eg the sl.search() method. This method returns true
        if the table was successfully opened.
        
        """
        return self._swigobj.open(table)

    def close(self):
        """The associated table is closed inside casapy and
        is no longer available for use.
        
        """
        return self._swigobj.close()

    def done(self):
        """Effectively a synonym for function close.
        
        """
        return self._swigobj.done()

    def search(self, outfile='', freqrange=[ float(0) ], species=[ ], reconly=False, chemnames=[ ], qns=[  ], intensity=[ float(-1) ], smu2=[ float(-1) ], loga=[ float(-1) ], el=[ float(-1) ], eu=[ float(-1) ], rrlinclude=True, rrlonly=False, verbose=True, logfile='', append=False):
        """Search the table associated with this tool. The return value is a spectralline tool with a new table containing the search
        results. This new table can be written to disk by specifying its name in the outfile parameter. If outfile is not specified
        (ie outfile=""), the resulting table is held in memory and deleted upon a call to close() or done() for the newly created tool
        or upon exiting casapy. Because Splatalogue does not have values for intensity, smu2, loga, el, and eu
        for radio recombination lines (rrls), one must specify to include rrls in the specified frequency range in the output. In this case,
        RRLs will be included ignoring any filters on intensity, smu2, loga, el, and eu. One can also specify to list only RRLs. One can specify
        to list the search results to the logger via the verbose parameter. If verbose is false, no logger output is listed, although the results
        can be listed later by running the list() method on the newly created spectral line tool. If verbose=true, one can also specify that
        the results be listed to a logfile and if this file already exists, one can specify that the results be appended to it or to overwrite
        it with the results.
        
        """
        return _wrap_spectralline(swig_object=self._swigobj.search(outfile, freqrange, species, reconly, chemnames, qns, intensity, smu2, loga, el, eu, rrlinclude, rrlonly, verbose, logfile, append))

    def list(self):
        """List the spectral lines in the associated table to the logger. Note that listing tables containing more than 10,000 spectral lines can take quite a bit of time.
        
        """
        return self._swigobj.list()

    def torecord(self):
        """Return data on the spectral lines in the table as a record.
        
        """
        return self._swigobj.torecord()

    def species(self, verbose=False, logfile='', append=False):
        """Return the unique species in the associated table as a list.
        
        """
        return self._swigobj.species(verbose, logfile, append)

    def chemnames(self, verbose=False, logfile='', append=False):
        """Return the unique chemical names in the associated table as a list.
        
        """
        return self._swigobj.chemnames(verbose, logfile, append)

    def nrows(self):
        """Get the number of rows in the associated spectral line table.
        
        """
        return self._swigobj.nrows()


##################### generated by xml-casa (v2) from functional.xml ################
##################### 310465241093cdcbf90ad6c88759384b ##############################
from __future__ import absolute_import 
from .__casac__.functional import functional as _functional

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce
_wrap_functional = lambda swig_object: functional(swig_object=swig_object)

class functional:
    _info_group_ = """scimath"""
    _info_desc_ = """Functionals handling"""
    ### self
    def __init__(self, *args, **kwargs):
        """Create a {tt functional} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _functional()

    def f(self, x=float(0)):
        """Calculate the value of the functional.
        """
        return self._swigobj.f(x)

    def ndim(self):
        """Return the number of dimensions.
        """
        return self._swigobj.ndim()

    def done(self):
        """Free the functional's resources.
        """
        return self._swigobj.done()

    def gaussian1d(self, amplitude=float(1), center=float(0), fwhm=float(1)):
        """Create a 1-dimensional Gaussian with the specified amplitude, fwhm, and
        center.
        """
        return _wrap_functional(swig_object=self._swigobj.gaussian1d(amplitude, center, fwhm))

    def gaussian2d(self, amplitude=float(1), center=[ float(-1) ], fwhm=[ float(-1) ], pa=''):
        """Create a 2-dimensional Gaussian with the specified amplitude, fwhms, and
        center. The created functional has method {em f}  to
        calculate the function value at a series of {em x, y} values, or the
        value.
        """
        return _wrap_functional(swig_object=self._swigobj.gaussian2d(amplitude, center, fwhm, pa))

    def polynomial(self, coefficients=[ float(0) ]):
        """Create a 1-dimensional polynomial function with the specified coefficents.
        """
        return _wrap_functional(swig_object=self._swigobj.polynomial(coefficients))

    def powerlogpoly(self, coefficients=[ float(0) ]):
        """Create a 1-dimensional power log polynomial function with the specified coefficents.
        """
        return _wrap_functional(swig_object=self._swigobj.powerlogpoly(coefficients))


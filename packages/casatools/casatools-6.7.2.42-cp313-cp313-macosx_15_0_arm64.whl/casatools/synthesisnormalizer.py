##################### generated by xml-casa (v2) from synthesisnormalizer.xml #######
##################### 5c52f43142d26b85b7c00376fce2fcd2 ##############################
from __future__ import absolute_import 
from .__casac__.synthesisnormalizer import synthesisnormalizer as _synthesisnormalizer

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce
from .synthesisimstore import synthesisimstore as _wrap_synthesisimstore

class synthesisnormalizer:
    _info_group_ = """synthesisnormalizer"""
    _info_desc_ = """tool for synthesis imaging"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct {tt synthesisnormalizer} tool.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _synthesisnormalizer()

    def setupnormalizer(self, normpars={ }):
        """
        """
        return self._swigobj.setupnormalizer(normpars)

    def gatherweightdensity(self):
        """
        """
        return self._swigobj.gatherweightdensity()

    def scatterweightdensity(self):
        """scatter sum gridded weight image for continuum Briggs style to other siimagestore
        returns the disk name if it exists
        """
        return self._swigobj.scatterweightdensity()

    def gatherpsfweight(self):
        """
        """
        return self._swigobj.gatherpsfweight()

    def gatherresidual(self):
        """
        """
        return self._swigobj.gatherresidual()

    def dividepsfbyweight(self):
        """
        """
        return self._swigobj.dividepsfbyweight()

    def makepsfbeamset(self):
        """
        """
        return self._swigobj.makepsfbeamset()

    def divideweightbysumwt(self):
        """
        """
        return self._swigobj.divideweightbysumwt()

    def normalizeprimarybeam(self):
        """
        """
        return self._swigobj.normalizeprimarybeam()

    def divideresidualbyweight(self, singledish=False):
        """
        """
        return self._swigobj.divideresidualbyweight(singledish)

    def dividemodelbyweight(self):
        """
        """
        return self._swigobj.dividemodelbyweight()

    def multiplymodelbyweight(self):
        """
        """
        return self._swigobj.multiplymodelbyweight()

    def scattermodel(self):
        """
        """
        return self._swigobj.scattermodel()

    def getimstore(self):
        """
        """
        return _wrap_synthesisimstore(swig_object=self._swigobj.getimstore())

    def unlockimages(self):
        """
        """
        return self._swigobj.unlockimages()

    def setimstore(self, imstore=None):
        """
        """
        return self._swigobj.setimstore(imstore._swigobj if hasattr(imstore,'_swigobj') else imstore)

    def done(self):
        """
        """
        return self._swigobj.done()


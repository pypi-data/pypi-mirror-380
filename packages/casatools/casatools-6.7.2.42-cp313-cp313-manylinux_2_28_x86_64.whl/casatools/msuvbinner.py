##################### generated by xml-casa (v2) from msuvbinner.xml ################
##################### 88ce2d28449807b36b27090e0b1d1699 ##############################
from __future__ import absolute_import 
from .__casac__.msuvbinner import msuvbinner as _msuvbinner

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class msuvbinner:
    _info_group_ = """msuvbinner"""
    _info_desc_ = """Create a gridded/and or bin  onto a measurementset from a set of measurementsets """
    ### self, phasecenter='', nx=int(256), ny=int(256), ncorr=int(1), nchan=int(1), cellx='1arcsec', celly='1arcsec', fstart='1GHz', fstep='1MHz', memfrac=float(0.5), wproject=False, doflag=False
    def __init__(self, phasecenter='', nx=int(256), ny=int(256), ncorr=int(1), nchan=int(1), cellx='1arcsec', celly='1arcsec', fstart='1GHz', fstep='1MHz', memfrac=float(0.5), wproject=False, doflag=False, *args, **kwargs):
        """
        """
        schema = {'phasecenter': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cDict'}]}, 'nx': {'type': 'cInt'}, 'ny': {'type': 'cInt'}, 'ncorr': {'type': 'cInt'}, 'nchan': {'type': 'cInt'}, 'cellx': {'type': 'cStr', 'coerce': _coerce.to_str}, 'celly': {'type': 'cStr', 'coerce': _coerce.to_str}, 'fstart': {'type': 'cStr', 'coerce': _coerce.to_str}, 'fstep': {'type': 'cStr', 'coerce': _coerce.to_str}, 'memfrac': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'wproject': {'type': 'cBool'}, 'doflag': {'type': 'cBool'}}
        doc = {'phasecenter': phasecenter, 'nx': nx, 'ny': ny, 'ncorr': ncorr, 'nchan': nchan, 'cellx': cellx, 'celly': celly, 'fstart': fstart, 'fstep': fstep, 'memfrac': memfrac, 'wproject': wproject, 'doflag': doflag}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _msuvbinner(_pc.document['phasecenter'], _pc.document['nx'], _pc.document['ny'], _pc.document['ncorr'], _pc.document['nchan'], _pc.document['cellx'], _pc.document['celly'], _pc.document['fstart'], _pc.document['fstep'], _pc.document['memfrac'], _pc.document['wproject'], _pc.document['doflag'])

    def selectdata(self, msname='', spw='', field='0', baseline='', scan='', uvrange='', taql=''):
        """
        """
        return self._swigobj.selectdata(msname, spw, field, baseline, scan, uvrange, taql)

    def setoutputms(self, outms=''):
        """Where  gridded visibilities will be stored;  either an already existant ms or a new one will be made. If a file of the name exist and the input parameters match then new gridded data will be added to the existing one; this is the way to add data of multiple epochs on the same grid.
        
        """
        return self._swigobj.setoutputms(outms)

    def filloutputms(self):
        """launch gridding process from selected input to set output
        
        """
        return self._swigobj.filloutputms()


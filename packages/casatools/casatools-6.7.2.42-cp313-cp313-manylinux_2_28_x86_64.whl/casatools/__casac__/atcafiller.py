# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_atcafiller')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_atcafiller')
    _atcafiller = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atcafiller', [dirname(__file__)])
        except ImportError:
            import _atcafiller
            return _atcafiller
        try:
            _mod = imp.load_module('_atcafiller', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _atcafiller = swig_import_helper()
    del swig_import_helper
else:
    import _atcafiller
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class atcafiller(_object):
    """Proxy of C++ casac::atcafiller class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atcafiller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atcafiller, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> atcafiller"""
        this = _atcafiller.new_atcafiller()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, *args, **kwargs):
        """
        open(self, _msname, _filenames, _options) -> bool



        Summary:
            Specify the names of the data files and MeasurementSet

        Description:


        This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. After the completion of the fill operation
        you should call the done method to avoid problems with incomplete
        flushing of the data to disk. You may want to run select before fill, to
        reduce the amount of data you read in.

        In the filenames argument commas are not allowed because of the
        wildcard capability.

        The options argument allows for special processing options during the
        filling process.

        * birdie: remove self generated birdies in 128 MHz
        data by deleting every other channel and the edge
        channels
        * reweight: suppress ringing of interference spikes by
        reweighting the lag spectrum for minimum spectral sidelobe response
        * noxycorr: do not apply the xyphase
        correction using the noise cal xy phase measurements (use if you
        know there was a problem with the measurements)
        * compress: Compress the data, model, corrected data and imaging weight
        columns (may reduce dynamic range)
        * fastmosaic: Produce a MeasurementSet with small tiles to optimize I/O
        for observations with a large number of pointings and a short time (a few
        integrations) on each pointing. Failing to use this options for such data
        may cause very inefficient access, especially for continuum data
        (10-100 times slower)
        * hires: For data taken in binning mode: set the TIME_CENTROID column to
        the center of each bin (normally center of integration interval). The TIME column is
        unaffected. TIME_CENTROID will no longer be in time order for dual frequency
        mode.
        * noac : Do not load the autocorrelations

        Input Parameters:
            msname                    Filename for MeasurementSet to create 
            filenames                 Existing RPFITS files to read; wild cards accepted, don't use commas 
            options                   Processing options: birdie, rfiflag, noxycorr, compress, fastmosaic, hires, reweight, noac 

        Example:

        #Specify that we want to load the data from files 1999-01-01_0101.C999 and
        #1999-01-01_0202.C999 in the directory /data/RPFITS into the MeasurementSet
        #myms.
        atf = atcafiller()
        atf.open('myms',
        '/data/RPFITS/1999-01-01_0101.C999 /data/RPFITS/1999-01-01_0202.C999',
        'birdie reweight')
        atf.fill()
        del atf
        myms:=ms('myms')
        myms.nrow()
        #1204
        myms.close()

        --------------------------------------------------------------------------------

        """
        return _atcafiller.atcafiller_open(self, *args, **kwargs)


    def fill(self):
        """
        fill(self) -> bool



        Summary:
            Fill the MeasurementSet

        Description:


        This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. You may want to run select before fill, to
        reduce the amount of data you read in.

        Example:

        #Specify that we want to load the data from files 1999-01-01_0101.C999 and
        #1999-01-01_0202.C999 in the directory /data/RPFITS into the MeasurementSet #myms.
        atf = atcafiller()
        atf.open('myms',
        '/data/RPFITS/1999-01-01_0101.C999 /data/RPFITS/1999-01-01_0202.C999',
        'birdie reweight')
        atf.fill()
        del atf
        myms:=ms('myms')
        myms.nrow()
        #1204
        myms.close()

        --------------------------------------------------------------------------------

        """
        return _atcafiller.atcafiller_fill(self)


    def select(self, *args, **kwargs):
        """
        select(self, _firstscan, _lastscan, _spw, _lowfreq, _highfreq, _fields, _edge) -> bool



        Summary:
            Select the data to fill

        Description:



        Select on various items, to load only a subset of the data present in
        the input file. The default is to load everything.
        Note that the frequency selection using lowfreq and highfreq acts purely on
        center (reference) frequencies, channel selection is not available at this stage.
        Use freqchain to select the frequency chain (or IF) to load,
        specify either 1 or 2, the default of zero will load both.
        Use the fields parameter to specify a list of field names (sources) you
        want to load.
        For detailed selection of complex observations the last two parameters let
        you specify the required bandwidth (in whole MHz) and number of channels
        of the first frequency chain.

        Input Parameters:
            firstscan                 First scan to read
            lastscan                  Last scan to read
            spw                       Select one or more spectralwindows , -1=all 
            lowfreq                   Lowest reference frequency to select
            highfreq                  Highest reference frequency to select
            fields                    List of field names (sources) to select 
            edge                      Percentage of edge channels to flag 

        Example:

        #Select scans 4 to 10 inclusive, frequency chain 1, all data with a
        #reference frequency of more than 1.4 GHz.
        atf = atcafiller()
        atf.open('myms', '/data/RPFITS/1999-01-01_0101.C999')
        atf.select(firstscan=4, lastscan=10, freqchain=1, lowfreq=1.4,edge=10)
        atf.fill()
        del atf

        --------------------------------------------------------------------------------

        """
        return _atcafiller.atcafiller_select(self, *args, **kwargs)


    def opacities(self, *args, **kwargs):
        """
        opacities(self, _fghz, _tempk, _humi, _press, _height) -> std::vector< double >



        Summary:
            Calculate opacity correction

        Description:


        This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. You may want to run select before fill, to
        reduce the amount of data you read in.

        Input Parameters:
            fghz                      array of frequencies
            tempk                     surface temperature in K
            humi                      humidity in %
            press                     surface pressure in hPa
            height                    observatory height in m

        Example:

        #
        atf = atcafiller()
        opac=atf.opacities([22.0,23.0],300.,50.,1013.,200.)
        print opac
        del atf

        --------------------------------------------------------------------------------

        """
        return _atcafiller.atcafiller_opacities(self, *args, **kwargs)

    __swig_destroy__ = _atcafiller.delete_atcafiller
    __del__ = lambda self: None
atcafiller_swigregister = _atcafiller.atcafiller_swigregister
atcafiller_swigregister(atcafiller)

# This file is compatible with both classic and new-style classes.



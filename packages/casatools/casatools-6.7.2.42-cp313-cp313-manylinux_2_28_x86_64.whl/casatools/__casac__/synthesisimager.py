# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_synthesisimager')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_synthesisimager')
    _synthesisimager = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_synthesisimager', [dirname(__file__)])
        except ImportError:
            import _synthesisimager
            return _synthesisimager
        try:
            _mod = imp.load_module('_synthesisimager', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _synthesisimager = swig_import_helper()
    del swig_import_helper
else:
    import _synthesisimager
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class synthesisimager(_object):
    """Proxy of C++ casac::synthesisimager class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synthesisimager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synthesisimager, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> synthesisimager"""
        this = _synthesisimager.new_synthesisimager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def selectdata(self, *args, **kwargs):
        """
        selectdata(self, _selpars) -> bool



        Summary:
            Select data from one MS

        Input Parameters:
            selpars                   All parameters that control selection within one MS

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_selectdata(self, *args, **kwargs)


    def tuneselectdata(self):
        """
        tuneselectdata(self) -> record *



        Summary:
            reselect the data to match image definition

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_tuneselectdata(self)


    def defineimage(self, *args, **kwargs):
        """
        defineimage(self, _impars, _gridpars) -> bool



        Summary:
            Define image coordinate systems FTMs

        Input Parameters:
            impars                    All parameters that control image coordinate system definition
            gridpars                  All parameters that control ftmachines and gridding parameters

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_defineimage(self, *args, **kwargs)


    def normalizerinfo(self, *args, **kwargs):
        """
        normalizerinfo(self, _normpars) -> bool



        Summary:
            pass normalizer info for C++ normalization in lieu of python based normalization

        Input Parameters:
            normpars                  Normalization parameters in a record

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_normalizerinfo(self, *args, **kwargs)


    def setdata(self, *args, **kwargs):
        """
        setdata(self, _msname, _spw, _freqbeg, _freqend, _freqframe, _field, _antenna, _timestr, _scan, _obs, _state, _uvdist, _taql, _usescratch, _readonly, _incrmodel) -> bool



        Summary:
            Select data from one MS via conventional parameters (in lieu of selectdata)

        Description:


        Select data from one MS. Call this function in succession if there are
        multiple MSs.

        Input Parameters:
            msname                    Name of one measurement set
            spw                       Spectral Window / Channel / Frequency selection
            freqbeg                   Starting frequency/velocity/channel as a string with units. If spw is also supplied, the intersection will be used
            freqend                   End frequency/velocity/channel as a string with units.
            freqframe                 Frequency frame in which freqbeg and freqend are specified.
            field                     Field selection
            antenna                   Antenna / Baseline selection
            timestr                   Time range selection
            scan                      Scan selection
            obs                       Observation id selection
            state                     Scan Intent or State selection
            uvdist                    UV range selection
            taql                      Generic taql selection
            usescratch                Use scratch column (True) or virtual records (False) for model data
            readonly                  Open the MS in readonly mode. No model data will be written.
            incrmodel                 Subtract existing model data and start with residuals

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_setdata(self, *args, **kwargs)


    def setimage(self, *args, **kwargs):
        """
        setimage(self, _imagename, _nx, _ny, _cellx, _celly, _stokes, _phasecenter, _nchan, _freqstart, _freqstep, _restfreq, _facets, _ftmachine, _ntaylorterms, _reffreq, _projection, _distance, _freqframe, _tracksource, _trackdir, _overwrite, _padding, _useautocorr, _usedoubleprec, _wprojplanes, _convfunc, _startmodel, _aterm, _psterm, _mterm, _wbawp, _cfcache, _usepointing, _pointingoffsetsigdev, _dopbcorr, _conjbeams, _computepastep, _rotatepastep) -> bool



        Summary:
            Define the image coordinate systems and types via conventinal parameters in lieu of defineimage

        Description:


        Define the image coordinate systems and shapes.

        Input Parameters:
            imagename                 Base image name
            nx                        Total number of spatial pixels in x
            ny                        Total number of spatial pixels in y
            cellx                     Cellsize in x (e.g. '1arcsec')
            celly                     Cellsize in y (e.g. '1arcsec')
            stokes                    Stokes parameters to image (e.g. 'IQUV')
            phasecenter               Direction of phase center as a diretion measure or a field id 
            nchan                     Number of channels; a -1 (default) means all the channels as selected in selectvis and combined into one continuum channel 
            freqstart                 Start channel; A 0-relative channel number of the spwid  or a frequency quantity      or a velocity quantity or radial velocity measure
            freqstep                  Step in channel; integer for number of channels or frequency quantity or velocity quantity or radial velocity measure
            restfreq                  rest frequency to use; default => use the one available in ms 
            facets                    Number of facets on each axis
            ftmachine                 FT-Machine type
            ntaylorterms              Number of terms for a spectral Taylor expansion
            reffreq                   Reference Frequency of the image. Also used in the Taylor expansion.
            projection                Image coordinate system projection
            distance                  Distance to object: usually ignore this! (m)
            freqframe                 Frequency frame in which freqstart and freqstep are specified.
            tracksource               Track a source.
            trackdir                  Name of moving source, e.g planet or moon, to keep fixed in image
            overwrite                 Overwrite the image if it exists (true)
            padding                   FFT padding
            useautocorr               Use auto correlations
            usedoubleprec             Double Precision gridding or not
            wprojplanes               Number of w-projection planes
            convfunc                  Name of convolution function
            startmodel                Starting model ( image name or component list name )
            aterm                     Set the antenna aperture tmer (aterm) on/off
            psterm                    Set the Prolate Spheroidal term (psterm) on/off
            mterm                     Set the mosaic term (mterm) on/off
            wbawp                     Set usage of the wide-band A-Projection algorithm
            cfcache                   Name of convolution function disk cache
            usepointing               Control application of the pointing correction
            pointingoffsetsigdev      Control application of the pointing correction for heterogenous array allowing for antenna pointing group identification using this parameter. The parameter has a significant cost on the memory used for gridding. Please utilize it wisely.
            dopbcorr                  Control normalization of the raw image by the model PB
            conjbeams                 Set conjbeams on/off
            computepastep             Increment in PA after which re-computation of the GCFs is triggered.  360.0 implies compute GCFs for only the first PA value encountered in the MS.
            rotatepastep              Increment in PA after which trigger in-memory rotation of the GCF nearest to the current PA value in the CF cache.

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_setimage(self, *args, **kwargs)


    def setweighting(self, *args, **kwargs):
        """
        setweighting(self, _type, _rmode, _noise, _robust, _fieldofview, _npixels, _multifield, _usecubebriggs, _uvtaper) -> bool



        Summary:
            Set parameters to control weighting during imaging

        Input Parameters:
            type                      Data weighting scheme
            rmode                     rmode
            noise                     Noise level
            robust                    Robustness weighting factor
            fieldofview               Field of view
            npixels                   NPixels
            multifield                Multifield
            usecubebriggs             Use per channel weight density calculation for Briggs style weighting
            uvtaper                   Parameters of uv-taper Gaussian

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_setweighting(self, *args, **kwargs)


    def makepsf(self):
        """
        makepsf(self) -> bool



        Summary:
            Make the psf

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_makepsf(self)


    def apparentsens(self):
        """
        apparentsens(self) -> record *



        Summary:
            Calculate apparent aggregate sensitivity in the selected visibilities

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_apparentsens(self)


    def predictmodel(self):
        """
        predictmodel(self) -> bool



        Summary:
            Predict model visibilities.

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_predictmodel(self)


    def drygridding(self, *args, **kwargs):
        """
        drygridding(self, _cflist) -> bool



        Summary:
            Run a dry gridding run.

        Description:




        Input Parameters:
            cflist                     List of CFs 

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_drygridding(self, *args, **kwargs)


    def fillcfcache(self, *args, **kwargs):
        """
        fillcfcache(self, _cflist, _ftmname, _cfcpath, _pstermon, _atermon, _conjbeams) -> bool



        Summary:
             Fill a potentially blank CFCache held inside the AWProject-class FTMachines. 

        Description:




        Input Parameters:
            cflist                     List of CFs 
            ftmname                    Name of the FTMachine used 
            cfcpath                    Path to the CFCache on the disk 
            pstermon                   Is the PS-term ON? 
            atermon                    Is the A-term ON? 
            conjbeams                  Use WB A-Projection algorithm (use frequency-conjugate beams)? 

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_fillcfcache(self, *args, **kwargs)


    def reloadcfcache(self):
        """
        reloadcfcache(self) -> bool



        Summary:
             Re-load the CFCache, the name of which should already be set in the tool. 

        Description:




        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_reloadcfcache(self)


    def executemajorcycle(self, *args, **kwargs):
        """
        executemajorcycle(self, _controls) -> bool



        Summary:
            Run a major cycle

        Input Parameters:
            controls                  All parameters that control major cycle

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_executemajorcycle(self, *args, **kwargs)


    def makepb(self):
        """
        makepb(self) -> bool



        Summary:
            Make the primary beam

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_makepb(self)


    def makesdimage(self):
        """
        makesdimage(self) -> bool



        Summary:
            Make the single-dish image

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_makesdimage(self)


    def makesdpsf(self):
        """
        makesdpsf(self) -> bool



        Summary:
            Make the single-dish PSF

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_makesdpsf(self)


    def makeimage(self, *args, **kwargs):
        """
        makeimage(self, _type, _image, _compleximage, _model) -> bool



        Summary:
            calculate images of different type by gridding

        Description:


        This tool function actually does gridding (and Fourier inversion if
        needed) of visibility data to make an image. It allows calculation of
        various types of image:
        begin{description}
        item[observed] Make the dirty image from the DATA column ({em default})
        item[model] Make the dirty image from the MODEL_DATA column
        item[corrected] Make the dirty image from the CORRECTED_DATA column
        item[residual] Make the dirty image from the difference of the
        CORRECTED_DATA and MODEL_DATA columns
        item[psf] Make the point spread function
        item[singledish] Make a single dish image
        item[coverage] Make a single dish or mosaic coverage image
        item[holography] Make a complex holography image (experimental)

        end{description}

        Input Parameters:
            type                      Type of output image
            image                     Name of output image
            compleximage              Name of output complex image
            model                     In case of multifield which image

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_makeimage(self, *args, **kwargs)


    def unlockimages(self, *args, **kwargs):
        """
        unlockimages(self, _imagefieldid) -> bool



        Summary:
            release some images attached to this process

        Description:


        Try to unlock images if the need arise

        Input Parameters:
            imagefieldid              which image or outlier to unlock

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_unlockimages(self, *args, **kwargs)


    def estimatememory(self):
        """
        estimatememory(self) -> casac::variant *



        Summary:
            Get an estimate in kilobytes of memory that will be needed

        Description:


        This function returns an estimate of the memory (RAM) to be used by sythesisimager tool. Need to be run after functions setdata and defineimage are done

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_estimatememory(self)


    def getimstore(self, *args, **kwargs):
        """
        getimstore(self, _id) -> casac::synthesisimstore *



        Summary:
            Get Image Store

        Input Parameters:
            id                        Image field id

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_getimstore(self, *args, **kwargs)


    def getImageName(self, *args, **kwargs):
        """
        getImageName(self, _facetId, _imageId, _taylorTerm) -> string



        Summary:
            Get Image Name

        Description:


        Get the image name for the given type of image (eg 'PB'), the facet index, and the taylor term.


        Input Parameters:
            facetId                   Facet index
            imageId                   Image identifer (eg 'PSF')
            taylorTerm                Taylor term. Only needed for mfs deconvolvers.

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_getImageName(self, *args, **kwargs)


    def getcsys(self):
        """
        getcsys(self) -> record *



        Summary:
            get internally stored coordsys record

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_getcsys(self)


    def updatenchan(self):
        """
        updatenchan(self) -> long



        Summary:
            get internally stored updated nchan

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_updatenchan(self)


    def getweightdensity(self):
        """
        getweightdensity(self) -> string



        Summary:
            Save natural gridded wt to disk.

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_getweightdensity(self)


    def setweightdensity(self, *args, **kwargs):
        """
        setweightdensity(self, _type) -> bool



        Summary:
            Load the gridded weight density into image weighting generation

        Description:


        Load the gridded weight density into image weighting; useful in parallel when weight density is combined into one image and loaded in each process. if no imagename is passed the imagename.weight is loaded


        Input Parameters:
            type                      name of image holding combined weight density

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_setweightdensity(self, *args, **kwargs)


    def initmpi(self):
        """
        initmpi(self) -> bool



        Summary:
            init c++ based mpi

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_initmpi(self)


    def releasempi(self):
        """
        releasempi(self) -> bool



        Summary:
            release c++ based mpi back to python

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_releasempi(self)


    def inithpg(self):
        """
        inithpg(self) -> bool



        Summary:
            init gpu code

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_inithpg(self)


    def hpg_enabled(self):
        """
        hpg_enabled(self) -> bool



        Summary:
            init gpu code

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_hpg_enabled(self)


    def done(self):
        """
        done(self) -> bool



        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _synthesisimager.synthesisimager_done(self)

    __swig_destroy__ = _synthesisimager.delete_synthesisimager
    __del__ = lambda self: None
synthesisimager_swigregister = _synthesisimager.synthesisimager_swigregister
synthesisimager_swigregister(synthesisimager)

# This file is compatible with both classic and new-style classes.



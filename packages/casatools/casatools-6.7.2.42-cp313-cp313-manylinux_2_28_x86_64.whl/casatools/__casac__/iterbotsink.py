# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_iterbotsink')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_iterbotsink')
    _iterbotsink = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_iterbotsink', [dirname(__file__)])
        except ImportError:
            import _iterbotsink
            return _iterbotsink
        try:
            _mod = imp.load_module('_iterbotsink', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _iterbotsink = swig_import_helper()
    del swig_import_helper
else:
    import _iterbotsink
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class iterbotsink(_object):
    """Proxy of C++ casac::iterbotsink class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iterbotsink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iterbotsink, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> iterbotsink"""
        this = _iterbotsink.new_iterbotsink()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupiteration(self, *args, **kwargs):
        """
        setupiteration(self, _iterpars) -> record *



        Summary:
            Set parameters to control iteration mechanisms

        Input Parameters:
            iterpars                  All parameters that control iterations

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_setupiteration(self, *args, **kwargs)


    def cleanComplete(self, *args, **kwargs):
        """
        cleanComplete(self, _lastcyclecheck, _reachedMajorLimit) -> long



        Summary:
            Return true when we have completed this clean

        Input Parameters:
            lastcyclecheck            Check using peak residual before major cycle.
            reachedMajorLimit         Let the iterbot know if we've reached our desired limit for major cycles.

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_cleanComplete(self, *args, **kwargs)


    def endmajorcycle(self):
        """
        endmajorcycle(self) -> bool



        Summary:
            Record the end of a major cycle

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_endmajorcycle(self)


    def resetminorcycleinfo(self):
        """
        resetminorcycleinfo(self) -> bool



        Summary:
            Reset info about peak residual and masks, before start minor cycles

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_resetminorcycleinfo(self)


    def getminorcyclecontrols(self):
        """
        getminorcyclecontrols(self) -> record *



        Summary:
            Get the controller for a minor cycle

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getminorcyclecontrols(self)


    def mergeexecrecord(self, *args, **kwargs):
        """
        mergeexecrecord(self, _execrecord, _immod) -> bool



        Summary:
            Update the iterbot with iteration stats from the deconvolver

        Input Parameters:
            execrecord                Pass in the output of synthesisdeconvolver.executeminorcycle()
            immod                     Outlier field id

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_mergeexecrecord(self, *args, **kwargs)


    def changestopflag(self, *args, **kwargs):
        """
        changestopflag(self, _stopflag) -> bool



        Summary:
            Change the stop flag (for interactive clean)

        Input Parameters:
            stopflag                  Set to False for the next cleanComplete() check to stop the run

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_changestopflag(self, *args, **kwargs)


    def mergeinitrecord(self, *args, **kwargs):
        """
        mergeinitrecord(self, _initrecord, _immod) -> bool



        Summary:
            Initialize the iterbot with starting peak residuals

        Input Parameters:
            initrecord                Pass in the output of synthesisdeconvolver.initminorcycle()
            immod                     Outlier field id

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_mergeinitrecord(self, *args, **kwargs)


    def getiterationdetails(self):
        """
        getiterationdetails(self) -> record *



        Summary:
            Return a record with the details of the iteration

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getiterationdetails(self)


    def pauseforinteraction(self):
        """
        pauseforinteraction(self) -> record *



        Summary:
            Pause for interaction

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_pauseforinteraction(self)


    def getiterationsummary(self):
        """
        getiterationsummary(self) -> record *



        Summary:
            Return a record with a summary of the iteration

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_getiterationsummary(self)


    def done(self):
        """
        done(self) -> bool



        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _iterbotsink.iterbotsink_done(self)

    __swig_destroy__ = _iterbotsink.delete_iterbotsink
    __del__ = lambda self: None
iterbotsink_swigregister = _iterbotsink.iterbotsink_swigregister
iterbotsink_swigregister(iterbotsink)

# This file is compatible with both classic and new-style classes.



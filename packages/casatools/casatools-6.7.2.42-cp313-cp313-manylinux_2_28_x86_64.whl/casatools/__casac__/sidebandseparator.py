# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sidebandseparator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sidebandseparator')
    _sidebandseparator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sidebandseparator', [dirname(__file__)])
        except ImportError:
            import _sidebandseparator
            return _sidebandseparator
        try:
            _mod = imp.load_module('_sidebandseparator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sidebandseparator = swig_import_helper()
    del swig_import_helper
else:
    import _sidebandseparator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class sidebandseparator(_object):
    """Proxy of C++ casac::sidebandseparator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sidebandseparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sidebandseparator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> sidebandseparator"""
        this = _sidebandseparator.new_sidebandseparator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, *args, **kwargs):
        """
        open(self, _imagename) -> bool



        Summary:
            Construct a sideband separator tool

        Description:




        Input Parameters:
            imagename                 A list of image names

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_open(self, *args, **kwargs)


    def close(self):
        """
        close(self) -> bool



        Summary:
            Close the sideband separator tool

        Description:


        Close tools and write data to disk. This is a synonym for done.


        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_close(self)


    def done(self):
        """
        done(self) -> bool



        Summary:
            Close the sideband separator tool

        Description:


        Close tools and write data to disk. This is a synonym for done.


        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_done(self)


    def setshift(self, *args, **kwargs):
        """
        setshift(self, _shift, _signal) -> bool



        Description:




        Input Parameters:
            shift                     
            signal                    

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setshift(self, *args, **kwargs)


    def setlimit(self, *args, **kwargs):
        """
        setlimit(self, _threshold) -> bool



        Description:




        Input Parameters:
            threshold                 

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setlimit(self, *args, **kwargs)


    def setboth(self, *args, **kwargs):
        """
        setboth(self, _getbothside) -> bool



        Description:




        Input Parameters:
            getbothside               

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setboth(self, *args, **kwargs)


    def set_imageband_frequency(self, *args, **kwargs):
        """
        set_imageband_frequency(self, _refpix, _refval) -> bool



        Description:




        Input Parameters:
            refpix                    
            refval                    

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_set_imageband_frequency(self, *args, **kwargs)


    def setsolveother(self, *args, **kwargs):
        """
        setsolveother(self, _subtract_from_other) -> bool



        Description:




        Input Parameters:
            subtract_from_other       

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_setsolveother(self, *args, **kwargs)


    def separate(self, *args, **kwargs):
        """
        separate(self, _outfile, _overwrite) -> bool



        Description:




        Input Parameters:
            outfile                   
            overwrite                 

        --------------------------------------------------------------------------------

        """
        return _sidebandseparator.sidebandseparator_separate(self, *args, **kwargs)

    __swig_destroy__ = _sidebandseparator.delete_sidebandseparator
    __del__ = lambda self: None
sidebandseparator_swigregister = _sidebandseparator.sidebandseparator_swigregister
sidebandseparator_swigregister(sidebandseparator)

# This file is compatible with both classic and new-style classes.



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_agentflagger')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_agentflagger')
    _agentflagger = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_agentflagger', [dirname(__file__)])
        except ImportError:
            import _agentflagger
            return _agentflagger
        try:
            _mod = imp.load_module('_agentflagger', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _agentflagger = swig_import_helper()
    del swig_import_helper
else:
    import _agentflagger
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class agentflagger(_object):
    """Proxy of C++ casac::agentflagger class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, agentflagger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, agentflagger, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> agentflagger"""
        this = _agentflagger.new_agentflagger()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def done(self):
        """
        done(self) -> bool



        Summary:
            Destroy the flag tool

        Example:

        af.done()

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_done(self)


    def open(self, *args, **kwargs):
        """
        open(self, _msname, _ntime) -> bool



        Summary:
            Open the MS or a calibration table and attach it to the tool.

        Input Parameters:
            msname                    Measurement set or calibration table to be processed. Default:
            ntime                     Time interval. If not given, the default will be used. Default:

        Example:

        af.open(msname,ntime)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_open(self, *args, **kwargs)


    def selectdata(self, *args, **kwargs):
        """
        selectdata(self, _config, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _timerange, _correlation, _intent, _observation) -> bool



        Summary:
            Select the data based on the given parameters. For unspecified parameters, the full data range is assumed. All data selection parameters follow the MS Selection syntax. 

        Input Parameters:
            config                    The record (dictionary) config may be given or not. If it is not given, and no specific parameter is given either, the whole MS will be selected. The record may contain any data selection parameters supported by MS Selection such as: 
            field                     Field indices or source names : example : '2,3C48'
            spw                       Spectral Window Indices or names : example : '1,2'
            array                     Array Indices or names : example : 'VLAA'
            feed                      Feed index or name : example : '1,2' (not supported yet)
            scan                      Scan number : example : '1,2,3'
            antenna                   Baseline number : example : '2,3,4,5'
            uvrange                   UV-distance range, with a unit : example : '2.0-3000.0 m'
            timerange                 Time range, as MJDs or date strings : example : 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations : example : 'RR,LL,RL,LR,XX,YY,XY,YX,Sol1'
            intent                    Scan intent : example : '*CAL*, *BAND*'
            observation               Observation Id : example : '2~4'

        Example:

        Select the whole MS
        af.selectdata()

        Select a portion of the MS
        myrecord={}
        myrecord['scan']='1~3'
        myrecord['spw']='0:1~10'
        af.selectdata(myrecord)

        Another way to select a portion of the MS
        af.selectdata(scan='3~5', spw='0')

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_selectdata(self, *args, **kwargs)


    def parseagentparameters(self, *args, **kwargs):
        """
        parseagentparameters(self, _aparams) -> bool



        Summary:
            Parse the parameters for the agent (flagging mode).

        Description:

        The specific data selection parameters for the agent (flagging mode)
        are parsed. These parameters are the data selection and mode-specific parameters.
        See the example below:

        Input Parameters:
            aparams                   It takes a record (dictionary) with the specific parameters for the flagging mode. The record may contain any data selection parameters supported by MS Selection, as well as mode-specific parameters such as:  (1) array,feed,scan,field,spw,intent,correlation,antenna,uvrange,observation (2) mode (which can be: manual,clip,quack,shadow,elevation,tfcrop,extendflags,unflag or summary) .   For flagging mode=clip, the parameters are: expression, datacolumn, clipminmax, etc. .   See the documentation of the task flagdata for all the available parameters for each mode.n (3) apply: default is true (true for flagging and false for unflagging)  Example:  myrecord={} myrecord['mode']='clip' myrecord['scan']='1~3' myrecord['clipminmax']=[0.02,0.3] myrecord['apply']=True af.parseagentparameters(myrecord)  

        Example:

        myrecord={}
        myrecord['mode']='clip'
        myrecord['scan']='1~3'
        myrecord['clipminmax']=[0.02,0.3]
        myrecord['apply']=True
        af.parseagentparameters(myrecord)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parseagentparameters(self, *args, **kwargs)


    def init(self):
        """
        init(self) -> bool



        Summary:
            Initialize the agents

        Description:

        This method will initialize the agents and create a list of agents
        with their specific parameters. It takes no parameters.

        Example:

        af.init()

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_init(self)


    def run(self, *args, **kwargs):
        """
        run(self, _writeflags, _sequential) -> record *



        Summary:
            Execute a list of flagging agents

        Description:


        Execute a list of flagging agents and write or not to the MS/cal table. The parameter
        writeflags controls whether or not to write to the MS.

        Input Parameters:
            writeflags                Write flags to MS (default: True)
            sequential                Run the agents in the order they are inserted in the list or not. Default is True to run in the original order.

        Example:

        af.run()

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_run(self, *args, **kwargs)


    def getflagversionlist(self, *args, **kwargs):
        """
        getflagversionlist(self, _printflags) -> std::vector< std::string >



        Summary:
            Print out a list of saved flag_versions.

        Description:


        Print out the list of flag versions in the MS, unless the parameter printflags=False. The list of names is returned.

        Input Parameters:
            printflags                Print flagversions in logger?

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_getflagversionlist(self, *args, **kwargs)


    def printflagselection(self):
        """
        printflagselection(self) -> bool



        Summary:
            Print out a list of current flag selections. 

        Description:


        Print out a list of current flag selections.

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_printflagselection(self)


    def saveflagversion(self, *args, **kwargs):
        """
        saveflagversion(self, _versionname, _comment, _merge) -> bool



        Summary:
            Save current flags with a version name. 

        Input Parameters:
            versionname               Version name
            comment                   Comment for this flag table
            merge                     merge type

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_saveflagversion(self, *args, **kwargs)


    def restoreflagversion(self, *args, **kwargs):
        """
        restoreflagversion(self, _versionname, _merge) -> bool



        Summary:
            Restore flags from a saved flag_version. n versionname : name of flag version to restore to main table n merge : Type of operation to perform during restoration. n        merge = replace  : replaces the main table flags. n        merge = and   : logical AND with main table flags n        merge = or    : logical OR with main table flags n        Default : replace. 

        Input Parameters:
            versionname               Version name
            merge                     merge type

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_restoreflagversion(self, *args, **kwargs)


    def deleteflagversion(self, *args, **kwargs):
        """
        deleteflagversion(self, _versionname) -> bool



        Summary:
            Delete a saved flag_version.

        Input Parameters:
            versionname               Version name

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_deleteflagversion(self, *args, **kwargs)


    def parsemanualparameters(self, *args, **kwargs):
        """
        parsemanualparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _autocorr, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the manual mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5,132'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            autocorr                  Parameter to flag only auto-correlations. Default:
            apply                     Parameter to flag or unflag the data. Default:

        Example:

        af.parsemanualparameters(autocorr=True)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parsemanualparameters(self, *args, **kwargs)


    def parseclipparameters(self, *args, **kwargs):
        """
        parseclipparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _datacolumn, _clipminmax, _clipoutside, _channelavg, _chanbin, _timeavg, _timebin, _clipzeros, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the clip mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            datacolumn                Data column to use for clipping. Supported columns for cal tables are FPARAM,CPARAM,SNR. Example: 'DATA'. Default: 
            clipminmax                Range to use for clipping. Example: [100.0,200.0] 
            clipoutside               Clip points outside this range? [True/False]. Default: 
            channelavg                Average data over channels before clipping? [True/False]. Default: 
            chanbin                   Width (bin) of input channels to average to form an output channel.
            timeavg                   Average data over time ranges. [True/False]. Default: 
            timebin                   Bin width for time average. Example: '2s'
            clipzeros                 Clip zero-value data. [True/False]. Default: 
            apply                     Parameter to flag or unflag data. Default:

        Example:

        The correlation parameter can be used with an operator for the clip mode.
        The operator should be written only once and it will affect all the polarizations
        given in the string. See the example below:

        af.parseclipparameters(clipzeros=True, clipminmax=[0.,4.], correlation='ABS_XX,XY')

        or for a calibration table:
        af.parseclipparameters(clipzeros=True, clipminmax=[0.,4.], correlation='Sol1')

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parseclipparameters(self, *args, **kwargs)


    def parsequackparameters(self, *args, **kwargs):
        """
        parsequackparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _quackmode, _quackinterval, _quackincrement, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the quack mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            quackmode                 Quack mode. Default:
            quackinterval             Quack length in seconds. Default:
            quackincrement            Increment quack flagging in time taking into account flagged data or not. Default:
            apply                     Parameter to flag or unflag the data. Default:

        Example:

        af.parsequackparameters(scan='1~3', quackmode='beg', quackinterval=1)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parsequackparameters(self, *args, **kwargs)


    def parseelevationparameters(self, *args, **kwargs):
        """
        parseelevationparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _lowerlimit, _upperlimit, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the elevation mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            lowerlimit                The limiting elevation in degrees. Data obtained at lower antenna elevations will get flagged. Default: 
            upperlimit                The limiting elevation in degrees. Data obtained at higher antenna elevations will get flagged. Default: 
            apply                     Parameter to flag or unflag the data. Default:

        Example:

        To unflag, set the apply parameter.
        af.parseelevationparameters(upperlimit=50.,lowerlimit=10.0, apply=False)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parseelevationparameters(self, *args, **kwargs)


    def parsetfcropparameters(self, *args, **kwargs):
        """
        parsetfcropparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _ntime, _combinescans, _datacolumn, _timecutoff, _freqcutoff, _timefit, _freqfit, _maxnpieces, _flagdimension, _usewindowstats, _halfwin, _extendflags, _apply, _channelavg, _chanbin, _timeavg, _timebin) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the time and frequency mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            ntime                     Time-range to use for each chunk (in seconds or minutes). Default:
            combinescans              Accumulate data across scans depending on the value of ntime. Default:
            datacolumn                Data column to use for clipping. Example: 'DATA'. Default: 
            timecutoff                Flagging thresholds in units of deviation from the fit. Default:
            freqcutoff                Flagging thresholds in units of deviation from the fit. Default:
            timefit                   Fitting function for the time direction (poly/line). Default:
            freqfit                   Fitting function for the frequency direction (poly/line). Default:
            maxnpieces                Number of pieces in the polynomial-fits (for 'freqfit' or 'timefit' = 'poly'). Default:
            flagdimension             Dimensions along which to calculate fits (freq/time/freqtime/timefreq). Default:
            usewindowstats            Calculate additional flags using sliding window statistics (none,sum,std,both). Default:
            halfwin                   Half-width of sliding window to use with 'usewindowstats' (1,2,3). Default:
            extendflags               Extend the flags in time, frequency and correlations. Default:
            apply                     Parameter to flag or unflag the data. Default:
            channelavg                Average data over channels before clipping? [True/False]. Default: 
            chanbin                   Width (bin) of input channels to average to form an output channel.
            timeavg                   Average data over time ranges. [True/False]. Default: 
            timebin                   Bin width for time average. Example: '2s'

        Example:

        The correlation parameter can be used with an operator for the tfcrop mode.
        The operator should be written only once and it will affect all the polarizations
        given in the string. Note that if ntime='scan' and combinescans=True, all the scans will
        be loaded at once, thus requesting a lot of memory depending on the available spws.
        The parameter combinescans should be set to True only when ntime is specified as a
        time-interval (not 'scan'). By default, the flags will be extended in time, if
        more than 50% of the timeranges are flagged, 80% of the channels are flagged and
        it will extend to other polarizations too. This is similar to running the extend
        mode after running tfcrop on the MS.

        af.parsetfcropparameters(spw='9', ntime=10.0, combinescans=True, correlation='ABS_XX,XY', extendflags=True)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parsetfcropparameters(self, *args, **kwargs)


    def parseantintparameters(self, *args, **kwargs):
        """
        parseantintparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _antint_ref_antenna, _minchanfrac, _verbose, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the antint mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            antint_ref_antenna        Antenna for which the fractions of channels flagged will be checked.
            minchanfrac               Minimum fraction of flagged channels required for a baseline to be deemed as flagged. Default:
            verbose                   Print timestamps of flagged integrations to the log. Default:
            apply                     Parameter to flag or unflag the data. Default:

        Example:

        af.parseantintparameters(antint_ref_antenna='ea10', minchanfrac=0.45, verbose=True)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parseantintparameters(self, *args, **kwargs)


    def parseextendparameters(self, *args, **kwargs):
        """
        parseextendparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _ntime, _combinescans, _extendpols, _growtime, _growfreq, _growaround, _flagneartime, _flagnearfreq, _apply) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the extend mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            ntime                     Time-range to use for each chunk (in seconds or minutes). Default:
            combinescans              Accumulate data across scans.. Default:
            extendpols                If any correlation is flagged, flag all correlations. Default:
            growtime                  Flag all 'ntime' integrations if more than X% of the timerange is flagged (0-100). Default:
            growfreq                  Flag all selected channels if more than X% of the frequency range is flagged(0-100). Default:
            growaround                Flag data based on surrounding flags. Default:
            flagneartime              Flag one timestep before and after a flagged one. Default:
            flagnearfreq              Flag one channel before and after a flagged one. Default:
            apply                     Parameter to flag or unflag the data. Default:

        Example:

        af.parseextendparameters(extendpols=True)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parseextendparameters(self, *args, **kwargs)


    def parsesummaryparameters(self, *args, **kwargs):
        """
        parsesummaryparameters(self, _field, _spw, _array, _feed, _scan, _antenna, _uvrange, _time, _correlation, _intent, _observation, _spwchan, _spwcorr, _basecnt, _fieldcnt, _name) -> bool



        Summary:
            Parse data selection parameters and specific parameters for the summary mode. Data selection follows the MS Selection syntax. 

        Input Parameters:
            field                     Field indices or source names. Example: '2,3C48'
            spw                       Spectral Window Indices or names. Example: '1,2'
            array                     Array Indices or names. Example: 'VLAA'
            feed                      Feed index or name. Example: '1,2' (not supported yet)
            scan                      Scan number. Example: '1,2,3'
            antenna                   Baseline number. Example: '2,3,4,5'
            uvrange                   UV-distance range, with a unit. Example: '2.0-3000.0 m'
            time                      Time range, as MJDs or date strings. Example: 'xx.x.x.x.x~yy.y.y.y.y'
            correlation               Correlations/polarizations. Example: 'RR,LL,RL,LR,XX,YY,XY,YX'
            intent                    Scan intent. Example: '*CAL*, *BAND*'
            observation               Observation Id. Example: '2~4'
            spwchan                   List the number of flags per spw and per channel. Default:
            spwcorr                   List the number of flags per spw and per correlation. Default:
            basecnt                   List the number of flags per baseline. Default:
            fieldcnt                  List the number of flags per field. Default:
            name                      Name of this summary report. Default: summary

        Example:

        af.parsesummaryparameters(spwchan=True, basecnt=True)

        --------------------------------------------------------------------------------

        """
        return _agentflagger.agentflagger_parsesummaryparameters(self, *args, **kwargs)

    __swig_destroy__ = _agentflagger.delete_agentflagger
    __del__ = lambda self: None
agentflagger_swigregister = _agentflagger.agentflagger_swigregister
agentflagger_swigregister(agentflagger)

# This file is compatible with both classic and new-style classes.



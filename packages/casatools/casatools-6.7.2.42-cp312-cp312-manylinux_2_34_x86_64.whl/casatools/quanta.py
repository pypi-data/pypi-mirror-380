##################### generated by xml-casa (v2) from quanta.xml ####################
##################### c60b82eff813fa8938533b4f7a1d5566 ##############################
from __future__ import absolute_import 
from .__casac__.quanta import quanta as _quanta

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class quanta:
    _info_group_ = """quanta"""
    _info_desc_ = """quanta tool handles units and quantities
      """
    ### self
    def __init__(self, *args, **kwargs):
        """Create a quanta tool on the specified host (or by default the
        host you are running on).
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _quanta()

    def convertfreq(self, v=[ ], outunit='Hz'):
        """convertfreq converts a frequency quantity to another unit.
        """
        return self._swigobj.convertfreq(v, outunit)

    def convertdop(self, v=[ ], outunit='km/s'):
        """convertfreq converts a velocity quantity to another unit. Units are either
        velocity or dimensionless.
        """
        return self._swigobj.convertdop(v, outunit)

    def quantity(self, v=[ ], unitname='', keepshape=False):
        """quantity makes a quantity from a string, or from a value and a
        string. Note that a function unit exists which is a synonym for
        quantity. If only a string is given, it can be a scalar string.
        The result will be a scalar quantity.
        
        
        If a numeric value and a unit string
        are given, the numeric value can be any numeric type, and can also be
        a vector of numeric values.  print qa.map() to get a list of recognized units.
        'd' is usually days, but can be degrees (see example).
        
        The keepshape input parameter is only relevant if v is a multi-dimensional array.
        In this case, if true, the output value array will have the same shape as v. If false,
        a one-dimensional array is returned with length equal to the number of elements in
        v. The default value is false in order to preserve backward compatibility with
        previous versions.
        """
        return self._swigobj.quantity(v, unitname, keepshape)

    def getvalue(self, v=[ ]):
        """getvalue returns the internal value of a quantity. It also can handle a 1-D
        array of quantities, but multi-dimensional arrays are not supported.
        """
        return self._swigobj.getvalue(v)

    def getunit(self, v=[ ]):
        """getunit returns the internal unit string of a quantity. Note that 1-D arrays
        are supported, but multi-dimensional arrays are not.
        """
        return self._swigobj.getunit(v)

    def canonical(self, v=[ ]):
        """canonical (with alias canon) gets the canonical value of a quantity
        """
        return self._swigobj.canonical(v)

    def canon(self, v=[ ]):
        """canon gets the canonical value of a quantity
        """
        return self._swigobj.canon(v)

    def convert(self, v=[ ], outunit=[ ]):
        """convert converts a quantity to another unit. If no output unit given,
        conversion is to canonical units
        """
        return self._swigobj.convert(v, outunit)

    def define(self, name, v=[ ]):
        """define defines the name and value of a user defined unit
        """
        return self._swigobj.define(name, v)

    def map(self, v='all'):
        """map lists the known mapping of units and constants. It has a single argument,
        which can be a coded string (no-case, minimax match):
        begin{description}
        item[all] all of the following units (not constants): also the default
        item[Prefix] known decimal prefixes
        item[SI] known SI units
        item[Customary] a set of customary units known to programs
        item[User] units defined by the user
        item[Constants] known constants (note: only 'const', 'Const', 'constants'
        and 'Constants' recognised).
        end{description}
        """
        return self._swigobj.map(v)

    def maprec(self, v='all'):
        """maprec returns a record with the known mapping of units and constants. It has a single argument,
        which can be a coded string (no-case, minimax match):
        begin{description}
        item[all] all of the following units (not constants): also the default
        item[Prefix] known decimal prefixes
        item[SI] known SI units
        item[Customary] a set of customary units known to programs
        item[User] units defined by the user
        end{description}
        """
        return self._swigobj.maprec(v)

    def fits(self):
        """fits defines some unit names used in reading and writing FITS files.
        """
        return self._swigobj.fits()

    def angle(self, v=[ ], prec=int(0), form=[  ], showform=False):
        """angle converts an angle quantity to a formatted string. The formatting
        information is a precision (0 is default, 6 includes +-ddd.mm.ss) and a
        string array of codes (no-case, minimax match):
        Codes include:
        begin{description}
        item[clean] delete leading/trailing superfluous separators
        item[no_d] do not show degrees part
        item[no_dm] do not show degrees and minutes part
        item[dig2] show only 2 digits of degrees in angle format
        item[time] show as time (hh:mm:ss.ttt) rather than as angle
        end{description}
        If a multi-dimensional value is given for the value $v$, the returned value
        is a string vector of a length equal to last dimension. Each string has a
        number of fields equal to the number of elements in all earlier
        dimensions. If the {em showform} is $T$, each vector element is surrounded
        by a pair of square brackets if there is more than one entry, and fields are
        separated by a ','.
        """
        return self._swigobj.angle(v, prec, form, showform)

    def time(self, v=[ ], prec=int(0), form=[  ], showform=False):
        """time converts a time quantity to a formatted string. The formatting
        information is a precision (0 is default, 6 includes hh.mm.ss) and a
        string array of codes (no-case, minimax match):
        Codes include:
        begin{description}
        item[clean] delete leading/trailing superfluous separators
        item[no_d] do not show hours part
        item[no_dm] do not show hours and minutes part
        item[ymd] include a date as yyyy/mm/dd (date is by default not shown)
        item[dmy] include a date as ddMMMyyyy (date is by default not shown)
        item[mjd] include a date as Modified Julian Day (date is by default not shown)
        item[fits] include a date and show time in FITS format: le from OS
        item[angle] show in angle (dd.mm.ss.ttt) rather than time format
        item[day] prefix day-of-week to output
        item[local] show local time rather than UTC (add timezone offset)
        item[no_time] suppress printing of time part
        end{description}
        If a multi-dimensional value is given for the value $v$, the returned value
        is a string vector of a length equal to last dimension. Each string has a
        number of fields equal to the number of elements in all earlier
        dimensions. If the {em showform} is $T$, each vector element is surrounded
        by a pair of square brackets if there is more than one entry, and fields are
        separated by a ','.
        """
        return self._swigobj.time(v, prec, form, showform)

    def add(self, v=[ ], a=[ ]):
        """add adds two quantities
        """
        return self._swigobj.add(v, a)

    def sub(self, v=[ ], a=[ ]):
        """sub subtracts two quantities
        """
        return self._swigobj.sub(v, a)

    def mul(self, v=[ ], a=[ ]):
        """mul multiplies two quantities
        """
        return self._swigobj.mul(v, a)

    def div(self, v=[ ], a=[ ]):
        """div divides two quantities
        """
        return self._swigobj.div(v, a)

    def neg(self, v=[ ]):
        """neg negates a quantity
        """
        return self._swigobj.neg(v)

    def norm(self, v=[ ], a=float(-0.5)):
        """norm normalise angles in interval of $2pi$ radians. The default interval is
        from -0.5 to +0.5 of a full interval (i.e. from -180 to +180 degrees). The
        lower end of the interval can be set as a fraction of $2pi$
        """
        return self._swigobj.norm(v, a)

    def le(self, v=[ ], a=[ ]):
        """le compares two quantities for less than or equal.
        """
        return self._swigobj.le(v, a)

    def lt(self, v=[ ], a=[ ]):
        """lt compares two quantities for less than.
        """
        return self._swigobj.lt(v, a)

    def eq(self, v=[ ], a=[ ]):
        """eq compares two quantities for equality.
        """
        return self._swigobj.eq(v, a)

    def ne(self, v=[ ], a=[ ]):
        """ne compares two quantities for non equality.
        """
        return self._swigobj.ne(v, a)

    def gt(self, v=[ ], a=[ ]):
        """gt compares two quantities for greater than.
        """
        return self._swigobj.gt(v, a)

    def ge(self, v=[ ], a=[ ]):
        """ge  compares two quantities for greater than or equal.
        """
        return self._swigobj.ge(v, a)

    def sin(self, v=[ ]):
        """sin gives sine of angle quantity
        """
        return self._swigobj.sin(v)

    def cos(self, v=[ ]):
        """cos gives cosine of angle quantity
        """
        return self._swigobj.cos(v)

    def tan(self, v=[ ]):
        """tan gives tangent of angle quantity
        """
        return self._swigobj.tan(v)

    def asin(self, v=[ ]):
        """asin gives arcsine of non-dimensioned quantity
        """
        return self._swigobj.asin(v)

    def acos(self, v=[ ]):
        """acos gives arccosine of non-dimensioned quantity
        """
        return self._swigobj.acos(v)

    def atan(self, v=[ ]):
        """atan gives arctangent of non-dimensioned quantity
        """
        return self._swigobj.atan(v)

    def atan2(self, v=[ ], a=[ ]):
        """atan gives arctangent of two non-dimensioned quantity
        """
        return self._swigobj.atan2(v, a)

    def abs(self, v=[ ]):
        """abs gives absolute value of quantity
        """
        return self._swigobj.abs(v)

    def ceil(self, v=[ ]):
        """ceil gives ceiling value of quantity
        """
        return self._swigobj.ceil(v)

    def floor(self, v=[ ]):
        """floor gives flooring value of quantity
        """
        return self._swigobj.floor(v)

    def log(self, v=[ ]):
        """log gives natural logarithm of dimensionless quantity
        """
        return self._swigobj.log(v)

    def log10(self, v=[ ]):
        """log10 gives logarithm of dimensionless quantity
        """
        return self._swigobj.log10(v)

    def exp(self, v=[ ]):
        """exp gives exponential value of dimensionless quantity
        """
        return self._swigobj.exp(v)

    def sqrt(self, v=[ ]):
        """sqrt gives square root of quantity with only even powered dimensions
        """
        return self._swigobj.sqrt(v)

    def compare(self, v=[ ], a=[ ]):
        """compare compares the dimensionality of units of two qauntities
        """
        return self._swigobj.compare(v, a)

    def check(self, v):
        """check checks if the argument has a properly defined unit string
        """
        return self._swigobj.check(v)

    def checkfreq(self, cm=[ ]):
        """checkfreq checks if the argument has a properly defined frequency interpretable
        unit string
        """
        return self._swigobj.checkfreq(cm)

    def pow(self, v=[ ], a=int(1)):
        """pow raises a quantity to an integer power
        """
        return self._swigobj.pow(v, a)

    def constants(self, v='pi'):
        """constants gets a named constant quantity. Names (no-case, minimax) are:
        
        pi    3.14..                    3.14159
        ee    2.71..                    2.71828
        c     light vel.                2.99792e+08 m/s
        G     grav. const               6.67259e-11 N.m2/kg2
        h     Planck const              6.62608e-34 J.s
        HI    HI line                   1420.41 MHz
        R     gas const                 8.31451 J/K/mol
        NA    Avogadro number           6.02214e+23 mol-1
        e     electron charge           1.60218e-19 C
        mp    proton mass               1.67262e-27 kg
        mp_me mp/me                     1836.15
        mu0   permeability vac.         1.25664e-06 H/m
        eps0  permittivity vac.         1.60218e-19 C
        k     Boltzmann const           1.38066e-23 J/K
        F     Faraday const             96485.3 C/mol
        me    electron mass             9.10939e-31 kg
        re    electron radius           2.8179e-15 m
        a0    Bohr's radius             5.2918e-11 m
        R0    solar radius              6.9599e+08 m
        k2    IAU grav. const^2         0.000295912 AU3/d2/S0
        """
        return self._swigobj.constants(v)

    def isangle(self, v=[ ]):
        """isangle checks if the argument is a valid angle/time quantity.
        """
        return self._swigobj.isangle(v)

    def totime(self, v=[ ]):
        """totime converts an angle quantity (or a time) to a time quantity
        """
        return self._swigobj.totime(v)

    def toangle(self, v=[ ]):
        """toangle converts a time quantity (or an angle) to an angle quantity
        """
        return self._swigobj.toangle(v)

    def splitdate(self, v=[ ]):
        """splitdate splits a date/time quantity into a record with constituent fields
        like year, yearday, month etc. All fields will be integer (to enable use as
        index and easy personal formatting), with the exception of the {em s} field
        which is a double float. See the example for the fields returned.
        """
        return self._swigobj.splitdate(v)

    def tos(self, v=[ ], prec=int(9)):
        """tos converts a quantity to a string with the precision defined with
        the {em setformat('prec')} (which defaults to 9). If the optional
        {em prec} argument is set to an integer value greater than 1, that
        precision is used in the conversion
        """
        return self._swigobj.tos(v, prec)

    def type(self):
        """type will return the tool name.
        """
        return self._swigobj.type()

    def done(self, kill=False):
        """Currently, this method is an NOP.
        """
        return self._swigobj.done(kill)

    def unit(self, v=[ ], unitname='', keepshape=False):
        """unit makes a quantity from a string, or from a value and a string.
        Note that unit is a synonym for quantity (see description and example there).
        """
        return self._swigobj.unit(v, unitname, keepshape)

    def isquantity(self, v=[ ]):
        """Checks if the operand is a correct quantity
        """
        return self._swigobj.isquantity(v)

    def setformat(self, t='', v='F'):
        """
        """
        return self._swigobj.setformat(t, v)

    def getformat(self, t=''):
        """getformat returns the current format value set for the different
        format possibilities. See the
        setformat function for the
        different format type descriptions. The known types are: 
        prec, aprec, tprec, long, lat, len, dtime, elev, auto, vel, freq,
        dop, unit.
        """
        return self._swigobj.getformat(t)

    def formxxx(self, v=[ ], format='dms', prec=int(2)):
        """form.xxx (xxx can be lat, long, len, vel, freq, dtime, unit) will format the
        input into a string using the global format information set by setformat().
        """
        return self._swigobj.formxxx(v, format, prec)


##################### generated by xml-casa (v2) from atcafiller.xml ################
##################### ed1568f32b8ddecd8445a1bdbc7ff402 ##############################
from __future__ import absolute_import 
from .__casac__.atcafiller import atcafiller as _atcafiller

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class atcafiller:
    _info_group_ = """atnf"""
    _info_desc_ = """Filler for ATNF/ATCA RPFITS data"""
    ### self
    def __init__(self, *args, **kwargs):
        """This is used to construct an {tt atcafiller} tool for filling ATCA RPFITS data into a MeasurementSet
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _atcafiller()

    def open(self, msname='', filenames=[  ], options=[  ]):
        """This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. After the completion of the fill operation
        you should call the done method to avoid problems with incomplete
        flushing of the data to disk. You may want to run select before fill, to
        reduce the amount of data you read in.
        
        In the filenames argument commas are not allowed because of the
        wildcard capability.
        
        The options argument allows for special processing options during the
        filling process.
        
        * birdie: remove self generated birdies in 128 MHz
        data by deleting every other channel and the edge
        channels
        * reweight: suppress ringing of interference spikes by
        reweighting the lag spectrum for minimum spectral sidelobe response
        * noxycorr: do not apply the xyphase
        correction using the noise cal xy phase measurements (use if you
        know there was a problem with the measurements)
        * compress: Compress the data, model, corrected data and imaging weight
        columns (may reduce dynamic range)
        * fastmosaic: Produce a MeasurementSet with small tiles to optimize I/O
        for observations with a large number of pointings and a short time (a few
        integrations) on each pointing. Failing to use this options for such data
        may cause very inefficient access, especially for continuum data
        (10-100 times slower)
        * hires: For data taken in binning mode: set the TIME_CENTROID column to
        the center of each bin (normally center of integration interval). The TIME column is
        unaffected. TIME_CENTROID will no longer be in time order for dual frequency
        mode.
        * noac : Do not load the autocorrelations
        """
        return self._swigobj.open(msname, filenames, options)

    def fill(self):
        """This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. You may want to run select before fill, to
        reduce the amount of data you read in.
        """
        return self._swigobj.fill()

    def select(self, firstscan=int(0), lastscan=int(9999), spw=[ int(-1) ], lowfreq={'value': float(0.1), 'unit': 'GHz'}, highfreq={'value': float(999.0), 'unit': 'GHz'}, fields=[  ], edge=float(8.0)):
        """Select on various items, to load only a subset of the data present in
        the input file. The default is to load everything.
        Note that the frequency selection using lowfreq and highfreq acts purely on
        center (reference) frequencies, channel selection is not available at this stage.
        Use freqchain to select the frequency chain (or IF) to load,
        specify either 1 or 2, the default of zero will load both.
        Use the fields parameter to specify a list of field names (sources) you
        want to load.
        For detailed selection of complex observations the last two parameters let
        you specify the required bandwidth (in whole MHz) and number of channels
        of the first frequency chain.
        """
        return self._swigobj.select(firstscan, lastscan, spw, lowfreq, highfreq, fields, edge)

    def opacities(self, fghz=[  ], tempk=float(300.0), humi=float(50.0), press=float(1010.0), height=float(200.0)):
        """This function does the actual filling of the data from rpfits format
        files to a MeasurementSet. You may want to run select before fill, to
        reduce the amount of data you read in.
        """
        return self._swigobj.opacities(fghz, tempk, humi, press, height)


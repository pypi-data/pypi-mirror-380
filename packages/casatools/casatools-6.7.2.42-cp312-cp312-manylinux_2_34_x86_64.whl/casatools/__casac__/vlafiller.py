# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vlafiller
else:
    import _vlafiller

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class vlafiller(object):
    r"""Proxy of C++ casac::vlafiller class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> vlafiller"""
        _vlafiller.vlafiller_swiginit(self, _vlafiller.new_vlafiller())

    def fill(self, *args, **kwargs):
        r"""
        fill(self, _msname=string(""), _inputfile=string(""), _project=string(""), _start=string("1970/1/1/00:00:00"), _stop=string("2199/1/1/23:59:59"), _centerfreq=string("1.0e18Hz"), _bandwidth=string("2.0e18Hz"), _bandname=string("*"), _source=string(""), _subarray=long(0), _qualifier=long(-65536), _calcode=string("#"), _overwrite=bool(false), _freqtol=casac::variant( ), _applytsys=bool(true), _keepautocorr=bool(false), _antnamescheme=string("new"), _useday=long(1), _keepblanks=bool(false), _evlabands=bool(true))


        Summary:
            Perform fill operations

        Input Parameters:
            msname                    name of output ms
            inputfile                 name of vla archive
            project                   name of project to extract, defaults to all projects in input
            start                     start time to extract
            stop                      end time of extracted data
            centerfreq                frequency of data to extract (used along with bandwidth param)
            bandwidth                 data around centerfreq to get out
            bandname                  name of band to extract
            source                    name of source
            subarray                  subarray - 0 means all subarrays
            qualifier                 qualifier for source
            calcode                   Calibrator code, 1 character only
            overwrite                 overwrite or append
            freqtol                   Frequency tolerance, the default tolerance for frequency is set to be 6 times of the channel width. You may have to tweak the tolerance depending on the dataset, just depends.
            applytsys                 scale data and weights by Tsys info
            keepautocorr              Fill autocorrelations along with cross correlation data. If False data that have same ANTENNA1 and ANTENNA2 are ignored 
            antnamescheme             If 'new', VLA antenna name is prepended by EVLA or VLA to distinguish between the refurbished and non-refubished antennas. 'old' will just put the VLA antenna identifier as is in the NAME column of the ANTENNA table. 
            useday                     This option is only available at the AOC in Socorro! When filling at the AOC, select the online day file to use < 0 means any previous day up to 14 0 means from the start of the current day > 0 means starting now 
            keepblanks                Scans with blank (empty) source names (i.e. tipping scans) will be filled. The default is to not fill.
            evlabands                 Use the EVLA frequencies and bandwith tolerances when specifying band codes or wavelengths.

        --------------------------------------------------------------------------------

        """
        return _vlafiller.vlafiller_fill(self, *args, **kwargs)
    __swig_destroy__ = _vlafiller.delete_vlafiller

# Register vlafiller in _vlafiller:
_vlafiller.vlafiller_swigregister(vlafiller)


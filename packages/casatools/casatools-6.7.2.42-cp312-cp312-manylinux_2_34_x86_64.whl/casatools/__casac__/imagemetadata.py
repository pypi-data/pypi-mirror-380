# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _imagemetadata
else:
    import _imagemetadata

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class imagemetadata(object):
    r"""Proxy of C++ casac::imagemetadata class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> imagemetadata"""
        _imagemetadata.imagemetadata_swiginit(self, _imagemetadata.new_imagemetadata())

    def add(self, *args, **kwargs):
        r"""
        add(self, _key=string(""), _value=casac::variant( )) -> bool


        Summary:
            Add a key-value pair if possible.

        Description:


        Add a key-value pair if possible.


        Input Parameters:
            key                       The name of the FITS or other keyword.
            value                     Associated value to add.

        Example:

        imd.open('myim.im')
        # add a keyword 'test' with value 'first'
        if add('test', 'first'):
        print 'test=first has been added'
        else:
        print 'Unable to add key test'
        imd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_add(self, *args, **kwargs)

    def close(self):
        r"""
        close(self) -> bool


        Summary:
            Close the image metadata tool. Synonym for done().

        Description:



        This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.

        Example:

        imd.open('myim.im')
        # do stuff
        imd.close()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_close(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the image metadata tool. Synonym for close().

        Description:



        This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.



        Example:

        imd.open('myim.im')
        # do stuff
        imd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_done(self)

    def get(self, *args, **kwargs):
        r"""
        get(self, _key=string("")) -> casac::variant *


        Summary:
            Get the value associated with the specified, case-insensitive FITS keyword.

        Description:


        Get the value associated with the specified, case-insensitive FITS keyword.


        Input Parameters:
            key                       The name of the FITS or other keyword.

        Example:

        imd.open('myim.im')
        imtype = imd.get('imtype')
        imd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_get(self, *args, **kwargs)

    def list(self, *args, **kwargs):
        r"""
        list(self, _verbose=bool(true)) -> record *


        Summary:
            Get a dictionary of FITS-like header items.

        Description:


        Get a listing of traditional FITS-like 'header' items.


        Input Parameters:
            verbose                   If true, print listing to logger

        Example:

        imd.open('myim.im')
        mylist = imd.list(False)
        imd.done()
        crval1 = mylist{'crval1'}

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_list(self, *args, **kwargs)

    def open(self, *args, **kwargs):
        r"""
        open(self, _infile=string("")) -> bool


        Summary:
            Open this image metadata tool providing access to an image's metadata.

        Description:



        This method creates access to the specified image's metadata.



        Input Parameters:
            infile                    Image name. The image can be in any casa supported format.

        Example:

        immd.open('myim.im')
        # do stuff with the tool and then close it.
        immd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_open(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        r"""
        remove(self, _key=string(""), _value=casac::variant( )) -> bool


        Summary:
            Remove or clear the value of a keyword if possible.

        Description:


        Remove or clear the value of a keyword if possible. If key='masks', a value specifying the mask
        to remove may be specified. If no value is specified, all masks are removed.


        Input Parameters:
            key                       The name of the FITS or other keyword.
            value                     Value to remove if the key is multi-valued. Only used in the case of key='masks'.

        Example:

        imd.open('myim.im')
        # clear the brightness unit
        if imd.remove('bunit'):
        print 'bunit has been cleared'
        else:
        print 'Unable to clear bunit'
        imd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_remove(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        r"""
        set(self, _key=string(""), _value=casac::variant( )) -> bool


        Summary:
            Set a keyword to the specified value if possible.

        Description:


        Set a key-value pair if possible.


        Input Parameters:
            key                       The name of the FITS or other keyword.
            value                     Associated value to set.

        Example:

        Note that when setting the reference value of a polarizaiton axis, one must
        provide an array of stokes/polarization strings (['I', 'Q', 'XX']) that is the
        same length as the stokes axis. If the stokes axis is degenerate, one can alternatively
        provide a string indicating the stokes value.

        imd.open('myim.im')
        # Set keyword 'telescope' with value 'Argus Array'
        if imd.set('telescope', 'Argus Array'):
        print 'telescope has been updated'
        else:
        print 'Unable to update telescope.'
        imd.done()

        # set polarizations for an image with three pixels on the stokes axis crval3
        imd.open('myim.im')
        if imd.set('crval3', [XY, LL, 'Q']):
        print 'polarization values have been updated'
        else:
        print 'Unable to update polarization values.'
        imd.done()

        --------------------------------------------------------------------------------

        """
        return _imagemetadata.imagemetadata_set(self, *args, **kwargs)
    __swig_destroy__ = _imagemetadata.delete_imagemetadata

# Register imagemetadata in _imagemetadata:
_imagemetadata.imagemetadata_swigregister(imagemetadata)


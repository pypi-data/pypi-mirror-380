# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _singledishms
else:
    import _singledishms

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class singledishms(object):
    r"""Proxy of C++ casac::singledishms class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> singledishms"""
        _singledishms.singledishms_swiginit(self, _singledishms.new_singledishms())

    def open(self, *args, **kwargs):
        r"""
        open(self, _ms_name=string("")) -> bool


        Summary:
            Open a new MeasurementSet for processing after closing current MeasurementSet 

        Description:


        Close the current MeasurementSet and open a new MeasurementSet
        instead. The current state of sdms is retained, except for
        the data selection.

        Input Parameters:
            ms_name                   New MeasurementSet to be processed

        Example:

        sdms.open('m100_sd.ms')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_open(self, *args, **kwargs)

    def close(self):
        r"""
        close(self) -> bool


        Summary:
            Close the sdms tool, with data written on disk, keeping sdms running for future use 

        Description:


        This is used to close sdms tools. Note that the
        data is written to disk and detached from sdms tool.
        This is a synonym for done.


        Example:

        sdms.close()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_close(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the sdms tool

        Description:


        This is used to close and sdms tools. Note that the
        data is written to disk  and detached from sdms tool.
        This is a synonym for close.


        Example:

        sdms.done()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_done(self)

    def name(self):
        r"""
        name(self) -> string


        Summary:
            Provide the name of the attached MeasurementSet

        Description:


        Returns the name of the attached MeasurementSet.


        Example:

        sdms.name()

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_name(self)

    def subtract_baseline(self, *args, **kwargs):
        r"""
        subtract_baseline(self, _datacolumn=string("data"), _outfile=string(""), _bloutput=string(""), _dosubtract=bool(true), _spw=casac::variant( ), _updateweight=bool(false), _sigmavalue=string("stddev"), _blfunc=string("poly"), _order=long(5), _clip_threshold_sigma=float(3.0), _num_fitting_max=long(1), _linefinding=bool(false), _threshold=float(5.0), _avg_limit=long(4), _minwidth=long(4), _edge=std::vector< long >({0,0})) -> bool


        Summary:
            Invoke baseline subtraction 

        Description:


        Fit baseline and subtract it from selected spectra


        Input Parameters:
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet
            bloutput                  The name(s) of Baseline to be output
            dosubtract                Execute baseline subtraction from the input data
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            updateweight              Update weight based on sigmavalue of residual data
            sigmavalue                sigma value for computing weight
            blfunc                    baseline function
            order                     polynomial order
            clip_threshold_sigma      threshold for clipping in unit of sigma
            num_fitting_max           maximum number of recursive clipping
            linefinding               do line finding
            threshold                 S/N threshold for line finder
            avg_limit                 channel averaging for broad lines in line finding
            minwidth                  the minimum channel width to detect as a line by line finder
            edge                      channels to drop at beginning and end of spectrum in line finding

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline(order=3,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline(self, *args, **kwargs)

    def subtract_baseline_cspline(self, *args, **kwargs):
        r"""
        subtract_baseline_cspline(self, _datacolumn=string("data"), _outfile=string(""), _bloutput=string(""), _dosubtract=bool(true), _spw=casac::variant( ), _updateweight=bool(false), _sigmavalue=string("stddev"), _npiece=long(5), _clip_threshold_sigma=float(3.0), _num_fitting_max=long(1), _linefinding=bool(false), _threshold=float(5.0), _avg_limit=long(4), _minwidth=long(4), _edge=std::vector< long >({0,0})) -> bool


        Summary:
            Invoke baseline subtraction 

        Description:


        Fit baseline and subtract it from selected spectra


        Input Parameters:
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet
            bloutput                  The name(s) of Baseline to be output
            dosubtract                Execute baseline subtraction from the input data
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            updateweight              Update weight based on sigmavalue of residual data
            sigmavalue                sigma value for computing weight
            npiece                    cspline npiece
            clip_threshold_sigma      threshold for clipping in unit of sigma
            num_fitting_max           maximum number of recursive clipping
            linefinding               do line finding
            threshold                 S/N threshold for line finder
            avg_limit                 channel averaging for broad lines in line finding
            minwidth                  the minimum channel width to detect as a line by line finder
            edge                      channels to drop at beginning and end of spectrum in line finding

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_cspline(npiece=3,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_cspline(self, *args, **kwargs)

    def subtract_baseline_sinusoid(self, *args, **kwargs):
        r"""
        subtract_baseline_sinusoid(self, _datacolumn=string("data"), _outfile=string(""), _bloutput=string(""), _dosubtract=bool(true), _spw=casac::variant( ), _updateweight=bool(false), _sigmavalue=string("stddev"), _addwn=string("0"), _rejwn=string(""), _applyfft=bool(false), _fftmethod=string("fft"), _fftthresh=casac::variant( ), _clip_threshold_sigma=float(3.0), _num_fitting_max=long(1), _linefinding=bool(false), _threshold=float(5.0), _avg_limit=long(4), _minwidth=long(4), _edge=std::vector< long >({0,0})) -> bool


        Summary:
            Invoke baseline subtraction 

        Description:


        Fit baseline and subtract it from selected spectra


        Input Parameters:
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet
            bloutput                  The name(s) of Baseline to be output
            dosubtract                Execute baseline subtraction from the input data
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            updateweight              Update weight based on sigmavalue of residual data
            sigmavalue                sigma value for computing weight
            addwn                     additional wave numbers to use
            rejwn                     reject specified wave numbers
            applyfft                  automatically set wave numbers of sinusoids
            fftmethod                 method to automatically set wave numbers of sinusoids ['fft']
            fftthresh                 threshold to select wave numbers of sinusoids
            clip_threshold_sigma      threshold for clipping in unit of sigma
            num_fitting_max           maximum number of recursive clipping
            linefinding               do line finding
            threshold                 S/N threshold for line finder
            avg_limit                 channel averaging for broad lines in line finding
            minwidth                  the minimum channel width to detect as a line by line finder
            edge                      channels to drop at beginning and end of spectrum in line finding

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_sinusoid(applyfft=True,clip_threshold_sigma=5.0,num_fitting_max=6)

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_sinusoid(self, *args, **kwargs)

    def subtract_baseline_variable(self, *args, **kwargs):
        r"""
        subtract_baseline_variable(self, _datacolumn=string("data"), _outfile=string(""), _bloutput=string(""), _dosubtract=bool(true), _spw=casac::variant( ), _updateweight=bool(false), _sigmavalue=string("stddev"), _blparam=string(""), _verbose=bool(false)) -> bool


        Summary:
            Invoke baseline subtraction by parameters stored in a file. 

        Description:


        Fit baseline and subtract it from selected spectra.
        Fit parameters for each spectrum are obtained from a text file.


        Input Parameters:
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet
            bloutput                  The name(s) of Baseline to be output
            dosubtract                Execute baseline subtraction from the input data
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            updateweight              Update weight based on sigmavalue of residual data
            sigmavalue                sigma value for computing weight
            blparam                   The name of text file that stores fit parameters for each spectrum of selected MS
            verbose                   Print fitting parameters of each spectrum to logger

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_variable('m100_fitparam.txt')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_subtract_baseline_variable(self, *args, **kwargs)

    def apply_baseline_table(self, *args, **kwargs):
        r"""
        apply_baseline_table(self, _bltable=string(""), _datacolumn=string("data"), _spw=casac::variant( ), _updateweight=bool(false), _sigmavalue=string("stddev"), _outfile=string("")) -> bool


        Summary:
            Apply baseline table to MS. 

        Description:


        For each row of given baseline table, read baseline parameters,
        construct baseline, then subtract it from the corresponding spectrum
        in the MS.


        Input Parameters:
            bltable                   The name of input Baseline Table
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            updateweight              Update weight based on sigmavalue of residual data
            sigmavalue                sigma value for computing weight
            outfile                   The name of output MeasurementSet

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.apply_baseline_table('m100_sd.bltable')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_apply_baseline_table(self, *args, **kwargs)

    def fit_line(self, *args, **kwargs):
        r"""
        fit_line(self, _datacolumn=string("data"), _spw=casac::variant( ), _pol=casac::variant( ), _timebin=string(""), _timespan=string(""), _polaverage=string(""), _fitfunc=string("gaussian"), _nfit=string("0"), _linefinding=bool(false), _threshold=float(5.0), _avg_limit=long(4), _minwidth=long(4), _edge=std::vector< long >({0,0}), _tempfile=string(""), _tempoutfile=string("")) -> bool


        Summary:
            Invoke line fitting 

        Description:


        Fit line profile to selected spectra and obtain the best-fit parameter values


        Input Parameters:
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            pol                       Select data by polarization(s)
            timebin                   Bin width for time averaging
            timespan                  Span the timebin across 'scan', 'state', 'field', or a combination of them (e.g., 'scan,state')
            polaverage                polarization averaging mode ('', 'stokes', or 'geometric')
            fitfunc                   Function of line profile
            nfit                      Comma-separated numbers of gaussian/lorentzian lines to fit in maskline region. ignored when linefinding=true.
            linefinding               do line finding
            threshold                 S/N threshold for line finder
            avg_limit                 channel averaging for broad lines in line finding
            minwidth                  the minimum channel width to detect as a line by line finder
            edge                      channels to drop at beginning and end of spectrum in line finding
            tempfile                  The name of temporary file to keep fitting results
            tempoutfile               The name of temporary ms file

        Example:

        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.fit_line(fitfunc='gauss',spw='0:1000~2000;4000~5000',nfit=[1,1])

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_fit_line(self, *args, **kwargs)

    def set_selection(self, *args, **kwargs):
        r"""
        set_selection(self, _spw=casac::variant( ), _field=casac::variant( ), _antenna=casac::variant( ), _timerange=casac::variant( ), _scan=casac::variant( ), _observation=casac::variant( ), _polarization=casac::variant( ), _beam=casac::variant( ), _intent=casac::variant( ), _feed=casac::variant( ), _taql=string(""), _reindex=bool(true)) -> bool


        Summary:
            Select Measurementset to process

        Description:





        Input Parameters:
            spw                       Spectral Window Ids (0 relative) to select; -1 interpreted as all
            field                     Field Ids (0 relative) or Field names (msselection syntax and wilcards are used) to select
            antenna                   Antenna Ids (0 relative) or Antenna names (msselection syntax and wilcards are used) to select
            timerange                 Limit data selected to be within a given time range. Syntax is defined in the msselection link
            scan                      Limit data selected on scan numbers. Syntax is defined in the msselection link
            observation               Select data by observation ID(s). Syntax is the same as for scan numbers.
            polarization              Select data by polarization(s)
            beam                      Beam Ids (0 relative) to select; CURRENTLY NOT AVAILABLE!!!
            intent                    Select data by intent(s)
            feed                      Select data by feed(s)
            taql                      For the TAQL experts, flexible data selection using the TAQL syntax
            reindex                   Re-index indices in subtables based on data selection

        Example:

        sdms.set_selection(field='M100', spw='3,5')

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_set_selection(self, *args, **kwargs)

    def smooth(self, *args, **kwargs):
        r"""
        smooth(self, _type=string("gaussian"), _width=float(0.0), _datacolumn=string("data"), _outfile=string("")) -> bool


        Summary:
            Smooth data with arbitrary smoothing kernel

        Description:


        NOTE: currently only Gaussian kernel is supported.


        Input Parameters:
            type                      Smoothing kernel type
            width                     Smoothing kernel width
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_smooth(self, *args, **kwargs)

    def atmcor(self, *args, **kwargs):
        r"""
        atmcor(self, _config=initialize_record(""), _datacolumn=string("data"), _outfile=string("")) -> bool


        Summary:
            Offline atmospheric correction of calibrated data

        Description:


        Offline atmospheric correction of calibrated data


        Input Parameters:
            config                    Configuration for atmospheric correction
            datacolumn                The name of data column to process ('data', 'float_data', or 'corrected')
            outfile                   The name of output MeasurementSet

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_atmcor(self, *args, **kwargs)

    def importasap(self, *args, **kwargs):
        r"""
        importasap(self, _infile=string(""), _outfile=string(""), _parallel=bool(false)) -> bool


        Summary:
            Import ASAP Scantable to MS.

        Description:


        Import ASAP Scantable data to MeasurementSet.


        Input Parameters:
            infile                    The name of input ASAP Scantable
            outfile                   The name of output MeasurementSet
            parallel                  Turn on parallel execution

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_importasap(self, *args, **kwargs)

    def importnro(self, *args, **kwargs):
        r"""
        importnro(self, _infile=string(""), _outfile=string(""), _parallel=bool(false)) -> bool


        Summary:
            Import NOSTAR data to MS.

        Description:


        Import NOSTAR data to MeasurementSet.


        Input Parameters:
            infile                    The name of input NOSTAR data
            outfile                   The name of output MeasurementSet
            parallel                  Turn on parallel execution

        --------------------------------------------------------------------------------

        """
        return _singledishms.singledishms_importnro(self, *args, **kwargs)
    __swig_destroy__ = _singledishms.delete_singledishms

# Register singledishms in _singledishms:
_singledishms.singledishms_swigregister(singledishms)


# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _synthesisdeconvolver
else:
    import _synthesisdeconvolver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class synthesisdeconvolver(object):
    r"""Proxy of C++ casac::synthesisdeconvolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> synthesisdeconvolver"""
        _synthesisdeconvolver.synthesisdeconvolver_swiginit(self, _synthesisdeconvolver.new_synthesisdeconvolver())

    def setupdeconvolution(self, *args, **kwargs):
        r"""
        setupdeconvolution(self, _decpars=initialize_record("")) -> bool


        Summary:
            Set parameters to control minor cycle algorithms

        Input Parameters:
            decpars                   All parameters for deconvolution (minor cycle)

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_setupdeconvolution(self, *args, **kwargs)

    def initminorcycle(self):
        r"""
        initminorcycle(self) -> record *


        Summary:
            Find peak residual

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_initminorcycle(self)

    def setupmask(self):
        r"""
        setupmask(self) -> bool


        Summary:
            Create an input or auto mask

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_setupmask(self)

    def interactivegui(self, *args, **kwargs):
        r"""
        interactivegui(self, _iterbotrecord=initialize_record("")) -> record *


        Summary:
            Run interactive GUI

        Input Parameters:
            iterbotrecord             All parameters that control iterations

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_interactivegui(self, *args, **kwargs)

    def estimatememory(self, *args, **kwargs):
        r"""
        estimatememory(self, _imsize=std::vector< long >({})) -> casac::variant *


        Summary:
            Get an estimate in kilobytes of memory that will be needed

        Description:


        This function returns an estimate of the memory (RAM) to be used by synthesisdeconvolver tool. Need to be run after functions setdata and defineimage are done

        Input Parameters:
            imsize                    Image size that will be deconvolved (vector of int)

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_estimatememory(self, *args, **kwargs)

    def executeminorcycle(self, *args, **kwargs):
        r"""
        executeminorcycle(self, _iterbotrecord=initialize_record("")) -> record *


        Summary:
            Run a minor cycle

        Input Parameters:
            iterbotrecord             All parameters that control minor cycle

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_executeminorcycle(self, *args, **kwargs)

    def restore(self):
        r"""
        restore(self) -> bool


        Summary:
            Restore images

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_restore(self)

    def pbcor(self):
        r"""
        pbcor(self) -> bool


        Summary:
            Apply primary beam correction

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_pbcor(self)

    def checkrestoringbeam(self):
        r"""
        checkrestoringbeam(self) -> bool


        Summary:
            check restoring beam.

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_checkrestoringbeam(self)

    def done(self):
        r"""
        done(self) -> bool


        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _synthesisdeconvolver.synthesisdeconvolver_done(self)
    __swig_destroy__ = _synthesisdeconvolver.delete_synthesisdeconvolver

# Register synthesisdeconvolver in _synthesisdeconvolver:
_synthesisdeconvolver.synthesisdeconvolver_swigregister(synthesisdeconvolver)


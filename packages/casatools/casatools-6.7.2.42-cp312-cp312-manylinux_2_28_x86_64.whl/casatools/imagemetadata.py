##################### generated by xml-casa (v2) from imagemetadata.xml #############
##################### a6949a9b048f9c174974cdafb7d2b5c3 ##############################
from __future__ import absolute_import 
from .__casac__.imagemetadata import imagemetadata as _imagemetadata

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class imagemetadata:
    _info_group_ = """images"""
    _info_desc_ = """Operations on imagemetadata"""
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _imagemetadata()

    def add(self, key='', value=[ ]):
        """Add a key-value pair if possible.
        
        """
        return self._swigobj.add(key, value)

    def close(self):
        """This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.
        """
        return self._swigobj.close()

    def done(self):
        """This function closes the image metadata tool.  This means that it detaches the
        tool from its underlying metadata object. Methods cannot be run on it until it
        is opened with another or the same image.
        
        
        """
        return self._swigobj.done()

    def get(self, key=''):
        """Get the value associated with the specified, case-insensitive FITS keyword.
        
        """
        return self._swigobj.get(key)

    def list(self, verbose=True):
        """Get a listing of traditional FITS-like "header" items.
        
        """
        return self._swigobj.list(verbose)

    def open(self, infile):
        """This method creates access to the specified image's metadata.
        
        
        """
        return self._swigobj.open(infile)

    def remove(self, key='', value=[ ]):
        """Remove or clear the value of a keyword if possible. If key="masks", a value specifying the mask
        to remove may be specified. If no value is specified, all masks are removed.
        
        """
        return self._swigobj.remove(key, value)

    def set(self, key='', value=[ ]):
        """Set a key-value pair if possible.
        
        """
        return self._swigobj.set(key, value)


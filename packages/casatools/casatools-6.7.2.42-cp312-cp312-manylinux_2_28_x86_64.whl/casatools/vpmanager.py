##################### generated by xml-casa (v2) from vpmanager.xml #################
##################### 5d35ac075fad57789813a8b6b1890749 ##############################
from __future__ import absolute_import 
from .__casac__.vpmanager import vpmanager as _vpmanager

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class vpmanager:
    _info_group_ = """imager"""
    _info_desc_ = """Tool for specifying voltage patterns and primary beams"""
    ### self
    def __init__(self, *args, **kwargs):
        """The vpmanager constructor has no arguments.
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _vpmanager()

    def saveastable(self, tablename=''):
        """Save the vp or pb descriptions as a table.  Each description is in a different
        row of the table.
        """
        return self._swigobj.saveastable(tablename)

    def loadfromtable(self, tablename=''):
        """Load the vp or pb descriptions from a table created, e.g., with saveastable().
        """
        return self._swigobj.loadfromtable(tablename)

    def summarizevps(self, verbose=False):
        """Summarize the currently accumulated VP descriptions to the logger.
        """
        return self._swigobj.summarizevps(verbose)

    def setcannedpb(self, telescope='VLA', othertelescope='', dopb=True, commonpb='DEFAULT', dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """We have many vp/pb models ready to go for a variety of telescopes.  If 'DEFAULT' isselected, the system default for that telescope and frequency is used.
        """
        return self._swigobj.setcannedpb(telescope, othertelescope, dopb, commonpb, dosquint, paincrement, usesymmetricbeam)

    def setpbairy(self, telescope='VLA', othertelescope='', dopb=True, dishdiam=[ ], blockagediam=[ ], maxrad=[ ], reffreq=[ ], squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """Information sufficient to create a portion of the Airy disk voltage pattern.
        The Airy disk pattern is formed by Fourier transforming a uniformly illuminated
        aperture and is given by
        begin{equation}
        vp_p(i) = ( areaRatio * 2.0 * j_{1}(x)/x
        - 2.0 * j_{1}(x*lengthRatio)/(x*lengthRatio) )/ areaNorm,
        end{equation}
        where areaRatio is the dish area divided by the blockage area, lengthRatio
        is the dish diameter divided by the blockage diameter, and
        begin{equation}
        x = frac{i * maxrad * 7.016 * dishdiam/24.5m}{N_{samples} * 1.566 * 60}.
        end{equation}
        """
        return self._swigobj.setpbairy(telescope, othertelescope, dopb, dishdiam, blockagediam, maxrad, reffreq, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbcospoly(self, telescope='VLA', othertelescope='', dopb=True, coeff=[ float(-1) ], scale=[ float(-1) ], maxrad=[ ], reffreq=[ ], isthispb='PB', squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """A voltage pattern or primary beam of the form
        begin{equation}
        VP(x) = sum_{i} ( coeff_{i} cos^{2i}( scale_{i} x).
        end{equation}
        This is a generalization of the WSRT primary beam model.
        """
        return self._swigobj.setpbcospoly(telescope, othertelescope, dopb, coeff, scale, maxrad, reffreq, isthispb, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbgauss(self, telescope='VLA', othertelescope='', dopb=True, halfwidth=[ ], maxrad=[ ], reffreq=[ ], isthispb='PB', squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """Make a Gaussian primary beam given by
        begin{equation}
        PB(x) =  e^{- (x/(halfwidth*sqrt{1/log(2)})) }.
        end{equation}
        """
        return self._swigobj.setpbgauss(telescope, othertelescope, dopb, halfwidth, maxrad, reffreq, isthispb, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbinvpoly(self, telescope='VLA', othertelescope='', dopb=True, coeff=[ float(-1) ], maxrad=[ ], reffreq=[ ], isthispb='PB', squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """The inverse polynomial describes the inverse of the VP or PB
        as a polynomial of even powers:
        begin{equation}
        1/VP(x) = sum_{i} coeff_{i} * x^{2i}.
        end{equation}
        """
        return self._swigobj.setpbinvpoly(telescope, othertelescope, dopb, coeff, maxrad, reffreq, isthispb, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbnumeric(self, telescope='VLA', othertelescope='', dopb=True, vect=[ float(-1) ], maxrad=[ ], reffreq=[ ], isthispb='PB', squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """Supply a vector of vp/pb sample values taken on a regular grid between x=0 and
        x=maxrad.  We perform sinc interpolation to fill in the lookup table.
        """
        return self._swigobj.setpbnumeric(telescope, othertelescope, dopb, vect, maxrad, reffreq, isthispb, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbimage(self, telescope='VLA', othertelescope='', dopb=True, realimage='', imagimage='', compleximage='', antnames=[ '*' ]):
        """Experimental: Supply an image of the E Jones elements. The format of the
        image is:
        begin{description}
        item[Shape] nx by ny by 4 complex polarizations (RR, RL, LR, LL or
        XX, XY, YX, YY) by 1 channel.
        item[Direction coordinate] Az, El
        item[Stokes coordinate] All four ``stokes'' parameters must be present
        in the sequence RR, RL, LR, LL or XX, XY, YX, YY.
        item[Frequency] Only one channel is currently needed - frequency
        dependence beyond that is ignored.
        end{description}
        
        If a compleximage is specified the real and imaginary images is to be left empty.
        
        The other option is to provide the real and imaginary part of the E-Jones as seperale {tt float} images
        On that case
        one or two images may be specified - the real (must be present) and
        imaginary parts (optional).
        
        Note that beamsquint must be intrinsic to the images themselves.
        This will be accounted for correctly by regridding of the images
        from Az-El to Ra-Dec according to the parallactic angle.
        
        antnames is the Vector of names  for which this response pattern apply '*' is for all
        The name has to match exactly the name of the Antennas in the ANTENNA table of the MS with which
        you want to use this VPManager table or object.
        """
        return self._swigobj.setpbimage(telescope, othertelescope, dopb, realimage, imagimage, compleximage, antnames)

    def setpbpoly(self, telescope='VLA', othertelescope='', dopb=True, coeff=[ float(-1) ], maxrad=[ ], reffreq=[ ], isthispb='PB', squintdir=[ ], squintreffreq=[ ], dosquint=False, paincrement=[ ], usesymmetricbeam=False):
        """The VP or PB is described as a polynomial of even powers:
        begin{equation}
        VP(x) = sum_{i} coeff_{i} * x^{2i}.
        end{equation}
        """
        return self._swigobj.setpbpoly(telescope, othertelescope, dopb, coeff, maxrad, reffreq, isthispb, squintdir, squintreffreq, dosquint, paincrement, usesymmetricbeam)

    def setpbantresptable(self, telescope='', othertelescope='', dopb=True, antresppath=''):
        """Declare a reference to an antenna responses table containing a set of VP/PB definitions.
        """
        return self._swigobj.setpbantresptable(telescope, othertelescope, dopb, antresppath)

    def reset(self):
        """Reinitialize the VPManager database.
        Erase all VPs and defaults defined on the command line.
        """
        return self._swigobj.reset()

    def setuserdefault(self, vplistnum=int(-1), telescope='', anttype=''):
        """Selects the VP which is to be used by the imager for the given telescope and antenna type.
        Overwrites a previous default. Returns True if successful.
        """
        return self._swigobj.setuserdefault(vplistnum, telescope, anttype)

    def getuserdefault(self, telescope='', anttype=''):
        """Get the vp list number of the present default VP/PB for the given parameters.
        """
        return self._swigobj.getuserdefault(telescope, anttype)

    def getanttypes(self, telescope='', obstime=[ ], freq=[ ], obsdirection=[ ]):
        """Get a list of the available antenna types.
        """
        return self._swigobj.getanttypes(telescope, obstime, freq, obsdirection)

    def numvps(self, telescope='', obstime=[ ], freq=[ ], obsdirection=[ ]):
        """Can be used to, e.g., determine the number of antenna types.
        Note: if a global response is defined for the telescope, this will increase the count of
        available vps/pbs by 1.
        """
        return self._swigobj.numvps(telescope, obstime, freq, obsdirection)

    def getvp(self, telescope='', antennatype='', obstime=[ ], freq=[ ], obsdirection='AZEL 0deg 90deg'):
        """Record is empty if no matching vp/pb could be found.
        """
        return self._swigobj.getvp(telescope, antennatype, obstime, freq, obsdirection)

    def getvps(self, telescope='', antennas=[  ], obstimestart='1970/01/01T00:00:00', obstimeend='1970/01/01T00:00:00', minfreq='1GHz', maxfreq='1GHz', obsdirection='AZEL 0deg 90deg'):
        """Record is empty if no matching vp/pb could be found.
        """
        return self._swigobj.getvps(telescope, antennas, obstimestart, obstimeend, minfreq, maxfreq, obsdirection)

    def createantresp(self, imdir='', starttime='', bandnames=[  ], bandminfreq=[  ], bandmaxfreq=[  ]):
        """The AntennaResponses table serves CASA to look up the location of images describing the
        response of observatory antennas. Three types of images are supported: "VP" - real voltage patterns,
        "AIF" - complex aperture illumination patterns, "EFP" - complex electric field patterns.
        For each image, a validity range can be defined in Azimuth, Elevation, and Frequency.
        Furthermore, an antenna type (for heterogeneous arrays), a receiver type (for the case of
        several receivers on the same antenna having overlapping frequency bands), and a beam number
        (for the case of multiple beams per antenna) are associated with each response image.
        
        The images need to be stored in a single directory DIR of arbitrary name and need to
        have file names following the pattern
        begin{verbatim}
        obsname_beamnum_anttype_rectype_azmin_aznom_azmax_elmin_elnom_elmax_freqmin_freqnom_freqmax_frequnit_comment_functype.im
        end{verbatim}
        where the individual name elements mean the following (none of the elements may contain
        the space character, but they may be empty strings if they are not numerical values):
        begin{description}
        item[obsname] - name of the observatory as in the Observatories table, e.g. "ALMA"
        item[beamnum] - the numerical beam number (integer) for the case of multiple beams, e.g. 0
        item[anttype] - name of the antenna type, e.g. "DV"
        item[rectype] - name of the receiver type, e.g. ""
        item[azmin, aznom, azmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Azimuth where this response is valid, e.g. "-10.5_0._10.5"
        item[elmin, elnom, elmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Elevation where this response is valid, e.g. "10._45._80."
        item[freqmin, freqnom, freqmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Frequency (in units of frequnit) where this response is valid, e.g. "84._100._116."
        item[frequnit] - the unit of the previous three frequencies, e.g. "GHz"
        item[comment] - any string containing only characters permitted in file names and not empty space
        item[functype] - the type of the image as defined above ("VP", "AIF", or "EFP")
        end{description}
        
        The createantresp method will then extract the parameters from all the images in DIR
        and create the lookup table in the same directory.
        """
        return self._swigobj.createantresp(imdir, starttime, bandnames, bandminfreq, bandmaxfreq)

    def getrespimagename(self, telescope='', starttime='', frequency='', functype='ANY', anttype='', azimuth='0deg', elevation='45deg', rectype='', beamnumber=int(0)):
        """Given the observatory name, the antenna type, the receiver type, the observing frequency, the
        observing direction, and the beam number, find the applicable response image and return its name.
        """
        return self._swigobj.getrespimagename(telescope, starttime, frequency, functype, anttype, azimuth, elevation, rectype, beamnumber)


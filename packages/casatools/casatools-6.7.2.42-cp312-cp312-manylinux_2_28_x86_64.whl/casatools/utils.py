##################### generated by xml-casa (v2) from utils.xml #####################
##################### caa044079eebdde0ec7526fb745cc64d ##############################
from __future__ import absolute_import 
from .__casac__.utils import utils as _utils

from .errors import create_error_string
from .typecheck import CasaValidator as _validator
_pc = _validator( )
from .coercetype import coerce as _coerce


class utils:
    _info_group_ = """utils"""
    _info_desc_ = """Utility component, verified, xml translator"""
    ### self
    def __init__(self, *args, **kwargs):
        """
        """
        self._swigobj = kwargs.get('swig_object',None)
        if self._swigobj is None:
            self._swigobj = _utils()

    def getrc(self, rcvar=''):
        """
        """
        return self._swigobj.getrc(rcvar)

    def removetable(self, tablenames=[  ]):
        """
        """
        return self._swigobj.removetable(tablenames)

    def tableinfo(self, tablename=''):
        """Currently this only returns the pid of the process locking the table (lockpid), if the lock
        is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
        or 'unknown'. However, the hope is that this will eventually return a complete description of
        the table.
        
        """
        return self._swigobj.tableinfo(tablename)

    def lockedtables(self):
        """
        """
        return self._swigobj.lockedtables()

    def hostinfo(self):
        """
        """
        return self._swigobj.hostinfo()

    def c_exception(self):
        """Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
        exception message and the stack trace (mangled; use the shell's c++filt to demangle)
        from the last CASA C++ exception.  The information is from the last one generated
        and may not represent an exception from the last action; c_exception_clear can be
        used to remove stale information.  The information's exception might also
        have been caught in the C++ code and not have been translated into a Python-level
        exception.
        
        """
        return self._swigobj.c_exception()

    def c_exception_clear(self):
        """Clears the CASA C++ exception information.  This allows the user to be sure that
        information retrieved using c_exception is not from an exception in the
        distant past.
        
        """
        return self._swigobj.c_exception_clear()

    def _trigger_segfault(self, faultType=int(0)):
        """This triggers a segfault for testing the crash reporter.  Obviously you
        shouldn't call this unless that's what you want.  It's in here for
        development/debugging purposes and ought to be removed before you see this.
        
        """
        return self._swigobj._trigger_segfault(faultType)

    def tryit(self, input):
        """test variant convesion
        """
        return self._swigobj.tryit(input)

    def maxint(self):
        """maximum number an C++ int can hold
        """
        return self._swigobj.maxint()

    def minint(self):
        """minimum number an C++ int can hold
        """
        return self._swigobj.minint()

    def maxlong(self):
        """maximum number an C++ long can hold
        """
        return self._swigobj.maxlong()

    def minlong(self):
        """minimum number an C++ long can hold
        """
        return self._swigobj.minlong()

    def initialize(self, python_path, distro_data_path, default_path, nogui, agg, pipeline, cachedir):
        """returns true if initalization was performed; returns false if initialization was already done
        """
        return self._swigobj.initialize(python_path, distro_data_path, default_path, nogui, agg, pipeline, cachedir)

    def rundata(self):
        """path to the measures data. This function is deprecated measurespath should be used instead.
        """
        return self._swigobj.rundata()

    def measurespath(self):
        """path to the measures data
        """
        return self._swigobj.measurespath()

    def setrundata(self, path=''):
        """Set path to the measures data. Must be called during initalization
        before Measures module is initialized. This function is deprecated.
        setmeasurespath should be used instead.
        """
        return self._swigobj.setrundata(path)

    def setmeasurespath(self, path=''):
        """Set path to the measures data. Must be called during initalization
        before Measures module is initialized.
        """
        return self._swigobj.setmeasurespath(path)

    def defaultpath(self):
        """Returns the default data path. This path is used unless the user has set the current path to something else using the setpath function.
        """
        return self._swigobj.defaultpath()

    def setpath(self, dirs=[  ]):
        """Sets the data path to the specified list of directories. Returns true if all directories were added
        returns false otherwise.
        """
        return self._swigobj.setpath(dirs)

    def getpath(self):
        """Returns the list of directories that are currently in the data path.
        """
        return self._swigobj.getpath()

    def clearpath(self):
        """Removes all directories from the data path.
        """
        return self._swigobj.clearpath()

    def resolve(self, path=''):
        """If the provided path already represents a file or a directory, it is returned. If it does not,
        this function tries to find a complete path by matching up this partial directory with the
        elements of the data path.
        """
        return self._swigobj.resolve(path)

    def getnogui(self):
        """Returns the value of the nogui parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getnogui()

    def getagg(self):
        """Returns the value of the agg parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getagg()

    def getpipeline(self):
        """Returns the value of the pipeline parameter used at startup. Defaults to False.
        
        """
        return self._swigobj.getpipeline()

    def getcachedir(self):
        """Returns the value of the cachedir parameter used at startup.
        
        """
        return self._swigobj.getcachedir()

    def registry(self):
        """returns record containing the URI for the CASAtools registry which can be used by other unix processes to access the registry
        """
        return self._swigobj.registry()

    def services(self):
        """returns record containing the information about the services that have been registered with CASAtools
        """
        return self._swigobj.services()

    def remove_service(self, uri=''):
        """Remove a service from the registry using the URI for the
        service. The URI should be a string that looks something
        like "0.0.0.0:34101". This function returns true if the
        removal was successful. Otherwise, it returns false.
        """
        return self._swigobj.remove_service(uri)

    def shutdown(self):
        """python is shutting down cleanup anything that is outstanding
        """
        return self._swigobj.shutdown()

    def getpython(self):
        """
        """
        return self._swigobj.getpython()

    def version(self):
        """Returns a four element vector representing the version (major, minor, patch and feature).
        """
        return self._swigobj.version()

    def version_variant(self):
        """Returns the target instrument. This helps distinguish versions that otherwise may have the same version number
        """
        return self._swigobj.version_variant()

    def version_desc(self):
        """The descriptive string describes a particular packaged version. During a development
        cycle there are different sorts of packaged distributions. For example, a development
        version ("DEV") or a release version ("REL").
        """
        return self._swigobj.version_desc()

    def version_info(self):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return self._swigobj.version_info()

    def version_string(self):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return self._swigobj.version_string()

    def compare_version(self, comparitor, vec):
        """Returns a description string that includes the version information and the descriptive string..
        """
        return self._swigobj.compare_version(comparitor, vec)


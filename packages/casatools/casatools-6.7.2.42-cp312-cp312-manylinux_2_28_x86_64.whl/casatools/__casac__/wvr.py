# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_wvr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_wvr')
    _wvr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wvr', [dirname(__file__)])
        except ImportError:
            import _wvr
            return _wvr
        try:
            _mod = imp.load_module('_wvr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _wvr = swig_import_helper()
    del swig_import_helper
else:
    import _wvr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class wvr(_object):
    """Proxy of C++ casac::wvr class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wvr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wvr, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> wvr"""
        this = _wvr.new_wvr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def gcal(self, *args, **kwargs):
        """
        gcal(self, _vis, _output, _toffset, _nsol, _segsource, _reverse, _reversespw, _disperse, _cont, _wvrflag, _sourceflag, _statfield, _statsource, _tie, _smooth, _scale, _maxdistm, _minnumants, _mingoodfrac, _usefieldtab, _spw, _wvrspw, _refant, _offsets, _rseed, _logfile) -> long



        Summary:
            Generate a calibration table based on the WVR data in the given MS

        Description:


        Generate a gain table based on Water Vapour Radiometer data


        Input Parameters:
            vis                       Input measurement set
            output                    Name of the output file
            toffset                    Time offset (in seconds) between interferometric and WVR data 
            nsol                       Number of solutions for phase correction coefficients to make during this observation 
            segsource                  Do a new coefficient calculation for each source 
            reverse                    Reverse the sign of correction in all SPW (e.g. due to AIV-1740) 
            reversespw                 Reverse the sign correction for these spws 
            disperse                   Apply correction for dispersion 
            cont                       UNTESTED! Estimate the continuum (e.g., due to clouds) 
            wvrflag                    Regard this WVR (labelled with either antenna number or antenna name) as bad, and use interpolated values instead. (Can be comma-separated list without spaces.) 
            sourceflag                 Flag the WVR data for this source and do not produce any phase corrections on it 
            statfield                  Compute the statistics (Phase RMS, Disc) on this field only 
            statsource                 Compute the statistics (Phase RMS, Disc) on this source only 
            tie                        Prioritise tieing the phase of these sources as well as possible 
            smooth                     Smooth WVR data by this many samples before applying the correction 
            scale                      Scale the entire phase correction by this factor 
            maxdistm                   Maximum distance (m) an antenna may have to be considered for being part of the set of up to 3 antennas for interpolation of a solution for a flagged antenna 
            minnumants                 Minimum number of near antennas (up to 3) required for interpolation 
            mingoodfrac                If the fraction of unflagged data for an antenna is below this value (0. to 1.), the antenna is flagged 
            usefieldtab                Derive the antenna pointing information from the FIELD table instead of the POINTING table 
            spw                        Only write out corrections for these SPWs. 
            wvrspw                     Only use data from these WVR SPWs. 
            refant                     Use the WVR data from this antenna for calculating the dT/dL parameters. (Can be comma-separated ranked list without spaces.) 
            offsets                    Name of the optional input table containing the temperature offsets, e.g. generated by remove_cloud 
            rseed                      random seed (integer) for the wvrgcal fitting routine (0 == use internal default) 
            logfile                   Name of the log file (existing file will be overwritten)

        --------------------------------------------------------------------------------

        """
        return _wvr.wvr_gcal(self, *args, **kwargs)

    __swig_destroy__ = _wvr.delete_wvr
    __del__ = lambda self: None
wvr_swigregister = _wvr.wvr_swigregister
wvr_swigregister(wvr)

# This file is compatible with both classic and new-style classes.



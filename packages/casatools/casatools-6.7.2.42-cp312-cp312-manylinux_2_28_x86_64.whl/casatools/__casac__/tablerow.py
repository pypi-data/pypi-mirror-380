# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tablerow')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tablerow')
    _tablerow = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tablerow', [dirname(__file__)])
        except ImportError:
            import _tablerow
            return _tablerow
        try:
            _mod = imp.load_module('_tablerow', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tablerow = swig_import_helper()
    del swig_import_helper
else:
    import _tablerow
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class tablerow(_object):
    """Proxy of C++ casac::tablerow class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tablerow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tablerow, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        """__init__(self, _table=None, _columnnames, _exclude) -> tablerow"""
        this = _tablerow.new_tablerow(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def _iswritable(self):
        """
        _iswritable(self) -> bool



        Summary:
            check to see if row can be modified

        Description:


        check to see if row can be modified


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__iswritable(self)


    def iswritable(self):
        """
        iswritable(self) -> bool



        Summary:
            check to see if row can be modified

        Description:


        check to see if row can be modified


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_iswritable(self)


    def _get(self, *args, **kwargs):
        """
        _get(self, _rownr) -> record *



        Summary:
            get a single row

        Description:


        get a single row specified by rownr


        Input Parameters:
            rownr                     row number to retrieve

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__get(self, *args, **kwargs)


    def get(self, *args, **kwargs):
        """
        get(self, _rownr) -> record *



        Summary:
            get a single row

        Description:


        get a single row specified by rownr


        Input Parameters:
            rownr                     row number to retrieve

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_get(self, *args, **kwargs)


    def _put(self, *args, **kwargs):
        """
        _put(self, _rownr, _value, _matchingfields) -> bool



        Summary:
            put a single row

        Description:


        put a single row specified by rownr


        Input Parameters:
            rownr                     row number to store
            value                     row record to store
            matchingfields             If true, this means that the value may contain more fields and only fields matching a column name will be used. 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow__put(self, *args, **kwargs)


    def put(self, *args, **kwargs):
        """
        put(self, _rownr, _value, _matchingfields) -> bool



        Summary:
            put a single row

        Description:


        put a single row specified by rownr


        Input Parameters:
            rownr                     row number to store
            value                     row record to store
            matchingfields             If true, this means that the value may contain more fields and only fields matching a column name will be used. 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_put(self, *args, **kwargs)


    def __len__(self):
        """
        __len__(self) -> long



        Summary:
            number of rows available

        Description:


        return the number of available rows for use in subscription


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow___len__(self)


    def __getitem__(self, _rownr=None):
        """
        __getitem__(self, _rownr=None) -> PyObj *



        Summary:
            get row from table

        Description:


        get one row from the referenced table used in subscription


        Input Parameters:
            rownr                      Row number to return 

        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow___getitem__(self, _rownr)


    def done(self):
        """
        done(self)



        Summary:
            release references to the table resources

        Description:


        Release the table resources. After this call, the tablerow object will no longer
        be useful.


        --------------------------------------------------------------------------------

        """
        return _tablerow.tablerow_done(self)

    __swig_destroy__ = _tablerow.delete_tablerow
    __del__ = lambda self: None
tablerow_swigregister = _tablerow.tablerow_swigregister
tablerow_swigregister(tablerow)

# This file is compatible with both classic and new-style classes.



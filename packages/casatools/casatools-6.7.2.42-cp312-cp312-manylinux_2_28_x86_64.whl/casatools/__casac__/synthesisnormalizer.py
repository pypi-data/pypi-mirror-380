# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_synthesisnormalizer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_synthesisnormalizer')
    _synthesisnormalizer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_synthesisnormalizer', [dirname(__file__)])
        except ImportError:
            import _synthesisnormalizer
            return _synthesisnormalizer
        try:
            _mod = imp.load_module('_synthesisnormalizer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _synthesisnormalizer = swig_import_helper()
    del swig_import_helper
else:
    import _synthesisnormalizer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class synthesisnormalizer(_object):
    """Proxy of C++ casac::synthesisnormalizer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synthesisnormalizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synthesisnormalizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> synthesisnormalizer"""
        this = _synthesisnormalizer.new_synthesisnormalizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setupnormalizer(self, *args, **kwargs):
        """
        setupnormalizer(self, _normpars) -> bool



        Summary:
            Set parameters to control scatter/gather operations

        Input Parameters:
            normpars                  All parameters for gather/scatter. Mainly file names

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_setupnormalizer(self, *args, **kwargs)


    def gatherweightdensity(self):
        """
        gatherweightdensity(self) -> bool



        Summary:
            Gather Gridded Weight images

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherweightdensity(self)


    def scatterweightdensity(self):
        """
        scatterweightdensity(self) -> string



        Summary:
            Scatter summed Gridded Weight images

        Description:


        scatter sum gridded weight image for continuum Briggs style to other siimagestore
        returns the disk name if it exists

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_scatterweightdensity(self)


    def gatherpsfweight(self):
        """
        gatherpsfweight(self) -> bool



        Summary:
            Gather PSFs if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherpsfweight(self)


    def gatherresidual(self):
        """
        gatherresidual(self) -> bool



        Summary:
            Gather Residual Imaged if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_gatherresidual(self)


    def dividepsfbyweight(self):
        """
        dividepsfbyweight(self) -> bool



        Summary:
            Divide psf by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_dividepsfbyweight(self)


    def makepsfbeamset(self):
        """
        makepsfbeamset(self) -> bool



        Summary:
            make the psf beamset and store it in the psf image

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_makepsfbeamset(self)


    def divideweightbysumwt(self):
        """
        divideweightbysumwt(self) -> bool



        Summary:
            Divide psf by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_divideweightbysumwt(self)


    def normalizeprimarybeam(self):
        """
        normalizeprimarybeam(self) -> bool



        Summary:
            Normalize PB to peak 1

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_normalizeprimarybeam(self)


    def divideresidualbyweight(self, *args, **kwargs):
        """
        divideresidualbyweight(self, _singledish) -> bool



        Summary:
            Divide residual by weight

        Input Parameters:
            singledish                

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_divideresidualbyweight(self, *args, **kwargs)


    def dividemodelbyweight(self):
        """
        dividemodelbyweight(self) -> bool



        Summary:
            Divide model by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_dividemodelbyweight(self)


    def multiplymodelbyweight(self):
        """
        multiplymodelbyweight(self) -> bool



        Summary:
            Multiply model by weight

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_multiplymodelbyweight(self)


    def scattermodel(self):
        """
        scattermodel(self) -> bool



        Summary:
            Scatter model if needed

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_scattermodel(self)


    def getimstore(self):
        """
        getimstore(self) -> casac::synthesisimstore *



        Summary:
            Get Image store

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_getimstore(self)


    def unlockimages(self):
        """
        unlockimages(self) -> bool



        Summary:
            unlock the images held by this normalizer

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_unlockimages(self)


    def setimstore(self, _imstore=None):
        """
        setimstore(self, _imstore=None) -> bool



        Summary:
            Set ImageStore

        Input Parameters:
            imstore                   Image Store object

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_setimstore(self, _imstore)


    def done(self):
        """
        done(self) -> bool



        Summary:
            Close the tool

        --------------------------------------------------------------------------------

        """
        return _synthesisnormalizer.synthesisnormalizer_done(self)

    __swig_destroy__ = _synthesisnormalizer.delete_synthesisnormalizer
    __del__ = lambda self: None
synthesisnormalizer_swigregister = _synthesisnormalizer.synthesisnormalizer_swigregister
synthesisnormalizer_swigregister(synthesisnormalizer)

# This file is compatible with both classic and new-style classes.



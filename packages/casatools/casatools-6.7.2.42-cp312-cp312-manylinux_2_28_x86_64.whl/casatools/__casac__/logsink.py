# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_logsink')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_logsink')
    _logsink = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_logsink', [dirname(__file__)])
        except ImportError:
            import _logsink
            return _logsink
        try:
            _mod = imp.load_module('_logsink', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _logsink = swig_import_helper()
    del swig_import_helper
else:
    import _logsink
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class logsink(_object):
    """Proxy of C++ casac::logsink class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, logsink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, logsink, name)
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        """__init__(self, _filename) -> logsink"""
        this = _logsink.new_logsink(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def origin(self, *args, **kwargs):
        """
        origin(self, _fromwhere) -> bool



        Summary:
            Set the origin of the message

        Description:

        Sets the origin of messages to be displayed

        Input Parameters:
            fromwhere                 The origin of a log messages

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_origin(self, *args, **kwargs)


    def processorOrigin(self, *args, **kwargs):
        """
        processorOrigin(self, _fromwhere) -> bool



        Summary:
            Set the CASA processor origin

        Description:

        Sets the CASA processor origin which is shown at the end of each log origin

        Input Parameters:
            fromwhere                 Input CASA processor origin name

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_processorOrigin(self, *args, **kwargs)


    def filter(self, *args, **kwargs):
        """
        filter(self, _level) -> bool



        Summary:
            Set the filter level

        Description:

        Set the filter level of logging messages to be displayed.
        This will determine what log messages go into the log file. The logger itself
        can adjust what gets displayed so you could set INFO5 and then filter in the
        logger everything above INFO1.

        Input Parameters:
            level                     Level of messages to display to the console/log file

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_filter(self, *args, **kwargs)


    def filterMsg(self, *args, **kwargs):
        """
        filterMsg(self, _msgList)



        Summary:
            Add messages to the filter out list

        Description:

        Add messages to the filter out list

        Input Parameters:
            msgList                   Array of strings identifying messages to filter out

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_filterMsg(self, *args, **kwargs)


    def clearFilterMsgList(self):
        """
        clearFilterMsgList(self)



        Summary:
            Clear list of messages to be filter out

        Description:

        Clear list of messages to be filter out

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_clearFilterMsgList(self)


    def post(self, *args, **kwargs):
        """
        post(self, _message, _priority, _origin) -> bool



        Summary:
            Post a message

        Description:

        If the message passes the filter, write it (same as postLocally)

        Input Parameters:
            message                   Message to be posted
            priority                  Priority of message to be posted
            origin                    Origin of message to be posted

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_post(self, *args, **kwargs)


    def postLocally(self, *args, **kwargs):
        """
        postLocally(self, _message, _priority, _origin) -> bool



        Summary:
            Post locally

        Description:

        If the message passes the filter, write it

        Input Parameters:
            message                   Message to be posted
            priority                  Priority of message to be posted
            origin                    Origin of message to be posted

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_postLocally(self, *args, **kwargs)


    def localId(self):
        """
        localId(self) -> string



        Summary:
            Get local ID

        Description:

        Returns the id for this class

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_localId(self)


    def version(self):
        """
        version(self) -> string



        Summary:
            version of CASA

        Description:

        Returns the version of CASA as well as sending it to the log

        Example:

        casalog.version()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_version(self)


    def id(self):
        """
        id(self) -> string



        Summary:
            Get ID

        Description:

        Returns the ID of the LogSink in use

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_id(self)


    def setglobal(self, *args, **kwargs):
        """
        setglobal(self, _isglobal) -> bool



        Summary:
            Set this logger to be the global logger

        Input Parameters:
            isglobal                  Use as global logger

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setglobal(self, *args, **kwargs)


    def setlogfile(self, *args, **kwargs):
        """
        setlogfile(self, _filename) -> bool



        Summary:
            Set the name of file for logger output

        Input Parameters:
            filename                  filename for logger

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setlogfile(self, *args, **kwargs)


    def showconsole(self, *args, **kwargs):
        """
        showconsole(self, _onconsole) -> bool



        Summary:
            Choose to send messages to the console/terminal

        Input Parameters:
            onconsole                 All messages to the console as well as log file

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_showconsole(self, *args, **kwargs)


    def logfile(self):
        """
        logfile(self) -> string



        Summary:
            Returns the full path of the log file

        Description:

        Returns the full path of the log file

        Example:

        logfile = casalog.logfile()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_logfile(self)


    def ompNumThreadsTest(self):
        """
        ompNumThreadsTest(self) -> long



        Summary:
            Determines the number of OpenMP threads in the current parallel region using an OpenMP reduction pragma

        Example:

        omp_num_thread = casalog.ompNumThreadsTest()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompNumThreadsTest(self)


    def ompGetNumThreads(self):
        """
        ompGetNumThreads(self) -> long



        Summary:
            Returns the number of OpenMP threads in the current parallel region

        Example:

        omp_num_thread = casalog.ompNumThreadsTest()

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompGetNumThreads(self)


    def ompSetNumThreads(self, *args, **kwargs):
        """
        ompSetNumThreads(self, _numThreads) -> bool



        Summary:
            Specifies the number of OpenMP threads used by default in subsequent parallel regions

        Input Parameters:
            numThreads                

        Example:

        casalog.ompSetNumThreads(2)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_ompSetNumThreads(self, *args, **kwargs)


    def setMemoryTotal(self, *args, **kwargs):
        """
        setMemoryTotal(self, _memory) -> long



        Summary:
            Sets the memory total value to be returned by HostInfo

        Input Parameters:
            memory                    

        Example:

        casalog.setMemoryTotal(4*1024)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setMemoryTotal(self, *args, **kwargs)


    def setMemoryFraction(self, *args, **kwargs):
        """
        setMemoryFraction(self, _memfrac) -> long



        Summary:
            Sets the memory fraction value to be returned by HostInfo

        Input Parameters:
            memfrac                   

        Example:

        casalog.setMemoryFraction(50)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setMemoryFraction(self, *args, **kwargs)


    def setNumCPUs(self, *args, **kwargs):
        """
        setNumCPUs(self, _cores) -> long



        Summary:
            Sets the number of CPUs to be returned by HostInfo

        Input Parameters:
            cores                     

        Example:

        casalog.setNumCPUs(4)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_setNumCPUs(self, *args, **kwargs)


    def getMemoryTotal(self, *args, **kwargs):
        """
        getMemoryTotal(self, _use_aipsrc) -> long



        Summary:
            Returns the memory total value from HostInfo

        Input Parameters:
            use_aipsrc                

        Example:

        casalog.getMemoryTotal(true)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getMemoryTotal(self, *args, **kwargs)


    def getNumCPUs(self, *args, **kwargs):
        """
        getNumCPUs(self, _use_aipsrc) -> long



        Summary:
            Returns the number of CPUs from HostInfo

        Input Parameters:
            use_aipsrc                

        Example:

        casalog.getNumCPUs(true)

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getNumCPUs(self, *args, **kwargs)


    def getOrigin(self):
        """
        getOrigin(self) -> string



        Summary:
            Get the origin of the message

        Description:

        Gets the origin of messages to be displayed

        --------------------------------------------------------------------------------

        """
        return _logsink.logsink_getOrigin(self)

    __swig_destroy__ = _logsink.delete_logsink
    __del__ = lambda self: None
logsink_swigregister = _logsink.logsink_swigregister
logsink_swigregister(logsink)

# This file is compatible with both classic and new-style classes.



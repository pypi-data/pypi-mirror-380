# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_functional')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_functional')
    _functional = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_functional', [dirname(__file__)])
        except ImportError:
            import _functional
            return _functional
        try:
            _mod = imp.load_module('_functional', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _functional = swig_import_helper()
    del swig_import_helper
else:
    import _functional
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class functional(_object):
    """Proxy of C++ casac::functional class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, functional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, functional, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> functional"""
        this = _functional.new_functional()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def f(self, *args, **kwargs):
        """
        f(self, _x) -> casac::variant *



        Summary:
            Calculate the value of the functional

        Description:



        Calculate the value of the functional.

        Input Parameters:
            x                         real argument values

        Example:

        gfn = fn.gaussian1d(2, 0, 1)
        #returns 0.125
        gfn.f(1)
        # returns array([  1.25000000e-01,   3.05175781e-05])
        gfn.f([1,2])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_f(self, *args, **kwargs)


    def ndim(self):
        """
        ndim(self) -> long



        Summary:
            Get the number of dimensions

        Description:


        Return the number of dimensions.

        Example:

        a = fn.gaussian1d()
        # nd is set to 1
        nd = fn.ndim()

        --------------------------------------------------------------------------------

        """
        return _functional.functional_ndim(self)


    def done(self):
        """
        done(self) -> bool



        Summary:
            Free resources of the functional

        Description:



        Free the functional's resources.

        Example:

        - a:=dfs.gaussian1d()
        - a.setparameters([2,1,3])
        T
        - a.state()
        [type=0, order=-1, ndim=1, npar=3, params=[2 1 3] , masks=[T T T] ]
        - a.done()
        T
        - is_functional(a)
        F
        - a
        F

        --------------------------------------------------------------------------------

        """
        return _functional.functional_done(self)


    def gaussian1d(self, *args, **kwargs):
        """
        gaussian1d(self, _amplitude, _center, _fwhm) -> functional



        Summary:
            Create and return a new functional tool representing a 1D Gaussian function

        Description:



        Create a 1-dimensional Gaussian with the specified amplitude, fwhm, and
        center.

        Input Parameters:
            amplitude                 amplitude of Gaussian
            center                    center of Gaussian
            fwhm                      FWHM of Gaussian

        Example:

        # get the value and derivatives of a Gaussian with
        # height=2; center at x=1; a width of 1 at x=[0,1,2]
        gfn = fn.gaussian1d(2,1,1)

        # returns array([ 0.125,  2.   ,  0.125])
        vals = gfn.f([0, 1, 2])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_gaussian1d(self, *args, **kwargs)


    def gaussian2d(self, *args, **kwargs):
        """
        gaussian2d(self, _amplitude, _center, _fwhm, _pa) -> functional



        Summary:
            Create a 2D Gaussian function

        Description:



        Create a 2-dimensional Gaussian with the specified amplitude, fwhms, and
        center. The created functional has method {em f}  to
        calculate the function value at a series of {em x, y} values, or the
        value.

        Input Parameters:
            amplitude                 Amplitude of Gaussian
            center                    Center (x,y) position. Must have exactly 2 elements.
            fwhm                      FWHM of the axes. Must have exactly 2 elements.
            pa                        The angle between the positive y axis and the major axis, measured counterclockwise.

        Example:

        # major axis along the y axis
        g2d = fn.gaussian2d(1,[0,0],[3,2],'90deg')

        # both these commands return 0.5
        v = g2d([0, 1])
        v = g2d([1.5, 0])

        # returns array([ 0.5,  0.5])
        v =  g2d.f([0,1,1.5,0])

        --------------------------------------------------------------------------------

        """
        return _functional.functional_gaussian2d(self, *args, **kwargs)


    def polynomial(self, *args, **kwargs):
        """
        polynomial(self, _coefficients) -> functional



        Summary:
            Create and return a new functional tool representing a 1D polynomial function, y = c_0 + c_1*x + c_2*x**2 + ... + c_n*x**n

        Description:



        Create a 1-dimensional polynomial function with the specified coefficents.

        Input Parameters:
            coefficients              Array of coefficients. Number of coefficients determines order of polynomial.

        Example:

        # get the value and derivatives of 3 + 2*x + 4*x*x
        poly = fn.powerlogpoly(3, 2, 4)

        # value at 3
        vals = poly.f(3)

        --------------------------------------------------------------------------------

        """
        return _functional.functional_polynomial(self, *args, **kwargs)


    def powerlogpoly(self, *args, **kwargs):
        """
        powerlogpoly(self, _coefficients) -> functional



        Summary:
            Create and return a new functional tool representing a 1D power log polynomial function, y = c_0 * x**( c_1 + c_2*ln(x) + c_3*ln(x)**2 + ... c_n*ln(x)**(n-1)

        Description:



        Create a 1-dimensional power log polynomial function with the specified coefficents.

        Input Parameters:
            coefficients              Array of coefficients.

        Example:

        # get the value and derivatives of 2*x**(1+ln(x))
        plp = fn.powerlogpoly(2,1,1)

        # value at 3
        vals = plp.f(3)

        --------------------------------------------------------------------------------

        """
        return _functional.functional_powerlogpoly(self, *args, **kwargs)

    __swig_destroy__ = _functional.delete_functional
    __del__ = lambda self: None
functional_swigregister = _functional.functional_swigregister
functional_swigregister(functional)

# This file is compatible with both classic and new-style classes.



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_calanalysis')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_calanalysis')
    _calanalysis = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_calanalysis', [dirname(__file__)])
        except ImportError:
            import _calanalysis
            return _calanalysis
        try:
            _mod = imp.load_module('_calanalysis', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _calanalysis = swig_import_helper()
    del swig_import_helper
else:
    import _calanalysis
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class calanalysis(_object):
    """Proxy of C++ casac::calanalysis class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calanalysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calanalysis, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> calanalysis"""
        this = _calanalysis.new_calanalysis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def open(self, *args, **kwargs):
        """
        open(self, _caltable) -> bool



        Summary:
             Open a calibration table.

        Description:


        This member function opens a calibration table.

        Input Parameters:
            caltable                   Python string containing the calibration table name. 

        Example:

        ca.open( '<caltable name>' )

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_open(self, *args, **kwargs)


    def close(self):
        """
        close(self) -> bool



        Summary:
             Close a calibration table.

        Description:


        This member function closes a calibration table.

        Example:

        ca.close()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_close(self)


    def calname(self):
        """
        calname(self) -> string



        Summary:
             Return the calibration table name.

        Description:


        This member function returns calibration table name.

        Example:

        caltable = ca.calname()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_calname(self)


    def msname(self):
        """
        msname(self) -> string



        Summary:
             Return the name of the MS that created this calibration table.

        Description:


        This member function returns the name of the MS that created this calibration
        table.

        Example:

        msname = ca.msname()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_msname(self)


    def viscal(self):
        """
        viscal(self) -> string



        Summary:
             Return the type of calibration table ('B', 'G', 'T', etc.).

        Description:


        This member function returns the type of calibration table ('B', 'G', 'T',
        etc.).

        Example:

        viscal = ca.viscal()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_viscal(self)


    def partype(self):
        """
        partype(self) -> string



        Summary:
             Return the parameter column type in the calibration table ('Complex' or 'Float').

        Description:


        This member function returns the parameter column type in the calibration table
        ('Complex' or 'Float').

        Example:

        partype = ca.partype()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_partype(self)


    def polbasis(self):
        """
        polbasis(self) -> string



        Summary:
             Return the polarization basis in the calibration table ('L' for linear or 'C' for circular).

        Description:


        This member function returns the polarization basis in the calibration table
        ('L' for linear or 'C' for circular).

        Example:

        polbasis = ca.polbasis()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_polbasis(self)


    def numfield(self):
        """
        numfield(self) -> long



        Summary:
             Return the number of fields in the calibration table.

        Description:


        This member function returns the number of fields in the calibration table.

        Example:

        numfield = ca.numfield()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numfield(self)


    def field(self, *args, **kwargs):
        """
        field(self, _name) -> std::vector< std::string >



        Summary:
             Return the fields in the calibration table.

        Description:


        This member function returns the fields in the calibration table.

        Input Parameters:
            name                       The python boolean which determines whether field names (True) or field numbers (False) are returned. 

        Example:

        field = ca.field()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_field(self, *args, **kwargs)


    def numantenna(self):
        """
        numantenna(self) -> long



        Summary:
             Return the number of antennas in the calibration table.

        Description:


        This member function returns the number of antennas in the calibration table.

        Example:

        numantenna = ca.numantenna()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numantenna(self)


    def numantenna1(self):
        """
        numantenna1(self) -> long



        Summary:
             Return the number of antenna 1s in the calibration table.

        Description:


        This member function returns the number of antenna 1s in the calibration table.

        Example:

        numantenna1 = ca.numantenna1()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numantenna1(self)


    def numantenna2(self):
        """
        numantenna2(self) -> long



        Summary:
             Return the number of antenna 2s in the calibration table.

        Description:


        This member function returns the number of antenna 2s in the calibration table.

        Example:

        numantenna2 = ca.numantenna2()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numantenna2(self)


    def antenna(self, *args, **kwargs):
        """
        antenna(self, _name) -> std::vector< std::string >



        Summary:
             Return the antennas in the calibration table.

        Description:


        This member function returns the antennas in the calibration table.

        Input Parameters:
            name                       The python boolean which determines whether antenna names (True) or antenna numbers (False) are returned. 

        Example:

        antenna = ca.antenna()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_antenna(self, *args, **kwargs)


    def antenna1(self, *args, **kwargs):
        """
        antenna1(self, _name) -> std::vector< std::string >



        Summary:
             Return the antenna 1s in the calibration table.

        Description:


        This member function returns the antenna 1s in the calibration table.

        Input Parameters:
            name                       The python boolean which determines whether antenna 1 names (True) or antenna 1 numbers (False) are returned. 

        Example:

        antenna1 = ca.antenna1()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_antenna1(self, *args, **kwargs)


    def antenna2(self, *args, **kwargs):
        """
        antenna2(self, _name) -> std::vector< std::string >



        Summary:
             Return the antenna 2s in the calibration table.

        Description:


        This member function returns the antenna 2s in the calibration table.

        Input Parameters:
            name                       The python boolean which determines whether antenna 2 names (True) or antenna 2 numbers (False) are returned. 

        Example:

        antenna2 = ca.antenna2()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_antenna2(self, *args, **kwargs)


    def numfeed(self):
        """
        numfeed(self) -> long



        Summary:
             Return the number of feeds in the calibration table.

        Description:


        This member function returns the number of feeds in the calibration table.

        Example:

        numfeed = ca.numfeed()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numfeed(self)


    def feed(self):
        """
        feed(self) -> std::vector< std::string >



        Summary:
             Return the feeds in the calibration table.

        Description:


        This member function returns the feeds in the calibration table.

        Example:

        feed = ca.feed()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_feed(self)


    def numtime(self):
        """
        numtime(self) -> long



        Summary:
             Return the number of times in the calibration table.

        Description:


        This member function returns the number of times in the calibration table.

        Example:

        numtime = ca.numtime()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numtime(self)


    def time(self):
        """
        time(self) -> std::vector< double >



        Summary:
             Return the times (in MJD seconds) in the calibration table.

        Description:


        This member function returns the times (in MJD seconds) in the calibration
        table.

        Example:

        time = ca.time()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_time(self)


    def numspw(self):
        """
        numspw(self) -> long



        Summary:
             Return the number of spectral windows in the calibration table.

        Description:


        This member function returns the number of spectral windows in the calibration
        table.

        Example:

        numspw = ca.numspw()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numspw(self)


    def spw(self, *args, **kwargs):
        """
        spw(self, _name) -> std::vector< std::string >



        Summary:
             Return the spectral windows in the calibration table.

        Description:


        This member function returns the spectral windows in the calibration table.

        Input Parameters:
            name                       The python boolean which determines whether spectral window names (True) or spectral window numbers (False) are returned. 

        Example:

        spw = ca.spw()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_spw(self, *args, **kwargs)


    def numchannel(self):
        """
        numchannel(self) -> std::vector< long >



        Summary:
             Return the number of channels per spectral window in the calibration table.

        Description:


        This member function returns the number of channels per spectral window in the
        calibration table.

        Example:

        numChannel = ca.numchannel()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_numchannel(self)


    def freq(self):
        """
        freq(self) -> record *



        Summary:
             Return the frequencies per spectral window in the calibration table.

        Description:


        This member function returns the frequencies per spectral window in the
        calibration table.

        Example:

        freq = ca.freq()

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_freq(self)


    def get(self, *args, **kwargs):
        """
        get(self, _field, _antenna, _timerange, _spw, _feed, _axis, _ap, _norm, _unwrap, _jumpmax) -> record *



        Summary:
             Return the calibration data.

        Description:


        This member function returns the calibration data.

        Input Parameters:
            field                      The python comma-delimited string or list of strings containing the field names or numbers.  The default is '' (all fields). 
            antenna                    The python comma-delimited string or list of strings containing the antenna 1s and antenna 2s.  The default is '' (all antenna 1s and antenna 2s). 
            timerange                  The python list of floats of length two containing the start and stop times (in MJD seconds).  The default is [] (the minimum start time and the maximum stop time). 
            spw                        The python comma-delimited string containing the spectral window names and numbers along with their channel numbers.  The default is '' (all spectral windows and channels). 
            feed                       The python comma-delimited string or list of strings containing the feeds. The default is '' (all feeds). 
            axis                       The python string containing the user-specified iteration axis.  The allowed values are 'TIME' and 'FREQ'.  The default is '' ('FREQ'). 
            ap                         The python string which determines whether complex gains are converted to amplitudes or phases.  The allowed values are 'AMPLITUDE' and 'PHASE'. The default is '' ('AMPLITUDE').  This parameter is ignored when the 'gain' values in the calibration table are real. 
            norm                       The python boolean which determines whether the amplitudes are normalized along each non-iteration axis.  The default is False.  This parameter is ignored when the 'gain' values in the calibration table are real or ap='PHASE'. 
            unwrap                     The python boolean which determines whether the phases are unwrapped along each non-iteration axis.  The default is False.  This parameter is ignored when the 'gain' values in the calibration table are real or ap='AMPLITUDE'. 
            jumpmax                    The python float which determines the maximum phase jump near +/- PI before unwrapping is performed.  E.g., jumpmax = 0.1.  The default is 0.0. It is ignored if the 'gain' values in the calibration table are real or ap = 'AMPLITUDE'.  If the non-iteration axis is frequency: 1) if jumpmax == 0.0, use fringe fitting (only available when the non-iteration axis is time); 2) if jumpmax != 0.0, use simple unwrapping (same algorithm as used when the non-iteration axis is time or frequency). 

        Example:

        # All data limited only by the spectral window and channel input
        data = ca.get( spw='0:4~15,1,2:10~20' )

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_get(self, *args, **kwargs)


    def fit(self, *args, **kwargs):
        """
        fit(self, _field, _antenna, _timerange, _spw, _feed, _axis, _ap, _norm, _unwrap, _jumpmax, _order, _type, _weight) -> record *



        Summary:
             Return the calibration data and fits along the non-iteration axis.

        Description:


        This member function returns the calibration data and fits along the
        non-iteration axis.

        Input Parameters:
            field                      The python comma-delimited string or list of strings containing the field names or numbers.  The default is '' (all fields). 
            antenna                    The python comma-delimited string or list of strings containing the antenna 1s and antenna 2s.  The default is '' (all antenna 1s and antenna 2s). 
            timerange                  The python list of floats of length two containing the start and stop times (in MJD seconds).  The default is [] (the minimum start time and the maximum stop time). 
            spw                        The python comma-delimited string containing the spectral window names and numbers along with their channel numbers.  The default is '' (all spectral windows and channels). 
            feed                       The python comma-delimited string or list of strings containing the feeds. The default is '' (all feeds). 
            axis                       The python string containing the user-specified iteration axis.  The allowed values are 'TIME' and 'FREQ'.  The default is '' ('FREQ'). 
            ap                         The python string which determines whether complex gains are converted to amplitudes or phases.  The allowed values are 'AMPLITUDE' and 'PHASE'. The default is '' ('AMPLITUDE').  This parameter is ignored when the 'gain' values in the calibration table are real. 
            norm                       The python boolean which determines whether the amplitudes are normalized along each non-iteration axis.  The default is False.  This parameter is ignored when the 'gain' values in the calibration table are real or ap='PHASE'. 
            unwrap                     The python boolean which determines whether the phases are unwrapped along each non-iteration axis.  The default is False.  This parameter is ignored when the 'gain' values in the calibration table are real or ap='AMPLITUDE'. 
            jumpmax                    The python float which determines the maximum phase jump near +/- PI before unwrapping is performed.  E.g., jumpmax = 0.1.  The default is 0.0. It is ignored if the 'gain' values in the calibration table are real or ap = 'AMPLITUDE'.  If the non-iteration axis is frequency: 1) if jumpmax == 0.0, use fringe fitting (only available when the non-iteration axis is time); 2) if jumpmax != 0.0, use simple unwrapping (same algorithm as used when the non-iteration axis is time or frequency). 
            order                      The python string containing the fit order.  The allowed values are 'AVERAGE', 'LINEAR', and 'QUADRATIC'.  The default is '' ('AVERAGE').  NB: 'QUADRATIC' is not allowed when type = 'ROBUST'. 
            type                       The python string containing the fit type.  The allowed values are 'LSQ' and 'ROBUST'.  The default is '' ('LSQ').  NB: Robust fitting is experimental.  It flags outliers. 
            weight                     The python boolean which determines the weighting.  The default is False. 

        Example:

        # All data limited only by the spectral window and channel input.  The fit order
        # is linear.
        data_fit = ca.fit( spw='0:4~15,1,2:10~20', order='LINEAR' )

        --------------------------------------------------------------------------------

        """
        return _calanalysis.calanalysis_fit(self, *args, **kwargs)

    __swig_destroy__ = _calanalysis.delete_calanalysis
    __del__ = lambda self: None
calanalysis_swigregister = _calanalysis.calanalysis_swigregister
calanalysis_swigregister(calanalysis)

# This file is compatible with both classic and new-style classes.



# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_vpmanager')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_vpmanager')
    _vpmanager = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vpmanager', [dirname(__file__)])
        except ImportError:
            import _vpmanager
            return _vpmanager
        try:
            _mod = imp.load_module('_vpmanager', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _vpmanager = swig_import_helper()
    del swig_import_helper
else:
    import _vpmanager
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class vpmanager(_object):
    """Proxy of C++ casac::vpmanager class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vpmanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vpmanager, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(self) -> vpmanager"""
        this = _vpmanager.new_vpmanager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def saveastable(self, *args, **kwargs):
        """
        saveastable(self, _tablename) -> bool



        Summary:
            Save the vp or pb descriptions as a table

        Description:


        Save the vp or pb descriptions as a table.  Each description is in a different
        row of the table.

        Input Parameters:
            tablename                 Name of table to save vp descriptions in

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_saveastable(self, *args, **kwargs)


    def loadfromtable(self, *args, **kwargs):
        """
        loadfromtable(self, _tablename) -> bool



        Summary:
            Load the vp or pb descriptions from a table (deleting all previous definitions)

        Description:


        Load the vp or pb descriptions from a table created, e.g., with saveastable().

        Input Parameters:
            tablename                 Name of table to load vp descriptions from

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_loadfromtable(self, *args, **kwargs)


    def summarizevps(self, *args, **kwargs):
        """
        summarizevps(self, _verbose) -> bool



        Summary:
            Summarize the currently accumulated VP descriptions

        Description:


        Summarize the currently accumulated VP descriptions to the logger.

        Input Parameters:
            verbose                   Print out full record?  Otherwise, print summary.

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_summarizevps(self, *args, **kwargs)


    def setcannedpb(self, *args, **kwargs):
        """
        setcannedpb(self, _telescope, _othertelescope, _dopb, _commonpb, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Select a vp/pb from our library of common pb models

        Description:


        We have many vp/pb models ready to go for a variety of telescopes.  If 'DEFAULT' isselected, the system default for that telescope and frequency is used.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            commonpb                  List of common vp/pb models: DEFAULT code figures it out
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setcannedpb(self, *args, **kwargs)


    def setpbairy(self, *args, **kwargs):
        """
        setpbairy(self, _telescope, _othertelescope, _dopb, _dishdiam, _blockagediam, _maxrad, _reffreq, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make an airy disk vp

        Description:


        Information sufficient to create a portion of the Airy disk voltage pattern.
        The Airy disk pattern is formed by Fourier transforming a uniformly illuminated
        aperture and is given by
        begin{equation}
        vp_p(i) = ( areaRatio * 2.0 * j_{1}(x)/x
        - 2.0 * j_{1}(x*lengthRatio)/(x*lengthRatio) )/ areaNorm,
        end{equation}
        where areaRatio is the dish area divided by the blockage area, lengthRatio
        is the dish diameter divided by the blockage diameter, and
        begin{equation}
        x = frac{i * maxrad * 7.016 * dishdiam/24.5m}{N_{samples} * 1.566 * 60}.
        end{equation}

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            dishdiam                  Effective diameter of dish
            blockagediam              Effective diameter of subreflector blockage
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbairy(self, *args, **kwargs)


    def setpbcospoly(self, *args, **kwargs):
        """
        setpbcospoly(self, _telescope, _othertelescope, _dopb, _coeff, _scale, _maxrad, _reffreq, _isthispb, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make a vp/pb from a polynomial of scaled cosines

        Description:


        A voltage pattern or primary beam of the form
        begin{equation}
        VP(x) = sum_{i} ( coeff_{i} cos^{2i}( scale_{i} x).
        end{equation}
        This is a generalization of the WSRT primary beam model.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            coeff                     Vector of coefficients of cosines
            scale                     Vector of scale factors of cosines
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            isthispb                  Do these parameters describe a PB or a VP?
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbcospoly(self, *args, **kwargs)


    def setpbgauss(self, *args, **kwargs):
        """
        setpbgauss(self, _telescope, _othertelescope, _dopb, _halfwidth, _maxrad, _reffreq, _isthispb, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make a Gaussian vp/pb

        Description:


        Make a Gaussian primary beam given by
        begin{equation}
        PB(x) =  e^{- (x/(halfwidth*sqrt{1/log(2)})) }.
        end{equation}

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            halfwidth                 Half power half width of the Gaussian at the reffreq
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            isthispb                  Do these parameters describe a PB or a VP?
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbgauss(self, *args, **kwargs)


    def setpbinvpoly(self, *args, **kwargs):
        """
        setpbinvpoly(self, _telescope, _othertelescope, _dopb, _coeff, _maxrad, _reffreq, _isthispb, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make a vp/pb as an inverse polynomial

        Description:


        The inverse polynomial describes the inverse of the VP or PB
        as a polynomial of even powers:
        begin{equation}
        1/VP(x) = sum_{i} coeff_{i} * x^{2i}.
        end{equation}

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            coeff                     Coefficients of even powered terms
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            isthispb                  Do these parameters describe a PB or a VP?
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbinvpoly(self, *args, **kwargs)


    def setpbnumeric(self, *args, **kwargs):
        """
        setpbnumeric(self, _telescope, _othertelescope, _dopb, _vect, _maxrad, _reffreq, _isthispb, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make a vp/pb from a user-supplied vector

        Description:


        Supply a vector of vp/pb sample values taken on a regular grid between x=0 and
        x=maxrad.  We perform sinc interpolation to fill in the lookup table.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            vect                      Vector of vp/pb samples uniformly spaced from 0 to maxrad
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            isthispb                  Do these parameters describe a PB or a VP?
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbnumeric(self, *args, **kwargs)


    def setpbimage(self, *args, **kwargs):
        """
        setpbimage(self, _telescope, _othertelescope, _dopb, _realimage, _imagimage, _compleximage, _antnames) -> record *



        Summary:
            Make a vp/pb from a user-supplied image

        Description:


        Experimental: Supply an image of the E Jones elements. The format of the
        image is:
        begin{description}
        item[Shape] nx by ny by 4 complex polarizations (RR, RL, LR, LL or
        XX, XY, YX, YY) by 1 channel.
        item[Direction coordinate] Az, El
        item[Stokes coordinate] All four ``stokes'' parameters must be present
        in the sequence RR, RL, LR, LL or XX, XY, YX, YY.
        item[Frequency] Only one channel is currently needed - frequency
        dependence beyond that is ignored.
        end{description}

        If a compleximage is specified the real and imaginary images is to be left empty.

        The other option is to provide the real and imaginary part of the E-Jones as seperale {tt float} images
        On that case
        one or two images may be specified - the real (must be present) and
        imaginary parts (optional).

        Note that beamsquint must be intrinsic to the images themselves.
        This will be accounted for correctly by regridding of the images
        from Az-El to Ra-Dec according to the parallactic angle.

        antnames is the Vector of names  for which this response pattern apply '*' is for all
        The name has to match exactly the name of the Antennas in the ANTENNA table of the MS with which
        you want to use this VPManager table or object.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            realimage                 Real part of vp as an image
            imagimage                 Imaginary part of vp as an image
            compleximage              complex vp as an image of complex numbers; if specified realimage and imagimage are ignored
            antnames                  antenna names for which this pattern is valid; default is all antennas

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbimage(self, *args, **kwargs)


    def setpbpoly(self, *args, **kwargs):
        """
        setpbpoly(self, _telescope, _othertelescope, _dopb, _coeff, _maxrad, _reffreq, _isthispb, _squintdir, _squintreffreq, _dosquint, _paincrement, _usesymmetricbeam) -> record *



        Summary:
            Make a vp/pb from a polynomial

        Description:


        The VP or PB is described as a polynomial of even powers:
        begin{equation}
        VP(x) = sum_{i} coeff_{i} * x^{2i}.
        end{equation}

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            coeff                     Coefficients of even powered terms
            maxrad                    Maximum radial extent of the vp/pb (scales with 1/freq)
            reffreq                   Frequency at which maxrad is specified
            isthispb                  Do these parameters describe a PB or a VP?
            squintdir                 Offset (Measure) of RR beam from pointing center, azel frame (scales with 1/freq)
            squintreffreq             Frequency at which the squint is specified
            dosquint                  Enable the natural beam squint found in the common vp model
            paincrement               Increment in Parallactic Angle for asymmetric (ie, squinted) vp application
            usesymmetricbeam          Not currently used

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbpoly(self, *args, **kwargs)


    def setpbantresptable(self, *args, **kwargs):
        """
        setpbantresptable(self, _telescope, _othertelescope, _dopb, _antresppath) -> bool



        Summary:
            Declare a reference to an antenna responses table

        Description:


        Declare a reference to an antenna responses table containing a set of VP/PB definitions.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            othertelescope            If telescope=='OTHER', specify name here
            dopb                      Should we apply the vp/pb to this telescope's data?
            antresppath               The path to the antenna responses table (absolute or relative to CASA data dir.)

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setpbantresptable(self, *args, **kwargs)


    def reset(self):
        """
        reset(self) -> bool



        Summary:
            Reinitialize the VPManager (will erase all VPs and defaults defined on the command line)

        Description:


        Reinitialize the VPManager database.
        Erase all VPs and defaults defined on the command line.

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_reset(self)


    def setuserdefault(self, *args, **kwargs):
        """
        setuserdefault(self, _vplistnum, _telescope, _anttype) -> bool



        Summary:
            Select the VP which is to be used by the imager for the given telescope and antenna type

        Description:


        Selects the VP which is to be used by the imager for the given telescope and antenna type.
        Overwrites a previous default. Returns True if successful.

        Input Parameters:
            vplistnum                 The number of the vp as displayed by summarizevps(), or -1 for internal default, or -2 for unset
            telescope                 Which telescope in the MS will use this vp/pb?
            anttype                   Which antennatype will use this vp/pb? Default: '' = all

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_setuserdefault(self, *args, **kwargs)


    def getuserdefault(self, *args, **kwargs):
        """
        getuserdefault(self, _telescope, _anttype) -> long



        Summary:
            Get the vp list number of the present default VP/PB for the given parameters (-1 = internal PB, -2 = none)

        Description:


        Get the vp list number of the present default VP/PB for the given parameters.

        Input Parameters:
            telescope                 Which telescope in the MS will use this vp/pb?
            anttype                   Which antennatype will use this vp/pb? Default: '' = all

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_getuserdefault(self, *args, **kwargs)


    def getanttypes(self, *args, **kwargs):
        """
        getanttypes(self, _telescope, _obstime, _freq, _obsdirection) -> std::vector< std::string >



        Summary:
            Return the list of available antenna types for the given parameters

        Description:


        Get a list of the available antenna types.

        Input Parameters:
            telescope                 Telescope name
            obstime                   Time of the observation (for versioning and reference frame calculations) 
            freq                      Frequency of the observation (may include reference frame, default: LSRK) 
            obsdirection              Direction of the observation (may include reference frame, default: J2000). default: Zenith 

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_getanttypes(self, *args, **kwargs)


    def numvps(self, *args, **kwargs):
        """
        numvps(self, _telescope, _obstime, _freq, _obsdirection) -> long



        Summary:
            Return the number of vps/pbs available for the given parameters

        Description:


        Can be used to, e.g., determine the number of antenna types.
        Note: if a global response is defined for the telescope, this will increase the count of
        available vps/pbs by 1.

        Input Parameters:
            telescope                 Telescope name
            obstime                   Time of the observation (for versioning and reference frame calculations) 
            freq                      Frequency of the observation (may include reference frame, default: LSRK) 
            obsdirection              Direction of the observation (may include reference frame, default: J2000). default: Zenith 

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_numvps(self, *args, **kwargs)


    def getvp(self, *args, **kwargs):
        """
        getvp(self, _telescope, _antennatype, _obstime, _freq, _obsdirection) -> record *



        Summary:
            Return the default vps/pbs record for the given parameters

        Description:


        Record is empty if no matching vp/pb could be found.

        Input Parameters:
            telescope                 Telescope name
            antennatype               The antenna type as a string, e.g. 'DV'
            obstime                   Time of the observation (for versioning and reference frame calculations), e.g. 2011/12/12T00:00:00 
            freq                      Frequency of the observation (may include reference frame, default: LSRK) 
            obsdirection              Direction of the observation (may include reference frame, default: J2000), default: 

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_getvp(self, *args, **kwargs)


    def getvps(self, *args, **kwargs):
        """
        getvps(self, _telescope, _antennas, _obstimestart, _obstimeend, _minfreq, _maxfreq, _obsdirection) -> record *



        Summary:
            Return the default vps/pbs records for the given antenna list as subrecords in one record

        Description:


        Record is empty if no matching vp/pb could be found.

        Input Parameters:
            telescope                 Telescope name
            antennas                  The antenna names, e.g., as taken from the MS ANTENNA table
            obstimestart              Time of the start of the observation (for versioning and reference frame calculations), e.g. 2011/12/12T00:00:00 
            obstimeend                Time of the end of the observation (for versioning and reference frame calculations), e.g. 2011/12/12T00:00:00 
            minfreq                   Minimum frequency of the observation (may include reference frame, default: LSRK) 
            maxfreq                   Maximum frequency of the observation (may include reference frame, default: LSRK) 
            obsdirection              Direction of the observation (may include reference frame, default: J2000), default: 

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_getvps(self, *args, **kwargs)


    def createantresp(self, *args, **kwargs):
        """
        createantresp(self, _imdir, _starttime, _bandnames, _bandminfreq, _bandmaxfreq) -> bool



        Summary:
            Create a standard-format AntennaResponses table

        Description:


        The AntennaResponses table serves CASA to look up the location of images describing the
        response of observatory antennas. Three types of images are supported: 'VP' - real voltage patterns,
        'AIF' - complex aperture illumination patterns, 'EFP' - complex electric field patterns.
        For each image, a validity range can be defined in Azimuth, Elevation, and Frequency.
        Furthermore, an antenna type (for heterogeneous arrays), a receiver type (for the case of
        several receivers on the same antenna having overlapping frequency bands), and a beam number
        (for the case of multiple beams per antenna) are associated with each response image.

        The images need to be stored in a single directory DIR of arbitrary name and need to
        have file names following the pattern
        begin{verbatim}
        obsname_beamnum_anttype_rectype_azmin_aznom_azmax_elmin_elnom_elmax_freqmin_freqnom_freqmax_frequnit_comment_functype.im
        end{verbatim}
        where the individual name elements mean the following (none of the elements may contain
        the space character, but they may be empty strings if they are not numerical values):
        begin{description}
        item[obsname] - name of the observatory as in the Observatories table, e.g. 'ALMA'
        item[beamnum] - the numerical beam number (integer) for the case of multiple beams, e.g. 0
        item[anttype] - name of the antenna type, e.g. 'DV'
        item[rectype] - name of the receiver type, e.g. ''
        item[azmin, aznom, azmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Azimuth where this response is valid, e.g. '-10.5_0._10.5'
        item[elmin, elnom, elmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Elevation where this response is valid, e.g. '10._45._80.'
        item[freqmin, freqnom, freqmax] - numerical value (degrees) of the minimal, the nominal, and
        the maximal Frequency (in units of frequnit) where this response is valid, e.g. '84._100._116.'
        item[frequnit] - the unit of the previous three frequencies, e.g. 'GHz'
        item[comment] - any string containing only characters permitted in file names and not empty space
        item[functype] - the type of the image as defined above ('VP', 'AIF', or 'EFP')
        end{description}

        The createantresp method will then extract the parameters from all the images in DIR
        and create the lookup table in the same directory.

        Input Parameters:
            imdir                     Path to the directory containing the response images
            starttime                 Time from which onwards the response is valid, format YYYY/MM/DD/hh:mm:ss
            bandnames                 List containing the names of the observatory's frequency bands
            bandminfreq               List containing the lower edges of the observatory's frequency bands, e.g. ['80GHz','120GHz']
            bandmaxfreq               List containing the upper edges of the observatory's frequency bands, e.g. ['120GHz','180GHz']

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_createantresp(self, *args, **kwargs)


    def getrespimagename(self, *args, **kwargs):
        """
        getrespimagename(self, _telescope, _starttime, _frequency, _functype, _anttype, _azimuth, _elevation, _rectype, _beamnumber) -> string



        Summary:
            Get the image name for the given parameters from the given responses table

        Description:


        Given the observatory name, the antenna type, the receiver type, the observing frequency, the
        observing direction, and the beam number, find the applicable response image and return its name.

        Input Parameters:
            telescope                 Which telescope is described by this response?
            starttime                 Time at which the response has to be valid, format YYYY/MM/DD/hh:mm:ss
            frequency                 The frequency at which the response has to be valid, e.g. '100GHz'
            functype                  Type of the responsefunction requested, e.g. 'EFP'
            anttype                   Antenna type (observatory-dependent)
            azimuth                   Azimuth of the observation (at the location of the observatory, 0 is North), e.g. '5deg'
            elevation                 Elevation of the observation (at the location of the observatory, 0 is North), e.g. '60deg'
            rectype                   Receiver type (observatory-dependent)
            beamnumber                Beam number (for the case of multiple beams per receiver)

        --------------------------------------------------------------------------------

        """
        return _vpmanager.vpmanager_getrespimagename(self, *args, **kwargs)

    __swig_destroy__ = _vpmanager.delete_vpmanager
    __del__ = lambda self: None
vpmanager_swigregister = _vpmanager.vpmanager_swigregister
vpmanager_swigregister(vpmanager)

# This file is compatible with both classic and new-style classes.



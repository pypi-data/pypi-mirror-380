name: Release version

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      target:
        description: 'Push target of package registry.'
        required: false
        default: 'testpypi'

jobs:
  build-common:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.local/share/aquaproj-aqua
          key: v2-aqua-installer-${{runner.os}}-${{runner.arch}}-${{hashFiles('aqua.yaml')}}
          restore-keys: |
            v2-aqua-installer-${{runner.os}}-${{runner.arch}}-
      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f  # v4.0.2
        with:
          aqua_version: v2.53.3
      - name: Build distributes
        run: |
          uv build
      - uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist
  build-platform:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        platform:
          - 'win_amd64'
          - 'win_arm64'
          - 'manylinux_2_17_x86_64'
          - 'manylinux_2_17_aarch64'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/.local/share/aquaproj-aqua
          key: v2-aqua-installer-${{runner.os}}-${{runner.arch}}-${{hashFiles('aqua.yaml')}}
          restore-keys: |
            v2-aqua-installer-${{runner.os}}-${{runner.arch}}-
      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f  # v4.0.2
        with:
          aqua_version: v2.53.3
      - name: Build wheel
        run: |
          uv sync
          BUILD_FOR_PLATFORM=${{ matrix.platform }} uv build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: 'dist-${{ matrix.platform }}'
          path: dist
  publish-test:
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.target == 'testpypi' }}
    needs:
      - 'build-common'
      - 'build-platform'
    runs-on: ubuntu-latest
    environment:
      name: 'testpypi'
      url: 'https://test.pypi.org/p/sass-embedded'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - run: |
          ls -lhR dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
  publish:
    if: ${{ inputs.target == 'pypi' || github.event_name == 'push' }}
    needs:
      - 'build-common'
      - 'build-platform'
    runs-on: ubuntu-latest
    environment:
      name: 'pypi'
      url: 'https://pypi.org/p/sass-embedded'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - run: |
          ls -lhR dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
  gh-release:
    if: ${{ inputs.target == 'pypi' || github.event_name == 'push' }}
    needs:
      - 'build-common'
      - 'build-platform'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - uses: ncipollo/release-action@v1
        with:
          artifacts: 'dist/*'
          bodyFile: '.github/release-body.md'
          draft: false
          name: Release ${{ github.ref_name }}
          tag: ${{ github.ref }}
          prerelease: false

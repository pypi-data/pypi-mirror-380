# coding: utf-8

"""
Notifications API

API for notification delivery system

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self


class BroadcastUpdate(BaseModel):
    """
    Update a broadcast
    """  # noqa: E501

    template_preferences: List[
        Annotated[List[Any], Field(min_length=2, max_length=2)]
    ] = Field(
        description="List of templates and whether the user wants to receive the notification"
    )
    discord_webhook_url: Optional[StrictStr] = None
    telegram_chat_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "template_preferences",
        "discord_webhook_url",
        "telegram_chat_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BroadcastUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if discord_webhook_url (nullable) is None
        # and model_fields_set contains the field
        if (
            self.discord_webhook_url is None
            and "discord_webhook_url" in self.model_fields_set
        ):
            _dict["discord_webhook_url"] = None

        # set to None if telegram_chat_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.telegram_chat_id is None
            and "telegram_chat_id" in self.model_fields_set
        ):
            _dict["telegram_chat_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BroadcastUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "template_preferences": obj.get("template_preferences"),
                "discord_webhook_url": obj.get("discord_webhook_url"),
                "telegram_chat_id": obj.get("telegram_chat_id"),
            }
        )
        return _obj

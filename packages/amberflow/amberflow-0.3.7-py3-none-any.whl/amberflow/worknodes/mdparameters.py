from typing import Union
from attrs import define, field, asdict

__all__ = (
    "AmberParameters",
    "MinRestrainedParameters",
    "MDRestrainedParameters",
    "MDParameters",
    "HeatingParameters",
    "AnhilateParameters",
    "LambdaParameters",
)


@define(frozen=True)
class AmberParameters:
    """
    A container for Amber simulation parameters. This class is immutable.
    """

    nstlim: int = field()
    dt: float = field(default=0.002)
    irest: int = field(default=1)
    ntx: int = field(default=5)
    ntxo: int = field(default=1)
    ntpr: int = field(default=1000)
    ntwr: int = field(default=500)
    ntwx: int = field(default=0)
    iwrap: int = field(default=0)
    ntc: int = field(default=2)
    tol: float = field(default=0.00001)
    ntf: int = field(default=2)
    nscm: int = field(default=1000)
    ntb: int = field(default=1)
    ntp: int = field(default=0)
    barostat: int = field(default=2)
    pres0: float = field(default=1.01325)
    taup: float = field(default=1)
    mcbarint: int = field(default=100)
    ntt: int = field(default=3)
    gamma_ln: float = field(default=5.0)
    temp0: int = field(default=298)
    tempi: int = field(default=298)
    ntr: int = field(default=0)
    restraint_wt: float = field(default=10.0)
    restraintmask: str = field(default="@CA,N,C,O")
    nmropt: int = field(default=0)
    istep1: int = field(default=100)
    istep2: int = field(default=300)
    value1: float = field(default=100)
    value2: float = field(default=298)
    cut: float = field(default=9.0)
    maxcyc: int = field(default=1000)
    ncyc: int = field(default=100)
    ntmin: int = field(default=1)
    ifsc: int = field(default=1)
    icfe: int = field(default=1)
    ifmbar: int = field(default=1)
    numexchg: int = field(default=0)
    bar_intervall: int = field(default=125)
    timask1: str = field(default=":1")
    timask2: str = field(default="")
    crgmask: str = field(default="")
    scmask1: str = field(default=":1")
    scmask2: str = field(default="")
    scalpha: float = field(default=0.5)
    scbeta: float = field(default=1.0)
    gti_cut: float = field(default=1)
    gti_output: int = field(default=1)
    gti_add_sc: int = field(default=25)
    gti_scale_beta: int = field(default=1)
    gti_cut_sc_on: int = field(default=8)
    gti_cut_sc_off: int = field(default=10)
    gti_lam_sch: int = field(default=1)
    gti_ele_sc: int = field(default=1)
    gti_vdw_sc: int = field(default=1)
    gti_cut_sc: int = field(default=2)
    gti_ele_exp: int = field(default=2)
    gti_vdw_exp: int = field(default=2)
    gti_syn_mass: int = field(default=0)
    gremd_acyc: int = field(default=1)
    gti_bat_sc: int = field(default=-1)

    def as_dict(self) -> dict[str, Union[str, int, float]]:
        return {str(k).upper(): v for k, v in asdict(self).items() if v is not None}


@define(frozen=True)
class MinRestrainedParameters(AmberParameters):
    nstlim: int = field(default=0, init=False)
    ntx: int = field(default=1)
    ntxo: int = field(default=1)
    ntpr: int = field(default=1000)
    ntwr: int = field(default=0)
    ntc: int = field(default=2)
    tol: float = field(default=0.00001)
    ntf: int = field(default=2)
    ntb: int = field(default=1)
    ntp: int = field(default=0)
    ntr: int = field(default=1)
    restraint_wt: float = field(default=50.0)
    restraintmask: str = field(default="@CA,N,C,O")
    cut: float = field(default=9.0)
    maxcyc: int = field(default=400)
    ncyc: int = field(default=50)
    ntmin: int = field(default=1)


@define(frozen=True)
class MDRestrainedParameters(AmberParameters):
    irest: int = field(default=1)
    ntx: int = field(default=5)
    ntxo: int = field(default=1)
    ntpr: int = field(default=1000)
    ntwr: int = field(default=500)
    ntwx: int = field(default=0)
    iwrap: int = field(default=0)
    nscm: int = field(default=0)
    ntb: int = field(default=2)
    ntp: int = field(default=1)
    barostat: int = field(default=2)
    mcbarint: int = field(default=100)
    ntt: int = field(default=3)
    gamma_ln: float = field(default=5.0)
    temp0: int = field(default=298)
    restraint_wt: float = field(default=50.0)
    restraintmask: str = field(default="@CA,N,C,O")
    cut: float = field(default=10.0)


@define(frozen=True)
class MDParameters(AmberParameters):
    irest: int = field(default=1)
    ntx: int = field(default=5)
    ntxo: int = field(default=1)
    ntpr: int = field(default=1000)
    ntwr: int = field(default=500)
    ntwx: int = field(default=0)
    iwrap: int = field(default=0)
    nscm: int = field(default=0)
    ntb: int = field(default=2)
    ntp: int = field(default=1)
    barostat: int = field(default=2)
    mcbarint: int = field(default=100)
    ntt: int = field(default=3)
    gamma_ln: float = field(default=5.0)
    temp0: int = field(default=298)
    cut: float = field(default=9.0)


@define(frozen=True)
class HeatingParameters(AmberParameters):
    dt: float = field(default=0.001)
    irest: int = field(default=0, init=False)
    ntx: int = field(default=1, init=False)
    ntxo: int = field(default=1)
    ntpr: int = field(default=250)
    ntwr: int = field(default=250)
    ntwx: int = field(default=250)
    iwrap: int = field(default=0)
    ntc: int = field(default=2)
    ntf: int = field(default=2)
    nscm: int = field(default=0)
    ntb: int = field(default=1)
    ntp: int = field(default=0)
    ntt: int = field(default=3)
    gamma_ln: float = field(default=1.0)
    temp0: int = field(default=298)
    tempi: int = field(default=298)
    ntr: int = field(default=0)
    restraint_wt: float = field(default=50.0)
    restraintmask: str = field(default="@CA,N,C,O")
    nmropt: int = field(default=0)
    istep1: int = field(default=0)
    istep2: int = field(init=False)
    value1: int = field(default=100)
    value2: int = field(default=298)
    cut: float = field(default=9.0)

    def __attrs_post_init__(self):
        # Using object.__setattr__ to bypass the frozen=True restriction
        object.__setattr__(self, "istep2", self.nstlim)
        object.__setattr__(self, "value1", self.tempi)
        object.__setattr__(self, "value2", self.temp0)


@define(frozen=True)
class AnhilateParameters(AmberParameters):
    nstlim: int = field(default=1, init=False)
    ntx: int = field(default=1)
    ntxo: int = field(default=1)
    ntpr: int = field(default=1000)
    ntwr: int = field(default=0)
    ntc: int = field(default=2)
    tol: float = field(default=0.00001)
    ntf: int = field(default=2)
    cut: float = field(default=10.0)
    maxcyc: int = field(default=5000)
    ntmin: int = field(default=2)
    restraint_wt: float = field(default=5.0)
    restraintmask: str = field(default="@CA,N,C,O")
    ifsc: int = field(default=1)
    icfe: int = field(default=1)
    clambda: float = field(default=0)
    timask1: str = field(default=":1")
    timask2: str = field(default="")
    crgmask: str = field(default="")
    scmask1: str = field(default=":1")
    scmask2: str = field(default="")
    scalpha: float = field(default=0.5)
    scbeta: float = field(default=1.0)
    gti_cut: float = field(default=1)
    gti_output: int = field(default=1)
    gti_add_sc: int = field(default=25)
    gti_scale_beta: int = field(default=1)
    gti_cut_sc: int = field(default=2)
    gti_cut_sc_on: int = field(default=8)
    gti_cut_sc_off: int = field(default=10)
    gti_lam_sch: int = field(default=1)
    gti_ele_sc: int = field(default=1)
    gti_vdw_sc: int = field(default=1)
    gti_ele_exp: int = field(default=2)
    gti_vdw_exp: int = field(default=2)
    gti_syn_mass: int = field(default=0)
    gti_bat_sc: int = field(default=-1)


@define(frozen=True)
class LambdaParameters(AmberParameters):
    dt: float = field(default=0.002)
    irest: int = field(default=1)
    ntx: int = field(default=5)
    ntxo: int = field(default=1)
    ntpr: int = field(default=125)
    ntwr: int = field(default=0)
    ntwx: int = field(default=0)
    temp0: int = field(default=298)
    tempi: int = field(default=298)
    ntc: int = field(default=2)
    tol: float = field(default=0.00001)
    ntf: int = field(default=2)
    cut: float = field(default=10.0)
    maxcyc: int = field(default=5000)
    ntmin: int = field(default=2)
    restraint_wt: float = field(default=5.0)
    restraintmask: str = field(default="@CA,N,C,O")
    ifsc: int = field(default=1)
    icfe: int = field(default=1)
    clambda: float = field(default=0)
    timask1: str = field(default=":1")
    timask2: str = field(default="")
    crgmask: str = field(default="")
    scmask1: str = field(default=":1")
    scmask2: str = field(default="")
    numexchg: int = field(default=10000)
    bar_intervall: int = field(default=125)
    scalpha: float = field(default=0.5)
    scbeta: float = field(default=1.0)
    gti_cut: float = field(default=1)
    gti_output: int = field(default=1)
    gti_add_sc: int = field(default=25)
    gti_scale_beta: int = field(default=1)
    gti_cut_sc_on: int = field(default=8)
    gti_cut_sc_off: int = field(default=10)
    gti_lam_sch: int = field(default=1)
    gti_ele_sc: int = field(default=1)
    gti_vdw_sc: int = field(default=1)
    gti_cut_sc: int = field(default=2)
    gti_ele_exp: int = field(default=2)
    gti_vdw_exp: int = field(default=2)
    gti_syn_mass: int = field(default=0)
    gremd_acyc: int = field(default=1)
    gti_bat_sc: int = field(default=-1)
    istep1: int = field(default=0, init=False)
    istep2: int = field(init=False)
    value1: int = field(default=100)
    value2: int = field(default=298)
    rmsd_type: int = field(default=3)
    rmsd_mask: str = field(default=":1")
    rmsd_strength: float = field(default=5.0)
    rmsd_ti: int = field(default=1)
    rmsd_mask1: str = field(default=":1")
    rmsd_strength1: float = field(default=5.0)
    rmsd_ti1: int = field(default=1)
    rmsd_mask2: str = field(default=":2")
    rmsd_strength2: float = field(default=5.0)
    rmsd_ti2: int = field(default=2)
    ntave: int = field(default=0)
    dynlmb: float = field(default=0.0)

    def __attrs_post_init__(self):
        object.__setattr__(self, "istep2", self.nstlim)
        object.__setattr__(self, "value1", self.tempi)
        object.__setattr__(self, "value2", self.temp0)

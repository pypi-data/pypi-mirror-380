# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('libfastdds.so.3.0.1')
if __package__ or '.' in __name__:
    from . import _fastdds_python
else:
    import _fastdds_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_SwigPyIterator

    def value(self):
        return _fastdds_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fastdds_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fastdds_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fastdds_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fastdds_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fastdds_python.SwigPyIterator_copy(self)

    def next(self):
        return _fastdds_python.SwigPyIterator_next(self)

    def __next__(self):
        return _fastdds_python.SwigPyIterator___next__(self)

    def previous(self):
        return _fastdds_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fastdds_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fastdds_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fastdds_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fastdds_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fastdds_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fastdds_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fastdds_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _fastdds_python:
_fastdds_python.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _fastdds_python.SHARED_PTR_DISOWN

def has_statistics():
    return _fastdds_python.has_statistics()
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.StringVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.StringVector___bool__(self)

    def __len__(self):
        return _fastdds_python.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.StringVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.StringVector_pop(self)

    def append(self, x):
        return _fastdds_python.StringVector_append(self, x)

    def empty(self):
        return _fastdds_python.StringVector_empty(self)

    def size(self):
        return _fastdds_python.StringVector_size(self)

    def swap(self, v):
        return _fastdds_python.StringVector_swap(self, v)

    def begin(self):
        return _fastdds_python.StringVector_begin(self)

    def end(self):
        return _fastdds_python.StringVector_end(self)

    def rbegin(self):
        return _fastdds_python.StringVector_rbegin(self)

    def rend(self):
        return _fastdds_python.StringVector_rend(self)

    def clear(self):
        return _fastdds_python.StringVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.StringVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.StringVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.StringVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.StringVector_swiginit(self, _fastdds_python.new_StringVector(*args))

    def push_back(self, x):
        return _fastdds_python.StringVector_push_back(self, x)

    def front(self):
        return _fastdds_python.StringVector_front(self)

    def back(self):
        return _fastdds_python.StringVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.StringVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.StringVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.StringVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.StringVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_StringVector

# Register StringVector in _fastdds_python:
_fastdds_python.StringVector_swigregister(StringVector)

FASTCDR_VERSION_MAJOR = _fastdds_python.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _fastdds_python.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _fastdds_python.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _fastdds_python.FASTCDR_VERSION_STR
HAVE_CXX11 = _fastdds_python.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _fastdds_python.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _fastdds_python.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _fastdds_python.FASTCDR_SIZEOF_LONG_DOUBLE
class nullopt_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        _fastdds_python.nullopt_t_swiginit(self, _fastdds_python.new_nullopt_t(arg2))
    __swig_destroy__ = _fastdds_python.delete_nullopt_t

# Register nullopt_t in _fastdds_python:
_fastdds_python.nullopt_t_swigregister(nullopt_t)

INTRAPROCESS_OFF = _fastdds_python.INTRAPROCESS_OFF
INTRAPROCESS_USER_DATA_ONLY = _fastdds_python.INTRAPROCESS_USER_DATA_ONLY
INTRAPROCESS_FULL = _fastdds_python.INTRAPROCESS_FULL
class LibrarySettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.LibrarySettings_swiginit(self, _fastdds_python.new_LibrarySettings())
    __swig_destroy__ = _fastdds_python.delete_LibrarySettings

    def __eq__(self, b):
        return _fastdds_python.LibrarySettings___eq__(self, b)
    intraprocess_delivery = property(_fastdds_python.LibrarySettings_intraprocess_delivery_get, _fastdds_python.LibrarySettings_intraprocess_delivery_set)

# Register LibrarySettings in _fastdds_python:
_fastdds_python.LibrarySettings_swigregister(LibrarySettings)
cvar = _fastdds_python.cvar
nullopt = cvar.nullopt

BIGEND = _fastdds_python.BIGEND
LITTLEEND = _fastdds_python.LITTLEEND
RELIABLE = _fastdds_python.RELIABLE
BEST_EFFORT = _fastdds_python.BEST_EFFORT
VOLATILE = _fastdds_python.VOLATILE
TRANSIENT_LOCAL = _fastdds_python.TRANSIENT_LOCAL
TRANSIENT = _fastdds_python.TRANSIENT
PERSISTENT = _fastdds_python.PERSISTENT
READER = _fastdds_python.READER
WRITER = _fastdds_python.WRITER
NO_KEY = _fastdds_python.NO_KEY
WITH_KEY = _fastdds_python.WITH_KEY
BIT0 = _fastdds_python.BIT0
BIT1 = _fastdds_python.BIT1
BIT2 = _fastdds_python.BIT2
BIT3 = _fastdds_python.BIT3
BIT4 = _fastdds_python.BIT4
BIT5 = _fastdds_python.BIT5
BIT6 = _fastdds_python.BIT6
BIT7 = _fastdds_python.BIT7
class ProtocolVersion_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_major = property(_fastdds_python.ProtocolVersion_t_m_major_get, _fastdds_python.ProtocolVersion_t_m_major_set)
    m_minor = property(_fastdds_python.ProtocolVersion_t_m_minor_get, _fastdds_python.ProtocolVersion_t_m_minor_set)

    def __init__(self, *args):
        _fastdds_python.ProtocolVersion_t_swiginit(self, _fastdds_python.new_ProtocolVersion_t(*args))

    def __eq__(self, v):
        return _fastdds_python.ProtocolVersion_t___eq__(self, v)

    def __ne__(self, v):
        return _fastdds_python.ProtocolVersion_t___ne__(self, v)
    __swig_destroy__ = _fastdds_python.delete_ProtocolVersion_t

# Register ProtocolVersion_t in _fastdds_python:
_fastdds_python.ProtocolVersion_t_swigregister(ProtocolVersion_t)
c_VendorId_Unknown = cvar.c_VendorId_Unknown
c_VendorId_eProsima = cvar.c_VendorId_eProsima
c_VendorId_rti_connext = cvar.c_VendorId_rti_connext
c_VendorId_opendds = cvar.c_VendorId_opendds
DEFAULT_ENDIAN = cvar.DEFAULT_ENDIAN

class RTPSTime_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.RTPSTime_t_swiginit(self, _fastdds_python.new_RTPSTime_t(*args))

    def to_ns(self):
        return _fastdds_python.RTPSTime_t_to_ns(self)

    def from_ns(self, nanosecs):
        return _fastdds_python.RTPSTime_t_from_ns(self, nanosecs)

    def seconds(self, *args):
        return _fastdds_python.RTPSTime_t_seconds(self, *args)

    def nanosec(self, *args):
        return _fastdds_python.RTPSTime_t_nanosec(self, *args)

    def fraction(self, *args):
        return _fastdds_python.RTPSTime_t_fraction(self, *args)

    def to_duration_t(self):
        return _fastdds_python.RTPSTime_t_to_duration_t(self)

    def from_duration_t(self, duration):
        return _fastdds_python.RTPSTime_t_from_duration_t(self, duration)

    @staticmethod
    def now(ret):
        return _fastdds_python.RTPSTime_t_now(ret)
    __swig_destroy__ = _fastdds_python.delete_RTPSTime_t

# Register RTPSTime_t in _fastdds_python:
_fastdds_python.RTPSTime_t_swigregister(RTPSTime_t)
c_ProtocolVersion_2_0 = cvar.c_ProtocolVersion_2_0
c_ProtocolVersion_2_1 = cvar.c_ProtocolVersion_2_1
c_ProtocolVersion_2_2 = cvar.c_ProtocolVersion_2_2
c_ProtocolVersion_2_3 = cvar.c_ProtocolVersion_2_3
c_ProtocolVersion = cvar.c_ProtocolVersion

def RTPSTime_t_now(ret):
    return _fastdds_python.RTPSTime_t_now(ret)

LOCATOR_KIND_INVALID = _fastdds_python.LOCATOR_KIND_INVALID
LOCATOR_PORT_INVALID = _fastdds_python.LOCATOR_PORT_INVALID
LOCATOR_KIND_RESERVED = _fastdds_python.LOCATOR_KIND_RESERVED
LOCATOR_KIND_UDPv4 = _fastdds_python.LOCATOR_KIND_UDPv4
LOCATOR_KIND_UDPv6 = _fastdds_python.LOCATOR_KIND_UDPv6
LOCATOR_KIND_TCPv4 = _fastdds_python.LOCATOR_KIND_TCPv4
LOCATOR_KIND_TCPv6 = _fastdds_python.LOCATOR_KIND_TCPv6
class Locator_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kind = property(_fastdds_python.Locator_t_kind_get, _fastdds_python.Locator_t_kind_set)
    port = property(_fastdds_python.Locator_t_port_get, _fastdds_python.Locator_t_port_set)
    address = property(_fastdds_python.Locator_t_address_get, _fastdds_python.Locator_t_address_set)

    def __init__(self, *args):
        _fastdds_python.Locator_t_swiginit(self, _fastdds_python.new_Locator_t(*args))

    def set_address(self, other):
        return _fastdds_python.Locator_t_set_address(self, other)

    def get_address(self, *args):
        return _fastdds_python.Locator_t_get_address(self, *args)

    def set_Invalid_Address(self):
        return _fastdds_python.Locator_t_set_Invalid_Address(self)

    def __eq__(self, other_locator):
        return _fastdds_python.Locator_t___eq__(self, other_locator)

    def __ne__(self, other_locator):
        return _fastdds_python.Locator_t___ne__(self, other_locator)
    __swig_destroy__ = _fastdds_python.delete_Locator_t

# Register Locator_t in _fastdds_python:
_fastdds_python.Locator_t_swigregister(Locator_t)
c_RTPSTimeInfinite = cvar.c_RTPSTimeInfinite
c_RTPSTimeZero = cvar.c_RTPSTimeZero
c_RTPSTimeInvalid = cvar.c_RTPSTimeInvalid


def IsAddressDefined(loc):
    return _fastdds_python.IsAddressDefined(loc)

def IsLocatorValid(loc):
    return _fastdds_python.IsLocatorValid(loc)
class Locators(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.Locators_swiginit(self, _fastdds_python.new_Locators(*args))

    def __ref__(self):
        return _fastdds_python.Locators___ref__(self)
    __swig_destroy__ = _fastdds_python.delete_Locators

# Register Locators in _fastdds_python:
_fastdds_python.Locators_swigregister(Locators)

class LocatorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_LocatorList

    def __init__(self, *args):
        _fastdds_python.LocatorList_swiginit(self, _fastdds_python.new_LocatorList(*args))

    def __eq__(self, locator_list):
        return _fastdds_python.LocatorList___eq__(self, locator_list)

    def __ne__(self, locator_list):
        return _fastdds_python.LocatorList___ne__(self, locator_list)

    def begin(self, *args):
        return _fastdds_python.LocatorList_begin(self, *args)

    def end(self, *args):
        return _fastdds_python.LocatorList_end(self, *args)

    def size(self):
        return _fastdds_python.LocatorList_size(self)

    def assign(self, list):
        return _fastdds_python.LocatorList_assign(self, list)

    def clear(self):
        return _fastdds_python.LocatorList_clear(self)

    def reserve(self, num):
        return _fastdds_python.LocatorList_reserve(self, num)

    def resize(self, num):
        return _fastdds_python.LocatorList_resize(self, num)

    def push_back(self, *args):
        return _fastdds_python.LocatorList_push_back(self, *args)

    def empty(self):
        return _fastdds_python.LocatorList_empty(self)

    def erase(self, loc):
        return _fastdds_python.LocatorList_erase(self, loc)

    def isValid(self):
        return _fastdds_python.LocatorList_isValid(self)

    def swap(self, locatorList):
        return _fastdds_python.LocatorList_swap(self, locatorList)

    def copy_to(self, locator_list):
        return _fastdds_python.LocatorList_copy_to(self, locator_list)

    def __len__(self):
        return _fastdds_python.LocatorList___len__(self)

    def __getitem__(self, i):
        return _fastdds_python.LocatorList___getitem__(self, i)

# Register LocatorList in _fastdds_python:
_fastdds_python.LocatorList_swigregister(LocatorList)

class BinaryPropertySeq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.BinaryPropertySeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.BinaryPropertySeq___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.BinaryPropertySeq___bool__(self)

    def __len__(self):
        return _fastdds_python.BinaryPropertySeq___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.BinaryPropertySeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.BinaryPropertySeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.BinaryPropertySeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.BinaryPropertySeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.BinaryPropertySeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.BinaryPropertySeq___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.BinaryPropertySeq_pop(self)

    def append(self, x):
        return _fastdds_python.BinaryPropertySeq_append(self, x)

    def empty(self):
        return _fastdds_python.BinaryPropertySeq_empty(self)

    def size(self):
        return _fastdds_python.BinaryPropertySeq_size(self)

    def swap(self, v):
        return _fastdds_python.BinaryPropertySeq_swap(self, v)

    def begin(self):
        return _fastdds_python.BinaryPropertySeq_begin(self)

    def end(self):
        return _fastdds_python.BinaryPropertySeq_end(self)

    def rbegin(self):
        return _fastdds_python.BinaryPropertySeq_rbegin(self)

    def rend(self):
        return _fastdds_python.BinaryPropertySeq_rend(self)

    def clear(self):
        return _fastdds_python.BinaryPropertySeq_clear(self)

    def get_allocator(self):
        return _fastdds_python.BinaryPropertySeq_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.BinaryPropertySeq_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.BinaryPropertySeq_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.BinaryPropertySeq_swiginit(self, _fastdds_python.new_BinaryPropertySeq(*args))

    def push_back(self, x):
        return _fastdds_python.BinaryPropertySeq_push_back(self, x)

    def front(self):
        return _fastdds_python.BinaryPropertySeq_front(self)

    def back(self):
        return _fastdds_python.BinaryPropertySeq_back(self)

    def assign(self, n, x):
        return _fastdds_python.BinaryPropertySeq_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.BinaryPropertySeq_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.BinaryPropertySeq_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.BinaryPropertySeq_reserve(self, n)

    def capacity(self):
        return _fastdds_python.BinaryPropertySeq_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_BinaryPropertySeq

# Register BinaryPropertySeq in _fastdds_python:
_fastdds_python.BinaryPropertySeq_swigregister(BinaryPropertySeq)

class BinaryProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.BinaryProperty_swiginit(self, _fastdds_python.new_BinaryProperty(*args))

    def __eq__(self, b):
        return _fastdds_python.BinaryProperty___eq__(self, b)

    def name(self, *args):
        return _fastdds_python.BinaryProperty_name(self, *args)

    def value(self, *args):
        return _fastdds_python.BinaryProperty_value(self, *args)

    def propagate(self, *args):
        return _fastdds_python.BinaryProperty_propagate(self, *args)
    __swig_destroy__ = _fastdds_python.delete_BinaryProperty

# Register BinaryProperty in _fastdds_python:
_fastdds_python.BinaryProperty_swigregister(BinaryProperty)

class BinaryPropertyHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def serialized_size(*args):
        return _fastdds_python.BinaryPropertyHelper_serialized_size(*args)

    def __init__(self):
        _fastdds_python.BinaryPropertyHelper_swiginit(self, _fastdds_python.new_BinaryPropertyHelper())
    __swig_destroy__ = _fastdds_python.delete_BinaryPropertyHelper

# Register BinaryPropertyHelper in _fastdds_python:
_fastdds_python.BinaryPropertyHelper_swigregister(BinaryPropertyHelper)

def BinaryPropertyHelper_serialized_size(*args):
    return _fastdds_python.BinaryPropertyHelper_serialized_size(*args)

class PropertySeq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.PropertySeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.PropertySeq___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.PropertySeq___bool__(self)

    def __len__(self):
        return _fastdds_python.PropertySeq___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.PropertySeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.PropertySeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.PropertySeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.PropertySeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.PropertySeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.PropertySeq___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.PropertySeq_pop(self)

    def append(self, x):
        return _fastdds_python.PropertySeq_append(self, x)

    def empty(self):
        return _fastdds_python.PropertySeq_empty(self)

    def size(self):
        return _fastdds_python.PropertySeq_size(self)

    def swap(self, v):
        return _fastdds_python.PropertySeq_swap(self, v)

    def begin(self):
        return _fastdds_python.PropertySeq_begin(self)

    def end(self):
        return _fastdds_python.PropertySeq_end(self)

    def rbegin(self):
        return _fastdds_python.PropertySeq_rbegin(self)

    def rend(self):
        return _fastdds_python.PropertySeq_rend(self)

    def clear(self):
        return _fastdds_python.PropertySeq_clear(self)

    def get_allocator(self):
        return _fastdds_python.PropertySeq_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.PropertySeq_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.PropertySeq_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.PropertySeq_swiginit(self, _fastdds_python.new_PropertySeq(*args))

    def push_back(self, x):
        return _fastdds_python.PropertySeq_push_back(self, x)

    def front(self):
        return _fastdds_python.PropertySeq_front(self)

    def back(self):
        return _fastdds_python.PropertySeq_back(self)

    def assign(self, n, x):
        return _fastdds_python.PropertySeq_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.PropertySeq_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.PropertySeq_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.PropertySeq_reserve(self, n)

    def capacity(self):
        return _fastdds_python.PropertySeq_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_PropertySeq

# Register PropertySeq in _fastdds_python:
_fastdds_python.PropertySeq_swigregister(PropertySeq)

class Property(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.Property_swiginit(self, _fastdds_python.new_Property(*args))

    def __eq__(self, b):
        return _fastdds_python.Property___eq__(self, b)

    def name(self, *args):
        return _fastdds_python.Property_name(self, *args)

    def value(self, *args):
        return _fastdds_python.Property_value(self, *args)

    def propagate(self, *args):
        return _fastdds_python.Property_propagate(self, *args)
    __swig_destroy__ = _fastdds_python.delete_Property

# Register Property in _fastdds_python:
_fastdds_python.Property_swigregister(Property)

class PropertyHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def serialized_size(*args):
        return _fastdds_python.PropertyHelper_serialized_size(*args)

    def __init__(self):
        _fastdds_python.PropertyHelper_swiginit(self, _fastdds_python.new_PropertyHelper())
    __swig_destroy__ = _fastdds_python.delete_PropertyHelper

# Register PropertyHelper in _fastdds_python:
_fastdds_python.PropertyHelper_swigregister(PropertyHelper)

def PropertyHelper_serialized_size(*args):
    return _fastdds_python.PropertyHelper_serialized_size(*args)

class PropertyParser(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PropertyParser_swiginit(self, _fastdds_python.new_PropertyParser())
    __swig_destroy__ = _fastdds_python.delete_PropertyParser

# Register PropertyParser in _fastdds_python:
_fastdds_python.PropertyParser_swigregister(PropertyParser)

ENTITYID_UNKNOWN = _fastdds_python.ENTITYID_UNKNOWN
ENTITYID_RTPSParticipant = _fastdds_python.ENTITYID_RTPSParticipant
ENTITYID_SEDP_BUILTIN_TOPIC_WRITER = _fastdds_python.ENTITYID_SEDP_BUILTIN_TOPIC_WRITER
ENTITYID_SEDP_BUILTIN_TOPIC_READER = _fastdds_python.ENTITYID_SEDP_BUILTIN_TOPIC_READER
ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER = _fastdds_python.ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER
ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER = _fastdds_python.ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER
ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER = _fastdds_python.ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER
ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER = _fastdds_python.ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER
ENTITYID_SPDP_BUILTIN_RTPSParticipant_WRITER = _fastdds_python.ENTITYID_SPDP_BUILTIN_RTPSParticipant_WRITER
ENTITYID_SPDP_BUILTIN_RTPSParticipant_READER = _fastdds_python.ENTITYID_SPDP_BUILTIN_RTPSParticipant_READER
ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_WRITER = _fastdds_python.ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_WRITER
ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_READER = _fastdds_python.ENTITYID_P2P_BUILTIN_RTPSParticipant_MESSAGE_READER
ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_WRITER = _fastdds_python.ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_WRITER
ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_READER = _fastdds_python.ENTITYID_P2P_BUILTIN_PARTICIPANT_STATELESS_READER
ENTITYID_TL_SVC_REQ_WRITER = _fastdds_python.ENTITYID_TL_SVC_REQ_WRITER
ENTITYID_TL_SVC_REQ_READER = _fastdds_python.ENTITYID_TL_SVC_REQ_READER
ENTITYID_TL_SVC_REPLY_WRITER = _fastdds_python.ENTITYID_TL_SVC_REPLY_WRITER
ENTITYID_TL_SVC_REPLY_READER = _fastdds_python.ENTITYID_TL_SVC_REPLY_READER
ENTITYID_DS_SERVER_VIRTUAL_WRITER = _fastdds_python.ENTITYID_DS_SERVER_VIRTUAL_WRITER
ENTITYID_DS_SERVER_VIRTUAL_READER = _fastdds_python.ENTITYID_DS_SERVER_VIRTUAL_READER
class EntityId_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = _fastdds_python.EntityId_t_size
    value = property(_fastdds_python.EntityId_t_value_get, _fastdds_python.EntityId_t_value_set)

    def __init__(self, *args):
        _fastdds_python.EntityId_t_swiginit(self, _fastdds_python.new_EntityId_t(*args))

    def reverse(self):
        return _fastdds_python.EntityId_t_reverse(self)

    def to_uint32(self):
        return _fastdds_python.EntityId_t_to_uint32(self)

    @staticmethod
    def unknown():
        return _fastdds_python.EntityId_t_unknown()

    def is_reader(self):
        return _fastdds_python.EntityId_t_is_reader(self)

    def is_writer(self):
        return _fastdds_python.EntityId_t_is_writer(self)

    def __lt__(self, other):
        return _fastdds_python.EntityId_t___lt__(self, other)

    @staticmethod
    def cmp(entity1, entity2):
        return _fastdds_python.EntityId_t_cmp(entity1, entity2)

    def __eq__(self, *args):
        return _fastdds_python.EntityId_t___eq__(self, *args)

    def __ne__(self, other):
        return _fastdds_python.EntityId_t___ne__(self, other)

    def __str__(self):
        return _fastdds_python.EntityId_t___str__(self)

    def __hash__(self):
        return _fastdds_python.EntityId_t___hash__(self)
    __swig_destroy__ = _fastdds_python.delete_EntityId_t

# Register EntityId_t in _fastdds_python:
_fastdds_python.EntityId_t_swigregister(EntityId_t)

def EntityId_t_unknown():
    return _fastdds_python.EntityId_t_unknown()

def EntityId_t_cmp(entity1, entity2):
    return _fastdds_python.EntityId_t_cmp(entity1, entity2)

class GuidPrefix_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = _fastdds_python.GuidPrefix_t_size
    value = property(_fastdds_python.GuidPrefix_t_value_get, _fastdds_python.GuidPrefix_t_value_set)

    def __init__(self):
        _fastdds_python.GuidPrefix_t_swiginit(self, _fastdds_python.new_GuidPrefix_t())

    def is_on_same_host_as(self, other_guid_prefix):
        return _fastdds_python.GuidPrefix_t_is_on_same_host_as(self, other_guid_prefix)

    def is_from_this_host(self):
        return _fastdds_python.GuidPrefix_t_is_from_this_host(self)

    def is_on_same_process_as(self, other_guid_prefix):
        return _fastdds_python.GuidPrefix_t_is_on_same_process_as(self, other_guid_prefix)

    def is_from_this_process(self):
        return _fastdds_python.GuidPrefix_t_is_from_this_process(self)

    @staticmethod
    def unknown():
        return _fastdds_python.GuidPrefix_t_unknown()

    def __eq__(self, prefix):
        return _fastdds_python.GuidPrefix_t___eq__(self, prefix)

    def __ne__(self, prefix):
        return _fastdds_python.GuidPrefix_t___ne__(self, prefix)

    def __lt__(self, prefix):
        return _fastdds_python.GuidPrefix_t___lt__(self, prefix)

    @staticmethod
    def cmp(prefix1, prefix2):
        return _fastdds_python.GuidPrefix_t_cmp(prefix1, prefix2)

    def __str__(self):
        return _fastdds_python.GuidPrefix_t___str__(self)

    def __hash__(self):
        return _fastdds_python.GuidPrefix_t___hash__(self)
    __swig_destroy__ = _fastdds_python.delete_GuidPrefix_t

# Register GuidPrefix_t in _fastdds_python:
_fastdds_python.GuidPrefix_t_swigregister(GuidPrefix_t)
c_EntityId_Unknown = cvar.c_EntityId_Unknown
c_EntityId_SPDPReader = cvar.c_EntityId_SPDPReader
c_EntityId_SPDPWriter = cvar.c_EntityId_SPDPWriter
c_EntityId_SEDPPubWriter = cvar.c_EntityId_SEDPPubWriter
c_EntityId_SEDPPubReader = cvar.c_EntityId_SEDPPubReader
c_EntityId_SEDPSubWriter = cvar.c_EntityId_SEDPSubWriter
c_EntityId_SEDPSubReader = cvar.c_EntityId_SEDPSubReader
c_EntityId_RTPSParticipant = cvar.c_EntityId_RTPSParticipant
c_EntityId_WriterLiveliness = cvar.c_EntityId_WriterLiveliness
c_EntityId_ReaderLiveliness = cvar.c_EntityId_ReaderLiveliness
participant_stateless_message_writer_entity_id = cvar.participant_stateless_message_writer_entity_id
participant_stateless_message_reader_entity_id = cvar.participant_stateless_message_reader_entity_id
c_EntityId_TypeLookup_request_writer = cvar.c_EntityId_TypeLookup_request_writer
c_EntityId_TypeLookup_request_reader = cvar.c_EntityId_TypeLookup_request_reader
c_EntityId_TypeLookup_reply_writer = cvar.c_EntityId_TypeLookup_reply_writer
c_EntityId_TypeLookup_reply_reader = cvar.c_EntityId_TypeLookup_reply_reader
ds_server_virtual_writer = cvar.ds_server_virtual_writer
ds_server_virtual_reader = cvar.ds_server_virtual_reader

def GuidPrefix_t_unknown():
    return _fastdds_python.GuidPrefix_t_unknown()

def GuidPrefix_t_cmp(prefix1, prefix2):
    return _fastdds_python.GuidPrefix_t_cmp(prefix1, prefix2)

class GUID_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    guidPrefix = property(_fastdds_python.GUID_t_guidPrefix_get, _fastdds_python.GUID_t_guidPrefix_set)
    entityId = property(_fastdds_python.GUID_t_entityId_get, _fastdds_python.GUID_t_entityId_set)

    def __init__(self, *args):
        _fastdds_python.GUID_t_swiginit(self, _fastdds_python.new_GUID_t(*args))

    def is_on_same_host_as(self, other_guid):
        return _fastdds_python.GUID_t_is_on_same_host_as(self, other_guid)

    def is_from_this_host(self):
        return _fastdds_python.GUID_t_is_from_this_host(self)

    def is_on_same_process_as(self, other_guid):
        return _fastdds_python.GUID_t_is_on_same_process_as(self, other_guid)

    def is_from_this_process(self):
        return _fastdds_python.GUID_t_is_from_this_process(self)

    def is_builtin(self):
        return _fastdds_python.GUID_t_is_builtin(self)

    @staticmethod
    def unknown():
        return _fastdds_python.GUID_t_unknown()

    def get_instance_handle(self):
        return _fastdds_python.GUID_t_get_instance_handle(self)

    def __eq__(self, other):
        return _fastdds_python.GUID_t___eq__(self, other)

    def __ne__(self, other):
        return _fastdds_python.GUID_t___ne__(self, other)

    def __lt__(self, other):
        return _fastdds_python.GUID_t___lt__(self, other)

    def __str__(self):
        return _fastdds_python.GUID_t___str__(self)

    def __hash__(self):
        return _fastdds_python.GUID_t___hash__(self)
    __swig_destroy__ = _fastdds_python.delete_GUID_t

# Register GUID_t in _fastdds_python:
_fastdds_python.GUID_t_swigregister(GUID_t)
c_GuidPrefix_Unknown = cvar.c_GuidPrefix_Unknown

def GUID_t_unknown():
    return _fastdds_python.GUID_t_unknown()

class PortParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PortParameters_swiginit(self, _fastdds_python.new_PortParameters())
    __swig_destroy__ = _fastdds_python.delete_PortParameters

    def __eq__(self, b):
        return _fastdds_python.PortParameters___eq__(self, b)

    def getMulticastPort(self, domainId):
        return _fastdds_python.PortParameters_getMulticastPort(self, domainId)

    def getUnicastPort(self, domainId, RTPSParticipantID):
        return _fastdds_python.PortParameters_getUnicastPort(self, domainId, RTPSParticipantID)
    portBase = property(_fastdds_python.PortParameters_portBase_get, _fastdds_python.PortParameters_portBase_set)
    domainIDGain = property(_fastdds_python.PortParameters_domainIDGain_get, _fastdds_python.PortParameters_domainIDGain_set)
    participantIDGain = property(_fastdds_python.PortParameters_participantIDGain_get, _fastdds_python.PortParameters_participantIDGain_set)
    offsetd0 = property(_fastdds_python.PortParameters_offsetd0_get, _fastdds_python.PortParameters_offsetd0_set)
    offsetd1 = property(_fastdds_python.PortParameters_offsetd1_get, _fastdds_python.PortParameters_offsetd1_set)
    offsetd2 = property(_fastdds_python.PortParameters_offsetd2_get, _fastdds_python.PortParameters_offsetd2_set)
    offsetd3 = property(_fastdds_python.PortParameters_offsetd3_get, _fastdds_python.PortParameters_offsetd3_set)

# Register PortParameters in _fastdds_python:
_fastdds_python.PortParameters_swigregister(PortParameters)
c_Guid_Unknown = cvar.c_Guid_Unknown

class InstanceHandleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.InstanceHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.InstanceHandleVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.InstanceHandleVector___bool__(self)

    def __len__(self):
        return _fastdds_python.InstanceHandleVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.InstanceHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.InstanceHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.InstanceHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.InstanceHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.InstanceHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.InstanceHandleVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.InstanceHandleVector_pop(self)

    def append(self, x):
        return _fastdds_python.InstanceHandleVector_append(self, x)

    def empty(self):
        return _fastdds_python.InstanceHandleVector_empty(self)

    def size(self):
        return _fastdds_python.InstanceHandleVector_size(self)

    def swap(self, v):
        return _fastdds_python.InstanceHandleVector_swap(self, v)

    def begin(self):
        return _fastdds_python.InstanceHandleVector_begin(self)

    def end(self):
        return _fastdds_python.InstanceHandleVector_end(self)

    def rbegin(self):
        return _fastdds_python.InstanceHandleVector_rbegin(self)

    def rend(self):
        return _fastdds_python.InstanceHandleVector_rend(self)

    def clear(self):
        return _fastdds_python.InstanceHandleVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.InstanceHandleVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.InstanceHandleVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.InstanceHandleVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.InstanceHandleVector_swiginit(self, _fastdds_python.new_InstanceHandleVector(*args))

    def push_back(self, x):
        return _fastdds_python.InstanceHandleVector_push_back(self, x)

    def front(self):
        return _fastdds_python.InstanceHandleVector_front(self)

    def back(self):
        return _fastdds_python.InstanceHandleVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.InstanceHandleVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.InstanceHandleVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.InstanceHandleVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.InstanceHandleVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.InstanceHandleVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_InstanceHandleVector

# Register InstanceHandleVector in _fastdds_python:
_fastdds_python.InstanceHandleVector_swigregister(InstanceHandleVector)

class InstanceHandleValue_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def write_pointer_cast(self):
        return _fastdds_python.InstanceHandleValue_t_write_pointer_cast(self)

    def read_pointer_cast(self):
        return _fastdds_python.InstanceHandleValue_t_read_pointer_cast(self)

    def has_been_set(self):
        return _fastdds_python.InstanceHandleValue_t_has_been_set(self)

    def clear(self):
        return _fastdds_python.InstanceHandleValue_t_clear(self)

    def __eq__(self, other):
        return _fastdds_python.InstanceHandleValue_t___eq__(self, other)

    def __lt__(self, other):
        return _fastdds_python.InstanceHandleValue_t___lt__(self, other)

    def __init__(self):
        _fastdds_python.InstanceHandleValue_t_swiginit(self, _fastdds_python.new_InstanceHandleValue_t())
    __swig_destroy__ = _fastdds_python.delete_InstanceHandleValue_t

# Register InstanceHandleValue_t in _fastdds_python:
_fastdds_python.InstanceHandleValue_t_swigregister(InstanceHandleValue_t)
RTPS_KEY_HASH_SIZE = cvar.RTPS_KEY_HASH_SIZE

class InstanceHandle_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_fastdds_python.InstanceHandle_t_value_get, _fastdds_python.InstanceHandle_t_value_set)

    def __init__(self, *args):
        _fastdds_python.InstanceHandle_t_swiginit(self, _fastdds_python.new_InstanceHandle_t(*args))

    def isDefined(self):
        return _fastdds_python.InstanceHandle_t_isDefined(self)

    def clear(self):
        return _fastdds_python.InstanceHandle_t_clear(self)

    def get_guid(self):
        return _fastdds_python.InstanceHandle_t_get_guid(self)

    def __eq__(self, other):
        return _fastdds_python.InstanceHandle_t___eq__(self, other)

    def __ne__(self, other):
        return _fastdds_python.InstanceHandle_t___ne__(self, other)

    def __str__(self):
        return _fastdds_python.InstanceHandle_t___str__(self)

    def __hash__(self):
        return _fastdds_python.InstanceHandle_t___hash__(self)
    __swig_destroy__ = _fastdds_python.delete_InstanceHandle_t

# Register InstanceHandle_t in _fastdds_python:
_fastdds_python.InstanceHandle_t_swigregister(InstanceHandle_t)


def iHandle2GUID(*args):
    return _fastdds_python.iHandle2GUID(*args)
class ResourceLimitedContainerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.ResourceLimitedContainerConfig_swiginit(self, _fastdds_python.new_ResourceLimitedContainerConfig(*args))
    initial = property(_fastdds_python.ResourceLimitedContainerConfig_initial_get, _fastdds_python.ResourceLimitedContainerConfig_initial_set)
    maximum = property(_fastdds_python.ResourceLimitedContainerConfig_maximum_get, _fastdds_python.ResourceLimitedContainerConfig_maximum_set)
    increment = property(_fastdds_python.ResourceLimitedContainerConfig_increment_get, _fastdds_python.ResourceLimitedContainerConfig_increment_set)

    @staticmethod
    def fixed_size_configuration(size):
        return _fastdds_python.ResourceLimitedContainerConfig_fixed_size_configuration(size)

    @staticmethod
    def dynamic_allocation_configuration(increment=1):
        return _fastdds_python.ResourceLimitedContainerConfig_dynamic_allocation_configuration(increment)
    __swig_destroy__ = _fastdds_python.delete_ResourceLimitedContainerConfig

# Register ResourceLimitedContainerConfig in _fastdds_python:
_fastdds_python.ResourceLimitedContainerConfig_swigregister(ResourceLimitedContainerConfig)
c_InstanceHandle_Unknown = cvar.c_InstanceHandle_Unknown

def ResourceLimitedContainerConfig_fixed_size_configuration(size):
    return _fastdds_python.ResourceLimitedContainerConfig_fixed_size_configuration(size)

def ResourceLimitedContainerConfig_dynamic_allocation_configuration(increment=1):
    return _fastdds_python.ResourceLimitedContainerConfig_dynamic_allocation_configuration(increment)


def __eq__(lhs, rhs):
    return _fastdds_python.__eq__(lhs, rhs)
PREALLOCATED_MEMORY_MODE = _fastdds_python.PREALLOCATED_MEMORY_MODE
PREALLOCATED_WITH_REALLOC_MEMORY_MODE = _fastdds_python.PREALLOCATED_WITH_REALLOC_MEMORY_MODE
DYNAMIC_RESERVE_MEMORY_MODE = _fastdds_python.DYNAMIC_RESERVE_MEMORY_MODE
DYNAMIC_REUSABLE_MEMORY_MODE = _fastdds_python.DYNAMIC_REUSABLE_MEMORY_MODE
class RemoteLocatorsAllocationAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _fastdds_python.RemoteLocatorsAllocationAttributes___eq__(self, b)
    max_unicast_locators = property(_fastdds_python.RemoteLocatorsAllocationAttributes_max_unicast_locators_get, _fastdds_python.RemoteLocatorsAllocationAttributes_max_unicast_locators_set)
    max_multicast_locators = property(_fastdds_python.RemoteLocatorsAllocationAttributes_max_multicast_locators_get, _fastdds_python.RemoteLocatorsAllocationAttributes_max_multicast_locators_set)

    def __init__(self):
        _fastdds_python.RemoteLocatorsAllocationAttributes_swiginit(self, _fastdds_python.new_RemoteLocatorsAllocationAttributes())
    __swig_destroy__ = _fastdds_python.delete_RemoteLocatorsAllocationAttributes

# Register RemoteLocatorsAllocationAttributes in _fastdds_python:
_fastdds_python.RemoteLocatorsAllocationAttributes_swigregister(RemoteLocatorsAllocationAttributes)

class SendBuffersAllocationAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _fastdds_python.SendBuffersAllocationAttributes___eq__(self, b)
    preallocated_number = property(_fastdds_python.SendBuffersAllocationAttributes_preallocated_number_get, _fastdds_python.SendBuffersAllocationAttributes_preallocated_number_set)
    dynamic = property(_fastdds_python.SendBuffersAllocationAttributes_dynamic_get, _fastdds_python.SendBuffersAllocationAttributes_dynamic_set)
    network_buffers_config = property(_fastdds_python.SendBuffersAllocationAttributes_network_buffers_config_get, _fastdds_python.SendBuffersAllocationAttributes_network_buffers_config_set)

    def __init__(self):
        _fastdds_python.SendBuffersAllocationAttributes_swiginit(self, _fastdds_python.new_SendBuffersAllocationAttributes())
    __swig_destroy__ = _fastdds_python.delete_SendBuffersAllocationAttributes

# Register SendBuffersAllocationAttributes in _fastdds_python:
_fastdds_python.SendBuffersAllocationAttributes_swigregister(SendBuffersAllocationAttributes)

class VariableLengthDataLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _fastdds_python.VariableLengthDataLimits___eq__(self, b)
    max_properties = property(_fastdds_python.VariableLengthDataLimits_max_properties_get, _fastdds_python.VariableLengthDataLimits_max_properties_set)
    max_user_data = property(_fastdds_python.VariableLengthDataLimits_max_user_data_get, _fastdds_python.VariableLengthDataLimits_max_user_data_set)
    max_partitions = property(_fastdds_python.VariableLengthDataLimits_max_partitions_get, _fastdds_python.VariableLengthDataLimits_max_partitions_set)
    max_datasharing_domains = property(_fastdds_python.VariableLengthDataLimits_max_datasharing_domains_get, _fastdds_python.VariableLengthDataLimits_max_datasharing_domains_set)

    def __init__(self):
        _fastdds_python.VariableLengthDataLimits_swiginit(self, _fastdds_python.new_VariableLengthDataLimits())
    __swig_destroy__ = _fastdds_python.delete_VariableLengthDataLimits

# Register VariableLengthDataLimits in _fastdds_python:
_fastdds_python.VariableLengthDataLimits_swigregister(VariableLengthDataLimits)

class RTPSParticipantAllocationAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    locators = property(_fastdds_python.RTPSParticipantAllocationAttributes_locators_get, _fastdds_python.RTPSParticipantAllocationAttributes_locators_set)
    participants = property(_fastdds_python.RTPSParticipantAllocationAttributes_participants_get, _fastdds_python.RTPSParticipantAllocationAttributes_participants_set)
    readers = property(_fastdds_python.RTPSParticipantAllocationAttributes_readers_get, _fastdds_python.RTPSParticipantAllocationAttributes_readers_set)
    writers = property(_fastdds_python.RTPSParticipantAllocationAttributes_writers_get, _fastdds_python.RTPSParticipantAllocationAttributes_writers_set)
    send_buffers = property(_fastdds_python.RTPSParticipantAllocationAttributes_send_buffers_get, _fastdds_python.RTPSParticipantAllocationAttributes_send_buffers_set)
    data_limits = property(_fastdds_python.RTPSParticipantAllocationAttributes_data_limits_get, _fastdds_python.RTPSParticipantAllocationAttributes_data_limits_set)
    content_filter = property(_fastdds_python.RTPSParticipantAllocationAttributes_content_filter_get, _fastdds_python.RTPSParticipantAllocationAttributes_content_filter_set)

    def total_readers(self):
        return _fastdds_python.RTPSParticipantAllocationAttributes_total_readers(self)

    def total_writers(self):
        return _fastdds_python.RTPSParticipantAllocationAttributes_total_writers(self)

    def __eq__(self, b):
        return _fastdds_python.RTPSParticipantAllocationAttributes___eq__(self, b)

    def __init__(self):
        _fastdds_python.RTPSParticipantAllocationAttributes_swiginit(self, _fastdds_python.new_RTPSParticipantAllocationAttributes())
    __swig_destroy__ = _fastdds_python.delete_RTPSParticipantAllocationAttributes

# Register RTPSParticipantAllocationAttributes in _fastdds_python:
_fastdds_python.RTPSParticipantAllocationAttributes_swigregister(RTPSParticipantAllocationAttributes)

class ThreadSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scheduling_policy = property(_fastdds_python.ThreadSettings_scheduling_policy_get, _fastdds_python.ThreadSettings_scheduling_policy_set)
    priority = property(_fastdds_python.ThreadSettings_priority_get, _fastdds_python.ThreadSettings_priority_set)
    affinity = property(_fastdds_python.ThreadSettings_affinity_get, _fastdds_python.ThreadSettings_affinity_set)
    stack_size = property(_fastdds_python.ThreadSettings_stack_size_get, _fastdds_python.ThreadSettings_stack_size_set)

    def __eq__(self, rhs):
        return _fastdds_python.ThreadSettings___eq__(self, rhs)

    def __ne__(self, rhs):
        return _fastdds_python.ThreadSettings___ne__(self, rhs)

    def __init__(self):
        _fastdds_python.ThreadSettings_swiginit(self, _fastdds_python.new_ThreadSettings())
    __swig_destroy__ = _fastdds_python.delete_ThreadSettings

# Register ThreadSettings in _fastdds_python:
_fastdds_python.ThreadSettings_swigregister(ThreadSettings)
c_default_RTPSParticipantAllocationAttributes = cvar.c_default_RTPSParticipantAllocationAttributes

FlowControllerSchedulerPolicy_FIFO = _fastdds_python.FlowControllerSchedulerPolicy_FIFO
FlowControllerSchedulerPolicy_ROUND_ROBIN = _fastdds_python.FlowControllerSchedulerPolicy_ROUND_ROBIN
FlowControllerSchedulerPolicy_HIGH_PRIORITY = _fastdds_python.FlowControllerSchedulerPolicy_HIGH_PRIORITY
FlowControllerSchedulerPolicy_PRIORITY_WITH_RESERVATION = _fastdds_python.FlowControllerSchedulerPolicy_PRIORITY_WITH_RESERVATION
class FlowControllerDescriptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scheduler = property(_fastdds_python.FlowControllerDescriptor_scheduler_get, _fastdds_python.FlowControllerDescriptor_scheduler_set)
    max_bytes_per_period = property(_fastdds_python.FlowControllerDescriptor_max_bytes_per_period_get, _fastdds_python.FlowControllerDescriptor_max_bytes_per_period_set)
    period_ms = property(_fastdds_python.FlowControllerDescriptor_period_ms_get, _fastdds_python.FlowControllerDescriptor_period_ms_set)
    sender_thread = property(_fastdds_python.FlowControllerDescriptor_sender_thread_get, _fastdds_python.FlowControllerDescriptor_sender_thread_set)

    def __init__(self):
        _fastdds_python.FlowControllerDescriptor_swiginit(self, _fastdds_python.new_FlowControllerDescriptor())
    name = property(_fastdds_python.FlowControllerDescriptor_name_get, _fastdds_python.FlowControllerDescriptor_name_set)
    __swig_destroy__ = _fastdds_python.delete_FlowControllerDescriptor

# Register FlowControllerDescriptor in _fastdds_python:
_fastdds_python.FlowControllerDescriptor_swigregister(FlowControllerDescriptor)

class PropertyPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.PropertyPolicy_swiginit(self, _fastdds_python.new_PropertyPolicy(*args))

    def __eq__(self, b):
        return _fastdds_python.PropertyPolicy___eq__(self, b)

    def __ne__(self, b):
        return _fastdds_python.PropertyPolicy___ne__(self, b)

    def properties(self, *args):
        return _fastdds_python.PropertyPolicy_properties(self, *args)

    def binary_properties(self, *args):
        return _fastdds_python.PropertyPolicy_binary_properties(self, *args)
    __swig_destroy__ = _fastdds_python.delete_PropertyPolicy

# Register PropertyPolicy in _fastdds_python:
_fastdds_python.PropertyPolicy_swigregister(PropertyPolicy)

class ParticipantType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SIMPLE = _fastdds_python.ParticipantType_SIMPLE
    SERVER = _fastdds_python.ParticipantType_SERVER
    CLIENT = _fastdds_python.ParticipantType_CLIENT
    SUPER_CLIENT = _fastdds_python.ParticipantType_SUPER_CLIENT
    BACKUP = _fastdds_python.ParticipantType_BACKUP
    NONE = _fastdds_python.ParticipantType_NONE
    EXTERNAL = _fastdds_python.ParticipantType_EXTERNAL
    UNKNOWN = _fastdds_python.ParticipantType_UNKNOWN

    def __init__(self):
        _fastdds_python.ParticipantType_swiginit(self, _fastdds_python.new_ParticipantType())
    __swig_destroy__ = _fastdds_python.delete_ParticipantType

# Register ParticipantType in _fastdds_python:
_fastdds_python.ParticipantType_swigregister(ParticipantType)

DiscoveryProtocol_NONE = _fastdds_python.DiscoveryProtocol_NONE
DiscoveryProtocol_SIMPLE = _fastdds_python.DiscoveryProtocol_SIMPLE
DiscoveryProtocol_EXTERNAL = _fastdds_python.DiscoveryProtocol_EXTERNAL
DiscoveryProtocol_CLIENT = _fastdds_python.DiscoveryProtocol_CLIENT
DiscoveryProtocol_SERVER = _fastdds_python.DiscoveryProtocol_SERVER
DiscoveryProtocol_BACKUP = _fastdds_python.DiscoveryProtocol_BACKUP
DiscoveryProtocol_SUPER_CLIENT = _fastdds_python.DiscoveryProtocol_SUPER_CLIENT

def get_server_client_default_guidPrefix(id, guid):
    return _fastdds_python.get_server_client_default_guidPrefix(id, guid)
NO_FILTER = _fastdds_python.NO_FILTER
FILTER_DIFFERENT_HOST = _fastdds_python.FILTER_DIFFERENT_HOST
FILTER_DIFFERENT_PROCESS = _fastdds_python.FILTER_DIFFERENT_PROCESS
FILTER_SAME_PROCESS = _fastdds_python.FILTER_SAME_PROCESS
BUILTIN_DATA_MAX_SIZE = _fastdds_python.BUILTIN_DATA_MAX_SIZE
class PDPFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreatePDPInstance = property(_fastdds_python.PDPFactory_CreatePDPInstance_get, _fastdds_python.PDPFactory_CreatePDPInstance_set)
    ReleasePDPInstance = property(_fastdds_python.PDPFactory_ReleasePDPInstance_get, _fastdds_python.PDPFactory_ReleasePDPInstance_set)

    def __eq__(self, e):
        return _fastdds_python.PDPFactory___eq__(self, e)

    def __init__(self):
        _fastdds_python.PDPFactory_swiginit(self, _fastdds_python.new_PDPFactory())
    __swig_destroy__ = _fastdds_python.delete_PDPFactory

# Register PDPFactory in _fastdds_python:
_fastdds_python.PDPFactory_swigregister(PDPFactory)
DEFAULT_ROS2_SERVER_PORT = cvar.DEFAULT_ROS2_SERVER_PORT
DEFAULT_TCP_SERVER_PORT = cvar.DEFAULT_TCP_SERVER_PORT

class SimpleEDPAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    use_PublicationWriterANDSubscriptionReader = property(_fastdds_python.SimpleEDPAttributes_use_PublicationWriterANDSubscriptionReader_get, _fastdds_python.SimpleEDPAttributes_use_PublicationWriterANDSubscriptionReader_set)
    use_PublicationReaderANDSubscriptionWriter = property(_fastdds_python.SimpleEDPAttributes_use_PublicationReaderANDSubscriptionWriter_get, _fastdds_python.SimpleEDPAttributes_use_PublicationReaderANDSubscriptionWriter_set)

    def __init__(self):
        _fastdds_python.SimpleEDPAttributes_swiginit(self, _fastdds_python.new_SimpleEDPAttributes())

    def __eq__(self, b):
        return _fastdds_python.SimpleEDPAttributes___eq__(self, b)
    __swig_destroy__ = _fastdds_python.delete_SimpleEDPAttributes

# Register SimpleEDPAttributes in _fastdds_python:
_fastdds_python.SimpleEDPAttributes_swigregister(SimpleEDPAttributes)

class InitialAnnouncementConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_fastdds_python.InitialAnnouncementConfig_count_get, _fastdds_python.InitialAnnouncementConfig_count_set)
    period = property(_fastdds_python.InitialAnnouncementConfig_period_get, _fastdds_python.InitialAnnouncementConfig_period_set)

    def __eq__(self, b):
        return _fastdds_python.InitialAnnouncementConfig___eq__(self, b)

    def __init__(self):
        _fastdds_python.InitialAnnouncementConfig_swiginit(self, _fastdds_python.new_InitialAnnouncementConfig())
    __swig_destroy__ = _fastdds_python.delete_InitialAnnouncementConfig

# Register InitialAnnouncementConfig in _fastdds_python:
_fastdds_python.InitialAnnouncementConfig_swigregister(InitialAnnouncementConfig)

class DiscoverySettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    discoveryProtocol = property(_fastdds_python.DiscoverySettings_discoveryProtocol_get, _fastdds_python.DiscoverySettings_discoveryProtocol_set)
    use_SIMPLE_EndpointDiscoveryProtocol = property(_fastdds_python.DiscoverySettings_use_SIMPLE_EndpointDiscoveryProtocol_get, _fastdds_python.DiscoverySettings_use_SIMPLE_EndpointDiscoveryProtocol_set)
    use_STATIC_EndpointDiscoveryProtocol = property(_fastdds_python.DiscoverySettings_use_STATIC_EndpointDiscoveryProtocol_get, _fastdds_python.DiscoverySettings_use_STATIC_EndpointDiscoveryProtocol_set)
    leaseDuration = property(_fastdds_python.DiscoverySettings_leaseDuration_get, _fastdds_python.DiscoverySettings_leaseDuration_set)
    leaseDuration_announcementperiod = property(_fastdds_python.DiscoverySettings_leaseDuration_announcementperiod_get, _fastdds_python.DiscoverySettings_leaseDuration_announcementperiod_set)
    initial_announcements = property(_fastdds_python.DiscoverySettings_initial_announcements_get, _fastdds_python.DiscoverySettings_initial_announcements_set)
    m_simpleEDP = property(_fastdds_python.DiscoverySettings_m_simpleEDP_get, _fastdds_python.DiscoverySettings_m_simpleEDP_set)
    m_PDPfactory = property(_fastdds_python.DiscoverySettings_m_PDPfactory_get, _fastdds_python.DiscoverySettings_m_PDPfactory_set)
    discoveryServer_client_syncperiod = property(_fastdds_python.DiscoverySettings_discoveryServer_client_syncperiod_get, _fastdds_python.DiscoverySettings_discoveryServer_client_syncperiod_set)
    m_DiscoveryServers = property(_fastdds_python.DiscoverySettings_m_DiscoveryServers_get, _fastdds_python.DiscoverySettings_m_DiscoveryServers_set)
    ignoreParticipantFlags = property(_fastdds_python.DiscoverySettings_ignoreParticipantFlags_get, _fastdds_python.DiscoverySettings_ignoreParticipantFlags_set)

    def __init__(self):
        _fastdds_python.DiscoverySettings_swiginit(self, _fastdds_python.new_DiscoverySettings())

    def __eq__(self, b):
        return _fastdds_python.DiscoverySettings___eq__(self, b)

    def static_edp_xml_config(self, *args):
        return _fastdds_python.DiscoverySettings_static_edp_xml_config(self, *args)
    __swig_destroy__ = _fastdds_python.delete_DiscoverySettings

# Register DiscoverySettings in _fastdds_python:
_fastdds_python.DiscoverySettings_swigregister(DiscoverySettings)

class BuiltinAttributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    discovery_config = property(_fastdds_python.BuiltinAttributes_discovery_config_get, _fastdds_python.BuiltinAttributes_discovery_config_set)
    use_WriterLivelinessProtocol = property(_fastdds_python.BuiltinAttributes_use_WriterLivelinessProtocol_get, _fastdds_python.BuiltinAttributes_use_WriterLivelinessProtocol_set)
    network_configuration = property(_fastdds_python.BuiltinAttributes_network_configuration_get, _fastdds_python.BuiltinAttributes_network_configuration_set)
    metatrafficUnicastLocatorList = property(_fastdds_python.BuiltinAttributes_metatrafficUnicastLocatorList_get, _fastdds_python.BuiltinAttributes_metatrafficUnicastLocatorList_set)
    metatrafficMulticastLocatorList = property(_fastdds_python.BuiltinAttributes_metatrafficMulticastLocatorList_get, _fastdds_python.BuiltinAttributes_metatrafficMulticastLocatorList_set)
    metatraffic_external_unicast_locators = property(_fastdds_python.BuiltinAttributes_metatraffic_external_unicast_locators_get, _fastdds_python.BuiltinAttributes_metatraffic_external_unicast_locators_set)
    initialPeersList = property(_fastdds_python.BuiltinAttributes_initialPeersList_get, _fastdds_python.BuiltinAttributes_initialPeersList_set)
    readerHistoryMemoryPolicy = property(_fastdds_python.BuiltinAttributes_readerHistoryMemoryPolicy_get, _fastdds_python.BuiltinAttributes_readerHistoryMemoryPolicy_set)
    readerPayloadSize = property(_fastdds_python.BuiltinAttributes_readerPayloadSize_get, _fastdds_python.BuiltinAttributes_readerPayloadSize_set)
    writerHistoryMemoryPolicy = property(_fastdds_python.BuiltinAttributes_writerHistoryMemoryPolicy_get, _fastdds_python.BuiltinAttributes_writerHistoryMemoryPolicy_set)
    writerPayloadSize = property(_fastdds_python.BuiltinAttributes_writerPayloadSize_get, _fastdds_python.BuiltinAttributes_writerPayloadSize_set)
    mutation_tries = property(_fastdds_python.BuiltinAttributes_mutation_tries_get, _fastdds_python.BuiltinAttributes_mutation_tries_set)
    avoid_builtin_multicast = property(_fastdds_python.BuiltinAttributes_avoid_builtin_multicast_get, _fastdds_python.BuiltinAttributes_avoid_builtin_multicast_set)

    def __init__(self):
        _fastdds_python.BuiltinAttributes_swiginit(self, _fastdds_python.new_BuiltinAttributes())
    __swig_destroy__ = _fastdds_python.delete_BuiltinAttributes

    def __eq__(self, b):
        return _fastdds_python.BuiltinAttributes___eq__(self, b)

# Register BuiltinAttributes in _fastdds_python:
_fastdds_python.BuiltinAttributes_swigregister(BuiltinAttributes)

class ReaderTimes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _fastdds_python.ReaderTimes___eq__(self, b)
    initial_acknack_delay = property(_fastdds_python.ReaderTimes_initial_acknack_delay_get, _fastdds_python.ReaderTimes_initial_acknack_delay_set)
    heartbeat_response_delay = property(_fastdds_python.ReaderTimes_heartbeat_response_delay_get, _fastdds_python.ReaderTimes_heartbeat_response_delay_set)

    def __init__(self):
        _fastdds_python.ReaderTimes_swiginit(self, _fastdds_python.new_ReaderTimes())
    __swig_destroy__ = _fastdds_python.delete_ReaderTimes

# Register ReaderTimes in _fastdds_python:
_fastdds_python.ReaderTimes_swigregister(ReaderTimes)

SYNCHRONOUS_WRITER = _fastdds_python.SYNCHRONOUS_WRITER
ASYNCHRONOUS_WRITER = _fastdds_python.ASYNCHRONOUS_WRITER
class WriterTimes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _fastdds_python.WriterTimes___eq__(self, b)
    initial_heartbeat_delay = property(_fastdds_python.WriterTimes_initial_heartbeat_delay_get, _fastdds_python.WriterTimes_initial_heartbeat_delay_set)
    heartbeat_period = property(_fastdds_python.WriterTimes_heartbeat_period_get, _fastdds_python.WriterTimes_heartbeat_period_set)
    nack_response_delay = property(_fastdds_python.WriterTimes_nack_response_delay_get, _fastdds_python.WriterTimes_nack_response_delay_set)
    nack_supression_duration = property(_fastdds_python.WriterTimes_nack_supression_duration_get, _fastdds_python.WriterTimes_nack_supression_duration_set)

    def __init__(self):
        _fastdds_python.WriterTimes_swiginit(self, _fastdds_python.new_WriterTimes())
    __swig_destroy__ = _fastdds_python.delete_WriterTimes

# Register WriterTimes in _fastdds_python:
_fastdds_python.WriterTimes_swigregister(WriterTimes)

class RemoteLocatorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.RemoteLocatorList_swiginit(self, _fastdds_python.new_RemoteLocatorList(*args))

    def add_unicast_locator(self, locator):
        return _fastdds_python.RemoteLocatorList_add_unicast_locator(self, locator)

    def add_multicast_locator(self, locator):
        return _fastdds_python.RemoteLocatorList_add_multicast_locator(self, locator)
    unicast = property(_fastdds_python.RemoteLocatorList_unicast_get, _fastdds_python.RemoteLocatorList_unicast_set)
    multicast = property(_fastdds_python.RemoteLocatorList_multicast_get, _fastdds_python.RemoteLocatorList_multicast_set)
    __swig_destroy__ = _fastdds_python.delete_RemoteLocatorList

# Register RemoteLocatorList in _fastdds_python:
_fastdds_python.RemoteLocatorList_swigregister(RemoteLocatorList)

class SequenceNumber_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    high = property(_fastdds_python.SequenceNumber_t_high_get, _fastdds_python.SequenceNumber_t_high_set)
    low = property(_fastdds_python.SequenceNumber_t_low_get, _fastdds_python.SequenceNumber_t_low_set)

    def __init__(self, *args):
        _fastdds_python.SequenceNumber_t_swiginit(self, _fastdds_python.new_SequenceNumber_t(*args))

    def to64long(self):
        return _fastdds_python.SequenceNumber_t_to64long(self)

    def __iadd__(self, inc):
        return _fastdds_python.SequenceNumber_t___iadd__(self, inc)

    @staticmethod
    def unknown():
        return _fastdds_python.SequenceNumber_t_unknown()
    __swig_destroy__ = _fastdds_python.delete_SequenceNumber_t

# Register SequenceNumber_t in _fastdds_python:
_fastdds_python.SequenceNumber_t_swigregister(SequenceNumber_t)

def SequenceNumber_t_unknown():
    return _fastdds_python.SequenceNumber_t_unknown()


def __gt__(seq1, seq2):
    return _fastdds_python.__gt__(seq1, seq2)

def __lt__(*args):
    return _fastdds_python.__lt__(*args)

def __ge__(seq1, seq2):
    return _fastdds_python.__ge__(seq1, seq2)

def __le__(seq1, seq2):
    return _fastdds_python.__le__(seq1, seq2)

def __add__(seq, inc):
    return _fastdds_python.__add__(seq, inc)

def __sub__(*args):
    return _fastdds_python.__sub__(*args)

def sort_seqNum(s1, s2):
    return _fastdds_python.sort_seqNum(s1, s2)
class SequenceNumberHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, sequence_number):
        return _fastdds_python.SequenceNumberHash___call__(self, sequence_number)

    def __init__(self):
        _fastdds_python.SequenceNumberHash_swiginit(self, _fastdds_python.new_SequenceNumberHash())
    __swig_destroy__ = _fastdds_python.delete_SequenceNumberHash

# Register SequenceNumberHash in _fastdds_python:
_fastdds_python.SequenceNumberHash_swigregister(SequenceNumberHash)
c_SequenceNumber_Unknown = cvar.c_SequenceNumber_Unknown

class SequenceNumberDiff(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, a, b):
        return _fastdds_python.SequenceNumberDiff___call__(self, a, b)

    def __init__(self):
        _fastdds_python.SequenceNumberDiff_swiginit(self, _fastdds_python.new_SequenceNumberDiff())
    __swig_destroy__ = _fastdds_python.delete_SequenceNumberDiff

# Register SequenceNumberDiff in _fastdds_python:
_fastdds_python.SequenceNumberDiff_swigregister(SequenceNumberDiff)

class SampleIdentity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.SampleIdentity_swiginit(self, _fastdds_python.new_SampleIdentity(*args))

    def __eq__(self, sample_id):
        return _fastdds_python.SampleIdentity___eq__(self, sample_id)

    def __ne__(self, sample_id):
        return _fastdds_python.SampleIdentity___ne__(self, sample_id)

    def __lt__(self, sample):
        return _fastdds_python.SampleIdentity___lt__(self, sample)

    def writer_guid(self, *args):
        return _fastdds_python.SampleIdentity_writer_guid(self, *args)

    def sequence_number(self, *args):
        return _fastdds_python.SampleIdentity_sequence_number(self, *args)

    @staticmethod
    def unknown():
        return _fastdds_python.SampleIdentity_unknown()
    __swig_destroy__ = _fastdds_python.delete_SampleIdentity

# Register SampleIdentity in _fastdds_python:
_fastdds_python.SampleIdentity_swigregister(SampleIdentity)

def SampleIdentity_unknown():
    return _fastdds_python.SampleIdentity_unknown()


def __rshift__(*args):
    return _fastdds_python.__rshift__(*args)

def __lshift__(*args):
    return _fastdds_python.__lshift__(*args)
class WriteParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def sample_identity(self, *args):
        return _fastdds_python.WriteParams_sample_identity(self, *args)

    def related_sample_identity(self, *args):
        return _fastdds_python.WriteParams_related_sample_identity(self, *args)

    def source_timestamp(self, *args):
        return _fastdds_python.WriteParams_source_timestamp(self, *args)
    WRITE_PARAM_DEFAULT = property(_fastdds_python.WriteParams_WRITE_PARAM_DEFAULT_get, _fastdds_python.WriteParams_WRITE_PARAM_DEFAULT_set)

    @staticmethod
    def write_params_default():
        return _fastdds_python.WriteParams_write_params_default()

    def __init__(self):
        _fastdds_python.WriteParams_swiginit(self, _fastdds_python.new_WriteParams())
    __swig_destroy__ = _fastdds_python.delete_WriteParams

# Register WriteParams in _fastdds_python:
_fastdds_python.WriteParams_swigregister(WriteParams)

def WriteParams_write_params_default():
    return _fastdds_python.WriteParams_write_params_default()

class ContentFilterProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, config):
        _fastdds_python.ContentFilterProperty_swiginit(self, _fastdds_python.new_ContentFilterProperty(config))
    content_filtered_topic_name = property(_fastdds_python.ContentFilterProperty_content_filtered_topic_name_get, _fastdds_python.ContentFilterProperty_content_filtered_topic_name_set)
    related_topic_name = property(_fastdds_python.ContentFilterProperty_related_topic_name_get, _fastdds_python.ContentFilterProperty_related_topic_name_set)
    filter_class_name = property(_fastdds_python.ContentFilterProperty_filter_class_name_get, _fastdds_python.ContentFilterProperty_filter_class_name_set)
    filter_expression = property(_fastdds_python.ContentFilterProperty_filter_expression_get, _fastdds_python.ContentFilterProperty_filter_expression_set)
    expression_parameters = property(_fastdds_python.ContentFilterProperty_expression_parameters_get, _fastdds_python.ContentFilterProperty_expression_parameters_set)
    __swig_destroy__ = _fastdds_python.delete_ContentFilterProperty

# Register ContentFilterProperty in _fastdds_python:
_fastdds_python.ContentFilterProperty_swigregister(ContentFilterProperty)

FASTDDS_STATUS_COUNT = _fastdds_python.FASTDDS_STATUS_COUNT
class StatusMask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.StatusMask_swiginit(self, _fastdds_python.new_StatusMask(*args))

    def __rshift__(self, mask):
        return _fastdds_python.StatusMask___rshift__(self, mask)

    @staticmethod
    def all():
        return _fastdds_python.StatusMask_all()

    @staticmethod
    def none():
        return _fastdds_python.StatusMask_none()

    @staticmethod
    def inconsistent_topic():
        return _fastdds_python.StatusMask_inconsistent_topic()

    @staticmethod
    def offered_deadline_missed():
        return _fastdds_python.StatusMask_offered_deadline_missed()

    @staticmethod
    def requested_deadline_missed():
        return _fastdds_python.StatusMask_requested_deadline_missed()

    @staticmethod
    def offered_incompatible_qos():
        return _fastdds_python.StatusMask_offered_incompatible_qos()

    @staticmethod
    def requested_incompatible_qos():
        return _fastdds_python.StatusMask_requested_incompatible_qos()

    @staticmethod
    def sample_lost():
        return _fastdds_python.StatusMask_sample_lost()

    @staticmethod
    def sample_rejected():
        return _fastdds_python.StatusMask_sample_rejected()

    @staticmethod
    def data_on_readers():
        return _fastdds_python.StatusMask_data_on_readers()

    @staticmethod
    def data_available():
        return _fastdds_python.StatusMask_data_available()

    @staticmethod
    def liveliness_lost():
        return _fastdds_python.StatusMask_liveliness_lost()

    @staticmethod
    def liveliness_changed():
        return _fastdds_python.StatusMask_liveliness_changed()

    @staticmethod
    def publication_matched():
        return _fastdds_python.StatusMask_publication_matched()

    @staticmethod
    def subscription_matched():
        return _fastdds_python.StatusMask_subscription_matched()

    def is_active(self, status):
        return _fastdds_python.StatusMask_is_active(self, status)

    def __eq__(self, other_mask):
        return _fastdds_python.StatusMask___eq__(self, other_mask)

    def __lshift__(self, mask):
        return _fastdds_python.StatusMask___lshift__(self, mask)
    __swig_destroy__ = _fastdds_python.delete_StatusMask

# Register StatusMask in _fastdds_python:
_fastdds_python.StatusMask_swigregister(StatusMask)
HANDLE_NIL = cvar.HANDLE_NIL
RETCODE_OK = cvar.RETCODE_OK
RETCODE_ERROR = cvar.RETCODE_ERROR
RETCODE_UNSUPPORTED = cvar.RETCODE_UNSUPPORTED
RETCODE_BAD_PARAMETER = cvar.RETCODE_BAD_PARAMETER
RETCODE_PRECONDITION_NOT_MET = cvar.RETCODE_PRECONDITION_NOT_MET
RETCODE_OUT_OF_RESOURCES = cvar.RETCODE_OUT_OF_RESOURCES
RETCODE_NOT_ENABLED = cvar.RETCODE_NOT_ENABLED
RETCODE_IMMUTABLE_POLICY = cvar.RETCODE_IMMUTABLE_POLICY
RETCODE_INCONSISTENT_POLICY = cvar.RETCODE_INCONSISTENT_POLICY
RETCODE_ALREADY_DELETED = cvar.RETCODE_ALREADY_DELETED
RETCODE_TIMEOUT = cvar.RETCODE_TIMEOUT
RETCODE_NO_DATA = cvar.RETCODE_NO_DATA
RETCODE_ILLEGAL_OPERATION = cvar.RETCODE_ILLEGAL_OPERATION
RETCODE_NOT_ALLOWED_BY_SECURITY = cvar.RETCODE_NOT_ALLOWED_BY_SECURITY

def StatusMask_all():
    return _fastdds_python.StatusMask_all()

def StatusMask_none():
    return _fastdds_python.StatusMask_none()

def StatusMask_inconsistent_topic():
    return _fastdds_python.StatusMask_inconsistent_topic()

def StatusMask_offered_deadline_missed():
    return _fastdds_python.StatusMask_offered_deadline_missed()

def StatusMask_requested_deadline_missed():
    return _fastdds_python.StatusMask_requested_deadline_missed()

def StatusMask_offered_incompatible_qos():
    return _fastdds_python.StatusMask_offered_incompatible_qos()

def StatusMask_requested_incompatible_qos():
    return _fastdds_python.StatusMask_requested_incompatible_qos()

def StatusMask_sample_lost():
    return _fastdds_python.StatusMask_sample_lost()

def StatusMask_sample_rejected():
    return _fastdds_python.StatusMask_sample_rejected()

def StatusMask_data_on_readers():
    return _fastdds_python.StatusMask_data_on_readers()

def StatusMask_data_available():
    return _fastdds_python.StatusMask_data_available()

def StatusMask_liveliness_lost():
    return _fastdds_python.StatusMask_liveliness_lost()

def StatusMask_liveliness_changed():
    return _fastdds_python.StatusMask_liveliness_changed()

def StatusMask_publication_matched():
    return _fastdds_python.StatusMask_publication_matched()

def StatusMask_subscription_matched():
    return _fastdds_python.StatusMask_subscription_matched()

PID_PAD = _fastdds_python.PID_PAD
PID_SENTINEL = _fastdds_python.PID_SENTINEL
PID_USER_DATA = _fastdds_python.PID_USER_DATA
PID_TOPIC_NAME = _fastdds_python.PID_TOPIC_NAME
PID_TYPE_NAME = _fastdds_python.PID_TYPE_NAME
PID_GROUP_DATA = _fastdds_python.PID_GROUP_DATA
PID_TOPIC_DATA = _fastdds_python.PID_TOPIC_DATA
PID_DURABILITY = _fastdds_python.PID_DURABILITY
PID_DURABILITY_SERVICE = _fastdds_python.PID_DURABILITY_SERVICE
PID_DEADLINE = _fastdds_python.PID_DEADLINE
PID_LATENCY_BUDGET = _fastdds_python.PID_LATENCY_BUDGET
PID_LIVELINESS = _fastdds_python.PID_LIVELINESS
PID_RELIABILITY = _fastdds_python.PID_RELIABILITY
PID_LIFESPAN = _fastdds_python.PID_LIFESPAN
PID_DESTINATION_ORDER = _fastdds_python.PID_DESTINATION_ORDER
PID_HISTORY = _fastdds_python.PID_HISTORY
PID_RESOURCE_LIMITS = _fastdds_python.PID_RESOURCE_LIMITS
PID_OWNERSHIP = _fastdds_python.PID_OWNERSHIP
PID_OWNERSHIP_STRENGTH = _fastdds_python.PID_OWNERSHIP_STRENGTH
PID_PRESENTATION = _fastdds_python.PID_PRESENTATION
PID_PARTITION = _fastdds_python.PID_PARTITION
PID_TIME_BASED_FILTER = _fastdds_python.PID_TIME_BASED_FILTER
PID_TRANSPORT_PRIORITY = _fastdds_python.PID_TRANSPORT_PRIORITY
PID_DOMAIN_ID = _fastdds_python.PID_DOMAIN_ID
PID_DOMAIN_TAG = _fastdds_python.PID_DOMAIN_TAG
PID_PROTOCOL_VERSION = _fastdds_python.PID_PROTOCOL_VERSION
PID_VENDORID = _fastdds_python.PID_VENDORID
PID_UNICAST_LOCATOR = _fastdds_python.PID_UNICAST_LOCATOR
PID_MULTICAST_LOCATOR = _fastdds_python.PID_MULTICAST_LOCATOR
PID_DEFAULT_UNICAST_LOCATOR = _fastdds_python.PID_DEFAULT_UNICAST_LOCATOR
PID_DEFAULT_MULTICAST_LOCATOR = _fastdds_python.PID_DEFAULT_MULTICAST_LOCATOR
PID_METATRAFFIC_UNICAST_LOCATOR = _fastdds_python.PID_METATRAFFIC_UNICAST_LOCATOR
PID_METATRAFFIC_MULTICAST_LOCATOR = _fastdds_python.PID_METATRAFFIC_MULTICAST_LOCATOR
PID_EXPECTS_INLINE_QOS = _fastdds_python.PID_EXPECTS_INLINE_QOS
PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT = _fastdds_python.PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT
PID_PARTICIPANT_LEASE_DURATION = _fastdds_python.PID_PARTICIPANT_LEASE_DURATION
PID_CONTENT_FILTER_PROPERTY = _fastdds_python.PID_CONTENT_FILTER_PROPERTY
PID_PARTICIPANT_GUID = _fastdds_python.PID_PARTICIPANT_GUID
PID_GROUP_GUID = _fastdds_python.PID_GROUP_GUID
PID_GROUP_ENTITYID = _fastdds_python.PID_GROUP_ENTITYID
PID_BUILTIN_ENDPOINT_SET = _fastdds_python.PID_BUILTIN_ENDPOINT_SET
PID_BUILTIN_ENDPOINT_QOS = _fastdds_python.PID_BUILTIN_ENDPOINT_QOS
PID_PROPERTY_LIST = _fastdds_python.PID_PROPERTY_LIST
PID_TYPE_MAX_SIZE_SERIALIZED = _fastdds_python.PID_TYPE_MAX_SIZE_SERIALIZED
PID_ENTITY_NAME = _fastdds_python.PID_ENTITY_NAME
PID_ENDPOINT_GUID = _fastdds_python.PID_ENDPOINT_GUID
PID_CONTENT_FILTER_INFO = _fastdds_python.PID_CONTENT_FILTER_INFO
PID_COHERENT_SET = _fastdds_python.PID_COHERENT_SET
PID_DIRECTED_WRITE = _fastdds_python.PID_DIRECTED_WRITE
PID_ORIGINAL_WRITER_INFO = _fastdds_python.PID_ORIGINAL_WRITER_INFO
PID_GROUP_COHERENT_SET = _fastdds_python.PID_GROUP_COHERENT_SET
PID_GROUP_SEQ_NUM = _fastdds_python.PID_GROUP_SEQ_NUM
PID_WRITER_GROUP_INFO = _fastdds_python.PID_WRITER_GROUP_INFO
PID_SECURE_WRITER_GROUP_INFO = _fastdds_python.PID_SECURE_WRITER_GROUP_INFO
PID_KEY_HASH = _fastdds_python.PID_KEY_HASH
PID_STATUS_INFO = _fastdds_python.PID_STATUS_INFO
PID_TYPE_IDV1 = _fastdds_python.PID_TYPE_IDV1
PID_TYPE_OBJECTV1 = _fastdds_python.PID_TYPE_OBJECTV1
PID_DATA_REPRESENTATION = _fastdds_python.PID_DATA_REPRESENTATION
PID_TYPE_CONSISTENCY_ENFORCEMENT = _fastdds_python.PID_TYPE_CONSISTENCY_ENFORCEMENT
PID_TYPE_INFORMATION = _fastdds_python.PID_TYPE_INFORMATION
PID_IDENTITY_TOKEN = _fastdds_python.PID_IDENTITY_TOKEN
PID_PERMISSIONS_TOKEN = _fastdds_python.PID_PERMISSIONS_TOKEN
PID_PARTICIPANT_SECURITY_INFO = _fastdds_python.PID_PARTICIPANT_SECURITY_INFO
PID_ENDPOINT_SECURITY_INFO = _fastdds_python.PID_ENDPOINT_SECURITY_INFO
PID_IDENTITY_STATUS_TOKEN = _fastdds_python.PID_IDENTITY_STATUS_TOKEN
PID_DATA_TAGS = _fastdds_python.PID_DATA_TAGS
PID_SERVICE_INSTANCE_NAME = _fastdds_python.PID_SERVICE_INSTANCE_NAME
PID_RELATED_ENTITY_GUID = _fastdds_python.PID_RELATED_ENTITY_GUID
PID_TOPIC_ALIASES = _fastdds_python.PID_TOPIC_ALIASES
PID_RELATED_SAMPLE_IDENTITY = _fastdds_python.PID_RELATED_SAMPLE_IDENTITY
PID_PRODUCT_VERSION = _fastdds_python.PID_PRODUCT_VERSION
PID_PERSISTENCE_GUID = _fastdds_python.PID_PERSISTENCE_GUID
PID_DISABLE_POSITIVE_ACKS = _fastdds_python.PID_DISABLE_POSITIVE_ACKS
PID_DATASHARING = _fastdds_python.PID_DATASHARING
PID_NETWORK_CONFIGURATION_SET = _fastdds_python.PID_NETWORK_CONFIGURATION_SET
PID_CUSTOM_RELATED_SAMPLE_IDENTITY = _fastdds_python.PID_CUSTOM_RELATED_SAMPLE_IDENTITY
class Parameter_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.Parameter_t_swiginit(self, _fastdds_python.new_Parameter_t(*args))
    __swig_destroy__ = _fastdds_python.delete_Parameter_t

    def __eq__(self, b):
        return _fastdds_python.Parameter_t___eq__(self, b)
    Pid = property(_fastdds_python.Parameter_t_Pid_get, _fastdds_python.Parameter_t_Pid_set)
    length = property(_fastdds_python.Parameter_t_length_get, _fastdds_python.Parameter_t_length_set)

# Register Parameter_t in _fastdds_python:
_fastdds_python.Parameter_t_swigregister(Parameter_t)

class ParameterKey_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_fastdds_python.ParameterKey_t_key_get, _fastdds_python.ParameterKey_t_key_set)

    def __init__(self, *args):
        _fastdds_python.ParameterKey_t_swiginit(self, _fastdds_python.new_ParameterKey_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterKey_t

# Register ParameterKey_t in _fastdds_python:
_fastdds_python.ParameterKey_t_swigregister(ParameterKey_t)

PARAMETER_KEY_HASH_LENGTH = _fastdds_python.PARAMETER_KEY_HASH_LENGTH
class ParameterLocator_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    locator = property(_fastdds_python.ParameterLocator_t_locator_get, _fastdds_python.ParameterLocator_t_locator_set)

    def __init__(self, *args):
        _fastdds_python.ParameterLocator_t_swiginit(self, _fastdds_python.new_ParameterLocator_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterLocator_t

# Register ParameterLocator_t in _fastdds_python:
_fastdds_python.ParameterLocator_t_swigregister(ParameterLocator_t)

PARAMETER_LOCATOR_LENGTH = _fastdds_python.PARAMETER_LOCATOR_LENGTH
class ParameterString_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.ParameterString_t_swiginit(self, _fastdds_python.new_ParameterString_t(*args))

    def getName(self):
        return _fastdds_python.ParameterString_t_getName(self)

    def setName(self, name):
        return _fastdds_python.ParameterString_t_setName(self, name)

    def size(self):
        return _fastdds_python.ParameterString_t_size(self)
    __swig_destroy__ = _fastdds_python.delete_ParameterString_t

# Register ParameterString_t in _fastdds_python:
_fastdds_python.ParameterString_t_swigregister(ParameterString_t)

class ParameterPort_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    port = property(_fastdds_python.ParameterPort_t_port_get, _fastdds_python.ParameterPort_t_port_set)

    def __init__(self, *args):
        _fastdds_python.ParameterPort_t_swiginit(self, _fastdds_python.new_ParameterPort_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterPort_t

# Register ParameterPort_t in _fastdds_python:
_fastdds_python.ParameterPort_t_swigregister(ParameterPort_t)

PARAMETER_PORT_LENGTH = _fastdds_python.PARAMETER_PORT_LENGTH
class ParameterGuid_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    guid = property(_fastdds_python.ParameterGuid_t_guid_get, _fastdds_python.ParameterGuid_t_guid_set)

    def __init__(self, *args):
        _fastdds_python.ParameterGuid_t_swiginit(self, _fastdds_python.new_ParameterGuid_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterGuid_t

# Register ParameterGuid_t in _fastdds_python:
_fastdds_python.ParameterGuid_t_swigregister(ParameterGuid_t)

PARAMETER_GUID_LENGTH = _fastdds_python.PARAMETER_GUID_LENGTH
class ParameterDomainId_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    domain_id = property(_fastdds_python.ParameterDomainId_t_domain_id_get, _fastdds_python.ParameterDomainId_t_domain_id_set)

    def __init__(self, *args):
        _fastdds_python.ParameterDomainId_t_swiginit(self, _fastdds_python.new_ParameterDomainId_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterDomainId_t

# Register ParameterDomainId_t in _fastdds_python:
_fastdds_python.ParameterDomainId_t_swigregister(ParameterDomainId_t)

PARAMETER_DOMAINID_LENGTH = _fastdds_python.PARAMETER_DOMAINID_LENGTH
class ParameterProtocolVersion_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    protocolVersion = property(_fastdds_python.ParameterProtocolVersion_t_protocolVersion_get, _fastdds_python.ParameterProtocolVersion_t_protocolVersion_set)

    def __init__(self, *args):
        _fastdds_python.ParameterProtocolVersion_t_swiginit(self, _fastdds_python.new_ParameterProtocolVersion_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterProtocolVersion_t

# Register ParameterProtocolVersion_t in _fastdds_python:
_fastdds_python.ParameterProtocolVersion_t_swigregister(ParameterProtocolVersion_t)

PARAMETER_PROTOCOL_LENGTH = _fastdds_python.PARAMETER_PROTOCOL_LENGTH
class ParameterVendorId_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vendorId = property(_fastdds_python.ParameterVendorId_t_vendorId_get, _fastdds_python.ParameterVendorId_t_vendorId_set)

    def __init__(self, *args):
        _fastdds_python.ParameterVendorId_t_swiginit(self, _fastdds_python.new_ParameterVendorId_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterVendorId_t

# Register ParameterVendorId_t in _fastdds_python:
_fastdds_python.ParameterVendorId_t_swigregister(ParameterVendorId_t)

PARAMETER_VENDOR_LENGTH = _fastdds_python.PARAMETER_VENDOR_LENGTH
class ParameterProductVersion_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version = property(_fastdds_python.ParameterProductVersion_t_version_get, _fastdds_python.ParameterProductVersion_t_version_set)

    def __init__(self, *args):
        _fastdds_python.ParameterProductVersion_t_swiginit(self, _fastdds_python.new_ParameterProductVersion_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterProductVersion_t

# Register ParameterProductVersion_t in _fastdds_python:
_fastdds_python.ParameterProductVersion_t_swigregister(ParameterProductVersion_t)

PARAMETER_PRODUCT_VERSION_LENGTH = _fastdds_python.PARAMETER_PRODUCT_VERSION_LENGTH
class ParameterIP4Address_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_fastdds_python.ParameterIP4Address_t_address_get, _fastdds_python.ParameterIP4Address_t_address_set)

    def __init__(self, *args):
        _fastdds_python.ParameterIP4Address_t_swiginit(self, _fastdds_python.new_ParameterIP4Address_t(*args))

    def setIP4Address(self, o1, o2, o3, o4):
        return _fastdds_python.ParameterIP4Address_t_setIP4Address(self, o1, o2, o3, o4)
    __swig_destroy__ = _fastdds_python.delete_ParameterIP4Address_t

# Register ParameterIP4Address_t in _fastdds_python:
_fastdds_python.ParameterIP4Address_t_swigregister(ParameterIP4Address_t)

PARAMETER_IP4_LENGTH = _fastdds_python.PARAMETER_IP4_LENGTH
class ParameterBool_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_fastdds_python.ParameterBool_t_value_get, _fastdds_python.ParameterBool_t_value_set)

    def __init__(self, *args):
        _fastdds_python.ParameterBool_t_swiginit(self, _fastdds_python.new_ParameterBool_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterBool_t

# Register ParameterBool_t in _fastdds_python:
_fastdds_python.ParameterBool_t_swigregister(ParameterBool_t)

PARAMETER_BOOL_LENGTH = _fastdds_python.PARAMETER_BOOL_LENGTH
class ParameterStatusInfo_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_fastdds_python.ParameterStatusInfo_t_status_get, _fastdds_python.ParameterStatusInfo_t_status_set)

    def __init__(self, *args):
        _fastdds_python.ParameterStatusInfo_t_swiginit(self, _fastdds_python.new_ParameterStatusInfo_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterStatusInfo_t

# Register ParameterStatusInfo_t in _fastdds_python:
_fastdds_python.ParameterStatusInfo_t_swigregister(ParameterStatusInfo_t)

PARAMETER_STATUS_INFO_LENGTH = _fastdds_python.PARAMETER_STATUS_INFO_LENGTH
class ParameterCount_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_fastdds_python.ParameterCount_t_count_get, _fastdds_python.ParameterCount_t_count_set)

    def __init__(self, *args):
        _fastdds_python.ParameterCount_t_swiginit(self, _fastdds_python.new_ParameterCount_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterCount_t

# Register ParameterCount_t in _fastdds_python:
_fastdds_python.ParameterCount_t_swigregister(ParameterCount_t)

PARAMETER_COUNT_LENGTH = _fastdds_python.PARAMETER_COUNT_LENGTH
class ParameterEntityId_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    entityId = property(_fastdds_python.ParameterEntityId_t_entityId_get, _fastdds_python.ParameterEntityId_t_entityId_set)

    def __init__(self, *args):
        _fastdds_python.ParameterEntityId_t_swiginit(self, _fastdds_python.new_ParameterEntityId_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterEntityId_t

# Register ParameterEntityId_t in _fastdds_python:
_fastdds_python.ParameterEntityId_t_swigregister(ParameterEntityId_t)

PARAMETER_ENTITYID_LENGTH = _fastdds_python.PARAMETER_ENTITYID_LENGTH
class ParameterTime_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    time = property(_fastdds_python.ParameterTime_t_time_get, _fastdds_python.ParameterTime_t_time_set)

    def __init__(self, *args):
        _fastdds_python.ParameterTime_t_swiginit(self, _fastdds_python.new_ParameterTime_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterTime_t

# Register ParameterTime_t in _fastdds_python:
_fastdds_python.ParameterTime_t_swigregister(ParameterTime_t)

PARAMETER_TIME_LENGTH = _fastdds_python.PARAMETER_TIME_LENGTH
class ParameterBuiltinEndpointSet_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    endpointSet = property(_fastdds_python.ParameterBuiltinEndpointSet_t_endpointSet_get, _fastdds_python.ParameterBuiltinEndpointSet_t_endpointSet_set)

    def __init__(self, *args):
        _fastdds_python.ParameterBuiltinEndpointSet_t_swiginit(self, _fastdds_python.new_ParameterBuiltinEndpointSet_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterBuiltinEndpointSet_t

# Register ParameterBuiltinEndpointSet_t in _fastdds_python:
_fastdds_python.ParameterBuiltinEndpointSet_t_swigregister(ParameterBuiltinEndpointSet_t)

PARAMETER_BUILTINENDPOINTSET_LENGTH = _fastdds_python.PARAMETER_BUILTINENDPOINTSET_LENGTH
class ParameterNetworkConfigSet_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    netconfigSet = property(_fastdds_python.ParameterNetworkConfigSet_t_netconfigSet_get, _fastdds_python.ParameterNetworkConfigSet_t_netconfigSet_set)

    def __init__(self, *args):
        _fastdds_python.ParameterNetworkConfigSet_t_swiginit(self, _fastdds_python.new_ParameterNetworkConfigSet_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterNetworkConfigSet_t

# Register ParameterNetworkConfigSet_t in _fastdds_python:
_fastdds_python.ParameterNetworkConfigSet_t_swigregister(ParameterNetworkConfigSet_t)

PARAMETER_NETWORKCONFIGSET_LENGTH = _fastdds_python.PARAMETER_NETWORKCONFIGSET_LENGTH
class ParameterProperty_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.ParameterProperty_t_swiginit(self, _fastdds_python.new_ParameterProperty_t(*args))

    def first(self):
        return _fastdds_python.ParameterProperty_t_first(self)

    def second(self):
        return _fastdds_python.ParameterProperty_t_second(self)

    def modify(self, new_value):
        return _fastdds_python.ParameterProperty_t_modify(self, new_value)

    def pair(self):
        return _fastdds_python.ParameterProperty_t_pair(self)

    def size(self):
        return _fastdds_python.ParameterProperty_t_size(self)

    def __eq__(self, b):
        return _fastdds_python.ParameterProperty_t___eq__(self, b)

    def __ne__(self, b):
        return _fastdds_python.ParameterProperty_t___ne__(self, b)
    __swig_destroy__ = _fastdds_python.delete_ParameterProperty_t

# Register ParameterProperty_t in _fastdds_python:
_fastdds_python.ParameterProperty_t_swigregister(ParameterProperty_t)

class ParameterPropertyList_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.ParameterPropertyList_t_swiginit(self, _fastdds_python.new_ParameterPropertyList_t(*args))

    def begin(self, *args):
        return _fastdds_python.ParameterPropertyList_t_begin(self, *args)

    def end(self, *args):
        return _fastdds_python.ParameterPropertyList_t_end(self, *args)

    def push_back(self, *args):
        return _fastdds_python.ParameterPropertyList_t_push_back(self, *args)

    def set_property(self, pos, new_value):
        return _fastdds_python.ParameterPropertyList_t_set_property(self, pos, new_value)

    def clear(self):
        return _fastdds_python.ParameterPropertyList_t_clear(self)

    def size(self):
        return _fastdds_python.ParameterPropertyList_t_size(self)

    def set_max_size(self, size):
        return _fastdds_python.ParameterPropertyList_t_set_max_size(self, size)

    def max_size(self):
        return _fastdds_python.ParameterPropertyList_t_max_size(self)
    __swig_destroy__ = _fastdds_python.delete_ParameterPropertyList_t

# Register ParameterPropertyList_t in _fastdds_python:
_fastdds_python.ParameterPropertyList_t_swigregister(ParameterPropertyList_t)
parameter_property_persistence_guid = cvar.parameter_property_persistence_guid
parameter_property_participant_type = cvar.parameter_property_participant_type
parameter_property_ds_version = cvar.parameter_property_ds_version
parameter_property_current_ds_version = cvar.parameter_property_current_ds_version
parameter_policy_physical_data_host = cvar.parameter_policy_physical_data_host
parameter_policy_physical_data_user = cvar.parameter_policy_physical_data_user
parameter_policy_physical_data_process = cvar.parameter_policy_physical_data_process
parameter_enable_monitor_service = cvar.parameter_enable_monitor_service
parameter_policy_type_propagation = cvar.parameter_policy_type_propagation

class ParameterPropertyList_t_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ptr):
        _fastdds_python.ParameterPropertyList_t_iterator_swiginit(self, _fastdds_python.new_ParameterPropertyList_t_iterator(ptr))

    def __ref__(self):
        return _fastdds_python.ParameterPropertyList_t_iterator___ref__(self)

    def __eq__(self, rhs):
        return _fastdds_python.ParameterPropertyList_t_iterator___eq__(self, rhs)

    def __ne__(self, rhs):
        return _fastdds_python.ParameterPropertyList_t_iterator___ne__(self, rhs)
    __swig_destroy__ = _fastdds_python.delete_ParameterPropertyList_t_iterator

# Register ParameterPropertyList_t_iterator in _fastdds_python:
_fastdds_python.ParameterPropertyList_t_iterator_swigregister(ParameterPropertyList_t_iterator)

class ParameterPropertyList_t_const_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ptr):
        _fastdds_python.ParameterPropertyList_t_const_iterator_swiginit(self, _fastdds_python.new_ParameterPropertyList_t_const_iterator(ptr))

    def __ref__(self):
        return _fastdds_python.ParameterPropertyList_t_const_iterator___ref__(self)

    def __eq__(self, rhs):
        return _fastdds_python.ParameterPropertyList_t_const_iterator___eq__(self, rhs)

    def __ne__(self, rhs):
        return _fastdds_python.ParameterPropertyList_t_const_iterator___ne__(self, rhs)
    __swig_destroy__ = _fastdds_python.delete_ParameterPropertyList_t_const_iterator

# Register ParameterPropertyList_t_const_iterator in _fastdds_python:
_fastdds_python.ParameterPropertyList_t_const_iterator_swigregister(ParameterPropertyList_t_const_iterator)

class ParameterSampleIdentity_t(Parameter_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sample_id = property(_fastdds_python.ParameterSampleIdentity_t_sample_id_get, _fastdds_python.ParameterSampleIdentity_t_sample_id_set)

    def __init__(self, *args):
        _fastdds_python.ParameterSampleIdentity_t_swiginit(self, _fastdds_python.new_ParameterSampleIdentity_t(*args))
    __swig_destroy__ = _fastdds_python.delete_ParameterSampleIdentity_t

# Register ParameterSampleIdentity_t in _fastdds_python:
_fastdds_python.ParameterSampleIdentity_t_swigregister(ParameterSampleIdentity_t)

PARAMETER_SAMPLEIDENTITY_LENGTH = _fastdds_python.PARAMETER_SAMPLEIDENTITY_LENGTH
class TransportDescriptorInterfaceShrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.TransportDescriptorInterfaceShrPtr_swiginit(self, _fastdds_python.new_TransportDescriptorInterfaceShrPtr())
    __swig_destroy__ = _fastdds_python.delete_TransportDescriptorInterfaceShrPtr

# Register TransportDescriptorInterfaceShrPtr in _fastdds_python:
_fastdds_python.TransportDescriptorInterfaceShrPtr_swigregister(TransportDescriptorInterfaceShrPtr)

class TransportDescriptorInterfaceVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.TransportDescriptorInterfaceVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.TransportDescriptorInterfaceVector___bool__(self)

    def __len__(self):
        return _fastdds_python.TransportDescriptorInterfaceVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.TransportDescriptorInterfaceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.TransportDescriptorInterfaceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_pop(self)

    def append(self, x):
        return _fastdds_python.TransportDescriptorInterfaceVector_append(self, x)

    def empty(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_empty(self)

    def size(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_size(self)

    def swap(self, v):
        return _fastdds_python.TransportDescriptorInterfaceVector_swap(self, v)

    def begin(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_begin(self)

    def end(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_end(self)

    def rbegin(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_rbegin(self)

    def rend(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_rend(self)

    def clear(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.TransportDescriptorInterfaceVector_swiginit(self, _fastdds_python.new_TransportDescriptorInterfaceVector(*args))

    def push_back(self, x):
        return _fastdds_python.TransportDescriptorInterfaceVector_push_back(self, x)

    def front(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_front(self)

    def back(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.TransportDescriptorInterfaceVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.TransportDescriptorInterfaceVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.TransportDescriptorInterfaceVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.TransportDescriptorInterfaceVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_TransportDescriptorInterfaceVector

# Register TransportDescriptorInterfaceVector in _fastdds_python:
_fastdds_python.TransportDescriptorInterfaceVector_swigregister(TransportDescriptorInterfaceVector)

class DataRepresentationIdVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.DataRepresentationIdVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.DataRepresentationIdVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.DataRepresentationIdVector___bool__(self)

    def __len__(self):
        return _fastdds_python.DataRepresentationIdVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.DataRepresentationIdVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.DataRepresentationIdVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.DataRepresentationIdVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.DataRepresentationIdVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.DataRepresentationIdVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.DataRepresentationIdVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.DataRepresentationIdVector_pop(self)

    def append(self, x):
        return _fastdds_python.DataRepresentationIdVector_append(self, x)

    def empty(self):
        return _fastdds_python.DataRepresentationIdVector_empty(self)

    def size(self):
        return _fastdds_python.DataRepresentationIdVector_size(self)

    def swap(self, v):
        return _fastdds_python.DataRepresentationIdVector_swap(self, v)

    def begin(self):
        return _fastdds_python.DataRepresentationIdVector_begin(self)

    def end(self):
        return _fastdds_python.DataRepresentationIdVector_end(self)

    def rbegin(self):
        return _fastdds_python.DataRepresentationIdVector_rbegin(self)

    def rend(self):
        return _fastdds_python.DataRepresentationIdVector_rend(self)

    def clear(self):
        return _fastdds_python.DataRepresentationIdVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.DataRepresentationIdVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.DataRepresentationIdVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.DataRepresentationIdVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.DataRepresentationIdVector_swiginit(self, _fastdds_python.new_DataRepresentationIdVector(*args))

    def push_back(self, x):
        return _fastdds_python.DataRepresentationIdVector_push_back(self, x)

    def front(self):
        return _fastdds_python.DataRepresentationIdVector_front(self)

    def back(self):
        return _fastdds_python.DataRepresentationIdVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.DataRepresentationIdVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.DataRepresentationIdVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.DataRepresentationIdVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.DataRepresentationIdVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.DataRepresentationIdVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_DataRepresentationIdVector

# Register DataRepresentationIdVector in _fastdds_python:
_fastdds_python.DataRepresentationIdVector_swigregister(DataRepresentationIdVector)

class ParticipantResourceLimitsQos(RTPSParticipantAllocationAttributes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ParticipantResourceLimitsQos_swiginit(self, _fastdds_python.new_ParticipantResourceLimitsQos())
    __swig_destroy__ = _fastdds_python.delete_ParticipantResourceLimitsQos

# Register ParticipantResourceLimitsQos in _fastdds_python:
_fastdds_python.ParticipantResourceLimitsQos_swigregister(ParticipantResourceLimitsQos)

class PropertyPolicyQos(PropertyPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PropertyPolicyQos_swiginit(self, _fastdds_python.new_PropertyPolicyQos())
    __swig_destroy__ = _fastdds_python.delete_PropertyPolicyQos

# Register PropertyPolicyQos in _fastdds_python:
_fastdds_python.PropertyPolicyQos_swigregister(PropertyPolicyQos)

class OctetResourceLimitedVectorStopIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.OctetResourceLimitedVectorStopIterator_swiginit(self, _fastdds_python.new_OctetResourceLimitedVectorStopIterator())
    __swig_destroy__ = _fastdds_python.delete_OctetResourceLimitedVectorStopIterator

# Register OctetResourceLimitedVectorStopIterator in _fastdds_python:
_fastdds_python.OctetResourceLimitedVectorStopIterator_swigregister(OctetResourceLimitedVectorStopIterator)

class OctetResourceLimitedVectorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, _cur, _end):
        _fastdds_python.OctetResourceLimitedVectorIterator_swiginit(self, _fastdds_python.new_OctetResourceLimitedVectorIterator(_cur, _end))

    def __iter__(self):
        return _fastdds_python.OctetResourceLimitedVectorIterator___iter__(self)
    cur = property(_fastdds_python.OctetResourceLimitedVectorIterator_cur_get, _fastdds_python.OctetResourceLimitedVectorIterator_cur_set)
    end = property(_fastdds_python.OctetResourceLimitedVectorIterator_end_get, _fastdds_python.OctetResourceLimitedVectorIterator_end_set)

    def __next__(self):
        return _fastdds_python.OctetResourceLimitedVectorIterator___next__(self)
    __swig_destroy__ = _fastdds_python.delete_OctetResourceLimitedVectorIterator

# Register OctetResourceLimitedVectorIterator in _fastdds_python:
_fastdds_python.OctetResourceLimitedVectorIterator_swigregister(OctetResourceLimitedVectorIterator)

class OctetResourceLimitedVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.OctetResourceLimitedVector_swiginit(self, _fastdds_python.new_OctetResourceLimitedVector(*args))
    __swig_destroy__ = _fastdds_python.delete_OctetResourceLimitedVector

    def insert(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_insert(self, *args)

    def remove(self, val):
        return _fastdds_python.OctetResourceLimitedVector_remove(self, val)

    def contains(self, val):
        return _fastdds_python.OctetResourceLimitedVector_contains(self, val)

    def assign(self, n, val):
        return _fastdds_python.OctetResourceLimitedVector_assign(self, n, val)

    def begin(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_begin(self, *args)

    def cbegin(self):
        return _fastdds_python.OctetResourceLimitedVector_cbegin(self)

    def end(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_end(self, *args)

    def cend(self):
        return _fastdds_python.OctetResourceLimitedVector_cend(self)

    def rbegin(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_rbegin(self, *args)

    def crbegin(self):
        return _fastdds_python.OctetResourceLimitedVector_crbegin(self)

    def rend(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_rend(self, *args)

    def crend(self):
        return _fastdds_python.OctetResourceLimitedVector_crend(self)

    def empty(self):
        return _fastdds_python.OctetResourceLimitedVector_empty(self)

    def size(self):
        return _fastdds_python.OctetResourceLimitedVector_size(self)

    def capacity(self):
        return _fastdds_python.OctetResourceLimitedVector_capacity(self)

    def max_size(self):
        return _fastdds_python.OctetResourceLimitedVector_max_size(self)

    def clear(self):
        return _fastdds_python.OctetResourceLimitedVector_clear(self)

    def erase(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_erase(self, *args)

    def pop_back(self):
        return _fastdds_python.OctetResourceLimitedVector_pop_back(self)

    def data(self, *args):
        return _fastdds_python.OctetResourceLimitedVector_data(self, *args)

    def __len__(self):
        return _fastdds_python.OctetResourceLimitedVector___len__(self)

    def __getitem__(self, i):
        return _fastdds_python.OctetResourceLimitedVector___getitem__(self, i)

    def getitem(self, n):
        return _fastdds_python.OctetResourceLimitedVector_getitem(self, n)

    def setitem(self, n, v):
        return _fastdds_python.OctetResourceLimitedVector_setitem(self, n, v)

    def append(self, v):
        return _fastdds_python.OctetResourceLimitedVector_append(self, v)

    def __iter__(self):
        return _fastdds_python.OctetResourceLimitedVector___iter__(self)

# Register OctetResourceLimitedVector in _fastdds_python:
_fastdds_python.OctetResourceLimitedVector_swigregister(OctetResourceLimitedVector)

INVALID_QOS_POLICY_ID = _fastdds_python.INVALID_QOS_POLICY_ID
USERDATA_QOS_POLICY_ID = _fastdds_python.USERDATA_QOS_POLICY_ID
DURABILITY_QOS_POLICY_ID = _fastdds_python.DURABILITY_QOS_POLICY_ID
PRESENTATION_QOS_POLICY_ID = _fastdds_python.PRESENTATION_QOS_POLICY_ID
DEADLINE_QOS_POLICY_ID = _fastdds_python.DEADLINE_QOS_POLICY_ID
LATENCYBUDGET_QOS_POLICY_ID = _fastdds_python.LATENCYBUDGET_QOS_POLICY_ID
OWNERSHIP_QOS_POLICY_ID = _fastdds_python.OWNERSHIP_QOS_POLICY_ID
OWNERSHIPSTRENGTH_QOS_POLICY_ID = _fastdds_python.OWNERSHIPSTRENGTH_QOS_POLICY_ID
LIVELINESS_QOS_POLICY_ID = _fastdds_python.LIVELINESS_QOS_POLICY_ID
TIMEBASEDFILTER_QOS_POLICY_ID = _fastdds_python.TIMEBASEDFILTER_QOS_POLICY_ID
PARTITION_QOS_POLICY_ID = _fastdds_python.PARTITION_QOS_POLICY_ID
RELIABILITY_QOS_POLICY_ID = _fastdds_python.RELIABILITY_QOS_POLICY_ID
DESTINATIONORDER_QOS_POLICY_ID = _fastdds_python.DESTINATIONORDER_QOS_POLICY_ID
HISTORY_QOS_POLICY_ID = _fastdds_python.HISTORY_QOS_POLICY_ID
RESOURCELIMITS_QOS_POLICY_ID = _fastdds_python.RESOURCELIMITS_QOS_POLICY_ID
ENTITYFACTORY_QOS_POLICY_ID = _fastdds_python.ENTITYFACTORY_QOS_POLICY_ID
WRITERDATALIFECYCLE_QOS_POLICY_ID = _fastdds_python.WRITERDATALIFECYCLE_QOS_POLICY_ID
READERDATALIFECYCLE_QOS_POLICY_ID = _fastdds_python.READERDATALIFECYCLE_QOS_POLICY_ID
TOPICDATA_QOS_POLICY_ID = _fastdds_python.TOPICDATA_QOS_POLICY_ID
GROUPDATA_QOS_POLICY_ID = _fastdds_python.GROUPDATA_QOS_POLICY_ID
TRANSPORTPRIORITY_QOS_POLICY_ID = _fastdds_python.TRANSPORTPRIORITY_QOS_POLICY_ID
LIFESPAN_QOS_POLICY_ID = _fastdds_python.LIFESPAN_QOS_POLICY_ID
DURABILITYSERVICE_QOS_POLICY_ID = _fastdds_python.DURABILITYSERVICE_QOS_POLICY_ID
DATAREPRESENTATION_QOS_POLICY_ID = _fastdds_python.DATAREPRESENTATION_QOS_POLICY_ID
TYPECONSISTENCYENFORCEMENT_QOS_POLICY_ID = _fastdds_python.TYPECONSISTENCYENFORCEMENT_QOS_POLICY_ID
DISABLEPOSITIVEACKS_QOS_POLICY_ID = _fastdds_python.DISABLEPOSITIVEACKS_QOS_POLICY_ID
PARTICIPANTRESOURCELIMITS_QOS_POLICY_ID = _fastdds_python.PARTICIPANTRESOURCELIMITS_QOS_POLICY_ID
PROPERTYPOLICY_QOS_POLICY_ID = _fastdds_python.PROPERTYPOLICY_QOS_POLICY_ID
PUBLISHMODE_QOS_POLICY_ID = _fastdds_python.PUBLISHMODE_QOS_POLICY_ID
READERRESOURCELIMITS_QOS_POLICY_ID = _fastdds_python.READERRESOURCELIMITS_QOS_POLICY_ID
RTPSENDPOINT_QOS_POLICY_ID = _fastdds_python.RTPSENDPOINT_QOS_POLICY_ID
RTPSRELIABLEREADER_QOS_POLICY_ID = _fastdds_python.RTPSRELIABLEREADER_QOS_POLICY_ID
RTPSRELIABLEWRITER_QOS_POLICY_ID = _fastdds_python.RTPSRELIABLEWRITER_QOS_POLICY_ID
TRANSPORTCONFIG_QOS_POLICY_ID = _fastdds_python.TRANSPORTCONFIG_QOS_POLICY_ID
TYPECONSISTENCY_QOS_POLICY_ID = _fastdds_python.TYPECONSISTENCY_QOS_POLICY_ID
WIREPROTOCOLCONFIG_QOS_POLICY_ID = _fastdds_python.WIREPROTOCOLCONFIG_QOS_POLICY_ID
WRITERRESOURCELIMITS_QOS_POLICY_ID = _fastdds_python.WRITERRESOURCELIMITS_QOS_POLICY_ID
NEXT_QOS_POLICY_ID = _fastdds_python.NEXT_QOS_POLICY_ID
class QosPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    hasChanged = property(_fastdds_python.QosPolicy_hasChanged_get, _fastdds_python.QosPolicy_hasChanged_set)
    __swig_destroy__ = _fastdds_python.delete_QosPolicy

    def __eq__(self, b):
        return _fastdds_python.QosPolicy___eq__(self, b)

    def send_always(self):
        return _fastdds_python.QosPolicy_send_always(self)

    def clear(self):
        return _fastdds_python.QosPolicy_clear(self)

# Register QosPolicy in _fastdds_python:
_fastdds_python.QosPolicy_swigregister(QosPolicy)

class EntityFactoryQosPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    autoenable_created_entities = property(_fastdds_python.EntityFactoryQosPolicy_autoenable_created_entities_get, _fastdds_python.EntityFactoryQosPolicy_autoenable_created_entities_set)

    def __init__(self, *args):
        _fastdds_python.EntityFactoryQosPolicy_swiginit(self, _fastdds_python.new_EntityFactoryQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_EntityFactoryQosPolicy

    def __eq__(self, b):
        return _fastdds_python.EntityFactoryQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.EntityFactoryQosPolicy_clear(self)

# Register EntityFactoryQosPolicy in _fastdds_python:
_fastdds_python.EntityFactoryQosPolicy_swigregister(EntityFactoryQosPolicy)

VOLATILE_DURABILITY_QOS = _fastdds_python.VOLATILE_DURABILITY_QOS
TRANSIENT_LOCAL_DURABILITY_QOS = _fastdds_python.TRANSIENT_LOCAL_DURABILITY_QOS
TRANSIENT_DURABILITY_QOS = _fastdds_python.TRANSIENT_DURABILITY_QOS
PERSISTENT_DURABILITY_QOS = _fastdds_python.PERSISTENT_DURABILITY_QOS
PARAMETER_KIND_LENGTH = _fastdds_python.PARAMETER_KIND_LENGTH
class DurabilityQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DurabilityQosPolicy_swiginit(self, _fastdds_python.new_DurabilityQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DurabilityQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DurabilityQosPolicy___eq__(self, b)

    def durabilityKind(self, *args):
        return _fastdds_python.DurabilityQosPolicy_durabilityKind(self, *args)

    def clear(self):
        return _fastdds_python.DurabilityQosPolicy_clear(self)
    kind = property(_fastdds_python.DurabilityQosPolicy_kind_get, _fastdds_python.DurabilityQosPolicy_kind_set)

# Register DurabilityQosPolicy in _fastdds_python:
_fastdds_python.DurabilityQosPolicy_swigregister(DurabilityQosPolicy)

class DeadlineQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DeadlineQosPolicy_swiginit(self, _fastdds_python.new_DeadlineQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DeadlineQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DeadlineQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DeadlineQosPolicy_clear(self)
    period = property(_fastdds_python.DeadlineQosPolicy_period_get, _fastdds_python.DeadlineQosPolicy_period_set)

# Register DeadlineQosPolicy in _fastdds_python:
_fastdds_python.DeadlineQosPolicy_swigregister(DeadlineQosPolicy)

class LatencyBudgetQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.LatencyBudgetQosPolicy_swiginit(self, _fastdds_python.new_LatencyBudgetQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_LatencyBudgetQosPolicy

    def __eq__(self, b):
        return _fastdds_python.LatencyBudgetQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.LatencyBudgetQosPolicy_clear(self)
    duration = property(_fastdds_python.LatencyBudgetQosPolicy_duration_get, _fastdds_python.LatencyBudgetQosPolicy_duration_set)

# Register LatencyBudgetQosPolicy in _fastdds_python:
_fastdds_python.LatencyBudgetQosPolicy_swigregister(LatencyBudgetQosPolicy)

AUTOMATIC_LIVELINESS_QOS = _fastdds_python.AUTOMATIC_LIVELINESS_QOS
MANUAL_BY_PARTICIPANT_LIVELINESS_QOS = _fastdds_python.MANUAL_BY_PARTICIPANT_LIVELINESS_QOS
MANUAL_BY_TOPIC_LIVELINESS_QOS = _fastdds_python.MANUAL_BY_TOPIC_LIVELINESS_QOS
class LivelinessQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.LivelinessQosPolicy_swiginit(self, _fastdds_python.new_LivelinessQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_LivelinessQosPolicy

    def __eq__(self, b):
        return _fastdds_python.LivelinessQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.LivelinessQosPolicy_clear(self)
    kind = property(_fastdds_python.LivelinessQosPolicy_kind_get, _fastdds_python.LivelinessQosPolicy_kind_set)
    lease_duration = property(_fastdds_python.LivelinessQosPolicy_lease_duration_get, _fastdds_python.LivelinessQosPolicy_lease_duration_set)
    announcement_period = property(_fastdds_python.LivelinessQosPolicy_announcement_period_get, _fastdds_python.LivelinessQosPolicy_announcement_period_set)

# Register LivelinessQosPolicy in _fastdds_python:
_fastdds_python.LivelinessQosPolicy_swigregister(LivelinessQosPolicy)

BEST_EFFORT_RELIABILITY_QOS = _fastdds_python.BEST_EFFORT_RELIABILITY_QOS
RELIABLE_RELIABILITY_QOS = _fastdds_python.RELIABLE_RELIABILITY_QOS
class ReliabilityQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ReliabilityQosPolicy_swiginit(self, _fastdds_python.new_ReliabilityQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_ReliabilityQosPolicy

    def __eq__(self, b):
        return _fastdds_python.ReliabilityQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.ReliabilityQosPolicy_clear(self)
    kind = property(_fastdds_python.ReliabilityQosPolicy_kind_get, _fastdds_python.ReliabilityQosPolicy_kind_set)
    max_blocking_time = property(_fastdds_python.ReliabilityQosPolicy_max_blocking_time_get, _fastdds_python.ReliabilityQosPolicy_max_blocking_time_set)

# Register ReliabilityQosPolicy in _fastdds_python:
_fastdds_python.ReliabilityQosPolicy_swigregister(ReliabilityQosPolicy)

SHARED_OWNERSHIP_QOS = _fastdds_python.SHARED_OWNERSHIP_QOS
EXCLUSIVE_OWNERSHIP_QOS = _fastdds_python.EXCLUSIVE_OWNERSHIP_QOS
class OwnershipQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.OwnershipQosPolicy_swiginit(self, _fastdds_python.new_OwnershipQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_OwnershipQosPolicy

    def __eq__(self, b):
        return _fastdds_python.OwnershipQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.OwnershipQosPolicy_clear(self)
    kind = property(_fastdds_python.OwnershipQosPolicy_kind_get, _fastdds_python.OwnershipQosPolicy_kind_set)

# Register OwnershipQosPolicy in _fastdds_python:
_fastdds_python.OwnershipQosPolicy_swigregister(OwnershipQosPolicy)

BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS = _fastdds_python.BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS
BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS = _fastdds_python.BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS
class DestinationOrderQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DestinationOrderQosPolicy_swiginit(self, _fastdds_python.new_DestinationOrderQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DestinationOrderQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DestinationOrderQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DestinationOrderQosPolicy_clear(self)
    kind = property(_fastdds_python.DestinationOrderQosPolicy_kind_get, _fastdds_python.DestinationOrderQosPolicy_kind_set)

# Register DestinationOrderQosPolicy in _fastdds_python:
_fastdds_python.DestinationOrderQosPolicy_swigregister(DestinationOrderQosPolicy)

class GenericDataQosPolicy(Parameter_t, QosPolicy, OctetResourceLimitedVector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.GenericDataQosPolicy_swiginit(self, _fastdds_python.new_GenericDataQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_GenericDataQosPolicy

    def __eq__(self, *args):
        return _fastdds_python.GenericDataQosPolicy___eq__(self, *args)

    def set_max_size(self, size):
        return _fastdds_python.GenericDataQosPolicy_set_max_size(self, size)

    def resize(self, new_size):
        return _fastdds_python.GenericDataQosPolicy_resize(self, new_size)

    def dataVec(self):
        return _fastdds_python.GenericDataQosPolicy_dataVec(self)

    def clear(self):
        return _fastdds_python.GenericDataQosPolicy_clear(self)

    def data_vec(self, *args):
        return _fastdds_python.GenericDataQosPolicy_data_vec(self, *args)

    def getValue(self):
        return _fastdds_python.GenericDataQosPolicy_getValue(self)

    def setValue(self, vec):
        return _fastdds_python.GenericDataQosPolicy_setValue(self, vec)

# Register GenericDataQosPolicy in _fastdds_python:
_fastdds_python.GenericDataQosPolicy_swigregister(GenericDataQosPolicy)

class UserDataQosPolicy(GenericDataQosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.UserDataQosPolicy_swiginit(self, _fastdds_python.new_UserDataQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_UserDataQosPolicy

# Register UserDataQosPolicy in _fastdds_python:
_fastdds_python.UserDataQosPolicy_swigregister(UserDataQosPolicy)

class TopicDataQosPolicy(GenericDataQosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.TopicDataQosPolicy_swiginit(self, _fastdds_python.new_TopicDataQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_TopicDataQosPolicy

# Register TopicDataQosPolicy in _fastdds_python:
_fastdds_python.TopicDataQosPolicy_swigregister(TopicDataQosPolicy)

class GroupDataQosPolicy(GenericDataQosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.GroupDataQosPolicy_swiginit(self, _fastdds_python.new_GroupDataQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_GroupDataQosPolicy

# Register GroupDataQosPolicy in _fastdds_python:
_fastdds_python.GroupDataQosPolicy_swigregister(GroupDataQosPolicy)

class TimeBasedFilterQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.TimeBasedFilterQosPolicy_swiginit(self, _fastdds_python.new_TimeBasedFilterQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_TimeBasedFilterQosPolicy

    def __eq__(self, b):
        return _fastdds_python.TimeBasedFilterQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.TimeBasedFilterQosPolicy_clear(self)
    minimum_separation = property(_fastdds_python.TimeBasedFilterQosPolicy_minimum_separation_get, _fastdds_python.TimeBasedFilterQosPolicy_minimum_separation_set)

# Register TimeBasedFilterQosPolicy in _fastdds_python:
_fastdds_python.TimeBasedFilterQosPolicy_swigregister(TimeBasedFilterQosPolicy)

INSTANCE_PRESENTATION_QOS = _fastdds_python.INSTANCE_PRESENTATION_QOS
TOPIC_PRESENTATION_QOS = _fastdds_python.TOPIC_PRESENTATION_QOS
GROUP_PRESENTATION_QOS = _fastdds_python.GROUP_PRESENTATION_QOS
PARAMETER_PRESENTATION_LENGTH = _fastdds_python.PARAMETER_PRESENTATION_LENGTH
class PresentationQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PresentationQosPolicy_swiginit(self, _fastdds_python.new_PresentationQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_PresentationQosPolicy

    def __eq__(self, b):
        return _fastdds_python.PresentationQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.PresentationQosPolicy_clear(self)
    access_scope = property(_fastdds_python.PresentationQosPolicy_access_scope_get, _fastdds_python.PresentationQosPolicy_access_scope_set)
    coherent_access = property(_fastdds_python.PresentationQosPolicy_coherent_access_get, _fastdds_python.PresentationQosPolicy_coherent_access_set)
    ordered_access = property(_fastdds_python.PresentationQosPolicy_ordered_access_get, _fastdds_python.PresentationQosPolicy_ordered_access_set)

# Register PresentationQosPolicy in _fastdds_python:
_fastdds_python.PresentationQosPolicy_swigregister(PresentationQosPolicy)

class Partition_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ptr):
        _fastdds_python.Partition_t_swiginit(self, _fastdds_python.new_Partition_t(ptr))

    def __eq__(self, rhs):
        return _fastdds_python.Partition_t___eq__(self, rhs)

    def __ne__(self, rhs):
        return _fastdds_python.Partition_t___ne__(self, rhs)

    def size(self):
        return _fastdds_python.Partition_t_size(self)

    def name(self):
        return _fastdds_python.Partition_t_name(self)
    __swig_destroy__ = _fastdds_python.delete_Partition_t

# Register Partition_t in _fastdds_python:
_fastdds_python.Partition_t_swigregister(Partition_t)

class PartitionQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.PartitionQosPolicy_swiginit(self, _fastdds_python.new_PartitionQosPolicy(*args))
    __swig_destroy__ = _fastdds_python.delete_PartitionQosPolicy

    def __eq__(self, b):
        return _fastdds_python.PartitionQosPolicy___eq__(self, b)

    def begin(self):
        return _fastdds_python.PartitionQosPolicy_begin(self)

    def end(self):
        return _fastdds_python.PartitionQosPolicy_end(self)

    def size(self):
        return _fastdds_python.PartitionQosPolicy_size(self)

    def empty(self):
        return _fastdds_python.PartitionQosPolicy_empty(self)

    def set_max_size(self, size):
        return _fastdds_python.PartitionQosPolicy_set_max_size(self, size)

    def max_size(self):
        return _fastdds_python.PartitionQosPolicy_max_size(self)

    def push_back(self, name):
        return _fastdds_python.PartitionQosPolicy_push_back(self, name)

    def clear(self):
        return _fastdds_python.PartitionQosPolicy_clear(self)

    def getNames(self):
        return _fastdds_python.PartitionQosPolicy_getNames(self)

    def setNames(self, nam):
        return _fastdds_python.PartitionQosPolicy_setNames(self, nam)

    def names(self, *args):
        return _fastdds_python.PartitionQosPolicy_names(self, *args)

    def __len__(self):
        return _fastdds_python.PartitionQosPolicy___len__(self)

    def __getitem__(self, i):
        return _fastdds_python.PartitionQosPolicy___getitem__(self, i)

# Register PartitionQosPolicy in _fastdds_python:
_fastdds_python.PartitionQosPolicy_swigregister(PartitionQosPolicy)

KEEP_LAST_HISTORY_QOS = _fastdds_python.KEEP_LAST_HISTORY_QOS
KEEP_ALL_HISTORY_QOS = _fastdds_python.KEEP_ALL_HISTORY_QOS
class HistoryQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.HistoryQosPolicy_swiginit(self, _fastdds_python.new_HistoryQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_HistoryQosPolicy

    def __eq__(self, b):
        return _fastdds_python.HistoryQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.HistoryQosPolicy_clear(self)
    kind = property(_fastdds_python.HistoryQosPolicy_kind_get, _fastdds_python.HistoryQosPolicy_kind_set)
    depth = property(_fastdds_python.HistoryQosPolicy_depth_get, _fastdds_python.HistoryQosPolicy_depth_set)

# Register HistoryQosPolicy in _fastdds_python:
_fastdds_python.HistoryQosPolicy_swigregister(HistoryQosPolicy)

class ResourceLimitsQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_samples = property(_fastdds_python.ResourceLimitsQosPolicy_max_samples_get, _fastdds_python.ResourceLimitsQosPolicy_max_samples_set)
    max_instances = property(_fastdds_python.ResourceLimitsQosPolicy_max_instances_get, _fastdds_python.ResourceLimitsQosPolicy_max_instances_set)
    max_samples_per_instance = property(_fastdds_python.ResourceLimitsQosPolicy_max_samples_per_instance_get, _fastdds_python.ResourceLimitsQosPolicy_max_samples_per_instance_set)
    allocated_samples = property(_fastdds_python.ResourceLimitsQosPolicy_allocated_samples_get, _fastdds_python.ResourceLimitsQosPolicy_allocated_samples_set)
    extra_samples = property(_fastdds_python.ResourceLimitsQosPolicy_extra_samples_get, _fastdds_python.ResourceLimitsQosPolicy_extra_samples_set)

    def __init__(self):
        _fastdds_python.ResourceLimitsQosPolicy_swiginit(self, _fastdds_python.new_ResourceLimitsQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_ResourceLimitsQosPolicy

    def __eq__(self, b):
        return _fastdds_python.ResourceLimitsQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.ResourceLimitsQosPolicy_clear(self)

# Register ResourceLimitsQosPolicy in _fastdds_python:
_fastdds_python.ResourceLimitsQosPolicy_swigregister(ResourceLimitsQosPolicy)

class DurabilityServiceQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DurabilityServiceQosPolicy_swiginit(self, _fastdds_python.new_DurabilityServiceQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DurabilityServiceQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DurabilityServiceQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DurabilityServiceQosPolicy_clear(self)
    service_cleanup_delay = property(_fastdds_python.DurabilityServiceQosPolicy_service_cleanup_delay_get, _fastdds_python.DurabilityServiceQosPolicy_service_cleanup_delay_set)
    history_kind = property(_fastdds_python.DurabilityServiceQosPolicy_history_kind_get, _fastdds_python.DurabilityServiceQosPolicy_history_kind_set)
    history_depth = property(_fastdds_python.DurabilityServiceQosPolicy_history_depth_get, _fastdds_python.DurabilityServiceQosPolicy_history_depth_set)
    max_samples = property(_fastdds_python.DurabilityServiceQosPolicy_max_samples_get, _fastdds_python.DurabilityServiceQosPolicy_max_samples_set)
    max_instances = property(_fastdds_python.DurabilityServiceQosPolicy_max_instances_get, _fastdds_python.DurabilityServiceQosPolicy_max_instances_set)
    max_samples_per_instance = property(_fastdds_python.DurabilityServiceQosPolicy_max_samples_per_instance_get, _fastdds_python.DurabilityServiceQosPolicy_max_samples_per_instance_set)

# Register DurabilityServiceQosPolicy in _fastdds_python:
_fastdds_python.DurabilityServiceQosPolicy_swigregister(DurabilityServiceQosPolicy)

class LifespanQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.LifespanQosPolicy_swiginit(self, _fastdds_python.new_LifespanQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_LifespanQosPolicy

    def __eq__(self, b):
        return _fastdds_python.LifespanQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.LifespanQosPolicy_clear(self)
    duration = property(_fastdds_python.LifespanQosPolicy_duration_get, _fastdds_python.LifespanQosPolicy_duration_set)

# Register LifespanQosPolicy in _fastdds_python:
_fastdds_python.LifespanQosPolicy_swigregister(LifespanQosPolicy)

class OwnershipStrengthQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.OwnershipStrengthQosPolicy_swiginit(self, _fastdds_python.new_OwnershipStrengthQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_OwnershipStrengthQosPolicy

    def __eq__(self, b):
        return _fastdds_python.OwnershipStrengthQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.OwnershipStrengthQosPolicy_clear(self)
    value = property(_fastdds_python.OwnershipStrengthQosPolicy_value_get, _fastdds_python.OwnershipStrengthQosPolicy_value_set)

# Register OwnershipStrengthQosPolicy in _fastdds_python:
_fastdds_python.OwnershipStrengthQosPolicy_swigregister(OwnershipStrengthQosPolicy)

class TransportPriorityQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_fastdds_python.TransportPriorityQosPolicy_value_get, _fastdds_python.TransportPriorityQosPolicy_value_set)

    def __init__(self):
        _fastdds_python.TransportPriorityQosPolicy_swiginit(self, _fastdds_python.new_TransportPriorityQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_TransportPriorityQosPolicy

    def __eq__(self, b):
        return _fastdds_python.TransportPriorityQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.TransportPriorityQosPolicy_clear(self)

# Register TransportPriorityQosPolicy in _fastdds_python:
_fastdds_python.TransportPriorityQosPolicy_swigregister(TransportPriorityQosPolicy)

SYNCHRONOUS_PUBLISH_MODE = _fastdds_python.SYNCHRONOUS_PUBLISH_MODE
ASYNCHRONOUS_PUBLISH_MODE = _fastdds_python.ASYNCHRONOUS_PUBLISH_MODE
class PublishModeQosPolicy(QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kind = property(_fastdds_python.PublishModeQosPolicy_kind_get, _fastdds_python.PublishModeQosPolicy_kind_set)
    flow_controller_name = property(_fastdds_python.PublishModeQosPolicy_flow_controller_name_get, _fastdds_python.PublishModeQosPolicy_flow_controller_name_set)

    def clear(self):
        return _fastdds_python.PublishModeQosPolicy_clear(self)

    def __eq__(self, b):
        return _fastdds_python.PublishModeQosPolicy___eq__(self, b)

    def __init__(self):
        _fastdds_python.PublishModeQosPolicy_swiginit(self, _fastdds_python.new_PublishModeQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_PublishModeQosPolicy

# Register PublishModeQosPolicy in _fastdds_python:
_fastdds_python.PublishModeQosPolicy_swigregister(PublishModeQosPolicy)

XCDR_DATA_REPRESENTATION = _fastdds_python.XCDR_DATA_REPRESENTATION
XML_DATA_REPRESENTATION = _fastdds_python.XML_DATA_REPRESENTATION
XCDR2_DATA_REPRESENTATION = _fastdds_python.XCDR2_DATA_REPRESENTATION
class DataRepresentationQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_value = property(_fastdds_python.DataRepresentationQosPolicy_m_value_get, _fastdds_python.DataRepresentationQosPolicy_m_value_set)

    def __init__(self):
        _fastdds_python.DataRepresentationQosPolicy_swiginit(self, _fastdds_python.new_DataRepresentationQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DataRepresentationQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DataRepresentationQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DataRepresentationQosPolicy_clear(self)

# Register DataRepresentationQosPolicy in _fastdds_python:
_fastdds_python.DataRepresentationQosPolicy_swigregister(DataRepresentationQosPolicy)
DEFAULT_DATA_REPRESENTATION = cvar.DEFAULT_DATA_REPRESENTATION

DISALLOW_TYPE_COERCION = _fastdds_python.DISALLOW_TYPE_COERCION
ALLOW_TYPE_COERCION = _fastdds_python.ALLOW_TYPE_COERCION
class TypeConsistencyEnforcementQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_kind = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_kind_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_kind_set)
    m_ignore_sequence_bounds = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_sequence_bounds_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_sequence_bounds_set)
    m_ignore_string_bounds = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_string_bounds_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_string_bounds_set)
    m_ignore_member_names = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_member_names_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_ignore_member_names_set)
    m_prevent_type_widening = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_prevent_type_widening_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_prevent_type_widening_set)
    m_force_type_validation = property(_fastdds_python.TypeConsistencyEnforcementQosPolicy_m_force_type_validation_get, _fastdds_python.TypeConsistencyEnforcementQosPolicy_m_force_type_validation_set)

    def __init__(self):
        _fastdds_python.TypeConsistencyEnforcementQosPolicy_swiginit(self, _fastdds_python.new_TypeConsistencyEnforcementQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_TypeConsistencyEnforcementQosPolicy

    def __eq__(self, b):
        return _fastdds_python.TypeConsistencyEnforcementQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.TypeConsistencyEnforcementQosPolicy_clear(self)

# Register TypeConsistencyEnforcementQosPolicy in _fastdds_python:
_fastdds_python.TypeConsistencyEnforcementQosPolicy_swigregister(TypeConsistencyEnforcementQosPolicy)

class DisablePositiveACKsQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DisablePositiveACKsQosPolicy_swiginit(self, _fastdds_python.new_DisablePositiveACKsQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_DisablePositiveACKsQosPolicy

    def __eq__(self, b):
        return _fastdds_python.DisablePositiveACKsQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DisablePositiveACKsQosPolicy_clear(self)
    enabled = property(_fastdds_python.DisablePositiveACKsQosPolicy_enabled_get, _fastdds_python.DisablePositiveACKsQosPolicy_enabled_set)
    duration = property(_fastdds_python.DisablePositiveACKsQosPolicy_duration_get, _fastdds_python.DisablePositiveACKsQosPolicy_duration_set)

# Register DisablePositiveACKsQosPolicy in _fastdds_python:
_fastdds_python.DisablePositiveACKsQosPolicy_swigregister(DisablePositiveACKsQosPolicy)

class TypeIdV1(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_type_identifier = property(_fastdds_python.TypeIdV1_m_type_identifier_get, _fastdds_python.TypeIdV1_m_type_identifier_set)

    def __init__(self, *args):
        _fastdds_python.TypeIdV1_swiginit(self, _fastdds_python.new_TypeIdV1(*args))
    __swig_destroy__ = _fastdds_python.delete_TypeIdV1

    def clear(self):
        return _fastdds_python.TypeIdV1_clear(self)

    def get(self):
        return _fastdds_python.TypeIdV1_get(self)

# Register TypeIdV1 in _fastdds_python:
_fastdds_python.TypeIdV1_swigregister(TypeIdV1)

class TypeObjectV1(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_type_object = property(_fastdds_python.TypeObjectV1_m_type_object_get, _fastdds_python.TypeObjectV1_m_type_object_set)

    def __init__(self, *args):
        _fastdds_python.TypeObjectV1_swiginit(self, _fastdds_python.new_TypeObjectV1(*args))
    __swig_destroy__ = _fastdds_python.delete_TypeObjectV1

    def clear(self):
        return _fastdds_python.TypeObjectV1_clear(self)

    def get(self):
        return _fastdds_python.TypeObjectV1_get(self)

# Register TypeObjectV1 in _fastdds_python:
_fastdds_python.TypeObjectV1_swigregister(TypeObjectV1)

class TypeInformationParameter(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_information = property(_fastdds_python.TypeInformationParameter_type_information_get, _fastdds_python.TypeInformationParameter_type_information_set)

    def __init__(self, *args):
        _fastdds_python.TypeInformationParameter_swiginit(self, _fastdds_python.new_TypeInformationParameter(*args))
    __swig_destroy__ = _fastdds_python.delete_TypeInformationParameter

    def clear(self):
        return _fastdds_python.TypeInformationParameter_clear(self)

    def assigned(self, *args):
        return _fastdds_python.TypeInformationParameter_assigned(self, *args)

# Register TypeInformationParameter in _fastdds_python:
_fastdds_python.TypeInformationParameter_swigregister(TypeInformationParameter)

class WireProtocolConfigQos(QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.WireProtocolConfigQos_swiginit(self, _fastdds_python.new_WireProtocolConfigQos())
    __swig_destroy__ = _fastdds_python.delete_WireProtocolConfigQos

    def __eq__(self, b):
        return _fastdds_python.WireProtocolConfigQos___eq__(self, b)

    def clear(self):
        return _fastdds_python.WireProtocolConfigQos_clear(self)
    prefix = property(_fastdds_python.WireProtocolConfigQos_prefix_get, _fastdds_python.WireProtocolConfigQos_prefix_set)
    participant_id = property(_fastdds_python.WireProtocolConfigQos_participant_id_get, _fastdds_python.WireProtocolConfigQos_participant_id_set)
    builtin = property(_fastdds_python.WireProtocolConfigQos_builtin_get, _fastdds_python.WireProtocolConfigQos_builtin_set)
    port = property(_fastdds_python.WireProtocolConfigQos_port_get, _fastdds_python.WireProtocolConfigQos_port_set)
    default_unicast_locator_list = property(_fastdds_python.WireProtocolConfigQos_default_unicast_locator_list_get, _fastdds_python.WireProtocolConfigQos_default_unicast_locator_list_set)
    default_multicast_locator_list = property(_fastdds_python.WireProtocolConfigQos_default_multicast_locator_list_get, _fastdds_python.WireProtocolConfigQos_default_multicast_locator_list_set)
    default_external_unicast_locators = property(_fastdds_python.WireProtocolConfigQos_default_external_unicast_locators_get, _fastdds_python.WireProtocolConfigQos_default_external_unicast_locators_set)
    ignore_non_matching_locators = property(_fastdds_python.WireProtocolConfigQos_ignore_non_matching_locators_get, _fastdds_python.WireProtocolConfigQos_ignore_non_matching_locators_set)

# Register WireProtocolConfigQos in _fastdds_python:
_fastdds_python.WireProtocolConfigQos_swigregister(WireProtocolConfigQos)

class TransportConfigQos(QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.TransportConfigQos_swiginit(self, _fastdds_python.new_TransportConfigQos())
    __swig_destroy__ = _fastdds_python.delete_TransportConfigQos

    def __eq__(self, b):
        return _fastdds_python.TransportConfigQos___eq__(self, b)

    def clear(self):
        return _fastdds_python.TransportConfigQos_clear(self)
    user_transports = property(_fastdds_python.TransportConfigQos_user_transports_get, _fastdds_python.TransportConfigQos_user_transports_set)
    use_builtin_transports = property(_fastdds_python.TransportConfigQos_use_builtin_transports_get, _fastdds_python.TransportConfigQos_use_builtin_transports_set)
    send_socket_buffer_size = property(_fastdds_python.TransportConfigQos_send_socket_buffer_size_get, _fastdds_python.TransportConfigQos_send_socket_buffer_size_set)
    listen_socket_buffer_size = property(_fastdds_python.TransportConfigQos_listen_socket_buffer_size_get, _fastdds_python.TransportConfigQos_listen_socket_buffer_size_set)
    builtin_transports_reception_threads_ = property(_fastdds_python.TransportConfigQos_builtin_transports_reception_threads__get, _fastdds_python.TransportConfigQos_builtin_transports_reception_threads__set)
    max_msg_size_no_frag = property(_fastdds_python.TransportConfigQos_max_msg_size_no_frag_get, _fastdds_python.TransportConfigQos_max_msg_size_no_frag_set)
    netmask_filter = property(_fastdds_python.TransportConfigQos_netmask_filter_get, _fastdds_python.TransportConfigQos_netmask_filter_set)

# Register TransportConfigQos in _fastdds_python:
_fastdds_python.TransportConfigQos_swigregister(TransportConfigQos)

class RTPSEndpointQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RTPSEndpointQos_swiginit(self, _fastdds_python.new_RTPSEndpointQos())
    __swig_destroy__ = _fastdds_python.delete_RTPSEndpointQos

    def __eq__(self, b):
        return _fastdds_python.RTPSEndpointQos___eq__(self, b)
    unicast_locator_list = property(_fastdds_python.RTPSEndpointQos_unicast_locator_list_get, _fastdds_python.RTPSEndpointQos_unicast_locator_list_set)
    multicast_locator_list = property(_fastdds_python.RTPSEndpointQos_multicast_locator_list_get, _fastdds_python.RTPSEndpointQos_multicast_locator_list_set)
    remote_locator_list = property(_fastdds_python.RTPSEndpointQos_remote_locator_list_get, _fastdds_python.RTPSEndpointQos_remote_locator_list_set)
    external_unicast_locators = property(_fastdds_python.RTPSEndpointQos_external_unicast_locators_get, _fastdds_python.RTPSEndpointQos_external_unicast_locators_set)
    ignore_non_matching_locators = property(_fastdds_python.RTPSEndpointQos_ignore_non_matching_locators_get, _fastdds_python.RTPSEndpointQos_ignore_non_matching_locators_set)
    user_defined_id = property(_fastdds_python.RTPSEndpointQos_user_defined_id_get, _fastdds_python.RTPSEndpointQos_user_defined_id_set)
    entity_id = property(_fastdds_python.RTPSEndpointQos_entity_id_get, _fastdds_python.RTPSEndpointQos_entity_id_set)
    history_memory_policy = property(_fastdds_python.RTPSEndpointQos_history_memory_policy_get, _fastdds_python.RTPSEndpointQos_history_memory_policy_set)

# Register RTPSEndpointQos in _fastdds_python:
_fastdds_python.RTPSEndpointQos_swigregister(RTPSEndpointQos)

class WriterResourceLimitsQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.WriterResourceLimitsQos_swiginit(self, _fastdds_python.new_WriterResourceLimitsQos())
    __swig_destroy__ = _fastdds_python.delete_WriterResourceLimitsQos

    def __eq__(self, b):
        return _fastdds_python.WriterResourceLimitsQos___eq__(self, b)
    matched_subscriber_allocation = property(_fastdds_python.WriterResourceLimitsQos_matched_subscriber_allocation_get, _fastdds_python.WriterResourceLimitsQos_matched_subscriber_allocation_set)
    reader_filters_allocation = property(_fastdds_python.WriterResourceLimitsQos_reader_filters_allocation_get, _fastdds_python.WriterResourceLimitsQos_reader_filters_allocation_set)

# Register WriterResourceLimitsQos in _fastdds_python:
_fastdds_python.WriterResourceLimitsQos_swigregister(WriterResourceLimitsQos)

AUTO = _fastdds_python.AUTO
ON = _fastdds_python.ON
OFF = _fastdds_python.OFF
class DataSharingQosPolicy(Parameter_t, QosPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_DataSharingQosPolicy

    def __init__(self, *args):
        _fastdds_python.DataSharingQosPolicy_swiginit(self, _fastdds_python.new_DataSharingQosPolicy(*args))

    def __eq__(self, b):
        return _fastdds_python.DataSharingQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.DataSharingQosPolicy_clear(self)

    def kind(self):
        return _fastdds_python.DataSharingQosPolicy_kind(self)

    def shm_directory(self):
        return _fastdds_python.DataSharingQosPolicy_shm_directory(self)

    def domain_ids(self):
        return _fastdds_python.DataSharingQosPolicy_domain_ids(self)

    def set_max_domains(self, size):
        return _fastdds_python.DataSharingQosPolicy_set_max_domains(self, size)

    def max_domains(self):
        return _fastdds_python.DataSharingQosPolicy_max_domains(self)

    def automatic(self, *args):
        return _fastdds_python.DataSharingQosPolicy_automatic(self, *args)

    def on(self, *args):
        return _fastdds_python.DataSharingQosPolicy_on(self, *args)

    def off(self):
        return _fastdds_python.DataSharingQosPolicy_off(self)

    def add_domain_id(self, *args):
        return _fastdds_python.DataSharingQosPolicy_add_domain_id(self, *args)

    def data_sharing_listener_thread(self, *args):
        return _fastdds_python.DataSharingQosPolicy_data_sharing_listener_thread(self, *args)

# Register DataSharingQosPolicy in _fastdds_python:
_fastdds_python.DataSharingQosPolicy_swigregister(DataSharingQosPolicy)

class Time_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INFINITE_SECONDS = _fastdds_python.Time_t_INFINITE_SECONDS
    INFINITE_NANOSECONDS = _fastdds_python.Time_t_INFINITE_NANOSECONDS
    seconds = property(_fastdds_python.Time_t_seconds_get, _fastdds_python.Time_t_seconds_set)
    nanosec = property(_fastdds_python.Time_t_nanosec_get, _fastdds_python.Time_t_nanosec_set)

    def __init__(self, *args):
        _fastdds_python.Time_t_swiginit(self, _fastdds_python.new_Time_t(*args))

    def fraction(self, *args):
        return _fastdds_python.Time_t_fraction(self, *args)

    def to_ns(self):
        return _fastdds_python.Time_t_to_ns(self)

    @staticmethod
    def now(ret):
        return _fastdds_python.Time_t_now(ret)

    @staticmethod
    def is_infinite(*args):
        return _fastdds_python.Time_t_is_infinite(*args)

    def __eq__(self, other):
        return _fastdds_python.Time_t___eq__(self, other)

    def __ne__(self, other):
        return _fastdds_python.Time_t___ne__(self, other)

    def __lt__(self, other):
        return _fastdds_python.Time_t___lt__(self, other)

    def __gt__(self, other):
        return _fastdds_python.Time_t___gt__(self, other)

    def __le__(self, other):
        return _fastdds_python.Time_t___le__(self, other)

    def __ge__(self, other):
        return _fastdds_python.Time_t___ge__(self, other)

    def __add__(self, other):
        return _fastdds_python.Time_t___add__(self, other)

    def __sub__(self, other):
        return _fastdds_python.Time_t___sub__(self, other)
    __swig_destroy__ = _fastdds_python.delete_Time_t

# Register Time_t in _fastdds_python:
_fastdds_python.Time_t_swigregister(Time_t)

def Time_t_now(ret):
    return _fastdds_python.Time_t_now(ret)

def Time_t_is_infinite(*args):
    return _fastdds_python.Time_t_is_infinite(*args)

class Duration_t(Time_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.Duration_t_swiginit(self, _fastdds_python.new_Duration_t(*args))
    __swig_destroy__ = _fastdds_python.delete_Duration_t

# Register Duration_t in _fastdds_python:
_fastdds_python.Duration_t_swigregister(Duration_t)
c_TimeInfinite = cvar.c_TimeInfinite
c_TimeZero = cvar.c_TimeZero
c_TimeInvalid = cvar.c_TimeInvalid

class IContentFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def evaluate(self, payload, sample_info, reader_guid):
        return _fastdds_python.IContentFilter_evaluate(self, payload, sample_info, reader_guid)
    __swig_destroy__ = _fastdds_python.delete_IContentFilter

# Register IContentFilter in _fastdds_python:
_fastdds_python.IContentFilter_swigregister(IContentFilter)

class FilterSampleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sample_identity = property(_fastdds_python.FilterSampleInfo_sample_identity_get, _fastdds_python.FilterSampleInfo_sample_identity_set)
    related_sample_identity = property(_fastdds_python.FilterSampleInfo_related_sample_identity_get, _fastdds_python.FilterSampleInfo_related_sample_identity_set)

    def __init__(self):
        _fastdds_python.FilterSampleInfo_swiginit(self, _fastdds_python.new_FilterSampleInfo())
    __swig_destroy__ = _fastdds_python.delete_FilterSampleInfo

# Register FilterSampleInfo in _fastdds_python:
_fastdds_python.FilterSampleInfo_swigregister(FilterSampleInfo)

class TopicDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_TopicDataType

    def serialize(self, data, payload, data_representation):
        return _fastdds_python.TopicDataType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _fastdds_python.TopicDataType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _fastdds_python.TopicDataType_calculate_serialized_size(self, data, data_representation)

    def create_data(self):
        return _fastdds_python.TopicDataType_create_data(self)

    def delete_data(self, data):
        return _fastdds_python.TopicDataType_delete_data(self, data)

    def compute_key(self, *args):
        return _fastdds_python.TopicDataType_compute_key(self, *args)

    def set_name(self, *args):
        return _fastdds_python.TopicDataType_set_name(self, *args)

    def get_name(self):
        return _fastdds_python.TopicDataType_get_name(self)

    def type_identifiers(self):
        return _fastdds_python.TopicDataType_type_identifiers(self)

    def is_bounded(self):
        return _fastdds_python.TopicDataType_is_bounded(self)

    def is_plain(self, arg2):
        return _fastdds_python.TopicDataType_is_plain(self, arg2)

    def construct_sample(self, memory):
        return _fastdds_python.TopicDataType_construct_sample(self, memory)

    def register_type_object_representation(self):
        return _fastdds_python.TopicDataType_register_type_object_representation(self)
    max_serialized_type_size = property(_fastdds_python.TopicDataType_max_serialized_type_size_get, _fastdds_python.TopicDataType_max_serialized_type_size_set)
    is_compute_key_provided = property(_fastdds_python.TopicDataType_is_compute_key_provided_get, _fastdds_python.TopicDataType_is_compute_key_provided_set)

# Register TopicDataType in _fastdds_python:
_fastdds_python.TopicDataType_swigregister(TopicDataType)

class IContentFilterFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def create_content_filter(self, filter_class_name, type_name, data_type, filter_expression, filter_parameters, filter_instance):
        return _fastdds_python.IContentFilterFactory_create_content_filter(self, filter_class_name, type_name, data_type, filter_expression, filter_parameters, filter_instance)

    def delete_content_filter(self, filter_class_name, filter_instance):
        return _fastdds_python.IContentFilterFactory_delete_content_filter(self, filter_class_name, filter_instance)
    __swig_destroy__ = _fastdds_python.delete_IContentFilterFactory

# Register IContentFilterFactory in _fastdds_python:
_fastdds_python.IContentFilterFactory_swigregister(IContentFilterFactory)

class TopicDataTypeShrPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.TopicDataTypeShrPtr_swiginit(self, _fastdds_python.new_TopicDataTypeShrPtr())
    __swig_destroy__ = _fastdds_python.delete_TopicDataTypeShrPtr

# Register TopicDataTypeShrPtr in _fastdds_python:
_fastdds_python.TopicDataTypeShrPtr_swigregister(TopicDataTypeShrPtr)

class TypeSupport(TopicDataTypeShrPtr):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def register_type(self, *args):
        return _fastdds_python.TypeSupport_register_type(self, *args)

    def get_type_name(self):
        return _fastdds_python.TypeSupport_get_type_name(self)

    def serialize(self, data, payload, data_representation):
        return _fastdds_python.TypeSupport_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _fastdds_python.TypeSupport_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _fastdds_python.TypeSupport_calculate_serialized_size(self, data, data_representation)

    def create_data(self):
        return _fastdds_python.TypeSupport_create_data(self)

    def delete_data(self, data):
        return _fastdds_python.TypeSupport_delete_data(self, data)

    def compute_key(self, *args):
        return _fastdds_python.TypeSupport_compute_key(self, *args)

    def empty(self):
        return _fastdds_python.TypeSupport_empty(self)

    def is_bounded(self):
        return _fastdds_python.TypeSupport_is_bounded(self)

    def is_plain(self, data_representation):
        return _fastdds_python.TypeSupport_is_plain(self, data_representation)

    def __ne__(self, arg2):
        return _fastdds_python.TypeSupport___ne__(self, arg2)

    def __eq__(self, *args):
        return _fastdds_python.TypeSupport___eq__(self, *args)

    def __init__(self, *args):
        _fastdds_python.TypeSupport_swiginit(self, _fastdds_python.new_TypeSupport(*args))

    def set(self, ptr):
        return _fastdds_python.TypeSupport_set(self, ptr)
    __swig_destroy__ = _fastdds_python.delete_TypeSupport

# Register TypeSupport in _fastdds_python:
_fastdds_python.TypeSupport_swigregister(TypeSupport)

class BuiltinTopicKey_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_fastdds_python.BuiltinTopicKey_t_value_get, _fastdds_python.BuiltinTopicKey_t_value_set)

    def __init__(self):
        _fastdds_python.BuiltinTopicKey_t_swiginit(self, _fastdds_python.new_BuiltinTopicKey_t())
    __swig_destroy__ = _fastdds_python.delete_BuiltinTopicKey_t

# Register BuiltinTopicKey_t in _fastdds_python:
_fastdds_python.BuiltinTopicKey_t_swigregister(BuiltinTopicKey_t)

class SubscriptionBuiltinTopicData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_fastdds_python.SubscriptionBuiltinTopicData_key_get, _fastdds_python.SubscriptionBuiltinTopicData_key_set)
    participant_key = property(_fastdds_python.SubscriptionBuiltinTopicData_participant_key_get, _fastdds_python.SubscriptionBuiltinTopicData_participant_key_set)
    topic_name = property(_fastdds_python.SubscriptionBuiltinTopicData_topic_name_get, _fastdds_python.SubscriptionBuiltinTopicData_topic_name_set)
    type_name = property(_fastdds_python.SubscriptionBuiltinTopicData_type_name_get, _fastdds_python.SubscriptionBuiltinTopicData_type_name_set)
    topic_kind = property(_fastdds_python.SubscriptionBuiltinTopicData_topic_kind_get, _fastdds_python.SubscriptionBuiltinTopicData_topic_kind_set)
    durability = property(_fastdds_python.SubscriptionBuiltinTopicData_durability_get, _fastdds_python.SubscriptionBuiltinTopicData_durability_set)
    deadline = property(_fastdds_python.SubscriptionBuiltinTopicData_deadline_get, _fastdds_python.SubscriptionBuiltinTopicData_deadline_set)
    latency_budget = property(_fastdds_python.SubscriptionBuiltinTopicData_latency_budget_get, _fastdds_python.SubscriptionBuiltinTopicData_latency_budget_set)
    lifespan = property(_fastdds_python.SubscriptionBuiltinTopicData_lifespan_get, _fastdds_python.SubscriptionBuiltinTopicData_lifespan_set)
    liveliness = property(_fastdds_python.SubscriptionBuiltinTopicData_liveliness_get, _fastdds_python.SubscriptionBuiltinTopicData_liveliness_set)
    reliability = property(_fastdds_python.SubscriptionBuiltinTopicData_reliability_get, _fastdds_python.SubscriptionBuiltinTopicData_reliability_set)
    ownership = property(_fastdds_python.SubscriptionBuiltinTopicData_ownership_get, _fastdds_python.SubscriptionBuiltinTopicData_ownership_set)
    destination_order = property(_fastdds_python.SubscriptionBuiltinTopicData_destination_order_get, _fastdds_python.SubscriptionBuiltinTopicData_destination_order_set)
    user_data = property(_fastdds_python.SubscriptionBuiltinTopicData_user_data_get, _fastdds_python.SubscriptionBuiltinTopicData_user_data_set)
    time_based_filter = property(_fastdds_python.SubscriptionBuiltinTopicData_time_based_filter_get, _fastdds_python.SubscriptionBuiltinTopicData_time_based_filter_set)
    presentation = property(_fastdds_python.SubscriptionBuiltinTopicData_presentation_get, _fastdds_python.SubscriptionBuiltinTopicData_presentation_set)
    partition = property(_fastdds_python.SubscriptionBuiltinTopicData_partition_get, _fastdds_python.SubscriptionBuiltinTopicData_partition_set)
    topic_data = property(_fastdds_python.SubscriptionBuiltinTopicData_topic_data_get, _fastdds_python.SubscriptionBuiltinTopicData_topic_data_set)
    group_data = property(_fastdds_python.SubscriptionBuiltinTopicData_group_data_get, _fastdds_python.SubscriptionBuiltinTopicData_group_data_set)
    type_information = property(_fastdds_python.SubscriptionBuiltinTopicData_type_information_get, _fastdds_python.SubscriptionBuiltinTopicData_type_information_set)
    representation = property(_fastdds_python.SubscriptionBuiltinTopicData_representation_get, _fastdds_python.SubscriptionBuiltinTopicData_representation_set)
    type_consistency = property(_fastdds_python.SubscriptionBuiltinTopicData_type_consistency_get, _fastdds_python.SubscriptionBuiltinTopicData_type_consistency_set)
    content_filter = property(_fastdds_python.SubscriptionBuiltinTopicData_content_filter_get, _fastdds_python.SubscriptionBuiltinTopicData_content_filter_set)
    disable_positive_acks = property(_fastdds_python.SubscriptionBuiltinTopicData_disable_positive_acks_get, _fastdds_python.SubscriptionBuiltinTopicData_disable_positive_acks_set)
    data_sharing = property(_fastdds_python.SubscriptionBuiltinTopicData_data_sharing_get, _fastdds_python.SubscriptionBuiltinTopicData_data_sharing_set)
    guid = property(_fastdds_python.SubscriptionBuiltinTopicData_guid_get, _fastdds_python.SubscriptionBuiltinTopicData_guid_set)
    participant_guid = property(_fastdds_python.SubscriptionBuiltinTopicData_participant_guid_get, _fastdds_python.SubscriptionBuiltinTopicData_participant_guid_set)
    remote_locators = property(_fastdds_python.SubscriptionBuiltinTopicData_remote_locators_get, _fastdds_python.SubscriptionBuiltinTopicData_remote_locators_set)
    loopback_transformation = property(_fastdds_python.SubscriptionBuiltinTopicData_loopback_transformation_get, _fastdds_python.SubscriptionBuiltinTopicData_loopback_transformation_set)
    expects_inline_qos = property(_fastdds_python.SubscriptionBuiltinTopicData_expects_inline_qos_get, _fastdds_python.SubscriptionBuiltinTopicData_expects_inline_qos_set)

    def __init__(self):
        _fastdds_python.SubscriptionBuiltinTopicData_swiginit(self, _fastdds_python.new_SubscriptionBuiltinTopicData())
    __swig_destroy__ = _fastdds_python.delete_SubscriptionBuiltinTopicData

# Register SubscriptionBuiltinTopicData in _fastdds_python:
_fastdds_python.SubscriptionBuiltinTopicData_swigregister(SubscriptionBuiltinTopicData)

class PublicationBuiltinTopicData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PublicationBuiltinTopicData_swiginit(self, _fastdds_python.new_PublicationBuiltinTopicData())
    key = property(_fastdds_python.PublicationBuiltinTopicData_key_get, _fastdds_python.PublicationBuiltinTopicData_key_set)
    participant_key = property(_fastdds_python.PublicationBuiltinTopicData_participant_key_get, _fastdds_python.PublicationBuiltinTopicData_participant_key_set)
    topic_name = property(_fastdds_python.PublicationBuiltinTopicData_topic_name_get, _fastdds_python.PublicationBuiltinTopicData_topic_name_set)
    type_name = property(_fastdds_python.PublicationBuiltinTopicData_type_name_get, _fastdds_python.PublicationBuiltinTopicData_type_name_set)
    topic_kind = property(_fastdds_python.PublicationBuiltinTopicData_topic_kind_get, _fastdds_python.PublicationBuiltinTopicData_topic_kind_set)
    durability = property(_fastdds_python.PublicationBuiltinTopicData_durability_get, _fastdds_python.PublicationBuiltinTopicData_durability_set)
    durability_service = property(_fastdds_python.PublicationBuiltinTopicData_durability_service_get, _fastdds_python.PublicationBuiltinTopicData_durability_service_set)
    deadline = property(_fastdds_python.PublicationBuiltinTopicData_deadline_get, _fastdds_python.PublicationBuiltinTopicData_deadline_set)
    latency_budget = property(_fastdds_python.PublicationBuiltinTopicData_latency_budget_get, _fastdds_python.PublicationBuiltinTopicData_latency_budget_set)
    liveliness = property(_fastdds_python.PublicationBuiltinTopicData_liveliness_get, _fastdds_python.PublicationBuiltinTopicData_liveliness_set)
    reliability = property(_fastdds_python.PublicationBuiltinTopicData_reliability_get, _fastdds_python.PublicationBuiltinTopicData_reliability_set)
    lifespan = property(_fastdds_python.PublicationBuiltinTopicData_lifespan_get, _fastdds_python.PublicationBuiltinTopicData_lifespan_set)
    user_data = property(_fastdds_python.PublicationBuiltinTopicData_user_data_get, _fastdds_python.PublicationBuiltinTopicData_user_data_set)
    ownership = property(_fastdds_python.PublicationBuiltinTopicData_ownership_get, _fastdds_python.PublicationBuiltinTopicData_ownership_set)
    ownership_strength = property(_fastdds_python.PublicationBuiltinTopicData_ownership_strength_get, _fastdds_python.PublicationBuiltinTopicData_ownership_strength_set)
    destination_order = property(_fastdds_python.PublicationBuiltinTopicData_destination_order_get, _fastdds_python.PublicationBuiltinTopicData_destination_order_set)
    presentation = property(_fastdds_python.PublicationBuiltinTopicData_presentation_get, _fastdds_python.PublicationBuiltinTopicData_presentation_set)
    partition = property(_fastdds_python.PublicationBuiltinTopicData_partition_get, _fastdds_python.PublicationBuiltinTopicData_partition_set)
    topic_data = property(_fastdds_python.PublicationBuiltinTopicData_topic_data_get, _fastdds_python.PublicationBuiltinTopicData_topic_data_set)
    group_data = property(_fastdds_python.PublicationBuiltinTopicData_group_data_get, _fastdds_python.PublicationBuiltinTopicData_group_data_set)
    type_information = property(_fastdds_python.PublicationBuiltinTopicData_type_information_get, _fastdds_python.PublicationBuiltinTopicData_type_information_set)
    representation = property(_fastdds_python.PublicationBuiltinTopicData_representation_get, _fastdds_python.PublicationBuiltinTopicData_representation_set)
    disable_positive_acks = property(_fastdds_python.PublicationBuiltinTopicData_disable_positive_acks_get, _fastdds_python.PublicationBuiltinTopicData_disable_positive_acks_set)
    data_sharing = property(_fastdds_python.PublicationBuiltinTopicData_data_sharing_get, _fastdds_python.PublicationBuiltinTopicData_data_sharing_set)
    guid = property(_fastdds_python.PublicationBuiltinTopicData_guid_get, _fastdds_python.PublicationBuiltinTopicData_guid_set)
    persistence_guid = property(_fastdds_python.PublicationBuiltinTopicData_persistence_guid_get, _fastdds_python.PublicationBuiltinTopicData_persistence_guid_set)
    participant_guid = property(_fastdds_python.PublicationBuiltinTopicData_participant_guid_get, _fastdds_python.PublicationBuiltinTopicData_participant_guid_set)
    remote_locators = property(_fastdds_python.PublicationBuiltinTopicData_remote_locators_get, _fastdds_python.PublicationBuiltinTopicData_remote_locators_set)
    max_serialized_size = property(_fastdds_python.PublicationBuiltinTopicData_max_serialized_size_get, _fastdds_python.PublicationBuiltinTopicData_max_serialized_size_set)
    loopback_transformation = property(_fastdds_python.PublicationBuiltinTopicData_loopback_transformation_get, _fastdds_python.PublicationBuiltinTopicData_loopback_transformation_set)
    __swig_destroy__ = _fastdds_python.delete_PublicationBuiltinTopicData

# Register PublicationBuiltinTopicData in _fastdds_python:
_fastdds_python.PublicationBuiltinTopicData_swigregister(PublicationBuiltinTopicData)

class ConditionSeq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.ConditionSeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.ConditionSeq___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.ConditionSeq___bool__(self)

    def __len__(self):
        return _fastdds_python.ConditionSeq___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.ConditionSeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.ConditionSeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.ConditionSeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.ConditionSeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.ConditionSeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.ConditionSeq___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.ConditionSeq_pop(self)

    def append(self, x):
        return _fastdds_python.ConditionSeq_append(self, x)

    def empty(self):
        return _fastdds_python.ConditionSeq_empty(self)

    def size(self):
        return _fastdds_python.ConditionSeq_size(self)

    def swap(self, v):
        return _fastdds_python.ConditionSeq_swap(self, v)

    def begin(self):
        return _fastdds_python.ConditionSeq_begin(self)

    def end(self):
        return _fastdds_python.ConditionSeq_end(self)

    def rbegin(self):
        return _fastdds_python.ConditionSeq_rbegin(self)

    def rend(self):
        return _fastdds_python.ConditionSeq_rend(self)

    def clear(self):
        return _fastdds_python.ConditionSeq_clear(self)

    def get_allocator(self):
        return _fastdds_python.ConditionSeq_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.ConditionSeq_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.ConditionSeq_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.ConditionSeq_swiginit(self, _fastdds_python.new_ConditionSeq(*args))

    def push_back(self, x):
        return _fastdds_python.ConditionSeq_push_back(self, x)

    def front(self):
        return _fastdds_python.ConditionSeq_front(self)

    def back(self):
        return _fastdds_python.ConditionSeq_back(self)

    def assign(self, n, x):
        return _fastdds_python.ConditionSeq_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.ConditionSeq_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.ConditionSeq_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.ConditionSeq_reserve(self, n)

    def capacity(self):
        return _fastdds_python.ConditionSeq_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_ConditionSeq

# Register ConditionSeq in _fastdds_python:
_fastdds_python.ConditionSeq_swigregister(ConditionSeq)

class Condition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_trigger_value(self):
        return _fastdds_python.Condition_get_trigger_value(self)

    def get_notifier(self):
        return _fastdds_python.Condition_get_notifier(self)

    def __str__(self):
        return _fastdds_python.Condition___str__(self)

    def to_status_condition(self):
        return _fastdds_python.Condition_to_status_condition(self)

    def to_guard_condition(self):
        return _fastdds_python.Condition_to_guard_condition(self)

    def to_read_condition(self):
        return _fastdds_python.Condition_to_read_condition(self)

# Register Condition in _fastdds_python:
_fastdds_python.Condition_swigregister(Condition)

class StatusCondition(Condition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_trigger_value(self):
        return _fastdds_python.StatusCondition_get_trigger_value(self)

    def set_enabled_statuses(self, mask):
        return _fastdds_python.StatusCondition_set_enabled_statuses(self, mask)

    def get_enabled_statuses(self):
        return _fastdds_python.StatusCondition_get_enabled_statuses(self)

    def get_entity(self):
        return _fastdds_python.StatusCondition_get_entity(self)

    def get_impl(self):
        return _fastdds_python.StatusCondition_get_impl(self)

    def __str__(self):
        return _fastdds_python.StatusCondition___str__(self)

    def __eq__(self, s1):
        return _fastdds_python.StatusCondition___eq__(self, s1)

# Register StatusCondition in _fastdds_python:
_fastdds_python.StatusCondition_swigregister(StatusCondition)

class GuardCondition(Condition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.GuardCondition_swiginit(self, _fastdds_python.new_GuardCondition())
    __swig_destroy__ = _fastdds_python.delete_GuardCondition

    def get_trigger_value(self):
        return _fastdds_python.GuardCondition_get_trigger_value(self)

    def set_trigger_value(self, value):
        return _fastdds_python.GuardCondition_set_trigger_value(self, value)

    def __str__(self):
        return _fastdds_python.GuardCondition___str__(self)

    def __eq__(self, s1):
        return _fastdds_python.GuardCondition___eq__(self, s1)

# Register GuardCondition in _fastdds_python:
_fastdds_python.GuardCondition_swigregister(GuardCondition)

ALIVE_INSTANCE_STATE = _fastdds_python.ALIVE_INSTANCE_STATE
NOT_ALIVE_DISPOSED_INSTANCE_STATE = _fastdds_python.NOT_ALIVE_DISPOSED_INSTANCE_STATE
NOT_ALIVE_NO_WRITERS_INSTANCE_STATE = _fastdds_python.NOT_ALIVE_NO_WRITERS_INSTANCE_STATE
READ_SAMPLE_STATE = _fastdds_python.READ_SAMPLE_STATE
NOT_READ_SAMPLE_STATE = _fastdds_python.NOT_READ_SAMPLE_STATE
NEW_VIEW_STATE = _fastdds_python.NEW_VIEW_STATE
NOT_NEW_VIEW_STATE = _fastdds_python.NOT_NEW_VIEW_STATE
class ReadCondition(Condition):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_trigger_value(self):
        return _fastdds_python.ReadCondition_get_trigger_value(self)

    def get_datareader(self):
        return _fastdds_python.ReadCondition_get_datareader(self)

    def get_sample_state_mask(self):
        return _fastdds_python.ReadCondition_get_sample_state_mask(self)

    def get_view_state_mask(self):
        return _fastdds_python.ReadCondition_get_view_state_mask(self)

    def get_instance_state_mask(self):
        return _fastdds_python.ReadCondition_get_instance_state_mask(self)

    def get_impl(self):
        return _fastdds_python.ReadCondition_get_impl(self)

    def __str__(self):
        return _fastdds_python.ReadCondition___str__(self)

    def __eq__(self, s1):
        return _fastdds_python.ReadCondition___eq__(self, s1)

# Register ReadCondition in _fastdds_python:
_fastdds_python.ReadCondition_swigregister(ReadCondition)
NOT_ALIVE_INSTANCE_STATE = cvar.NOT_ALIVE_INSTANCE_STATE
ANY_INSTANCE_STATE = cvar.ANY_INSTANCE_STATE
ANY_SAMPLE_STATE = cvar.ANY_SAMPLE_STATE
ANY_VIEW_STATE = cvar.ANY_VIEW_STATE

class Entity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def enable(self):
        return _fastdds_python.Entity_enable(self)

    def close(self):
        return _fastdds_python.Entity_close(self)

    def get_status_mask(self):
        return _fastdds_python.Entity_get_status_mask(self)

    def get_status_changes(self):
        return _fastdds_python.Entity_get_status_changes(self)

    def get_instance_handle(self):
        return _fastdds_python.Entity_get_instance_handle(self)

    def is_enabled(self):
        return _fastdds_python.Entity_is_enabled(self)

    def __eq__(self, other):
        return _fastdds_python.Entity___eq__(self, other)

    def get_statuscondition(self):
        return _fastdds_python.Entity_get_statuscondition(self)

# Register Entity in _fastdds_python:
_fastdds_python.Entity_swigregister(Entity)

class DomainEntity(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register DomainEntity in _fastdds_python:
_fastdds_python.DomainEntity_swigregister(DomainEntity)

class WaitSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.WaitSet_swiginit(self, _fastdds_python.new_WaitSet())
    __swig_destroy__ = _fastdds_python.delete_WaitSet

    def attach_condition(self, cond):
        return _fastdds_python.WaitSet_attach_condition(self, cond)

    def detach_condition(self, cond):
        return _fastdds_python.WaitSet_detach_condition(self, cond)

    def wait(self, active_conditions, timeout):
        return _fastdds_python.WaitSet_wait(self, active_conditions, timeout)

    def get_conditions(self, attached_conditions):
        return _fastdds_python.WaitSet_get_conditions(self, attached_conditions)

# Register WaitSet in _fastdds_python:
_fastdds_python.WaitSet_swigregister(WaitSet)

class LoanableCollection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def buffer(self):
        return _fastdds_python.LoanableCollection_buffer(self)

    def has_ownership(self):
        return _fastdds_python.LoanableCollection_has_ownership(self)

    def maximum(self):
        return _fastdds_python.LoanableCollection_maximum(self)

    def length(self, *args):
        return _fastdds_python.LoanableCollection_length(self, *args)

    def loan(self, buffer, new_maximum, new_length):
        return _fastdds_python.LoanableCollection_loan(self, buffer, new_maximum, new_length)

    def unloan(self, *args):
        return _fastdds_python.LoanableCollection_unloan(self, *args)
    __swig_destroy__ = _fastdds_python.delete_LoanableCollection

# Register LoanableCollection in _fastdds_python:
_fastdds_python.LoanableCollection_swigregister(LoanableCollection)

class UserAllocatedSequence(LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, items, num_items):
        _fastdds_python.UserAllocatedSequence_swiginit(self, _fastdds_python.new_UserAllocatedSequence(items, num_items))
    __swig_destroy__ = _fastdds_python.delete_UserAllocatedSequence

# Register UserAllocatedSequence in _fastdds_python:
_fastdds_python.UserAllocatedSequence_swigregister(UserAllocatedSequence)

class ReaderDataLifecycleQosPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ReaderDataLifecycleQosPolicy_swiginit(self, _fastdds_python.new_ReaderDataLifecycleQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_ReaderDataLifecycleQosPolicy

    def __eq__(self, b):
        return _fastdds_python.ReaderDataLifecycleQosPolicy___eq__(self, b)

    def clear(self):
        return _fastdds_python.ReaderDataLifecycleQosPolicy_clear(self)
    autopurge_no_writer_samples_delay = property(_fastdds_python.ReaderDataLifecycleQosPolicy_autopurge_no_writer_samples_delay_get, _fastdds_python.ReaderDataLifecycleQosPolicy_autopurge_no_writer_samples_delay_set)
    autopurge_disposed_samples_delay = property(_fastdds_python.ReaderDataLifecycleQosPolicy_autopurge_disposed_samples_delay_get, _fastdds_python.ReaderDataLifecycleQosPolicy_autopurge_disposed_samples_delay_set)

# Register ReaderDataLifecycleQosPolicy in _fastdds_python:
_fastdds_python.ReaderDataLifecycleQosPolicy_swigregister(ReaderDataLifecycleQosPolicy)
DOMAIN_ID_UNKNOWN = cvar.DOMAIN_ID_UNKNOWN
LENGTH_UNLIMITED = cvar.LENGTH_UNLIMITED

class WriterDataLifecycleQosPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.WriterDataLifecycleQosPolicy_swiginit(self, _fastdds_python.new_WriterDataLifecycleQosPolicy())
    __swig_destroy__ = _fastdds_python.delete_WriterDataLifecycleQosPolicy

    def __eq__(self, b):
        return _fastdds_python.WriterDataLifecycleQosPolicy___eq__(self, b)
    autodispose_unregistered_instances = property(_fastdds_python.WriterDataLifecycleQosPolicy_autodispose_unregistered_instances_get, _fastdds_python.WriterDataLifecycleQosPolicy_autodispose_unregistered_instances_set)

# Register WriterDataLifecycleQosPolicy in _fastdds_python:
_fastdds_python.WriterDataLifecycleQosPolicy_swigregister(WriterDataLifecycleQosPolicy)

class LivelinessChangedStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alive_count = property(_fastdds_python.LivelinessChangedStatus_alive_count_get, _fastdds_python.LivelinessChangedStatus_alive_count_set)
    not_alive_count = property(_fastdds_python.LivelinessChangedStatus_not_alive_count_get, _fastdds_python.LivelinessChangedStatus_not_alive_count_set)
    alive_count_change = property(_fastdds_python.LivelinessChangedStatus_alive_count_change_get, _fastdds_python.LivelinessChangedStatus_alive_count_change_set)
    not_alive_count_change = property(_fastdds_python.LivelinessChangedStatus_not_alive_count_change_get, _fastdds_python.LivelinessChangedStatus_not_alive_count_change_set)
    last_publication_handle = property(_fastdds_python.LivelinessChangedStatus_last_publication_handle_get, _fastdds_python.LivelinessChangedStatus_last_publication_handle_set)

    def __init__(self):
        _fastdds_python.LivelinessChangedStatus_swiginit(self, _fastdds_python.new_LivelinessChangedStatus())
    __swig_destroy__ = _fastdds_python.delete_LivelinessChangedStatus

# Register LivelinessChangedStatus in _fastdds_python:
_fastdds_python.LivelinessChangedStatus_swigregister(LivelinessChangedStatus)

class MatchedStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.MatchedStatus_swiginit(self, _fastdds_python.new_MatchedStatus())
    __swig_destroy__ = _fastdds_python.delete_MatchedStatus
    total_count = property(_fastdds_python.MatchedStatus_total_count_get, _fastdds_python.MatchedStatus_total_count_set)
    total_count_change = property(_fastdds_python.MatchedStatus_total_count_change_get, _fastdds_python.MatchedStatus_total_count_change_set)
    current_count = property(_fastdds_python.MatchedStatus_current_count_get, _fastdds_python.MatchedStatus_current_count_set)
    current_count_change = property(_fastdds_python.MatchedStatus_current_count_change_get, _fastdds_python.MatchedStatus_current_count_change_set)

# Register MatchedStatus in _fastdds_python:
_fastdds_python.MatchedStatus_swigregister(MatchedStatus)

class SubscriptionMatchedStatus(MatchedStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    last_publication_handle = property(_fastdds_python.SubscriptionMatchedStatus_last_publication_handle_get, _fastdds_python.SubscriptionMatchedStatus_last_publication_handle_set)

    def __init__(self):
        _fastdds_python.SubscriptionMatchedStatus_swiginit(self, _fastdds_python.new_SubscriptionMatchedStatus())
    __swig_destroy__ = _fastdds_python.delete_SubscriptionMatchedStatus

# Register SubscriptionMatchedStatus in _fastdds_python:
_fastdds_python.SubscriptionMatchedStatus_swigregister(SubscriptionMatchedStatus)

class BaseStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total_count = property(_fastdds_python.BaseStatus_total_count_get, _fastdds_python.BaseStatus_total_count_set)
    total_count_change = property(_fastdds_python.BaseStatus_total_count_change_get, _fastdds_python.BaseStatus_total_count_change_set)

    def __init__(self):
        _fastdds_python.BaseStatus_swiginit(self, _fastdds_python.new_BaseStatus())
    __swig_destroy__ = _fastdds_python.delete_BaseStatus

# Register BaseStatus in _fastdds_python:
_fastdds_python.BaseStatus_swigregister(BaseStatus)

class SampleLostStatus(BaseStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.SampleLostStatus_swiginit(self, _fastdds_python.new_SampleLostStatus())
    __swig_destroy__ = _fastdds_python.delete_SampleLostStatus

# Register SampleLostStatus in _fastdds_python:
_fastdds_python.SampleLostStatus_swigregister(SampleLostStatus)

class LivelinessLostStatus(BaseStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.LivelinessLostStatus_swiginit(self, _fastdds_python.new_LivelinessLostStatus())
    __swig_destroy__ = _fastdds_python.delete_LivelinessLostStatus

# Register LivelinessLostStatus in _fastdds_python:
_fastdds_python.LivelinessLostStatus_swigregister(LivelinessLostStatus)

class InconsistentTopicStatus(BaseStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.InconsistentTopicStatus_swiginit(self, _fastdds_python.new_InconsistentTopicStatus())
    __swig_destroy__ = _fastdds_python.delete_InconsistentTopicStatus

# Register InconsistentTopicStatus in _fastdds_python:
_fastdds_python.InconsistentTopicStatus_swigregister(InconsistentTopicStatus)

class QosPolicyCountSeq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.QosPolicyCountSeq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.QosPolicyCountSeq___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.QosPolicyCountSeq___bool__(self)

    def __len__(self):
        return _fastdds_python.QosPolicyCountSeq___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.QosPolicyCountSeq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.QosPolicyCountSeq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.QosPolicyCountSeq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.QosPolicyCountSeq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.QosPolicyCountSeq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.QosPolicyCountSeq___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.QosPolicyCountSeq_pop(self)

    def append(self, x):
        return _fastdds_python.QosPolicyCountSeq_append(self, x)

    def empty(self):
        return _fastdds_python.QosPolicyCountSeq_empty(self)

    def size(self):
        return _fastdds_python.QosPolicyCountSeq_size(self)

    def swap(self, v):
        return _fastdds_python.QosPolicyCountSeq_swap(self, v)

    def begin(self):
        return _fastdds_python.QosPolicyCountSeq_begin(self)

    def end(self):
        return _fastdds_python.QosPolicyCountSeq_end(self)

    def rbegin(self):
        return _fastdds_python.QosPolicyCountSeq_rbegin(self)

    def rend(self):
        return _fastdds_python.QosPolicyCountSeq_rend(self)

    def clear(self):
        return _fastdds_python.QosPolicyCountSeq_clear(self)

    def get_allocator(self):
        return _fastdds_python.QosPolicyCountSeq_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.QosPolicyCountSeq_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.QosPolicyCountSeq_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.QosPolicyCountSeq_swiginit(self, _fastdds_python.new_QosPolicyCountSeq(*args))

    def push_back(self, x):
        return _fastdds_python.QosPolicyCountSeq_push_back(self, x)

    def front(self):
        return _fastdds_python.QosPolicyCountSeq_front(self)

    def back(self):
        return _fastdds_python.QosPolicyCountSeq_back(self)

    def assign(self, n, x):
        return _fastdds_python.QosPolicyCountSeq_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.QosPolicyCountSeq_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.QosPolicyCountSeq_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.QosPolicyCountSeq_reserve(self, n)

    def capacity(self):
        return _fastdds_python.QosPolicyCountSeq_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_QosPolicyCountSeq

# Register QosPolicyCountSeq in _fastdds_python:
_fastdds_python.QosPolicyCountSeq_swigregister(QosPolicyCountSeq)

class QosPolicyCount(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fastdds_python.QosPolicyCount_swiginit(self, _fastdds_python.new_QosPolicyCount(*args))
    policy_id = property(_fastdds_python.QosPolicyCount_policy_id_get, _fastdds_python.QosPolicyCount_policy_id_set)
    count = property(_fastdds_python.QosPolicyCount_count_get, _fastdds_python.QosPolicyCount_count_set)
    __swig_destroy__ = _fastdds_python.delete_QosPolicyCount

# Register QosPolicyCount in _fastdds_python:
_fastdds_python.QosPolicyCount_swigregister(QosPolicyCount)

class IncompatibleQosStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total_count = property(_fastdds_python.IncompatibleQosStatus_total_count_get, _fastdds_python.IncompatibleQosStatus_total_count_set)
    total_count_change = property(_fastdds_python.IncompatibleQosStatus_total_count_change_get, _fastdds_python.IncompatibleQosStatus_total_count_change_set)
    last_policy_id = property(_fastdds_python.IncompatibleQosStatus_last_policy_id_get, _fastdds_python.IncompatibleQosStatus_last_policy_id_set)
    policies = property(_fastdds_python.IncompatibleQosStatus_policies_get, _fastdds_python.IncompatibleQosStatus_policies_set)

    def __init__(self):
        _fastdds_python.IncompatibleQosStatus_swiginit(self, _fastdds_python.new_IncompatibleQosStatus())
    __swig_destroy__ = _fastdds_python.delete_IncompatibleQosStatus

# Register IncompatibleQosStatus in _fastdds_python:
_fastdds_python.IncompatibleQosStatus_swigregister(IncompatibleQosStatus)

class RequestedIncompatibleQosStatus(IncompatibleQosStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RequestedIncompatibleQosStatus_swiginit(self, _fastdds_python.new_RequestedIncompatibleQosStatus())
    __swig_destroy__ = _fastdds_python.delete_RequestedIncompatibleQosStatus

# Register RequestedIncompatibleQosStatus in _fastdds_python:
_fastdds_python.RequestedIncompatibleQosStatus_swigregister(RequestedIncompatibleQosStatus)

class OfferedIncompatibleQosStatus(IncompatibleQosStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.OfferedIncompatibleQosStatus_swiginit(self, _fastdds_python.new_OfferedIncompatibleQosStatus())
    __swig_destroy__ = _fastdds_python.delete_OfferedIncompatibleQosStatus

# Register OfferedIncompatibleQosStatus in _fastdds_python:
_fastdds_python.OfferedIncompatibleQosStatus_swigregister(OfferedIncompatibleQosStatus)

class DeadlineMissedStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DeadlineMissedStatus_swiginit(self, _fastdds_python.new_DeadlineMissedStatus())
    __swig_destroy__ = _fastdds_python.delete_DeadlineMissedStatus
    total_count = property(_fastdds_python.DeadlineMissedStatus_total_count_get, _fastdds_python.DeadlineMissedStatus_total_count_set)
    total_count_change = property(_fastdds_python.DeadlineMissedStatus_total_count_change_get, _fastdds_python.DeadlineMissedStatus_total_count_change_set)
    last_instance_handle = property(_fastdds_python.DeadlineMissedStatus_last_instance_handle_get, _fastdds_python.DeadlineMissedStatus_last_instance_handle_set)

# Register DeadlineMissedStatus in _fastdds_python:
_fastdds_python.DeadlineMissedStatus_swigregister(DeadlineMissedStatus)

class OfferedDeadlineMissedStatus(DeadlineMissedStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.OfferedDeadlineMissedStatus_swiginit(self, _fastdds_python.new_OfferedDeadlineMissedStatus())
    __swig_destroy__ = _fastdds_python.delete_OfferedDeadlineMissedStatus

# Register OfferedDeadlineMissedStatus in _fastdds_python:
_fastdds_python.OfferedDeadlineMissedStatus_swigregister(OfferedDeadlineMissedStatus)

class RequestedDeadlineMissedStatus(DeadlineMissedStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RequestedDeadlineMissedStatus_swiginit(self, _fastdds_python.new_RequestedDeadlineMissedStatus())
    __swig_destroy__ = _fastdds_python.delete_RequestedDeadlineMissedStatus

# Register RequestedDeadlineMissedStatus in _fastdds_python:
_fastdds_python.RequestedDeadlineMissedStatus_swigregister(RequestedDeadlineMissedStatus)

NOT_REJECTED = _fastdds_python.NOT_REJECTED
REJECTED_BY_INSTANCES_LIMIT = _fastdds_python.REJECTED_BY_INSTANCES_LIMIT
REJECTED_BY_SAMPLES_LIMIT = _fastdds_python.REJECTED_BY_SAMPLES_LIMIT
REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT = _fastdds_python.REJECTED_BY_SAMPLES_PER_INSTANCE_LIMIT
class SampleRejectedStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    total_count = property(_fastdds_python.SampleRejectedStatus_total_count_get, _fastdds_python.SampleRejectedStatus_total_count_set)
    total_count_change = property(_fastdds_python.SampleRejectedStatus_total_count_change_get, _fastdds_python.SampleRejectedStatus_total_count_change_set)
    last_reason = property(_fastdds_python.SampleRejectedStatus_last_reason_get, _fastdds_python.SampleRejectedStatus_last_reason_set)
    last_instance_handle = property(_fastdds_python.SampleRejectedStatus_last_instance_handle_get, _fastdds_python.SampleRejectedStatus_last_instance_handle_set)

    def __init__(self):
        _fastdds_python.SampleRejectedStatus_swiginit(self, _fastdds_python.new_SampleRejectedStatus())
    __swig_destroy__ = _fastdds_python.delete_SampleRejectedStatus

# Register SampleRejectedStatus in _fastdds_python:
_fastdds_python.SampleRejectedStatus_swigregister(SampleRejectedStatus)

class PublicationMatchedStatus(MatchedStatus):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    last_subscription_handle = property(_fastdds_python.PublicationMatchedStatus_last_subscription_handle_get, _fastdds_python.PublicationMatchedStatus_last_subscription_handle_set)

    def __init__(self):
        _fastdds_python.PublicationMatchedStatus_swiginit(self, _fastdds_python.new_PublicationMatchedStatus())
    __swig_destroy__ = _fastdds_python.delete_PublicationMatchedStatus

# Register PublicationMatchedStatus in _fastdds_python:
_fastdds_python.PublicationMatchedStatus_swigregister(PublicationMatchedStatus)

class TopicQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.TopicQos_swiginit(self, _fastdds_python.new_TopicQos())

    def __eq__(self, b):
        return _fastdds_python.TopicQos___eq__(self, b)

    def topic_data(self, *args):
        return _fastdds_python.TopicQos_topic_data(self, *args)

    def durability(self, *args):
        return _fastdds_python.TopicQos_durability(self, *args)

    def durability_service(self, *args):
        return _fastdds_python.TopicQos_durability_service(self, *args)

    def deadline(self, *args):
        return _fastdds_python.TopicQos_deadline(self, *args)

    def latency_budget(self, *args):
        return _fastdds_python.TopicQos_latency_budget(self, *args)

    def liveliness(self, *args):
        return _fastdds_python.TopicQos_liveliness(self, *args)

    def reliability(self, *args):
        return _fastdds_python.TopicQos_reliability(self, *args)

    def destination_order(self, *args):
        return _fastdds_python.TopicQos_destination_order(self, *args)

    def history(self, *args):
        return _fastdds_python.TopicQos_history(self, *args)

    def resource_limits(self, *args):
        return _fastdds_python.TopicQos_resource_limits(self, *args)

    def transport_priority(self, *args):
        return _fastdds_python.TopicQos_transport_priority(self, *args)

    def lifespan(self, *args):
        return _fastdds_python.TopicQos_lifespan(self, *args)

    def ownership(self, *args):
        return _fastdds_python.TopicQos_ownership(self, *args)
    __swig_destroy__ = _fastdds_python.delete_TopicQos

# Register TopicQos in _fastdds_python:
_fastdds_python.TopicQos_swigregister(TopicQos)

class TopicDescription(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_participant(self):
        return _fastdds_python.TopicDescription_get_participant(self)

    def get_name(self):
        return _fastdds_python.TopicDescription_get_name(self)

    def get_type_name(self):
        return _fastdds_python.TopicDescription_get_type_name(self)

    def get_impl(self):
        return _fastdds_python.TopicDescription_get_impl(self)

# Register TopicDescription in _fastdds_python:
_fastdds_python.TopicDescription_swigregister(TopicDescription)
TOPIC_QOS_DEFAULT = cvar.TOPIC_QOS_DEFAULT

class Topic(DomainEntity, TopicDescription):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_participant(self):
        return _fastdds_python.Topic_get_participant(self)

    def get_qos(self, *args):
        return _fastdds_python.Topic_get_qos(self, *args)

    def set_qos(self, qos):
        return _fastdds_python.Topic_set_qos(self, qos)

    def get_listener(self):
        return _fastdds_python.Topic_get_listener(self)

    def set_listener(self, *args):
        return _fastdds_python.Topic_set_listener(self, *args)

    def get_impl(self):
        return _fastdds_python.Topic_get_impl(self)

# Register Topic in _fastdds_python:
_fastdds_python.Topic_swigregister(Topic)

class ContentFilteredTopic(TopicDescription):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_ContentFilteredTopic

    def get_related_topic(self):
        return _fastdds_python.ContentFilteredTopic_get_related_topic(self)

    def get_filter_expression(self):
        return _fastdds_python.ContentFilteredTopic_get_filter_expression(self)

    def get_expression_parameters(self, expression_parameters):
        return _fastdds_python.ContentFilteredTopic_get_expression_parameters(self, expression_parameters)

    def set_expression_parameters(self, expression_parameters):
        return _fastdds_python.ContentFilteredTopic_set_expression_parameters(self, expression_parameters)

    def set_filter_expression(self, filter_expression, expression_parameters):
        return _fastdds_python.ContentFilteredTopic_set_filter_expression(self, filter_expression, expression_parameters)

    def get_participant(self):
        return _fastdds_python.ContentFilteredTopic_get_participant(self)

    def get_impl(self):
        return _fastdds_python.ContentFilteredTopic_get_impl(self)

# Register ContentFilteredTopic in _fastdds_python:
_fastdds_python.ContentFilteredTopic_swigregister(ContentFilteredTopic)
sqlfilter_name = cvar.sqlfilter_name

class TopicListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == TopicListener:
            _self = None
        else:
            _self = self
        _fastdds_python.TopicListener_swiginit(self, _fastdds_python.new_TopicListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_TopicListener

    def on_inconsistent_topic(self, topic, status):
        return _fastdds_python.TopicListener_on_inconsistent_topic(self, topic, status)
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_TopicListener(self)
        return weakref.proxy(self)

# Register TopicListener in _fastdds_python:
_fastdds_python.TopicListener_swigregister(TopicListener)

class ReaderQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ReaderQos_swiginit(self, _fastdds_python.new_ReaderQos())
    __swig_destroy__ = _fastdds_python.delete_ReaderQos

    def __eq__(self, b):
        return _fastdds_python.ReaderQos___eq__(self, b)
    m_durability = property(_fastdds_python.ReaderQos_m_durability_get, _fastdds_python.ReaderQos_m_durability_set)
    m_deadline = property(_fastdds_python.ReaderQos_m_deadline_get, _fastdds_python.ReaderQos_m_deadline_set)
    m_latencyBudget = property(_fastdds_python.ReaderQos_m_latencyBudget_get, _fastdds_python.ReaderQos_m_latencyBudget_set)
    m_liveliness = property(_fastdds_python.ReaderQos_m_liveliness_get, _fastdds_python.ReaderQos_m_liveliness_set)
    m_reliability = property(_fastdds_python.ReaderQos_m_reliability_get, _fastdds_python.ReaderQos_m_reliability_set)
    m_ownership = property(_fastdds_python.ReaderQos_m_ownership_get, _fastdds_python.ReaderQos_m_ownership_set)
    m_destinationOrder = property(_fastdds_python.ReaderQos_m_destinationOrder_get, _fastdds_python.ReaderQos_m_destinationOrder_set)
    m_userData = property(_fastdds_python.ReaderQos_m_userData_get, _fastdds_python.ReaderQos_m_userData_set)
    m_timeBasedFilter = property(_fastdds_python.ReaderQos_m_timeBasedFilter_get, _fastdds_python.ReaderQos_m_timeBasedFilter_set)
    m_presentation = property(_fastdds_python.ReaderQos_m_presentation_get, _fastdds_python.ReaderQos_m_presentation_set)
    m_partition = property(_fastdds_python.ReaderQos_m_partition_get, _fastdds_python.ReaderQos_m_partition_set)
    m_topicData = property(_fastdds_python.ReaderQos_m_topicData_get, _fastdds_python.ReaderQos_m_topicData_set)
    m_groupData = property(_fastdds_python.ReaderQos_m_groupData_get, _fastdds_python.ReaderQos_m_groupData_set)
    m_durabilityService = property(_fastdds_python.ReaderQos_m_durabilityService_get, _fastdds_python.ReaderQos_m_durabilityService_set)
    m_lifespan = property(_fastdds_python.ReaderQos_m_lifespan_get, _fastdds_python.ReaderQos_m_lifespan_set)
    representation = property(_fastdds_python.ReaderQos_representation_get, _fastdds_python.ReaderQos_representation_set)
    type_consistency = property(_fastdds_python.ReaderQos_type_consistency_get, _fastdds_python.ReaderQos_type_consistency_set)
    m_disablePositiveACKs = property(_fastdds_python.ReaderQos_m_disablePositiveACKs_get, _fastdds_python.ReaderQos_m_disablePositiveACKs_set)
    data_sharing = property(_fastdds_python.ReaderQos_data_sharing_get, _fastdds_python.ReaderQos_data_sharing_set)

    def setQos(self, readerqos, first_time):
        return _fastdds_python.ReaderQos_setQos(self, readerqos, first_time)

    def checkQos(self):
        return _fastdds_python.ReaderQos_checkQos(self)

    def canQosBeUpdated(self, qos):
        return _fastdds_python.ReaderQos_canQosBeUpdated(self, qos)

# Register ReaderQos in _fastdds_python:
_fastdds_python.ReaderQos_swigregister(ReaderQos)

class SubscriberQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.SubscriberQos_swiginit(self, _fastdds_python.new_SubscriberQos())
    __swig_destroy__ = _fastdds_python.delete_SubscriberQos

    def __eq__(self, b):
        return _fastdds_python.SubscriberQos___eq__(self, b)

    def presentation(self, *args):
        return _fastdds_python.SubscriberQos_presentation(self, *args)

    def partition(self, *args):
        return _fastdds_python.SubscriberQos_partition(self, *args)

    def group_data(self, *args):
        return _fastdds_python.SubscriberQos_group_data(self, *args)

    def entity_factory(self, *args):
        return _fastdds_python.SubscriberQos_entity_factory(self, *args)

# Register SubscriberQos in _fastdds_python:
_fastdds_python.SubscriberQos_swigregister(SubscriberQos)

class RTPSReliableReaderQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RTPSReliableReaderQos_swiginit(self, _fastdds_python.new_RTPSReliableReaderQos())
    __swig_destroy__ = _fastdds_python.delete_RTPSReliableReaderQos

    def __eq__(self, b):
        return _fastdds_python.RTPSReliableReaderQos___eq__(self, b)

    def clear(self):
        return _fastdds_python.RTPSReliableReaderQos_clear(self)
    times = property(_fastdds_python.RTPSReliableReaderQos_times_get, _fastdds_python.RTPSReliableReaderQos_times_set)
    disable_positive_acks = property(_fastdds_python.RTPSReliableReaderQos_disable_positive_acks_get, _fastdds_python.RTPSReliableReaderQos_disable_positive_acks_set)

# Register RTPSReliableReaderQos in _fastdds_python:
_fastdds_python.RTPSReliableReaderQos_swigregister(RTPSReliableReaderQos)
SUBSCRIBER_QOS_DEFAULT = cvar.SUBSCRIBER_QOS_DEFAULT

class ReaderResourceLimitsQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ReaderResourceLimitsQos_swiginit(self, _fastdds_python.new_ReaderResourceLimitsQos())
    __swig_destroy__ = _fastdds_python.delete_ReaderResourceLimitsQos

    def __eq__(self, b):
        return _fastdds_python.ReaderResourceLimitsQos___eq__(self, b)

    def clear(self):
        return _fastdds_python.ReaderResourceLimitsQos_clear(self)
    matched_publisher_allocation = property(_fastdds_python.ReaderResourceLimitsQos_matched_publisher_allocation_get, _fastdds_python.ReaderResourceLimitsQos_matched_publisher_allocation_set)
    sample_infos_allocation = property(_fastdds_python.ReaderResourceLimitsQos_sample_infos_allocation_get, _fastdds_python.ReaderResourceLimitsQos_sample_infos_allocation_set)
    outstanding_reads_allocation = property(_fastdds_python.ReaderResourceLimitsQos_outstanding_reads_allocation_get, _fastdds_python.ReaderResourceLimitsQos_outstanding_reads_allocation_set)
    max_samples_per_read = property(_fastdds_python.ReaderResourceLimitsQos_max_samples_per_read_get, _fastdds_python.ReaderResourceLimitsQos_max_samples_per_read_set)

# Register ReaderResourceLimitsQos in _fastdds_python:
_fastdds_python.ReaderResourceLimitsQos_swigregister(ReaderResourceLimitsQos)

class DataReaderQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DataReaderQos_swiginit(self, _fastdds_python.new_DataReaderQos())

    def __eq__(self, b):
        return _fastdds_python.DataReaderQos___eq__(self, b)

    def get_readerqos(self, sqos):
        return _fastdds_python.DataReaderQos_get_readerqos(self, sqos)

    def durability(self, *args):
        return _fastdds_python.DataReaderQos_durability(self, *args)

    def deadline(self, *args):
        return _fastdds_python.DataReaderQos_deadline(self, *args)

    def latency_budget(self, *args):
        return _fastdds_python.DataReaderQos_latency_budget(self, *args)

    def liveliness(self, *args):
        return _fastdds_python.DataReaderQos_liveliness(self, *args)

    def reliability(self, *args):
        return _fastdds_python.DataReaderQos_reliability(self, *args)

    def destination_order(self, *args):
        return _fastdds_python.DataReaderQos_destination_order(self, *args)

    def history(self, *args):
        return _fastdds_python.DataReaderQos_history(self, *args)

    def resource_limits(self, *args):
        return _fastdds_python.DataReaderQos_resource_limits(self, *args)

    def user_data(self, *args):
        return _fastdds_python.DataReaderQos_user_data(self, *args)

    def ownership(self, *args):
        return _fastdds_python.DataReaderQos_ownership(self, *args)

    def time_based_filter(self, *args):
        return _fastdds_python.DataReaderQos_time_based_filter(self, *args)

    def reader_data_lifecycle(self, *args):
        return _fastdds_python.DataReaderQos_reader_data_lifecycle(self, *args)

    def lifespan(self, *args):
        return _fastdds_python.DataReaderQos_lifespan(self, *args)

    def durability_service(self, *args):
        return _fastdds_python.DataReaderQos_durability_service(self, *args)

    def reliable_reader_qos(self, *args):
        return _fastdds_python.DataReaderQos_reliable_reader_qos(self, *args)

    def type_consistency(self, *args):
        return _fastdds_python.DataReaderQos_type_consistency(self, *args)

    def representation(self, *args):
        return _fastdds_python.DataReaderQos_representation(self, *args)

    def expects_inline_qos(self, *args):
        return _fastdds_python.DataReaderQos_expects_inline_qos(self, *args)

    def properties(self, *args):
        return _fastdds_python.DataReaderQos_properties(self, *args)

    def endpoint(self, *args):
        return _fastdds_python.DataReaderQos_endpoint(self, *args)

    def reader_resource_limits(self, *args):
        return _fastdds_python.DataReaderQos_reader_resource_limits(self, *args)

    def data_sharing(self, *args):
        return _fastdds_python.DataReaderQos_data_sharing(self, *args)
    __swig_destroy__ = _fastdds_python.delete_DataReaderQos

# Register DataReaderQos in _fastdds_python:
_fastdds_python.DataReaderQos_swigregister(DataReaderQos)

class DataReaderListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DataReaderListener:
            _self = None
        else:
            _self = self
        _fastdds_python.DataReaderListener_swiginit(self, _fastdds_python.new_DataReaderListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_DataReaderListener

    def on_data_available(self, reader):
        return _fastdds_python.DataReaderListener_on_data_available(self, reader)

    def on_subscription_matched(self, reader, info):
        return _fastdds_python.DataReaderListener_on_subscription_matched(self, reader, info)

    def on_requested_deadline_missed(self, reader, status):
        return _fastdds_python.DataReaderListener_on_requested_deadline_missed(self, reader, status)

    def on_liveliness_changed(self, reader, status):
        return _fastdds_python.DataReaderListener_on_liveliness_changed(self, reader, status)

    def on_sample_rejected(self, reader, status):
        return _fastdds_python.DataReaderListener_on_sample_rejected(self, reader, status)

    def on_requested_incompatible_qos(self, reader, status):
        return _fastdds_python.DataReaderListener_on_requested_incompatible_qos(self, reader, status)

    def on_sample_lost(self, reader, status):
        return _fastdds_python.DataReaderListener_on_sample_lost(self, reader, status)
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_DataReaderListener(self)
        return weakref.proxy(self)

# Register DataReaderListener in _fastdds_python:
_fastdds_python.DataReaderListener_swigregister(DataReaderListener)
DATAREADER_QOS_DEFAULT = cvar.DATAREADER_QOS_DEFAULT
DATAREADER_QOS_USE_TOPIC_QOS = cvar.DATAREADER_QOS_USE_TOPIC_QOS

class SubscriberListener(DataReaderListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SubscriberListener:
            _self = None
        else:
            _self = self
        _fastdds_python.SubscriberListener_swiginit(self, _fastdds_python.new_SubscriberListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_SubscriberListener

    def on_data_on_readers(self, sub):
        return _fastdds_python.SubscriberListener_on_data_on_readers(self, sub)
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_SubscriberListener(self)
        return weakref.proxy(self)

# Register SubscriberListener in _fastdds_python:
_fastdds_python.SubscriberListener_swigregister(SubscriberListener)

class ViewStateKindVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.ViewStateKindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.ViewStateKindVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.ViewStateKindVector___bool__(self)

    def __len__(self):
        return _fastdds_python.ViewStateKindVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.ViewStateKindVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.ViewStateKindVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.ViewStateKindVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.ViewStateKindVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.ViewStateKindVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.ViewStateKindVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.ViewStateKindVector_pop(self)

    def append(self, x):
        return _fastdds_python.ViewStateKindVector_append(self, x)

    def empty(self):
        return _fastdds_python.ViewStateKindVector_empty(self)

    def size(self):
        return _fastdds_python.ViewStateKindVector_size(self)

    def swap(self, v):
        return _fastdds_python.ViewStateKindVector_swap(self, v)

    def begin(self):
        return _fastdds_python.ViewStateKindVector_begin(self)

    def end(self):
        return _fastdds_python.ViewStateKindVector_end(self)

    def rbegin(self):
        return _fastdds_python.ViewStateKindVector_rbegin(self)

    def rend(self):
        return _fastdds_python.ViewStateKindVector_rend(self)

    def clear(self):
        return _fastdds_python.ViewStateKindVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.ViewStateKindVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.ViewStateKindVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.ViewStateKindVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.ViewStateKindVector_swiginit(self, _fastdds_python.new_ViewStateKindVector(*args))

    def push_back(self, x):
        return _fastdds_python.ViewStateKindVector_push_back(self, x)

    def front(self):
        return _fastdds_python.ViewStateKindVector_front(self)

    def back(self):
        return _fastdds_python.ViewStateKindVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.ViewStateKindVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.ViewStateKindVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.ViewStateKindVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.ViewStateKindVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.ViewStateKindVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_ViewStateKindVector

# Register ViewStateKindVector in _fastdds_python:
_fastdds_python.ViewStateKindVector_swigregister(ViewStateKindVector)

class SampleStateKindVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.SampleStateKindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.SampleStateKindVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.SampleStateKindVector___bool__(self)

    def __len__(self):
        return _fastdds_python.SampleStateKindVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.SampleStateKindVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.SampleStateKindVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.SampleStateKindVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.SampleStateKindVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.SampleStateKindVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.SampleStateKindVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.SampleStateKindVector_pop(self)

    def append(self, x):
        return _fastdds_python.SampleStateKindVector_append(self, x)

    def empty(self):
        return _fastdds_python.SampleStateKindVector_empty(self)

    def size(self):
        return _fastdds_python.SampleStateKindVector_size(self)

    def swap(self, v):
        return _fastdds_python.SampleStateKindVector_swap(self, v)

    def begin(self):
        return _fastdds_python.SampleStateKindVector_begin(self)

    def end(self):
        return _fastdds_python.SampleStateKindVector_end(self)

    def rbegin(self):
        return _fastdds_python.SampleStateKindVector_rbegin(self)

    def rend(self):
        return _fastdds_python.SampleStateKindVector_rend(self)

    def clear(self):
        return _fastdds_python.SampleStateKindVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.SampleStateKindVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.SampleStateKindVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.SampleStateKindVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.SampleStateKindVector_swiginit(self, _fastdds_python.new_SampleStateKindVector(*args))

    def push_back(self, x):
        return _fastdds_python.SampleStateKindVector_push_back(self, x)

    def front(self):
        return _fastdds_python.SampleStateKindVector_front(self)

    def back(self):
        return _fastdds_python.SampleStateKindVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.SampleStateKindVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.SampleStateKindVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.SampleStateKindVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.SampleStateKindVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.SampleStateKindVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_SampleStateKindVector

# Register SampleStateKindVector in _fastdds_python:
_fastdds_python.SampleStateKindVector_swigregister(SampleStateKindVector)

class InstanceStateKindVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.InstanceStateKindVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.InstanceStateKindVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.InstanceStateKindVector___bool__(self)

    def __len__(self):
        return _fastdds_python.InstanceStateKindVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.InstanceStateKindVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.InstanceStateKindVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.InstanceStateKindVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.InstanceStateKindVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.InstanceStateKindVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.InstanceStateKindVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.InstanceStateKindVector_pop(self)

    def append(self, x):
        return _fastdds_python.InstanceStateKindVector_append(self, x)

    def empty(self):
        return _fastdds_python.InstanceStateKindVector_empty(self)

    def size(self):
        return _fastdds_python.InstanceStateKindVector_size(self)

    def swap(self, v):
        return _fastdds_python.InstanceStateKindVector_swap(self, v)

    def begin(self):
        return _fastdds_python.InstanceStateKindVector_begin(self)

    def end(self):
        return _fastdds_python.InstanceStateKindVector_end(self)

    def rbegin(self):
        return _fastdds_python.InstanceStateKindVector_rbegin(self)

    def rend(self):
        return _fastdds_python.InstanceStateKindVector_rend(self)

    def clear(self):
        return _fastdds_python.InstanceStateKindVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.InstanceStateKindVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.InstanceStateKindVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.InstanceStateKindVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.InstanceStateKindVector_swiginit(self, _fastdds_python.new_InstanceStateKindVector(*args))

    def push_back(self, x):
        return _fastdds_python.InstanceStateKindVector_push_back(self, x)

    def front(self):
        return _fastdds_python.InstanceStateKindVector_front(self)

    def back(self):
        return _fastdds_python.InstanceStateKindVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.InstanceStateKindVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.InstanceStateKindVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.InstanceStateKindVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.InstanceStateKindVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.InstanceStateKindVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_InstanceStateKindVector

# Register InstanceStateKindVector in _fastdds_python:
_fastdds_python.InstanceStateKindVector_swigregister(InstanceStateKindVector)

class SampleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sample_state = property(_fastdds_python.SampleInfo_sample_state_get, _fastdds_python.SampleInfo_sample_state_set)
    view_state = property(_fastdds_python.SampleInfo_view_state_get, _fastdds_python.SampleInfo_view_state_set)
    instance_state = property(_fastdds_python.SampleInfo_instance_state_get, _fastdds_python.SampleInfo_instance_state_set)
    disposed_generation_count = property(_fastdds_python.SampleInfo_disposed_generation_count_get, _fastdds_python.SampleInfo_disposed_generation_count_set)
    no_writers_generation_count = property(_fastdds_python.SampleInfo_no_writers_generation_count_get, _fastdds_python.SampleInfo_no_writers_generation_count_set)
    sample_rank = property(_fastdds_python.SampleInfo_sample_rank_get, _fastdds_python.SampleInfo_sample_rank_set)
    generation_rank = property(_fastdds_python.SampleInfo_generation_rank_get, _fastdds_python.SampleInfo_generation_rank_set)
    absolute_generation_rank = property(_fastdds_python.SampleInfo_absolute_generation_rank_get, _fastdds_python.SampleInfo_absolute_generation_rank_set)
    source_timestamp = property(_fastdds_python.SampleInfo_source_timestamp_get, _fastdds_python.SampleInfo_source_timestamp_set)
    reception_timestamp = property(_fastdds_python.SampleInfo_reception_timestamp_get, _fastdds_python.SampleInfo_reception_timestamp_set)
    instance_handle = property(_fastdds_python.SampleInfo_instance_handle_get, _fastdds_python.SampleInfo_instance_handle_set)
    publication_handle = property(_fastdds_python.SampleInfo_publication_handle_get, _fastdds_python.SampleInfo_publication_handle_set)
    valid_data = property(_fastdds_python.SampleInfo_valid_data_get, _fastdds_python.SampleInfo_valid_data_set)
    sample_identity = property(_fastdds_python.SampleInfo_sample_identity_get, _fastdds_python.SampleInfo_sample_identity_set)
    related_sample_identity = property(_fastdds_python.SampleInfo_related_sample_identity_get, _fastdds_python.SampleInfo_related_sample_identity_set)

    def __init__(self):
        _fastdds_python.SampleInfo_swiginit(self, _fastdds_python.new_SampleInfo())
    __swig_destroy__ = _fastdds_python.delete_SampleInfo

# Register SampleInfo in _fastdds_python:
_fastdds_python.SampleInfo_swigregister(SampleInfo)

class DataReaderVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.DataReaderVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.DataReaderVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.DataReaderVector___bool__(self)

    def __len__(self):
        return _fastdds_python.DataReaderVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.DataReaderVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.DataReaderVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.DataReaderVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.DataReaderVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.DataReaderVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.DataReaderVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.DataReaderVector_pop(self)

    def append(self, x):
        return _fastdds_python.DataReaderVector_append(self, x)

    def empty(self):
        return _fastdds_python.DataReaderVector_empty(self)

    def size(self):
        return _fastdds_python.DataReaderVector_size(self)

    def swap(self, v):
        return _fastdds_python.DataReaderVector_swap(self, v)

    def begin(self):
        return _fastdds_python.DataReaderVector_begin(self)

    def end(self):
        return _fastdds_python.DataReaderVector_end(self)

    def rbegin(self):
        return _fastdds_python.DataReaderVector_rbegin(self)

    def rend(self):
        return _fastdds_python.DataReaderVector_rend(self)

    def clear(self):
        return _fastdds_python.DataReaderVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.DataReaderVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.DataReaderVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.DataReaderVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.DataReaderVector_swiginit(self, _fastdds_python.new_DataReaderVector(*args))

    def push_back(self, x):
        return _fastdds_python.DataReaderVector_push_back(self, x)

    def front(self):
        return _fastdds_python.DataReaderVector_front(self)

    def back(self):
        return _fastdds_python.DataReaderVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.DataReaderVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.DataReaderVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.DataReaderVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.DataReaderVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.DataReaderVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_DataReaderVector

# Register DataReaderVector in _fastdds_python:
_fastdds_python.DataReaderVector_swigregister(DataReaderVector)

class SampleInfoSeq(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_SampleInfoSeq

    def __init__(self, *args):
        _fastdds_python.SampleInfoSeq_swiginit(self, _fastdds_python.new_SampleInfoSeq(*args))

    def __len__(self):
        return _fastdds_python.SampleInfoSeq___len__(self)

    def __getitem__(self, i):
        return _fastdds_python.SampleInfoSeq___getitem__(self, i)

# Register SampleInfoSeq in _fastdds_python:
_fastdds_python.SampleInfoSeq_swigregister(SampleInfoSeq)

class DataReader(DomainEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_DataReader

    def enable(self):
        return _fastdds_python.DataReader_enable(self)

    def wait_for_unread_message(self, timeout):
        return _fastdds_python.DataReader_wait_for_unread_message(self, timeout)

    def wait_for_historical_data(self, max_wait):
        return _fastdds_python.DataReader_wait_for_historical_data(self, max_wait)

    def read(self, *args):
        return _fastdds_python.DataReader_read(self, *args)

    def read_w_condition(self, data_values, sample_infos, max_samples, a_condition):
        return _fastdds_python.DataReader_read_w_condition(self, data_values, sample_infos, max_samples, a_condition)

    def read_instance(self, *args):
        return _fastdds_python.DataReader_read_instance(self, *args)

    def read_next_instance(self, *args):
        return _fastdds_python.DataReader_read_next_instance(self, *args)

    def read_next_instance_w_condition(self, data_values, sample_infos, max_samples, previous_handle, a_condition):
        return _fastdds_python.DataReader_read_next_instance_w_condition(self, data_values, sample_infos, max_samples, previous_handle, a_condition)

    def read_next_sample(self, data, info):
        return _fastdds_python.DataReader_read_next_sample(self, data, info)

    def take(self, *args):
        return _fastdds_python.DataReader_take(self, *args)

    def take_w_condition(self, data_values, sample_infos, max_samples, a_condition):
        return _fastdds_python.DataReader_take_w_condition(self, data_values, sample_infos, max_samples, a_condition)

    def take_instance(self, *args):
        return _fastdds_python.DataReader_take_instance(self, *args)

    def take_next_instance(self, *args):
        return _fastdds_python.DataReader_take_next_instance(self, *args)

    def take_next_instance_w_condition(self, data_values, sample_infos, max_samples, previous_handle, a_condition):
        return _fastdds_python.DataReader_take_next_instance_w_condition(self, data_values, sample_infos, max_samples, previous_handle, a_condition)

    def take_next_sample(self, data, info):
        return _fastdds_python.DataReader_take_next_sample(self, data, info)

    def return_loan(self, data_values, sample_infos):
        return _fastdds_python.DataReader_return_loan(self, data_values, sample_infos)

    def get_key_value(self, key_holder, handle):
        return _fastdds_python.DataReader_get_key_value(self, key_holder, handle)

    def lookup_instance(self, instance):
        return _fastdds_python.DataReader_lookup_instance(self, instance)

    def get_first_untaken_info(self, info):
        return _fastdds_python.DataReader_get_first_untaken_info(self, info)

    def get_unread_count(self, *args):
        return _fastdds_python.DataReader_get_unread_count(self, *args)

    def guid(self, *args):
        return _fastdds_python.DataReader_guid(self, *args)

    def get_instance_handle(self):
        return _fastdds_python.DataReader_get_instance_handle(self)

    def type(self):
        return _fastdds_python.DataReader_type(self)

    def get_topicdescription(self):
        return _fastdds_python.DataReader_get_topicdescription(self)

    def get_requested_deadline_missed_status(self, status):
        return _fastdds_python.DataReader_get_requested_deadline_missed_status(self, status)

    def get_requested_incompatible_qos_status(self, status):
        return _fastdds_python.DataReader_get_requested_incompatible_qos_status(self, status)

    def set_qos(self, qos):
        return _fastdds_python.DataReader_set_qos(self, qos)

    def get_qos(self, *args):
        return _fastdds_python.DataReader_get_qos(self, *args)

    def get_listener(self):
        return _fastdds_python.DataReader_get_listener(self)

    def get_liveliness_changed_status(self, status):
        return _fastdds_python.DataReader_get_liveliness_changed_status(self, status)

    def get_sample_lost_status(self, status):
        return _fastdds_python.DataReader_get_sample_lost_status(self, status)

    def get_sample_rejected_status(self, status):
        return _fastdds_python.DataReader_get_sample_rejected_status(self, status)

    def get_subscription_matched_status(self, status):
        return _fastdds_python.DataReader_get_subscription_matched_status(self, status)

    def get_matched_publication_data(self, publication_data, publication_handle):
        return _fastdds_python.DataReader_get_matched_publication_data(self, publication_data, publication_handle)

    def get_matched_publications(self, publication_handles):
        return _fastdds_python.DataReader_get_matched_publications(self, publication_handles)

    def create_readcondition(self, sample_states, view_states, instance_states):
        return _fastdds_python.DataReader_create_readcondition(self, sample_states, view_states, instance_states)

    def create_querycondition(self, sample_states, view_states, instance_states, query_expression, query_parameters):
        return _fastdds_python.DataReader_create_querycondition(self, sample_states, view_states, instance_states, query_expression, query_parameters)

    def delete_readcondition(self, a_condition):
        return _fastdds_python.DataReader_delete_readcondition(self, a_condition)

    def get_subscriber(self):
        return _fastdds_python.DataReader_get_subscriber(self)

    def delete_contained_entities(self):
        return _fastdds_python.DataReader_delete_contained_entities(self)

    def is_sample_valid(self, data, info):
        return _fastdds_python.DataReader_is_sample_valid(self, data, info)

    def get_listening_locators(self, locators):
        return _fastdds_python.DataReader_get_listening_locators(self, locators)

    def get_subscription_builtin_topic_data(self, subscription_data):
        return _fastdds_python.DataReader_get_subscription_builtin_topic_data(self, subscription_data)

    def set_listener(self, *args):
        return _fastdds_python.DataReader_set_listener(self, *args)

# Register DataReader in _fastdds_python:
_fastdds_python.DataReader_swigregister(DataReader)

class Subscriber(DomainEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def enable(self):
        return _fastdds_python.Subscriber_enable(self)

    def get_qos(self, *args):
        return _fastdds_python.Subscriber_get_qos(self, *args)

    def set_qos(self, qos):
        return _fastdds_python.Subscriber_set_qos(self, qos)

    def get_listener(self):
        return _fastdds_python.Subscriber_get_listener(self)

    def lookup_datareader(self, topic_name):
        return _fastdds_python.Subscriber_lookup_datareader(self, topic_name)

    def get_datareaders(self, *args):
        return _fastdds_python.Subscriber_get_datareaders(self, *args)

    def has_datareaders(self):
        return _fastdds_python.Subscriber_has_datareaders(self)

    def begin_access(self):
        return _fastdds_python.Subscriber_begin_access(self)

    def end_access(self):
        return _fastdds_python.Subscriber_end_access(self)

    def notify_datareaders(self):
        return _fastdds_python.Subscriber_notify_datareaders(self)

    def delete_contained_entities(self):
        return _fastdds_python.Subscriber_delete_contained_entities(self)

    def set_default_datareader_qos(self, qos):
        return _fastdds_python.Subscriber_set_default_datareader_qos(self, qos)

    def get_default_datareader_qos(self, *args):
        return _fastdds_python.Subscriber_get_default_datareader_qos(self, *args)

    def get_datareader_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.Subscriber_get_datareader_qos_from_profile(self, profile_name, qos)

    @staticmethod
    def copy_from_topic_qos(reader_qos, topic_qos):
        return _fastdds_python.Subscriber_copy_from_topic_qos(reader_qos, topic_qos)

    def get_participant(self):
        return _fastdds_python.Subscriber_get_participant(self)

    def get_instance_handle(self):
        return _fastdds_python.Subscriber_get_instance_handle(self)

    def set_listener(self, *args):
        return _fastdds_python.Subscriber_set_listener(self, *args)

    def create_datareader(self, *args):
        return _fastdds_python.Subscriber_create_datareader(self, *args)

    def create_datareader_with_profile(self, *args):
        return _fastdds_python.Subscriber_create_datareader_with_profile(self, *args)

    def delete_datareader(self, reader):
        return _fastdds_python.Subscriber_delete_datareader(self, reader)

# Register Subscriber in _fastdds_python:
_fastdds_python.Subscriber_swigregister(Subscriber)

def Subscriber_copy_from_topic_qos(reader_qos, topic_qos):
    return _fastdds_python.Subscriber_copy_from_topic_qos(reader_qos, topic_qos)

class PublisherQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.PublisherQos_swiginit(self, _fastdds_python.new_PublisherQos())
    __swig_destroy__ = _fastdds_python.delete_PublisherQos

    def __eq__(self, b):
        return _fastdds_python.PublisherQos___eq__(self, b)

    def presentation(self, *args):
        return _fastdds_python.PublisherQos_presentation(self, *args)

    def partition(self, *args):
        return _fastdds_python.PublisherQos_partition(self, *args)

    def group_data(self, *args):
        return _fastdds_python.PublisherQos_group_data(self, *args)

    def entity_factory(self, *args):
        return _fastdds_python.PublisherQos_entity_factory(self, *args)

# Register PublisherQos in _fastdds_python:
_fastdds_python.PublisherQos_swigregister(PublisherQos)

class WriterQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.WriterQos_swiginit(self, _fastdds_python.new_WriterQos())
    __swig_destroy__ = _fastdds_python.delete_WriterQos

    def __eq__(self, b):
        return _fastdds_python.WriterQos___eq__(self, b)
    m_durability = property(_fastdds_python.WriterQos_m_durability_get, _fastdds_python.WriterQos_m_durability_set)
    m_durabilityService = property(_fastdds_python.WriterQos_m_durabilityService_get, _fastdds_python.WriterQos_m_durabilityService_set)
    m_deadline = property(_fastdds_python.WriterQos_m_deadline_get, _fastdds_python.WriterQos_m_deadline_set)
    m_latencyBudget = property(_fastdds_python.WriterQos_m_latencyBudget_get, _fastdds_python.WriterQos_m_latencyBudget_set)
    m_liveliness = property(_fastdds_python.WriterQos_m_liveliness_get, _fastdds_python.WriterQos_m_liveliness_set)
    m_reliability = property(_fastdds_python.WriterQos_m_reliability_get, _fastdds_python.WriterQos_m_reliability_set)
    m_lifespan = property(_fastdds_python.WriterQos_m_lifespan_get, _fastdds_python.WriterQos_m_lifespan_set)
    m_userData = property(_fastdds_python.WriterQos_m_userData_get, _fastdds_python.WriterQos_m_userData_set)
    m_timeBasedFilter = property(_fastdds_python.WriterQos_m_timeBasedFilter_get, _fastdds_python.WriterQos_m_timeBasedFilter_set)
    m_ownership = property(_fastdds_python.WriterQos_m_ownership_get, _fastdds_python.WriterQos_m_ownership_set)
    m_ownershipStrength = property(_fastdds_python.WriterQos_m_ownershipStrength_get, _fastdds_python.WriterQos_m_ownershipStrength_set)
    m_destinationOrder = property(_fastdds_python.WriterQos_m_destinationOrder_get, _fastdds_python.WriterQos_m_destinationOrder_set)
    m_presentation = property(_fastdds_python.WriterQos_m_presentation_get, _fastdds_python.WriterQos_m_presentation_set)
    m_partition = property(_fastdds_python.WriterQos_m_partition_get, _fastdds_python.WriterQos_m_partition_set)
    m_topicData = property(_fastdds_python.WriterQos_m_topicData_get, _fastdds_python.WriterQos_m_topicData_set)
    m_groupData = property(_fastdds_python.WriterQos_m_groupData_get, _fastdds_python.WriterQos_m_groupData_set)
    m_publishMode = property(_fastdds_python.WriterQos_m_publishMode_get, _fastdds_python.WriterQos_m_publishMode_set)
    representation = property(_fastdds_python.WriterQos_representation_get, _fastdds_python.WriterQos_representation_set)
    m_disablePositiveACKs = property(_fastdds_python.WriterQos_m_disablePositiveACKs_get, _fastdds_python.WriterQos_m_disablePositiveACKs_set)
    data_sharing = property(_fastdds_python.WriterQos_data_sharing_get, _fastdds_python.WriterQos_data_sharing_set)
    disable_heartbeat_piggyback = property(_fastdds_python.WriterQos_disable_heartbeat_piggyback_get, _fastdds_python.WriterQos_disable_heartbeat_piggyback_set)

    def setQos(self, qos, first_time):
        return _fastdds_python.WriterQos_setQos(self, qos, first_time)

    def checkQos(self):
        return _fastdds_python.WriterQos_checkQos(self)

    def canQosBeUpdated(self, qos):
        return _fastdds_python.WriterQos_canQosBeUpdated(self, qos)

# Register WriterQos in _fastdds_python:
_fastdds_python.WriterQos_swigregister(WriterQos)
PUBLISHER_QOS_DEFAULT = cvar.PUBLISHER_QOS_DEFAULT

class RTPSReliableWriterQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RTPSReliableWriterQos_swiginit(self, _fastdds_python.new_RTPSReliableWriterQos())
    __swig_destroy__ = _fastdds_python.delete_RTPSReliableWriterQos

    def __eq__(self, b):
        return _fastdds_python.RTPSReliableWriterQos___eq__(self, b)

    def clear(self):
        return _fastdds_python.RTPSReliableWriterQos_clear(self)
    times = property(_fastdds_python.RTPSReliableWriterQos_times_get, _fastdds_python.RTPSReliableWriterQos_times_set)
    disable_positive_acks = property(_fastdds_python.RTPSReliableWriterQos_disable_positive_acks_get, _fastdds_python.RTPSReliableWriterQos_disable_positive_acks_set)
    disable_heartbeat_piggyback = property(_fastdds_python.RTPSReliableWriterQos_disable_heartbeat_piggyback_get, _fastdds_python.RTPSReliableWriterQos_disable_heartbeat_piggyback_set)

# Register RTPSReliableWriterQos in _fastdds_python:
_fastdds_python.RTPSReliableWriterQos_swigregister(RTPSReliableWriterQos)

class DataWriterQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DataWriterQos_swiginit(self, _fastdds_python.new_DataWriterQos())
    __swig_destroy__ = _fastdds_python.delete_DataWriterQos

    def __eq__(self, b):
        return _fastdds_python.DataWriterQos___eq__(self, b)

    def get_writerqos(self, pqos, tqos):
        return _fastdds_python.DataWriterQos_get_writerqos(self, pqos, tqos)

    def durability(self, *args):
        return _fastdds_python.DataWriterQos_durability(self, *args)

    def durability_service(self, *args):
        return _fastdds_python.DataWriterQos_durability_service(self, *args)

    def deadline(self, *args):
        return _fastdds_python.DataWriterQos_deadline(self, *args)

    def latency_budget(self, *args):
        return _fastdds_python.DataWriterQos_latency_budget(self, *args)

    def liveliness(self, *args):
        return _fastdds_python.DataWriterQos_liveliness(self, *args)

    def reliability(self, *args):
        return _fastdds_python.DataWriterQos_reliability(self, *args)

    def destination_order(self, *args):
        return _fastdds_python.DataWriterQos_destination_order(self, *args)

    def history(self, *args):
        return _fastdds_python.DataWriterQos_history(self, *args)

    def resource_limits(self, *args):
        return _fastdds_python.DataWriterQos_resource_limits(self, *args)

    def transport_priority(self, *args):
        return _fastdds_python.DataWriterQos_transport_priority(self, *args)

    def lifespan(self, *args):
        return _fastdds_python.DataWriterQos_lifespan(self, *args)

    def user_data(self, *args):
        return _fastdds_python.DataWriterQos_user_data(self, *args)

    def ownership(self, *args):
        return _fastdds_python.DataWriterQos_ownership(self, *args)

    def ownership_strength(self, *args):
        return _fastdds_python.DataWriterQos_ownership_strength(self, *args)

    def writer_data_lifecycle(self, *args):
        return _fastdds_python.DataWriterQos_writer_data_lifecycle(self, *args)

    def publish_mode(self, *args):
        return _fastdds_python.DataWriterQos_publish_mode(self, *args)

    def properties(self, *args):
        return _fastdds_python.DataWriterQos_properties(self, *args)

    def reliable_writer_qos(self, *args):
        return _fastdds_python.DataWriterQos_reliable_writer_qos(self, *args)

    def endpoint(self, *args):
        return _fastdds_python.DataWriterQos_endpoint(self, *args)

    def writer_resource_limits(self, *args):
        return _fastdds_python.DataWriterQos_writer_resource_limits(self, *args)

    def data_sharing(self, *args):
        return _fastdds_python.DataWriterQos_data_sharing(self, *args)

# Register DataWriterQos in _fastdds_python:
_fastdds_python.DataWriterQos_swigregister(DataWriterQos)

class DataWriterListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DataWriterListener:
            _self = None
        else:
            _self = self
        _fastdds_python.DataWriterListener_swiginit(self, _fastdds_python.new_DataWriterListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_DataWriterListener

    def on_publication_matched(self, writer, info):
        return _fastdds_python.DataWriterListener_on_publication_matched(self, writer, info)

    def on_offered_deadline_missed(self, writer, status):
        return _fastdds_python.DataWriterListener_on_offered_deadline_missed(self, writer, status)

    def on_offered_incompatible_qos(self, writer, status):
        return _fastdds_python.DataWriterListener_on_offered_incompatible_qos(self, writer, status)

    def on_liveliness_lost(self, writer, status):
        return _fastdds_python.DataWriterListener_on_liveliness_lost(self, writer, status)

    def on_unacknowledged_sample_removed(self, writer, instance):
        return _fastdds_python.DataWriterListener_on_unacknowledged_sample_removed(self, writer, instance)
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_DataWriterListener(self)
        return weakref.proxy(self)

# Register DataWriterListener in _fastdds_python:
_fastdds_python.DataWriterListener_swigregister(DataWriterListener)
DATAWRITER_QOS_DEFAULT = cvar.DATAWRITER_QOS_DEFAULT
DATAWRITER_QOS_USE_TOPIC_QOS = cvar.DATAWRITER_QOS_USE_TOPIC_QOS

class PublisherListener(DataWriterListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PublisherListener:
            _self = None
        else:
            _self = self
        _fastdds_python.PublisherListener_swiginit(self, _fastdds_python.new_PublisherListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_PublisherListener
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_PublisherListener(self)
        return weakref.proxy(self)

# Register PublisherListener in _fastdds_python:
_fastdds_python.PublisherListener_swigregister(PublisherListener)

class DataWriterVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.DataWriterVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.DataWriterVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.DataWriterVector___bool__(self)

    def __len__(self):
        return _fastdds_python.DataWriterVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.DataWriterVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.DataWriterVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.DataWriterVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.DataWriterVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.DataWriterVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.DataWriterVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.DataWriterVector_pop(self)

    def append(self, x):
        return _fastdds_python.DataWriterVector_append(self, x)

    def empty(self):
        return _fastdds_python.DataWriterVector_empty(self)

    def size(self):
        return _fastdds_python.DataWriterVector_size(self)

    def swap(self, v):
        return _fastdds_python.DataWriterVector_swap(self, v)

    def begin(self):
        return _fastdds_python.DataWriterVector_begin(self)

    def end(self):
        return _fastdds_python.DataWriterVector_end(self)

    def rbegin(self):
        return _fastdds_python.DataWriterVector_rbegin(self)

    def rend(self):
        return _fastdds_python.DataWriterVector_rend(self)

    def clear(self):
        return _fastdds_python.DataWriterVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.DataWriterVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.DataWriterVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.DataWriterVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.DataWriterVector_swiginit(self, _fastdds_python.new_DataWriterVector(*args))

    def push_back(self, x):
        return _fastdds_python.DataWriterVector_push_back(self, x)

    def front(self):
        return _fastdds_python.DataWriterVector_front(self)

    def back(self):
        return _fastdds_python.DataWriterVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.DataWriterVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.DataWriterVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.DataWriterVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.DataWriterVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.DataWriterVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_DataWriterVector

# Register DataWriterVector in _fastdds_python:
_fastdds_python.DataWriterVector_swigregister(DataWriterVector)

class DataWriter(DomainEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LoanInitializationKind_NO_LOAN_INITIALIZATION = _fastdds_python.DataWriter_LoanInitializationKind_NO_LOAN_INITIALIZATION
    LoanInitializationKind_ZERO_LOAN_INITIALIZATION = _fastdds_python.DataWriter_LoanInitializationKind_ZERO_LOAN_INITIALIZATION
    LoanInitializationKind_CONSTRUCTED_LOAN_INITIALIZATION = _fastdds_python.DataWriter_LoanInitializationKind_CONSTRUCTED_LOAN_INITIALIZATION
    __swig_destroy__ = _fastdds_python.delete_DataWriter

    def enable(self):
        return _fastdds_python.DataWriter_enable(self)

    def write(self, *args):
        return _fastdds_python.DataWriter_write(self, *args)

    def write_w_timestamp(self, data, handle, timestamp):
        return _fastdds_python.DataWriter_write_w_timestamp(self, data, handle, timestamp)

    def register_instance(self, instance):
        return _fastdds_python.DataWriter_register_instance(self, instance)

    def register_instance_w_timestamp(self, instance, timestamp):
        return _fastdds_python.DataWriter_register_instance_w_timestamp(self, instance, timestamp)

    def unregister_instance(self, instance, handle):
        return _fastdds_python.DataWriter_unregister_instance(self, instance, handle)

    def unregister_instance_w_timestamp(self, instance, handle, timestamp):
        return _fastdds_python.DataWriter_unregister_instance_w_timestamp(self, instance, handle, timestamp)

    def get_key_value(self, key_holder, handle):
        return _fastdds_python.DataWriter_get_key_value(self, key_holder, handle)

    def lookup_instance(self, instance):
        return _fastdds_python.DataWriter_lookup_instance(self, instance)

    def guid(self):
        return _fastdds_python.DataWriter_guid(self)

    def get_instance_handle(self):
        return _fastdds_python.DataWriter_get_instance_handle(self)

    def get_type(self):
        return _fastdds_python.DataWriter_get_type(self)

    def get_offered_deadline_missed_status(self, status):
        return _fastdds_python.DataWriter_get_offered_deadline_missed_status(self, status)

    def get_offered_incompatible_qos_status(self, status):
        return _fastdds_python.DataWriter_get_offered_incompatible_qos_status(self, status)

    def get_publication_matched_status(self, status):
        return _fastdds_python.DataWriter_get_publication_matched_status(self, status)

    def set_qos(self, qos):
        return _fastdds_python.DataWriter_set_qos(self, qos)

    def get_qos(self, *args):
        return _fastdds_python.DataWriter_get_qos(self, *args)

    def get_topic(self):
        return _fastdds_python.DataWriter_get_topic(self)

    def get_listener(self):
        return _fastdds_python.DataWriter_get_listener(self)

    def dispose(self, data, handle):
        return _fastdds_python.DataWriter_dispose(self, data, handle)

    def dispose_w_timestamp(self, instance, handle, timestamp):
        return _fastdds_python.DataWriter_dispose_w_timestamp(self, instance, handle, timestamp)

    def get_liveliness_lost_status(self, status):
        return _fastdds_python.DataWriter_get_liveliness_lost_status(self, status)

    def get_publisher(self):
        return _fastdds_python.DataWriter_get_publisher(self)

    def assert_liveliness(self):
        return _fastdds_python.DataWriter_assert_liveliness(self)

    def get_matched_subscription_data(self, subscription_data, subscription_handle):
        return _fastdds_python.DataWriter_get_matched_subscription_data(self, subscription_data, subscription_handle)

    def get_matched_subscriptions(self, subscription_handles):
        return _fastdds_python.DataWriter_get_matched_subscriptions(self, subscription_handles)

    def loan_sample(self, *args):
        return _fastdds_python.DataWriter_loan_sample(self, *args)

    def get_sending_locators(self, locators):
        return _fastdds_python.DataWriter_get_sending_locators(self, locators)

    def wait_for_acknowledgments(self, *args):
        return _fastdds_python.DataWriter_wait_for_acknowledgments(self, *args)

    def get_publication_builtin_topic_data(self, publication_data):
        return _fastdds_python.DataWriter_get_publication_builtin_topic_data(self, publication_data)

    def clear_history(self):
        return _fastdds_python.DataWriter_clear_history(self)

    def set_listener(self, *args):
        return _fastdds_python.DataWriter_set_listener(self, *args)

# Register DataWriter in _fastdds_python:
_fastdds_python.DataWriter_swigregister(DataWriter)

class Publisher(DomainEntity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def enable(self):
        return _fastdds_python.Publisher_enable(self)

    def get_qos(self, *args):
        return _fastdds_python.Publisher_get_qos(self, *args)

    def set_qos(self, qos):
        return _fastdds_python.Publisher_set_qos(self, qos)

    def get_listener(self):
        return _fastdds_python.Publisher_get_listener(self)

    def lookup_datawriter(self, topic_name):
        return _fastdds_python.Publisher_lookup_datawriter(self, topic_name)

    def suspend_publications(self):
        return _fastdds_python.Publisher_suspend_publications(self)

    def resume_publications(self):
        return _fastdds_python.Publisher_resume_publications(self)

    def begin_coherent_changes(self):
        return _fastdds_python.Publisher_begin_coherent_changes(self)

    def end_coherent_changes(self):
        return _fastdds_python.Publisher_end_coherent_changes(self)

    def wait_for_acknowledgments(self, max_wait):
        return _fastdds_python.Publisher_wait_for_acknowledgments(self, max_wait)

    def get_participant(self):
        return _fastdds_python.Publisher_get_participant(self)

    def delete_contained_entities(self):
        return _fastdds_python.Publisher_delete_contained_entities(self)

    def set_default_datawriter_qos(self, qos):
        return _fastdds_python.Publisher_set_default_datawriter_qos(self, qos)

    def get_default_datawriter_qos(self, *args):
        return _fastdds_python.Publisher_get_default_datawriter_qos(self, *args)

    @staticmethod
    def copy_from_topic_qos(writer_qos, topic_qos):
        return _fastdds_python.Publisher_copy_from_topic_qos(writer_qos, topic_qos)

    def get_datawriter_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.Publisher_get_datawriter_qos_from_profile(self, profile_name, qos)

    def get_instance_handle(self):
        return _fastdds_python.Publisher_get_instance_handle(self)

    def get_datawriters(self, writers):
        return _fastdds_python.Publisher_get_datawriters(self, writers)

    def has_datawriters(self):
        return _fastdds_python.Publisher_has_datawriters(self)

    def set_listener(self, *args):
        return _fastdds_python.Publisher_set_listener(self, *args)

    def create_datawriter(self, *args):
        return _fastdds_python.Publisher_create_datawriter(self, *args)

    def create_datawriter_with_profile(self, *args):
        return _fastdds_python.Publisher_create_datawriter_with_profile(self, *args)

    def delete_datawriter(self, writer):
        return _fastdds_python.Publisher_delete_datawriter(self, writer)

# Register Publisher in _fastdds_python:
_fastdds_python.Publisher_swigregister(Publisher)

def Publisher_copy_from_topic_qos(writer_qos, topic_qos):
    return _fastdds_python.Publisher_copy_from_topic_qos(writer_qos, topic_qos)

class DomainParticipantListener(PublisherListener, SubscriberListener, TopicListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DomainParticipantListener:
            _self = None
        else:
            _self = self
        _fastdds_python.DomainParticipantListener_swiginit(self, _fastdds_python.new_DomainParticipantListener(_self, ))
    __swig_destroy__ = _fastdds_python.delete_DomainParticipantListener

    def on_participant_discovery(self, participant, reason, info, should_be_ignored):
        return _fastdds_python.DomainParticipantListener_on_participant_discovery(self, participant, reason, info, should_be_ignored)

    def on_data_reader_discovery(self, participant, reason, info, should_be_ignored):
        return _fastdds_python.DomainParticipantListener_on_data_reader_discovery(self, participant, reason, info, should_be_ignored)

    def on_data_writer_discovery(self, participant, reason, info, should_be_ignored):
        return _fastdds_python.DomainParticipantListener_on_data_writer_discovery(self, participant, reason, info, should_be_ignored)
    def __disown__(self):
        self.this.disown()
        _fastdds_python.disown_DomainParticipantListener(self)
        return weakref.proxy(self)

# Register DomainParticipantListener in _fastdds_python:
_fastdds_python.DomainParticipantListener_swigregister(DomainParticipantListener)

class DomainParticipantFactoryQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DomainParticipantFactoryQos_swiginit(self, _fastdds_python.new_DomainParticipantFactoryQos())
    __swig_destroy__ = _fastdds_python.delete_DomainParticipantFactoryQos

    def __eq__(self, b):
        return _fastdds_python.DomainParticipantFactoryQos___eq__(self, b)

    def entity_factory(self, *args):
        return _fastdds_python.DomainParticipantFactoryQos_entity_factory(self, *args)

    def shm_watchdog_thread(self, *args):
        return _fastdds_python.DomainParticipantFactoryQos_shm_watchdog_thread(self, *args)

    def file_watch_threads(self, *args):
        return _fastdds_python.DomainParticipantFactoryQos_file_watch_threads(self, *args)

# Register DomainParticipantFactoryQos in _fastdds_python:
_fastdds_python.DomainParticipantFactoryQos_swigregister(DomainParticipantFactoryQos)

class FlowControllerDescriptorList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.FlowControllerDescriptorList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.FlowControllerDescriptorList___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.FlowControllerDescriptorList___bool__(self)

    def __len__(self):
        return _fastdds_python.FlowControllerDescriptorList___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.FlowControllerDescriptorList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.FlowControllerDescriptorList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.FlowControllerDescriptorList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.FlowControllerDescriptorList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.FlowControllerDescriptorList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.FlowControllerDescriptorList___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.FlowControllerDescriptorList_pop(self)

    def append(self, x):
        return _fastdds_python.FlowControllerDescriptorList_append(self, x)

    def empty(self):
        return _fastdds_python.FlowControllerDescriptorList_empty(self)

    def size(self):
        return _fastdds_python.FlowControllerDescriptorList_size(self)

    def swap(self, v):
        return _fastdds_python.FlowControllerDescriptorList_swap(self, v)

    def begin(self):
        return _fastdds_python.FlowControllerDescriptorList_begin(self)

    def end(self):
        return _fastdds_python.FlowControllerDescriptorList_end(self)

    def rbegin(self):
        return _fastdds_python.FlowControllerDescriptorList_rbegin(self)

    def rend(self):
        return _fastdds_python.FlowControllerDescriptorList_rend(self)

    def clear(self):
        return _fastdds_python.FlowControllerDescriptorList_clear(self)

    def get_allocator(self):
        return _fastdds_python.FlowControllerDescriptorList_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.FlowControllerDescriptorList_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.FlowControllerDescriptorList_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.FlowControllerDescriptorList_swiginit(self, _fastdds_python.new_FlowControllerDescriptorList(*args))

    def push_back(self, x):
        return _fastdds_python.FlowControllerDescriptorList_push_back(self, x)

    def front(self):
        return _fastdds_python.FlowControllerDescriptorList_front(self)

    def back(self):
        return _fastdds_python.FlowControllerDescriptorList_back(self)

    def assign(self, n, x):
        return _fastdds_python.FlowControllerDescriptorList_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.FlowControllerDescriptorList_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.FlowControllerDescriptorList_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.FlowControllerDescriptorList_reserve(self, n)

    def capacity(self):
        return _fastdds_python.FlowControllerDescriptorList_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_FlowControllerDescriptorList

# Register FlowControllerDescriptorList in _fastdds_python:
_fastdds_python.FlowControllerDescriptorList_swigregister(FlowControllerDescriptorList)
PARTICIPANT_FACTORY_QOS_DEFAULT = cvar.PARTICIPANT_FACTORY_QOS_DEFAULT

class DomainParticipantQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DomainParticipantQos_swiginit(self, _fastdds_python.new_DomainParticipantQos())
    __swig_destroy__ = _fastdds_python.delete_DomainParticipantQos

    def __eq__(self, b):
        return _fastdds_python.DomainParticipantQos___eq__(self, b)

    def user_data(self, *args):
        return _fastdds_python.DomainParticipantQos_user_data(self, *args)

    def entity_factory(self, *args):
        return _fastdds_python.DomainParticipantQos_entity_factory(self, *args)

    def allocation(self, *args):
        return _fastdds_python.DomainParticipantQos_allocation(self, *args)

    def properties(self, *args):
        return _fastdds_python.DomainParticipantQos_properties(self, *args)

    def wire_protocol(self, *args):
        return _fastdds_python.DomainParticipantQos_wire_protocol(self, *args)

    def transport(self, *args):
        return _fastdds_python.DomainParticipantQos_transport(self, *args)

    def flow_controllers(self, *args):
        return _fastdds_python.DomainParticipantQos_flow_controllers(self, *args)

    def setup_transports(self, *args):
        return _fastdds_python.DomainParticipantQos_setup_transports(self, *args)

    def builtin_controllers_sender_thread(self, *args):
        return _fastdds_python.DomainParticipantQos_builtin_controllers_sender_thread(self, *args)

    def timed_events_thread(self, *args):
        return _fastdds_python.DomainParticipantQos_timed_events_thread(self, *args)

    def discovery_server_thread(self, *args):
        return _fastdds_python.DomainParticipantQos_discovery_server_thread(self, *args)

    def typelookup_service_thread(self, *args):
        return _fastdds_python.DomainParticipantQos_typelookup_service_thread(self, *args)

    def name(self, *args):
        return _fastdds_python.DomainParticipantQos_name(self, *args)

# Register DomainParticipantQos in _fastdds_python:
_fastdds_python.DomainParticipantQos_swigregister(DomainParticipantQos)

class DomainParticipantExtendedQos(DomainParticipantQos):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.DomainParticipantExtendedQos_swiginit(self, _fastdds_python.new_DomainParticipantExtendedQos())
    __swig_destroy__ = _fastdds_python.delete_DomainParticipantExtendedQos

    def __eq__(self, *args):
        return _fastdds_python.DomainParticipantExtendedQos___eq__(self, *args)

    def domainId(self, *args):
        return _fastdds_python.DomainParticipantExtendedQos_domainId(self, *args)

# Register DomainParticipantExtendedQos in _fastdds_python:
_fastdds_python.DomainParticipantExtendedQos_swigregister(DomainParticipantExtendedQos)
PARTICIPANT_QOS_DEFAULT = cvar.PARTICIPANT_QOS_DEFAULT

class ReplierQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.ReplierQos_swiginit(self, _fastdds_python.new_ReplierQos())

    def __eq__(self, b):
        return _fastdds_python.ReplierQos___eq__(self, b)
    service_name = property(_fastdds_python.ReplierQos_service_name_get, _fastdds_python.ReplierQos_service_name_set)
    request_type = property(_fastdds_python.ReplierQos_request_type_get, _fastdds_python.ReplierQos_request_type_set)
    reply_type = property(_fastdds_python.ReplierQos_reply_type_get, _fastdds_python.ReplierQos_reply_type_set)
    request_topic_name = property(_fastdds_python.ReplierQos_request_topic_name_get, _fastdds_python.ReplierQos_request_topic_name_set)
    reply_topic_name = property(_fastdds_python.ReplierQos_reply_topic_name_get, _fastdds_python.ReplierQos_reply_topic_name_set)
    writer_qos = property(_fastdds_python.ReplierQos_writer_qos_get, _fastdds_python.ReplierQos_writer_qos_set)
    reader_qos = property(_fastdds_python.ReplierQos_reader_qos_get, _fastdds_python.ReplierQos_reader_qos_set)
    __swig_destroy__ = _fastdds_python.delete_ReplierQos

# Register ReplierQos in _fastdds_python:
_fastdds_python.ReplierQos_swigregister(ReplierQos)

class RequesterQos(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fastdds_python.RequesterQos_swiginit(self, _fastdds_python.new_RequesterQos())

    def __eq__(self, b):
        return _fastdds_python.RequesterQos___eq__(self, b)
    service_name = property(_fastdds_python.RequesterQos_service_name_get, _fastdds_python.RequesterQos_service_name_set)
    request_type = property(_fastdds_python.RequesterQos_request_type_get, _fastdds_python.RequesterQos_request_type_set)
    reply_type = property(_fastdds_python.RequesterQos_reply_type_get, _fastdds_python.RequesterQos_reply_type_set)
    request_topic_name = property(_fastdds_python.RequesterQos_request_topic_name_get, _fastdds_python.RequesterQos_request_topic_name_set)
    reply_topic_name = property(_fastdds_python.RequesterQos_reply_topic_name_get, _fastdds_python.RequesterQos_reply_topic_name_set)
    writer_qos = property(_fastdds_python.RequesterQos_writer_qos_get, _fastdds_python.RequesterQos_writer_qos_set)
    reader_qos = property(_fastdds_python.RequesterQos_reader_qos_get, _fastdds_python.RequesterQos_reader_qos_set)
    __swig_destroy__ = _fastdds_python.delete_RequesterQos

# Register RequesterQos in _fastdds_python:
_fastdds_python.RequesterQos_swigregister(RequesterQos)

class DomainParticipantVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fastdds_python.DomainParticipantVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fastdds_python.DomainParticipantVector___nonzero__(self)

    def __bool__(self):
        return _fastdds_python.DomainParticipantVector___bool__(self)

    def __len__(self):
        return _fastdds_python.DomainParticipantVector___len__(self)

    def __getslice__(self, i, j):
        return _fastdds_python.DomainParticipantVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fastdds_python.DomainParticipantVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fastdds_python.DomainParticipantVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fastdds_python.DomainParticipantVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fastdds_python.DomainParticipantVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fastdds_python.DomainParticipantVector___setitem__(self, *args)

    def pop(self):
        return _fastdds_python.DomainParticipantVector_pop(self)

    def append(self, x):
        return _fastdds_python.DomainParticipantVector_append(self, x)

    def empty(self):
        return _fastdds_python.DomainParticipantVector_empty(self)

    def size(self):
        return _fastdds_python.DomainParticipantVector_size(self)

    def swap(self, v):
        return _fastdds_python.DomainParticipantVector_swap(self, v)

    def begin(self):
        return _fastdds_python.DomainParticipantVector_begin(self)

    def end(self):
        return _fastdds_python.DomainParticipantVector_end(self)

    def rbegin(self):
        return _fastdds_python.DomainParticipantVector_rbegin(self)

    def rend(self):
        return _fastdds_python.DomainParticipantVector_rend(self)

    def clear(self):
        return _fastdds_python.DomainParticipantVector_clear(self)

    def get_allocator(self):
        return _fastdds_python.DomainParticipantVector_get_allocator(self)

    def pop_back(self):
        return _fastdds_python.DomainParticipantVector_pop_back(self)

    def erase(self, *args):
        return _fastdds_python.DomainParticipantVector_erase(self, *args)

    def __init__(self, *args):
        _fastdds_python.DomainParticipantVector_swiginit(self, _fastdds_python.new_DomainParticipantVector(*args))

    def push_back(self, x):
        return _fastdds_python.DomainParticipantVector_push_back(self, x)

    def front(self):
        return _fastdds_python.DomainParticipantVector_front(self)

    def back(self):
        return _fastdds_python.DomainParticipantVector_back(self)

    def assign(self, n, x):
        return _fastdds_python.DomainParticipantVector_assign(self, n, x)

    def resize(self, *args):
        return _fastdds_python.DomainParticipantVector_resize(self, *args)

    def insert(self, *args):
        return _fastdds_python.DomainParticipantVector_insert(self, *args)

    def reserve(self, n):
        return _fastdds_python.DomainParticipantVector_reserve(self, n)

    def capacity(self):
        return _fastdds_python.DomainParticipantVector_capacity(self)
    __swig_destroy__ = _fastdds_python.delete_DomainParticipantVector

# Register DomainParticipantVector in _fastdds_python:
_fastdds_python.DomainParticipantVector_swigregister(DomainParticipantVector)

class DomainParticipant(Entity):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def get_qos(self, *args):
        return _fastdds_python.DomainParticipant_get_qos(self, *args)

    def set_qos(self, qos):
        return _fastdds_python.DomainParticipant_set_qos(self, qos)

    def get_listener(self):
        return _fastdds_python.DomainParticipant_get_listener(self)

    def enable(self):
        return _fastdds_python.DomainParticipant_enable(self)

    def create_topic(self, *args):
        return _fastdds_python.DomainParticipant_create_topic(self, *args)

    def create_topic_with_profile(self, *args):
        return _fastdds_python.DomainParticipant_create_topic_with_profile(self, *args)

    def delete_topic(self, topic):
        return _fastdds_python.DomainParticipant_delete_topic(self, topic)

    def create_contentfilteredtopic(self, *args):
        return _fastdds_python.DomainParticipant_create_contentfilteredtopic(self, *args)

    def delete_contentfilteredtopic(self, a_contentfilteredtopic):
        return _fastdds_python.DomainParticipant_delete_contentfilteredtopic(self, a_contentfilteredtopic)

    def create_multitopic(self, name, type_name, subscription_expression, expression_parameters):
        return _fastdds_python.DomainParticipant_create_multitopic(self, name, type_name, subscription_expression, expression_parameters)

    def delete_multitopic(self, a_multitopic):
        return _fastdds_python.DomainParticipant_delete_multitopic(self, a_multitopic)

    def find_topic(self, topic_name, timeout):
        return _fastdds_python.DomainParticipant_find_topic(self, topic_name, timeout)

    def lookup_topicdescription(self, topic_name):
        return _fastdds_python.DomainParticipant_lookup_topicdescription(self, topic_name)

    def get_builtin_subscriber(self):
        return _fastdds_python.DomainParticipant_get_builtin_subscriber(self)

    def ignore_participant(self, handle):
        return _fastdds_python.DomainParticipant_ignore_participant(self, handle)

    def ignore_topic(self, handle):
        return _fastdds_python.DomainParticipant_ignore_topic(self, handle)

    def ignore_publication(self, handle):
        return _fastdds_python.DomainParticipant_ignore_publication(self, handle)

    def ignore_subscription(self, handle):
        return _fastdds_python.DomainParticipant_ignore_subscription(self, handle)

    def get_domain_id(self):
        return _fastdds_python.DomainParticipant_get_domain_id(self)

    def delete_contained_entities(self):
        return _fastdds_python.DomainParticipant_delete_contained_entities(self)

    def assert_liveliness(self):
        return _fastdds_python.DomainParticipant_assert_liveliness(self)

    def set_default_publisher_qos(self, qos):
        return _fastdds_python.DomainParticipant_set_default_publisher_qos(self, qos)

    def get_default_publisher_qos(self, *args):
        return _fastdds_python.DomainParticipant_get_default_publisher_qos(self, *args)

    def get_publisher_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipant_get_publisher_qos_from_profile(self, profile_name, qos)

    def set_default_subscriber_qos(self, qos):
        return _fastdds_python.DomainParticipant_set_default_subscriber_qos(self, qos)

    def get_default_subscriber_qos(self, *args):
        return _fastdds_python.DomainParticipant_get_default_subscriber_qos(self, *args)

    def get_subscriber_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipant_get_subscriber_qos_from_profile(self, profile_name, qos)

    def set_default_topic_qos(self, qos):
        return _fastdds_python.DomainParticipant_set_default_topic_qos(self, qos)

    def get_default_topic_qos(self, *args):
        return _fastdds_python.DomainParticipant_get_default_topic_qos(self, *args)

    def get_topic_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipant_get_topic_qos_from_profile(self, profile_name, qos)

    def get_replier_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipant_get_replier_qos_from_profile(self, profile_name, qos)

    def get_requester_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipant_get_requester_qos_from_profile(self, profile_name, qos)

    def get_discovered_participants(self, participant_handles):
        return _fastdds_python.DomainParticipant_get_discovered_participants(self, participant_handles)

    def get_discovered_participant_data(self, participant_data, participant_handle):
        return _fastdds_python.DomainParticipant_get_discovered_participant_data(self, participant_data, participant_handle)

    def get_discovered_topics(self, topic_handles):
        return _fastdds_python.DomainParticipant_get_discovered_topics(self, topic_handles)

    def get_discovered_topic_data(self, topic_data, topic_handle):
        return _fastdds_python.DomainParticipant_get_discovered_topic_data(self, topic_data, topic_handle)

    def contains_entity(self, a_handle, recursive=True):
        return _fastdds_python.DomainParticipant_contains_entity(self, a_handle, recursive)

    def get_current_time(self, current_time):
        return _fastdds_python.DomainParticipant_get_current_time(self, current_time)

    def register_type(self, *args):
        return _fastdds_python.DomainParticipant_register_type(self, *args)

    def unregister_type(self, typeName):
        return _fastdds_python.DomainParticipant_unregister_type(self, typeName)

    def find_type(self, type_name):
        return _fastdds_python.DomainParticipant_find_type(self, type_name)

    def get_instance_handle(self):
        return _fastdds_python.DomainParticipant_get_instance_handle(self)

    def guid(self):
        return _fastdds_python.DomainParticipant_guid(self)

    def get_participant_names(self):
        return _fastdds_python.DomainParticipant_get_participant_names(self)

    def new_remote_endpoint_discovered(self, partguid, userId, kind):
        return _fastdds_python.DomainParticipant_new_remote_endpoint_discovered(self, partguid, userId, kind)

    def register_content_filter_factory(self, filter_class_name, filter_factory):
        return _fastdds_python.DomainParticipant_register_content_filter_factory(self, filter_class_name, filter_factory)

    def lookup_content_filter_factory(self, filter_class_name):
        return _fastdds_python.DomainParticipant_lookup_content_filter_factory(self, filter_class_name)

    def unregister_content_filter_factory(self, filter_class_name):
        return _fastdds_python.DomainParticipant_unregister_content_filter_factory(self, filter_class_name)

    def set_listener(self, *args):
        return _fastdds_python.DomainParticipant_set_listener(self, *args)

    def create_publisher(self, *args):
        return _fastdds_python.DomainParticipant_create_publisher(self, *args)

    def create_publisher_with_profile(self, *args):
        return _fastdds_python.DomainParticipant_create_publisher_with_profile(self, *args)

    def delete_publisher(self, publisher):
        return _fastdds_python.DomainParticipant_delete_publisher(self, publisher)

    def create_subscriber(self, *args):
        return _fastdds_python.DomainParticipant_create_subscriber(self, *args)

    def create_subscriber_with_profile(self, *args):
        return _fastdds_python.DomainParticipant_create_subscriber_with_profile(self, *args)

    def delete_subscriber(self, subscriber):
        return _fastdds_python.DomainParticipant_delete_subscriber(self, subscriber)

# Register DomainParticipant in _fastdds_python:
_fastdds_python.DomainParticipant_swigregister(DomainParticipant)

class DomainParticipantFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def get_instance():
        return _fastdds_python.DomainParticipantFactory_get_instance()

    @staticmethod
    def get_shared_instance():
        return _fastdds_python.DomainParticipantFactory_get_shared_instance()

    def create_participant(self, *args):
        return _fastdds_python.DomainParticipantFactory_create_participant(self, *args)

    def create_participant_with_default_profile(self, *args):
        return _fastdds_python.DomainParticipantFactory_create_participant_with_default_profile(self, *args)

    def create_participant_with_profile(self, *args):
        return _fastdds_python.DomainParticipantFactory_create_participant_with_profile(self, *args)

    def lookup_participant(self, domain_id):
        return _fastdds_python.DomainParticipantFactory_lookup_participant(self, domain_id)

    def lookup_participants(self, domain_id):
        return _fastdds_python.DomainParticipantFactory_lookup_participants(self, domain_id)

    def get_default_participant_qos(self, *args):
        return _fastdds_python.DomainParticipantFactory_get_default_participant_qos(self, *args)

    def set_default_participant_qos(self, qos):
        return _fastdds_python.DomainParticipantFactory_set_default_participant_qos(self, qos)

    def get_participant_qos_from_profile(self, profile_name, qos):
        return _fastdds_python.DomainParticipantFactory_get_participant_qos_from_profile(self, profile_name, qos)

    def get_participant_extended_qos_from_profile(self, profile_name, extended_qos):
        return _fastdds_python.DomainParticipantFactory_get_participant_extended_qos_from_profile(self, profile_name, extended_qos)

    def get_participant_extended_qos_from_default_profile(self, extended_qos):
        return _fastdds_python.DomainParticipantFactory_get_participant_extended_qos_from_default_profile(self, extended_qos)

    def load_profiles(self):
        return _fastdds_python.DomainParticipantFactory_load_profiles(self)

    def load_XML_profiles_file(self, xml_profile_file):
        return _fastdds_python.DomainParticipantFactory_load_XML_profiles_file(self, xml_profile_file)

    def load_XML_profiles_string(self, data, length):
        return _fastdds_python.DomainParticipantFactory_load_XML_profiles_string(self, data, length)

    def check_xml_static_discovery(self, xml_file):
        return _fastdds_python.DomainParticipantFactory_check_xml_static_discovery(self, xml_file)

    def get_qos(self, qos):
        return _fastdds_python.DomainParticipantFactory_get_qos(self, qos)

    def set_qos(self, qos):
        return _fastdds_python.DomainParticipantFactory_set_qos(self, qos)

    def get_library_settings(self, library_settings):
        return _fastdds_python.DomainParticipantFactory_get_library_settings(self, library_settings)

    def set_library_settings(self, library_settings):
        return _fastdds_python.DomainParticipantFactory_set_library_settings(self, library_settings)

    def type_object_registry(self):
        return _fastdds_python.DomainParticipantFactory_type_object_registry(self)

    def delete_participant(self, part):
        return _fastdds_python.DomainParticipantFactory_delete_participant(self, part)

# Register DomainParticipantFactory in _fastdds_python:
_fastdds_python.DomainParticipantFactory_swigregister(DomainParticipantFactory)

def DomainParticipantFactory_get_instance():
    return _fastdds_python.DomainParticipantFactory_get_instance()

def DomainParticipantFactory_get_shared_instance():
    return _fastdds_python.DomainParticipantFactory_get_shared_instance()

TRY_CONSTRUCT1 = _fastdds_python.TRY_CONSTRUCT1
TRY_CONSTRUCT2 = _fastdds_python.TRY_CONSTRUCT2
IS_EXTERNAL = _fastdds_python.IS_EXTERNAL
IS_OPTIONAL = _fastdds_python.IS_OPTIONAL
IS_MUST_UNDERSTAND = _fastdds_python.IS_MUST_UNDERSTAND
IS_KEY = _fastdds_python.IS_KEY
IS_DEFAULT = _fastdds_python.IS_DEFAULT
IS_FINAL = _fastdds_python.IS_FINAL
IS_APPENDABLE = _fastdds_python.IS_APPENDABLE
IS_MUTABLE = _fastdds_python.IS_MUTABLE
IS_NESTED = _fastdds_python.IS_NESTED
IS_AUTOID_HASH = _fastdds_python.IS_AUTOID_HASH
class Dummy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_Dummy

    def __init__(self, *args):
        _fastdds_python.Dummy_swiginit(self, _fastdds_python.new_Dummy(*args))

    def __eq__(self, x):
        return _fastdds_python.Dummy___eq__(self, x)

    def __ne__(self, x):
        return _fastdds_python.Dummy___ne__(self, x)

# Register Dummy in _fastdds_python:
_fastdds_python.Dummy_swigregister(Dummy)
EK_MINIMAL = cvar.EK_MINIMAL
EK_COMPLETE = cvar.EK_COMPLETE
EK_BOTH = cvar.EK_BOTH
TK_NONE = cvar.TK_NONE
TK_BOOLEAN = cvar.TK_BOOLEAN
TK_BYTE = cvar.TK_BYTE
TK_INT16 = cvar.TK_INT16
TK_INT32 = cvar.TK_INT32
TK_INT64 = cvar.TK_INT64
TK_UINT16 = cvar.TK_UINT16
TK_UINT32 = cvar.TK_UINT32
TK_UINT64 = cvar.TK_UINT64
TK_FLOAT32 = cvar.TK_FLOAT32
TK_FLOAT64 = cvar.TK_FLOAT64
TK_FLOAT128 = cvar.TK_FLOAT128
TK_INT8 = cvar.TK_INT8
TK_UINT8 = cvar.TK_UINT8
TK_CHAR8 = cvar.TK_CHAR8
TK_CHAR16 = cvar.TK_CHAR16
TK_STRING8 = cvar.TK_STRING8
TK_STRING16 = cvar.TK_STRING16
TK_ALIAS = cvar.TK_ALIAS
TK_ENUM = cvar.TK_ENUM
TK_BITMASK = cvar.TK_BITMASK
TK_ANNOTATION = cvar.TK_ANNOTATION
TK_STRUCTURE = cvar.TK_STRUCTURE
TK_UNION = cvar.TK_UNION
TK_BITSET = cvar.TK_BITSET
TK_SEQUENCE = cvar.TK_SEQUENCE
TK_ARRAY = cvar.TK_ARRAY
TK_MAP = cvar.TK_MAP
TI_STRING8_SMALL = cvar.TI_STRING8_SMALL
TI_STRING8_LARGE = cvar.TI_STRING8_LARGE
TI_STRING16_SMALL = cvar.TI_STRING16_SMALL
TI_STRING16_LARGE = cvar.TI_STRING16_LARGE
TI_PLAIN_SEQUENCE_SMALL = cvar.TI_PLAIN_SEQUENCE_SMALL
TI_PLAIN_SEQUENCE_LARGE = cvar.TI_PLAIN_SEQUENCE_LARGE
TI_PLAIN_ARRAY_SMALL = cvar.TI_PLAIN_ARRAY_SMALL
TI_PLAIN_ARRAY_LARGE = cvar.TI_PLAIN_ARRAY_LARGE
TI_PLAIN_MAP_SMALL = cvar.TI_PLAIN_MAP_SMALL
TI_PLAIN_MAP_LARGE = cvar.TI_PLAIN_MAP_LARGE
TI_STRONGLY_CONNECTED_COMPONENT = cvar.TI_STRONGLY_CONNECTED_COMPONENT
MEMBER_NAME_MAX_LENGTH = cvar.MEMBER_NAME_MAX_LENGTH
TYPE_NAME_MAX_LENGTH = cvar.TYPE_NAME_MAX_LENGTH
INVALID_LBOUND = cvar.INVALID_LBOUND
INVALID_SBOUND = cvar.INVALID_SBOUND
MemberFlagMinimalMask = cvar.MemberFlagMinimalMask
TypeFlagMinimalMask = cvar.TypeFlagMinimalMask

class TypeInformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastdds_python.delete_TypeInformation

    def __init__(self, *args):
        _fastdds_python.TypeInformation_swiginit(self, _fastdds_python.new_TypeInformation(*args))

    def __eq__(self, x):
        return _fastdds_python.TypeInformation___eq__(self, x)

    def __ne__(self, x):
        return _fastdds_python.TypeInformation___ne__(self, x)

# Register TypeInformation in _fastdds_python:
_fastdds_python.TypeInformation_swigregister(TypeInformation)
ANNOTATION_STR_VALUE_MAX_LEN = cvar.ANNOTATION_STR_VALUE_MAX_LEN
ANNOTATION_OCTETSEC_VALUE_MAX_LEN = cvar.ANNOTATION_OCTETSEC_VALUE_MAX_LEN




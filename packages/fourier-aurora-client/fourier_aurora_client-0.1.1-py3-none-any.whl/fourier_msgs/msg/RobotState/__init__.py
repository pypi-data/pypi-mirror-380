# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('RobotState.dll')
if __package__ or '.' in __name__:
    from . import _RobotStateWrapper
else:
    import _RobotStateWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_SwigPyIterator

    def value(self):
        return _RobotStateWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RobotStateWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RobotStateWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RobotStateWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RobotStateWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RobotStateWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _RobotStateWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _RobotStateWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _RobotStateWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RobotStateWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RobotStateWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RobotStateWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RobotStateWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RobotStateWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RobotStateWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RobotStateWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RobotStateWrapper:
_RobotStateWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _RobotStateWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _RobotStateWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _RobotStateWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _RobotStateWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _RobotStateWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _RobotStateWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _RobotStateWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _RobotStateWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete__TimeSeq

# Register _TimeSeq in _RobotStateWrapper:
_RobotStateWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_TimeSeq

    def __init__(self, *args):
        _RobotStateWrapper.TimeSeq_swiginit(self, _RobotStateWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _RobotStateWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _RobotStateWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _RobotStateWrapper:
_RobotStateWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_Time

    def __init__(self, *args):
        _RobotStateWrapper.Time_swiginit(self, _RobotStateWrapper.new_Time(*args))

    def __eq__(self, x):
        return _RobotStateWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _RobotStateWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _RobotStateWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _RobotStateWrapper.Time_nanosec(self, *args)

# Register Time in _RobotStateWrapper:
_RobotStateWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _RobotStateWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotStateWrapper.TimePubSubType_swiginit(self, _RobotStateWrapper.new_TimePubSubType())
    __swig_destroy__ = _RobotStateWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotStateWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotStateWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotStateWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotStateWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotStateWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotStateWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotStateWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotStateWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotStateWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotStateWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _RobotStateWrapper:
_RobotStateWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete__HeaderSeq

# Register _HeaderSeq in _RobotStateWrapper:
_RobotStateWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _RobotStateWrapper.HeaderSeq_swiginit(self, _RobotStateWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _RobotStateWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _RobotStateWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _RobotStateWrapper:
_RobotStateWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_Header

    def __init__(self, *args):
        _RobotStateWrapper.Header_swiginit(self, _RobotStateWrapper.new_Header(*args))

    def __eq__(self, x):
        return _RobotStateWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _RobotStateWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _RobotStateWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _RobotStateWrapper.Header_frame_id(self, *args)

# Register Header in _RobotStateWrapper:
_RobotStateWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotStateWrapper.HeaderPubSubType_swiginit(self, _RobotStateWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _RobotStateWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotStateWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotStateWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotStateWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotStateWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotStateWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotStateWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotStateWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotStateWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotStateWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotStateWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _RobotStateWrapper:
_RobotStateWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _RobotTorSoStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete__RobotTorSoStateSeq

# Register _RobotTorSoStateSeq in _RobotStateWrapper:
_RobotStateWrapper._RobotTorSoStateSeq_swigregister(_RobotTorSoStateSeq)

class RobotTorSoStateSeq(_RobotTorSoStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_RobotTorSoStateSeq

    def __init__(self, *args):
        _RobotStateWrapper.RobotTorSoStateSeq_swiginit(self, _RobotStateWrapper.new_RobotTorSoStateSeq(*args))

    def __len__(self):
        return _RobotStateWrapper.RobotTorSoStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotStateWrapper.RobotTorSoStateSeq___getitem__(self, i)

# Register RobotTorSoStateSeq in _RobotStateWrapper:
_RobotStateWrapper.RobotTorSoStateSeq_swigregister(RobotTorSoStateSeq)

class _RobotStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete__RobotStateSeq

# Register _RobotStateSeq in _RobotStateWrapper:
_RobotStateWrapper._RobotStateSeq_swigregister(_RobotStateSeq)

class RobotStateSeq(_RobotStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_RobotStateSeq

    def __init__(self, *args):
        _RobotStateWrapper.RobotStateSeq_swiginit(self, _RobotStateWrapper.new_RobotStateSeq(*args))

    def __len__(self):
        return _RobotStateWrapper.RobotStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotStateWrapper.RobotStateSeq___getitem__(self, i)

# Register RobotStateSeq in _RobotStateWrapper:
_RobotStateWrapper.RobotStateSeq_swigregister(RobotStateSeq)

class RobotTorSoState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_RobotTorSoState

    def __init__(self, *args):
        _RobotStateWrapper.RobotTorSoState_swiginit(self, _RobotStateWrapper.new_RobotTorSoState(*args))

    def __eq__(self, x):
        return _RobotStateWrapper.RobotTorSoState___eq__(self, x)

    def __ne__(self, x):
        return _RobotStateWrapper.RobotTorSoState___ne__(self, x)

    def head_state(self, *args):
        return _RobotStateWrapper.RobotTorSoState_head_state(self, *args)

    def arm_state(self, *args):
        return _RobotStateWrapper.RobotTorSoState_arm_state(self, *args)

    def waist_state(self, *args):
        return _RobotStateWrapper.RobotTorSoState_waist_state(self, *args)

    def leg_state(self, *args):
        return _RobotStateWrapper.RobotTorSoState_leg_state(self, *args)

# Register RobotTorSoState in _RobotStateWrapper:
_RobotStateWrapper.RobotTorSoState_swigregister(RobotTorSoState)
cvar = _RobotStateWrapper.cvar
UNINITED_STATE = cvar.UNINITED_STATE
IDLE_STATE = cvar.IDLE_STATE
SECURE_STATE = cvar.SECURE_STATE
AUTONOMOUS_STATE = cvar.AUTONOMOUS_STATE
OTA_STATE = cvar.OTA_STATE
PENDING_STATE = cvar.PENDING_STATE
TORSO_UNOCCUPIED = cvar.TORSO_UNOCCUPIED
TORSO_BUSY = cvar.TORSO_BUSY
TORSO_OCCUPIED = cvar.TORSO_OCCUPIED

class RobotState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotStateWrapper.delete_RobotState

    def __init__(self, *args):
        _RobotStateWrapper.RobotState_swiginit(self, _RobotStateWrapper.new_RobotState(*args))

    def __eq__(self, x):
        return _RobotStateWrapper.RobotState___eq__(self, x)

    def __ne__(self, x):
        return _RobotStateWrapper.RobotState___ne__(self, x)

    def header(self, *args):
        return _RobotStateWrapper.RobotState_header(self, *args)

    def cur_state(self, *args):
        return _RobotStateWrapper.RobotState_cur_state(self, *args)

    def torso_state(self, *args):
        return _RobotStateWrapper.RobotState_torso_state(self, *args)

# Register RobotState in _RobotStateWrapper:
_RobotStateWrapper.RobotState_swigregister(RobotState)

class RobotTorSoStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotStateWrapper.RobotTorSoStatePubSubType_swiginit(self, _RobotStateWrapper.new_RobotTorSoStatePubSubType())
    __swig_destroy__ = _RobotStateWrapper.delete_RobotTorSoStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotStateWrapper.RobotTorSoStatePubSubType_construct_sample(self, memory)

# Register RobotTorSoStatePubSubType in _RobotStateWrapper:
_RobotStateWrapper.RobotTorSoStatePubSubType_swigregister(RobotTorSoStatePubSubType)

class RobotStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotStateWrapper.RobotStatePubSubType_swiginit(self, _RobotStateWrapper.new_RobotStatePubSubType())
    __swig_destroy__ = _RobotStateWrapper.delete_RobotStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotStateWrapper.RobotStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotStateWrapper.RobotStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotStateWrapper.RobotStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotStateWrapper.RobotStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotStateWrapper.RobotStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotStateWrapper.RobotStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotStateWrapper.RobotStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotStateWrapper.RobotStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotStateWrapper.RobotStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotStateWrapper.RobotStatePubSubType_construct_sample(self, memory)

# Register RobotStatePubSubType in _RobotStateWrapper:
_RobotStateWrapper.RobotStatePubSubType_swigregister(RobotStatePubSubType)




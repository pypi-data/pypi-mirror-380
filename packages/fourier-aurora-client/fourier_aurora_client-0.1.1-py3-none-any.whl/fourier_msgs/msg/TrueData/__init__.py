# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('TrueData.dll')
if __package__ or '.' in __name__:
    from . import _TrueDataWrapper
else:
    import _TrueDataWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_SwigPyIterator

    def value(self):
        return _TrueDataWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TrueDataWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TrueDataWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TrueDataWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TrueDataWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TrueDataWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _TrueDataWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _TrueDataWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _TrueDataWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TrueDataWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TrueDataWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TrueDataWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TrueDataWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TrueDataWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TrueDataWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TrueDataWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TrueDataWrapper:
_TrueDataWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _TrueDataWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _TrueDataWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _TrueDataWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _TrueDataWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _TrueDataWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _TrueDataWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _TrueDataWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _TrueDataWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete__TimeSeq

# Register _TimeSeq in _TrueDataWrapper:
_TrueDataWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_TimeSeq

    def __init__(self, *args):
        _TrueDataWrapper.TimeSeq_swiginit(self, _TrueDataWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _TrueDataWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _TrueDataWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _TrueDataWrapper:
_TrueDataWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_Time

    def __init__(self, *args):
        _TrueDataWrapper.Time_swiginit(self, _TrueDataWrapper.new_Time(*args))

    def __eq__(self, x):
        return _TrueDataWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _TrueDataWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _TrueDataWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _TrueDataWrapper.Time_nanosec(self, *args)

# Register Time in _TrueDataWrapper:
_TrueDataWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _TrueDataWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _TrueDataWrapper.TimePubSubType_swiginit(self, _TrueDataWrapper.new_TimePubSubType())
    __swig_destroy__ = _TrueDataWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _TrueDataWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _TrueDataWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _TrueDataWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _TrueDataWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _TrueDataWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _TrueDataWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _TrueDataWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _TrueDataWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _TrueDataWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _TrueDataWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _TrueDataWrapper:
_TrueDataWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete__HeaderSeq

# Register _HeaderSeq in _TrueDataWrapper:
_TrueDataWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _TrueDataWrapper.HeaderSeq_swiginit(self, _TrueDataWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _TrueDataWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _TrueDataWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _TrueDataWrapper:
_TrueDataWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_Header

    def __init__(self, *args):
        _TrueDataWrapper.Header_swiginit(self, _TrueDataWrapper.new_Header(*args))

    def __eq__(self, x):
        return _TrueDataWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _TrueDataWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _TrueDataWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _TrueDataWrapper.Header_frame_id(self, *args)

# Register Header in _TrueDataWrapper:
_TrueDataWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _TrueDataWrapper.HeaderPubSubType_swiginit(self, _TrueDataWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _TrueDataWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _TrueDataWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _TrueDataWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _TrueDataWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _TrueDataWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _TrueDataWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _TrueDataWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _TrueDataWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _TrueDataWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _TrueDataWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _TrueDataWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _TrueDataWrapper:
_TrueDataWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TrueDataWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TrueDataWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _TrueDataWrapper.double_vector___bool__(self)

    def __len__(self):
        return _TrueDataWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _TrueDataWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TrueDataWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TrueDataWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TrueDataWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TrueDataWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TrueDataWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _TrueDataWrapper.double_vector_pop(self)

    def append(self, x):
        return _TrueDataWrapper.double_vector_append(self, x)

    def empty(self):
        return _TrueDataWrapper.double_vector_empty(self)

    def size(self):
        return _TrueDataWrapper.double_vector_size(self)

    def swap(self, v):
        return _TrueDataWrapper.double_vector_swap(self, v)

    def begin(self):
        return _TrueDataWrapper.double_vector_begin(self)

    def end(self):
        return _TrueDataWrapper.double_vector_end(self)

    def rbegin(self):
        return _TrueDataWrapper.double_vector_rbegin(self)

    def rend(self):
        return _TrueDataWrapper.double_vector_rend(self)

    def clear(self):
        return _TrueDataWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _TrueDataWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _TrueDataWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _TrueDataWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _TrueDataWrapper.double_vector_swiginit(self, _TrueDataWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _TrueDataWrapper.double_vector_push_back(self, x)

    def front(self):
        return _TrueDataWrapper.double_vector_front(self)

    def back(self):
        return _TrueDataWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _TrueDataWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _TrueDataWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _TrueDataWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _TrueDataWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _TrueDataWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _TrueDataWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _TrueDataWrapper.delete_double_vector

# Register double_vector in _TrueDataWrapper:
_TrueDataWrapper.double_vector_swigregister(double_vector)

class _TrueDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete__TrueDataSeq

# Register _TrueDataSeq in _TrueDataWrapper:
_TrueDataWrapper._TrueDataSeq_swigregister(_TrueDataSeq)

class TrueDataSeq(_TrueDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_TrueDataSeq

    def __init__(self, *args):
        _TrueDataWrapper.TrueDataSeq_swiginit(self, _TrueDataWrapper.new_TrueDataSeq(*args))

    def __len__(self):
        return _TrueDataWrapper.TrueDataSeq___len__(self)

    def __getitem__(self, i):
        return _TrueDataWrapper.TrueDataSeq___getitem__(self, i)

# Register TrueDataSeq in _TrueDataWrapper:
_TrueDataWrapper.TrueDataSeq_swigregister(TrueDataSeq)

class TrueData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _TrueDataWrapper.delete_TrueData

    def __init__(self, *args):
        _TrueDataWrapper.TrueData_swiginit(self, _TrueDataWrapper.new_TrueData(*args))

    def __eq__(self, x):
        return _TrueDataWrapper.TrueData___eq__(self, x)

    def __ne__(self, x):
        return _TrueDataWrapper.TrueData___ne__(self, x)

    def header(self, *args):
        return _TrueDataWrapper.TrueData_header(self, *args)

    def vel_B(self, *args):
        return _TrueDataWrapper.TrueData_vel_B(self, *args)

    def vel_W(self, *args):
        return _TrueDataWrapper.TrueData_vel_W(self, *args)

    def pos_W(self, *args):
        return _TrueDataWrapper.TrueData_pos_W(self, *args)

    def contact_fz(self, *args):
        return _TrueDataWrapper.TrueData_contact_fz(self, *args)

    def contact_prob(self, *args):
        return _TrueDataWrapper.TrueData_contact_prob(self, *args)

# Register TrueData in _TrueDataWrapper:
_TrueDataWrapper.TrueData_swigregister(TrueData)

class TrueDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _TrueDataWrapper.TrueDataPubSubType_swiginit(self, _TrueDataWrapper.new_TrueDataPubSubType())
    __swig_destroy__ = _TrueDataWrapper.delete_TrueDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _TrueDataWrapper.TrueDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _TrueDataWrapper.TrueDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _TrueDataWrapper.TrueDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _TrueDataWrapper.TrueDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _TrueDataWrapper.TrueDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _TrueDataWrapper.TrueDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _TrueDataWrapper.TrueDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _TrueDataWrapper.TrueDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _TrueDataWrapper.TrueDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _TrueDataWrapper.TrueDataPubSubType_construct_sample(self, memory)

# Register TrueDataPubSubType in _TrueDataWrapper:
_TrueDataWrapper.TrueDataPubSubType_swigregister(TrueDataPubSubType)




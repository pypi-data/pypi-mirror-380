# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('AurorapyMsg.dll')
if __package__ or '.' in __name__:
    from . import _AurorapyMsgWrapper
else:
    import _AurorapyMsgWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_SwigPyIterator

    def value(self):
        return _AurorapyMsgWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AurorapyMsgWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AurorapyMsgWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AurorapyMsgWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AurorapyMsgWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AurorapyMsgWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _AurorapyMsgWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _AurorapyMsgWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _AurorapyMsgWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AurorapyMsgWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AurorapyMsgWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AurorapyMsgWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AurorapyMsgWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AurorapyMsgWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AurorapyMsgWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _AurorapyMsgWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _AurorapyMsgWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _AurorapyMsgWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _AurorapyMsgWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _AurorapyMsgWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _AurorapyMsgWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _AurorapyMsgWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _AurorapyMsgWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__TimeSeq

# Register _TimeSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_TimeSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.TimeSeq_swiginit(self, _AurorapyMsgWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_Time

    def __init__(self, *args):
        _AurorapyMsgWrapper.Time_swiginit(self, _AurorapyMsgWrapper.new_Time(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _AurorapyMsgWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _AurorapyMsgWrapper.Time_nanosec(self, *args)

# Register Time in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _AurorapyMsgWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.TimePubSubType_swiginit(self, _AurorapyMsgWrapper.new_TimePubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__HeaderSeq

# Register _HeaderSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.HeaderSeq_swiginit(self, _AurorapyMsgWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_Header

    def __init__(self, *args):
        _AurorapyMsgWrapper.Header_swiginit(self, _AurorapyMsgWrapper.new_Header(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _AurorapyMsgWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _AurorapyMsgWrapper.Header_frame_id(self, *args)

# Register Header in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.HeaderPubSubType_swiginit(self, _AurorapyMsgWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AurorapyMsgWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AurorapyMsgWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _AurorapyMsgWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _AurorapyMsgWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _AurorapyMsgWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AurorapyMsgWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _AurorapyMsgWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _AurorapyMsgWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _AurorapyMsgWrapper.int32_t_vector_empty(self)

    def size(self):
        return _AurorapyMsgWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _AurorapyMsgWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _AurorapyMsgWrapper.int32_t_vector_begin(self)

    def end(self):
        return _AurorapyMsgWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _AurorapyMsgWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _AurorapyMsgWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _AurorapyMsgWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _AurorapyMsgWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _AurorapyMsgWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _AurorapyMsgWrapper.int32_t_vector_swiginit(self, _AurorapyMsgWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _AurorapyMsgWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _AurorapyMsgWrapper.int32_t_vector_front(self)

    def back(self):
        return _AurorapyMsgWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _AurorapyMsgWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _AurorapyMsgWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _AurorapyMsgWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _AurorapyMsgWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _AurorapyMsgWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _AurorapyMsgWrapper.delete_int32_t_vector

# Register int32_t_vector in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AurorapyMsgWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AurorapyMsgWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _AurorapyMsgWrapper.double_vector___bool__(self)

    def __len__(self):
        return _AurorapyMsgWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _AurorapyMsgWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AurorapyMsgWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AurorapyMsgWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AurorapyMsgWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AurorapyMsgWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AurorapyMsgWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _AurorapyMsgWrapper.double_vector_pop(self)

    def append(self, x):
        return _AurorapyMsgWrapper.double_vector_append(self, x)

    def empty(self):
        return _AurorapyMsgWrapper.double_vector_empty(self)

    def size(self):
        return _AurorapyMsgWrapper.double_vector_size(self)

    def swap(self, v):
        return _AurorapyMsgWrapper.double_vector_swap(self, v)

    def begin(self):
        return _AurorapyMsgWrapper.double_vector_begin(self)

    def end(self):
        return _AurorapyMsgWrapper.double_vector_end(self)

    def rbegin(self):
        return _AurorapyMsgWrapper.double_vector_rbegin(self)

    def rend(self):
        return _AurorapyMsgWrapper.double_vector_rend(self)

    def clear(self):
        return _AurorapyMsgWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _AurorapyMsgWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _AurorapyMsgWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _AurorapyMsgWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _AurorapyMsgWrapper.double_vector_swiginit(self, _AurorapyMsgWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _AurorapyMsgWrapper.double_vector_push_back(self, x)

    def front(self):
        return _AurorapyMsgWrapper.double_vector_front(self)

    def back(self):
        return _AurorapyMsgWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _AurorapyMsgWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _AurorapyMsgWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _AurorapyMsgWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _AurorapyMsgWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _AurorapyMsgWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _AurorapyMsgWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _AurorapyMsgWrapper.delete_double_vector

# Register double_vector in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AurorapyMsgWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AurorapyMsgWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _AurorapyMsgWrapper.string_vector___bool__(self)

    def __len__(self):
        return _AurorapyMsgWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _AurorapyMsgWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AurorapyMsgWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AurorapyMsgWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AurorapyMsgWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AurorapyMsgWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AurorapyMsgWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _AurorapyMsgWrapper.string_vector_pop(self)

    def append(self, x):
        return _AurorapyMsgWrapper.string_vector_append(self, x)

    def empty(self):
        return _AurorapyMsgWrapper.string_vector_empty(self)

    def size(self):
        return _AurorapyMsgWrapper.string_vector_size(self)

    def swap(self, v):
        return _AurorapyMsgWrapper.string_vector_swap(self, v)

    def begin(self):
        return _AurorapyMsgWrapper.string_vector_begin(self)

    def end(self):
        return _AurorapyMsgWrapper.string_vector_end(self)

    def rbegin(self):
        return _AurorapyMsgWrapper.string_vector_rbegin(self)

    def rend(self):
        return _AurorapyMsgWrapper.string_vector_rend(self)

    def clear(self):
        return _AurorapyMsgWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _AurorapyMsgWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _AurorapyMsgWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _AurorapyMsgWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _AurorapyMsgWrapper.string_vector_swiginit(self, _AurorapyMsgWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _AurorapyMsgWrapper.string_vector_push_back(self, x)

    def front(self):
        return _AurorapyMsgWrapper.string_vector_front(self)

    def back(self):
        return _AurorapyMsgWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _AurorapyMsgWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _AurorapyMsgWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _AurorapyMsgWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _AurorapyMsgWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _AurorapyMsgWrapper.string_vector_capacity(self)
    __swig_destroy__ = _AurorapyMsgWrapper.delete_string_vector

# Register string_vector in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.BaseDataTypeSeq_swiginit(self, _AurorapyMsgWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_BaseDataType

    def __init__(self, *args):
        _AurorapyMsgWrapper.BaseDataType_swiginit(self, _AurorapyMsgWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _AurorapyMsgWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _AurorapyMsgWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _AurorapyMsgWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.BaseDataTypePubSubType_swiginit(self, _AurorapyMsgWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class _AurorapyGroupCommandSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__AurorapyGroupCommandSeq

# Register _AurorapyGroupCommandSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._AurorapyGroupCommandSeq_swigregister(_AurorapyGroupCommandSeq)

class AurorapyGroupCommandSeq(_AurorapyGroupCommandSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyGroupCommandSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyGroupCommandSeq_swiginit(self, _AurorapyMsgWrapper.new_AurorapyGroupCommandSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommandSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.AurorapyGroupCommandSeq___getitem__(self, i)

# Register AurorapyGroupCommandSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyGroupCommandSeq_swigregister(AurorapyGroupCommandSeq)

class AurorapyGroupCommand_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___nonzero__(self)

    def __bool__(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___bool__(self)

    def __len__(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___len__(self)

    def __getslice__(self, i, j):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector___setitem__(self, *args)

    def pop(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_pop(self)

    def append(self, x):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_append(self, x)

    def empty(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_empty(self)

    def size(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_size(self)

    def swap(self, v):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_swap(self, v)

    def begin(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_begin(self)

    def end(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_end(self)

    def rbegin(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_rbegin(self)

    def rend(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_rend(self)

    def clear(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_clear(self)

    def get_allocator(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_get_allocator(self)

    def pop_back(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_pop_back(self)

    def erase(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_erase(self, *args)

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyGroupCommand_vector_swiginit(self, _AurorapyMsgWrapper.new_AurorapyGroupCommand_vector(*args))

    def push_back(self, x):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_push_back(self, x)

    def front(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_front(self)

    def back(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_back(self)

    def assign(self, n, x):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_assign(self, n, x)

    def resize(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_resize(self, *args)

    def insert(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_insert(self, *args)

    def reserve(self, n):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_reserve(self, n)

    def capacity(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_vector_capacity(self)
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyGroupCommand_vector

# Register AurorapyGroupCommand_vector in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyGroupCommand_vector_swigregister(AurorapyGroupCommand_vector)

class _AurorapyMsgCommandSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__AurorapyMsgCommandSeq

# Register _AurorapyMsgCommandSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._AurorapyMsgCommandSeq_swigregister(_AurorapyMsgCommandSeq)

class AurorapyMsgCommandSeq(_AurorapyMsgCommandSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgCommandSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyMsgCommandSeq_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgCommandSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.AurorapyMsgCommandSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.AurorapyMsgCommandSeq___getitem__(self, i)

# Register AurorapyMsgCommandSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgCommandSeq_swigregister(AurorapyMsgCommandSeq)

class _AurorapyMsgStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete__AurorapyMsgStateSeq

# Register _AurorapyMsgStateSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper._AurorapyMsgStateSeq_swigregister(_AurorapyMsgStateSeq)

class AurorapyMsgStateSeq(_AurorapyMsgStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgStateSeq

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyMsgStateSeq_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgStateSeq(*args))

    def __len__(self):
        return _AurorapyMsgWrapper.AurorapyMsgStateSeq___len__(self)

    def __getitem__(self, i):
        return _AurorapyMsgWrapper.AurorapyMsgStateSeq___getitem__(self, i)

# Register AurorapyMsgStateSeq in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgStateSeq_swigregister(AurorapyMsgStateSeq)

class AurorapyGroupCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyGroupCommand

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyGroupCommand_swiginit(self, _AurorapyMsgWrapper.new_AurorapyGroupCommand(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.AurorapyGroupCommand___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.AurorapyGroupCommand___ne__(self, x)

    def group_name(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_group_name(self, *args)

    def control_type(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_control_type(self, *args)

    def motor_mode(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_motor_mode(self, *args)

    def mode(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_mode(self, *args)

    def p(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_p(self, *args)

    def d(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_d(self, *args)

    def position(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_position(self, *args)

    def velocity(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_velocity(self, *args)

    def effort(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommand_effort(self, *args)

# Register AurorapyGroupCommand in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyGroupCommand_swigregister(AurorapyGroupCommand)

class AurorapyMsgCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgCommand

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyMsgCommand_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgCommand(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.AurorapyMsgCommand___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.AurorapyMsgCommand___ne__(self, x)

    def header(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgCommand_header(self, *args)

    def group_cmd(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgCommand_group_cmd(self, *args)

# Register AurorapyMsgCommand in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgCommand_swigregister(AurorapyMsgCommand)

class AurorapyMsgState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgState

    def __init__(self, *args):
        _AurorapyMsgWrapper.AurorapyMsgState_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgState(*args))

    def __eq__(self, x):
        return _AurorapyMsgWrapper.AurorapyMsgState___eq__(self, x)

    def __ne__(self, x):
        return _AurorapyMsgWrapper.AurorapyMsgState___ne__(self, x)

    def header(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_header(self, *args)

    def quat(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_quat(self, *args)

    def euler(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_euler(self, *args)

    def gyro(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_gyro(self, *args)

    def acc(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_acc(self, *args)

    def position(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_position(self, *args)

    def velocity(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_velocity(self, *args)

    def effort(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgState_effort(self, *args)

# Register AurorapyMsgState in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgState_swigregister(AurorapyMsgState)

class AurorapyGroupCommandPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_swiginit(self, _AurorapyMsgWrapper.new_AurorapyGroupCommandPubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyGroupCommandPubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_construct_sample(self, memory)

# Register AurorapyGroupCommandPubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyGroupCommandPubSubType_swigregister(AurorapyGroupCommandPubSubType)

class AurorapyMsgCommandPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgCommandPubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgCommandPubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_construct_sample(self, memory)

# Register AurorapyMsgCommandPubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgCommandPubSubType_swigregister(AurorapyMsgCommandPubSubType)

class AurorapyMsgStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_swiginit(self, _AurorapyMsgWrapper.new_AurorapyMsgStatePubSubType())
    __swig_destroy__ = _AurorapyMsgWrapper.delete_AurorapyMsgStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AurorapyMsgWrapper.AurorapyMsgStatePubSubType_construct_sample(self, memory)

# Register AurorapyMsgStatePubSubType in _AurorapyMsgWrapper:
_AurorapyMsgWrapper.AurorapyMsgStatePubSubType_swigregister(AurorapyMsgStatePubSubType)




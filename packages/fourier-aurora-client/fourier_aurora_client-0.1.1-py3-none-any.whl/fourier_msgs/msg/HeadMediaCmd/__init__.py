# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('HeadMediaCmd.dll')
if __package__ or '.' in __name__:
    from . import _HeadMediaCmdWrapper
else:
    import _HeadMediaCmdWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_SwigPyIterator

    def value(self):
        return _HeadMediaCmdWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HeadMediaCmdWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HeadMediaCmdWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HeadMediaCmdWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HeadMediaCmdWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HeadMediaCmdWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _HeadMediaCmdWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _HeadMediaCmdWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _HeadMediaCmdWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HeadMediaCmdWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HeadMediaCmdWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HeadMediaCmdWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HeadMediaCmdWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HeadMediaCmdWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _HeadMediaCmdWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _HeadMediaCmdWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _HeadMediaCmdWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _HeadMediaCmdWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _HeadMediaCmdWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _HeadMediaCmdWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _HeadMediaCmdWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _HeadMediaCmdWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete__TimeSeq

# Register _TimeSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_TimeSeq

    def __init__(self, *args):
        _HeadMediaCmdWrapper.TimeSeq_swiginit(self, _HeadMediaCmdWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _HeadMediaCmdWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _HeadMediaCmdWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_Time

    def __init__(self, *args):
        _HeadMediaCmdWrapper.Time_swiginit(self, _HeadMediaCmdWrapper.new_Time(*args))

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _HeadMediaCmdWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _HeadMediaCmdWrapper.Time_nanosec(self, *args)

# Register Time in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _HeadMediaCmdWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HeadMediaCmdWrapper.TimePubSubType_swiginit(self, _HeadMediaCmdWrapper.new_TimePubSubType())
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _HeadMediaCmdWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _HeadMediaCmdWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _HeadMediaCmdWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _HeadMediaCmdWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _HeadMediaCmdWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _HeadMediaCmdWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _HeadMediaCmdWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _HeadMediaCmdWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _HeadMediaCmdWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _HeadMediaCmdWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete__HeaderSeq

# Register _HeaderSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _HeadMediaCmdWrapper.HeaderSeq_swiginit(self, _HeadMediaCmdWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _HeadMediaCmdWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _HeadMediaCmdWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_Header

    def __init__(self, *args):
        _HeadMediaCmdWrapper.Header_swiginit(self, _HeadMediaCmdWrapper.new_Header(*args))

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _HeadMediaCmdWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _HeadMediaCmdWrapper.Header_frame_id(self, *args)

# Register Header in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HeadMediaCmdWrapper.HeaderPubSubType_swiginit(self, _HeadMediaCmdWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _HeadMediaCmdWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _HeadMediaCmdWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _HeadMediaCmdWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _HeadMediaCmdWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _HeadMediaCmdWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _HeadMediaCmdWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _HeadMediaCmdWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _HeadMediaCmdWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _HeadMediaCmdWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _HeadMediaCmdWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _EyesControlCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete__EyesControlCmdSeq

# Register _EyesControlCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper._EyesControlCmdSeq_swigregister(_EyesControlCmdSeq)

class EyesControlCmdSeq(_EyesControlCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlCmdSeq

    def __init__(self, *args):
        _HeadMediaCmdWrapper.EyesControlCmdSeq_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlCmdSeq(*args))

    def __len__(self):
        return _HeadMediaCmdWrapper.EyesControlCmdSeq___len__(self)

    def __getitem__(self, i):
        return _HeadMediaCmdWrapper.EyesControlCmdSeq___getitem__(self, i)

# Register EyesControlCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlCmdSeq_swigregister(EyesControlCmdSeq)

class EyesControlCmd_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___nonzero__(self)

    def __bool__(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___bool__(self)

    def __len__(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___len__(self)

    def __getslice__(self, i, j):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector___setitem__(self, *args)

    def pop(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_pop(self)

    def append(self, x):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_append(self, x)

    def empty(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_empty(self)

    def size(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_size(self)

    def swap(self, v):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_swap(self, v)

    def begin(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_begin(self)

    def end(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_end(self)

    def rbegin(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_rbegin(self)

    def rend(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_rend(self)

    def clear(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_clear(self)

    def get_allocator(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_get_allocator(self)

    def pop_back(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_pop_back(self)

    def erase(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_erase(self, *args)

    def __init__(self, *args):
        _HeadMediaCmdWrapper.EyesControlCmd_vector_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlCmd_vector(*args))

    def push_back(self, x):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_push_back(self, x)

    def front(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_front(self)

    def back(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_back(self)

    def assign(self, n, x):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_assign(self, n, x)

    def resize(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_resize(self, *args)

    def insert(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_insert(self, *args)

    def reserve(self, n):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_reserve(self, n)

    def capacity(self):
        return _HeadMediaCmdWrapper.EyesControlCmd_vector_capacity(self)
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlCmd_vector

# Register EyesControlCmd_vector in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlCmd_vector_swigregister(EyesControlCmd_vector)

class _EyesControlGroupCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete__EyesControlGroupCmdSeq

# Register _EyesControlGroupCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper._EyesControlGroupCmdSeq_swigregister(_EyesControlGroupCmdSeq)

class EyesControlGroupCmdSeq(_EyesControlGroupCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlGroupCmdSeq

    def __init__(self, *args):
        _HeadMediaCmdWrapper.EyesControlGroupCmdSeq_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlGroupCmdSeq(*args))

    def __len__(self):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdSeq___len__(self)

    def __getitem__(self, i):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdSeq___getitem__(self, i)

# Register EyesControlGroupCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlGroupCmdSeq_swigregister(EyesControlGroupCmdSeq)

class _SoundControlCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete__SoundControlCmdSeq

# Register _SoundControlCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper._SoundControlCmdSeq_swigregister(_SoundControlCmdSeq)

class SoundControlCmdSeq(_SoundControlCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_SoundControlCmdSeq

    def __init__(self, *args):
        _HeadMediaCmdWrapper.SoundControlCmdSeq_swiginit(self, _HeadMediaCmdWrapper.new_SoundControlCmdSeq(*args))

    def __len__(self):
        return _HeadMediaCmdWrapper.SoundControlCmdSeq___len__(self)

    def __getitem__(self, i):
        return _HeadMediaCmdWrapper.SoundControlCmdSeq___getitem__(self, i)

# Register SoundControlCmdSeq in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.SoundControlCmdSeq_swigregister(SoundControlCmdSeq)

class EyesControlCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlCmd

    def __init__(self, *args):
        _HeadMediaCmdWrapper.EyesControlCmd_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlCmd(*args))

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.EyesControlCmd___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.EyesControlCmd___ne__(self, x)

    def eyes_index(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_eyes_index(self, *args)

    def emoji_id(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_emoji_id(self, *args)

    def x(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_x(self, *args)

    def y(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmd_y(self, *args)

# Register EyesControlCmd in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlCmd_swigregister(EyesControlCmd)

class EyesControlGroupCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlGroupCmd

    def __init__(self, *args):
        _HeadMediaCmdWrapper.EyesControlGroupCmd_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlGroupCmd(*args))

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.EyesControlGroupCmd___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.EyesControlGroupCmd___ne__(self, x)

    def header(self, *args):
        return _HeadMediaCmdWrapper.EyesControlGroupCmd_header(self, *args)

    def eyes_cmd(self, *args):
        return _HeadMediaCmdWrapper.EyesControlGroupCmd_eyes_cmd(self, *args)

# Register EyesControlGroupCmd in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlGroupCmd_swigregister(EyesControlGroupCmd)

class SoundControlCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_SoundControlCmd

    def __init__(self, *args):
        _HeadMediaCmdWrapper.SoundControlCmd_swiginit(self, _HeadMediaCmdWrapper.new_SoundControlCmd(*args))

    def __eq__(self, x):
        return _HeadMediaCmdWrapper.SoundControlCmd___eq__(self, x)

    def __ne__(self, x):
        return _HeadMediaCmdWrapper.SoundControlCmd___ne__(self, x)

    def header(self, *args):
        return _HeadMediaCmdWrapper.SoundControlCmd_header(self, *args)

    def sound_id(self, *args):
        return _HeadMediaCmdWrapper.SoundControlCmd_sound_id(self, *args)

# Register SoundControlCmd in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.SoundControlCmd_swigregister(SoundControlCmd)

class EyesControlCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HeadMediaCmdWrapper.EyesControlCmdPubSubType_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlCmdPubSubType())
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _HeadMediaCmdWrapper.EyesControlCmdPubSubType_construct_sample(self, memory)

# Register EyesControlCmdPubSubType in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlCmdPubSubType_swigregister(EyesControlCmdPubSubType)

class EyesControlGroupCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_swiginit(self, _HeadMediaCmdWrapper.new_EyesControlGroupCmdPubSubType())
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_EyesControlGroupCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_construct_sample(self, memory)

# Register EyesControlGroupCmdPubSubType in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.EyesControlGroupCmdPubSubType_swigregister(EyesControlGroupCmdPubSubType)

class SoundControlCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _HeadMediaCmdWrapper.SoundControlCmdPubSubType_swiginit(self, _HeadMediaCmdWrapper.new_SoundControlCmdPubSubType())
    __swig_destroy__ = _HeadMediaCmdWrapper.delete_SoundControlCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _HeadMediaCmdWrapper.SoundControlCmdPubSubType_construct_sample(self, memory)

# Register SoundControlCmdPubSubType in _HeadMediaCmdWrapper:
_HeadMediaCmdWrapper.SoundControlCmdPubSubType_swigregister(SoundControlCmdPubSubType)




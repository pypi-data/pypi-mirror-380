# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('MotionControlState.dll')
if __package__ or '.' in __name__:
    from . import _MotionControlStateWrapper
else:
    import _MotionControlStateWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_SwigPyIterator

    def value(self):
        return _MotionControlStateWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MotionControlStateWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MotionControlStateWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MotionControlStateWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MotionControlStateWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MotionControlStateWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _MotionControlStateWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _MotionControlStateWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _MotionControlStateWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MotionControlStateWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MotionControlStateWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MotionControlStateWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MotionControlStateWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MotionControlStateWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MotionControlStateWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MotionControlStateWrapper:
_MotionControlStateWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _MotionControlStateWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _MotionControlStateWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _MotionControlStateWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _MotionControlStateWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _MotionControlStateWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _MotionControlStateWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _MotionControlStateWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _MotionControlStateWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__TimeSeq

# Register _TimeSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_TimeSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.TimeSeq_swiginit(self, _MotionControlStateWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_Time

    def __init__(self, *args):
        _MotionControlStateWrapper.Time_swiginit(self, _MotionControlStateWrapper.new_Time(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _MotionControlStateWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _MotionControlStateWrapper.Time_nanosec(self, *args)

# Register Time in _MotionControlStateWrapper:
_MotionControlStateWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _MotionControlStateWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.TimePubSubType_swiginit(self, _MotionControlStateWrapper.new_TimePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__HeaderSeq

# Register _HeaderSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.HeaderSeq_swiginit(self, _MotionControlStateWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_Header

    def __init__(self, *args):
        _MotionControlStateWrapper.Header_swiginit(self, _MotionControlStateWrapper.new_Header(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _MotionControlStateWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _MotionControlStateWrapper.Header_frame_id(self, *args)

# Register Header in _MotionControlStateWrapper:
_MotionControlStateWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.HeaderPubSubType_swiginit(self, _MotionControlStateWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.int32_t_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.int32_t_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.int32_t_vector_swiginit(self, _MotionControlStateWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.int32_t_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _MotionControlStateWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_int32_t_vector

# Register int32_t_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.double_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.double_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.double_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.double_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.double_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.double_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.double_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.double_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.double_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.double_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.double_vector_swiginit(self, _MotionControlStateWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.double_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.double_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _MotionControlStateWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_double_vector

# Register double_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.string_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.string_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.string_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.string_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.string_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.string_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.string_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.string_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.string_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.string_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.string_vector_swiginit(self, _MotionControlStateWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.string_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.string_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.string_vector_capacity(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_string_vector

# Register string_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.BaseDataTypeSeq_swiginit(self, _MotionControlStateWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_BaseDataType

    def __init__(self, *args):
        _MotionControlStateWrapper.BaseDataType_swiginit(self, _MotionControlStateWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _MotionControlStateWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _MotionControlStateWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _MotionControlStateWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _MotionControlStateWrapper:
_MotionControlStateWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.BaseDataTypePubSubType_swiginit(self, _MotionControlStateWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class _ControlGroupStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__ControlGroupStateSeq

# Register _ControlGroupStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._ControlGroupStateSeq_swigregister(_ControlGroupStateSeq)

class ControlGroupStateSeq(_ControlGroupStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_ControlGroupStateSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.ControlGroupStateSeq_swiginit(self, _MotionControlStateWrapper.new_ControlGroupStateSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.ControlGroupStateSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.ControlGroupStateSeq___getitem__(self, i)

# Register ControlGroupStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.ControlGroupStateSeq_swigregister(ControlGroupStateSeq)

class _CartesianStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__CartesianStateSeq

# Register _CartesianStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._CartesianStateSeq_swigregister(_CartesianStateSeq)

class CartesianStateSeq(_CartesianStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_CartesianStateSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.CartesianStateSeq_swiginit(self, _MotionControlStateWrapper.new_CartesianStateSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.CartesianStateSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.CartesianStateSeq___getitem__(self, i)

# Register CartesianStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.CartesianStateSeq_swigregister(CartesianStateSeq)

class uint8_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.uint8_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.uint8_t_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.uint8_t_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.uint8_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.uint8_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.uint8_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.uint8_t_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.uint8_t_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.uint8_t_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.uint8_t_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.uint8_t_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.uint8_t_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.uint8_t_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.uint8_t_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.uint8_t_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.uint8_t_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.uint8_t_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.uint8_t_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.uint8_t_vector_swiginit(self, _MotionControlStateWrapper.new_uint8_t_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.uint8_t_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.uint8_t_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.uint8_t_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.uint8_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.uint8_t_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.uint8_t_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.uint8_t_vector_capacity(self)

    def get_buffer(self):
        return _MotionControlStateWrapper.uint8_t_vector_get_buffer(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_uint8_t_vector

# Register uint8_t_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.uint8_t_vector_swigregister(uint8_t_vector)

class ControlGroupState_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.ControlGroupState_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.ControlGroupState_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.ControlGroupState_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.ControlGroupState_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.ControlGroupState_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.ControlGroupState_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.ControlGroupState_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.ControlGroupState_vector_swiginit(self, _MotionControlStateWrapper.new_ControlGroupState_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.ControlGroupState_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.ControlGroupState_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.ControlGroupState_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.ControlGroupState_vector_capacity(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_ControlGroupState_vector

# Register ControlGroupState_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.ControlGroupState_vector_swigregister(ControlGroupState_vector)

class BaseDataType_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.BaseDataType_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.BaseDataType_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.BaseDataType_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.BaseDataType_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.BaseDataType_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.BaseDataType_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.BaseDataType_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.BaseDataType_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.BaseDataType_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.BaseDataType_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.BaseDataType_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.BaseDataType_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.BaseDataType_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.BaseDataType_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.BaseDataType_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.BaseDataType_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.BaseDataType_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.BaseDataType_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.BaseDataType_vector_swiginit(self, _MotionControlStateWrapper.new_BaseDataType_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.BaseDataType_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.BaseDataType_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.BaseDataType_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.BaseDataType_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.BaseDataType_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.BaseDataType_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.BaseDataType_vector_capacity(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_BaseDataType_vector

# Register BaseDataType_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.BaseDataType_vector_swigregister(BaseDataType_vector)

class _RobotControlGroupStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__RobotControlGroupStateSeq

# Register _RobotControlGroupStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._RobotControlGroupStateSeq_swigregister(_RobotControlGroupStateSeq)

class RobotControlGroupStateSeq(_RobotControlGroupStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotControlGroupStateSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.RobotControlGroupStateSeq_swiginit(self, _MotionControlStateWrapper.new_RobotControlGroupStateSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.RobotControlGroupStateSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.RobotControlGroupStateSeq___getitem__(self, i)

# Register RobotControlGroupStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotControlGroupStateSeq_swigregister(RobotControlGroupStateSeq)

class CartesianState_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlStateWrapper.CartesianState_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlStateWrapper.CartesianState_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlStateWrapper.CartesianState_vector___bool__(self)

    def __len__(self):
        return _MotionControlStateWrapper.CartesianState_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlStateWrapper.CartesianState_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlStateWrapper.CartesianState_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlStateWrapper.CartesianState_vector_pop(self)

    def append(self, x):
        return _MotionControlStateWrapper.CartesianState_vector_append(self, x)

    def empty(self):
        return _MotionControlStateWrapper.CartesianState_vector_empty(self)

    def size(self):
        return _MotionControlStateWrapper.CartesianState_vector_size(self)

    def swap(self, v):
        return _MotionControlStateWrapper.CartesianState_vector_swap(self, v)

    def begin(self):
        return _MotionControlStateWrapper.CartesianState_vector_begin(self)

    def end(self):
        return _MotionControlStateWrapper.CartesianState_vector_end(self)

    def rbegin(self):
        return _MotionControlStateWrapper.CartesianState_vector_rbegin(self)

    def rend(self):
        return _MotionControlStateWrapper.CartesianState_vector_rend(self)

    def clear(self):
        return _MotionControlStateWrapper.CartesianState_vector_clear(self)

    def get_allocator(self):
        return _MotionControlStateWrapper.CartesianState_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlStateWrapper.CartesianState_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlStateWrapper.CartesianState_vector_swiginit(self, _MotionControlStateWrapper.new_CartesianState_vector(*args))

    def push_back(self, x):
        return _MotionControlStateWrapper.CartesianState_vector_push_back(self, x)

    def front(self):
        return _MotionControlStateWrapper.CartesianState_vector_front(self)

    def back(self):
        return _MotionControlStateWrapper.CartesianState_vector_back(self)

    def assign(self, n, x):
        return _MotionControlStateWrapper.CartesianState_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlStateWrapper.CartesianState_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlStateWrapper.CartesianState_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlStateWrapper.CartesianState_vector_capacity(self)
    __swig_destroy__ = _MotionControlStateWrapper.delete_CartesianState_vector

# Register CartesianState_vector in _MotionControlStateWrapper:
_MotionControlStateWrapper.CartesianState_vector_swigregister(CartesianState_vector)

class _RobotCartesianStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete__RobotCartesianStateSeq

# Register _RobotCartesianStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper._RobotCartesianStateSeq_swigregister(_RobotCartesianStateSeq)

class RobotCartesianStateSeq(_RobotCartesianStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotCartesianStateSeq

    def __init__(self, *args):
        _MotionControlStateWrapper.RobotCartesianStateSeq_swiginit(self, _MotionControlStateWrapper.new_RobotCartesianStateSeq(*args))

    def __len__(self):
        return _MotionControlStateWrapper.RobotCartesianStateSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlStateWrapper.RobotCartesianStateSeq___getitem__(self, i)

# Register RobotCartesianStateSeq in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotCartesianStateSeq_swigregister(RobotCartesianStateSeq)

class ControlGroupState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_ControlGroupState

    def __init__(self, *args):
        _MotionControlStateWrapper.ControlGroupState_swiginit(self, _MotionControlStateWrapper.new_ControlGroupState(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.ControlGroupState___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.ControlGroupState___ne__(self, x)

    def group_name(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_group_name(self, *args)

    def joint_position(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_joint_position(self, *args)

    def joint_velocity(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_joint_velocity(self, *args)

    def joint_effort(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_joint_effort(self, *args)

    def motor_position(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_motor_position(self, *args)

    def motor_velocity(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_motor_velocity(self, *args)

    def motor_effort(self, *args):
        return _MotionControlStateWrapper.ControlGroupState_motor_effort(self, *args)

# Register ControlGroupState in _MotionControlStateWrapper:
_MotionControlStateWrapper.ControlGroupState_swigregister(ControlGroupState)

class CartesianState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_CartesianState

    def __init__(self, *args):
        _MotionControlStateWrapper.CartesianState_swiginit(self, _MotionControlStateWrapper.new_CartesianState(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.CartesianState___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.CartesianState___ne__(self, x)

    def group_name(self, *args):
        return _MotionControlStateWrapper.CartesianState_group_name(self, *args)

    def pose(self, *args):
        return _MotionControlStateWrapper.CartesianState_pose(self, *args)

    def twist(self, *args):
        return _MotionControlStateWrapper.CartesianState_twist(self, *args)

    def wrench(self, *args):
        return _MotionControlStateWrapper.CartesianState_wrench(self, *args)

# Register CartesianState in _MotionControlStateWrapper:
_MotionControlStateWrapper.CartesianState_swigregister(CartesianState)

class RobotControlGroupState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotControlGroupState

    def __init__(self, *args):
        _MotionControlStateWrapper.RobotControlGroupState_swiginit(self, _MotionControlStateWrapper.new_RobotControlGroupState(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.RobotControlGroupState___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.RobotControlGroupState___ne__(self, x)

    def header(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupState_header(self, *args)

    def group_motion_state(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupState_group_motion_state(self, *args)

    def group_state(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupState_group_state(self, *args)

    def stable_level(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupState_stable_level(self, *args)

    def ex_data(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupState_ex_data(self, *args)

# Register RobotControlGroupState in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotControlGroupState_swigregister(RobotControlGroupState)

class RobotCartesianState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotCartesianState

    def __init__(self, *args):
        _MotionControlStateWrapper.RobotCartesianState_swiginit(self, _MotionControlStateWrapper.new_RobotCartesianState(*args))

    def __eq__(self, x):
        return _MotionControlStateWrapper.RobotCartesianState___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlStateWrapper.RobotCartesianState___ne__(self, x)

    def header(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_header(self, *args)

    def coordinate_system(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_coordinate_system(self, *args)

    def group_motion_state(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_group_motion_state(self, *args)

    def cartesian_state(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_cartesian_state(self, *args)

    def stable_level(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_stable_level(self, *args)

    def ex_data(self, *args):
        return _MotionControlStateWrapper.RobotCartesianState_ex_data(self, *args)

# Register RobotCartesianState in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotCartesianState_swigregister(RobotCartesianState)

class ControlGroupStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.ControlGroupStatePubSubType_swiginit(self, _MotionControlStateWrapper.new_ControlGroupStatePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_ControlGroupStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.ControlGroupStatePubSubType_construct_sample(self, memory)

# Register ControlGroupStatePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.ControlGroupStatePubSubType_swigregister(ControlGroupStatePubSubType)

class CartesianStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.CartesianStatePubSubType_swiginit(self, _MotionControlStateWrapper.new_CartesianStatePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_CartesianStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.CartesianStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.CartesianStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.CartesianStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.CartesianStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.CartesianStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.CartesianStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.CartesianStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.CartesianStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.CartesianStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.CartesianStatePubSubType_construct_sample(self, memory)

# Register CartesianStatePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.CartesianStatePubSubType_swigregister(CartesianStatePubSubType)

class RobotControlGroupStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.RobotControlGroupStatePubSubType_swiginit(self, _MotionControlStateWrapper.new_RobotControlGroupStatePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotControlGroupStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.RobotControlGroupStatePubSubType_construct_sample(self, memory)

# Register RobotControlGroupStatePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotControlGroupStatePubSubType_swigregister(RobotControlGroupStatePubSubType)

class RobotCartesianStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlStateWrapper.RobotCartesianStatePubSubType_swiginit(self, _MotionControlStateWrapper.new_RobotCartesianStatePubSubType())
    __swig_destroy__ = _MotionControlStateWrapper.delete_RobotCartesianStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlStateWrapper.RobotCartesianStatePubSubType_construct_sample(self, memory)

# Register RobotCartesianStatePubSubType in _MotionControlStateWrapper:
_MotionControlStateWrapper.RobotCartesianStatePubSubType_swigregister(RobotCartesianStatePubSubType)




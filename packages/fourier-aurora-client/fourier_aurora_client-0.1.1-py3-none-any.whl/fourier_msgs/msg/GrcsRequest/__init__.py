# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('GrcsRequest.dll')
if __package__ or '.' in __name__:
    from . import _GrcsRequestWrapper
else:
    import _GrcsRequestWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_SwigPyIterator

    def value(self):
        return _GrcsRequestWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GrcsRequestWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GrcsRequestWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GrcsRequestWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GrcsRequestWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GrcsRequestWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _GrcsRequestWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _GrcsRequestWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _GrcsRequestWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GrcsRequestWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GrcsRequestWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GrcsRequestWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GrcsRequestWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GrcsRequestWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GrcsRequestWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GrcsRequestWrapper:
_GrcsRequestWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _GrcsRequestWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _GrcsRequestWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _GrcsRequestWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _GrcsRequestWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _GrcsRequestWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _GrcsRequestWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _GrcsRequestWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _GrcsRequestWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete__TimeSeq

# Register _TimeSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_TimeSeq

    def __init__(self, *args):
        _GrcsRequestWrapper.TimeSeq_swiginit(self, _GrcsRequestWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _GrcsRequestWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _GrcsRequestWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_Time

    def __init__(self, *args):
        _GrcsRequestWrapper.Time_swiginit(self, _GrcsRequestWrapper.new_Time(*args))

    def __eq__(self, x):
        return _GrcsRequestWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _GrcsRequestWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _GrcsRequestWrapper.Time_nanosec(self, *args)

# Register Time in _GrcsRequestWrapper:
_GrcsRequestWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _GrcsRequestWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GrcsRequestWrapper.TimePubSubType_swiginit(self, _GrcsRequestWrapper.new_TimePubSubType())
    __swig_destroy__ = _GrcsRequestWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _GrcsRequestWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _GrcsRequestWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _GrcsRequestWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _GrcsRequestWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _GrcsRequestWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _GrcsRequestWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _GrcsRequestWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _GrcsRequestWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _GrcsRequestWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _GrcsRequestWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _GrcsRequestWrapper:
_GrcsRequestWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete__HeaderSeq

# Register _HeaderSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _GrcsRequestWrapper.HeaderSeq_swiginit(self, _GrcsRequestWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _GrcsRequestWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _GrcsRequestWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_Header

    def __init__(self, *args):
        _GrcsRequestWrapper.Header_swiginit(self, _GrcsRequestWrapper.new_Header(*args))

    def __eq__(self, x):
        return _GrcsRequestWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _GrcsRequestWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _GrcsRequestWrapper.Header_frame_id(self, *args)

# Register Header in _GrcsRequestWrapper:
_GrcsRequestWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GrcsRequestWrapper.HeaderPubSubType_swiginit(self, _GrcsRequestWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _GrcsRequestWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _GrcsRequestWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _GrcsRequestWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _GrcsRequestWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _GrcsRequestWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _GrcsRequestWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _GrcsRequestWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _GrcsRequestWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _GrcsRequestWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _GrcsRequestWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _GrcsRequestWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _GrcsRequestWrapper:
_GrcsRequestWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GrcsRequestWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GrcsRequestWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _GrcsRequestWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _GrcsRequestWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _GrcsRequestWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GrcsRequestWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GrcsRequestWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GrcsRequestWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GrcsRequestWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GrcsRequestWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _GrcsRequestWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _GrcsRequestWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _GrcsRequestWrapper.int32_t_vector_empty(self)

    def size(self):
        return _GrcsRequestWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _GrcsRequestWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _GrcsRequestWrapper.int32_t_vector_begin(self)

    def end(self):
        return _GrcsRequestWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _GrcsRequestWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _GrcsRequestWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _GrcsRequestWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _GrcsRequestWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _GrcsRequestWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _GrcsRequestWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _GrcsRequestWrapper.int32_t_vector_swiginit(self, _GrcsRequestWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _GrcsRequestWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _GrcsRequestWrapper.int32_t_vector_front(self)

    def back(self):
        return _GrcsRequestWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _GrcsRequestWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _GrcsRequestWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _GrcsRequestWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _GrcsRequestWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _GrcsRequestWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _GrcsRequestWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _GrcsRequestWrapper.delete_int32_t_vector

# Register int32_t_vector in _GrcsRequestWrapper:
_GrcsRequestWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GrcsRequestWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GrcsRequestWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _GrcsRequestWrapper.double_vector___bool__(self)

    def __len__(self):
        return _GrcsRequestWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _GrcsRequestWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GrcsRequestWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GrcsRequestWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GrcsRequestWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GrcsRequestWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GrcsRequestWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _GrcsRequestWrapper.double_vector_pop(self)

    def append(self, x):
        return _GrcsRequestWrapper.double_vector_append(self, x)

    def empty(self):
        return _GrcsRequestWrapper.double_vector_empty(self)

    def size(self):
        return _GrcsRequestWrapper.double_vector_size(self)

    def swap(self, v):
        return _GrcsRequestWrapper.double_vector_swap(self, v)

    def begin(self):
        return _GrcsRequestWrapper.double_vector_begin(self)

    def end(self):
        return _GrcsRequestWrapper.double_vector_end(self)

    def rbegin(self):
        return _GrcsRequestWrapper.double_vector_rbegin(self)

    def rend(self):
        return _GrcsRequestWrapper.double_vector_rend(self)

    def clear(self):
        return _GrcsRequestWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _GrcsRequestWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _GrcsRequestWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _GrcsRequestWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _GrcsRequestWrapper.double_vector_swiginit(self, _GrcsRequestWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _GrcsRequestWrapper.double_vector_push_back(self, x)

    def front(self):
        return _GrcsRequestWrapper.double_vector_front(self)

    def back(self):
        return _GrcsRequestWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _GrcsRequestWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _GrcsRequestWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _GrcsRequestWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _GrcsRequestWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _GrcsRequestWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _GrcsRequestWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _GrcsRequestWrapper.delete_double_vector

# Register double_vector in _GrcsRequestWrapper:
_GrcsRequestWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GrcsRequestWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GrcsRequestWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _GrcsRequestWrapper.string_vector___bool__(self)

    def __len__(self):
        return _GrcsRequestWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _GrcsRequestWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GrcsRequestWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GrcsRequestWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GrcsRequestWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GrcsRequestWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GrcsRequestWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _GrcsRequestWrapper.string_vector_pop(self)

    def append(self, x):
        return _GrcsRequestWrapper.string_vector_append(self, x)

    def empty(self):
        return _GrcsRequestWrapper.string_vector_empty(self)

    def size(self):
        return _GrcsRequestWrapper.string_vector_size(self)

    def swap(self, v):
        return _GrcsRequestWrapper.string_vector_swap(self, v)

    def begin(self):
        return _GrcsRequestWrapper.string_vector_begin(self)

    def end(self):
        return _GrcsRequestWrapper.string_vector_end(self)

    def rbegin(self):
        return _GrcsRequestWrapper.string_vector_rbegin(self)

    def rend(self):
        return _GrcsRequestWrapper.string_vector_rend(self)

    def clear(self):
        return _GrcsRequestWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _GrcsRequestWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _GrcsRequestWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _GrcsRequestWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _GrcsRequestWrapper.string_vector_swiginit(self, _GrcsRequestWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _GrcsRequestWrapper.string_vector_push_back(self, x)

    def front(self):
        return _GrcsRequestWrapper.string_vector_front(self)

    def back(self):
        return _GrcsRequestWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _GrcsRequestWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _GrcsRequestWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _GrcsRequestWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _GrcsRequestWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _GrcsRequestWrapper.string_vector_capacity(self)
    __swig_destroy__ = _GrcsRequestWrapper.delete_string_vector

# Register string_vector in _GrcsRequestWrapper:
_GrcsRequestWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _GrcsRequestWrapper.BaseDataTypeSeq_swiginit(self, _GrcsRequestWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _GrcsRequestWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _GrcsRequestWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_BaseDataType

    def __init__(self, *args):
        _GrcsRequestWrapper.BaseDataType_swiginit(self, _GrcsRequestWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _GrcsRequestWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _GrcsRequestWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _GrcsRequestWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _GrcsRequestWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _GrcsRequestWrapper:
_GrcsRequestWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GrcsRequestWrapper.BaseDataTypePubSubType_swiginit(self, _GrcsRequestWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _GrcsRequestWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _GrcsRequestWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _GrcsRequestWrapper:
_GrcsRequestWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class BaseDataType_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _GrcsRequestWrapper.BaseDataType_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GrcsRequestWrapper.BaseDataType_vector___nonzero__(self)

    def __bool__(self):
        return _GrcsRequestWrapper.BaseDataType_vector___bool__(self)

    def __len__(self):
        return _GrcsRequestWrapper.BaseDataType_vector___len__(self)

    def __getslice__(self, i, j):
        return _GrcsRequestWrapper.BaseDataType_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GrcsRequestWrapper.BaseDataType_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector___setitem__(self, *args)

    def pop(self):
        return _GrcsRequestWrapper.BaseDataType_vector_pop(self)

    def append(self, x):
        return _GrcsRequestWrapper.BaseDataType_vector_append(self, x)

    def empty(self):
        return _GrcsRequestWrapper.BaseDataType_vector_empty(self)

    def size(self):
        return _GrcsRequestWrapper.BaseDataType_vector_size(self)

    def swap(self, v):
        return _GrcsRequestWrapper.BaseDataType_vector_swap(self, v)

    def begin(self):
        return _GrcsRequestWrapper.BaseDataType_vector_begin(self)

    def end(self):
        return _GrcsRequestWrapper.BaseDataType_vector_end(self)

    def rbegin(self):
        return _GrcsRequestWrapper.BaseDataType_vector_rbegin(self)

    def rend(self):
        return _GrcsRequestWrapper.BaseDataType_vector_rend(self)

    def clear(self):
        return _GrcsRequestWrapper.BaseDataType_vector_clear(self)

    def get_allocator(self):
        return _GrcsRequestWrapper.BaseDataType_vector_get_allocator(self)

    def pop_back(self):
        return _GrcsRequestWrapper.BaseDataType_vector_pop_back(self)

    def erase(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector_erase(self, *args)

    def __init__(self, *args):
        _GrcsRequestWrapper.BaseDataType_vector_swiginit(self, _GrcsRequestWrapper.new_BaseDataType_vector(*args))

    def push_back(self, x):
        return _GrcsRequestWrapper.BaseDataType_vector_push_back(self, x)

    def front(self):
        return _GrcsRequestWrapper.BaseDataType_vector_front(self)

    def back(self):
        return _GrcsRequestWrapper.BaseDataType_vector_back(self)

    def assign(self, n, x):
        return _GrcsRequestWrapper.BaseDataType_vector_assign(self, n, x)

    def resize(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector_resize(self, *args)

    def insert(self, *args):
        return _GrcsRequestWrapper.BaseDataType_vector_insert(self, *args)

    def reserve(self, n):
        return _GrcsRequestWrapper.BaseDataType_vector_reserve(self, n)

    def capacity(self):
        return _GrcsRequestWrapper.BaseDataType_vector_capacity(self)
    __swig_destroy__ = _GrcsRequestWrapper.delete_BaseDataType_vector

# Register BaseDataType_vector in _GrcsRequestWrapper:
_GrcsRequestWrapper.BaseDataType_vector_swigregister(BaseDataType_vector)

class _McsReplySeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete__McsReplySeq

# Register _McsReplySeq in _GrcsRequestWrapper:
_GrcsRequestWrapper._McsReplySeq_swigregister(_McsReplySeq)

class McsReplySeq(_McsReplySeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_McsReplySeq

    def __init__(self, *args):
        _GrcsRequestWrapper.McsReplySeq_swiginit(self, _GrcsRequestWrapper.new_McsReplySeq(*args))

    def __len__(self):
        return _GrcsRequestWrapper.McsReplySeq___len__(self)

    def __getitem__(self, i):
        return _GrcsRequestWrapper.McsReplySeq___getitem__(self, i)

# Register McsReplySeq in _GrcsRequestWrapper:
_GrcsRequestWrapper.McsReplySeq_swigregister(McsReplySeq)

class _GrcsRequestSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete__GrcsRequestSeq

# Register _GrcsRequestSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper._GrcsRequestSeq_swigregister(_GrcsRequestSeq)

class GrcsRequestSeq(_GrcsRequestSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_GrcsRequestSeq

    def __init__(self, *args):
        _GrcsRequestWrapper.GrcsRequestSeq_swiginit(self, _GrcsRequestWrapper.new_GrcsRequestSeq(*args))

    def __len__(self):
        return _GrcsRequestWrapper.GrcsRequestSeq___len__(self)

    def __getitem__(self, i):
        return _GrcsRequestWrapper.GrcsRequestSeq___getitem__(self, i)

# Register GrcsRequestSeq in _GrcsRequestWrapper:
_GrcsRequestWrapper.GrcsRequestSeq_swigregister(GrcsRequestSeq)

class McsReply(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_McsReply

    def __init__(self, *args):
        _GrcsRequestWrapper.McsReply_swiginit(self, _GrcsRequestWrapper.new_McsReply(*args))

    def __eq__(self, x):
        return _GrcsRequestWrapper.McsReply___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.McsReply___ne__(self, x)

    def header(self, *args):
        return _GrcsRequestWrapper.McsReply_header(self, *args)

    def name(self, *args):
        return _GrcsRequestWrapper.McsReply_name(self, *args)

    def algorithm_status(self, *args):
        return _GrcsRequestWrapper.McsReply_algorithm_status(self, *args)

    def ex_data(self, *args):
        return _GrcsRequestWrapper.McsReply_ex_data(self, *args)

# Register McsReply in _GrcsRequestWrapper:
_GrcsRequestWrapper.McsReply_swigregister(McsReply)

class GrcsRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _GrcsRequestWrapper.delete_GrcsRequest

    def __init__(self, *args):
        _GrcsRequestWrapper.GrcsRequest_swiginit(self, _GrcsRequestWrapper.new_GrcsRequest(*args))

    def __eq__(self, x):
        return _GrcsRequestWrapper.GrcsRequest___eq__(self, x)

    def __ne__(self, x):
        return _GrcsRequestWrapper.GrcsRequest___ne__(self, x)

    def header(self, *args):
        return _GrcsRequestWrapper.GrcsRequest_header(self, *args)

    def name(self, *args):
        return _GrcsRequestWrapper.GrcsRequest_name(self, *args)

    def cmd_state(self, *args):
        return _GrcsRequestWrapper.GrcsRequest_cmd_state(self, *args)

    def group_mask(self, *args):
        return _GrcsRequestWrapper.GrcsRequest_group_mask(self, *args)

    def input_args(self, *args):
        return _GrcsRequestWrapper.GrcsRequest_input_args(self, *args)

# Register GrcsRequest in _GrcsRequestWrapper:
_GrcsRequestWrapper.GrcsRequest_swigregister(GrcsRequest)

class McsReplyPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GrcsRequestWrapper.McsReplyPubSubType_swiginit(self, _GrcsRequestWrapper.new_McsReplyPubSubType())
    __swig_destroy__ = _GrcsRequestWrapper.delete_McsReplyPubSubType

    def serialize(self, data, payload, data_representation):
        return _GrcsRequestWrapper.McsReplyPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _GrcsRequestWrapper.McsReplyPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _GrcsRequestWrapper.McsReplyPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _GrcsRequestWrapper.McsReplyPubSubType_compute_key(self, *args)

    def create_data(self):
        return _GrcsRequestWrapper.McsReplyPubSubType_create_data(self)

    def delete_data(self, data):
        return _GrcsRequestWrapper.McsReplyPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _GrcsRequestWrapper.McsReplyPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _GrcsRequestWrapper.McsReplyPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _GrcsRequestWrapper.McsReplyPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _GrcsRequestWrapper.McsReplyPubSubType_construct_sample(self, memory)

# Register McsReplyPubSubType in _GrcsRequestWrapper:
_GrcsRequestWrapper.McsReplyPubSubType_swigregister(McsReplyPubSubType)

class GrcsRequestPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _GrcsRequestWrapper.GrcsRequestPubSubType_swiginit(self, _GrcsRequestWrapper.new_GrcsRequestPubSubType())
    __swig_destroy__ = _GrcsRequestWrapper.delete_GrcsRequestPubSubType

    def serialize(self, data, payload, data_representation):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_compute_key(self, *args)

    def create_data(self):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_create_data(self)

    def delete_data(self, data):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _GrcsRequestWrapper.GrcsRequestPubSubType_construct_sample(self, memory)

# Register GrcsRequestPubSubType in _GrcsRequestWrapper:
_GrcsRequestWrapper.GrcsRequestPubSubType_swigregister(GrcsRequestPubSubType)




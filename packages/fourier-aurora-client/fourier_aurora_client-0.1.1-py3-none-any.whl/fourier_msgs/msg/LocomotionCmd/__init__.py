# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('LocomotionCmd.dll')
if __package__ or '.' in __name__:
    from . import _LocomotionCmdWrapper
else:
    import _LocomotionCmdWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_SwigPyIterator

    def value(self):
        return _LocomotionCmdWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LocomotionCmdWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LocomotionCmdWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LocomotionCmdWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LocomotionCmdWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LocomotionCmdWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _LocomotionCmdWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _LocomotionCmdWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _LocomotionCmdWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LocomotionCmdWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LocomotionCmdWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LocomotionCmdWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LocomotionCmdWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LocomotionCmdWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LocomotionCmdWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _LocomotionCmdWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _LocomotionCmdWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _LocomotionCmdWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _LocomotionCmdWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _LocomotionCmdWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _LocomotionCmdWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _LocomotionCmdWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _LocomotionCmdWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__TimeSeq

# Register _TimeSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_TimeSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.TimeSeq_swiginit(self, _LocomotionCmdWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_Time

    def __init__(self, *args):
        _LocomotionCmdWrapper.Time_swiginit(self, _LocomotionCmdWrapper.new_Time(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _LocomotionCmdWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _LocomotionCmdWrapper.Time_nanosec(self, *args)

# Register Time in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _LocomotionCmdWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.TimePubSubType_swiginit(self, _LocomotionCmdWrapper.new_TimePubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__HeaderSeq

# Register _HeaderSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.HeaderSeq_swiginit(self, _LocomotionCmdWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_Header

    def __init__(self, *args):
        _LocomotionCmdWrapper.Header_swiginit(self, _LocomotionCmdWrapper.new_Header(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _LocomotionCmdWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _LocomotionCmdWrapper.Header_frame_id(self, *args)

# Register Header in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.HeaderPubSubType_swiginit(self, _LocomotionCmdWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _VelocitySourceCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__VelocitySourceCmdSeq

# Register _VelocitySourceCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._VelocitySourceCmdSeq_swigregister(_VelocitySourceCmdSeq)

class VelocitySourceCmdSeq(_VelocitySourceCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocitySourceCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.VelocitySourceCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_VelocitySourceCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.VelocitySourceCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.VelocitySourceCmdSeq___getitem__(self, i)

# Register VelocitySourceCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocitySourceCmdSeq_swigregister(VelocitySourceCmdSeq)

class _VelocityCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__VelocityCmdSeq

# Register _VelocityCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._VelocityCmdSeq_swigregister(_VelocityCmdSeq)

class VelocityCmdSeq(_VelocityCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocityCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.VelocityCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_VelocityCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.VelocityCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.VelocityCmdSeq___getitem__(self, i)

# Register VelocityCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocityCmdSeq_swigregister(VelocityCmdSeq)

class _RobotStandPoseCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__RobotStandPoseCmdSeq

# Register _RobotStandPoseCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._RobotStandPoseCmdSeq_swigregister(_RobotStandPoseCmdSeq)

class RobotStandPoseCmdSeq(_RobotStandPoseCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_RobotStandPoseCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.RobotStandPoseCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_RobotStandPoseCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.RobotStandPoseCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.RobotStandPoseCmdSeq___getitem__(self, i)

# Register RobotStandPoseCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.RobotStandPoseCmdSeq_swigregister(RobotStandPoseCmdSeq)

class _WholeBodyFsmStateChangeCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__WholeBodyFsmStateChangeCmdSeq

# Register _WholeBodyFsmStateChangeCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._WholeBodyFsmStateChangeCmdSeq_swigregister(_WholeBodyFsmStateChangeCmdSeq)

class WholeBodyFsmStateChangeCmdSeq(_WholeBodyFsmStateChangeCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_WholeBodyFsmStateChangeCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_WholeBodyFsmStateChangeCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdSeq___getitem__(self, i)

# Register WholeBodyFsmStateChangeCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdSeq_swigregister(WholeBodyFsmStateChangeCmdSeq)

class _UpperBodyFsmStateChangeCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__UpperBodyFsmStateChangeCmdSeq

# Register _UpperBodyFsmStateChangeCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._UpperBodyFsmStateChangeCmdSeq_swigregister(_UpperBodyFsmStateChangeCmdSeq)

class UpperBodyFsmStateChangeCmdSeq(_UpperBodyFsmStateChangeCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_UpperBodyFsmStateChangeCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_UpperBodyFsmStateChangeCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdSeq___getitem__(self, i)

# Register UpperBodyFsmStateChangeCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdSeq_swigregister(UpperBodyFsmStateChangeCmdSeq)

class VelocitySourceCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocitySourceCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.VelocitySourceCmd_swiginit(self, _LocomotionCmdWrapper.new_VelocitySourceCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.VelocitySourceCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.VelocitySourceCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.VelocitySourceCmd_header(self, *args)

    def desired_source(self, *args):
        return _LocomotionCmdWrapper.VelocitySourceCmd_desired_source(self, *args)

# Register VelocitySourceCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocitySourceCmd_swigregister(VelocitySourceCmd)

class VelocityCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocityCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.VelocityCmd_swiginit(self, _LocomotionCmdWrapper.new_VelocityCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.VelocityCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.VelocityCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.VelocityCmd_header(self, *args)

    def vx(self, *args):
        return _LocomotionCmdWrapper.VelocityCmd_vx(self, *args)

    def vy(self, *args):
        return _LocomotionCmdWrapper.VelocityCmd_vy(self, *args)

    def yaw(self, *args):
        return _LocomotionCmdWrapper.VelocityCmd_yaw(self, *args)

# Register VelocityCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocityCmd_swigregister(VelocityCmd)

class RobotStandPoseCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_RobotStandPoseCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.RobotStandPoseCmd_swiginit(self, _LocomotionCmdWrapper.new_RobotStandPoseCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.RobotStandPoseCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.RobotStandPoseCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.RobotStandPoseCmd_header(self, *args)

    def delta_z(self, *args):
        return _LocomotionCmdWrapper.RobotStandPoseCmd_delta_z(self, *args)

    def delta_pitch(self, *args):
        return _LocomotionCmdWrapper.RobotStandPoseCmd_delta_pitch(self, *args)

    def delta_yaw(self, *args):
        return _LocomotionCmdWrapper.RobotStandPoseCmd_delta_yaw(self, *args)

# Register RobotStandPoseCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.RobotStandPoseCmd_swigregister(RobotStandPoseCmd)

class WholeBodyFsmStateChangeCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_WholeBodyFsmStateChangeCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd_swiginit(self, _LocomotionCmdWrapper.new_WholeBodyFsmStateChangeCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd_header(self, *args)

    def desired_state(self, *args):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd_desired_state(self, *args)

# Register WholeBodyFsmStateChangeCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.WholeBodyFsmStateChangeCmd_swigregister(WholeBodyFsmStateChangeCmd)

class UpperBodyFsmStateChangeCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_UpperBodyFsmStateChangeCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd_swiginit(self, _LocomotionCmdWrapper.new_UpperBodyFsmStateChangeCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd_header(self, *args)

    def desired_state(self, *args):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd_desired_state(self, *args)

# Register UpperBodyFsmStateChangeCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.UpperBodyFsmStateChangeCmd_swigregister(UpperBodyFsmStateChangeCmd)

class VelocitySourceCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_VelocitySourceCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocitySourceCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.VelocitySourceCmdPubSubType_construct_sample(self, memory)

# Register VelocitySourceCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocitySourceCmdPubSubType_swigregister(VelocitySourceCmdPubSubType)

class VelocityCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.VelocityCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_VelocityCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_VelocityCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.VelocityCmdPubSubType_construct_sample(self, memory)

# Register VelocityCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.VelocityCmdPubSubType_swigregister(VelocityCmdPubSubType)

class RobotStandPoseCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_RobotStandPoseCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_RobotStandPoseCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_construct_sample(self, memory)

# Register RobotStandPoseCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.RobotStandPoseCmdPubSubType_swigregister(RobotStandPoseCmdPubSubType)

class WholeBodyFsmStateChangeCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_WholeBodyFsmStateChangeCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_WholeBodyFsmStateChangeCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_construct_sample(self, memory)

# Register WholeBodyFsmStateChangeCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.WholeBodyFsmStateChangeCmdPubSubType_swigregister(WholeBodyFsmStateChangeCmdPubSubType)

class UpperBodyFsmStateChangeCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_UpperBodyFsmStateChangeCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_UpperBodyFsmStateChangeCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_construct_sample(self, memory)

# Register UpperBodyFsmStateChangeCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.UpperBodyFsmStateChangeCmdPubSubType_swigregister(UpperBodyFsmStateChangeCmdPubSubType)

class _LocomotionCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete__LocomotionCmdSeq

# Register _LocomotionCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper._LocomotionCmdSeq_swigregister(_LocomotionCmdSeq)

class LocomotionCmdSeq(_LocomotionCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_LocomotionCmdSeq

    def __init__(self, *args):
        _LocomotionCmdWrapper.LocomotionCmdSeq_swiginit(self, _LocomotionCmdWrapper.new_LocomotionCmdSeq(*args))

    def __len__(self):
        return _LocomotionCmdWrapper.LocomotionCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LocomotionCmdWrapper.LocomotionCmdSeq___getitem__(self, i)

# Register LocomotionCmdSeq in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.LocomotionCmdSeq_swigregister(LocomotionCmdSeq)

class LocomotionCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LocomotionCmdWrapper.delete_LocomotionCmd

    def __init__(self, *args):
        _LocomotionCmdWrapper.LocomotionCmd_swiginit(self, _LocomotionCmdWrapper.new_LocomotionCmd(*args))

    def __eq__(self, x):
        return _LocomotionCmdWrapper.LocomotionCmd___eq__(self, x)

    def __ne__(self, x):
        return _LocomotionCmdWrapper.LocomotionCmd___ne__(self, x)

    def header(self, *args):
        return _LocomotionCmdWrapper.LocomotionCmd_header(self, *args)

    def vel(self, *args):
        return _LocomotionCmdWrapper.LocomotionCmd_vel(self, *args)

    def pose(self, *args):
        return _LocomotionCmdWrapper.LocomotionCmd_pose(self, *args)

# Register LocomotionCmd in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.LocomotionCmd_swigregister(LocomotionCmd)

class LocomotionCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LocomotionCmdWrapper.LocomotionCmdPubSubType_swiginit(self, _LocomotionCmdWrapper.new_LocomotionCmdPubSubType())
    __swig_destroy__ = _LocomotionCmdWrapper.delete_LocomotionCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LocomotionCmdWrapper.LocomotionCmdPubSubType_construct_sample(self, memory)

# Register LocomotionCmdPubSubType in _LocomotionCmdWrapper:
_LocomotionCmdWrapper.LocomotionCmdPubSubType_swigregister(LocomotionCmdPubSubType)




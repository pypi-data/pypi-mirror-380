# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('MotorCfgCmd.dll')
if __package__ or '.' in __name__:
    from . import _MotorCfgCmdWrapper
else:
    import _MotorCfgCmdWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_SwigPyIterator

    def value(self):
        return _MotorCfgCmdWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MotorCfgCmdWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MotorCfgCmdWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MotorCfgCmdWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MotorCfgCmdWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MotorCfgCmdWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _MotorCfgCmdWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _MotorCfgCmdWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _MotorCfgCmdWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MotorCfgCmdWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MotorCfgCmdWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MotorCfgCmdWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MotorCfgCmdWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MotorCfgCmdWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _MotorCfgCmdWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _MotorCfgCmdWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _MotorCfgCmdWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _MotorCfgCmdWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _MotorCfgCmdWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _MotorCfgCmdWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _MotorCfgCmdWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _MotorCfgCmdWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete__TimeSeq

# Register _TimeSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_TimeSeq

    def __init__(self, *args):
        _MotorCfgCmdWrapper.TimeSeq_swiginit(self, _MotorCfgCmdWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _MotorCfgCmdWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _MotorCfgCmdWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_Time

    def __init__(self, *args):
        _MotorCfgCmdWrapper.Time_swiginit(self, _MotorCfgCmdWrapper.new_Time(*args))

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _MotorCfgCmdWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _MotorCfgCmdWrapper.Time_nanosec(self, *args)

# Register Time in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _MotorCfgCmdWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotorCfgCmdWrapper.TimePubSubType_swiginit(self, _MotorCfgCmdWrapper.new_TimePubSubType())
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotorCfgCmdWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotorCfgCmdWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotorCfgCmdWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotorCfgCmdWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotorCfgCmdWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotorCfgCmdWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotorCfgCmdWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotorCfgCmdWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotorCfgCmdWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotorCfgCmdWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete__HeaderSeq

# Register _HeaderSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _MotorCfgCmdWrapper.HeaderSeq_swiginit(self, _MotorCfgCmdWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _MotorCfgCmdWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _MotorCfgCmdWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_Header

    def __init__(self, *args):
        _MotorCfgCmdWrapper.Header_swiginit(self, _MotorCfgCmdWrapper.new_Header(*args))

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _MotorCfgCmdWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _MotorCfgCmdWrapper.Header_frame_id(self, *args)

# Register Header in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotorCfgCmdWrapper.HeaderPubSubType_swiginit(self, _MotorCfgCmdWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotorCfgCmdWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotorCfgCmdWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotorCfgCmdWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotorCfgCmdWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotorCfgCmdWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotorCfgCmdWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotorCfgCmdWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotorCfgCmdWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotorCfgCmdWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotorCfgCmdWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorCfgCmdWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorCfgCmdWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _MotorCfgCmdWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _MotorCfgCmdWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotorCfgCmdWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorCfgCmdWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _MotorCfgCmdWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _MotorCfgCmdWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _MotorCfgCmdWrapper.int32_t_vector_empty(self)

    def size(self):
        return _MotorCfgCmdWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _MotorCfgCmdWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _MotorCfgCmdWrapper.int32_t_vector_begin(self)

    def end(self):
        return _MotorCfgCmdWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _MotorCfgCmdWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _MotorCfgCmdWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _MotorCfgCmdWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _MotorCfgCmdWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _MotorCfgCmdWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _MotorCfgCmdWrapper.int32_t_vector_swiginit(self, _MotorCfgCmdWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _MotorCfgCmdWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _MotorCfgCmdWrapper.int32_t_vector_front(self)

    def back(self):
        return _MotorCfgCmdWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _MotorCfgCmdWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _MotorCfgCmdWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _MotorCfgCmdWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _MotorCfgCmdWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _MotorCfgCmdWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_int32_t_vector

# Register int32_t_vector in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorCfgCmdWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorCfgCmdWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _MotorCfgCmdWrapper.double_vector___bool__(self)

    def __len__(self):
        return _MotorCfgCmdWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotorCfgCmdWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorCfgCmdWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorCfgCmdWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorCfgCmdWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorCfgCmdWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorCfgCmdWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _MotorCfgCmdWrapper.double_vector_pop(self)

    def append(self, x):
        return _MotorCfgCmdWrapper.double_vector_append(self, x)

    def empty(self):
        return _MotorCfgCmdWrapper.double_vector_empty(self)

    def size(self):
        return _MotorCfgCmdWrapper.double_vector_size(self)

    def swap(self, v):
        return _MotorCfgCmdWrapper.double_vector_swap(self, v)

    def begin(self):
        return _MotorCfgCmdWrapper.double_vector_begin(self)

    def end(self):
        return _MotorCfgCmdWrapper.double_vector_end(self)

    def rbegin(self):
        return _MotorCfgCmdWrapper.double_vector_rbegin(self)

    def rend(self):
        return _MotorCfgCmdWrapper.double_vector_rend(self)

    def clear(self):
        return _MotorCfgCmdWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _MotorCfgCmdWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _MotorCfgCmdWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _MotorCfgCmdWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _MotorCfgCmdWrapper.double_vector_swiginit(self, _MotorCfgCmdWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _MotorCfgCmdWrapper.double_vector_push_back(self, x)

    def front(self):
        return _MotorCfgCmdWrapper.double_vector_front(self)

    def back(self):
        return _MotorCfgCmdWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _MotorCfgCmdWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotorCfgCmdWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _MotorCfgCmdWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _MotorCfgCmdWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _MotorCfgCmdWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _MotorCfgCmdWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_double_vector

# Register double_vector in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorCfgCmdWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorCfgCmdWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _MotorCfgCmdWrapper.string_vector___bool__(self)

    def __len__(self):
        return _MotorCfgCmdWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotorCfgCmdWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorCfgCmdWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorCfgCmdWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorCfgCmdWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorCfgCmdWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorCfgCmdWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _MotorCfgCmdWrapper.string_vector_pop(self)

    def append(self, x):
        return _MotorCfgCmdWrapper.string_vector_append(self, x)

    def empty(self):
        return _MotorCfgCmdWrapper.string_vector_empty(self)

    def size(self):
        return _MotorCfgCmdWrapper.string_vector_size(self)

    def swap(self, v):
        return _MotorCfgCmdWrapper.string_vector_swap(self, v)

    def begin(self):
        return _MotorCfgCmdWrapper.string_vector_begin(self)

    def end(self):
        return _MotorCfgCmdWrapper.string_vector_end(self)

    def rbegin(self):
        return _MotorCfgCmdWrapper.string_vector_rbegin(self)

    def rend(self):
        return _MotorCfgCmdWrapper.string_vector_rend(self)

    def clear(self):
        return _MotorCfgCmdWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _MotorCfgCmdWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _MotorCfgCmdWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _MotorCfgCmdWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _MotorCfgCmdWrapper.string_vector_swiginit(self, _MotorCfgCmdWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _MotorCfgCmdWrapper.string_vector_push_back(self, x)

    def front(self):
        return _MotorCfgCmdWrapper.string_vector_front(self)

    def back(self):
        return _MotorCfgCmdWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _MotorCfgCmdWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotorCfgCmdWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _MotorCfgCmdWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _MotorCfgCmdWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _MotorCfgCmdWrapper.string_vector_capacity(self)
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_string_vector

# Register string_vector in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _MotorCfgCmdWrapper.BaseDataTypeSeq_swiginit(self, _MotorCfgCmdWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _MotorCfgCmdWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _MotorCfgCmdWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_BaseDataType

    def __init__(self, *args):
        _MotorCfgCmdWrapper.BaseDataType_swiginit(self, _MotorCfgCmdWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotorCfgCmdWrapper.BaseDataTypePubSubType_swiginit(self, _MotorCfgCmdWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotorCfgCmdWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class _MotorCfgGroupCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete__MotorCfgGroupCmdSeq

# Register _MotorCfgGroupCmdSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper._MotorCfgGroupCmdSeq_swigregister(_MotorCfgGroupCmdSeq)

class MotorCfgGroupCmdSeq(_MotorCfgGroupCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_MotorCfgGroupCmdSeq

    def __init__(self, *args):
        _MotorCfgCmdWrapper.MotorCfgGroupCmdSeq_swiginit(self, _MotorCfgCmdWrapper.new_MotorCfgGroupCmdSeq(*args))

    def __len__(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdSeq___getitem__(self, i)

# Register MotorCfgGroupCmdSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.MotorCfgGroupCmdSeq_swigregister(MotorCfgGroupCmdSeq)

class MotorCfgGroupCmd_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___nonzero__(self)

    def __bool__(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___bool__(self)

    def __len__(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector___setitem__(self, *args)

    def pop(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_pop(self)

    def append(self, x):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_append(self, x)

    def empty(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_empty(self)

    def size(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_size(self)

    def swap(self, v):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_swap(self, v)

    def begin(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_begin(self)

    def end(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_end(self)

    def rbegin(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_rbegin(self)

    def rend(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_rend(self)

    def clear(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_clear(self)

    def get_allocator(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_get_allocator(self)

    def pop_back(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_pop_back(self)

    def erase(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_erase(self, *args)

    def __init__(self, *args):
        _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_swiginit(self, _MotorCfgCmdWrapper.new_MotorCfgGroupCmd_vector(*args))

    def push_back(self, x):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_push_back(self, x)

    def front(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_front(self)

    def back(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_back(self)

    def assign(self, n, x):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_resize(self, *args)

    def insert(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_insert(self, *args)

    def reserve(self, n):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_reserve(self, n)

    def capacity(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_capacity(self)
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_MotorCfgGroupCmd_vector

# Register MotorCfgGroupCmd_vector in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.MotorCfgGroupCmd_vector_swigregister(MotorCfgGroupCmd_vector)

class BaseDataType_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector___nonzero__(self)

    def __bool__(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector___bool__(self)

    def __len__(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotorCfgCmdWrapper.BaseDataType_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotorCfgCmdWrapper.BaseDataType_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector___setitem__(self, *args)

    def pop(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_pop(self)

    def append(self, x):
        return _MotorCfgCmdWrapper.BaseDataType_vector_append(self, x)

    def empty(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_empty(self)

    def size(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_size(self)

    def swap(self, v):
        return _MotorCfgCmdWrapper.BaseDataType_vector_swap(self, v)

    def begin(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_begin(self)

    def end(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_end(self)

    def rbegin(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_rbegin(self)

    def rend(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_rend(self)

    def clear(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_clear(self)

    def get_allocator(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_get_allocator(self)

    def pop_back(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_pop_back(self)

    def erase(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector_erase(self, *args)

    def __init__(self, *args):
        _MotorCfgCmdWrapper.BaseDataType_vector_swiginit(self, _MotorCfgCmdWrapper.new_BaseDataType_vector(*args))

    def push_back(self, x):
        return _MotorCfgCmdWrapper.BaseDataType_vector_push_back(self, x)

    def front(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_front(self)

    def back(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_back(self)

    def assign(self, n, x):
        return _MotorCfgCmdWrapper.BaseDataType_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector_resize(self, *args)

    def insert(self, *args):
        return _MotorCfgCmdWrapper.BaseDataType_vector_insert(self, *args)

    def reserve(self, n):
        return _MotorCfgCmdWrapper.BaseDataType_vector_reserve(self, n)

    def capacity(self):
        return _MotorCfgCmdWrapper.BaseDataType_vector_capacity(self)
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_BaseDataType_vector

# Register BaseDataType_vector in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.BaseDataType_vector_swigregister(BaseDataType_vector)

class _RobotMotorCfgGroupCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete__RobotMotorCfgGroupCmdSeq

# Register _RobotMotorCfgGroupCmdSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper._RobotMotorCfgGroupCmdSeq_swigregister(_RobotMotorCfgGroupCmdSeq)

class RobotMotorCfgGroupCmdSeq(_RobotMotorCfgGroupCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_RobotMotorCfgGroupCmdSeq

    def __init__(self, *args):
        _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdSeq_swiginit(self, _MotorCfgCmdWrapper.new_RobotMotorCfgGroupCmdSeq(*args))

    def __len__(self):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdSeq___getitem__(self, i)

# Register RobotMotorCfgGroupCmdSeq in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.RobotMotorCfgGroupCmdSeq_swigregister(RobotMotorCfgGroupCmdSeq)

MotorMode_DISABLE = _MotorCfgCmdWrapper.MotorMode_DISABLE
MotorMode_POSITION = _MotorCfgCmdWrapper.MotorMode_POSITION
MotorMode_VELOCITY = _MotorCfgCmdWrapper.MotorMode_VELOCITY
MotorMode_TORQUE = _MotorCfgCmdWrapper.MotorMode_TORQUE
MotorMode_PD = _MotorCfgCmdWrapper.MotorMode_PD
class MotorCfgGroupCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_MotorCfgGroupCmd

    def __init__(self, *args):
        _MotorCfgCmdWrapper.MotorCfgGroupCmd_swiginit(self, _MotorCfgCmdWrapper.new_MotorCfgGroupCmd(*args))

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd___ne__(self, x)

    def group_name(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_group_name(self, *args)

    def mode(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_mode(self, *args)

    def pos_kp(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_pos_kp(self, *args)

    def pos_ki(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_pos_ki(self, *args)

    def pos_kd(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_pos_kd(self, *args)

    def pd_kp(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_pd_kp(self, *args)

    def pd_kd(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmd_pd_kd(self, *args)

# Register MotorCfgGroupCmd in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.MotorCfgGroupCmd_swigregister(MotorCfgGroupCmd)

class RobotMotorCfgGroupCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_RobotMotorCfgGroupCmd

    def __init__(self, *args):
        _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd_swiginit(self, _MotorCfgCmdWrapper.new_RobotMotorCfgGroupCmd(*args))

    def __eq__(self, x):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd___ne__(self, x)

    def header(self, *args):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd_header(self, *args)

    def group_cmd(self, *args):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd_group_cmd(self, *args)

    def ex_data(self, *args):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmd_ex_data(self, *args)

# Register RobotMotorCfgGroupCmd in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.RobotMotorCfgGroupCmd_swigregister(RobotMotorCfgGroupCmd)

class MotorCfgGroupCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_swiginit(self, _MotorCfgCmdWrapper.new_MotorCfgGroupCmdPubSubType())
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_MotorCfgGroupCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_construct_sample(self, memory)

# Register MotorCfgGroupCmdPubSubType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.MotorCfgGroupCmdPubSubType_swigregister(MotorCfgGroupCmdPubSubType)

class RobotMotorCfgGroupCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_swiginit(self, _MotorCfgCmdWrapper.new_RobotMotorCfgGroupCmdPubSubType())
    __swig_destroy__ = _MotorCfgCmdWrapper.delete_RobotMotorCfgGroupCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_construct_sample(self, memory)

# Register RobotMotorCfgGroupCmdPubSubType in _MotorCfgCmdWrapper:
_MotorCfgCmdWrapper.RobotMotorCfgGroupCmdPubSubType_swigregister(RobotMotorCfgGroupCmdPubSubType)




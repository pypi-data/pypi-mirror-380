# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('RobotMotionState.dll')
if __package__ or '.' in __name__:
    from . import _RobotMotionStateWrapper
else:
    import _RobotMotionStateWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_SwigPyIterator

    def value(self):
        return _RobotMotionStateWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RobotMotionStateWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RobotMotionStateWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RobotMotionStateWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RobotMotionStateWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RobotMotionStateWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _RobotMotionStateWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _RobotMotionStateWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _RobotMotionStateWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RobotMotionStateWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RobotMotionStateWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RobotMotionStateWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RobotMotionStateWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RobotMotionStateWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RobotMotionStateWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _RobotMotionStateWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _RobotMotionStateWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _RobotMotionStateWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _RobotMotionStateWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _RobotMotionStateWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _RobotMotionStateWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _RobotMotionStateWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _RobotMotionStateWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__TimeSeq

# Register _TimeSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_TimeSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.TimeSeq_swiginit(self, _RobotMotionStateWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_Time

    def __init__(self, *args):
        _RobotMotionStateWrapper.Time_swiginit(self, _RobotMotionStateWrapper.new_Time(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _RobotMotionStateWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _RobotMotionStateWrapper.Time_nanosec(self, *args)

# Register Time in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _RobotMotionStateWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.TimePubSubType_swiginit(self, _RobotMotionStateWrapper.new_TimePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__HeaderSeq

# Register _HeaderSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.HeaderSeq_swiginit(self, _RobotMotionStateWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_Header

    def __init__(self, *args):
        _RobotMotionStateWrapper.Header_swiginit(self, _RobotMotionStateWrapper.new_Header(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _RobotMotionStateWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _RobotMotionStateWrapper.Header_frame_id(self, *args)

# Register Header in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.HeaderPubSubType_swiginit(self, _RobotMotionStateWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _AuroraStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__AuroraStateSeq

# Register _AuroraStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._AuroraStateSeq_swigregister(_AuroraStateSeq)

class AuroraStateSeq(_AuroraStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_AuroraStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.AuroraStateSeq_swiginit(self, _RobotMotionStateWrapper.new_AuroraStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.AuroraStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.AuroraStateSeq___getitem__(self, i)

# Register AuroraStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.AuroraStateSeq_swigregister(AuroraStateSeq)

class _RobotStandPoseStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__RobotStandPoseStateSeq

# Register _RobotStandPoseStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._RobotStandPoseStateSeq_swigregister(_RobotStandPoseStateSeq)

class RobotStandPoseStateSeq(_RobotStandPoseStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotStandPoseStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotStandPoseStateSeq_swiginit(self, _RobotMotionStateWrapper.new_RobotStandPoseStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.RobotStandPoseStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.RobotStandPoseStateSeq___getitem__(self, i)

# Register RobotStandPoseStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotStandPoseStateSeq_swigregister(RobotStandPoseStateSeq)

class _VelocityStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__VelocityStateSeq

# Register _VelocityStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._VelocityStateSeq_swigregister(_VelocityStateSeq)

class VelocityStateSeq(_VelocityStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_VelocityStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.VelocityStateSeq_swiginit(self, _RobotMotionStateWrapper.new_VelocityStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.VelocityStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.VelocityStateSeq___getitem__(self, i)

# Register VelocityStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.VelocityStateSeq_swigregister(VelocityStateSeq)

class AuroraState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_AuroraState

    def __init__(self, *args):
        _RobotMotionStateWrapper.AuroraState_swiginit(self, _RobotMotionStateWrapper.new_AuroraState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.AuroraState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.AuroraState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.AuroraState_header(self, *args)

    def velocity_command_source(self, *args):
        return _RobotMotionStateWrapper.AuroraState_velocity_command_source(self, *args)

    def whole_body_fsm_state(self, *args):
        return _RobotMotionStateWrapper.AuroraState_whole_body_fsm_state(self, *args)

    def upper_body_fsm_state(self, *args):
        return _RobotMotionStateWrapper.AuroraState_upper_body_fsm_state(self, *args)

    def allow_upper_body_override(self, *args):
        return _RobotMotionStateWrapper.AuroraState_allow_upper_body_override(self, *args)

# Register AuroraState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.AuroraState_swigregister(AuroraState)

class RobotStandPoseState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotStandPoseState

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotStandPoseState_swiginit(self, _RobotMotionStateWrapper.new_RobotStandPoseState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.RobotStandPoseState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.RobotStandPoseState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseState_header(self, *args)

    def delta_z(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseState_delta_z(self, *args)

    def delta_pitch(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseState_delta_pitch(self, *args)

    def delta_yaw(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseState_delta_yaw(self, *args)

    def stable_level(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseState_stable_level(self, *args)

# Register RobotStandPoseState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotStandPoseState_swigregister(RobotStandPoseState)

class VelocityState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_VelocityState

    def __init__(self, *args):
        _RobotMotionStateWrapper.VelocityState_swiginit(self, _RobotMotionStateWrapper.new_VelocityState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.VelocityState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.VelocityState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.VelocityState_header(self, *args)

    def vx(self, *args):
        return _RobotMotionStateWrapper.VelocityState_vx(self, *args)

    def vy(self, *args):
        return _RobotMotionStateWrapper.VelocityState_vy(self, *args)

    def yaw(self, *args):
        return _RobotMotionStateWrapper.VelocityState_yaw(self, *args)

    def stable_level(self, *args):
        return _RobotMotionStateWrapper.VelocityState_stable_level(self, *args)

# Register VelocityState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.VelocityState_swigregister(VelocityState)

class AuroraStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.AuroraStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_AuroraStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_AuroraStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.AuroraStatePubSubType_construct_sample(self, memory)

# Register AuroraStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.AuroraStatePubSubType_swigregister(AuroraStatePubSubType)

class RobotStandPoseStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_RobotStandPoseStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotStandPoseStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.RobotStandPoseStatePubSubType_construct_sample(self, memory)

# Register RobotStandPoseStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotStandPoseStatePubSubType_swigregister(RobotStandPoseStatePubSubType)

class VelocityStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.VelocityStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_VelocityStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_VelocityStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.VelocityStatePubSubType_construct_sample(self, memory)

# Register VelocityStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.VelocityStatePubSubType_swigregister(VelocityStatePubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.int32_t_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.int32_t_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.int32_t_vector_swiginit(self, _RobotMotionStateWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.int32_t_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _RobotMotionStateWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_int32_t_vector

# Register int32_t_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.double_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.double_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.double_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.double_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.double_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.double_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.double_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.double_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.double_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.double_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.double_vector_swiginit(self, _RobotMotionStateWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.double_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.double_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _RobotMotionStateWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_double_vector

# Register double_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.string_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.string_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.string_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.string_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.string_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.string_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.string_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.string_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.string_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.string_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.string_vector_swiginit(self, _RobotMotionStateWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.string_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.string_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.string_vector_capacity(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_string_vector

# Register string_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.BaseDataTypeSeq_swiginit(self, _RobotMotionStateWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataType

    def __init__(self, *args):
        _RobotMotionStateWrapper.BaseDataType_swiginit(self, _RobotMotionStateWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.BaseDataTypePubSubType_swiginit(self, _RobotMotionStateWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class _ControlGroupStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__ControlGroupStateSeq

# Register _ControlGroupStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._ControlGroupStateSeq_swigregister(_ControlGroupStateSeq)

class ControlGroupStateSeq(_ControlGroupStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ControlGroupStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.ControlGroupStateSeq_swiginit(self, _RobotMotionStateWrapper.new_ControlGroupStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.ControlGroupStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.ControlGroupStateSeq___getitem__(self, i)

# Register ControlGroupStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ControlGroupStateSeq_swigregister(ControlGroupStateSeq)

class _CartesianStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__CartesianStateSeq

# Register _CartesianStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._CartesianStateSeq_swigregister(_CartesianStateSeq)

class CartesianStateSeq(_CartesianStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_CartesianStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.CartesianStateSeq_swiginit(self, _RobotMotionStateWrapper.new_CartesianStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.CartesianStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.CartesianStateSeq___getitem__(self, i)

# Register CartesianStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.CartesianStateSeq_swigregister(CartesianStateSeq)

class uint8_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.uint8_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.uint8_t_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.uint8_t_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.uint8_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.uint8_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.uint8_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.uint8_t_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.uint8_t_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.uint8_t_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.uint8_t_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.uint8_t_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.uint8_t_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.uint8_t_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.uint8_t_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.uint8_t_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.uint8_t_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.uint8_t_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.uint8_t_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.uint8_t_vector_swiginit(self, _RobotMotionStateWrapper.new_uint8_t_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.uint8_t_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.uint8_t_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.uint8_t_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.uint8_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.uint8_t_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.uint8_t_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.uint8_t_vector_capacity(self)

    def get_buffer(self):
        return _RobotMotionStateWrapper.uint8_t_vector_get_buffer(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_uint8_t_vector

# Register uint8_t_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.uint8_t_vector_swigregister(uint8_t_vector)

class ControlGroupState_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.ControlGroupState_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.ControlGroupState_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.ControlGroupState_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.ControlGroupState_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.ControlGroupState_vector_swiginit(self, _RobotMotionStateWrapper.new_ControlGroupState_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.ControlGroupState_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.ControlGroupState_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.ControlGroupState_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.ControlGroupState_vector_capacity(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ControlGroupState_vector

# Register ControlGroupState_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ControlGroupState_vector_swigregister(ControlGroupState_vector)

class BaseDataType_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.BaseDataType_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.BaseDataType_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.BaseDataType_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.BaseDataType_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.BaseDataType_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.BaseDataType_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.BaseDataType_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.BaseDataType_vector_swiginit(self, _RobotMotionStateWrapper.new_BaseDataType_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.BaseDataType_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.BaseDataType_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.BaseDataType_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.BaseDataType_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.BaseDataType_vector_capacity(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataType_vector

# Register BaseDataType_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataType_vector_swigregister(BaseDataType_vector)

class _RobotControlGroupStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__RobotControlGroupStateSeq

# Register _RobotControlGroupStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._RobotControlGroupStateSeq_swigregister(_RobotControlGroupStateSeq)

class RobotControlGroupStateSeq(_RobotControlGroupStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotControlGroupStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotControlGroupStateSeq_swiginit(self, _RobotMotionStateWrapper.new_RobotControlGroupStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.RobotControlGroupStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.RobotControlGroupStateSeq___getitem__(self, i)

# Register RobotControlGroupStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotControlGroupStateSeq_swigregister(RobotControlGroupStateSeq)

class CartesianState_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RobotMotionStateWrapper.CartesianState_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RobotMotionStateWrapper.CartesianState_vector___nonzero__(self)

    def __bool__(self):
        return _RobotMotionStateWrapper.CartesianState_vector___bool__(self)

    def __len__(self):
        return _RobotMotionStateWrapper.CartesianState_vector___len__(self)

    def __getslice__(self, i, j):
        return _RobotMotionStateWrapper.CartesianState_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RobotMotionStateWrapper.CartesianState_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector___setitem__(self, *args)

    def pop(self):
        return _RobotMotionStateWrapper.CartesianState_vector_pop(self)

    def append(self, x):
        return _RobotMotionStateWrapper.CartesianState_vector_append(self, x)

    def empty(self):
        return _RobotMotionStateWrapper.CartesianState_vector_empty(self)

    def size(self):
        return _RobotMotionStateWrapper.CartesianState_vector_size(self)

    def swap(self, v):
        return _RobotMotionStateWrapper.CartesianState_vector_swap(self, v)

    def begin(self):
        return _RobotMotionStateWrapper.CartesianState_vector_begin(self)

    def end(self):
        return _RobotMotionStateWrapper.CartesianState_vector_end(self)

    def rbegin(self):
        return _RobotMotionStateWrapper.CartesianState_vector_rbegin(self)

    def rend(self):
        return _RobotMotionStateWrapper.CartesianState_vector_rend(self)

    def clear(self):
        return _RobotMotionStateWrapper.CartesianState_vector_clear(self)

    def get_allocator(self):
        return _RobotMotionStateWrapper.CartesianState_vector_get_allocator(self)

    def pop_back(self):
        return _RobotMotionStateWrapper.CartesianState_vector_pop_back(self)

    def erase(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector_erase(self, *args)

    def __init__(self, *args):
        _RobotMotionStateWrapper.CartesianState_vector_swiginit(self, _RobotMotionStateWrapper.new_CartesianState_vector(*args))

    def push_back(self, x):
        return _RobotMotionStateWrapper.CartesianState_vector_push_back(self, x)

    def front(self):
        return _RobotMotionStateWrapper.CartesianState_vector_front(self)

    def back(self):
        return _RobotMotionStateWrapper.CartesianState_vector_back(self)

    def assign(self, n, x):
        return _RobotMotionStateWrapper.CartesianState_vector_assign(self, n, x)

    def resize(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector_resize(self, *args)

    def insert(self, *args):
        return _RobotMotionStateWrapper.CartesianState_vector_insert(self, *args)

    def reserve(self, n):
        return _RobotMotionStateWrapper.CartesianState_vector_reserve(self, n)

    def capacity(self):
        return _RobotMotionStateWrapper.CartesianState_vector_capacity(self)
    __swig_destroy__ = _RobotMotionStateWrapper.delete_CartesianState_vector

# Register CartesianState_vector in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.CartesianState_vector_swigregister(CartesianState_vector)

class _RobotCartesianStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__RobotCartesianStateSeq

# Register _RobotCartesianStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._RobotCartesianStateSeq_swigregister(_RobotCartesianStateSeq)

class RobotCartesianStateSeq(_RobotCartesianStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotCartesianStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotCartesianStateSeq_swiginit(self, _RobotMotionStateWrapper.new_RobotCartesianStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.RobotCartesianStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.RobotCartesianStateSeq___getitem__(self, i)

# Register RobotCartesianStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotCartesianStateSeq_swigregister(RobotCartesianStateSeq)

class ControlGroupState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ControlGroupState

    def __init__(self, *args):
        _RobotMotionStateWrapper.ControlGroupState_swiginit(self, _RobotMotionStateWrapper.new_ControlGroupState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.ControlGroupState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.ControlGroupState___ne__(self, x)

    def group_name(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_group_name(self, *args)

    def joint_position(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_joint_position(self, *args)

    def joint_velocity(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_joint_velocity(self, *args)

    def joint_effort(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_joint_effort(self, *args)

    def motor_position(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_motor_position(self, *args)

    def motor_velocity(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_motor_velocity(self, *args)

    def motor_effort(self, *args):
        return _RobotMotionStateWrapper.ControlGroupState_motor_effort(self, *args)

# Register ControlGroupState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ControlGroupState_swigregister(ControlGroupState)

class CartesianState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_CartesianState

    def __init__(self, *args):
        _RobotMotionStateWrapper.CartesianState_swiginit(self, _RobotMotionStateWrapper.new_CartesianState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.CartesianState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.CartesianState___ne__(self, x)

    def group_name(self, *args):
        return _RobotMotionStateWrapper.CartesianState_group_name(self, *args)

    def pose(self, *args):
        return _RobotMotionStateWrapper.CartesianState_pose(self, *args)

    def twist(self, *args):
        return _RobotMotionStateWrapper.CartesianState_twist(self, *args)

    def wrench(self, *args):
        return _RobotMotionStateWrapper.CartesianState_wrench(self, *args)

# Register CartesianState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.CartesianState_swigregister(CartesianState)

class RobotControlGroupState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotControlGroupState

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotControlGroupState_swiginit(self, _RobotMotionStateWrapper.new_RobotControlGroupState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.RobotControlGroupState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.RobotControlGroupState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupState_header(self, *args)

    def group_motion_state(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupState_group_motion_state(self, *args)

    def group_state(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupState_group_state(self, *args)

    def stable_level(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupState_stable_level(self, *args)

    def ex_data(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupState_ex_data(self, *args)

# Register RobotControlGroupState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotControlGroupState_swigregister(RobotControlGroupState)

class RobotCartesianState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotCartesianState

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotCartesianState_swiginit(self, _RobotMotionStateWrapper.new_RobotCartesianState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.RobotCartesianState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.RobotCartesianState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_header(self, *args)

    def coordinate_system(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_coordinate_system(self, *args)

    def group_motion_state(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_group_motion_state(self, *args)

    def cartesian_state(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_cartesian_state(self, *args)

    def stable_level(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_stable_level(self, *args)

    def ex_data(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianState_ex_data(self, *args)

# Register RobotCartesianState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotCartesianState_swigregister(RobotCartesianState)

class ControlGroupStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.ControlGroupStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_ControlGroupStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ControlGroupStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.ControlGroupStatePubSubType_construct_sample(self, memory)

# Register ControlGroupStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ControlGroupStatePubSubType_swigregister(ControlGroupStatePubSubType)

class CartesianStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.CartesianStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_CartesianStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_CartesianStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.CartesianStatePubSubType_construct_sample(self, memory)

# Register CartesianStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.CartesianStatePubSubType_swigregister(CartesianStatePubSubType)

class RobotControlGroupStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_RobotControlGroupStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotControlGroupStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.RobotControlGroupStatePubSubType_construct_sample(self, memory)

# Register RobotControlGroupStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotControlGroupStatePubSubType_swigregister(RobotControlGroupStatePubSubType)

class RobotCartesianStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.RobotCartesianStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_RobotCartesianStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotCartesianStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.RobotCartesianStatePubSubType_construct_sample(self, memory)

# Register RobotCartesianStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotCartesianStatePubSubType_swigregister(RobotCartesianStatePubSubType)

class _TrueDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__TrueDataSeq

# Register _TrueDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._TrueDataSeq_swigregister(_TrueDataSeq)

class TrueDataSeq(_TrueDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_TrueDataSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.TrueDataSeq_swiginit(self, _RobotMotionStateWrapper.new_TrueDataSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.TrueDataSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.TrueDataSeq___getitem__(self, i)

# Register TrueDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.TrueDataSeq_swigregister(TrueDataSeq)

class TrueData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_TrueData

    def __init__(self, *args):
        _RobotMotionStateWrapper.TrueData_swiginit(self, _RobotMotionStateWrapper.new_TrueData(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.TrueData___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.TrueData___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.TrueData_header(self, *args)

    def vel_B(self, *args):
        return _RobotMotionStateWrapper.TrueData_vel_B(self, *args)

    def vel_W(self, *args):
        return _RobotMotionStateWrapper.TrueData_vel_W(self, *args)

    def pos_W(self, *args):
        return _RobotMotionStateWrapper.TrueData_pos_W(self, *args)

    def contact_fz(self, *args):
        return _RobotMotionStateWrapper.TrueData_contact_fz(self, *args)

    def contact_prob(self, *args):
        return _RobotMotionStateWrapper.TrueData_contact_prob(self, *args)

# Register TrueData in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.TrueData_swigregister(TrueData)

class TrueDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.TrueDataPubSubType_swiginit(self, _RobotMotionStateWrapper.new_TrueDataPubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_TrueDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.TrueDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.TrueDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.TrueDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.TrueDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.TrueDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.TrueDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.TrueDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.TrueDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.TrueDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.TrueDataPubSubType_construct_sample(self, memory)

# Register TrueDataPubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.TrueDataPubSubType_swigregister(TrueDataPubSubType)

class _ContactDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__ContactDataSeq

# Register _ContactDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._ContactDataSeq_swigregister(_ContactDataSeq)

class ContactDataSeq(_ContactDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ContactDataSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.ContactDataSeq_swiginit(self, _RobotMotionStateWrapper.new_ContactDataSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.ContactDataSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.ContactDataSeq___getitem__(self, i)

# Register ContactDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ContactDataSeq_swigregister(ContactDataSeq)

class ContactData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ContactData

    def __init__(self, *args):
        _RobotMotionStateWrapper.ContactData_swiginit(self, _RobotMotionStateWrapper.new_ContactData(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.ContactData___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.ContactData___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.ContactData_header(self, *args)

    def contact_force(self, *args):
        return _RobotMotionStateWrapper.ContactData_contact_force(self, *args)

    def contact_prob(self, *args):
        return _RobotMotionStateWrapper.ContactData_contact_prob(self, *args)

# Register ContactData in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ContactData_swigregister(ContactData)

class ContactDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.ContactDataPubSubType_swiginit(self, _RobotMotionStateWrapper.new_ContactDataPubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_ContactDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.ContactDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.ContactDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.ContactDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.ContactDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.ContactDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.ContactDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.ContactDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.ContactDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.ContactDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.ContactDataPubSubType_construct_sample(self, memory)

# Register ContactDataPubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.ContactDataPubSubType_swigregister(ContactDataPubSubType)

class _BaseDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__BaseDataSeq

# Register _BaseDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._BaseDataSeq_swigregister(_BaseDataSeq)

class BaseDataSeq(_BaseDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.BaseDataSeq_swiginit(self, _RobotMotionStateWrapper.new_BaseDataSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.BaseDataSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.BaseDataSeq___getitem__(self, i)

# Register BaseDataSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataSeq_swigregister(BaseDataSeq)

class BaseData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseData

    def __init__(self, *args):
        _RobotMotionStateWrapper.BaseData_swiginit(self, _RobotMotionStateWrapper.new_BaseData(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.BaseData___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.BaseData___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.BaseData_header(self, *args)

    def quat_xyzw(self, *args):
        return _RobotMotionStateWrapper.BaseData_quat_xyzw(self, *args)

    def quat_wxyz(self, *args):
        return _RobotMotionStateWrapper.BaseData_quat_wxyz(self, *args)

    def rpy(self, *args):
        return _RobotMotionStateWrapper.BaseData_rpy(self, *args)

    def omega_W(self, *args):
        return _RobotMotionStateWrapper.BaseData_omega_W(self, *args)

    def acc_W(self, *args):
        return _RobotMotionStateWrapper.BaseData_acc_W(self, *args)

    def omega_B(self, *args):
        return _RobotMotionStateWrapper.BaseData_omega_B(self, *args)

    def acc_B(self, *args):
        return _RobotMotionStateWrapper.BaseData_acc_B(self, *args)

    def vel_W(self, *args):
        return _RobotMotionStateWrapper.BaseData_vel_W(self, *args)

    def pos_W(self, *args):
        return _RobotMotionStateWrapper.BaseData_pos_W(self, *args)

    def vel_B(self, *args):
        return _RobotMotionStateWrapper.BaseData_vel_B(self, *args)

# Register BaseData in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseData_swigregister(BaseData)

class BaseDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.BaseDataPubSubType_swiginit(self, _RobotMotionStateWrapper.new_BaseDataPubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_BaseDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.BaseDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.BaseDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.BaseDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.BaseDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.BaseDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.BaseDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.BaseDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.BaseDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.BaseDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.BaseDataPubSubType_construct_sample(self, memory)

# Register BaseDataPubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.BaseDataPubSubType_swigregister(BaseDataPubSubType)

class _RobotMotionStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete__RobotMotionStateSeq

# Register _RobotMotionStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper._RobotMotionStateSeq_swigregister(_RobotMotionStateSeq)

class RobotMotionStateSeq(_RobotMotionStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotMotionStateSeq

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotMotionStateSeq_swiginit(self, _RobotMotionStateWrapper.new_RobotMotionStateSeq(*args))

    def __len__(self):
        return _RobotMotionStateWrapper.RobotMotionStateSeq___len__(self)

    def __getitem__(self, i):
        return _RobotMotionStateWrapper.RobotMotionStateSeq___getitem__(self, i)

# Register RobotMotionStateSeq in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotMotionStateSeq_swigregister(RobotMotionStateSeq)

class RobotMotionState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotMotionState

    def __init__(self, *args):
        _RobotMotionStateWrapper.RobotMotionState_swiginit(self, _RobotMotionStateWrapper.new_RobotMotionState(*args))

    def __eq__(self, x):
        return _RobotMotionStateWrapper.RobotMotionState___eq__(self, x)

    def __ne__(self, x):
        return _RobotMotionStateWrapper.RobotMotionState___ne__(self, x)

    def header(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_header(self, *args)

    def stand_state(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_stand_state(self, *args)

    def ctrl_group_state(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_ctrl_group_state(self, *args)

    def cartesian_state(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_cartesian_state(self, *args)

    def base_data(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_base_data(self, *args)

    def true_data(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_true_data(self, *args)

    def contact_data(self, *args):
        return _RobotMotionStateWrapper.RobotMotionState_contact_data(self, *args)

# Register RobotMotionState in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotMotionState_swigregister(RobotMotionState)

class RobotMotionStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RobotMotionStateWrapper.RobotMotionStatePubSubType_swiginit(self, _RobotMotionStateWrapper.new_RobotMotionStatePubSubType())
    __swig_destroy__ = _RobotMotionStateWrapper.delete_RobotMotionStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _RobotMotionStateWrapper.RobotMotionStatePubSubType_construct_sample(self, memory)

# Register RobotMotionStatePubSubType in _RobotMotionStateWrapper:
_RobotMotionStateWrapper.RobotMotionStatePubSubType_swigregister(RobotMotionStatePubSubType)




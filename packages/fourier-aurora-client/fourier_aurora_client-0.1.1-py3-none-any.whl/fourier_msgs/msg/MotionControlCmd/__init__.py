# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('MotionControlCmd.dll')
if __package__ or '.' in __name__:
    from . import _MotionControlCmdWrapper
else:
    import _MotionControlCmdWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_SwigPyIterator

    def value(self):
        return _MotionControlCmdWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _MotionControlCmdWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _MotionControlCmdWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _MotionControlCmdWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _MotionControlCmdWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _MotionControlCmdWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _MotionControlCmdWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _MotionControlCmdWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _MotionControlCmdWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _MotionControlCmdWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _MotionControlCmdWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _MotionControlCmdWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _MotionControlCmdWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _MotionControlCmdWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _MotionControlCmdWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _MotionControlCmdWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _MotionControlCmdWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _MotionControlCmdWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _MotionControlCmdWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _MotionControlCmdWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _MotionControlCmdWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _MotionControlCmdWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _MotionControlCmdWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__TimeSeq

# Register _TimeSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_TimeSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.TimeSeq_swiginit(self, _MotionControlCmdWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_Time

    def __init__(self, *args):
        _MotionControlCmdWrapper.Time_swiginit(self, _MotionControlCmdWrapper.new_Time(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _MotionControlCmdWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _MotionControlCmdWrapper.Time_nanosec(self, *args)

# Register Time in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _MotionControlCmdWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.TimePubSubType_swiginit(self, _MotionControlCmdWrapper.new_TimePubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__HeaderSeq

# Register _HeaderSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.HeaderSeq_swiginit(self, _MotionControlCmdWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_Header

    def __init__(self, *args):
        _MotionControlCmdWrapper.Header_swiginit(self, _MotionControlCmdWrapper.new_Header(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _MotionControlCmdWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _MotionControlCmdWrapper.Header_frame_id(self, *args)

# Register Header in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.HeaderPubSubType_swiginit(self, _MotionControlCmdWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class int32_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.int32_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.int32_t_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.int32_t_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.int32_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.int32_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.int32_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.int32_t_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.int32_t_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.int32_t_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.int32_t_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.int32_t_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.int32_t_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.int32_t_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.int32_t_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.int32_t_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.int32_t_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.int32_t_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.int32_t_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.int32_t_vector_swiginit(self, _MotionControlCmdWrapper.new_int32_t_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.int32_t_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.int32_t_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.int32_t_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.int32_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.int32_t_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.int32_t_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.int32_t_vector_capacity(self)

    def get_buffer(self):
        return _MotionControlCmdWrapper.int32_t_vector_get_buffer(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_int32_t_vector

# Register int32_t_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.int32_t_vector_swigregister(int32_t_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.double_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.double_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.double_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.double_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.double_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.double_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.double_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.double_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.double_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.double_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.double_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.double_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.double_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.double_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.double_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.double_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.double_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.double_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.double_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.double_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.double_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.double_vector_swiginit(self, _MotionControlCmdWrapper.new_double_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.double_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.double_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.double_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.double_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.double_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.double_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.double_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.double_vector_capacity(self)

    def get_buffer(self):
        return _MotionControlCmdWrapper.double_vector_get_buffer(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_double_vector

# Register double_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.string_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.string_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.string_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.string_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.string_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.string_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.string_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.string_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.string_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.string_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.string_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.string_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.string_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.string_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.string_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.string_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.string_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.string_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.string_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.string_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.string_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.string_vector_swiginit(self, _MotionControlCmdWrapper.new_string_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.string_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.string_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.string_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.string_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.string_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.string_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.string_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.string_vector_capacity(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_string_vector

# Register string_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.string_vector_swigregister(string_vector)

class _BaseDataTypeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__BaseDataTypeSeq

# Register _BaseDataTypeSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._BaseDataTypeSeq_swigregister(_BaseDataTypeSeq)

class BaseDataTypeSeq(_BaseDataTypeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_BaseDataTypeSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.BaseDataTypeSeq_swiginit(self, _MotionControlCmdWrapper.new_BaseDataTypeSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.BaseDataTypeSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.BaseDataTypeSeq___getitem__(self, i)

# Register BaseDataTypeSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.BaseDataTypeSeq_swigregister(BaseDataTypeSeq)

class BaseDataType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_BaseDataType

    def __init__(self, *args):
        _MotionControlCmdWrapper.BaseDataType_swiginit(self, _MotionControlCmdWrapper.new_BaseDataType(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.BaseDataType___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.BaseDataType___ne__(self, x)

    def arg_int(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_arg_int(self, *args)

    def arg_double(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_arg_double(self, *args)

    def arg_string(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_arg_string(self, *args)

# Register BaseDataType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.BaseDataType_swigregister(BaseDataType)

class BaseDataTypePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.BaseDataTypePubSubType_swiginit(self, _MotionControlCmdWrapper.new_BaseDataTypePubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_BaseDataTypePubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.BaseDataTypePubSubType_construct_sample(self, memory)

# Register BaseDataTypePubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.BaseDataTypePubSubType_swigregister(BaseDataTypePubSubType)

class _ControlGroupCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__ControlGroupCmdSeq

# Register _ControlGroupCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._ControlGroupCmdSeq_swigregister(_ControlGroupCmdSeq)

class ControlGroupCmdSeq(_ControlGroupCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_ControlGroupCmdSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.ControlGroupCmdSeq_swiginit(self, _MotionControlCmdWrapper.new_ControlGroupCmdSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.ControlGroupCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.ControlGroupCmdSeq___getitem__(self, i)

# Register ControlGroupCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.ControlGroupCmdSeq_swigregister(ControlGroupCmdSeq)

class _CartesianCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__CartesianCmdSeq

# Register _CartesianCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._CartesianCmdSeq_swigregister(_CartesianCmdSeq)

class CartesianCmdSeq(_CartesianCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_CartesianCmdSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.CartesianCmdSeq_swiginit(self, _MotionControlCmdWrapper.new_CartesianCmdSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.CartesianCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.CartesianCmdSeq___getitem__(self, i)

# Register CartesianCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.CartesianCmdSeq_swigregister(CartesianCmdSeq)

class ControlGroupCmd_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.ControlGroupCmd_vector_swiginit(self, _MotionControlCmdWrapper.new_ControlGroupCmd_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.ControlGroupCmd_vector_capacity(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_ControlGroupCmd_vector

# Register ControlGroupCmd_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.ControlGroupCmd_vector_swigregister(ControlGroupCmd_vector)

class BaseDataType_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.BaseDataType_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.BaseDataType_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.BaseDataType_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.BaseDataType_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.BaseDataType_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.BaseDataType_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.BaseDataType_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.BaseDataType_vector_swiginit(self, _MotionControlCmdWrapper.new_BaseDataType_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.BaseDataType_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.BaseDataType_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.BaseDataType_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.BaseDataType_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.BaseDataType_vector_capacity(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_BaseDataType_vector

# Register BaseDataType_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.BaseDataType_vector_swigregister(BaseDataType_vector)

class _RobotControlGroupCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__RobotControlGroupCmdSeq

# Register _RobotControlGroupCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._RobotControlGroupCmdSeq_swigregister(_RobotControlGroupCmdSeq)

class RobotControlGroupCmdSeq(_RobotControlGroupCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotControlGroupCmdSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.RobotControlGroupCmdSeq_swiginit(self, _MotionControlCmdWrapper.new_RobotControlGroupCmdSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.RobotControlGroupCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.RobotControlGroupCmdSeq___getitem__(self, i)

# Register RobotControlGroupCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotControlGroupCmdSeq_swigregister(RobotControlGroupCmdSeq)

class CartesianCmd_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector___nonzero__(self)

    def __bool__(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector___bool__(self)

    def __len__(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector___len__(self)

    def __getslice__(self, i, j):
        return _MotionControlCmdWrapper.CartesianCmd_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _MotionControlCmdWrapper.CartesianCmd_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector___setitem__(self, *args)

    def pop(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_pop(self)

    def append(self, x):
        return _MotionControlCmdWrapper.CartesianCmd_vector_append(self, x)

    def empty(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_empty(self)

    def size(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_size(self)

    def swap(self, v):
        return _MotionControlCmdWrapper.CartesianCmd_vector_swap(self, v)

    def begin(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_begin(self)

    def end(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_end(self)

    def rbegin(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_rbegin(self)

    def rend(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_rend(self)

    def clear(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_clear(self)

    def get_allocator(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_get_allocator(self)

    def pop_back(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_pop_back(self)

    def erase(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector_erase(self, *args)

    def __init__(self, *args):
        _MotionControlCmdWrapper.CartesianCmd_vector_swiginit(self, _MotionControlCmdWrapper.new_CartesianCmd_vector(*args))

    def push_back(self, x):
        return _MotionControlCmdWrapper.CartesianCmd_vector_push_back(self, x)

    def front(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_front(self)

    def back(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_back(self)

    def assign(self, n, x):
        return _MotionControlCmdWrapper.CartesianCmd_vector_assign(self, n, x)

    def resize(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector_resize(self, *args)

    def insert(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_vector_insert(self, *args)

    def reserve(self, n):
        return _MotionControlCmdWrapper.CartesianCmd_vector_reserve(self, n)

    def capacity(self):
        return _MotionControlCmdWrapper.CartesianCmd_vector_capacity(self)
    __swig_destroy__ = _MotionControlCmdWrapper.delete_CartesianCmd_vector

# Register CartesianCmd_vector in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.CartesianCmd_vector_swigregister(CartesianCmd_vector)

class _RobotCartesianCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__RobotCartesianCmdSeq

# Register _RobotCartesianCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._RobotCartesianCmdSeq_swigregister(_RobotCartesianCmdSeq)

class RobotCartesianCmdSeq(_RobotCartesianCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotCartesianCmdSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.RobotCartesianCmdSeq_swiginit(self, _MotionControlCmdWrapper.new_RobotCartesianCmdSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.RobotCartesianCmdSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.RobotCartesianCmdSeq___getitem__(self, i)

# Register RobotCartesianCmdSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotCartesianCmdSeq_swigregister(RobotCartesianCmdSeq)

class _MoveCommandSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete__MoveCommandSeq

# Register _MoveCommandSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper._MoveCommandSeq_swigregister(_MoveCommandSeq)

class MoveCommandSeq(_MoveCommandSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_MoveCommandSeq

    def __init__(self, *args):
        _MotionControlCmdWrapper.MoveCommandSeq_swiginit(self, _MotionControlCmdWrapper.new_MoveCommandSeq(*args))

    def __len__(self):
        return _MotionControlCmdWrapper.MoveCommandSeq___len__(self)

    def __getitem__(self, i):
        return _MotionControlCmdWrapper.MoveCommandSeq___getitem__(self, i)

# Register MoveCommandSeq in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.MoveCommandSeq_swigregister(MoveCommandSeq)

class ControlGroupCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_ControlGroupCmd

    def __init__(self, *args):
        _MotionControlCmdWrapper.ControlGroupCmd_swiginit(self, _MotionControlCmdWrapper.new_ControlGroupCmd(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.ControlGroupCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.ControlGroupCmd___ne__(self, x)

    def group_name(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_group_name(self, *args)

    def group_motion_state(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_group_motion_state(self, *args)

    def control_type(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_control_type(self, *args)

    def motor_mode(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_motor_mode(self, *args)

    def position(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_position(self, *args)

    def velocity(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_velocity(self, *args)

    def effort(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmd_effort(self, *args)

# Register ControlGroupCmd in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.ControlGroupCmd_swigregister(ControlGroupCmd)

class CartesianCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_CartesianCmd

    def __init__(self, *args):
        _MotionControlCmdWrapper.CartesianCmd_swiginit(self, _MotionControlCmdWrapper.new_CartesianCmd(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.CartesianCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.CartesianCmd___ne__(self, x)

    def group_name(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_group_name(self, *args)

    def group_motion_state(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_group_motion_state(self, *args)

    def pose(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_pose(self, *args)

    def twist(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_twist(self, *args)

    def wrench(self, *args):
        return _MotionControlCmdWrapper.CartesianCmd_wrench(self, *args)

# Register CartesianCmd in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.CartesianCmd_swigregister(CartesianCmd)

class RobotControlGroupCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotControlGroupCmd

    def __init__(self, *args):
        _MotionControlCmdWrapper.RobotControlGroupCmd_swiginit(self, _MotionControlCmdWrapper.new_RobotControlGroupCmd(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.RobotControlGroupCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.RobotControlGroupCmd___ne__(self, x)

    def header(self, *args):
        return _MotionControlCmdWrapper.RobotControlGroupCmd_header(self, *args)

    def group_cmd(self, *args):
        return _MotionControlCmdWrapper.RobotControlGroupCmd_group_cmd(self, *args)

    def ex_data(self, *args):
        return _MotionControlCmdWrapper.RobotControlGroupCmd_ex_data(self, *args)

# Register RobotControlGroupCmd in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotControlGroupCmd_swigregister(RobotControlGroupCmd)

class RobotCartesianCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotCartesianCmd

    def __init__(self, *args):
        _MotionControlCmdWrapper.RobotCartesianCmd_swiginit(self, _MotionControlCmdWrapper.new_RobotCartesianCmd(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.RobotCartesianCmd___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.RobotCartesianCmd___ne__(self, x)

    def header(self, *args):
        return _MotionControlCmdWrapper.RobotCartesianCmd_header(self, *args)

    def coordinate_system(self, *args):
        return _MotionControlCmdWrapper.RobotCartesianCmd_coordinate_system(self, *args)

    def cartesian_cmd(self, *args):
        return _MotionControlCmdWrapper.RobotCartesianCmd_cartesian_cmd(self, *args)

    def ex_data(self, *args):
        return _MotionControlCmdWrapper.RobotCartesianCmd_ex_data(self, *args)

# Register RobotCartesianCmd in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotCartesianCmd_swigregister(RobotCartesianCmd)

class MoveCommand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MotionControlCmdWrapper.delete_MoveCommand

    def __init__(self, *args):
        _MotionControlCmdWrapper.MoveCommand_swiginit(self, _MotionControlCmdWrapper.new_MoveCommand(*args))

    def __eq__(self, x):
        return _MotionControlCmdWrapper.MoveCommand___eq__(self, x)

    def __ne__(self, x):
        return _MotionControlCmdWrapper.MoveCommand___ne__(self, x)

    def header(self, *args):
        return _MotionControlCmdWrapper.MoveCommand_header(self, *args)

    def move_type(self, *args):
        return _MotionControlCmdWrapper.MoveCommand_move_type(self, *args)

    def joint_commands(self, *args):
        return _MotionControlCmdWrapper.MoveCommand_joint_commands(self, *args)

    def cartesian_commands(self, *args):
        return _MotionControlCmdWrapper.MoveCommand_cartesian_commands(self, *args)

    def ex_data(self, *args):
        return _MotionControlCmdWrapper.MoveCommand_ex_data(self, *args)

# Register MoveCommand in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.MoveCommand_swigregister(MoveCommand)

class ControlGroupCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.ControlGroupCmdPubSubType_swiginit(self, _MotionControlCmdWrapper.new_ControlGroupCmdPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_ControlGroupCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.ControlGroupCmdPubSubType_construct_sample(self, memory)

# Register ControlGroupCmdPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.ControlGroupCmdPubSubType_swigregister(ControlGroupCmdPubSubType)

class CartesianCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.CartesianCmdPubSubType_swiginit(self, _MotionControlCmdWrapper.new_CartesianCmdPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_CartesianCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.CartesianCmdPubSubType_construct_sample(self, memory)

# Register CartesianCmdPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.CartesianCmdPubSubType_swigregister(CartesianCmdPubSubType)

class RobotControlGroupCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_swiginit(self, _MotionControlCmdWrapper.new_RobotControlGroupCmdPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotControlGroupCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_construct_sample(self, memory)

# Register RobotControlGroupCmdPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotControlGroupCmdPubSubType_swigregister(RobotControlGroupCmdPubSubType)

class RobotCartesianCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_swiginit(self, _MotionControlCmdWrapper.new_RobotCartesianCmdPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_RobotCartesianCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.RobotCartesianCmdPubSubType_construct_sample(self, memory)

# Register RobotCartesianCmdPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.RobotCartesianCmdPubSubType_swigregister(RobotCartesianCmdPubSubType)

class MoveCommandPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MotionControlCmdWrapper.MoveCommandPubSubType_swiginit(self, _MotionControlCmdWrapper.new_MoveCommandPubSubType())
    __swig_destroy__ = _MotionControlCmdWrapper.delete_MoveCommandPubSubType

    def serialize(self, data, payload, data_representation):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_compute_key(self, *args)

    def create_data(self):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_create_data(self)

    def delete_data(self, data):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _MotionControlCmdWrapper.MoveCommandPubSubType_construct_sample(self, memory)

# Register MoveCommandPubSubType in _MotionControlCmdWrapper:
_MotionControlCmdWrapper.MoveCommandPubSubType_swigregister(MoveCommandPubSubType)




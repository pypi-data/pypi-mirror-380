# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('AuroraState.dll')
if __package__ or '.' in __name__:
    from . import _AuroraStateWrapper
else:
    import _AuroraStateWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_SwigPyIterator

    def value(self):
        return _AuroraStateWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _AuroraStateWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _AuroraStateWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _AuroraStateWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _AuroraStateWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _AuroraStateWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _AuroraStateWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _AuroraStateWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _AuroraStateWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _AuroraStateWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _AuroraStateWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _AuroraStateWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _AuroraStateWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _AuroraStateWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _AuroraStateWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _AuroraStateWrapper:
_AuroraStateWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _AuroraStateWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _AuroraStateWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _AuroraStateWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _AuroraStateWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _AuroraStateWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _AuroraStateWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _AuroraStateWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _AuroraStateWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete__TimeSeq

# Register _TimeSeq in _AuroraStateWrapper:
_AuroraStateWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_TimeSeq

    def __init__(self, *args):
        _AuroraStateWrapper.TimeSeq_swiginit(self, _AuroraStateWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _AuroraStateWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _AuroraStateWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _AuroraStateWrapper:
_AuroraStateWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_Time

    def __init__(self, *args):
        _AuroraStateWrapper.Time_swiginit(self, _AuroraStateWrapper.new_Time(*args))

    def __eq__(self, x):
        return _AuroraStateWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _AuroraStateWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _AuroraStateWrapper.Time_nanosec(self, *args)

# Register Time in _AuroraStateWrapper:
_AuroraStateWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _AuroraStateWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AuroraStateWrapper.TimePubSubType_swiginit(self, _AuroraStateWrapper.new_TimePubSubType())
    __swig_destroy__ = _AuroraStateWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _AuroraStateWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AuroraStateWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AuroraStateWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AuroraStateWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AuroraStateWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _AuroraStateWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AuroraStateWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AuroraStateWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AuroraStateWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AuroraStateWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _AuroraStateWrapper:
_AuroraStateWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete__HeaderSeq

# Register _HeaderSeq in _AuroraStateWrapper:
_AuroraStateWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _AuroraStateWrapper.HeaderSeq_swiginit(self, _AuroraStateWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _AuroraStateWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _AuroraStateWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _AuroraStateWrapper:
_AuroraStateWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_Header

    def __init__(self, *args):
        _AuroraStateWrapper.Header_swiginit(self, _AuroraStateWrapper.new_Header(*args))

    def __eq__(self, x):
        return _AuroraStateWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _AuroraStateWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _AuroraStateWrapper.Header_frame_id(self, *args)

# Register Header in _AuroraStateWrapper:
_AuroraStateWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AuroraStateWrapper.HeaderPubSubType_swiginit(self, _AuroraStateWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _AuroraStateWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _AuroraStateWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AuroraStateWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AuroraStateWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AuroraStateWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _AuroraStateWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _AuroraStateWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AuroraStateWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AuroraStateWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AuroraStateWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AuroraStateWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _AuroraStateWrapper:
_AuroraStateWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _AuroraStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete__AuroraStateSeq

# Register _AuroraStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper._AuroraStateSeq_swigregister(_AuroraStateSeq)

class AuroraStateSeq(_AuroraStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_AuroraStateSeq

    def __init__(self, *args):
        _AuroraStateWrapper.AuroraStateSeq_swiginit(self, _AuroraStateWrapper.new_AuroraStateSeq(*args))

    def __len__(self):
        return _AuroraStateWrapper.AuroraStateSeq___len__(self)

    def __getitem__(self, i):
        return _AuroraStateWrapper.AuroraStateSeq___getitem__(self, i)

# Register AuroraStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper.AuroraStateSeq_swigregister(AuroraStateSeq)

class _RobotStandPoseStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete__RobotStandPoseStateSeq

# Register _RobotStandPoseStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper._RobotStandPoseStateSeq_swigregister(_RobotStandPoseStateSeq)

class RobotStandPoseStateSeq(_RobotStandPoseStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_RobotStandPoseStateSeq

    def __init__(self, *args):
        _AuroraStateWrapper.RobotStandPoseStateSeq_swiginit(self, _AuroraStateWrapper.new_RobotStandPoseStateSeq(*args))

    def __len__(self):
        return _AuroraStateWrapper.RobotStandPoseStateSeq___len__(self)

    def __getitem__(self, i):
        return _AuroraStateWrapper.RobotStandPoseStateSeq___getitem__(self, i)

# Register RobotStandPoseStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper.RobotStandPoseStateSeq_swigregister(RobotStandPoseStateSeq)

class _VelocityStateSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete__VelocityStateSeq

# Register _VelocityStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper._VelocityStateSeq_swigregister(_VelocityStateSeq)

class VelocityStateSeq(_VelocityStateSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_VelocityStateSeq

    def __init__(self, *args):
        _AuroraStateWrapper.VelocityStateSeq_swiginit(self, _AuroraStateWrapper.new_VelocityStateSeq(*args))

    def __len__(self):
        return _AuroraStateWrapper.VelocityStateSeq___len__(self)

    def __getitem__(self, i):
        return _AuroraStateWrapper.VelocityStateSeq___getitem__(self, i)

# Register VelocityStateSeq in _AuroraStateWrapper:
_AuroraStateWrapper.VelocityStateSeq_swigregister(VelocityStateSeq)

class AuroraState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_AuroraState

    def __init__(self, *args):
        _AuroraStateWrapper.AuroraState_swiginit(self, _AuroraStateWrapper.new_AuroraState(*args))

    def __eq__(self, x):
        return _AuroraStateWrapper.AuroraState___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.AuroraState___ne__(self, x)

    def header(self, *args):
        return _AuroraStateWrapper.AuroraState_header(self, *args)

    def velocity_command_source(self, *args):
        return _AuroraStateWrapper.AuroraState_velocity_command_source(self, *args)

    def whole_body_fsm_state(self, *args):
        return _AuroraStateWrapper.AuroraState_whole_body_fsm_state(self, *args)

    def upper_body_fsm_state(self, *args):
        return _AuroraStateWrapper.AuroraState_upper_body_fsm_state(self, *args)

    def allow_upper_body_override(self, *args):
        return _AuroraStateWrapper.AuroraState_allow_upper_body_override(self, *args)

# Register AuroraState in _AuroraStateWrapper:
_AuroraStateWrapper.AuroraState_swigregister(AuroraState)

class RobotStandPoseState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_RobotStandPoseState

    def __init__(self, *args):
        _AuroraStateWrapper.RobotStandPoseState_swiginit(self, _AuroraStateWrapper.new_RobotStandPoseState(*args))

    def __eq__(self, x):
        return _AuroraStateWrapper.RobotStandPoseState___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.RobotStandPoseState___ne__(self, x)

    def header(self, *args):
        return _AuroraStateWrapper.RobotStandPoseState_header(self, *args)

    def delta_z(self, *args):
        return _AuroraStateWrapper.RobotStandPoseState_delta_z(self, *args)

    def delta_pitch(self, *args):
        return _AuroraStateWrapper.RobotStandPoseState_delta_pitch(self, *args)

    def delta_yaw(self, *args):
        return _AuroraStateWrapper.RobotStandPoseState_delta_yaw(self, *args)

    def stable_level(self, *args):
        return _AuroraStateWrapper.RobotStandPoseState_stable_level(self, *args)

# Register RobotStandPoseState in _AuroraStateWrapper:
_AuroraStateWrapper.RobotStandPoseState_swigregister(RobotStandPoseState)

class VelocityState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _AuroraStateWrapper.delete_VelocityState

    def __init__(self, *args):
        _AuroraStateWrapper.VelocityState_swiginit(self, _AuroraStateWrapper.new_VelocityState(*args))

    def __eq__(self, x):
        return _AuroraStateWrapper.VelocityState___eq__(self, x)

    def __ne__(self, x):
        return _AuroraStateWrapper.VelocityState___ne__(self, x)

    def header(self, *args):
        return _AuroraStateWrapper.VelocityState_header(self, *args)

    def vx(self, *args):
        return _AuroraStateWrapper.VelocityState_vx(self, *args)

    def vy(self, *args):
        return _AuroraStateWrapper.VelocityState_vy(self, *args)

    def yaw(self, *args):
        return _AuroraStateWrapper.VelocityState_yaw(self, *args)

    def stable_level(self, *args):
        return _AuroraStateWrapper.VelocityState_stable_level(self, *args)

# Register VelocityState in _AuroraStateWrapper:
_AuroraStateWrapper.VelocityState_swigregister(VelocityState)

class AuroraStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AuroraStateWrapper.AuroraStatePubSubType_swiginit(self, _AuroraStateWrapper.new_AuroraStatePubSubType())
    __swig_destroy__ = _AuroraStateWrapper.delete_AuroraStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _AuroraStateWrapper.AuroraStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AuroraStateWrapper.AuroraStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AuroraStateWrapper.AuroraStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AuroraStateWrapper.AuroraStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AuroraStateWrapper.AuroraStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _AuroraStateWrapper.AuroraStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AuroraStateWrapper.AuroraStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AuroraStateWrapper.AuroraStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AuroraStateWrapper.AuroraStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AuroraStateWrapper.AuroraStatePubSubType_construct_sample(self, memory)

# Register AuroraStatePubSubType in _AuroraStateWrapper:
_AuroraStateWrapper.AuroraStatePubSubType_swigregister(AuroraStatePubSubType)

class RobotStandPoseStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AuroraStateWrapper.RobotStandPoseStatePubSubType_swiginit(self, _AuroraStateWrapper.new_RobotStandPoseStatePubSubType())
    __swig_destroy__ = _AuroraStateWrapper.delete_RobotStandPoseStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AuroraStateWrapper.RobotStandPoseStatePubSubType_construct_sample(self, memory)

# Register RobotStandPoseStatePubSubType in _AuroraStateWrapper:
_AuroraStateWrapper.RobotStandPoseStatePubSubType_swigregister(RobotStandPoseStatePubSubType)

class VelocityStatePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _AuroraStateWrapper.VelocityStatePubSubType_swiginit(self, _AuroraStateWrapper.new_VelocityStatePubSubType())
    __swig_destroy__ = _AuroraStateWrapper.delete_VelocityStatePubSubType

    def serialize(self, data, payload, data_representation):
        return _AuroraStateWrapper.VelocityStatePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _AuroraStateWrapper.VelocityStatePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _AuroraStateWrapper.VelocityStatePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _AuroraStateWrapper.VelocityStatePubSubType_compute_key(self, *args)

    def create_data(self):
        return _AuroraStateWrapper.VelocityStatePubSubType_create_data(self)

    def delete_data(self, data):
        return _AuroraStateWrapper.VelocityStatePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _AuroraStateWrapper.VelocityStatePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _AuroraStateWrapper.VelocityStatePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _AuroraStateWrapper.VelocityStatePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _AuroraStateWrapper.VelocityStatePubSubType_construct_sample(self, memory)

# Register VelocityStatePubSubType in _AuroraStateWrapper:
_AuroraStateWrapper.VelocityStatePubSubType_swigregister(VelocityStatePubSubType)




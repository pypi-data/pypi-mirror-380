# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('LedActionCmd.dll')
if __package__ or '.' in __name__:
    from . import _LedActionCmdWrapper
else:
    import _LedActionCmdWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_SwigPyIterator

    def value(self):
        return _LedActionCmdWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LedActionCmdWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LedActionCmdWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LedActionCmdWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LedActionCmdWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LedActionCmdWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _LedActionCmdWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _LedActionCmdWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _LedActionCmdWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LedActionCmdWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LedActionCmdWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LedActionCmdWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LedActionCmdWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LedActionCmdWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LedActionCmdWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LedActionCmdWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LedActionCmdWrapper:
_LedActionCmdWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _LedActionCmdWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _LedActionCmdWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _LedActionCmdWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _LedActionCmdWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _LedActionCmdWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _LedActionCmdWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _LedActionCmdWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _LedActionCmdWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _TimeSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete__TimeSeq

# Register _TimeSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper._TimeSeq_swigregister(_TimeSeq)

class TimeSeq(_TimeSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_TimeSeq

    def __init__(self, *args):
        _LedActionCmdWrapper.TimeSeq_swiginit(self, _LedActionCmdWrapper.new_TimeSeq(*args))

    def __len__(self):
        return _LedActionCmdWrapper.TimeSeq___len__(self)

    def __getitem__(self, i):
        return _LedActionCmdWrapper.TimeSeq___getitem__(self, i)

# Register TimeSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper.TimeSeq_swigregister(TimeSeq)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_Time

    def __init__(self, *args):
        _LedActionCmdWrapper.Time_swiginit(self, _LedActionCmdWrapper.new_Time(*args))

    def __eq__(self, x):
        return _LedActionCmdWrapper.Time___eq__(self, x)

    def __ne__(self, x):
        return _LedActionCmdWrapper.Time___ne__(self, x)

    def sec(self, *args):
        return _LedActionCmdWrapper.Time_sec(self, *args)

    def nanosec(self, *args):
        return _LedActionCmdWrapper.Time_nanosec(self, *args)

# Register Time in _LedActionCmdWrapper:
_LedActionCmdWrapper.Time_swigregister(Time)

FASTDDS_GEN_API_VER = _LedActionCmdWrapper.FASTDDS_GEN_API_VER
class TimePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LedActionCmdWrapper.TimePubSubType_swiginit(self, _LedActionCmdWrapper.new_TimePubSubType())
    __swig_destroy__ = _LedActionCmdWrapper.delete_TimePubSubType

    def serialize(self, data, payload, data_representation):
        return _LedActionCmdWrapper.TimePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LedActionCmdWrapper.TimePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LedActionCmdWrapper.TimePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LedActionCmdWrapper.TimePubSubType_compute_key(self, *args)

    def create_data(self):
        return _LedActionCmdWrapper.TimePubSubType_create_data(self)

    def delete_data(self, data):
        return _LedActionCmdWrapper.TimePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LedActionCmdWrapper.TimePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LedActionCmdWrapper.TimePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LedActionCmdWrapper.TimePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LedActionCmdWrapper.TimePubSubType_construct_sample(self, memory)

# Register TimePubSubType in _LedActionCmdWrapper:
_LedActionCmdWrapper.TimePubSubType_swigregister(TimePubSubType)

class _HeaderSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete__HeaderSeq

# Register _HeaderSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper._HeaderSeq_swigregister(_HeaderSeq)

class HeaderSeq(_HeaderSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_HeaderSeq

    def __init__(self, *args):
        _LedActionCmdWrapper.HeaderSeq_swiginit(self, _LedActionCmdWrapper.new_HeaderSeq(*args))

    def __len__(self):
        return _LedActionCmdWrapper.HeaderSeq___len__(self)

    def __getitem__(self, i):
        return _LedActionCmdWrapper.HeaderSeq___getitem__(self, i)

# Register HeaderSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper.HeaderSeq_swigregister(HeaderSeq)

class Header(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_Header

    def __init__(self, *args):
        _LedActionCmdWrapper.Header_swiginit(self, _LedActionCmdWrapper.new_Header(*args))

    def __eq__(self, x):
        return _LedActionCmdWrapper.Header___eq__(self, x)

    def __ne__(self, x):
        return _LedActionCmdWrapper.Header___ne__(self, x)

    def stamp(self, *args):
        return _LedActionCmdWrapper.Header_stamp(self, *args)

    def frame_id(self, *args):
        return _LedActionCmdWrapper.Header_frame_id(self, *args)

# Register Header in _LedActionCmdWrapper:
_LedActionCmdWrapper.Header_swigregister(Header)

class HeaderPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LedActionCmdWrapper.HeaderPubSubType_swiginit(self, _LedActionCmdWrapper.new_HeaderPubSubType())
    __swig_destroy__ = _LedActionCmdWrapper.delete_HeaderPubSubType

    def serialize(self, data, payload, data_representation):
        return _LedActionCmdWrapper.HeaderPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LedActionCmdWrapper.HeaderPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LedActionCmdWrapper.HeaderPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LedActionCmdWrapper.HeaderPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LedActionCmdWrapper.HeaderPubSubType_create_data(self)

    def delete_data(self, data):
        return _LedActionCmdWrapper.HeaderPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LedActionCmdWrapper.HeaderPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LedActionCmdWrapper.HeaderPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LedActionCmdWrapper.HeaderPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LedActionCmdWrapper.HeaderPubSubType_construct_sample(self, memory)

# Register HeaderPubSubType in _LedActionCmdWrapper:
_LedActionCmdWrapper.HeaderPubSubType_swigregister(HeaderPubSubType)

class _LedSettingsSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete__LedSettingsSeq

# Register _LedSettingsSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper._LedSettingsSeq_swigregister(_LedSettingsSeq)

class LedSettingsSeq(_LedSettingsSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedSettingsSeq

    def __init__(self, *args):
        _LedActionCmdWrapper.LedSettingsSeq_swiginit(self, _LedActionCmdWrapper.new_LedSettingsSeq(*args))

    def __len__(self):
        return _LedActionCmdWrapper.LedSettingsSeq___len__(self)

    def __getitem__(self, i):
        return _LedActionCmdWrapper.LedSettingsSeq___getitem__(self, i)

# Register LedSettingsSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedSettingsSeq_swigregister(LedSettingsSeq)

class LedSettings_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _LedActionCmdWrapper.LedSettings_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _LedActionCmdWrapper.LedSettings_vector___nonzero__(self)

    def __bool__(self):
        return _LedActionCmdWrapper.LedSettings_vector___bool__(self)

    def __len__(self):
        return _LedActionCmdWrapper.LedSettings_vector___len__(self)

    def __getslice__(self, i, j):
        return _LedActionCmdWrapper.LedSettings_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _LedActionCmdWrapper.LedSettings_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector___setitem__(self, *args)

    def pop(self):
        return _LedActionCmdWrapper.LedSettings_vector_pop(self)

    def append(self, x):
        return _LedActionCmdWrapper.LedSettings_vector_append(self, x)

    def empty(self):
        return _LedActionCmdWrapper.LedSettings_vector_empty(self)

    def size(self):
        return _LedActionCmdWrapper.LedSettings_vector_size(self)

    def swap(self, v):
        return _LedActionCmdWrapper.LedSettings_vector_swap(self, v)

    def begin(self):
        return _LedActionCmdWrapper.LedSettings_vector_begin(self)

    def end(self):
        return _LedActionCmdWrapper.LedSettings_vector_end(self)

    def rbegin(self):
        return _LedActionCmdWrapper.LedSettings_vector_rbegin(self)

    def rend(self):
        return _LedActionCmdWrapper.LedSettings_vector_rend(self)

    def clear(self):
        return _LedActionCmdWrapper.LedSettings_vector_clear(self)

    def get_allocator(self):
        return _LedActionCmdWrapper.LedSettings_vector_get_allocator(self)

    def pop_back(self):
        return _LedActionCmdWrapper.LedSettings_vector_pop_back(self)

    def erase(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector_erase(self, *args)

    def __init__(self, *args):
        _LedActionCmdWrapper.LedSettings_vector_swiginit(self, _LedActionCmdWrapper.new_LedSettings_vector(*args))

    def push_back(self, x):
        return _LedActionCmdWrapper.LedSettings_vector_push_back(self, x)

    def front(self):
        return _LedActionCmdWrapper.LedSettings_vector_front(self)

    def back(self):
        return _LedActionCmdWrapper.LedSettings_vector_back(self)

    def assign(self, n, x):
        return _LedActionCmdWrapper.LedSettings_vector_assign(self, n, x)

    def resize(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector_resize(self, *args)

    def insert(self, *args):
        return _LedActionCmdWrapper.LedSettings_vector_insert(self, *args)

    def reserve(self, n):
        return _LedActionCmdWrapper.LedSettings_vector_reserve(self, n)

    def capacity(self):
        return _LedActionCmdWrapper.LedSettings_vector_capacity(self)
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedSettings_vector

# Register LedSettings_vector in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedSettings_vector_swigregister(LedSettings_vector)

class _LedActionCmdSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete__LedActionCmdSeq

# Register _LedActionCmdSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper._LedActionCmdSeq_swigregister(_LedActionCmdSeq)

class LedActionCmdSeq(_LedActionCmdSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedActionCmdSeq

    def __init__(self, *args):
        _LedActionCmdWrapper.LedActionCmdSeq_swiginit(self, _LedActionCmdWrapper.new_LedActionCmdSeq(*args))

    def __len__(self):
        return _LedActionCmdWrapper.LedActionCmdSeq___len__(self)

    def __getitem__(self, i):
        return _LedActionCmdWrapper.LedActionCmdSeq___getitem__(self, i)

# Register LedActionCmdSeq in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedActionCmdSeq_swigregister(LedActionCmdSeq)

class LedSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedSettings

    def __init__(self, *args):
        _LedActionCmdWrapper.LedSettings_swiginit(self, _LedActionCmdWrapper.new_LedSettings(*args))

    def __eq__(self, x):
        return _LedActionCmdWrapper.LedSettings___eq__(self, x)

    def __ne__(self, x):
        return _LedActionCmdWrapper.LedSettings___ne__(self, x)

    def r(self, *args):
        return _LedActionCmdWrapper.LedSettings_r(self, *args)

    def g(self, *args):
        return _LedActionCmdWrapper.LedSettings_g(self, *args)

    def b(self, *args):
        return _LedActionCmdWrapper.LedSettings_b(self, *args)

    def brightness(self, *args):
        return _LedActionCmdWrapper.LedSettings_brightness(self, *args)

# Register LedSettings in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedSettings_swigregister(LedSettings)

class LedActionCmd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedActionCmd

    def __init__(self, *args):
        _LedActionCmdWrapper.LedActionCmd_swiginit(self, _LedActionCmdWrapper.new_LedActionCmd(*args))

    def __eq__(self, x):
        return _LedActionCmdWrapper.LedActionCmd___eq__(self, x)

    def __ne__(self, x):
        return _LedActionCmdWrapper.LedActionCmd___ne__(self, x)

    def header(self, *args):
        return _LedActionCmdWrapper.LedActionCmd_header(self, *args)

    def action(self, *args):
        return _LedActionCmdWrapper.LedActionCmd_action(self, *args)

    def leds(self, *args):
        return _LedActionCmdWrapper.LedActionCmd_leds(self, *args)

# Register LedActionCmd in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedActionCmd_swigregister(LedActionCmd)

class LedSettingsPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LedActionCmdWrapper.LedSettingsPubSubType_swiginit(self, _LedActionCmdWrapper.new_LedSettingsPubSubType())
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedSettingsPubSubType

    def serialize(self, data, payload, data_representation):
        return _LedActionCmdWrapper.LedSettingsPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LedActionCmdWrapper.LedSettingsPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LedActionCmdWrapper.LedSettingsPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LedActionCmdWrapper.LedSettingsPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LedActionCmdWrapper.LedSettingsPubSubType_create_data(self)

    def delete_data(self, data):
        return _LedActionCmdWrapper.LedSettingsPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LedActionCmdWrapper.LedSettingsPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LedActionCmdWrapper.LedSettingsPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LedActionCmdWrapper.LedSettingsPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LedActionCmdWrapper.LedSettingsPubSubType_construct_sample(self, memory)

# Register LedSettingsPubSubType in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedSettingsPubSubType_swigregister(LedSettingsPubSubType)

class LedActionCmdPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LedActionCmdWrapper.LedActionCmdPubSubType_swiginit(self, _LedActionCmdWrapper.new_LedActionCmdPubSubType())
    __swig_destroy__ = _LedActionCmdWrapper.delete_LedActionCmdPubSubType

    def serialize(self, data, payload, data_representation):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_create_data(self)

    def delete_data(self, data):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LedActionCmdWrapper.LedActionCmdPubSubType_construct_sample(self, memory)

# Register LedActionCmdPubSubType in _LedActionCmdWrapper:
_LedActionCmdWrapper.LedActionCmdPubSubType_swigregister(LedActionCmdPubSubType)




name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  workflow_call:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --extra test --extra stac
    
    - name: Install package in development mode
      run: |
        uv pip install -e .
    
    - name: Run flake8
      run: |
        uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,build,dist,*.egg-info,.git,.pytest_cache,__pycache__
        uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=.venv,build,dist,*.egg-info,.git,.pytest_cache,__pycache__
    
    - name: Run tests with pytest
      run: |
        uv run pytest --cov=xopr --cov-report=html --cov-report=xml --cov-report=term
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.13'
      with:
        name: coverage-report
        path: ./htmlcov

    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request_target'
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERAGE_DATA_BRANCH: main

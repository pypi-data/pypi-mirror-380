'''
## Aliyun ROS ESA Construct Library

This module is part of the AliCloud ROS Cloud Development Kit (ROS CDK) project.

```python
import * as ESA from '@alicloud/ros-cdk-esa';
```
'''
import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

from typeguard import check_type

from ._jsii import *

import ros_cdk_core as _ros_cdk_core_7adfd82f


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.CertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "created_type": "createdType",
        "domains": "domains",
        "site_id": "siteId",
        "cas_id": "casId",
        "cert_id": "certId",
        "certificate": "certificate",
        "cert_name": "certName",
        "private_key": "privateKey",
    },
)
class CertificateProps:
    def __init__(
        self,
        *,
        created_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        domains: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        cas_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        cert_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        certificate: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``Certificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-certificate

        :param created_type: Property createdType: The certificate type. - cas (Certificate Center Certificate) - upload (custom upload certificate) - free( Free certificate).
        :param domains: Property domains: A list of domain names. Multiple domain names are separated by commas.
        :param site_id: Property siteId: The site ID, which can be obtained by calling the ListSites interface.
        :param cas_id: Property casId: Cloud certificate ID.
        :param cert_id: Property certId: The certificate Id.
        :param certificate: Property certificate: Certificate content.
        :param cert_name: Property certName: The certificate name.
        :param private_key: Property privateKey: The certificate private key.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c2c60f90dc93a218be123750b1911f94d2dc6dc648c4ef9d62fbab2d61a6124)
            check_type(argname="argument created_type", value=created_type, expected_type=type_hints["created_type"])
            check_type(argname="argument domains", value=domains, expected_type=type_hints["domains"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument cas_id", value=cas_id, expected_type=type_hints["cas_id"])
            check_type(argname="argument cert_id", value=cert_id, expected_type=type_hints["cert_id"])
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument cert_name", value=cert_name, expected_type=type_hints["cert_name"])
            check_type(argname="argument private_key", value=private_key, expected_type=type_hints["private_key"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "created_type": created_type,
            "domains": domains,
            "site_id": site_id,
        }
        if cas_id is not None:
            self._values["cas_id"] = cas_id
        if cert_id is not None:
            self._values["cert_id"] = cert_id
        if certificate is not None:
            self._values["certificate"] = certificate
        if cert_name is not None:
            self._values["cert_name"] = cert_name
        if private_key is not None:
            self._values["private_key"] = private_key

    @builtins.property
    def created_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property createdType: The certificate type.

        - cas (Certificate Center Certificate)
        - upload (custom upload certificate)
        - free( Free certificate).
        '''
        result = self._values.get("created_type")
        assert result is not None, "Required property 'created_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def domains(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]:
        '''Property domains: A list of domain names.

        Multiple domain names are separated by commas.
        '''
        result = self._values.get("domains")
        assert result is not None, "Required property 'domains' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID, which can be obtained by calling the ListSites interface.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def cas_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property casId: Cloud certificate ID.'''
        result = self._values.get("cas_id")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def cert_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property certId: The certificate Id.'''
        result = self._values.get("cert_id")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def certificate(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property certificate: Certificate content.'''
        result = self._values.get("certificate")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property certName: The certificate name.'''
        result = self._values.get("cert_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def private_key(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property privateKey: The certificate private key.'''
        result = self._values.get("private_key")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.ClientCaCertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "certificate": "certificate",
        "site_id": "siteId",
        "client_ca_cert_name": "clientCaCertName",
    },
)
class ClientCaCertificateProps:
    def __init__(
        self,
        *,
        certificate: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        client_ca_cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``ClientCaCertificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcacertificate

        :param certificate: Property certificate: Certificate content.
        :param site_id: Property siteId: Site Id.
        :param client_ca_cert_name: Property clientCaCertName: The certificate name.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe0083b8551d95cfdae4ee1bf1dfbc22f12140664649e80abc3272c1f601baaf)
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument client_ca_cert_name", value=client_ca_cert_name, expected_type=type_hints["client_ca_cert_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "certificate": certificate,
            "site_id": site_id,
        }
        if client_ca_cert_name is not None:
            self._values["client_ca_cert_name"] = client_ca_cert_name

    @builtins.property
    def certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property certificate: Certificate content.'''
        result = self._values.get("certificate")
        assert result is not None, "Required property 'certificate' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: Site Id.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def client_ca_cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property clientCaCertName: The certificate name.'''
        result = self._values.get("client_ca_cert_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ClientCaCertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.ClientCertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "validity_days": "validityDays",
        "csr": "csr",
        "pkey_type": "pkeyType",
    },
)
class ClientCertificateProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        validity_days: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        csr: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        pkey_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``ClientCertificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcertificate

        :param site_id: Property siteId: Site Id.
        :param validity_days: Property validityDays: Certificate validity period.
        :param csr: Property csr: Certificate signing request content.
        :param pkey_type: Property pkeyType: The private key algorithm type.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb13bfd3c7af416c1e19dae153159fc1509f6e6e3131a8d9f40dcaf72e0f8268)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument validity_days", value=validity_days, expected_type=type_hints["validity_days"])
            check_type(argname="argument csr", value=csr, expected_type=type_hints["csr"])
            check_type(argname="argument pkey_type", value=pkey_type, expected_type=type_hints["pkey_type"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
            "validity_days": validity_days,
        }
        if csr is not None:
            self._values["csr"] = csr
        if pkey_type is not None:
            self._values["pkey_type"] = pkey_type

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: Site Id.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def validity_days(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property validityDays: Certificate validity period.'''
        result = self._values.get("validity_days")
        assert result is not None, "Required property 'validity_days' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def csr(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property csr: Certificate signing request content.'''
        result = self._values.get("csr")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def pkey_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property pkeyType: The private key algorithm type.'''
        result = self._values.get("pkey_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ClientCertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.CompressionRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "brotli": "brotli",
        "gzip": "gzip",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
        "zstd": "zstd",
    },
)
class CompressionRuleProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        brotli: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        gzip: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        zstd: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``CompressionRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-compressionrule

        :param site_id: Property siteId: The site ID, which can be obtained by calling the ListSites API.
        :param brotli: Property brotli: Brotli compression. Value range: on: Enable. off: Disable.
        :param gzip: Property gzip: Gzip compression. Value range: on: Enable. off: Disable.
        :param payment_type: Property paymentType: Payment Type.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: on: Enable. off: Disable.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        :param zstd: Property zstd: Zstd compression. Value range: on: Enable. off: Disable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7469a8d498f38fe8ecb82807d4065ffa56ec5fd19c523c68e1cd42392e4c4ba)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument brotli", value=brotli, expected_type=type_hints["brotli"])
            check_type(argname="argument gzip", value=gzip, expected_type=type_hints["gzip"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
            check_type(argname="argument zstd", value=zstd, expected_type=type_hints["zstd"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if brotli is not None:
            self._values["brotli"] = brotli
        if gzip is not None:
            self._values["gzip"] = gzip
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version
        if zstd is not None:
            self._values["zstd"] = zstd

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID, which can be obtained by calling the ListSites API.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def brotli(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property brotli: Brotli compression.

        Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("brotli")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def gzip(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property gzip: Gzip compression.

        Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("gzip")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property paymentType: Payment Type.'''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def zstd(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property zstd: Zstd compression.

        Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("zstd")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CompressionRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.CustomScenePolicyProps",
    jsii_struct_bases=[],
    name_mapping={
        "create_time": "createTime",
        "custom_scene_policy_name": "customScenePolicyName",
        "end_time": "endTime",
        "objects": "objects",
        "template": "template",
    },
)
class CustomScenePolicyProps:
    def __init__(
        self,
        *,
        create_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        custom_scene_policy_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        end_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        objects: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        template: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        '''Properties for defining a ``CustomScenePolicy``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-customscenepolicy

        :param create_time: Property createTime: The time when the policy takes effect. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        :param custom_scene_policy_name: Property customScenePolicyName: The policy name.
        :param end_time: Property endTime: The time when the policy expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        :param objects: Property objects: The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).
        :param template: Property template: The name of the policy template. Valid value: promotion: major events.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8c6c5c452855ef2e3b66094db79f3bf9579cfbdf7443bb118e842f95e1bcc58)
            check_type(argname="argument create_time", value=create_time, expected_type=type_hints["create_time"])
            check_type(argname="argument custom_scene_policy_name", value=custom_scene_policy_name, expected_type=type_hints["custom_scene_policy_name"])
            check_type(argname="argument end_time", value=end_time, expected_type=type_hints["end_time"])
            check_type(argname="argument objects", value=objects, expected_type=type_hints["objects"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "create_time": create_time,
            "custom_scene_policy_name": custom_scene_policy_name,
            "end_time": end_time,
            "objects": objects,
            "template": template,
        }

    @builtins.property
    def create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property createTime: The time when the policy takes effect.

        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        result = self._values.get("create_time")
        assert result is not None, "Required property 'create_time' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property customScenePolicyName: The policy name.'''
        result = self._values.get("custom_scene_policy_name")
        assert result is not None, "Required property 'custom_scene_policy_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property endTime: The time when the policy expires.

        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        result = self._values.get("end_time")
        assert result is not None, "Required property 'end_time' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def objects(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property objects: The IDs of the websites that you want to associate with the policy.

        Separate multiple IDs with commas (,).
        '''
        result = self._values.get("objects")
        assert result is not None, "Required property 'objects' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property template: The name of the policy template.

        Valid value:
        promotion: major events.
        '''
        result = self._values.get("template")
        assert result is not None, "Required property 'template' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "CustomScenePolicyProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.EdgeContainerAppProps",
    jsii_struct_bases=[],
    name_mapping={
        "edge_container_app_name": "edgeContainerAppName",
        "service_port": "servicePort",
        "target_port": "targetPort",
        "health_check_fail_times": "healthCheckFailTimes",
        "health_check_host": "healthCheckHost",
        "health_check_http_code": "healthCheckHttpCode",
        "health_check_interval": "healthCheckInterval",
        "health_check_method": "healthCheckMethod",
        "health_check_port": "healthCheckPort",
        "health_check_succ_times": "healthCheckSuccTimes",
        "health_check_timeout": "healthCheckTimeout",
        "health_check_type": "healthCheckType",
        "health_check_uri": "healthCheckUri",
        "remarks": "remarks",
    },
)
class EdgeContainerAppProps:
    def __init__(
        self,
        *,
        edge_container_app_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        service_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        target_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        health_check_fail_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_http_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_interval: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_method: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_succ_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_uri: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        remarks: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``EdgeContainerApp``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapp

        :param edge_container_app_name: Property edgeContainerAppName: The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        :param service_port: Property servicePort: The server port. Valid values: 1 to 65535.
        :param target_port: Property targetPort: The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        :param health_check_fail_times: Property healthCheckFailTimes: The number of consecutive failed health checks required for an application to be considered as unhealthy. Valid values: 1 to 10. Default value: 5.
        :param health_check_host: Property healthCheckHost: The domain name that is used for health checks. This parameter is empty by default.
        :param health_check_http_code: Property healthCheckHttpCode: The HTTP status code returned for a successful health check. Valid values: http_2xx (default)http_3xx
        :param health_check_interval: Property healthCheckInterval: The interval between two consecutive health checks. Unit: seconds. Valid values: 1 to 50. Default value: 5.
        :param health_check_method: Property healthCheckMethod: The HTTP request method for health checks. Valid values: HEAD (default): requests the headers of the resource. GET: requests the specified resource and returns both the headers and entity body.
        :param health_check_port: Property healthCheckPort: The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        :param health_check_succ_times: Property healthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        :param health_check_timeout: Property healthCheckTimeout: The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds. Valid values: 1 to 100. Default value: 3.
        :param health_check_type: Property healthCheckType: The health check type. By default, this parameter is left empty. Valid values: l4: Layer 4 health check. l7: Layer 7 health check.
        :param health_check_uri: Property healthCheckUri: The URI used for health checks. The URI must be 1 to 80 characters in length. Default value: "/".
        :param remarks: Property remarks: The remarks. This parameter is empty by default.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a41d5c123c40c0e85ed9d894b67938789439a6b9493097b4c1a0c4ae52e832b)
            check_type(argname="argument edge_container_app_name", value=edge_container_app_name, expected_type=type_hints["edge_container_app_name"])
            check_type(argname="argument service_port", value=service_port, expected_type=type_hints["service_port"])
            check_type(argname="argument target_port", value=target_port, expected_type=type_hints["target_port"])
            check_type(argname="argument health_check_fail_times", value=health_check_fail_times, expected_type=type_hints["health_check_fail_times"])
            check_type(argname="argument health_check_host", value=health_check_host, expected_type=type_hints["health_check_host"])
            check_type(argname="argument health_check_http_code", value=health_check_http_code, expected_type=type_hints["health_check_http_code"])
            check_type(argname="argument health_check_interval", value=health_check_interval, expected_type=type_hints["health_check_interval"])
            check_type(argname="argument health_check_method", value=health_check_method, expected_type=type_hints["health_check_method"])
            check_type(argname="argument health_check_port", value=health_check_port, expected_type=type_hints["health_check_port"])
            check_type(argname="argument health_check_succ_times", value=health_check_succ_times, expected_type=type_hints["health_check_succ_times"])
            check_type(argname="argument health_check_timeout", value=health_check_timeout, expected_type=type_hints["health_check_timeout"])
            check_type(argname="argument health_check_type", value=health_check_type, expected_type=type_hints["health_check_type"])
            check_type(argname="argument health_check_uri", value=health_check_uri, expected_type=type_hints["health_check_uri"])
            check_type(argname="argument remarks", value=remarks, expected_type=type_hints["remarks"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "edge_container_app_name": edge_container_app_name,
            "service_port": service_port,
            "target_port": target_port,
        }
        if health_check_fail_times is not None:
            self._values["health_check_fail_times"] = health_check_fail_times
        if health_check_host is not None:
            self._values["health_check_host"] = health_check_host
        if health_check_http_code is not None:
            self._values["health_check_http_code"] = health_check_http_code
        if health_check_interval is not None:
            self._values["health_check_interval"] = health_check_interval
        if health_check_method is not None:
            self._values["health_check_method"] = health_check_method
        if health_check_port is not None:
            self._values["health_check_port"] = health_check_port
        if health_check_succ_times is not None:
            self._values["health_check_succ_times"] = health_check_succ_times
        if health_check_timeout is not None:
            self._values["health_check_timeout"] = health_check_timeout
        if health_check_type is not None:
            self._values["health_check_type"] = health_check_type
        if health_check_uri is not None:
            self._values["health_check_uri"] = health_check_uri
        if remarks is not None:
            self._values["remarks"] = remarks

    @builtins.property
    def edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property edgeContainerAppName: The name of the application.

        The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        '''
        result = self._values.get("edge_container_app_name")
        assert result is not None, "Required property 'edge_container_app_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def service_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property servicePort: The server port.

        Valid values: 1 to 65535.
        '''
        result = self._values.get("service_port")
        assert result is not None, "Required property 'service_port' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def target_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property targetPort: The backend port, which is also the service port of the application.

        Valid values: 1 to 65535.
        '''
        result = self._values.get("target_port")
        assert result is not None, "Required property 'target_port' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def health_check_fail_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckFailTimes: The number of consecutive failed health checks required for an application to be considered as unhealthy.

        Valid values: 1 to 10. Default value: 5.
        '''
        result = self._values.get("health_check_fail_times")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckHost: The domain name that is used for health checks.

        This parameter is empty by default.
        '''
        result = self._values.get("health_check_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_http_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckHttpCode: The HTTP status code returned for a successful health check.

        Valid values:
        http_2xx (default)http_3xx
        '''
        result = self._values.get("health_check_http_code")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_interval(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckInterval: The interval between two consecutive health checks.

        Unit: seconds. Valid values: 1 to 50. Default value: 5.
        '''
        result = self._values.get("health_check_interval")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_method(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckMethod: The HTTP request method for health checks.

        Valid values:
        HEAD (default): requests the headers of the resource.
        GET: requests the specified resource and returns both the headers and entity body.
        '''
        result = self._values.get("health_check_method")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckPort: The port used for health checks.

        Valid values: 1 to 65535. Default value: 80.
        '''
        result = self._values.get("health_check_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_succ_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy.

        Valid values: 1 to 10. Default value: 2.
        '''
        result = self._values.get("health_check_succ_times")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckTimeout: The timeout period of a health check response.

        If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds. Valid values: 1 to 100. Default value: 3.
        '''
        result = self._values.get("health_check_timeout")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckType: The health check type.

        By default, this parameter is left empty. Valid values:
        l4: Layer 4 health check.
        l7: Layer 7 health check.
        '''
        result = self._values.get("health_check_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_uri(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property healthCheckUri: The URI used for health checks.

        The URI must be 1 to 80 characters in length. Default value: "/".
        '''
        result = self._values.get("health_check_uri")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def remarks(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property remarks: The remarks.

        This parameter is empty by default.
        '''
        result = self._values.get("remarks")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "EdgeContainerAppProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.EdgeContainerAppRecordProps",
    jsii_struct_bases=[],
    name_mapping={"app_id": "appId", "record_name": "recordName", "site_id": "siteId"},
)
class EdgeContainerAppRecordProps:
    def __init__(
        self,
        *,
        app_id: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        record_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        '''Properties for defining a ``EdgeContainerAppRecord``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapprecord

        :param app_id: Property appId: The application ID.
        :param record_name: Property recordName: The associated domain name.
        :param site_id: Property siteId: The website ID.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eba66dcac6fa4c295a0908efb6f03fad079e190f4db79a9f3bae7aa388d06885)
            check_type(argname="argument app_id", value=app_id, expected_type=type_hints["app_id"])
            check_type(argname="argument record_name", value=record_name, expected_type=type_hints["record_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "app_id": app_id,
            "record_name": record_name,
            "site_id": site_id,
        }

    @builtins.property
    def app_id(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property appId: The application ID.'''
        result = self._values.get("app_id")
        assert result is not None, "Required property 'app_id' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property recordName: The associated domain name.'''
        result = self._values.get("record_name")
        assert result is not None, "Required property 'record_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The website ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "EdgeContainerAppRecordProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.HttpRequestHeaderModificationRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "request_header_modification": "requestHeaderModification",
        "site_id": "siteId",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class HttpRequestHeaderModificationRuleProps:
    def __init__(
        self,
        *,
        request_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty", typing.Dict[builtins.str, typing.Any]]]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``HttpRequestHeaderModificationRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httprequestheadermodificationrule

        :param request_header_modification: Property requestHeaderModification: The configurations of modifying request headers. You can add, delete, or modify a request header.
        :param site_id: Property siteId: The site ID.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: - on: open. - off: close.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfd948817919cb145e897b3362373767aa2e7c5e81cea630ac4181e805b64df1)
            check_type(argname="argument request_header_modification", value=request_header_modification, expected_type=type_hints["request_header_modification"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "request_header_modification": request_header_modification,
            "site_id": site_id,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def request_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty"]]]:
        '''Property requestHeaderModification: The configurations of modifying request headers.

        You can add, delete, or modify a request header.
        '''
        result = self._values.get("request_header_modification")
        assert result is not None, "Required property 'request_header_modification' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty"]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "HttpRequestHeaderModificationRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.HttpResponseHeaderModificationRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "response_header_modification": "responseHeaderModification",
        "site_id": "siteId",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class HttpResponseHeaderModificationRuleProps:
    def __init__(
        self,
        *,
        response_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty", typing.Dict[builtins.str, typing.Any]]]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``HttpResponseHeaderModificationRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpresponseheadermodificationrule

        :param response_header_modification: Property responseHeaderModification: Modify response headers, supporting add, delete, and modify operations.
        :param site_id: Property siteId: The site ID.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: - ``on``: open. - ``off``: close.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57ed15d204dd64cfcb17ea71ebc8cac8b80e89de5988b19f70364acf2dd723ec)
            check_type(argname="argument response_header_modification", value=response_header_modification, expected_type=type_hints["response_header_modification"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "response_header_modification": response_header_modification,
            "site_id": site_id,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def response_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty"]]]:
        '''Property responseHeaderModification: Modify response headers, supporting add, delete, and modify operations.'''
        result = self._values.get("response_header_modification")
        assert result is not None, "Required property 'response_header_modification' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty"]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "HttpResponseHeaderModificationRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.HttpsApplicationConfigurationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "alt_svc": "altSvc",
        "alt_svc_clear": "altSvcClear",
        "alt_svc_ma": "altSvcMa",
        "alt_svc_persist": "altSvcPersist",
        "hsts": "hsts",
        "hsts_include_subdomains": "hstsIncludeSubdomains",
        "hsts_max_age": "hstsMaxAge",
        "hsts_preload": "hstsPreload",
        "https_force": "httpsForce",
        "https_force_code": "httpsForceCode",
        "https_no_sni_deny": "httpsNoSniDeny",
        "https_sni_verify": "httpsSniVerify",
        "https_sni_whitelist": "httpsSniWhitelist",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class HttpsApplicationConfigurationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        alt_svc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_clear: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_ma: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_persist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_include_subdomains: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_max_age: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_preload: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_force: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_force_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_no_sni_deny: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_sni_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_sni_whitelist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``HttpsApplicationConfiguration``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsapplicationconfiguration

        :param site_id: Property siteId: The site ID, which can be obtained by calling the ListSites API.
        :param alt_svc: Property altSvc: Function switch, default off. Value range: on: Enabled. off: Disabled.
        :param alt_svc_clear: Property altSvcClear: Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range: on: Enabled. off: Disabled.
        :param alt_svc_ma: Property altSvcMa: The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
        :param alt_svc_persist: Property altSvcPersist: Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range: on: Enabled. off: Disabled.
        :param hsts: Property hsts: Whether to enable HSTS. It is disabled by default. Value range: on: Enabled. off: Disabled.
        :param hsts_include_subdomains: Property hstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default. Value range: on: Enabled. off: Disabled.
        :param hsts_max_age: Property hstsMaxAge: The expiration time of HSTS, in seconds.
        :param hsts_preload: Property hstsPreload: Whether to enable HSTS preloading. It is disabled by default. Value range: on: Enabled. off: Disabled.
        :param https_force: Property httpsForce: Whether to enable forced HTTPS. It is disabled by default. Value range: on: Enabled. off: Disabled.
        :param https_force_code: Property httpsForceCode: Forced HTTPS jump status code, value range: 301 302 307 308.
        :param https_no_sni_deny: Property httpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI. This parameter is disabled by default. Value range: on: Enabled. off: Disabled.
        :param https_sni_verify: Property httpsSniVerify: Whether to enable SNI verification. It is disabled by default. Value range: on: Enabled. off: Disabled.
        :param https_sni_whitelist: Property httpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.
        :param payment_type: Property paymentType: Payment Type.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: Match all incoming requests: value set to true Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: on: Enabled. off: Disabled.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faf03cbaeb9cec86b2c2b136848560d332147c7a26fee41626648a95907dde7f)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument alt_svc", value=alt_svc, expected_type=type_hints["alt_svc"])
            check_type(argname="argument alt_svc_clear", value=alt_svc_clear, expected_type=type_hints["alt_svc_clear"])
            check_type(argname="argument alt_svc_ma", value=alt_svc_ma, expected_type=type_hints["alt_svc_ma"])
            check_type(argname="argument alt_svc_persist", value=alt_svc_persist, expected_type=type_hints["alt_svc_persist"])
            check_type(argname="argument hsts", value=hsts, expected_type=type_hints["hsts"])
            check_type(argname="argument hsts_include_subdomains", value=hsts_include_subdomains, expected_type=type_hints["hsts_include_subdomains"])
            check_type(argname="argument hsts_max_age", value=hsts_max_age, expected_type=type_hints["hsts_max_age"])
            check_type(argname="argument hsts_preload", value=hsts_preload, expected_type=type_hints["hsts_preload"])
            check_type(argname="argument https_force", value=https_force, expected_type=type_hints["https_force"])
            check_type(argname="argument https_force_code", value=https_force_code, expected_type=type_hints["https_force_code"])
            check_type(argname="argument https_no_sni_deny", value=https_no_sni_deny, expected_type=type_hints["https_no_sni_deny"])
            check_type(argname="argument https_sni_verify", value=https_sni_verify, expected_type=type_hints["https_sni_verify"])
            check_type(argname="argument https_sni_whitelist", value=https_sni_whitelist, expected_type=type_hints["https_sni_whitelist"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if alt_svc is not None:
            self._values["alt_svc"] = alt_svc
        if alt_svc_clear is not None:
            self._values["alt_svc_clear"] = alt_svc_clear
        if alt_svc_ma is not None:
            self._values["alt_svc_ma"] = alt_svc_ma
        if alt_svc_persist is not None:
            self._values["alt_svc_persist"] = alt_svc_persist
        if hsts is not None:
            self._values["hsts"] = hsts
        if hsts_include_subdomains is not None:
            self._values["hsts_include_subdomains"] = hsts_include_subdomains
        if hsts_max_age is not None:
            self._values["hsts_max_age"] = hsts_max_age
        if hsts_preload is not None:
            self._values["hsts_preload"] = hsts_preload
        if https_force is not None:
            self._values["https_force"] = https_force
        if https_force_code is not None:
            self._values["https_force_code"] = https_force_code
        if https_no_sni_deny is not None:
            self._values["https_no_sni_deny"] = https_no_sni_deny
        if https_sni_verify is not None:
            self._values["https_sni_verify"] = https_sni_verify
        if https_sni_whitelist is not None:
            self._values["https_sni_whitelist"] = https_sni_whitelist
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID, which can be obtained by calling the ListSites API.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def alt_svc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property altSvc: Function switch, default off.

        Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_clear(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property altSvcClear: Alt-Svc whether The header contains the clear parameter.

        This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc_clear")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_ma(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property altSvcMa: The effective time of the Alt-Svc, in seconds.

        The default value is 86400 seconds.
        '''
        result = self._values.get("alt_svc_ma")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_persist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property altSvcPersist: Alt-Svc whether The header contains the persist parameter.

        This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc_persist")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property hsts: Whether to enable HSTS.

        It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_include_subdomains(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property hstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default.

        Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts_include_subdomains")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_max_age(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property hstsMaxAge: The expiration time of HSTS, in seconds.'''
        result = self._values.get("hsts_max_age")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_preload(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property hstsPreload: Whether to enable HSTS preloading.

        It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts_preload")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_force(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property httpsForce: Whether to enable forced HTTPS.

        It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_force")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_force_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property httpsForceCode: Forced HTTPS jump status code, value range: 301 302 307 308.'''
        result = self._values.get("https_force_code")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_no_sni_deny(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property httpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI.

        This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_no_sni_deny")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_sni_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property httpsSniVerify: Whether to enable SNI verification.

        It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_sni_verify")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_sni_whitelist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property httpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.'''
        result = self._values.get("https_sni_whitelist")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property paymentType: Payment Type.'''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "HttpsApplicationConfigurationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.HttpsBasicConfigurationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "ciphersuite": "ciphersuite",
        "ciphersuite_group": "ciphersuiteGroup",
        "http2": "http2",
        "http3": "http3",
        "https": "https",
        "ocsp_stapling": "ocspStapling",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "tls10": "tls10",
        "tls11": "tls11",
        "tls12": "tls12",
        "tls13": "tls13",
    },
)
class HttpsBasicConfigurationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        ciphersuite: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ciphersuite_group: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http2: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http3: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ocsp_stapling: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls10: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls11: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls12: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls13: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``HttpsBasicConfiguration``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsbasicconfiguration

        :param site_id: Property siteId: Site ID, which can be obtained by calling the `ListSites <~~ListSites~~>`_ interface.
        :param ciphersuite: Property ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
        :param ciphersuite_group: Property ciphersuiteGroup: Cipher suite group. Default is all cipher suites. Possible values: - all: All cipher suites. - strict: Strong cipher suites. - custom: Custom cipher suites.
        :param http2: Property http2: Indicates whether HTTP2 is enabled. Default is on. Possible values: - on: Enabled. - off: Disabled.
        :param http3: Property http3: Whether to enable HTTP3, which is enabled by default. The value can be: - on: Enabled. - off: Disabled.
        :param https: Property https: Whether to enable HTTPS. Default is enabled. Possible values: - on: Enable. - off: Disable.
        :param ocsp_stapling: Property ocspStapling: Indicates whether OCSP is enabled. Default is off. Possible values: - on: Enabled. - off: Disabled.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: - on: open. - off: close.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param tls10: Property tls10: Whether to enable TLS1.0. Default is disabled. Possible values: - on: Enable. - off: Disable.
        :param tls11: Property tls11: Whether to enable TLS1.1. Default is enabled. Possible values: - on: Enable. - off: Disable.
        :param tls12: Property tls12: Whether to enable TLS1.2. Default is enabled. Possible values: - on: Enable. - off: Disable.
        :param tls13: Property tls13: Whether to enable TLS1.3. Default is enabled. Possible values: - on: Enable. - off: Disable.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c722a17ccb4f5a6b1e35ec77114c426042f787010d288079f70f028da0f2477c)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument ciphersuite", value=ciphersuite, expected_type=type_hints["ciphersuite"])
            check_type(argname="argument ciphersuite_group", value=ciphersuite_group, expected_type=type_hints["ciphersuite_group"])
            check_type(argname="argument http2", value=http2, expected_type=type_hints["http2"])
            check_type(argname="argument http3", value=http3, expected_type=type_hints["http3"])
            check_type(argname="argument https", value=https, expected_type=type_hints["https"])
            check_type(argname="argument ocsp_stapling", value=ocsp_stapling, expected_type=type_hints["ocsp_stapling"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument tls10", value=tls10, expected_type=type_hints["tls10"])
            check_type(argname="argument tls11", value=tls11, expected_type=type_hints["tls11"])
            check_type(argname="argument tls12", value=tls12, expected_type=type_hints["tls12"])
            check_type(argname="argument tls13", value=tls13, expected_type=type_hints["tls13"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if ciphersuite is not None:
            self._values["ciphersuite"] = ciphersuite
        if ciphersuite_group is not None:
            self._values["ciphersuite_group"] = ciphersuite_group
        if http2 is not None:
            self._values["http2"] = http2
        if http3 is not None:
            self._values["http3"] = http3
        if https is not None:
            self._values["https"] = https
        if ocsp_stapling is not None:
            self._values["ocsp_stapling"] = ocsp_stapling
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if tls10 is not None:
            self._values["tls10"] = tls10
        if tls11 is not None:
            self._values["tls11"] = tls11
        if tls12 is not None:
            self._values["tls12"] = tls12
        if tls13 is not None:
            self._values["tls13"] = tls13

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: Site ID, which can be obtained by calling the `ListSites <~~ListSites~~>`_ interface.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def ciphersuite(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.'''
        result = self._values.get("ciphersuite")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def ciphersuite_group(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ciphersuiteGroup: Cipher suite group.

        Default is all cipher suites. Possible values:

        - all: All cipher suites.
        - strict: Strong cipher suites.
        - custom: Custom cipher suites.
        '''
        result = self._values.get("ciphersuite_group")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http2(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property http2: Indicates whether HTTP2 is enabled.

        Default is on. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("http2")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http3(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property http3: Whether to enable HTTP3, which is enabled by default.

        The value can be:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("http3")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property https: Whether to enable HTTPS.

        Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("https")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def ocsp_stapling(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ocspStapling: Indicates whether OCSP is enabled.

        Default is off. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("ocsp_stapling")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls10(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property tls10: Whether to enable TLS1.0. Default is disabled. Possible values: - on: Enable. - off: Disable.'''
        result = self._values.get("tls10")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls11(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property tls11: Whether to enable TLS1.1. Default is enabled. Possible values: - on: Enable. - off: Disable.'''
        result = self._values.get("tls11")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls12(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property tls12: Whether to enable TLS1.2. Default is enabled. Possible values: - on: Enable. - off: Disable.'''
        result = self._values.get("tls12")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls13(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property tls13: Whether to enable TLS1.3. Default is enabled. Possible values: - on: Enable. - off: Disable.'''
        result = self._values.get("tls13")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "HttpsBasicConfigurationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.ICertificate")
class ICertificate(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``Certificate``.'''

    @builtins.property
    @jsii.member(jsii_name="attrApplyCode")
    def attr_apply_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyCode: Certificate application error code.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrApplyMessage")
    def attr_apply_message(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyMessage: Certificate application error message.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCasId")
    def attr_cas_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CasId: Cloud certificate ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCertId")
    def attr_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertId: The certificate Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCertName")
    def attr_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertName: The certificate name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: Common Name (CN) field of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDcv")
    def attr_dcv(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DCV: DCV information.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: A list of domain names.

        Multiple domain names are separated by commas.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFingerprintSha256")
    def attr_fingerprint_sha256(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FingerprintSha256: SHA256 fingerprint of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate issuer.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrIssuerCn")
    def attr_issuer_cn(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute IssuerCN: Common name of the certificate issuer.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: End time of the certificate validity period.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: Start time of the certificate validity period.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrPubAlg")
    def attr_pub_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubAlg: Certificate public key algorithm.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSerialNumber")
    def attr_serial_number(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SerialNumber: Serial number of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSigAlg")
    def attr_sig_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SigAlg: Certificate signature algorithm.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID, which can be obtained by calling the ListSites interface.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: Site name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CertificateProps:
        ...


class _ICertificateProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``Certificate``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.ICertificate"

    @builtins.property
    @jsii.member(jsii_name="attrApplyCode")
    def attr_apply_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyCode: Certificate application error code.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrApplyCode"))

    @builtins.property
    @jsii.member(jsii_name="attrApplyMessage")
    def attr_apply_message(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyMessage: Certificate application error message.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrApplyMessage"))

    @builtins.property
    @jsii.member(jsii_name="attrCasId")
    def attr_cas_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CasId: Cloud certificate ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCasId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertId")
    def attr_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertId: The certificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrCertName")
    def attr_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: Common Name (CN) field of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDcv")
    def attr_dcv(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DCV: DCV information.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDcv"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: A list of domain names.

        Multiple domain names are separated by commas.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrFingerprintSha256")
    def attr_fingerprint_sha256(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FingerprintSha256: SHA256 fingerprint of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFingerprintSha256"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate issuer.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuerCn")
    def attr_issuer_cn(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute IssuerCN: Common name of the certificate issuer.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuerCn"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: End time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: Start time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubAlg")
    def attr_pub_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubAlg: Certificate public key algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSerialNumber")
    def attr_serial_number(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SerialNumber: Serial number of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSerialNumber"))

    @builtins.property
    @jsii.member(jsii_name="attrSigAlg")
    def attr_sig_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SigAlg: Certificate signature algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSigAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID, which can be obtained by calling the ListSites interface.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: Site name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CertificateProps:
        return typing.cast(CertificateProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, ICertificate).__jsii_proxy_class__ = lambda : _ICertificateProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IClientCaCertificate")
class IClientCaCertificate(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``ClientCaCertificate``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertId")
    def attr_client_ca_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertId: ClientCaCertificate Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertName")
    def attr_client_ca_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertName: The certificate name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The certificate common name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate Authority.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The expiration date of the certificate validity period.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The start time of the certificate validity period.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: Certificate public key algorithm.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: Alternate certificate subject name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: Certificate signature algorithm.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCaCertificateProps:
        ...


class _IClientCaCertificateProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``ClientCaCertificate``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IClientCaCertificate"

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertId")
    def attr_client_ca_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertId: ClientCaCertificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCaCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertName")
    def attr_client_ca_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCaCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The certificate common name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate Authority.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The expiration date of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The start time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: Certificate public key algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: Alternate certificate subject name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: Certificate signature algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCaCertificateProps:
        return typing.cast(ClientCaCertificateProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IClientCaCertificate).__jsii_proxy_class__ = lambda : _IClientCaCertificateProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IClientCertificate")
class IClientCertificate(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``ClientCertificate``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCaCertificateId")
    def attr_ca_certificate_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CACertificateId: The ID of the CA certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrClientCertId")
    def attr_client_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertId: ClientCertificate Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrClientCertificateName")
    def attr_client_certificate_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertificateName: The certificate name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The Common Name of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the certificate was created.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: The certificate authority (CA) that issued the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The time when the certificate expires.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The time when the certificate takes effect.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: The public-key algorithm of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: The Subject Alternative Name (SAN) of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: The signature algorithm of the certificate.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the certificate was updated.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCertificateProps:
        ...


class _IClientCertificateProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``ClientCertificate``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IClientCertificate"

    @builtins.property
    @jsii.member(jsii_name="attrCaCertificateId")
    def attr_ca_certificate_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CACertificateId: The ID of the CA certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCaCertificateId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertId")
    def attr_client_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertId: ClientCertificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertificateName")
    def attr_client_certificate_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertificateName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCertificateName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The Common Name of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the certificate was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: The certificate authority (CA) that issued the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The time when the certificate expires.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The time when the certificate takes effect.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: The public-key algorithm of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: The Subject Alternative Name (SAN) of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: The signature algorithm of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the certificate was updated.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCertificateProps:
        return typing.cast(ClientCertificateProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IClientCertificate).__jsii_proxy_class__ = lambda : _IClientCertificateProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.ICompressionRule")
class ICompressionRule(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``CompressionRule``.'''

    @builtins.property
    @jsii.member(jsii_name="attrBrotli")
    def attr_brotli(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Brotli: Brotli compression.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrGzip")
    def attr_gzip(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Gzip: Gzip compression.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrZstd")
    def attr_zstd(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Zstd: Zstd compression.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CompressionRuleProps:
        ...


class _ICompressionRuleProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``CompressionRule``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.ICompressionRule"

    @builtins.property
    @jsii.member(jsii_name="attrBrotli")
    def attr_brotli(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Brotli: Brotli compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrBrotli"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGzip")
    def attr_gzip(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Gzip: Gzip compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGzip"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrZstd")
    def attr_zstd(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Zstd: Zstd compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrZstd"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CompressionRuleProps:
        return typing.cast(CompressionRuleProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, ICompressionRule).__jsii_proxy_class__ = lambda : _ICompressionRuleProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.ICustomScenePolicy")
class ICustomScenePolicy(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``CustomScenePolicy``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the policy takes effect.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCustomScenePolicyName")
    def attr_custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomScenePolicyName: The name of the policy.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrEndTime")
    def attr_end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EndTime: The time when the policy expires.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrObjects")
    def attr_objects(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Objects: The IDs of websites associated.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrPolicyId")
    def attr_policy_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PolicyId: The Id of the Policy.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTemplate")
    def attr_template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Template: The name of the policy template.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CustomScenePolicyProps:
        ...


class _ICustomScenePolicyProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``CustomScenePolicy``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.ICustomScenePolicy"

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the policy takes effect.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomScenePolicyName")
    def attr_custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomScenePolicyName: The name of the policy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCustomScenePolicyName"))

    @builtins.property
    @jsii.member(jsii_name="attrEndTime")
    def attr_end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EndTime: The time when the policy expires.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEndTime"))

    @builtins.property
    @jsii.member(jsii_name="attrObjects")
    def attr_objects(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Objects: The IDs of websites associated.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrObjects"))

    @builtins.property
    @jsii.member(jsii_name="attrPolicyId")
    def attr_policy_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PolicyId: The Id of the Policy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPolicyId"))

    @builtins.property
    @jsii.member(jsii_name="attrTemplate")
    def attr_template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Template: The name of the policy template.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTemplate"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CustomScenePolicyProps:
        return typing.cast(CustomScenePolicyProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, ICustomScenePolicy).__jsii_proxy_class__ = lambda : _ICustomScenePolicyProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IEdgeContainerApp")
class IEdgeContainerApp(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``EdgeContainerApp``.'''

    @builtins.property
    @jsii.member(jsii_name="attrAppStatus")
    def attr_app_status(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppStatus: The status of the application.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the application was created.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDomainName")
    def attr_domain_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DomainName: The domain name that is associated with the application.

        If no domain name is associated with the application, the value is an empty string.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrEdgeContainerAppName")
    def attr_edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EdgeContainerAppName: The name of the application.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrGatewayType")
    def attr_gateway_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute GatewayType: The type of the gateway.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckFailTimes")
    def attr_health_check_fail_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckFailTimes: TThe number of consecutive failed health checks required for an application to be considered as unhealthy.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHost")
    def attr_health_check_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHost: The domain name that is used for health checks.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHttpCode")
    def attr_health_check_http_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHttpCode: The HTTP status code returned for a successful health check.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckInterval")
    def attr_health_check_interval(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckInterval: The interval between two consecutive health checks.

        Unit: seconds.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckMethod")
    def attr_health_check_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckMethod: The HTTP request method for health checks.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckPort")
    def attr_health_check_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckPort: The port used for health checks.

        Valid values: 1 to 65535. Default value: 80.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckSuccTimes")
    def attr_health_check_succ_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckTimeout")
    def attr_health_check_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckTimeout: The timeout period of a health check response.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckType")
    def attr_health_check_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckType: The health check type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckUri")
    def attr_health_check_uri(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckUri: The URI used for health checks.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrQuicCid")
    def attr_quic_cid(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QuicCid: Indicates whether QUIC is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRemarks")
    def attr_remarks(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Remarks: The remarks.

        This parameter is empty by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrServicePort")
    def attr_service_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ServicePort: The server port.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTargetPort")
    def attr_target_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetPort: The backend port, which is also the service port of the application.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the application was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrVersionCount")
    def attr_version_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute VersionCount: The number of versions of the application.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppProps:
        ...


class _IEdgeContainerAppProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``EdgeContainerApp``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IEdgeContainerApp"

    @builtins.property
    @jsii.member(jsii_name="attrAppStatus")
    def attr_app_status(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppStatus: The status of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAppStatus"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the application was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomainName")
    def attr_domain_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DomainName: The domain name that is associated with the application.

        If no domain name is associated with the application, the value is an empty string.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomainName"))

    @builtins.property
    @jsii.member(jsii_name="attrEdgeContainerAppName")
    def attr_edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EdgeContainerAppName: The name of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEdgeContainerAppName"))

    @builtins.property
    @jsii.member(jsii_name="attrGatewayType")
    def attr_gateway_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute GatewayType: The type of the gateway.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGatewayType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckFailTimes")
    def attr_health_check_fail_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckFailTimes: TThe number of consecutive failed health checks required for an application to be considered as unhealthy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckFailTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHost")
    def attr_health_check_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHost: The domain name that is used for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckHost"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHttpCode")
    def attr_health_check_http_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHttpCode: The HTTP status code returned for a successful health check.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckHttpCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckInterval")
    def attr_health_check_interval(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckInterval: The interval between two consecutive health checks.

        Unit: seconds.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckInterval"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckMethod")
    def attr_health_check_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckMethod: The HTTP request method for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckPort")
    def attr_health_check_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckPort: The port used for health checks.

        Valid values: 1 to 65535. Default value: 80.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckPort"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckSuccTimes")
    def attr_health_check_succ_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckSuccTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckTimeout")
    def attr_health_check_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckTimeout: The timeout period of a health check response.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckType")
    def attr_health_check_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckType: The health check type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckUri")
    def attr_health_check_uri(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckUri: The URI used for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckUri"))

    @builtins.property
    @jsii.member(jsii_name="attrQuicCid")
    def attr_quic_cid(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QuicCid: Indicates whether QUIC is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQuicCid"))

    @builtins.property
    @jsii.member(jsii_name="attrRemarks")
    def attr_remarks(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Remarks: The remarks.

        This parameter is empty by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRemarks"))

    @builtins.property
    @jsii.member(jsii_name="attrServicePort")
    def attr_service_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ServicePort: The server port.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrServicePort"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetPort")
    def attr_target_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetPort: The backend port, which is also the service port of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTargetPort"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the application was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrVersionCount")
    def attr_version_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute VersionCount: The number of versions of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrVersionCount"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppProps:
        return typing.cast(EdgeContainerAppProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IEdgeContainerApp).__jsii_proxy_class__ = lambda : _IEdgeContainerAppProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IEdgeContainerAppRecord")
class IEdgeContainerAppRecord(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``EdgeContainerAppRecord``.'''

    @builtins.property
    @jsii.member(jsii_name="attrAppId")
    def attr_app_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppId: The application ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCname")
    def attr_cname(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Cname: The CNAME of the associated domain name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: The configuration ID of the associated domain name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the domain name was added.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRecordId")
    def attr_record_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordId: The record ID of the associated domain name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The associated domain name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSchemdId")
    def attr_schemd_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SchemdId: The scheduling domain ID of the associated domain name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The website ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the scheduling domain ID or CNAME was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppRecordProps:
        ...


class _IEdgeContainerAppRecordProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``EdgeContainerAppRecord``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IEdgeContainerAppRecord"

    @builtins.property
    @jsii.member(jsii_name="attrAppId")
    def attr_app_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppId: The application ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAppId"))

    @builtins.property
    @jsii.member(jsii_name="attrCname")
    def attr_cname(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Cname: The CNAME of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCname"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: The configuration ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the domain name was added.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordId")
    def attr_record_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordId: The record ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordId"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrSchemdId")
    def attr_schemd_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SchemdId: The scheduling domain ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSchemdId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The website ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the scheduling domain ID or CNAME was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppRecordProps:
        return typing.cast(EdgeContainerAppRecordProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IEdgeContainerAppRecord).__jsii_proxy_class__ = lambda : _IEdgeContainerAppRecordProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IHttpRequestHeaderModificationRule")
class IHttpRequestHeaderModificationRule(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``HttpRequestHeaderModificationRule``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRequestHeaderModification")
    def attr_request_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RequestHeaderModification: The configurations of modifying request headers.

        You can add, delete, or modify a request header.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpRequestHeaderModificationRuleProps:
        ...


class _IHttpRequestHeaderModificationRuleProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``HttpRequestHeaderModificationRule``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IHttpRequestHeaderModificationRule"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrRequestHeaderModification")
    def attr_request_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RequestHeaderModification: The configurations of modifying request headers.

        You can add, delete, or modify a request header.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRequestHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpRequestHeaderModificationRuleProps:
        return typing.cast(HttpRequestHeaderModificationRuleProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IHttpRequestHeaderModificationRule).__jsii_proxy_class__ = lambda : _IHttpRequestHeaderModificationRuleProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IHttpResponseHeaderModificationRule")
class IHttpResponseHeaderModificationRule(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``HttpResponseHeaderModificationRule``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrResponseHeaderModification")
    def attr_response_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ResponseHeaderModification: Modify response headers, supporting add, delete, and modify operations.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpResponseHeaderModificationRuleProps:
        ...


class _IHttpResponseHeaderModificationRuleProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``HttpResponseHeaderModificationRule``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IHttpResponseHeaderModificationRule"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrResponseHeaderModification")
    def attr_response_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ResponseHeaderModification: Modify response headers, supporting add, delete, and modify operations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrResponseHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpResponseHeaderModificationRuleProps:
        return typing.cast(HttpResponseHeaderModificationRuleProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IHttpResponseHeaderModificationRule).__jsii_proxy_class__ = lambda : _IHttpResponseHeaderModificationRuleProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IHttpsApplicationConfiguration")
class IHttpsApplicationConfiguration(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``HttpsApplicationConfiguration``.'''

    @builtins.property
    @jsii.member(jsii_name="attrAltSvc")
    def attr_alt_svc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvc: Function switch, default off.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcClear")
    def attr_alt_svc_clear(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcClear: Alt-Svc whether The header contains the clear parameter.

        This parameter is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcMa")
    def attr_alt_svc_ma(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcMa: The effective time of the Alt-Svc, in seconds.

        The default value is 86400 seconds.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcPersist")
    def attr_alt_svc_persist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcPersist: Alt-Svc whether The header contains the persist parameter.

        This parameter is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHsts")
    def attr_hsts(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Hsts: Whether to enable HSTS.

        It is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHstsIncludeSubdomains")
    def attr_hsts_include_subdomains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHstsMaxAge")
    def attr_hsts_max_age(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsMaxAge: The expiration time of HSTS, in seconds.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHstsPreload")
    def attr_hsts_preload(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsPreload: Whether to enable HSTS preloading.

        It is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForce")
    def attr_https_force(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForce: Whether to enable forced HTTPS.

        It is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForceCode")
    def attr_https_force_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForceCode: Forced HTTPS jump status code, value range:.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttpsNoSniDeny")
    def attr_https_no_sni_deny(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI.

        This parameter is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniVerify")
    def attr_https_sni_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniVerify: Whether to enable SNI verification.

        It is disabled by default.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniWhitelist")
    def attr_https_sni_whitelist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsApplicationConfigurationProps:
        ...


class _IHttpsApplicationConfigurationProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``HttpsApplicationConfiguration``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IHttpsApplicationConfiguration"

    @builtins.property
    @jsii.member(jsii_name="attrAltSvc")
    def attr_alt_svc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvc: Function switch, default off.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvc"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcClear")
    def attr_alt_svc_clear(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcClear: Alt-Svc whether The header contains the clear parameter.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcClear"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcMa")
    def attr_alt_svc_ma(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcMa: The effective time of the Alt-Svc, in seconds.

        The default value is 86400 seconds.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcMa"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcPersist")
    def attr_alt_svc_persist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcPersist: Alt-Svc whether The header contains the persist parameter.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcPersist"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHsts")
    def attr_hsts(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Hsts: Whether to enable HSTS.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHsts"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsIncludeSubdomains")
    def attr_hsts_include_subdomains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsIncludeSubdomains"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsMaxAge")
    def attr_hsts_max_age(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsMaxAge: The expiration time of HSTS, in seconds.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsMaxAge"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsPreload")
    def attr_hsts_preload(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsPreload: Whether to enable HSTS preloading.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsPreload"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForce")
    def attr_https_force(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForce: Whether to enable forced HTTPS.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsForce"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForceCode")
    def attr_https_force_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForceCode: Forced HTTPS jump status code, value range:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsForceCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsNoSniDeny")
    def attr_https_no_sni_deny(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsNoSniDeny"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniVerify")
    def attr_https_sni_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniVerify: Whether to enable SNI verification.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsSniVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniWhitelist")
    def attr_https_sni_whitelist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsSniWhitelist"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsApplicationConfigurationProps:
        return typing.cast(HttpsApplicationConfigurationProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IHttpsApplicationConfiguration).__jsii_proxy_class__ = lambda : _IHttpsApplicationConfigurationProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IHttpsBasicConfiguration")
class IHttpsBasicConfiguration(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``HttpsBasicConfiguration``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuite")
    def attr_ciphersuite(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuiteGroup")
    def attr_ciphersuite_group(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CiphersuiteGroup: Cipher suite group.

        Default is all cipher suites.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttp2")
    def attr_http2(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2: Indicates whether HTTP2 is enabled.

        Default is on.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttp3")
    def attr_http3(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http3: Whether to enable HTTP3, which is enabled by default.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttps")
    def attr_https(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Https: Whether to enable HTTPS.

        Default is enabled.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOcspStapling")
    def attr_ocsp_stapling(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OcspStapling: Indicates whether OCSP is enabled.

        Default is off.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTls10")
    def attr_tls10(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls10: Whether to enable TLS1.0. Default is disabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTls11")
    def attr_tls11(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls11: Whether to enable TLS1.1. Default is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTls12")
    def attr_tls12(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls12: Whether to enable TLS1.2. Default is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTls13")
    def attr_tls13(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls13: Whether to enable TLS1.3. Default is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsBasicConfigurationProps:
        ...


class _IHttpsBasicConfigurationProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``HttpsBasicConfiguration``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IHttpsBasicConfiguration"

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuite")
    def attr_ciphersuite(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCiphersuite"))

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuiteGroup")
    def attr_ciphersuite_group(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CiphersuiteGroup: Cipher suite group.

        Default is all cipher suites.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCiphersuiteGroup"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2")
    def attr_http2(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2: Indicates whether HTTP2 is enabled.

        Default is on.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp2"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp3")
    def attr_http3(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http3: Whether to enable HTTP3, which is enabled by default.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp3"))

    @builtins.property
    @jsii.member(jsii_name="attrHttps")
    def attr_https(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Https: Whether to enable HTTPS.

        Default is enabled.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttps"))

    @builtins.property
    @jsii.member(jsii_name="attrOcspStapling")
    def attr_ocsp_stapling(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OcspStapling: Indicates whether OCSP is enabled.

        Default is off.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOcspStapling"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrTls10")
    def attr_tls10(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls10: Whether to enable TLS1.0. Default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls10"))

    @builtins.property
    @jsii.member(jsii_name="attrTls11")
    def attr_tls11(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls11: Whether to enable TLS1.1. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls11"))

    @builtins.property
    @jsii.member(jsii_name="attrTls12")
    def attr_tls12(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls12: Whether to enable TLS1.2. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls12"))

    @builtins.property
    @jsii.member(jsii_name="attrTls13")
    def attr_tls13(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls13: Whether to enable TLS1.3. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls13"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsBasicConfigurationProps:
        return typing.cast(HttpsBasicConfigurationProps, jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IHttpsBasicConfiguration).__jsii_proxy_class__ = lambda : _IHttpsBasicConfigurationProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IImageTransform")
class IImageTransform(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``ImageTransform``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrEnable")
    def attr_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enable: Indicates whether the image transformations feature is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ImageTransformProps":
        ...


class _IImageTransformProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``ImageTransform``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IImageTransform"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrEnable")
    def attr_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enable: Indicates whether the image transformations feature is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ImageTransformProps":
        return typing.cast("ImageTransformProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IImageTransform).__jsii_proxy_class__ = lambda : _IImageTransformProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IKvNamespace")
class IKvNamespace(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``KvNamespace``.'''

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: The description of the namespace.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacity")
    def attr_kv_capacity(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacity: The available capacity of the namespace.

        Unit: bytes.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityString")
    def attr_kv_capacity_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityString: The available capacity of the namespace.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsed")
    def attr_kv_capacity_used(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsed: The used capacity of the namespace.

        Unit: bytes.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsedString")
    def attr_kv_capacity_used_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsedString: The used capacity of the namespace.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrKvNamespace")
    def attr_kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvNamespace: The name of the namespace.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNamespaceId")
    def attr_namespace_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NamespaceId: The ID of the namespace.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "KvNamespaceProps":
        ...


class _IKvNamespaceProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``KvNamespace``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IKvNamespace"

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: The description of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacity")
    def attr_kv_capacity(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacity: The available capacity of the namespace.

        Unit: bytes.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacity"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityString")
    def attr_kv_capacity_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityString: The available capacity of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsed")
    def attr_kv_capacity_used(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsed: The used capacity of the namespace.

        Unit: bytes.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityUsed"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsedString")
    def attr_kv_capacity_used_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsedString: The used capacity of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityUsedString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvNamespace")
    def attr_kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvNamespace: The name of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvNamespace"))

    @builtins.property
    @jsii.member(jsii_name="attrNamespaceId")
    def attr_namespace_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NamespaceId: The ID of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNamespaceId"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "KvNamespaceProps":
        return typing.cast("KvNamespaceProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IKvNamespace).__jsii_proxy_class__ = lambda : _IKvNamespaceProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.INetworkOptimization")
class INetworkOptimization(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``NetworkOptimization``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration, which can be obtained by calling the ListNetworkOptimizations.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrGrpc")
    def attr_grpc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Grpc: Whether to enable GRPC, default is disabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHttp2Origin")
    def attr_http2_origin(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2Origin: Whether to enable HTTP2 origin, default is disabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSmartRouting")
    def attr_smart_routing(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SmartRouting: Whether to enable smart routing service, default is disabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUploadMaxFilesize")
    def attr_upload_max_filesize(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrWebsocket")
    def attr_websocket(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Websocket: Whether to enable Websocket, default is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "NetworkOptimizationProps":
        ...


class _INetworkOptimizationProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``NetworkOptimization``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.INetworkOptimization"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration, which can be obtained by calling the ListNetworkOptimizations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGrpc")
    def attr_grpc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Grpc: Whether to enable GRPC, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGrpc"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2Origin")
    def attr_http2_origin(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2Origin: Whether to enable HTTP2 origin, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp2Origin"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrSmartRouting")
    def attr_smart_routing(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SmartRouting: Whether to enable smart routing service, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSmartRouting"))

    @builtins.property
    @jsii.member(jsii_name="attrUploadMaxFilesize")
    def attr_upload_max_filesize(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUploadMaxFilesize"))

    @builtins.property
    @jsii.member(jsii_name="attrWebsocket")
    def attr_websocket(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Websocket: Whether to enable Websocket, default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWebsocket"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "NetworkOptimizationProps":
        return typing.cast("NetworkOptimizationProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, INetworkOptimization).__jsii_proxy_class__ = lambda : _INetworkOptimizationProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IOriginPool")
class IOriginPool(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``OriginPool``.'''

    @builtins.property
    @jsii.member(jsii_name="attrEnabled")
    def attr_enabled(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enabled: Whether the source address pool is enabled:.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolId")
    def attr_origin_pool_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolId: OriginPool Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolName")
    def attr_origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolName: The source address pool name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOrigins")
    def attr_origins(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Origins: The Source station information added to the source address pool.

        Multiple Source stations use arrays to transfer values.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The domain name assigned to the source address pool can be used as the source address recorded under the site.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrReferenceLbCount")
    def attr_reference_lb_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReferenceLBCount: How many load balancers are referenced.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrReferences")
    def attr_references(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute References: The source address pool is referred to when the source address pool is configured by the load balancer or recorded as the source station.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginPoolProps":
        ...


class _IOriginPoolProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``OriginPool``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IOriginPool"

    @builtins.property
    @jsii.member(jsii_name="attrEnabled")
    def attr_enabled(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enabled: Whether the source address pool is enabled:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEnabled"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolId")
    def attr_origin_pool_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolId: OriginPool Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginPoolId"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolName")
    def attr_origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolName: The source address pool name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginPoolName"))

    @builtins.property
    @jsii.member(jsii_name="attrOrigins")
    def attr_origins(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Origins: The Source station information added to the source address pool.

        Multiple Source stations use arrays to transfer values.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOrigins"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The domain name assigned to the source address pool can be used as the source address recorded under the site.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrReferenceLbCount")
    def attr_reference_lb_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReferenceLBCount: How many load balancers are referenced.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReferenceLbCount"))

    @builtins.property
    @jsii.member(jsii_name="attrReferences")
    def attr_references(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute References: The source address pool is referred to when the source address pool is configured by the load balancer or recorded as the source station.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReferences"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginPoolProps":
        return typing.cast("OriginPoolProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IOriginPool).__jsii_proxy_class__ = lambda : _IOriginPoolProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IOriginRule")
class IOriginRule(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``OriginRule``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Back-to-source rule configuration ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDnsRecord")
    def attr_dns_record(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DnsRecord: Overwrite the DNS resolution record of the origin request.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFollow302Enable")
    def attr_follow302_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302Enable: Return Source 302 follow switch.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFollow302MaxTries")
    def attr_follow302_max_tries(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainArgs")
    def attr_follow302_retain_args(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainArgs: Retain the original request parameter switch.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainHeader")
    def attr_follow302_retain_header(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainHeader: Retain the original request header switch.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFollow302TargetHost")
    def attr_follow302_target_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302TargetHost: Modify the source host after 302.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginHost")
    def attr_origin_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHost: The HOST carried in the back-to-origin request.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpPort")
    def attr_origin_http_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpsPort")
    def attr_origin_https_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpsPort: The port of the origin station accessed when the HTTPS protocol is used to return to the origin.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginMtls")
    def attr_origin_mtls(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginMtls: The mtls switch.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginReadTimeout")
    def attr_origin_read_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginReadTimeout: Read timeout interval of the source station (s).'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginScheme")
    def attr_origin_scheme(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginScheme: The protocol used by the back-to-origin request.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginSni")
    def attr_origin_sni(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginSni: SNI carried in the back-to-origin request.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrOriginVerify")
    def attr_origin_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginVerify: Source station certificate verification switch.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRange")
    def attr_range(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Range: Use the range sharding method to download the file from the source.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRangeChunkSize")
    def attr_range_chunk_size(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RangeChunkSize: range shard size.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginRuleProps":
        ...


class _IOriginRuleProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``OriginRule``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IOriginRule"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Back-to-source rule configuration ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrDnsRecord")
    def attr_dns_record(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DnsRecord: Overwrite the DNS resolution record of the origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDnsRecord"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302Enable")
    def attr_follow302_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302Enable: Return Source 302 follow switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302Enable"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302MaxTries")
    def attr_follow302_max_tries(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302MaxTries"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainArgs")
    def attr_follow302_retain_args(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainArgs: Retain the original request parameter switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302RetainArgs"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainHeader")
    def attr_follow302_retain_header(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainHeader: Retain the original request header switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302RetainHeader"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302TargetHost")
    def attr_follow302_target_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302TargetHost: Modify the source host after 302.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302TargetHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHost")
    def attr_origin_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHost: The HOST carried in the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpPort")
    def attr_origin_http_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHttpPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpsPort")
    def attr_origin_https_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpsPort: The port of the origin station accessed when the HTTPS protocol is used to return to the origin.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHttpsPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginMtls")
    def attr_origin_mtls(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginMtls: The mtls switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginMtls"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginReadTimeout")
    def attr_origin_read_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginReadTimeout: Read timeout interval of the source station (s).'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginReadTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginScheme")
    def attr_origin_scheme(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginScheme: The protocol used by the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginScheme"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginSni")
    def attr_origin_sni(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginSni: SNI carried in the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginSni"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginVerify")
    def attr_origin_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginVerify: Source station certificate verification switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrRange")
    def attr_range(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Range: Use the range sharding method to download the file from the source.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRange"))

    @builtins.property
    @jsii.member(jsii_name="attrRangeChunkSize")
    def attr_range_chunk_size(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RangeChunkSize: range shard size.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRangeChunkSize"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginRuleProps":
        return typing.cast("OriginRuleProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IOriginRule).__jsii_proxy_class__ = lambda : _IOriginRuleProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IRedirectRule")
class IRedirectRule(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``RedirectRule``.'''

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrReserveQueryString")
    def attr_reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReserveQueryString: Indicates whether the feature of retaining the query string is enabled.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrStatusCode")
    def attr_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute StatusCode: The response code that you want to use to indicate URL redirection.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTargetUrl")
    def attr_target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetUrl: The destination URL to which requests are redirected.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The redirect type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "RedirectRuleProps":
        ...


class _IRedirectRuleProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``RedirectRule``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IRedirectRule"

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrReserveQueryString")
    def attr_reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReserveQueryString: Indicates whether the feature of retaining the query string is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReserveQueryString"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrStatusCode")
    def attr_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute StatusCode: The response code that you want to use to indicate URL redirection.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetUrl")
    def attr_target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetUrl: The destination URL to which requests are redirected.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTargetUrl"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The redirect type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "RedirectRuleProps":
        return typing.cast("RedirectRuleProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IRedirectRule).__jsii_proxy_class__ = lambda : _IRedirectRuleProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IScheduledPreloadJob")
class IScheduledPreloadJob(
    _ros_cdk_core_7adfd82f.IResource,
    typing_extensions.Protocol,
):
    '''Represents a ``ScheduledPreloadJob``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the task was created.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: The domain names to be prefetched.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrErrorInfo")
    def attr_error_info(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ErrorInfo: The error message.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFailedFileOss")
    def attr_failed_file_oss(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FailedFileOss: OSS address of failed file.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFileId")
    def attr_file_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FileId: The ID of the URL list file, which can be used during downloads.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrInsertWay")
    def attr_insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute InsertWay: The method to submit the URLs to be prefetched.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobId")
    def attr_scheduled_preload_job_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobId: The ID of the prefetch task.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobName")
    def attr_scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobName: The task name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTaskSubmitted")
    def attr_task_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskSubmitted: The number of submitted prefetch tasks.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTaskType")
    def attr_task_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskType: The task type.

        Valid values: refresh and preload.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUrlCount")
    def attr_url_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlCount: The total number of URLs.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrUrlSubmitted")
    def attr_url_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlSubmitted: The number of submitted URLs.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ScheduledPreloadJobProps":
        ...


class _IScheduledPreloadJobProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``ScheduledPreloadJob``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IScheduledPreloadJob"

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the task was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: The domain names to be prefetched.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrErrorInfo")
    def attr_error_info(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ErrorInfo: The error message.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrErrorInfo"))

    @builtins.property
    @jsii.member(jsii_name="attrFailedFileOss")
    def attr_failed_file_oss(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FailedFileOss: OSS address of failed file.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFailedFileOss"))

    @builtins.property
    @jsii.member(jsii_name="attrFileId")
    def attr_file_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FileId: The ID of the URL list file, which can be used during downloads.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFileId"))

    @builtins.property
    @jsii.member(jsii_name="attrInsertWay")
    def attr_insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute InsertWay: The method to submit the URLs to be prefetched.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrInsertWay"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobId")
    def attr_scheduled_preload_job_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobId: The ID of the prefetch task.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrScheduledPreloadJobId"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobName")
    def attr_scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobName: The task name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrScheduledPreloadJobName"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskSubmitted")
    def attr_task_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskSubmitted: The number of submitted prefetch tasks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskType")
    def attr_task_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskType: The task type.

        Valid values: refresh and preload.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskType"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlCount")
    def attr_url_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlCount: The total number of URLs.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUrlCount"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlSubmitted")
    def attr_url_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlSubmitted: The number of submitted URLs.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUrlSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ScheduledPreloadJobProps":
        return typing.cast("ScheduledPreloadJobProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IScheduledPreloadJob).__jsii_proxy_class__ = lambda : _IScheduledPreloadJobProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.ISiteDeliveryTask")
class ISiteDeliveryTask(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``SiteDeliveryTask``.'''

    @builtins.property
    @jsii.member(jsii_name="attrBusinessType")
    def attr_business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute BusinessType: Real-time log type.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDataCenter")
    def attr_data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DataCenter: Data Center.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDeliveryType")
    def attr_delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DeliveryType: Delivery Type:.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDiscardRate")
    def attr_discard_rate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DiscardRate: If the discard rate is not filled, the default value is 0.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFieldName")
    def attr_field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FieldName: The list of delivery fields to be modified, separated by commas.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrFilterRules")
    def attr_filter_rules(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FilterRules: The filtering rules.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSinkConfig")
    def attr_sink_config(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SinkConfig: The delivery configuration.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTaskName")
    def attr_task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskName: The task name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "SiteDeliveryTaskProps":
        ...


class _ISiteDeliveryTaskProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``SiteDeliveryTask``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.ISiteDeliveryTask"

    @builtins.property
    @jsii.member(jsii_name="attrBusinessType")
    def attr_business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute BusinessType: Real-time log type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrBusinessType"))

    @builtins.property
    @jsii.member(jsii_name="attrDataCenter")
    def attr_data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DataCenter: Data Center.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDataCenter"))

    @builtins.property
    @jsii.member(jsii_name="attrDeliveryType")
    def attr_delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DeliveryType: Delivery Type:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDeliveryType"))

    @builtins.property
    @jsii.member(jsii_name="attrDiscardRate")
    def attr_discard_rate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DiscardRate: If the discard rate is not filled, the default value is 0.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDiscardRate"))

    @builtins.property
    @jsii.member(jsii_name="attrFieldName")
    def attr_field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FieldName: The list of delivery fields to be modified, separated by commas.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFieldName"))

    @builtins.property
    @jsii.member(jsii_name="attrFilterRules")
    def attr_filter_rules(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FilterRules: The filtering rules.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFilterRules"))

    @builtins.property
    @jsii.member(jsii_name="attrSinkConfig")
    def attr_sink_config(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SinkConfig: The delivery configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSinkConfig"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskName")
    def attr_task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskName: The task name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskName"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "SiteDeliveryTaskProps":
        return typing.cast("SiteDeliveryTaskProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, ISiteDeliveryTask).__jsii_proxy_class__ = lambda : _ISiteDeliveryTaskProxy


@jsii.interface(jsii_type="@alicloud/ros-cdk-esa.IWaitingRoom")
class IWaitingRoom(_ros_cdk_core_7adfd82f.IResource, typing_extensions.Protocol):
    '''Represents a ``WaitingRoom``.'''

    @builtins.property
    @jsii.member(jsii_name="attrCookieName")
    def attr_cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CookieName: Custom Cookie name.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrCustomPageHtml")
    def attr_custom_page_html(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter.

        The incoming content needs to be base64 encoded.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: Waiting room description.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrDisableSessionRenewalEnable")
    def attr_disable_session_renewal_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DisableSessionRenewalEnable: Disable session renewal.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrHostNameAndPath")
    def attr_host_name_and_path(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HostNameAndPath: Host name and path.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrJsonResponseEnable")
    def attr_json_response_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute JsonResponseEnable: The JSON response.

        If the accept request header contains "application/json", JSON data is returned.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrLanguage")
    def attr_language(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Language: The language of the waiting room page.

        When the waiting room type is the default type, it needs to be passed in.
        '''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrNewUsersPerMinute")
    def attr_new_users_per_minute(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NewUsersPerMinute: Number of new users per minute.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrQueueAllEnable")
    def attr_queue_all_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueueAllEnable: All in line.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrQueuingMethod")
    def attr_queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingMethod: Way of queuing.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrQueuingStatusCode")
    def attr_queuing_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingStatusCode: Waiting room status code.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrSessionDuration")
    def attr_session_duration(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SessionDuration: Session duration in minutes.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrTotalActiveUsers")
    def attr_total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TotalActiveUsers: Total number of active users.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomId")
    def attr_waiting_room_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomId: The waiting room ID.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomName")
    def attr_waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomName: The name of the waiting room.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomType")
    def attr_waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomType: Waiting room type, support:.'''
        ...

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "WaitingRoomProps":
        ...


class _IWaitingRoomProxy(
    jsii.proxy_for(_ros_cdk_core_7adfd82f.IResource), # type: ignore[misc]
):
    '''Represents a ``WaitingRoom``.'''

    __jsii_type__: typing.ClassVar[str] = "@alicloud/ros-cdk-esa.IWaitingRoom"

    @builtins.property
    @jsii.member(jsii_name="attrCookieName")
    def attr_cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CookieName: Custom Cookie name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCookieName"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomPageHtml")
    def attr_custom_page_html(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter.

        The incoming content needs to be base64 encoded.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCustomPageHtml"))

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: Waiting room description.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrDisableSessionRenewalEnable")
    def attr_disable_session_renewal_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DisableSessionRenewalEnable: Disable session renewal.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDisableSessionRenewalEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrHostNameAndPath")
    def attr_host_name_and_path(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HostNameAndPath: Host name and path.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHostNameAndPath"))

    @builtins.property
    @jsii.member(jsii_name="attrJsonResponseEnable")
    def attr_json_response_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute JsonResponseEnable: The JSON response.

        If the accept request header contains "application/json", JSON data is returned.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrJsonResponseEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrLanguage")
    def attr_language(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Language: The language of the waiting room page.

        When the waiting room type is the default type, it needs to be passed in.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrLanguage"))

    @builtins.property
    @jsii.member(jsii_name="attrNewUsersPerMinute")
    def attr_new_users_per_minute(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NewUsersPerMinute: Number of new users per minute.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNewUsersPerMinute"))

    @builtins.property
    @jsii.member(jsii_name="attrQueueAllEnable")
    def attr_queue_all_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueueAllEnable: All in line.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueueAllEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingMethod")
    def attr_queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingMethod: Way of queuing.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueuingMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingStatusCode")
    def attr_queuing_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingStatusCode: Waiting room status code.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueuingStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrSessionDuration")
    def attr_session_duration(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SessionDuration: Session duration in minutes.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSessionDuration"))

    @builtins.property
    @jsii.member(jsii_name="attrTotalActiveUsers")
    def attr_total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TotalActiveUsers: Total number of active users.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTotalActiveUsers"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomId")
    def attr_waiting_room_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomId: The waiting room ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomId"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomName")
    def attr_waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomName: The name of the waiting room.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomName"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomType")
    def attr_waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomType: Waiting room type, support:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomType"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "WaitingRoomProps":
        return typing.cast("WaitingRoomProps", jsii.get(self, "props"))

# Adding a "__jsii_proxy_class__(): typing.Type" function to the interface
typing.cast(typing.Any, IWaitingRoom).__jsii_proxy_class__ = lambda : _IWaitingRoomProxy


@jsii.implements(IImageTransform)
class ImageTransform(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.ImageTransform",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::ImageTransform``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosImageTransform``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-imagetransform
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["ImageTransformProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d981bc685a4fe7f8dfa9c107b025755b3a442e1a9ca512239dbc61fb21e9f27)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrEnable")
    def attr_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enable: Indicates whether the image transformations feature is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ImageTransformProps":
        return typing.cast("ImageTransformProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35bea2619f35d6ca09c8f966f4e2de38428565e82506df57a670a20f937208e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70ff3cb5b306e55f7e67736d47a4ed76b9bbeff66793f6b136c146b33299d849)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6415ff4cd76b7073bd50ff96c637ae34505752ada3f9ed56be61cc2159dcb26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.ImageTransformProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "enable": "enable",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class ImageTransformProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``ImageTransform``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-imagetransform

        :param site_id: Property siteId: The site ID, which can be obtained by calling the ListSites API.
        :param enable: Property enable: Indicates whether the image transformations feature is enabled. Valid values: on: Enabled. off: Disabled.
        :param payment_type: Property paymentType: Payment Type.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: Match all incoming requests: value set to true Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: on: Enabled. off: Disabled.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c95f307ac2cc902233434978f7010872232b8372546c82c67d9beb95ce43209)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument enable", value=enable, expected_type=type_hints["enable"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if enable is not None:
            self._values["enable"] = enable
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID, which can be obtained by calling the ListSites API.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property enable: Indicates whether the image transformations feature is enabled.

        Valid values:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property paymentType: Payment Type.'''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ImageTransformProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IKvNamespace)
class KvNamespace(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.KvNamespace",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::KvNamespace``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosKvNamespace``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-kvnamespace
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["KvNamespaceProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e77b36b3c0b08623fa891707ddff60c1ec6bb632f8ff295e67f410fb8a110381)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: The description of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacity")
    def attr_kv_capacity(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacity: The available capacity of the namespace.

        Unit: bytes.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacity"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityString")
    def attr_kv_capacity_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityString: The available capacity of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsed")
    def attr_kv_capacity_used(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsed: The used capacity of the namespace.

        Unit: bytes.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityUsed"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsedString")
    def attr_kv_capacity_used_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvCapacityUsedString: The used capacity of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvCapacityUsedString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvNamespace")
    def attr_kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute KvNamespace: The name of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrKvNamespace"))

    @builtins.property
    @jsii.member(jsii_name="attrNamespaceId")
    def attr_namespace_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NamespaceId: The ID of the namespace.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNamespaceId"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "KvNamespaceProps":
        return typing.cast("KvNamespaceProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4764e1161b4dfbda8537786ac13bb3ac50f6bf86851fa83fb19392965e273f6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1a1bc3008e9371757144a6ea419fbb1eb970b7faaf39486de9a297786027497)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb88772f8e20862cdbc1b0e02286521acf2168b9554a5785b6a8d605fb13dd87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.KvNamespaceProps",
    jsii_struct_bases=[],
    name_mapping={"kv_namespace": "kvNamespace", "description": "description"},
)
class KvNamespaceProps:
    def __init__(
        self,
        *,
        kv_namespace: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``KvNamespace``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-kvnamespace

        :param kv_namespace: Property kvNamespace: The name of the namespace.
        :param description: Property description: The description of the namespace.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa42647cb354cb034e2d0c17b8c1b6fcd83bdd9c72afaa5468db69342f2cf03c)
            check_type(argname="argument kv_namespace", value=kv_namespace, expected_type=type_hints["kv_namespace"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "kv_namespace": kv_namespace,
        }
        if description is not None:
            self._values["description"] = description

    @builtins.property
    def kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property kvNamespace: The name of the namespace.'''
        result = self._values.get("kv_namespace")
        assert result is not None, "Required property 'kv_namespace' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property description: The description of the namespace.'''
        result = self._values.get("description")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "KvNamespaceProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(INetworkOptimization)
class NetworkOptimization(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.NetworkOptimization",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::NetworkOptimization``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosNetworkOptimization``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-networkoptimization
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["NetworkOptimizationProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9b9fed517252cf7ae6b2ab4080e2fc7e6099eca128d9591f1353b6b2adfc6e7)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration, which can be obtained by calling the ListNetworkOptimizations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGrpc")
    def attr_grpc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Grpc: Whether to enable GRPC, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGrpc"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2Origin")
    def attr_http2_origin(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2Origin: Whether to enable HTTP2 origin, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp2Origin"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrSmartRouting")
    def attr_smart_routing(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SmartRouting: Whether to enable smart routing service, default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSmartRouting"))

    @builtins.property
    @jsii.member(jsii_name="attrUploadMaxFilesize")
    def attr_upload_max_filesize(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUploadMaxFilesize"))

    @builtins.property
    @jsii.member(jsii_name="attrWebsocket")
    def attr_websocket(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Websocket: Whether to enable Websocket, default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWebsocket"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "NetworkOptimizationProps":
        return typing.cast("NetworkOptimizationProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__687f90bd5f28c14df142d074a9b34ccd231c4d75f2ae3b2ea15da0762ca83218)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ee47f7a5c846cbd20295f985656e849a344e773439e9bced9e4712d16a9eed2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ea1ee521760db39848b6477903a52bfc747c0905b01678ad67a8e9123cba50a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.NetworkOptimizationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "grpc": "grpc",
        "http2_origin": "http2Origin",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
        "smart_routing": "smartRouting",
        "upload_max_filesize": "uploadMaxFilesize",
        "websocket": "websocket",
    },
)
class NetworkOptimizationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        grpc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http2_origin: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        smart_routing: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        upload_max_filesize: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        websocket: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``NetworkOptimization``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-networkoptimization

        :param site_id: Property siteId: Site ID.
        :param grpc: Property grpc: Whether to enable GRPC, default is disabled. Value range: - ``on``: Enabled - ``off``: Disabled.
        :param http2_origin: Property http2Origin: Whether to enable HTTP2 origin, default is disabled. Value range: - ``on``: Enabled - ``off``: Disabled.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: - ``on``: open. - ``off``: close.
        :param rule_name: Property ruleName: Rule name.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        :param smart_routing: Property smartRouting: Whether to enable smart routing service, default is disabled. Value range: - ``on``: Enabled - ``off``: Disabled.
        :param upload_max_filesize: Property uploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.
        :param websocket: Property websocket: Whether to enable Websocket, default is enabled. Value range: - ``on``: Enabled - ``off``: Disabled.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b86fec431439444d90ad7fb7be6f6a93e55167b8f2fde24f403475cf31abbdb3)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument grpc", value=grpc, expected_type=type_hints["grpc"])
            check_type(argname="argument http2_origin", value=http2_origin, expected_type=type_hints["http2_origin"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
            check_type(argname="argument smart_routing", value=smart_routing, expected_type=type_hints["smart_routing"])
            check_type(argname="argument upload_max_filesize", value=upload_max_filesize, expected_type=type_hints["upload_max_filesize"])
            check_type(argname="argument websocket", value=websocket, expected_type=type_hints["websocket"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if grpc is not None:
            self._values["grpc"] = grpc
        if http2_origin is not None:
            self._values["http2_origin"] = http2_origin
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version
        if smart_routing is not None:
            self._values["smart_routing"] = smart_routing
        if upload_max_filesize is not None:
            self._values["upload_max_filesize"] = upload_max_filesize
        if websocket is not None:
            self._values["websocket"] = websocket

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: Site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def grpc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property grpc: Whether to enable GRPC, default is disabled.

        Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("grpc")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http2_origin(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property http2Origin: Whether to enable HTTP2 origin, default is disabled.

        Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("http2_origin")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.'''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def smart_routing(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property smartRouting: Whether to enable smart routing service, default is disabled.

        Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("smart_routing")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def upload_max_filesize(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property uploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.'''
        result = self._values.get("upload_max_filesize")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def websocket(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property websocket: Whether to enable Websocket, default is enabled.

        Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("websocket")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "NetworkOptimizationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IOriginPool)
class OriginPool(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.OriginPool",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::OriginPool``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosOriginPool``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originpool
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["OriginPoolProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93f3a4e689bb731761a408f711130618bc9e35bed364594929948429ecde1fe6)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrEnabled")
    def attr_enabled(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Enabled: Whether the source address pool is enabled:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEnabled"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolId")
    def attr_origin_pool_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolId: OriginPool Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginPoolId"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolName")
    def attr_origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginPoolName: The source address pool name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginPoolName"))

    @builtins.property
    @jsii.member(jsii_name="attrOrigins")
    def attr_origins(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Origins: The Source station information added to the source address pool.

        Multiple Source stations use arrays to transfer values.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOrigins"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The domain name assigned to the source address pool can be used as the source address recorded under the site.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrReferenceLbCount")
    def attr_reference_lb_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReferenceLBCount: How many load balancers are referenced.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReferenceLbCount"))

    @builtins.property
    @jsii.member(jsii_name="attrReferences")
    def attr_references(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute References: The source address pool is referred to when the source address pool is configured by the load balancer or recorded as the source station.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReferences"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginPoolProps":
        return typing.cast("OriginPoolProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fea9e3b2c7dc84ea5a27f8a4e1b917f4a0b58612a507616f07620f534746675)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c91827488a4be5aec7965d8ad3f8e338660094ca1dc2ba6c5d30bc549e5322f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e523cdc75087dee3975592d43351562995688133efb5e59867e89f0a055a443)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.OriginPoolProps",
    jsii_struct_bases=[],
    name_mapping={
        "origin_pool_name": "originPoolName",
        "site_id": "siteId",
        "enabled": "enabled",
        "origins": "origins",
    },
)
class OriginPoolProps:
    def __init__(
        self,
        *,
        origin_pool_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origins: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosOriginPool.OriginsProperty", typing.Dict[builtins.str, typing.Any]]]]]] = None,
    ) -> None:
        '''Properties for defining a ``OriginPool``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originpool

        :param origin_pool_name: Property originPoolName: The source address pool name.
        :param site_id: Property siteId: The site ID.
        :param enabled: Property enabled: Whether the source address pool is enabled: - ``true``: Enabled; - ``false``: Not enabled.
        :param origins: Property origins: The Source station information added to the source address pool. Multiple Source stations use arrays to transfer values.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__152b9618755a639a8a71bc63292a3f2457073246ebc6dbdd91599b029bc24402)
            check_type(argname="argument origin_pool_name", value=origin_pool_name, expected_type=type_hints["origin_pool_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument origins", value=origins, expected_type=type_hints["origins"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "origin_pool_name": origin_pool_name,
            "site_id": site_id,
        }
        if enabled is not None:
            self._values["enabled"] = enabled
        if origins is not None:
            self._values["origins"] = origins

    @builtins.property
    def origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property originPoolName: The source address pool name.'''
        result = self._values.get("origin_pool_name")
        assert result is not None, "Required property 'origin_pool_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property enabled: Whether the source address pool is enabled: - ``true``: Enabled;

        - ``false``: Not enabled.
        '''
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origins(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.OriginsProperty"]]]]:
        '''Property origins: The Source station information added to the source address pool.

        Multiple Source stations use arrays to transfer values.
        '''
        result = self._values.get("origins")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.OriginsProperty"]]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OriginPoolProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IOriginRule)
class OriginRule(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.OriginRule",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::OriginRule``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosOriginRule``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["OriginRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31cacfa024085162be54b07e3d26593d77a8bc64dda295ee8b7ecf3353a57f0d)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Back-to-source rule configuration ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrDnsRecord")
    def attr_dns_record(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DnsRecord: Overwrite the DNS resolution record of the origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDnsRecord"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302Enable")
    def attr_follow302_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302Enable: Return Source 302 follow switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302Enable"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302MaxTries")
    def attr_follow302_max_tries(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302MaxTries"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainArgs")
    def attr_follow302_retain_args(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainArgs: Retain the original request parameter switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302RetainArgs"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainHeader")
    def attr_follow302_retain_header(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302RetainHeader: Retain the original request header switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302RetainHeader"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302TargetHost")
    def attr_follow302_target_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Follow302TargetHost: Modify the source host after 302.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFollow302TargetHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHost")
    def attr_origin_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHost: The HOST carried in the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpPort")
    def attr_origin_http_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHttpPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpsPort")
    def attr_origin_https_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginHttpsPort: The port of the origin station accessed when the HTTPS protocol is used to return to the origin.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginHttpsPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginMtls")
    def attr_origin_mtls(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginMtls: The mtls switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginMtls"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginReadTimeout")
    def attr_origin_read_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginReadTimeout: Read timeout interval of the source station (s).'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginReadTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginScheme")
    def attr_origin_scheme(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginScheme: The protocol used by the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginScheme"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginSni")
    def attr_origin_sni(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginSni: SNI carried in the back-to-origin request.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginSni"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginVerify")
    def attr_origin_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OriginVerify: Source station certificate verification switch.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOriginVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrRange")
    def attr_range(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Range: Use the range sharding method to download the file from the source.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRange"))

    @builtins.property
    @jsii.member(jsii_name="attrRangeChunkSize")
    def attr_range_chunk_size(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RangeChunkSize: range shard size.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRangeChunkSize"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "OriginRuleProps":
        return typing.cast("OriginRuleProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76a7535cc17e7ede8c225e1f5d75a9002d26ac5367b4fb53e6111394601ae03c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed9e8b77815ca1250be788532591dc6c3e0259f7376987471d9b2a305f413f94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6b76be4091371070385699c6d07e41a34a6310a823d18dd2e908853ca97cea9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.OriginRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "dns_record": "dnsRecord",
        "follow302_enable": "follow302Enable",
        "follow302_max_tries": "follow302MaxTries",
        "follow302_retain_args": "follow302RetainArgs",
        "follow302_retain_header": "follow302RetainHeader",
        "follow302_target_host": "follow302TargetHost",
        "origin_host": "originHost",
        "origin_http_port": "originHttpPort",
        "origin_https_port": "originHttpsPort",
        "origin_mtls": "originMtls",
        "origin_read_timeout": "originReadTimeout",
        "origin_scheme": "originScheme",
        "origin_sni": "originSni",
        "origin_verify": "originVerify",
        "range": "range",
        "range_chunk_size": "rangeChunkSize",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class OriginRuleProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        dns_record: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_max_tries: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_retain_args: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_retain_header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_target_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_http_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_https_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_mtls: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_read_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_scheme: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_sni: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        range: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        range_chunk_size: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``OriginRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originrule

        :param site_id: Property siteId: The site ID.
        :param dns_record: Property dnsRecord: Overwrite the DNS resolution record of the origin request.
        :param follow302_enable: Property follow302Enable: Return Source 302 follow switch. Value range: - ``on``: ON. - ``off``: closed.
        :param follow302_max_tries: Property follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].
        :param follow302_retain_args: Property follow302RetainArgs: Retain the original request parameter switch. Value range: - ``on``: ON. - ``off``: closed.
        :param follow302_retain_header: Property follow302RetainHeader: Retain the original request header switch. Value range: - ``on``: ON. - ``off``: closed.
        :param follow302_target_host: Property follow302TargetHost: Modify the source host after 302.
        :param origin_host: Property originHost: The HOST carried in the back-to-origin request.
        :param origin_http_port: Property originHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.
        :param origin_https_port: Property originHttpsPort: Port of the origin server when using the HTTPS protocol for origin requests.
        :param origin_mtls: Property originMtls: The mtls switch. Value range: - ``on``: ON. - ``off``: closed.
        :param origin_read_timeout: Property originReadTimeout: Read timeout interval of the source station (s).
        :param origin_scheme: Property originScheme: The protocol used by the back-to-origin request. Value range: - ``http``: uses the http protocol to return to the source. - ``https``: uses the https protocol to return to the source. - ``follow``: follows the Client Protocol back to the source.
        :param origin_sni: Property originSni: SNI carried in the back-to-origin request.
        :param origin_verify: Property originVerify: Source station certificate verification switch. Value range: - ``on``: ON. - ``off``: closed.
        :param range: Property range: Use the range sharding method to download the file from the source. Value range: - ``on``: Open. - ``off``: off. - ``force``: force.
        :param range_chunk_size: Property rangeChunkSize: range shard size.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: - Match all incoming requests: value set to true - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: - ``on``: open. - ``off``: close.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param sequence: Property sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c0e7f00fe85cd4a6f2855f3c622716fc5fad984b58e8252b5fa504a346b77df)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument dns_record", value=dns_record, expected_type=type_hints["dns_record"])
            check_type(argname="argument follow302_enable", value=follow302_enable, expected_type=type_hints["follow302_enable"])
            check_type(argname="argument follow302_max_tries", value=follow302_max_tries, expected_type=type_hints["follow302_max_tries"])
            check_type(argname="argument follow302_retain_args", value=follow302_retain_args, expected_type=type_hints["follow302_retain_args"])
            check_type(argname="argument follow302_retain_header", value=follow302_retain_header, expected_type=type_hints["follow302_retain_header"])
            check_type(argname="argument follow302_target_host", value=follow302_target_host, expected_type=type_hints["follow302_target_host"])
            check_type(argname="argument origin_host", value=origin_host, expected_type=type_hints["origin_host"])
            check_type(argname="argument origin_http_port", value=origin_http_port, expected_type=type_hints["origin_http_port"])
            check_type(argname="argument origin_https_port", value=origin_https_port, expected_type=type_hints["origin_https_port"])
            check_type(argname="argument origin_mtls", value=origin_mtls, expected_type=type_hints["origin_mtls"])
            check_type(argname="argument origin_read_timeout", value=origin_read_timeout, expected_type=type_hints["origin_read_timeout"])
            check_type(argname="argument origin_scheme", value=origin_scheme, expected_type=type_hints["origin_scheme"])
            check_type(argname="argument origin_sni", value=origin_sni, expected_type=type_hints["origin_sni"])
            check_type(argname="argument origin_verify", value=origin_verify, expected_type=type_hints["origin_verify"])
            check_type(argname="argument range", value=range, expected_type=type_hints["range"])
            check_type(argname="argument range_chunk_size", value=range_chunk_size, expected_type=type_hints["range_chunk_size"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if dns_record is not None:
            self._values["dns_record"] = dns_record
        if follow302_enable is not None:
            self._values["follow302_enable"] = follow302_enable
        if follow302_max_tries is not None:
            self._values["follow302_max_tries"] = follow302_max_tries
        if follow302_retain_args is not None:
            self._values["follow302_retain_args"] = follow302_retain_args
        if follow302_retain_header is not None:
            self._values["follow302_retain_header"] = follow302_retain_header
        if follow302_target_host is not None:
            self._values["follow302_target_host"] = follow302_target_host
        if origin_host is not None:
            self._values["origin_host"] = origin_host
        if origin_http_port is not None:
            self._values["origin_http_port"] = origin_http_port
        if origin_https_port is not None:
            self._values["origin_https_port"] = origin_https_port
        if origin_mtls is not None:
            self._values["origin_mtls"] = origin_mtls
        if origin_read_timeout is not None:
            self._values["origin_read_timeout"] = origin_read_timeout
        if origin_scheme is not None:
            self._values["origin_scheme"] = origin_scheme
        if origin_sni is not None:
            self._values["origin_sni"] = origin_sni
        if origin_verify is not None:
            self._values["origin_verify"] = origin_verify
        if range is not None:
            self._values["range"] = range
        if range_chunk_size is not None:
            self._values["range_chunk_size"] = range_chunk_size
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def dns_record(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property dnsRecord: Overwrite the DNS resolution record of the origin request.'''
        result = self._values.get("dns_record")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property follow302Enable: Return Source 302 follow switch.

        Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_max_tries(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].'''
        result = self._values.get("follow302_max_tries")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_retain_args(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property follow302RetainArgs: Retain the original request parameter switch.

        Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_retain_args")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_retain_header(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property follow302RetainHeader: Retain the original request header switch.

        Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_retain_header")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_target_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property follow302TargetHost: Modify the source host after 302.'''
        result = self._values.get("follow302_target_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originHost: The HOST carried in the back-to-origin request.'''
        result = self._values.get("origin_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_http_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.'''
        result = self._values.get("origin_http_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_https_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originHttpsPort: Port of the origin server when using the HTTPS protocol for origin requests.'''
        result = self._values.get("origin_https_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_mtls(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originMtls: The mtls switch.

        Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("origin_mtls")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_read_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originReadTimeout: Read timeout interval of the source station (s).'''
        result = self._values.get("origin_read_timeout")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_scheme(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originScheme: The protocol used by the back-to-origin request.

        Value range:

        - ``http``: uses the http protocol to return to the source.
        - ``https``: uses the https protocol to return to the source.
        - ``follow``: follows the Client Protocol back to the source.
        '''
        result = self._values.get("origin_scheme")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_sni(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originSni: SNI carried in the back-to-origin request.'''
        result = self._values.get("origin_sni")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property originVerify: Source station certificate verification switch.

        Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("origin_verify")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def range(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property range: Use the range sharding method to download the file from the source.

        Value range:

        - ``on``: Open.
        - ``off``: off.
        - ``force``: force.
        '''
        result = self._values.get("range")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def range_chunk_size(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rangeChunkSize: range shard size.'''
        result = self._values.get("range_chunk_size")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "OriginRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IRedirectRule)
class RedirectRule(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RedirectRule",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::RedirectRule``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosRedirectRule``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-redirectrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RedirectRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7c4122561b787e4a2f3e3585b44e5ff9b17e18f8ed26d38a664472045b8c376)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrReserveQueryString")
    def attr_reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ReserveQueryString: Indicates whether the feature of retaining the query string is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrReserveQueryString"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrStatusCode")
    def attr_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute StatusCode: The response code that you want to use to indicate URL redirection.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetUrl")
    def attr_target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetUrl: The destination URL to which requests are redirected.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTargetUrl"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The redirect type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "RedirectRuleProps":
        return typing.cast("RedirectRuleProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43e0d811fb15c7a37e505331f651d3df34a2057d76893716d162dac5374efc79)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6fc30eb8775f739211de0f9abb19df9a4a6759796def7dfc2c72b3b47004f9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d8fe138107b7c74f8c891255cdd4b030be6fc68a3b9b49c216bae92e0883a65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RedirectRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "reserve_query_string": "reserveQueryString",
        "site_id": "siteId",
        "status_code": "statusCode",
        "target_url": "targetUrl",
        "type": "type",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "site_version": "siteVersion",
    },
)
class RedirectRuleProps:
    def __init__(
        self,
        *,
        reserve_query_string: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        target_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RedirectRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-redirectrule

        :param reserve_query_string: Property reserveQueryString: Indicates whether the feature of retaining the query string is enabled. Valid values: on off.
        :param site_id: Property siteId: The website ID.
        :param status_code: Property statusCode: The response code that you want to use to indicate URL redirection. Valid values: - 301 - 302 - 303 - 307 - 308.
        :param target_url: Property targetUrl: The destination URL to which requests are redirected.
        :param type: Property type: The redirect type. Valid value: - static.
        :param rule: Property rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios: Match all incoming requests: value set to true Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        :param rule_enable: Property ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range: on off.
        :param rule_name: Property ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        :param site_version: Property siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__994b536d47e7011ecf48871debdaa29f6838481821f3fea80d2c16513db38717)
            check_type(argname="argument reserve_query_string", value=reserve_query_string, expected_type=type_hints["reserve_query_string"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument status_code", value=status_code, expected_type=type_hints["status_code"])
            check_type(argname="argument target_url", value=target_url, expected_type=type_hints["target_url"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "reserve_query_string": reserve_query_string,
            "site_id": site_id,
            "status_code": status_code,
            "target_url": target_url,
            "type": type,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property reserveQueryString: Indicates whether the feature of retaining the query string is enabled.

        Valid values:
        on
        off.
        '''
        result = self._values.get("reserve_query_string")
        assert result is not None, "Required property 'reserve_query_string' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The website ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property statusCode: The response code that you want to use to indicate URL redirection.

        Valid values:

        - 301
        - 302
        - 303
        - 307
        -
          1.
        '''
        result = self._values.get("status_code")
        assert result is not None, "Required property 'status_code' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property targetUrl: The destination URL to which requests are redirected.'''
        result = self._values.get("target_url")
        assert result is not None, "Required property 'target_url' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def type(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property type: The redirect type.

        Valid value:

        - static.
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set. Value range:
        on
        off.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ruleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property siteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RedirectRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosCertificate(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosCertificate",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::Certificate``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``Certificate`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-certificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosCertificateProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6a3bac1bc0672a45e4e877d60d8f75a10c88d4d2c22dc826698820651b2bd28)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__475c18897bf2129d0955f59f2232a455be76e1141ee10d72c63cb7f2e1f4506f)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrApplyCode")
    def attr_apply_code(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ApplyCode: Certificate application error code.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrApplyCode"))

    @builtins.property
    @jsii.member(jsii_name="attrApplyMessage")
    def attr_apply_message(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ApplyMessage: Certificate application error message.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrApplyMessage"))

    @builtins.property
    @jsii.member(jsii_name="attrCasId")
    def attr_cas_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CasId: Cloud certificate ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCasId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertId")
    def attr_cert_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CertId: The certificate Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Certificate: Certificate content.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrCertName")
    def attr_cert_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CertName: The certificate name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CommonName: Common Name (CN) field of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: Creation time.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDcv")
    def attr_dcv(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DCV: DCV information.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDcv"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Domains: A list of domain names. Multiple domain names are separated by commas.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrFingerprintSha256")
    def attr_fingerprint_sha256(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: FingerprintSha256: SHA256 fingerprint of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFingerprintSha256"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Issuer: Certificate issuer.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuerCn")
    def attr_issuer_cn(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: IssuerCN: Common name of the certificate issuer.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrIssuerCn"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotAfter: End time of the certificate validity period.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotBefore: Start time of the certificate validity period.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubAlg")
    def attr_pub_alg(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: PubAlg: Certificate public key algorithm.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrPubAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSerialNumber")
    def attr_serial_number(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SerialNumber: Serial number of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSerialNumber"))

    @builtins.property
    @jsii.member(jsii_name="attrSigAlg")
    def attr_sig_alg(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SigAlg: Certificate signature algorithm.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSigAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: The site ID, which can be obtained by calling the ListSites interface.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteName: Site name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UpdateTime: Update time.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="createdType")
    def created_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        createdType: The certificate type.

        - cas (Certificate Center Certificate)
        - upload (custom upload certificate)
        - free( Free certificate).
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "createdType"))

    @created_type.setter
    def created_type(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca84c43981975621bde78d128db2d2244c328f918191e817470a4a52c488564a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "createdType", value)

    @builtins.property
    @jsii.member(jsii_name="domains")
    def domains(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]:
        '''
        :Property: domains: A list of domain names. Multiple domain names are separated by commas.
        '''
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]], jsii.get(self, "domains"))

    @domains.setter
    def domains(
        self,
        value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f907656b514d09937d4263be06a022d8efb0a4f128989e2e9625fc5f4aee334)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "domains", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66c028758d1ceaa8e7d421e94d0967ba3c8c2d070c22b2e2e0cfca3d596da960)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites interface.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6da3e0b69fc5a992cdaa3c5af668bfe873e9c84694c020e8574e46a3dca62fec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="casId")
    def cas_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: casId: Cloud certificate ID.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "casId"))

    @cas_id.setter
    def cas_id(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__207079ede392eef654e0f3530ea1ab52a02bea57c3b916eb20365965ddd38a67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "casId", value)

    @builtins.property
    @jsii.member(jsii_name="certId")
    def cert_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certId: The certificate Id.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "certId"))

    @cert_id.setter
    def cert_id(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ecb17bd80261320a3e1d8faf6d300601bfec113f29f7bf6d91196f90ad64f5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certId", value)

    @builtins.property
    @jsii.member(jsii_name="certificate")
    def certificate(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certificate: Certificate content.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "certificate"))

    @certificate.setter
    def certificate(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90f2fbfcd4988f52433885cf31fa6bdc84a19aea110eed82461422f6a70c9933)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certificate", value)

    @builtins.property
    @jsii.member(jsii_name="certName")
    def cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certName: The certificate name.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "certName"))

    @cert_name.setter
    def cert_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f14533c704a993c8babb46828f113f98b7e25ccd63331d11170177c46fd130e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certName", value)

    @builtins.property
    @jsii.member(jsii_name="privateKey")
    def private_key(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: privateKey: The certificate private key.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "privateKey"))

    @private_key.setter
    def private_key(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bff28deb67d6e37268412e259a15b660d118c4c0c03373bd7f44e6674008311)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "privateKey", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosCertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "created_type": "createdType",
        "domains": "domains",
        "site_id": "siteId",
        "cas_id": "casId",
        "cert_id": "certId",
        "certificate": "certificate",
        "cert_name": "certName",
        "private_key": "privateKey",
    },
)
class RosCertificateProps:
    def __init__(
        self,
        *,
        created_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        domains: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        cas_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        cert_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        certificate: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosCertificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-certificate

        :param created_type: 
        :param domains: 
        :param site_id: 
        :param cas_id: 
        :param cert_id: 
        :param certificate: 
        :param cert_name: 
        :param private_key: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d96fc341ed04fdfc938ff956500f5c4c9d0553823df4a8372d2deb0b8b87992)
            check_type(argname="argument created_type", value=created_type, expected_type=type_hints["created_type"])
            check_type(argname="argument domains", value=domains, expected_type=type_hints["domains"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument cas_id", value=cas_id, expected_type=type_hints["cas_id"])
            check_type(argname="argument cert_id", value=cert_id, expected_type=type_hints["cert_id"])
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument cert_name", value=cert_name, expected_type=type_hints["cert_name"])
            check_type(argname="argument private_key", value=private_key, expected_type=type_hints["private_key"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "created_type": created_type,
            "domains": domains,
            "site_id": site_id,
        }
        if cas_id is not None:
            self._values["cas_id"] = cas_id
        if cert_id is not None:
            self._values["cert_id"] = cert_id
        if certificate is not None:
            self._values["certificate"] = certificate
        if cert_name is not None:
            self._values["cert_name"] = cert_name
        if private_key is not None:
            self._values["private_key"] = private_key

    @builtins.property
    def created_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        createdType: The certificate type.

        - cas (Certificate Center Certificate)
        - upload (custom upload certificate)
        - free( Free certificate).
        '''
        result = self._values.get("created_type")
        assert result is not None, "Required property 'created_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def domains(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]:
        '''
        :Property: domains: A list of domain names. Multiple domain names are separated by commas.
        '''
        result = self._values.get("domains")
        assert result is not None, "Required property 'domains' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites interface.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def cas_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: casId: Cloud certificate ID.
        '''
        result = self._values.get("cas_id")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def cert_id(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certId: The certificate Id.
        '''
        result = self._values.get("cert_id")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def certificate(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certificate: Certificate content.
        '''
        result = self._values.get("certificate")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: certName: The certificate name.
        '''
        result = self._values.get("cert_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def private_key(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: privateKey: The certificate private key.
        '''
        result = self._values.get("private_key")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosCertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosClientCaCertificate(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosClientCaCertificate",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::ClientCaCertificate``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``ClientCaCertificate`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcacertificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosClientCaCertificateProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3acbd63bc946fd2b0a8f3590133ce73bb4371cb7e1630d4a233376399463ee7)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f8b4bc7c52b11e2f0f53518b733398c0d512d7005b978598b1210d7a0fa50b9)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Certificate: Certificate content.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertId")
    def attr_client_ca_cert_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ClientCaCertId: ClientCaCertificate Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrClientCaCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertName")
    def attr_client_ca_cert_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ClientCaCertName: The certificate name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrClientCaCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CommonName: The certificate common name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: Creation time.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Issuer: Certificate Authority.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotAfter: The expiration date of the certificate validity period.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotBefore: The start time of the certificate validity period.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: PubkeyAlgorithm: Certificate public key algorithm.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SAN: Alternate certificate subject name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SignatureAlgorithm: Certificate signature algorithm.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: Site Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteName: The website name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Type: The certificate type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UpdateTime: Update time.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="certificate")
    def certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: certificate: Certificate content.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "certificate"))

    @certificate.setter
    def certificate(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f818a4d204c83146d7678cfc6872a7d4d2ecb6719e6c22ef5ae1bc453e1e2072)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certificate", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__258dcc6507032556bf6f40eedb54d79edf0bd149507a3c6d8382d78dc60ef789)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site Id.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__092e48cc6d83d69b7c21b66d2d0b9ce4c168a2be343fdb2b3dbbc5cb20ccb040)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="clientCaCertName")
    def client_ca_cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: clientCaCertName: The certificate name.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "clientCaCertName"))

    @client_ca_cert_name.setter
    def client_ca_cert_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9af818ff55532f450b78663c8fb6872b2d5822a971fabb6579936bb4b987b8ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "clientCaCertName", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosClientCaCertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "certificate": "certificate",
        "site_id": "siteId",
        "client_ca_cert_name": "clientCaCertName",
    },
)
class RosClientCaCertificateProps:
    def __init__(
        self,
        *,
        certificate: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        client_ca_cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosClientCaCertificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcacertificate

        :param certificate: 
        :param site_id: 
        :param client_ca_cert_name: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d80308a1a9c5674d66a1010a8db73a7d1466393a26b5480d05ffddc9f3aefe35)
            check_type(argname="argument certificate", value=certificate, expected_type=type_hints["certificate"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument client_ca_cert_name", value=client_ca_cert_name, expected_type=type_hints["client_ca_cert_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "certificate": certificate,
            "site_id": site_id,
        }
        if client_ca_cert_name is not None:
            self._values["client_ca_cert_name"] = client_ca_cert_name

    @builtins.property
    def certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: certificate: Certificate content.
        '''
        result = self._values.get("certificate")
        assert result is not None, "Required property 'certificate' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site Id.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def client_ca_cert_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: clientCaCertName: The certificate name.
        '''
        result = self._values.get("client_ca_cert_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosClientCaCertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosClientCertificate(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosClientCertificate",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::ClientCertificate``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``ClientCertificate`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcertificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosClientCertificateProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f1fbf631696556b0ab2a5e22b17cab33471d44310822c90b5cd464f33343933)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd0fe5133a16de95fc49760cd5bbc48da63659a96c0c6cab5fae8dc678b07a63)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCaCertificateId")
    def attr_ca_certificate_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CACertificateId: The ID of the CA certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCaCertificateId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Certificate: Certificate content.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertId")
    def attr_client_cert_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ClientCertId: ClientCertificate Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrClientCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertificateName")
    def attr_client_certificate_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ClientCertificateName: The certificate name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrClientCertificateName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CommonName: The Common Name of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: The time when the certificate was created.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Issuer: The certificate authority (CA) that issued the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotAfter: The time when the certificate expires.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NotBefore: The time when the certificate takes effect.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: PubkeyAlgorithm: The public-key algorithm of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SAN: The Subject Alternative Name (SAN) of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SignatureAlgorithm: The signature algorithm of the certificate.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: Site Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteName: The website name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Type: The certificate type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UpdateTime: The time when the certificate was updated.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8addc9d542e2f2dbe232f5662853d5c22312add3365e5c8c497ed7f13b7dbe7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site Id.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2eae976f576c5b5f4cab40541a7f14f1cffa6323532d7e3d41a5f5518fdef28e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="validityDays")
    def validity_days(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: validityDays: Certificate validity period.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "validityDays"))

    @validity_days.setter
    def validity_days(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c96d122a9945d184a1cd7e6fba14e68422eee324b5c684de4d6483d16c9b1cdc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "validityDays", value)

    @builtins.property
    @jsii.member(jsii_name="csr")
    def csr(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: csr: Certificate signing request content.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "csr"))

    @csr.setter
    def csr(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c1b64b4ca787650d98c741b33303e46529c849fe782c81e9847128e8e01eb73e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "csr", value)

    @builtins.property
    @jsii.member(jsii_name="pkeyType")
    def pkey_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: pkeyType: The private key algorithm type.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "pkeyType"))

    @pkey_type.setter
    def pkey_type(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa961d269f69f3a49a459f08aa8c607cbd8031dbdb2d55c94b0b91df3d3129d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pkeyType", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosClientCertificateProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "validity_days": "validityDays",
        "csr": "csr",
        "pkey_type": "pkeyType",
    },
)
class RosClientCertificateProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        validity_days: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        csr: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        pkey_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosClientCertificate``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcertificate

        :param site_id: 
        :param validity_days: 
        :param csr: 
        :param pkey_type: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd9db4fe9b7160d2710ad2d443e2870849e814867f74f42a275b4ca4715fd764)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument validity_days", value=validity_days, expected_type=type_hints["validity_days"])
            check_type(argname="argument csr", value=csr, expected_type=type_hints["csr"])
            check_type(argname="argument pkey_type", value=pkey_type, expected_type=type_hints["pkey_type"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
            "validity_days": validity_days,
        }
        if csr is not None:
            self._values["csr"] = csr
        if pkey_type is not None:
            self._values["pkey_type"] = pkey_type

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site Id.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def validity_days(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: validityDays: Certificate validity period.
        '''
        result = self._values.get("validity_days")
        assert result is not None, "Required property 'validity_days' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def csr(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: csr: Certificate signing request content.
        '''
        result = self._values.get("csr")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def pkey_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: pkeyType: The private key algorithm type.
        '''
        result = self._values.get("pkey_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosClientCertificateProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosCompressionRule(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosCompressionRule",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::CompressionRule``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``CompressionRule`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-compressionrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosCompressionRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab2d8050e9cbee079787d9103719a11350a59d6437f89e1184f169dae1366a0b)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__377f3fb7810d196ac1cc0cbe4d5e292ca97991aaf1a7aae441a1730939190c5f)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrBrotli")
    def attr_brotli(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Brotli: Brotli compression.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrBrotli"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The type of the configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGzip")
    def attr_gzip(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Gzip: Gzip compression.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrGzip"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrZstd")
    def attr_zstd(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Zstd: Zstd compression.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrZstd"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcc52f7a0d38bf94b94768e773629cf92e17add8d00c3f47ef204772ae8e7ef8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8710f6be55d118e4e7d3fdaf755492d6b3ef5c603fb646cd9631160b454f2fbc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="brotli")
    def brotli(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        brotli: Brotli compression. Value range:
        on: Enable.
        off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "brotli"))

    @brotli.setter
    def brotli(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcdf6e8784a05fdabed7604a6ff0c30cdfd6e68e7c596536a15ba7c11852dc2d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "brotli", value)

    @builtins.property
    @jsii.member(jsii_name="gzip")
    def gzip(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        gzip: Gzip compression. Value range:
        on: Enable.
        off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "gzip"))

    @gzip.setter
    def gzip(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8f1091fc00ac0a6abb545bc3808d9ed350883034e3f35700884da74caa921b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gzip", value)

    @builtins.property
    @jsii.member(jsii_name="paymentType")
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "paymentType"))

    @payment_type.setter
    def payment_type(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef6dce2fbccf982a40f32282b5cf749909ab6c026857d4e3477e21189aee0681)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "paymentType", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9dfdcae08dbecc56671f5b464e86b31629344d3e033672f112a0ad2a9f4463f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enable.
        off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50bba9747d7cca605c1763e349eec7fe45afba62ecbd5b2417319f5dd70ab763)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8053608321ddc8a1880db867fc1df7e78ea0be640e521e2f89a5cc21f8d6d087)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27093c04ba319129986b466e5d6f3b8eab3b477eb0644fd03e829070cadb7260)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6ecf7394e83d1cbef5037fdda4a2e4197db5a9bfc2cc6a5ee0f934305a94f03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)

    @builtins.property
    @jsii.member(jsii_name="zstd")
    def zstd(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        zstd: Zstd compression. Value range:
        on: Enable.
        off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "zstd"))

    @zstd.setter
    def zstd(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7039e92f5648929842554a604d4664c6fc076a027a75ff9b92d05c48a334cfc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "zstd", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosCompressionRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "brotli": "brotli",
        "gzip": "gzip",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
        "zstd": "zstd",
    },
)
class RosCompressionRuleProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        brotli: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        gzip: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        zstd: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosCompressionRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-compressionrule

        :param site_id: 
        :param brotli: 
        :param gzip: 
        :param payment_type: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        :param zstd: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__574fd1882433c0c62d4983759fa454656bbe592f038940e426a3e2120face1cd)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument brotli", value=brotli, expected_type=type_hints["brotli"])
            check_type(argname="argument gzip", value=gzip, expected_type=type_hints["gzip"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
            check_type(argname="argument zstd", value=zstd, expected_type=type_hints["zstd"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if brotli is not None:
            self._values["brotli"] = brotli
        if gzip is not None:
            self._values["gzip"] = gzip
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version
        if zstd is not None:
            self._values["zstd"] = zstd

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def brotli(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        brotli: Brotli compression. Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("brotli")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def gzip(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        gzip: Gzip compression. Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("gzip")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def zstd(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        zstd: Zstd compression. Value range:
        on: Enable.
        off: Disable.
        '''
        result = self._values.get("zstd")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosCompressionRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosCustomScenePolicy(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosCustomScenePolicy",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::CustomScenePolicy``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``CustomScenePolicy`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-customscenepolicy
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosCustomScenePolicyProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5ea99a10d7932b3862dcff1ad30dcd1c7e1320a0342aae69190b19238099b89)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c805e96ca2d59fe4386aa07a0d7a3f045806745ef6f0827326106388b79c19a5)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: The time when the policy takes effect.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomScenePolicyName")
    def attr_custom_scene_policy_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CustomScenePolicyName: The name of the policy.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCustomScenePolicyName"))

    @builtins.property
    @jsii.member(jsii_name="attrEndTime")
    def attr_end_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: EndTime: The time when the policy expires.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrEndTime"))

    @builtins.property
    @jsii.member(jsii_name="attrObjects")
    def attr_objects(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Objects: The IDs of websites associated.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrObjects"))

    @builtins.property
    @jsii.member(jsii_name="attrPolicyId")
    def attr_policy_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: PolicyId: The Id of the Policy.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrPolicyId"))

    @builtins.property
    @jsii.member(jsii_name="attrTemplate")
    def attr_template(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Template: The name of the policy template.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTemplate"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="createTime")
    def create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        createTime: The time when the policy takes effect.
        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "createTime"))

    @create_time.setter
    def create_time(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02e69ec1e39d3a34c2ea425359b6caf71a39e9735bf5b0dd219c3181103493dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "createTime", value)

    @builtins.property
    @jsii.member(jsii_name="customScenePolicyName")
    def custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: customScenePolicyName: The policy name.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "customScenePolicyName"))

    @custom_scene_policy_name.setter
    def custom_scene_policy_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8285f447dae7c84980297fd6af17bb93bb22b2f4a065ba909c15a6c3273450ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customScenePolicyName", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__398ef6bae3bb63291373c4ac52bcc4ecb8baa64e4a41185f696cd3fd7f812d97)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="endTime")
    def end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        endTime: The time when the policy expires.
        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "endTime"))

    @end_time.setter
    def end_time(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac1b9c5059fab483cc8361972556f3dd1f6088ae3bb2496b471fd5afe0a86cc6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endTime", value)

    @builtins.property
    @jsii.member(jsii_name="objects")
    def objects(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: objects: The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "objects"))

    @objects.setter
    def objects(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a05e3f6a3dbaf6ecc417ecb92e3e7d98fb6f652455b6875c5340e579009b59e9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "objects", value)

    @builtins.property
    @jsii.member(jsii_name="template")
    def template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        template: The name of the policy template. Valid value:
        promotion: major events.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "template"))

    @template.setter
    def template(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e58dfe5f0ea5638913ea153b92b42cce8efced79f512a8142d2dad8a2ecb9a3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "template", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosCustomScenePolicyProps",
    jsii_struct_bases=[],
    name_mapping={
        "create_time": "createTime",
        "custom_scene_policy_name": "customScenePolicyName",
        "end_time": "endTime",
        "objects": "objects",
        "template": "template",
    },
)
class RosCustomScenePolicyProps:
    def __init__(
        self,
        *,
        create_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        custom_scene_policy_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        end_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        objects: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        template: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        '''Properties for defining a ``RosCustomScenePolicy``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-customscenepolicy

        :param create_time: 
        :param custom_scene_policy_name: 
        :param end_time: 
        :param objects: 
        :param template: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e2ea2e37bceef508cf5bc204f1c4fedca49af7c1a6377941d5023086b0d5adb)
            check_type(argname="argument create_time", value=create_time, expected_type=type_hints["create_time"])
            check_type(argname="argument custom_scene_policy_name", value=custom_scene_policy_name, expected_type=type_hints["custom_scene_policy_name"])
            check_type(argname="argument end_time", value=end_time, expected_type=type_hints["end_time"])
            check_type(argname="argument objects", value=objects, expected_type=type_hints["objects"])
            check_type(argname="argument template", value=template, expected_type=type_hints["template"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "create_time": create_time,
            "custom_scene_policy_name": custom_scene_policy_name,
            "end_time": end_time,
            "objects": objects,
            "template": template,
        }

    @builtins.property
    def create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        createTime: The time when the policy takes effect.
        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        result = self._values.get("create_time")
        assert result is not None, "Required property 'create_time' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: customScenePolicyName: The policy name.
        '''
        result = self._values.get("custom_scene_policy_name")
        assert result is not None, "Required property 'custom_scene_policy_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        endTime: The time when the policy expires.
        The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
        '''
        result = self._values.get("end_time")
        assert result is not None, "Required property 'end_time' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def objects(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: objects: The IDs of the websites that you want to associate with the policy. Separate multiple IDs with commas (,).
        '''
        result = self._values.get("objects")
        assert result is not None, "Required property 'objects' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        template: The name of the policy template. Valid value:
        promotion: major events.
        '''
        result = self._values.get("template")
        assert result is not None, "Required property 'template' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosCustomScenePolicyProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosEdgeContainerApp(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosEdgeContainerApp",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::EdgeContainerApp``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``EdgeContainerApp`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapp
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosEdgeContainerAppProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__583e0e85fdbc5f06b3ed0967cc64ccc989ae45f5e48a62e4ae32570e5869beff)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4055b733feb9a082f5c6b090c84196511c74c3c021d4209a0b699247e1ab3207)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrAppStatus")
    def attr_app_status(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AppStatus: The status of the application.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAppStatus"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: The time when the application was created.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomainName")
    def attr_domain_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DomainName: The domain name that is associated with the application. If no domain name is associated with the application, the value is an empty string.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDomainName"))

    @builtins.property
    @jsii.member(jsii_name="attrEdgeContainerAppName")
    def attr_edge_container_app_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: EdgeContainerAppName: The name of the application.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrEdgeContainerAppName"))

    @builtins.property
    @jsii.member(jsii_name="attrGatewayType")
    def attr_gateway_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: GatewayType: The type of the gateway.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrGatewayType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckFailTimes")
    def attr_health_check_fail_times(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckFailTimes: TThe number of consecutive failed health checks required for an application to be considered as unhealthy.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckFailTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHost")
    def attr_health_check_host(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckHost: The domain name that is used for health checks.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckHost"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHttpCode")
    def attr_health_check_http_code(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckHttpCode: The HTTP status code returned for a successful health check.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckHttpCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckInterval")
    def attr_health_check_interval(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckInterval: The interval between two consecutive health checks. Unit: seconds.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckInterval"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckMethod")
    def attr_health_check_method(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckMethod: The HTTP request method for health checks.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckPort")
    def attr_health_check_port(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckPort: The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckPort"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckSuccTimes")
    def attr_health_check_succ_times(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckSuccTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckTimeout")
    def attr_health_check_timeout(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckTimeout: The timeout period of a health check response.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckType")
    def attr_health_check_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckType: The health check type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckUri")
    def attr_health_check_uri(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HealthCheckUri: The URI used for health checks.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHealthCheckUri"))

    @builtins.property
    @jsii.member(jsii_name="attrQuicCid")
    def attr_quic_cid(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: QuicCid: Indicates whether QUIC is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrQuicCid"))

    @builtins.property
    @jsii.member(jsii_name="attrRemarks")
    def attr_remarks(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Remarks: The remarks. This parameter is empty by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRemarks"))

    @builtins.property
    @jsii.member(jsii_name="attrServicePort")
    def attr_service_port(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ServicePort: The server port.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrServicePort"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetPort")
    def attr_target_port(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TargetPort: The backend port, which is also the service port of the application.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTargetPort"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UpdateTime: The time when the application was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrVersionCount")
    def attr_version_count(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: VersionCount: The number of versions of the application.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrVersionCount"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="edgeContainerAppName")
    def edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: edgeContainerAppName: The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "edgeContainerAppName"))

    @edge_container_app_name.setter
    def edge_container_app_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b45e8954367bbbc31e2f1e48f656c11e4c2f4212bd06930d4796074f99ecbd9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "edgeContainerAppName", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38e77fd803ca1033145405871a1ebce464d59d767e30502c3adce21c1fc89f12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="servicePort")
    def service_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: servicePort: The server port. Valid values: 1 to 65535.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "servicePort"))

    @service_port.setter
    def service_port(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__664593c224ee1b3aec1f5fbf34bd363e9aa2d078a222052cde539e9929f5d6e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "servicePort", value)

    @builtins.property
    @jsii.member(jsii_name="targetPort")
    def target_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: targetPort: The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "targetPort"))

    @target_port.setter
    def target_port(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3153441ed93d66c27d8f4e41aac27e4422b89fe5581319cd3e1e684c7774f5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetPort", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckFailTimes")
    def health_check_fail_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckFailTimes: The number of consecutive failed health checks required for an application to be considered as unhealthy. Valid values: 1 to 10. Default value: 5.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckFailTimes"))

    @health_check_fail_times.setter
    def health_check_fail_times(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85fd2d4193347b355cf36e197cea04538edc1ae06e1a35b76a24ce8bde239f1b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckFailTimes", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckHost")
    def health_check_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckHost: The domain name that is used for health checks. This parameter is empty by default.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckHost"))

    @health_check_host.setter
    def health_check_host(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__490d7b0704ea9959efd3d21026980736e9686ecba716803eb2ac4910ceaf34ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckHost", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckHttpCode")
    def health_check_http_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckHttpCode: The HTTP status code returned for a successful health check. Valid values:
        http_2xx (default)http_3xx
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckHttpCode"))

    @health_check_http_code.setter
    def health_check_http_code(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2d48887c9d4438a3e9af02439eff8b6000c70718f0b7a908116d158bd6ae6ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckHttpCode", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckInterval")
    def health_check_interval(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckInterval: The interval between two consecutive health checks. Unit: seconds. Valid values: 1 to 50. Default value: 5.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckInterval"))

    @health_check_interval.setter
    def health_check_interval(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__720034bf0cdaec9e5554b177a2096baefdc1fbe5b4661a7dc6f78961c2902bca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckInterval", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckMethod")
    def health_check_method(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckMethod: The HTTP request method for health checks. Valid values:
        HEAD (default): requests the headers of the resource.
        GET: requests the specified resource and returns both the headers and entity body.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckMethod"))

    @health_check_method.setter
    def health_check_method(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__268f1b7e638bc4cf1ba90a3e7169d9ce1be47581cd4b516c36a36fe0d10f87c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckMethod", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckPort")
    def health_check_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckPort: The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckPort"))

    @health_check_port.setter
    def health_check_port(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b90522fbdf472557b0e8f2188c2d239d99de3c93bbb2c8729e84f3ae9a04ea16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckPort", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckSuccTimes")
    def health_check_succ_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckSuccTimes"))

    @health_check_succ_times.setter
    def health_check_succ_times(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f79208e5108ffb9c1a5c1ce9f4ac9a97f925f4ece5fb7e2871c982fc5c6f3901)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckSuccTimes", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckTimeout")
    def health_check_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckTimeout: The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds. Valid values: 1 to 100. Default value: 3.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckTimeout"))

    @health_check_timeout.setter
    def health_check_timeout(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d7ab950b1da74af05cc7c689a94dc06be4dfb096f0148793137b4fbe4fee4e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckTimeout", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckType")
    def health_check_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckType: The health check type. By default, this parameter is left empty. Valid values:
        l4: Layer 4 health check.
        l7: Layer 7 health check.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckType"))

    @health_check_type.setter
    def health_check_type(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4d828d49fc3585b5487a67760577d65c3e38cdb3af9d5c172353f10344095dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckType", value)

    @builtins.property
    @jsii.member(jsii_name="healthCheckUri")
    def health_check_uri(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckUri: The URI used for health checks. The URI must be 1 to 80 characters in length. Default value: "/".
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "healthCheckUri"))

    @health_check_uri.setter
    def health_check_uri(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__068f24ed75e59b055d5c209ded8a3592387c20f6f0df500452a3b1dd4e753267)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "healthCheckUri", value)

    @builtins.property
    @jsii.member(jsii_name="remarks")
    def remarks(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: remarks: The remarks. This parameter is empty by default.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "remarks"))

    @remarks.setter
    def remarks(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25ce8b7d2196196a3a0edb491c9b246e3fc956f99aac1e736ffa0f1880502477)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "remarks", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosEdgeContainerAppProps",
    jsii_struct_bases=[],
    name_mapping={
        "edge_container_app_name": "edgeContainerAppName",
        "service_port": "servicePort",
        "target_port": "targetPort",
        "health_check_fail_times": "healthCheckFailTimes",
        "health_check_host": "healthCheckHost",
        "health_check_http_code": "healthCheckHttpCode",
        "health_check_interval": "healthCheckInterval",
        "health_check_method": "healthCheckMethod",
        "health_check_port": "healthCheckPort",
        "health_check_succ_times": "healthCheckSuccTimes",
        "health_check_timeout": "healthCheckTimeout",
        "health_check_type": "healthCheckType",
        "health_check_uri": "healthCheckUri",
        "remarks": "remarks",
    },
)
class RosEdgeContainerAppProps:
    def __init__(
        self,
        *,
        edge_container_app_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        service_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        target_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        health_check_fail_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_http_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_interval: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_method: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_succ_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        health_check_uri: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        remarks: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosEdgeContainerApp``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapp

        :param edge_container_app_name: 
        :param service_port: 
        :param target_port: 
        :param health_check_fail_times: 
        :param health_check_host: 
        :param health_check_http_code: 
        :param health_check_interval: 
        :param health_check_method: 
        :param health_check_port: 
        :param health_check_succ_times: 
        :param health_check_timeout: 
        :param health_check_type: 
        :param health_check_uri: 
        :param remarks: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88bad2680a78bf26028531b34e8c5dff667665d9b9c29403b6e4cfa8cdfed71b)
            check_type(argname="argument edge_container_app_name", value=edge_container_app_name, expected_type=type_hints["edge_container_app_name"])
            check_type(argname="argument service_port", value=service_port, expected_type=type_hints["service_port"])
            check_type(argname="argument target_port", value=target_port, expected_type=type_hints["target_port"])
            check_type(argname="argument health_check_fail_times", value=health_check_fail_times, expected_type=type_hints["health_check_fail_times"])
            check_type(argname="argument health_check_host", value=health_check_host, expected_type=type_hints["health_check_host"])
            check_type(argname="argument health_check_http_code", value=health_check_http_code, expected_type=type_hints["health_check_http_code"])
            check_type(argname="argument health_check_interval", value=health_check_interval, expected_type=type_hints["health_check_interval"])
            check_type(argname="argument health_check_method", value=health_check_method, expected_type=type_hints["health_check_method"])
            check_type(argname="argument health_check_port", value=health_check_port, expected_type=type_hints["health_check_port"])
            check_type(argname="argument health_check_succ_times", value=health_check_succ_times, expected_type=type_hints["health_check_succ_times"])
            check_type(argname="argument health_check_timeout", value=health_check_timeout, expected_type=type_hints["health_check_timeout"])
            check_type(argname="argument health_check_type", value=health_check_type, expected_type=type_hints["health_check_type"])
            check_type(argname="argument health_check_uri", value=health_check_uri, expected_type=type_hints["health_check_uri"])
            check_type(argname="argument remarks", value=remarks, expected_type=type_hints["remarks"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "edge_container_app_name": edge_container_app_name,
            "service_port": service_port,
            "target_port": target_port,
        }
        if health_check_fail_times is not None:
            self._values["health_check_fail_times"] = health_check_fail_times
        if health_check_host is not None:
            self._values["health_check_host"] = health_check_host
        if health_check_http_code is not None:
            self._values["health_check_http_code"] = health_check_http_code
        if health_check_interval is not None:
            self._values["health_check_interval"] = health_check_interval
        if health_check_method is not None:
            self._values["health_check_method"] = health_check_method
        if health_check_port is not None:
            self._values["health_check_port"] = health_check_port
        if health_check_succ_times is not None:
            self._values["health_check_succ_times"] = health_check_succ_times
        if health_check_timeout is not None:
            self._values["health_check_timeout"] = health_check_timeout
        if health_check_type is not None:
            self._values["health_check_type"] = health_check_type
        if health_check_uri is not None:
            self._values["health_check_uri"] = health_check_uri
        if remarks is not None:
            self._values["remarks"] = remarks

    @builtins.property
    def edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: edgeContainerAppName: The name of the application. The name must start with a lowercase letter and can contain lowercase letters, digits, and hyphens (-). The name must be 6 to 128 characters in length.
        '''
        result = self._values.get("edge_container_app_name")
        assert result is not None, "Required property 'edge_container_app_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def service_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: servicePort: The server port. Valid values: 1 to 65535.
        '''
        result = self._values.get("service_port")
        assert result is not None, "Required property 'service_port' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def target_port(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: targetPort: The backend port, which is also the service port of the application. Valid values: 1 to 65535.
        '''
        result = self._values.get("target_port")
        assert result is not None, "Required property 'target_port' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def health_check_fail_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckFailTimes: The number of consecutive failed health checks required for an application to be considered as unhealthy. Valid values: 1 to 10. Default value: 5.
        '''
        result = self._values.get("health_check_fail_times")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckHost: The domain name that is used for health checks. This parameter is empty by default.
        '''
        result = self._values.get("health_check_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_http_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckHttpCode: The HTTP status code returned for a successful health check. Valid values:
        http_2xx (default)http_3xx
        '''
        result = self._values.get("health_check_http_code")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_interval(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckInterval: The interval between two consecutive health checks. Unit: seconds. Valid values: 1 to 50. Default value: 5.
        '''
        result = self._values.get("health_check_interval")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_method(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckMethod: The HTTP request method for health checks. Valid values:
        HEAD (default): requests the headers of the resource.
        GET: requests the specified resource and returns both the headers and entity body.
        '''
        result = self._values.get("health_check_method")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckPort: The port used for health checks. Valid values: 1 to 65535. Default value: 80.
        '''
        result = self._values.get("health_check_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_succ_times(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy. Valid values: 1 to 10. Default value: 2.
        '''
        result = self._values.get("health_check_succ_times")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckTimeout: The timeout period of a health check response. If a backend ECS instance does not respond within the specified timeout period, the ECS instance fails the health check. Unit: seconds. Valid values: 1 to 100. Default value: 3.
        '''
        result = self._values.get("health_check_timeout")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        healthCheckType: The health check type. By default, this parameter is left empty. Valid values:
        l4: Layer 4 health check.
        l7: Layer 7 health check.
        '''
        result = self._values.get("health_check_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def health_check_uri(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: healthCheckUri: The URI used for health checks. The URI must be 1 to 80 characters in length. Default value: "/".
        '''
        result = self._values.get("health_check_uri")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def remarks(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: remarks: The remarks. This parameter is empty by default.
        '''
        result = self._values.get("remarks")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosEdgeContainerAppProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosEdgeContainerAppRecord(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosEdgeContainerAppRecord",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::EdgeContainerAppRecord``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``EdgeContainerAppRecord`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapprecord
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosEdgeContainerAppRecordProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c62912e48e98428562d060bc1da0aaef3b7142cf4ce31f408c59ad0377569f77)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d5d85518a5fdc6ba060e76dd7c2154f36ad7751fb05231faa1fc0d34eb7e0f8)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrAppId")
    def attr_app_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AppId: The application ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAppId"))

    @builtins.property
    @jsii.member(jsii_name="attrCname")
    def attr_cname(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Cname: The CNAME of the associated domain name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCname"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: The configuration ID of the associated domain name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: The time when the domain name was added. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordId")
    def attr_record_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RecordId: The record ID of the associated domain name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRecordId"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RecordName: The associated domain name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrSchemdId")
    def attr_schemd_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SchemdId: The scheduling domain ID of the associated domain name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSchemdId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: The website ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UpdateTime: The time when the scheduling domain ID or CNAME was last modified. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="appId")
    def app_id(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: appId: The application ID.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "appId"))

    @app_id.setter
    def app_id(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ac51c60cdc6db3a8656cf91a3fb71a52d4bb7c5063ee44b651692a7189d5602)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "appId", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e817d2746334b771dac8b9b2b55eae954aed2dc9dbee1d6359eb86bd5101236b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="recordName")
    def record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: recordName: The associated domain name.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "recordName"))

    @record_name.setter
    def record_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bba8250b1789fa71f0a3a09031bb7289468addfce23526a1587ad5048bbfc16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "recordName", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The website ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9eee07fad3d322b1b27055366e9e196314a8c698b20e7c1d951a28afcae877b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosEdgeContainerAppRecordProps",
    jsii_struct_bases=[],
    name_mapping={"app_id": "appId", "record_name": "recordName", "site_id": "siteId"},
)
class RosEdgeContainerAppRecordProps:
    def __init__(
        self,
        *,
        app_id: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        record_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        '''Properties for defining a ``RosEdgeContainerAppRecord``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapprecord

        :param app_id: 
        :param record_name: 
        :param site_id: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5c1fd8cc87c7f35324045e1d381e5d05ea50f9a4bd834849dec054c1748722f)
            check_type(argname="argument app_id", value=app_id, expected_type=type_hints["app_id"])
            check_type(argname="argument record_name", value=record_name, expected_type=type_hints["record_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "app_id": app_id,
            "record_name": record_name,
            "site_id": site_id,
        }

    @builtins.property
    def app_id(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: appId: The application ID.
        '''
        result = self._values.get("app_id")
        assert result is not None, "Required property 'app_id' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: recordName: The associated domain name.
        '''
        result = self._values.get("record_name")
        assert result is not None, "Required property 'record_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The website ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosEdgeContainerAppRecordProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosHttpRequestHeaderModificationRule(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosHttpRequestHeaderModificationRule",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::HttpRequestHeaderModificationRule``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``HttpRequestHeaderModificationRule`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httprequestheadermodificationrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosHttpRequestHeaderModificationRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ecb2a32ee1584a88ddb181ef326aa9122cee35fa576a7654aafa3f6d988193a3)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1fedcb0c1a0a1984a0c5a8aca4d325edcc3bf9884b3959dc9fa4b9d537dbb48)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The configuration type. You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrRequestHeaderModification")
    def attr_request_header_modification(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RequestHeaderModification: The configurations of modifying request headers. You can add, delete, or modify a request header.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRequestHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88a79880994612583615394fafadddbf729997831ac858f5610ac62c00162461)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="requestHeaderModification")
    def request_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty"]]]:
        '''
        :Property: requestHeaderModification: The configurations of modifying request headers. You can add, delete, or modify a request header.
        '''
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty"]]], jsii.get(self, "requestHeaderModification"))

    @request_header_modification.setter
    def request_header_modification(
        self,
        value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty"]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e1ebb77ca6c2ad61e51360540a054cba60bb4fd2f00b43679f6a2b73dbf6090)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "requestHeaderModification", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca68308c5673a815ac9ae26310fbdda3c989d4ab728c89ea469709764542ad47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98a5cb898063e58660712fa8afa3bbb4b899eb76a2c10fcc7c846ddf071c9d00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3628c6c5b9049b52e1131e3c406052dd23462af5ffdf4e94293af15f935fc57e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__243b422c383a7361d872907e7fd14cb68f8e4dcee3ddd6119cbef904679acb1c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc42ff8849cd567b5b5fc6b75d6bd9fcce0dccb99a8b8bdd441fa015ee39a740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62619cc2ae9a5b431f23ef147b6a5ca023996b1518f6f94f09deb7b5b370be72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty",
        jsii_struct_bases=[],
        name_mapping={
            "name": "name",
            "operation": "operation",
            "type": "type",
            "value": "value",
        },
    )
    class RequestHeaderModificationProperty:
        def __init__(
            self,
            *,
            name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            operation: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param name: 
            :param operation: 
            :param type: 
            :param value: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__29f789ca399d9d701b9a06d8906b21aef6409835b4c329752d2fd5cc91d1c67f)
                check_type(argname="argument name", value=name, expected_type=type_hints["name"])
                check_type(argname="argument operation", value=operation, expected_type=type_hints["operation"])
                check_type(argname="argument type", value=type, expected_type=type_hints["type"])
                check_type(argname="argument value", value=value, expected_type=type_hints["value"])
            self._values: typing.Dict[builtins.str, typing.Any] = {
                "name": name,
                "operation": operation,
            }
            if type is not None:
                self._values["type"] = type
            if value is not None:
                self._values["value"] = value

        @builtins.property
        def name(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: name: Request Header Name.
            '''
            result = self._values.get("name")
            assert result is not None, "Required property 'name' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def operation(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property:

            operation: Mode of operation. Value range:

            - ``add``: add.
            - ``del``: delete
            - ``modify``: change.
            '''
            result = self._values.get("operation")
            assert result is not None, "Required property 'operation' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property:

            type: Value type. Value range:

            - ``static``:static mode.
            - ``dynamic``:dynamic mode.
            '''
            result = self._values.get("type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def value(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: value: Request header value.
            '''
            result = self._values.get("value")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "RequestHeaderModificationProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosHttpRequestHeaderModificationRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "request_header_modification": "requestHeaderModification",
        "site_id": "siteId",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class RosHttpRequestHeaderModificationRuleProps:
    def __init__(
        self,
        *,
        request_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosHttpRequestHeaderModificationRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httprequestheadermodificationrule

        :param request_header_modification: 
        :param site_id: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36d6f493d2bad16b8a4afac62bb1d602ecbfb9be3eeade440dfedaa04f4fbdb6)
            check_type(argname="argument request_header_modification", value=request_header_modification, expected_type=type_hints["request_header_modification"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "request_header_modification": request_header_modification,
            "site_id": site_id,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def request_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty]]]:
        '''
        :Property: requestHeaderModification: The configurations of modifying request headers. You can add, delete, or modify a request header.
        '''
        result = self._values.get("request_header_modification")
        assert result is not None, "Required property 'request_header_modification' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosHttpRequestHeaderModificationRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosHttpResponseHeaderModificationRule(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosHttpResponseHeaderModificationRule",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::HttpResponseHeaderModificationRule``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``HttpResponseHeaderModificationRule`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpresponseheadermodificationrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosHttpResponseHeaderModificationRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1489d3e65e2c6acd498bb625e1b1babffe13b02b48b88250faed969496fefba8)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f7040400b2736bfa87fff992eecde87a6c046cb5cf9390b74b433c1d03c51e6)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The configuration type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrResponseHeaderModification")
    def attr_response_header_modification(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ResponseHeaderModification: Modify response headers, supporting add, delete, and modify operations.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrResponseHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd979653e75e0150488111940452b7f2abb55b962b34994c4e19dc2161968fdd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="responseHeaderModification")
    def response_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty"]]]:
        '''
        :Property: responseHeaderModification: Modify response headers, supporting add, delete, and modify operations.
        '''
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty"]]], jsii.get(self, "responseHeaderModification"))

    @response_header_modification.setter
    def response_header_modification(
        self,
        value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty"]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3043170a092a30d0463d38214066bc4a0e7a5a9a5df7036f062699d82b521f43)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "responseHeaderModification", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42bbfe1532cc75fcabb70c535781ba334f53eb54c397146980e36ee5625e259c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4fa5091722b52e7356ddca94d82f601dde3931b1689f9933e14f565875e3084)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__122404d7dda895a0f32e2b030f681f70ccad59b977faebfa49fd3fc77a50d888)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b19ccdb4e307d8d6325a3b08cf388e3fcc2fc6aecbb117efc5a2b53ed30c0ff8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1622d35d5890170879c20e0149bb10b643672d73f7c3d302671141887b82d5be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8b948b256221617de2e77a98a002e61f0d9076d7f1c0c87b95f0dbe37f5c1e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty",
        jsii_struct_bases=[],
        name_mapping={
            "name": "name",
            "operation": "operation",
            "type": "type",
            "value": "value",
        },
    )
    class ResponseHeaderModificationProperty:
        def __init__(
            self,
            *,
            name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            operation: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param name: 
            :param operation: 
            :param type: 
            :param value: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__327ecadd04e0e98b58b74885d096f25c8ea644db68f8dc01fcefb88131d3d8a9)
                check_type(argname="argument name", value=name, expected_type=type_hints["name"])
                check_type(argname="argument operation", value=operation, expected_type=type_hints["operation"])
                check_type(argname="argument type", value=type, expected_type=type_hints["type"])
                check_type(argname="argument value", value=value, expected_type=type_hints["value"])
            self._values: typing.Dict[builtins.str, typing.Any] = {
                "name": name,
                "operation": operation,
            }
            if type is not None:
                self._values["type"] = type
            if value is not None:
                self._values["value"] = value

        @builtins.property
        def name(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: name: The response header name.
            '''
            result = self._values.get("name")
            assert result is not None, "Required property 'name' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def operation(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property:

            operation: Operation method. Possible values:

            - ``add``: Add
            - ``del``: Delete
            - ``modify``: Modify.
            '''
            result = self._values.get("operation")
            assert result is not None, "Required property 'operation' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property:

            type: The value type. Value range:

            - ``static``: Static mode.
            - ``dynamic``: Dynamic mode.
            '''
            result = self._values.get("type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def value(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: value: The response header value.
            '''
            result = self._values.get("value")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "ResponseHeaderModificationProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosHttpResponseHeaderModificationRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "response_header_modification": "responseHeaderModification",
        "site_id": "siteId",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class RosHttpResponseHeaderModificationRuleProps:
    def __init__(
        self,
        *,
        response_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosHttpResponseHeaderModificationRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpresponseheadermodificationrule

        :param response_header_modification: 
        :param site_id: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36771ecb5303f6de1a3aca2a559ac76f02e520cf25930d6d06078efd9b8ab781)
            check_type(argname="argument response_header_modification", value=response_header_modification, expected_type=type_hints["response_header_modification"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "response_header_modification": response_header_modification,
            "site_id": site_id,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def response_header_modification(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty]]]:
        '''
        :Property: responseHeaderModification: Modify response headers, supporting add, delete, and modify operations.
        '''
        result = self._values.get("response_header_modification")
        assert result is not None, "Required property 'response_header_modification' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty]]], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosHttpResponseHeaderModificationRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosHttpsApplicationConfiguration(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosHttpsApplicationConfiguration",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::HttpsApplicationConfiguration``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``HttpsApplicationConfiguration`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsapplicationconfiguration
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosHttpsApplicationConfigurationProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b717039c48b3642746de1864d3a431d631b80c217ade37f84f53d09fcca1e796)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__242d3c9fc9b50bc3805784ba1078041f9a0cd778f65d0683a7a0f6d9680fb1b6)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvc")
    def attr_alt_svc(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AltSvc: Function switch, default off.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAltSvc"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcClear")
    def attr_alt_svc_clear(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AltSvcClear: Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAltSvcClear"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcMa")
    def attr_alt_svc_ma(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AltSvcMa: The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAltSvcMa"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcPersist")
    def attr_alt_svc_persist(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: AltSvcPersist: Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrAltSvcPersist"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The type of the configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHsts")
    def attr_hsts(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Hsts: Whether to enable HSTS. It is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHsts"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsIncludeSubdomains")
    def attr_hsts_include_subdomains(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHstsIncludeSubdomains"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsMaxAge")
    def attr_hsts_max_age(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HstsMaxAge: The expiration time of HSTS, in seconds.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHstsMaxAge"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsPreload")
    def attr_hsts_preload(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HstsPreload: Whether to enable HSTS preloading. It is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHstsPreload"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForce")
    def attr_https_force(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HttpsForce: Whether to enable forced HTTPS. It is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttpsForce"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForceCode")
    def attr_https_force_code(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HttpsForceCode: Forced HTTPS jump status code, value range:.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttpsForceCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsNoSniDeny")
    def attr_https_no_sni_deny(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HttpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI. This parameter is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttpsNoSniDeny"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniVerify")
    def attr_https_sni_verify(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HttpsSniVerify: Whether to enable SNI verification. It is disabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttpsSniVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniWhitelist")
    def attr_https_sni_whitelist(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HttpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttpsSniWhitelist"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9498d2618ee07e991863f7a9cc4c56db69177c60fc0472a70e6b0aca24686f67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7a76d270a2ed68aa63d623284ab4532fccaef638be83e16ee1465fa272fabd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="altSvc")
    def alt_svc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvc: Function switch, default off. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "altSvc"))

    @alt_svc.setter
    def alt_svc(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a8ffdb98e5093a1bac0c6514976272fa3f6942876ee247168f585dd635d6486)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "altSvc", value)

    @builtins.property
    @jsii.member(jsii_name="altSvcClear")
    def alt_svc_clear(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvcClear: Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "altSvcClear"))

    @alt_svc_clear.setter
    def alt_svc_clear(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__989b4029a9e931782bb416c84f6ea272bea62a5ff02081d316a2b8c8132401b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "altSvcClear", value)

    @builtins.property
    @jsii.member(jsii_name="altSvcMa")
    def alt_svc_ma(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: altSvcMa: The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "altSvcMa"))

    @alt_svc_ma.setter
    def alt_svc_ma(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0fe73451f85fb0cb35c231bbd627bbd13bed5fa9e9fa10ef721fadb78f85a58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "altSvcMa", value)

    @builtins.property
    @jsii.member(jsii_name="altSvcPersist")
    def alt_svc_persist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvcPersist: Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "altSvcPersist"))

    @alt_svc_persist.setter
    def alt_svc_persist(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5286f795b75daa0a1dd18718a8487ecbe32c517dc5ce76d93e6008c71271d9d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "altSvcPersist", value)

    @builtins.property
    @jsii.member(jsii_name="hsts")
    def hsts(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hsts: Whether to enable HSTS. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "hsts"))

    @hsts.setter
    def hsts(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f54c40c57c5d2bac62c2e5e110c1d1a663b60697b23217cfb6ac78bf05293e3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hsts", value)

    @builtins.property
    @jsii.member(jsii_name="hstsIncludeSubdomains")
    def hsts_include_subdomains(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "hstsIncludeSubdomains"))

    @hsts_include_subdomains.setter
    def hsts_include_subdomains(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5c79104695022b26a9e55f1c07de7996c9ffcf5d5b00554123797b34b7de443)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hstsIncludeSubdomains", value)

    @builtins.property
    @jsii.member(jsii_name="hstsMaxAge")
    def hsts_max_age(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: hstsMaxAge: The expiration time of HSTS, in seconds.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "hstsMaxAge"))

    @hsts_max_age.setter
    def hsts_max_age(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bbf899255166a0df78288d8542c491d56c1d1f51f73dcca6790fc04368d110b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hstsMaxAge", value)

    @builtins.property
    @jsii.member(jsii_name="hstsPreload")
    def hsts_preload(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hstsPreload: Whether to enable HSTS preloading. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "hstsPreload"))

    @hsts_preload.setter
    def hsts_preload(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6859aef2968e1c7d2e2d2485e1650e0909e1a3ddaa76dcf19554bbcff9d16d63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hstsPreload", value)

    @builtins.property
    @jsii.member(jsii_name="httpsForce")
    def https_force(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsForce: Whether to enable forced HTTPS. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "httpsForce"))

    @https_force.setter
    def https_force(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36b1bd83dbd5664d8d8f80ef47e076d199abc3254e99d41be807317cae6dfccb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpsForce", value)

    @builtins.property
    @jsii.member(jsii_name="httpsForceCode")
    def https_force_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsForceCode: Forced HTTPS jump status code, value range:
        301
        302
        307
        308
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "httpsForceCode"))

    @https_force_code.setter
    def https_force_code(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef830f6ec14741d5c603f7e9aadf267236917b0471ab6fe87c51a7b5d82b1eda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpsForceCode", value)

    @builtins.property
    @jsii.member(jsii_name="httpsNoSniDeny")
    def https_no_sni_deny(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "httpsNoSniDeny"))

    @https_no_sni_deny.setter
    def https_no_sni_deny(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b51e93892d0ac756624def3fb95c0799adf2856af2d3c7231983974cdc492ffb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpsNoSniDeny", value)

    @builtins.property
    @jsii.member(jsii_name="httpsSniVerify")
    def https_sni_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsSniVerify: Whether to enable SNI verification. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "httpsSniVerify"))

    @https_sni_verify.setter
    def https_sni_verify(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2816a6b31bae62e25d18c781f74dcce8d18e5ac8394e45623b9c3f5b4ab2a31c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpsSniVerify", value)

    @builtins.property
    @jsii.member(jsii_name="httpsSniWhitelist")
    def https_sni_whitelist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: httpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "httpsSniWhitelist"))

    @https_sni_whitelist.setter
    def https_sni_whitelist(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d011955b4662501f55da09c3f1cd8399211e54eaefb63078f505a786f0acc6ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpsSniWhitelist", value)

    @builtins.property
    @jsii.member(jsii_name="paymentType")
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "paymentType"))

    @payment_type.setter
    def payment_type(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0df0a12194dc03ce7dcd3d6176837934752da5dae0b16eb69410ca9864d1959f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "paymentType", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25c8acbc3db9e1aa5707885e89883b43de0b7acac3a5ed5f6208584f750c683f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98604bc1deab095bbe9011a719b355cd9e8c83692b5b139fe7ea203078671bec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f15cf47185f500da8048487df2e4957adaf7146fa0563f9401dc263c577c5f13)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cd50064707a38907f496f645b7e5735506a26193bc7627bdfea302c88e88fba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b58d174f28c7ad15aa5ded6e9d1831ca8c819b87fa95a5c20b505a583b6ed5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosHttpsApplicationConfigurationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "alt_svc": "altSvc",
        "alt_svc_clear": "altSvcClear",
        "alt_svc_ma": "altSvcMa",
        "alt_svc_persist": "altSvcPersist",
        "hsts": "hsts",
        "hsts_include_subdomains": "hstsIncludeSubdomains",
        "hsts_max_age": "hstsMaxAge",
        "hsts_preload": "hstsPreload",
        "https_force": "httpsForce",
        "https_force_code": "httpsForceCode",
        "https_no_sni_deny": "httpsNoSniDeny",
        "https_sni_verify": "httpsSniVerify",
        "https_sni_whitelist": "httpsSniWhitelist",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class RosHttpsApplicationConfigurationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        alt_svc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_clear: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_ma: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        alt_svc_persist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_include_subdomains: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_max_age: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        hsts_preload: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_force: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_force_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_no_sni_deny: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_sni_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https_sni_whitelist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosHttpsApplicationConfiguration``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsapplicationconfiguration

        :param site_id: 
        :param alt_svc: 
        :param alt_svc_clear: 
        :param alt_svc_ma: 
        :param alt_svc_persist: 
        :param hsts: 
        :param hsts_include_subdomains: 
        :param hsts_max_age: 
        :param hsts_preload: 
        :param https_force: 
        :param https_force_code: 
        :param https_no_sni_deny: 
        :param https_sni_verify: 
        :param https_sni_whitelist: 
        :param payment_type: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98d04457b7260f5e3b8f3c1930b6297246be797c207a16cab14f9024dec51d8b)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument alt_svc", value=alt_svc, expected_type=type_hints["alt_svc"])
            check_type(argname="argument alt_svc_clear", value=alt_svc_clear, expected_type=type_hints["alt_svc_clear"])
            check_type(argname="argument alt_svc_ma", value=alt_svc_ma, expected_type=type_hints["alt_svc_ma"])
            check_type(argname="argument alt_svc_persist", value=alt_svc_persist, expected_type=type_hints["alt_svc_persist"])
            check_type(argname="argument hsts", value=hsts, expected_type=type_hints["hsts"])
            check_type(argname="argument hsts_include_subdomains", value=hsts_include_subdomains, expected_type=type_hints["hsts_include_subdomains"])
            check_type(argname="argument hsts_max_age", value=hsts_max_age, expected_type=type_hints["hsts_max_age"])
            check_type(argname="argument hsts_preload", value=hsts_preload, expected_type=type_hints["hsts_preload"])
            check_type(argname="argument https_force", value=https_force, expected_type=type_hints["https_force"])
            check_type(argname="argument https_force_code", value=https_force_code, expected_type=type_hints["https_force_code"])
            check_type(argname="argument https_no_sni_deny", value=https_no_sni_deny, expected_type=type_hints["https_no_sni_deny"])
            check_type(argname="argument https_sni_verify", value=https_sni_verify, expected_type=type_hints["https_sni_verify"])
            check_type(argname="argument https_sni_whitelist", value=https_sni_whitelist, expected_type=type_hints["https_sni_whitelist"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if alt_svc is not None:
            self._values["alt_svc"] = alt_svc
        if alt_svc_clear is not None:
            self._values["alt_svc_clear"] = alt_svc_clear
        if alt_svc_ma is not None:
            self._values["alt_svc_ma"] = alt_svc_ma
        if alt_svc_persist is not None:
            self._values["alt_svc_persist"] = alt_svc_persist
        if hsts is not None:
            self._values["hsts"] = hsts
        if hsts_include_subdomains is not None:
            self._values["hsts_include_subdomains"] = hsts_include_subdomains
        if hsts_max_age is not None:
            self._values["hsts_max_age"] = hsts_max_age
        if hsts_preload is not None:
            self._values["hsts_preload"] = hsts_preload
        if https_force is not None:
            self._values["https_force"] = https_force
        if https_force_code is not None:
            self._values["https_force_code"] = https_force_code
        if https_no_sni_deny is not None:
            self._values["https_no_sni_deny"] = https_no_sni_deny
        if https_sni_verify is not None:
            self._values["https_sni_verify"] = https_sni_verify
        if https_sni_whitelist is not None:
            self._values["https_sni_whitelist"] = https_sni_whitelist
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def alt_svc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvc: Function switch, default off. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_clear(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvcClear: Alt-Svc whether The header contains the clear parameter. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc_clear")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_ma(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: altSvcMa: The effective time of the Alt-Svc, in seconds. The default value is 86400 seconds.
        '''
        result = self._values.get("alt_svc_ma")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def alt_svc_persist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        altSvcPersist: Alt-Svc whether The header contains the persist parameter. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("alt_svc_persist")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hsts: Whether to enable HSTS. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_include_subdomains(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts_include_subdomains")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_max_age(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: hstsMaxAge: The expiration time of HSTS, in seconds.
        '''
        result = self._values.get("hsts_max_age")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def hsts_preload(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        hstsPreload: Whether to enable HSTS preloading. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("hsts_preload")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_force(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsForce: Whether to enable forced HTTPS. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_force")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_force_code(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsForceCode: Forced HTTPS jump status code, value range:
        301
        302
        307
        308
        '''
        result = self._values.get("https_force_code")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_no_sni_deny(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI. This parameter is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_no_sni_deny")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_sni_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        httpsSniVerify: Whether to enable SNI verification. It is disabled by default. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("https_sni_verify")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https_sni_whitelist(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: httpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.
        '''
        result = self._values.get("https_sni_whitelist")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosHttpsApplicationConfigurationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosHttpsBasicConfiguration(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosHttpsBasicConfiguration",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::HttpsBasicConfiguration``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``HttpsBasicConfiguration`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsbasicconfiguration
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosHttpsBasicConfigurationProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e52e72f4d5a95997913f181fda7e5b520cfc4c020532c7a87ac76f83be42c34)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0902f994c5254eb738b934ead7dcf68486ed502840ce7fb51b565f525fc99429)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuite")
    def attr_ciphersuite(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCiphersuite"))

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuiteGroup")
    def attr_ciphersuite_group(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CiphersuiteGroup: Cipher suite group. Default is all cipher suites.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCiphersuiteGroup"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: ConfigId of the configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: Configuration type, which can be used to query global or rule configurations.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2")
    def attr_http2(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Http2: Indicates whether HTTP2 is enabled. Default is on.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttp2"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp3")
    def attr_http3(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Http3: Whether to enable HTTP3, which is enabled by default.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttp3"))

    @builtins.property
    @jsii.member(jsii_name="attrHttps")
    def attr_https(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Https: Whether to enable HTTPS. Default is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttps"))

    @builtins.property
    @jsii.member(jsii_name="attrOcspStapling")
    def attr_ocsp_stapling(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OcspStapling: Indicates whether OCSP is enabled. Default is off.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOcspStapling"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrTls10")
    def attr_tls10(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Tls10: Whether to enable TLS1.0. Default is disabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTls10"))

    @builtins.property
    @jsii.member(jsii_name="attrTls11")
    def attr_tls11(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Tls11: Whether to enable TLS1.1. Default is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTls11"))

    @builtins.property
    @jsii.member(jsii_name="attrTls12")
    def attr_tls12(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Tls12: Whether to enable TLS1.2. Default is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTls12"))

    @builtins.property
    @jsii.member(jsii_name="attrTls13")
    def attr_tls13(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Tls13: Whether to enable TLS1.3. Default is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTls13"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07ff14cded9b9f81a5b6b72f51cbf8f0b04b82223cd4bcff6b99ac297dbbd116)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site ID, which can be obtained by calling the `ListSites <~~ListSites~~>`_ interface.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30bb5bc3fba360defc6456ef619399c82ebd287d7fa0dd91464c1d5e115baf70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="ciphersuite")
    def ciphersuite(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ciphersuite"))

    @ciphersuite.setter
    def ciphersuite(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5c6ae8b78ce422ab7b7b758d8585d14a7cd3bf7fdec3aadffdf6a3671e8122e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ciphersuite", value)

    @builtins.property
    @jsii.member(jsii_name="ciphersuiteGroup")
    def ciphersuite_group(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ciphersuiteGroup: Cipher suite group. Default is all cipher suites. Possible values:

        - all: All cipher suites.
        - strict: Strong cipher suites.
        - custom: Custom cipher suites.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ciphersuiteGroup"))

    @ciphersuite_group.setter
    def ciphersuite_group(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33717acf528ef9d08d7d7f302657ab6dcbcdc05f3549859f7601d34ffb826854)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ciphersuiteGroup", value)

    @builtins.property
    @jsii.member(jsii_name="http2")
    def http2(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http2: Indicates whether HTTP2 is enabled. Default is on. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "http2"))

    @http2.setter
    def http2(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e01aaaa4310b9c18eb98e1fa926e5b38ba4f4ae719b4f0df27cb1bb0f45ef2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "http2", value)

    @builtins.property
    @jsii.member(jsii_name="http3")
    def http3(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http3: Whether to enable HTTP3, which is enabled by default. The value can be:

        - on: Enabled.
        - off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "http3"))

    @http3.setter
    def http3(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0355907f5457e1a44157599ae14476d27de5694014169caee4cc465123dc0b54)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "http3", value)

    @builtins.property
    @jsii.member(jsii_name="https")
    def https(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        https: Whether to enable HTTPS. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "https"))

    @https.setter
    def https(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6988cb4bc56d481782c0970c8bcc2bb43da56d7a738ae95b64342e63ca1455ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "https", value)

    @builtins.property
    @jsii.member(jsii_name="ocspStapling")
    def ocsp_stapling(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ocspStapling: Indicates whether OCSP is enabled. Default is off. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ocspStapling"))

    @ocsp_stapling.setter
    def ocsp_stapling(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__990deb7ce3f9b9fb197daee3a4271e33f1ce2213e7e7dd2a970b4a7ce2559d76)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ocspStapling", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e172ce63e295c2dc2519c390c2444302123a27e2e517912406237b22858756f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__779304ad6a3de8dbaa5e948957fd66c89e33110030822a148d6879668ef7a69e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdb5d98fae63687886f5814811a7235b6e47e07d9b71dfbe33472b4ff5071b8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2efab1dffd91c9b804e48862e18f2ccc21380263837952b717824e7b66dec667)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="tls10")
    def tls10(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls10: Whether to enable TLS1.0. Default is disabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "tls10"))

    @tls10.setter
    def tls10(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71101757230a6a21227e8b9abbb6e86dcd93b8dae6c95724e7a02a30c05daa59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tls10", value)

    @builtins.property
    @jsii.member(jsii_name="tls11")
    def tls11(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls11: Whether to enable TLS1.1. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "tls11"))

    @tls11.setter
    def tls11(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f573e3341b89b041891744ea7527014d44a904660f0a04045152de9f04c99598)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tls11", value)

    @builtins.property
    @jsii.member(jsii_name="tls12")
    def tls12(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls12: Whether to enable TLS1.2. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "tls12"))

    @tls12.setter
    def tls12(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1291c53fbf3666c741ee6a1cf21556448fa9bb4eecb3ccee5ed5763e77a36bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tls12", value)

    @builtins.property
    @jsii.member(jsii_name="tls13")
    def tls13(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls13: Whether to enable TLS1.3. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "tls13"))

    @tls13.setter
    def tls13(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b554399b5db8568ea8de7b49c7bdca4355d1313d4a0f622e60b7192f139c1f7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tls13", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosHttpsBasicConfigurationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "ciphersuite": "ciphersuite",
        "ciphersuite_group": "ciphersuiteGroup",
        "http2": "http2",
        "http3": "http3",
        "https": "https",
        "ocsp_stapling": "ocspStapling",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "tls10": "tls10",
        "tls11": "tls11",
        "tls12": "tls12",
        "tls13": "tls13",
    },
)
class RosHttpsBasicConfigurationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        ciphersuite: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ciphersuite_group: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http2: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http3: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        https: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ocsp_stapling: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls10: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls11: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls12: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        tls13: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosHttpsBasicConfiguration``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsbasicconfiguration

        :param site_id: 
        :param ciphersuite: 
        :param ciphersuite_group: 
        :param http2: 
        :param http3: 
        :param https: 
        :param ocsp_stapling: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param tls10: 
        :param tls11: 
        :param tls12: 
        :param tls13: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b2ac046291120a68911b16af97e453840523f88ba9eb2f6babb20432dbc8fe8)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument ciphersuite", value=ciphersuite, expected_type=type_hints["ciphersuite"])
            check_type(argname="argument ciphersuite_group", value=ciphersuite_group, expected_type=type_hints["ciphersuite_group"])
            check_type(argname="argument http2", value=http2, expected_type=type_hints["http2"])
            check_type(argname="argument http3", value=http3, expected_type=type_hints["http3"])
            check_type(argname="argument https", value=https, expected_type=type_hints["https"])
            check_type(argname="argument ocsp_stapling", value=ocsp_stapling, expected_type=type_hints["ocsp_stapling"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument tls10", value=tls10, expected_type=type_hints["tls10"])
            check_type(argname="argument tls11", value=tls11, expected_type=type_hints["tls11"])
            check_type(argname="argument tls12", value=tls12, expected_type=type_hints["tls12"])
            check_type(argname="argument tls13", value=tls13, expected_type=type_hints["tls13"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if ciphersuite is not None:
            self._values["ciphersuite"] = ciphersuite
        if ciphersuite_group is not None:
            self._values["ciphersuite_group"] = ciphersuite_group
        if http2 is not None:
            self._values["http2"] = http2
        if http3 is not None:
            self._values["http3"] = http3
        if https is not None:
            self._values["https"] = https
        if ocsp_stapling is not None:
            self._values["ocsp_stapling"] = ocsp_stapling
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if tls10 is not None:
            self._values["tls10"] = tls10
        if tls11 is not None:
            self._values["tls11"] = tls11
        if tls12 is not None:
            self._values["tls12"] = tls12
        if tls13 is not None:
            self._values["tls13"] = tls13

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site ID, which can be obtained by calling the `ListSites <~~ListSites~~>`_ interface.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def ciphersuite(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.
        '''
        result = self._values.get("ciphersuite")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def ciphersuite_group(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ciphersuiteGroup: Cipher suite group. Default is all cipher suites. Possible values:

        - all: All cipher suites.
        - strict: Strong cipher suites.
        - custom: Custom cipher suites.
        '''
        result = self._values.get("ciphersuite_group")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http2(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http2: Indicates whether HTTP2 is enabled. Default is on. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("http2")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http3(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http3: Whether to enable HTTP3, which is enabled by default. The value can be:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("http3")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def https(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        https: Whether to enable HTTPS. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("https")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def ocsp_stapling(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ocspStapling: Indicates whether OCSP is enabled. Default is off. Possible values:

        - on: Enabled.
        - off: Disabled.
        '''
        result = self._values.get("ocsp_stapling")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - on: open.
        - off: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls10(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls10: Whether to enable TLS1.0. Default is disabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("tls10")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls11(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls11: Whether to enable TLS1.1. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("tls11")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls12(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls12: Whether to enable TLS1.2. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("tls12")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def tls13(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        tls13: Whether to enable TLS1.3. Default is enabled. Possible values:

        - on: Enable.
        - off: Disable.
        '''
        result = self._values.get("tls13")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosHttpsBasicConfigurationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosImageTransform(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosImageTransform",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::ImageTransform``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``ImageTransform`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-imagetransform
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosImageTransformProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9f72dc1dcb0394fb904555c14db2e760745797c8b0debc397c4b6d0a1bf36a4)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59d2b8a2bc666a32c3caf8b31bda8d8a8f6b7a03d0db6241db1dda298cbce76a)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The type of the configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrEnable")
    def attr_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Enable: Indicates whether the image transformations feature is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b3040c0a42e530207f2ed01c06995a846e3fdf783ca1295f2c4b6b0bd84e92e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b606a98afe638dc0f7d2ab5d91425e25e61f0d1016b7a1f95254bd41b0f94c29)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="enable")
    def enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        enable: Indicates whether the image transformations feature is enabled. Valid values:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "enable"))

    @enable.setter
    def enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e51427297e81115a838cbc48e73efa9023f7dbe2236c68554871c628e2684b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enable", value)

    @builtins.property
    @jsii.member(jsii_name="paymentType")
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "paymentType"))

    @payment_type.setter
    def payment_type(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f47e9f76e622c21490d5bb57955402ad542f18197f89121aebf03fc52ceb2a76)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "paymentType", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__466c47726fc0565332726d6d548fb8e1c3f3b85815a4d0af73685c3ab81e3acb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__289759cd1f69875d41e363b5e63fd3642b1ef3d7fc3ec9f0276a14ef5ee1bc78)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86bdee223f264f4761f5de2d51aa279f13de85a1b5884e853c0c81ab1f99c171)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e6e45315fe27b9acdbe972239f5c18b0cedd5b493de64713d1f7d3b024fb5e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8ba1c1aabf09b447560acf9b31021822cbf28b83930c3da54bbf96fb249a806)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosImageTransformProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "enable": "enable",
        "payment_type": "paymentType",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class RosImageTransformProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosImageTransform``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-imagetransform

        :param site_id: 
        :param enable: 
        :param payment_type: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47971b5f7cedeefcddefc864f51edc09ad0ed71a7184de5d2860d8c5414ac695)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument enable", value=enable, expected_type=type_hints["enable"])
            check_type(argname="argument payment_type", value=payment_type, expected_type=type_hints["payment_type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if enable is not None:
            self._values["enable"] = enable
        if payment_type is not None:
            self._values["payment_type"] = payment_type
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID, which can be obtained by calling the ListSites API.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        enable: Indicates whether the image transformations feature is enabled. Valid values:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def payment_type(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: paymentType: Payment Type.
        '''
        result = self._values.get("payment_type")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on: Enabled.
        off: Disabled.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosImageTransformProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosKvNamespace(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosKvNamespace",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::KvNamespace``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``KvNamespace`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-kvnamespace
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosKvNamespaceProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c9c71b795a1745cb099102cda0de6dae23d35b17b1020bb2701b54439ba5de6)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab25c82a0b2dea0c5d3022d3543b4629eca01187ba772335bee8c0fdc9e43238)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Description: The description of the namespace.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacity")
    def attr_kv_capacity(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: KvCapacity: The available capacity of the namespace. Unit: bytes.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrKvCapacity"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityString")
    def attr_kv_capacity_string(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: KvCapacityString: The available capacity of the namespace.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrKvCapacityString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsed")
    def attr_kv_capacity_used(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: KvCapacityUsed: The used capacity of the namespace. Unit: bytes.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrKvCapacityUsed"))

    @builtins.property
    @jsii.member(jsii_name="attrKvCapacityUsedString")
    def attr_kv_capacity_used_string(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: KvCapacityUsedString: The used capacity of the namespace.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrKvCapacityUsedString"))

    @builtins.property
    @jsii.member(jsii_name="attrKvNamespace")
    def attr_kv_namespace(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: KvNamespace: The name of the namespace.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrKvNamespace"))

    @builtins.property
    @jsii.member(jsii_name="attrNamespaceId")
    def attr_namespace_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NamespaceId: The ID of the namespace.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNamespaceId"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fcbac16e6adb2524706568657cbdec61f9d65dfc8558df6b9d0e4a8a2c8bb79)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="kvNamespace")
    def kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: kvNamespace: The name of the namespace.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "kvNamespace"))

    @kv_namespace.setter
    def kv_namespace(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e6ad1d20b49ffb65fb116ddb42ce246b56d0008e67affff622742277e387068)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kvNamespace", value)

    @builtins.property
    @jsii.member(jsii_name="description")
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: description: The description of the namespace.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "description"))

    @description.setter
    def description(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f35d7efbbee3d570dcdcfc5a580f7e867c2e11ec43331f821bb37d00ca32aafa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "description", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosKvNamespaceProps",
    jsii_struct_bases=[],
    name_mapping={"kv_namespace": "kvNamespace", "description": "description"},
)
class RosKvNamespaceProps:
    def __init__(
        self,
        *,
        kv_namespace: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosKvNamespace``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-kvnamespace

        :param kv_namespace: 
        :param description: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6755144a083a755154999ae0fbc3c2443b2bdbbd47fac8af9a918f4361783bdd)
            check_type(argname="argument kv_namespace", value=kv_namespace, expected_type=type_hints["kv_namespace"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "kv_namespace": kv_namespace,
        }
        if description is not None:
            self._values["description"] = description

    @builtins.property
    def kv_namespace(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: kvNamespace: The name of the namespace.
        '''
        result = self._values.get("kv_namespace")
        assert result is not None, "Required property 'kv_namespace' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: description: The description of the namespace.
        '''
        result = self._values.get("description")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosKvNamespaceProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosNetworkOptimization(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosNetworkOptimization",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::NetworkOptimization``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``NetworkOptimization`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-networkoptimization
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosNetworkOptimizationProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5da5c912cf1372805caf2b30d8e89101e21f9cec90b7649a913ba725d7bc09ff)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d101e23d0625ec9ad3446f5db6a1ce741a7dce8c523b38743623228f814a079)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: ConfigId of the configuration, which can be obtained by calling the ListNetworkOptimizations.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: Configuration type, which can be used to query global or rule configurations.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGrpc")
    def attr_grpc(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Grpc: Whether to enable GRPC, default is disabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrGrpc"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2Origin")
    def attr_http2_origin(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Http2Origin: Whether to enable HTTP2 origin, default is disabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHttp2Origin"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrSmartRouting")
    def attr_smart_routing(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SmartRouting: Whether to enable smart routing service, default is disabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSmartRouting"))

    @builtins.property
    @jsii.member(jsii_name="attrUploadMaxFilesize")
    def attr_upload_max_filesize(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUploadMaxFilesize"))

    @builtins.property
    @jsii.member(jsii_name="attrWebsocket")
    def attr_websocket(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Websocket: Whether to enable Websocket, default is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrWebsocket"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4347561246630af8b7a7c7a71cdb1a952760050eaeb55943725f1df10dd4169)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__322464dc5fbf1258698ba3c40d2034d0457ca83fe652ba789c62016943fb165e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="grpc")
    def grpc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        grpc: Whether to enable GRPC, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "grpc"))

    @grpc.setter
    def grpc(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1807dcfe1f8a2baadb2604a2aeb7d098b2d452e6e91b066f33824e293d45ea4b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "grpc", value)

    @builtins.property
    @jsii.member(jsii_name="http2Origin")
    def http2_origin(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http2Origin: Whether to enable HTTP2 origin, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "http2Origin"))

    @http2_origin.setter
    def http2_origin(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b051042c0924ad67fd6b6870c611788a3a35b4baedcc85a64b27e9ecaa8a64f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "http2Origin", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fed88ffaf188a07a7a09587474cc8b72bdb81d007060622ca79d95f7d113bb08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eac2056c5bc5a23ecdd347c64b2b72383e7882c965faacec8e5e4a6bf9cf8755)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__335134136816fb3ec077a1e6cda1cc305f63b393f2a1e28f8d7924a127d1a1f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c194980e88a300bf2c234380c682c301bb094a9f094423fba74868697b4a3444)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b8a94905be387394c53909b335bffe0dc6dbeb77d860d527ea21852d43bcb1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)

    @builtins.property
    @jsii.member(jsii_name="smartRouting")
    def smart_routing(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        smartRouting: Whether to enable smart routing service, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "smartRouting"))

    @smart_routing.setter
    def smart_routing(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b3896ec4628efefeb4b5a4bed9516c4d9a516b2c3845dacfb9622237b986184)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "smartRouting", value)

    @builtins.property
    @jsii.member(jsii_name="uploadMaxFilesize")
    def upload_max_filesize(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: uploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "uploadMaxFilesize"))

    @upload_max_filesize.setter
    def upload_max_filesize(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91b1bdc796b280ddbfccb15241f7c9eb2f1730b0e1bd78eafa882deec3a2a365)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uploadMaxFilesize", value)

    @builtins.property
    @jsii.member(jsii_name="websocket")
    def websocket(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        websocket: Whether to enable Websocket, default is enabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "websocket"))

    @websocket.setter
    def websocket(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2f0826624a91940d9e1a9f0918dd846ce116dcee4b771f0b5257686483b87c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "websocket", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosNetworkOptimizationProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "grpc": "grpc",
        "http2_origin": "http2Origin",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
        "smart_routing": "smartRouting",
        "upload_max_filesize": "uploadMaxFilesize",
        "websocket": "websocket",
    },
)
class RosNetworkOptimizationProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        grpc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http2_origin: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        smart_routing: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        upload_max_filesize: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        websocket: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosNetworkOptimization``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-networkoptimization

        :param site_id: 
        :param grpc: 
        :param http2_origin: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        :param smart_routing: 
        :param upload_max_filesize: 
        :param websocket: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c421b34da49c6f5f8f08bd1537aeefe4b753ee2f105db10b3f4935f807c4d686)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument grpc", value=grpc, expected_type=type_hints["grpc"])
            check_type(argname="argument http2_origin", value=http2_origin, expected_type=type_hints["http2_origin"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
            check_type(argname="argument smart_routing", value=smart_routing, expected_type=type_hints["smart_routing"])
            check_type(argname="argument upload_max_filesize", value=upload_max_filesize, expected_type=type_hints["upload_max_filesize"])
            check_type(argname="argument websocket", value=websocket, expected_type=type_hints["websocket"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if grpc is not None:
            self._values["grpc"] = grpc
        if http2_origin is not None:
            self._values["http2_origin"] = http2_origin
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version
        if smart_routing is not None:
            self._values["smart_routing"] = smart_routing
        if upload_max_filesize is not None:
            self._values["upload_max_filesize"] = upload_max_filesize
        if websocket is not None:
            self._values["websocket"] = websocket

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: Site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def grpc(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        grpc: Whether to enable GRPC, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("grpc")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http2_origin(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        http2Origin: Whether to enable HTTP2 origin, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("http2_origin")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def smart_routing(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        smartRouting: Whether to enable smart routing service, default is disabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("smart_routing")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def upload_max_filesize(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: uploadMaxFilesize: Maximum upload file size, in MB, value range: 100～500.
        '''
        result = self._values.get("upload_max_filesize")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def websocket(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        websocket: Whether to enable Websocket, default is enabled. Value range:

        - ``on``: Enabled
        - ``off``: Disabled.
        '''
        result = self._values.get("websocket")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosNetworkOptimizationProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosOriginPool(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosOriginPool",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::OriginPool``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``OriginPool`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originpool
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosOriginPoolProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__290630094bc40d25c9cf22ca7da3921db2a7dbf7f25c9ce37a6e377bcbe03ed6)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcb5c545402725dc7d5b3fcec5809a5e12b3ec6198dceafa2ed5d9e097bf3085)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrEnabled")
    def attr_enabled(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Enabled: Whether the source address pool is enabled:.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrEnabled"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolId")
    def attr_origin_pool_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginPoolId: OriginPool Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginPoolId"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginPoolName")
    def attr_origin_pool_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginPoolName: The source address pool name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginPoolName"))

    @builtins.property
    @jsii.member(jsii_name="attrOrigins")
    def attr_origins(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Origins: The Source station information added to the source address pool. Multiple Source stations use arrays to transfer values.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOrigins"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RecordName: The domain name assigned to the source address pool can be used as the source address recorded under the site.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrReferenceLbCount")
    def attr_reference_lb_count(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ReferenceLBCount: How many load balancers are referenced.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrReferenceLbCount"))

    @builtins.property
    @jsii.member(jsii_name="attrReferences")
    def attr_references(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: References: The source address pool is referred to when the source address pool is configured by the load balancer or recorded as the source station.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrReferences"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: The site ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dc31d096786586faf2c7c9c011f59ddb8c797b4f768d0205398a30673f39376)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="originPoolName")
    def origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: originPoolName: The source address pool name.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "originPoolName"))

    @origin_pool_name.setter
    def origin_pool_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a7034dc5852d0d8b41147e8164a318a914d3dc4bb95cd77c62139909aced98f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originPoolName", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ac852031b30e4c2c7b16e790be463710fcb153ef32f5e371aac065e30a07f32)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="enabled")
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        enabled: Whether the source address pool is enabled:

        - ``true``: Enabled;
        - ``false``: Not enabled.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "enabled"))

    @enabled.setter
    def enabled(
        self,
        value: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__feec4fc857d630918918efc327e8cb6890fcfdc8dd3eb245b1e189bc2d49f95f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enabled", value)

    @builtins.property
    @jsii.member(jsii_name="origins")
    def origins(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.OriginsProperty"]]]]:
        '''
        :Property: origins: The Source station information added to the source address pool. Multiple Source stations use arrays to transfer values.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.OriginsProperty"]]]], jsii.get(self, "origins"))

    @origins.setter
    def origins(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.OriginsProperty"]]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65fad187118a1ef6ae149f287a79c3db86843a66b2ac9b50f58706894758b323)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "origins", value)

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosOriginPool.AuthConfProperty",
        jsii_struct_bases=[],
        name_mapping={
            "access_key": "accessKey",
            "auth_type": "authType",
            "region": "region",
            "secret_key": "secretKey",
            "version": "version",
        },
    )
    class AuthConfProperty:
        def __init__(
            self,
            *,
            access_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            auth_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            secret_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            version: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param access_key: 
            :param auth_type: 
            :param region: 
            :param secret_key: 
            :param version: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__1fb3a42ff6f6ede0c81a419376962fccdcd8c622855ebe7fbfff96e0c48393b9)
                check_type(argname="argument access_key", value=access_key, expected_type=type_hints["access_key"])
                check_type(argname="argument auth_type", value=auth_type, expected_type=type_hints["auth_type"])
                check_type(argname="argument region", value=region, expected_type=type_hints["region"])
                check_type(argname="argument secret_key", value=secret_key, expected_type=type_hints["secret_key"])
                check_type(argname="argument version", value=version, expected_type=type_hints["version"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if access_key is not None:
                self._values["access_key"] = access_key
            if auth_type is not None:
                self._values["auth_type"] = auth_type
            if region is not None:
                self._values["region"] = region
            if secret_key is not None:
                self._values["secret_key"] = secret_key
            if version is not None:
                self._values["version"] = version

        @builtins.property
        def access_key(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: accessKey: The AccessKey to be passed when AuthType is set to private_cross_account or private.
            '''
            result = self._values.get("access_key")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def auth_type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property:

            authType: Authentication type.

            - ``public``: public read/write, which is used when the source station is OSS or S3 and is public read/write;
            - ``private_same_account``: Used when the same account is private, the source station is OSS, and the authentication type is private authentication of the same account;
            - ``private_cross_account``: private cross-account, used when the origin station is OSS and the authentication type is cross-account private authentication;
            - ``private``: Used when the source station is S3 and the authentication type is private.
            '''
            result = self._values.get("auth_type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def region(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: region: The Region of the source station to be transmitted when the source station is AWS S3.
            '''
            result = self._values.get("region")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def secret_key(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: secretKey: The SecretKey to be passed when AuthType is set to private_cross_account or private.
            '''
            result = self._values.get("secret_key")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def version(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: version: The signature version to be transmitted when the source station is AWS S3.
            '''
            result = self._values.get("version")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "AuthConfProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosOriginPool.OriginsProperty",
        jsii_struct_bases=[],
        name_mapping={
            "address": "address",
            "auth_conf": "authConf",
            "enabled": "enabled",
            "header": "header",
            "name": "name",
            "origin_id": "originId",
            "type": "type",
            "weight": "weight",
        },
    )
    class OriginsProperty:
        def __init__(
            self,
            *,
            address: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            auth_conf: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosOriginPool.AuthConfProperty", typing.Dict[builtins.str, typing.Any]]]] = None,
            enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            origin_id: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            weight: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param address: 
            :param auth_conf: 
            :param enabled: 
            :param header: 
            :param name: 
            :param origin_id: 
            :param type: 
            :param weight: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__9a1469caed3cb00cc3ab32cddc042c3f132f2cebc39aa1de6bb35de7c9d69795)
                check_type(argname="argument address", value=address, expected_type=type_hints["address"])
                check_type(argname="argument auth_conf", value=auth_conf, expected_type=type_hints["auth_conf"])
                check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
                check_type(argname="argument header", value=header, expected_type=type_hints["header"])
                check_type(argname="argument name", value=name, expected_type=type_hints["name"])
                check_type(argname="argument origin_id", value=origin_id, expected_type=type_hints["origin_id"])
                check_type(argname="argument type", value=type, expected_type=type_hints["type"])
                check_type(argname="argument weight", value=weight, expected_type=type_hints["weight"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if address is not None:
                self._values["address"] = address
            if auth_conf is not None:
                self._values["auth_conf"] = auth_conf
            if enabled is not None:
                self._values["enabled"] = enabled
            if header is not None:
                self._values["header"] = header
            if name is not None:
                self._values["name"] = name
            if origin_id is not None:
                self._values["origin_id"] = origin_id
            if type is not None:
                self._values["type"] = type
            if weight is not None:
                self._values["weight"] = weight

        @builtins.property
        def address(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: address: Origin Address.
            '''
            result = self._values.get("address")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def auth_conf(
            self,
        ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.AuthConfProperty"]]:
            '''
            :Property: authConf: The authentication information. When the source Station is an OSS or S3 and other source stations need to be authenticated, the authentication-related configuration information needs to be transmitted.
            '''
            result = self._values.get("auth_conf")
            return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosOriginPool.AuthConfProperty"]], result)

        @builtins.property
        def enabled(
            self,
        ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property:

            enabled: Whether the source station is enabled:

            - ``true``: Enabled;
            - ``false``: Not enabled.
            '''
            result = self._values.get("enabled")
            return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def header(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: header: The request header that is sent when returning to the source. Only Host is supported.
            '''
            result = self._values.get("header")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def name(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: name: The name of the origin, which must be unique within an origin address.
            '''
            result = self._values.get("name")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def origin_id(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: originId: Origin ID.
            '''
            result = self._values.get("origin_id")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property:

            type: Source station type:
            ip_domain: ip or domain name type origin station;

            - ``OSS``:OSS address source station;
            - ``S3``:AWS S3 Source station.
            '''
            result = self._values.get("type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def weight(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: weight: The weight, an integer between 0 and 100.
            '''
            result = self._values.get("weight")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "OriginsProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosOriginPoolProps",
    jsii_struct_bases=[],
    name_mapping={
        "origin_pool_name": "originPoolName",
        "site_id": "siteId",
        "enabled": "enabled",
        "origins": "origins",
    },
)
class RosOriginPoolProps:
    def __init__(
        self,
        *,
        origin_pool_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origins: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosOriginPool.OriginsProperty, typing.Dict[builtins.str, typing.Any]]]]]] = None,
    ) -> None:
        '''Properties for defining a ``RosOriginPool``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originpool

        :param origin_pool_name: 
        :param site_id: 
        :param enabled: 
        :param origins: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f6b4d7a3df03becbe5d0939aa1111f634a4fda9857a4f52be1c33924fed66af)
            check_type(argname="argument origin_pool_name", value=origin_pool_name, expected_type=type_hints["origin_pool_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument enabled", value=enabled, expected_type=type_hints["enabled"])
            check_type(argname="argument origins", value=origins, expected_type=type_hints["origins"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "origin_pool_name": origin_pool_name,
            "site_id": site_id,
        }
        if enabled is not None:
            self._values["enabled"] = enabled
        if origins is not None:
            self._values["origins"] = origins

    @builtins.property
    def origin_pool_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: originPoolName: The source address pool name.
        '''
        result = self._values.get("origin_pool_name")
        assert result is not None, "Required property 'origin_pool_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def enabled(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        enabled: Whether the source address pool is enabled:

        - ``true``: Enabled;
        - ``false``: Not enabled.
        '''
        result = self._values.get("enabled")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origins(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosOriginPool.OriginsProperty]]]]:
        '''
        :Property: origins: The Source station information added to the source address pool. Multiple Source stations use arrays to transfer values.
        '''
        result = self._values.get("origins")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosOriginPool.OriginsProperty]]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosOriginPoolProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosOriginRule(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosOriginRule",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::OriginRule``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``OriginRule`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosOriginRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6816a8da0eeddedae835e15c227d5b656010d53af28174b2596d9c3adacc21ad)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17fcc400954164535daaa92fd0d541e0872b1f69b3369ee4240d4ba9a5eca38a)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Back-to-source rule configuration ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The configuration type. You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrDnsRecord")
    def attr_dns_record(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DnsRecord: Overwrite the DNS resolution record of the origin request.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDnsRecord"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302Enable")
    def attr_follow302_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Follow302Enable: Return Source 302 follow switch.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFollow302Enable"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302MaxTries")
    def attr_follow302_max_tries(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFollow302MaxTries"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainArgs")
    def attr_follow302_retain_args(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Follow302RetainArgs: Retain the original request parameter switch.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFollow302RetainArgs"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302RetainHeader")
    def attr_follow302_retain_header(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Follow302RetainHeader: Retain the original request header switch.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFollow302RetainHeader"))

    @builtins.property
    @jsii.member(jsii_name="attrFollow302TargetHost")
    def attr_follow302_target_host(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Follow302TargetHost: Modify the source host after 302.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFollow302TargetHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHost")
    def attr_origin_host(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginHost: The HOST carried in the back-to-origin request.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginHost"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpPort")
    def attr_origin_http_port(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginHttpPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginHttpsPort")
    def attr_origin_https_port(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginHttpsPort: The port of the origin station accessed when the HTTPS protocol is used to return to the origin.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginHttpsPort"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginMtls")
    def attr_origin_mtls(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginMtls: The mtls switch.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginMtls"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginReadTimeout")
    def attr_origin_read_timeout(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginReadTimeout: Read timeout interval of the source station (s).
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginReadTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginScheme")
    def attr_origin_scheme(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginScheme: The protocol used by the back-to-origin request.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginScheme"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginSni")
    def attr_origin_sni(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginSni: SNI carried in the back-to-origin request.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginSni"))

    @builtins.property
    @jsii.member(jsii_name="attrOriginVerify")
    def attr_origin_verify(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: OriginVerify: Source station certificate verification switch.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrOriginVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrRange")
    def attr_range(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Range: Use the range sharding method to download the file from the source.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRange"))

    @builtins.property
    @jsii.member(jsii_name="attrRangeChunkSize")
    def attr_range_chunk_size(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RangeChunkSize: range shard size.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRangeChunkSize"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a64af0567ae119654b0f6d2ee3208bf95106064efdba247c539b5441edff5cf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4697bd4f3a991a43854785e74bdba61aa80f0e96309b1d6cd799e9cff2688ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="dnsRecord")
    def dns_record(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: dnsRecord: Overwrite the DNS resolution record of the origin request.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "dnsRecord"))

    @dns_record.setter
    def dns_record(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__114a7f64f8e5545412533b478bae5eb572c850bf1874ccb6a0df899676827a61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dnsRecord", value)

    @builtins.property
    @jsii.member(jsii_name="follow302Enable")
    def follow302_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302Enable: Return Source 302 follow switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "follow302Enable"))

    @follow302_enable.setter
    def follow302_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34c15fa4b4e3e6ddfa90619823190feacf9e6f3bb2e1523b136ed2d56d0010ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "follow302Enable", value)

    @builtins.property
    @jsii.member(jsii_name="follow302MaxTries")
    def follow302_max_tries(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "follow302MaxTries"))

    @follow302_max_tries.setter
    def follow302_max_tries(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be49a27ad0be7c73c4fa03ad4ea73bd88d66586aa971cb8fb7475828aaa0a8f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "follow302MaxTries", value)

    @builtins.property
    @jsii.member(jsii_name="follow302RetainArgs")
    def follow302_retain_args(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302RetainArgs: Retain the original request parameter switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "follow302RetainArgs"))

    @follow302_retain_args.setter
    def follow302_retain_args(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce2d92f4e52a49a481e513e0d1499894897eae878d7be847c595f19a2c7fa463)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "follow302RetainArgs", value)

    @builtins.property
    @jsii.member(jsii_name="follow302RetainHeader")
    def follow302_retain_header(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302RetainHeader: Retain the original request header switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "follow302RetainHeader"))

    @follow302_retain_header.setter
    def follow302_retain_header(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bd3c276171c9884f08fc82efd64161e50b15fe4228482ab70cac337d1a228d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "follow302RetainHeader", value)

    @builtins.property
    @jsii.member(jsii_name="follow302TargetHost")
    def follow302_target_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: follow302TargetHost: Modify the source host after 302.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "follow302TargetHost"))

    @follow302_target_host.setter
    def follow302_target_host(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7534849a1b50c5048a4a2d3a9ba700d0a1d91b37d070500883adfd9aeb58cf95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "follow302TargetHost", value)

    @builtins.property
    @jsii.member(jsii_name="originHost")
    def origin_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHost: The HOST carried in the back-to-origin request.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originHost"))

    @origin_host.setter
    def origin_host(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a57976d32ec9647ccb80ef0ad5a9ae41db6fad96f48f008f0436def1924eca9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originHost", value)

    @builtins.property
    @jsii.member(jsii_name="originHttpPort")
    def origin_http_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originHttpPort"))

    @origin_http_port.setter
    def origin_http_port(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69e3d0237272738c789d7eb57846d2d18a8d138894752977d7a0d226c5b8b49d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originHttpPort", value)

    @builtins.property
    @jsii.member(jsii_name="originHttpsPort")
    def origin_https_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHttpsPort: Port of the origin server when using the HTTPS protocol for origin requests.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originHttpsPort"))

    @origin_https_port.setter
    def origin_https_port(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c128f30c76047cb215dc45b508ee285930214956960fb0d5a32c316f992cd46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originHttpsPort", value)

    @builtins.property
    @jsii.member(jsii_name="originMtls")
    def origin_mtls(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originMtls: The mtls switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originMtls"))

    @origin_mtls.setter
    def origin_mtls(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96d446cd1cd47b5471baaa030a7e4e8e6ffb2602002fb74e2925888fad3179a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originMtls", value)

    @builtins.property
    @jsii.member(jsii_name="originReadTimeout")
    def origin_read_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originReadTimeout: Read timeout interval of the source station (s).
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originReadTimeout"))

    @origin_read_timeout.setter
    def origin_read_timeout(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2d9a478ec80aed999053199bae33679311e6ae6ae3c66ab7d9ecf170fa1fbab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originReadTimeout", value)

    @builtins.property
    @jsii.member(jsii_name="originScheme")
    def origin_scheme(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originScheme: The protocol used by the back-to-origin request. Value range:

        - ``http``: uses the http protocol to return to the source.
        - ``https``: uses the https protocol to return to the source.
        - ``follow``: follows the Client Protocol back to the source.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originScheme"))

    @origin_scheme.setter
    def origin_scheme(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c31386c62edb4a3648b56fa3a5b3fce084df8458c6d9d418232f96da83a7639)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originScheme", value)

    @builtins.property
    @jsii.member(jsii_name="originSni")
    def origin_sni(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originSni: SNI carried in the back-to-origin request.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originSni"))

    @origin_sni.setter
    def origin_sni(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9f1c03ba6fca0a4371cf2dcef9415acfa23a97bc8ff2b17339a094608089239)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originSni", value)

    @builtins.property
    @jsii.member(jsii_name="originVerify")
    def origin_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originVerify: Source station certificate verification switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "originVerify"))

    @origin_verify.setter
    def origin_verify(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bec697c21aa3fe9d8fbda888bd12ba7801c2498ef4ea8cce72c2678e820abf20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "originVerify", value)

    @builtins.property
    @jsii.member(jsii_name="range")
    def range(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        range: Use the range sharding method to download the file from the source. Value range:

        - ``on``: Open.
        - ``off``: off.
        - ``force``: force.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "range"))

    @range.setter
    def range(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__573d6212d312f71ddd368375f7b33141783a90cf6aaa6853fca2c421d60195cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "range", value)

    @builtins.property
    @jsii.member(jsii_name="rangeChunkSize")
    def range_chunk_size(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: rangeChunkSize: range shard size.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rangeChunkSize"))

    @range_chunk_size.setter
    def range_chunk_size(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__087dd0121526fec1de9e69894c5df007a06c37a8bbda7ea14dfe260c365e6d35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rangeChunkSize", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29866996e2b890be68ca0f1f8f4af9deac8aa297466cf3249fb93c3d14a4866f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bddc74cf437c6112f789e34b69342549d31c21433af8ff28bd9e3097dbbe724)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__220633af857120bd49b9d6d4fc27983b29c16f87aa844155c98dd4f0f8b2cd8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="sequence")
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "sequence"))

    @sequence.setter
    def sequence(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4252aaa6c963df077a37071be4d8bd44be555ada4805962709538f28e7fd94f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sequence", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38f760aad37cef4aff3eae325efc355ddd8248930f88ba63f29cb0299e35c566)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosOriginRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "site_id": "siteId",
        "dns_record": "dnsRecord",
        "follow302_enable": "follow302Enable",
        "follow302_max_tries": "follow302MaxTries",
        "follow302_retain_args": "follow302RetainArgs",
        "follow302_retain_header": "follow302RetainHeader",
        "follow302_target_host": "follow302TargetHost",
        "origin_host": "originHost",
        "origin_http_port": "originHttpPort",
        "origin_https_port": "originHttpsPort",
        "origin_mtls": "originMtls",
        "origin_read_timeout": "originReadTimeout",
        "origin_scheme": "originScheme",
        "origin_sni": "originSni",
        "origin_verify": "originVerify",
        "range": "range",
        "range_chunk_size": "rangeChunkSize",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "sequence": "sequence",
        "site_version": "siteVersion",
    },
)
class RosOriginRuleProps:
    def __init__(
        self,
        *,
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        dns_record: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_max_tries: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_retain_args: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_retain_header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        follow302_target_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_http_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_https_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_mtls: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_read_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_scheme: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_sni: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        origin_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        range: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        range_chunk_size: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosOriginRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-originrule

        :param site_id: 
        :param dns_record: 
        :param follow302_enable: 
        :param follow302_max_tries: 
        :param follow302_retain_args: 
        :param follow302_retain_header: 
        :param follow302_target_host: 
        :param origin_host: 
        :param origin_http_port: 
        :param origin_https_port: 
        :param origin_mtls: 
        :param origin_read_timeout: 
        :param origin_scheme: 
        :param origin_sni: 
        :param origin_verify: 
        :param range: 
        :param range_chunk_size: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param sequence: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d991ea5f7b552b06f5b076ec75e65dc3d8b2b353ff6226f65a532406abbff6cd)
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument dns_record", value=dns_record, expected_type=type_hints["dns_record"])
            check_type(argname="argument follow302_enable", value=follow302_enable, expected_type=type_hints["follow302_enable"])
            check_type(argname="argument follow302_max_tries", value=follow302_max_tries, expected_type=type_hints["follow302_max_tries"])
            check_type(argname="argument follow302_retain_args", value=follow302_retain_args, expected_type=type_hints["follow302_retain_args"])
            check_type(argname="argument follow302_retain_header", value=follow302_retain_header, expected_type=type_hints["follow302_retain_header"])
            check_type(argname="argument follow302_target_host", value=follow302_target_host, expected_type=type_hints["follow302_target_host"])
            check_type(argname="argument origin_host", value=origin_host, expected_type=type_hints["origin_host"])
            check_type(argname="argument origin_http_port", value=origin_http_port, expected_type=type_hints["origin_http_port"])
            check_type(argname="argument origin_https_port", value=origin_https_port, expected_type=type_hints["origin_https_port"])
            check_type(argname="argument origin_mtls", value=origin_mtls, expected_type=type_hints["origin_mtls"])
            check_type(argname="argument origin_read_timeout", value=origin_read_timeout, expected_type=type_hints["origin_read_timeout"])
            check_type(argname="argument origin_scheme", value=origin_scheme, expected_type=type_hints["origin_scheme"])
            check_type(argname="argument origin_sni", value=origin_sni, expected_type=type_hints["origin_sni"])
            check_type(argname="argument origin_verify", value=origin_verify, expected_type=type_hints["origin_verify"])
            check_type(argname="argument range", value=range, expected_type=type_hints["range"])
            check_type(argname="argument range_chunk_size", value=range_chunk_size, expected_type=type_hints["range_chunk_size"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument sequence", value=sequence, expected_type=type_hints["sequence"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "site_id": site_id,
        }
        if dns_record is not None:
            self._values["dns_record"] = dns_record
        if follow302_enable is not None:
            self._values["follow302_enable"] = follow302_enable
        if follow302_max_tries is not None:
            self._values["follow302_max_tries"] = follow302_max_tries
        if follow302_retain_args is not None:
            self._values["follow302_retain_args"] = follow302_retain_args
        if follow302_retain_header is not None:
            self._values["follow302_retain_header"] = follow302_retain_header
        if follow302_target_host is not None:
            self._values["follow302_target_host"] = follow302_target_host
        if origin_host is not None:
            self._values["origin_host"] = origin_host
        if origin_http_port is not None:
            self._values["origin_http_port"] = origin_http_port
        if origin_https_port is not None:
            self._values["origin_https_port"] = origin_https_port
        if origin_mtls is not None:
            self._values["origin_mtls"] = origin_mtls
        if origin_read_timeout is not None:
            self._values["origin_read_timeout"] = origin_read_timeout
        if origin_scheme is not None:
            self._values["origin_scheme"] = origin_scheme
        if origin_sni is not None:
            self._values["origin_sni"] = origin_sni
        if origin_verify is not None:
            self._values["origin_verify"] = origin_verify
        if range is not None:
            self._values["range"] = range
        if range_chunk_size is not None:
            self._values["range_chunk_size"] = range_chunk_size
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if sequence is not None:
            self._values["sequence"] = sequence
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def dns_record(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: dnsRecord: Overwrite the DNS resolution record of the origin request.
        '''
        result = self._values.get("dns_record")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302Enable: Return Source 302 follow switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_max_tries(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: follow302MaxTries: 302 follows the upper limit of the number of times, with a value range of [1-5].
        '''
        result = self._values.get("follow302_max_tries")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_retain_args(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302RetainArgs: Retain the original request parameter switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_retain_args")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_retain_header(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        follow302RetainHeader: Retain the original request header switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("follow302_retain_header")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def follow302_target_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: follow302TargetHost: Modify the source host after 302.
        '''
        result = self._values.get("follow302_target_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_host(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHost: The HOST carried in the back-to-origin request.
        '''
        result = self._values.get("origin_host")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_http_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHttpPort: The port of the origin station accessed when the HTTP protocol is used to return to the origin.
        '''
        result = self._values.get("origin_http_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_https_port(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originHttpsPort: Port of the origin server when using the HTTPS protocol for origin requests.
        '''
        result = self._values.get("origin_https_port")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_mtls(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originMtls: The mtls switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("origin_mtls")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_read_timeout(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originReadTimeout: Read timeout interval of the source station (s).
        '''
        result = self._values.get("origin_read_timeout")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_scheme(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originScheme: The protocol used by the back-to-origin request. Value range:

        - ``http``: uses the http protocol to return to the source.
        - ``https``: uses the https protocol to return to the source.
        - ``follow``: follows the Client Protocol back to the source.
        '''
        result = self._values.get("origin_scheme")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_sni(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: originSni: SNI carried in the back-to-origin request.
        '''
        result = self._values.get("origin_sni")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def origin_verify(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        originVerify: Source station certificate verification switch. Value range:

        - ``on``: ON.
        - ``off``: closed.
        '''
        result = self._values.get("origin_verify")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def range(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        range: Use the range sharding method to download the file from the source. Value range:

        - ``on``: Open.
        - ``off``: off.
        - ``force``: force.
        '''
        result = self._values.get("range")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def range_chunk_size(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: rangeChunkSize: range shard size.
        '''
        result = self._values.get("range_chunk_size")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:

        - Match all incoming requests: value set to true
        - Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:

        - ``on``: open.
        - ``off``: close.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def sequence(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        result = self._values.get("sequence")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosOriginRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosRedirectRule(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosRedirectRule",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::RedirectRule``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``RedirectRule`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-redirectrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosRedirectRuleProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a4ecc02150be0f1c5df95596345f635963e31f35a760c97cacb7ce8c9b03591)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2aec2bd0c404437ed250509e6229506b4dc54aed7f7f403346d9ec93b0d4711d)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigId: Config Id.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ConfigType: The type of the configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrReserveQueryString")
    def attr_reserve_query_string(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ReserveQueryString: Indicates whether the feature of retaining the query string is enabled.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrReserveQueryString"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleEnable: Rule switch. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: RuleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Sequence: Order of rule execution. The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrStatusCode")
    def attr_status_code(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: StatusCode: The response code that you want to use to indicate URL redirection.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetUrl")
    def attr_target_url(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TargetUrl: The destination URL to which requests are redirected.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTargetUrl"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Type: The redirect type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bb7a27d9d495bdc5e06f6602fbaa207fbe115630e837b43a7994979b4e25eb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="reserveQueryString")
    def reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        reserveQueryString: Indicates whether the feature of retaining the query string is enabled. Valid values:
        on
        off.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "reserveQueryString"))

    @reserve_query_string.setter
    def reserve_query_string(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86808b481b7e472c18fc80ab53ac138539b1379c33fef028350b824ce3819d7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "reserveQueryString", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The website ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e05324152cbf6112300225e2e134c32c4ebe0f9680f116384d863f7487e4b33d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="statusCode")
    def status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        statusCode: The response code that you want to use to indicate URL redirection. Valid values:

        - 301
        - 302
        - 303
        - 307
        -
        308.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "statusCode"))

    @status_code.setter
    def status_code(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22b9872a6c0bb0990c854a79a38f70abc93b69e01aefaa22528fd3264769d5a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "statusCode", value)

    @builtins.property
    @jsii.member(jsii_name="targetUrl")
    def target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: targetUrl: The destination URL to which requests are redirected.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "targetUrl"))

    @target_url.setter
    def target_url(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0d166c0e0b5abff97c329428871362c22311319ca05cc8bd97743e5625d430f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetUrl", value)

    @builtins.property
    @jsii.member(jsii_name="type")
    def type(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        type: The redirect type. Valid value:

        - static.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "type"))

    @type.setter
    def type(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b2e193e0f221490b32ca787fe973832123e726976c8c6c20615fd80f2abd2c8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "type", value)

    @builtins.property
    @jsii.member(jsii_name="rule")
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "rule"))

    @rule.setter
    def rule(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35d3d7f35b2d8ce660f15f504005fc23c60b95cfd856340a8674efb19a840f5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rule", value)

    @builtins.property
    @jsii.member(jsii_name="ruleEnable")
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on
        off.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleEnable"))

    @rule_enable.setter
    def rule_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67b5b7591242d0edc01be4bc90f97eb923bdc70594bf2a1ab0e8c20a0c425c50)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleEnable", value)

    @builtins.property
    @jsii.member(jsii_name="ruleName")
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ruleName"))

    @rule_name.setter
    def rule_name(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__035c78edd8284e2a62073b9a21da34c0c3e6ba501feecf5d102217a0683066a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ruleName", value)

    @builtins.property
    @jsii.member(jsii_name="siteVersion")
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "siteVersion"))

    @site_version.setter
    def site_version(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7bd95753881bcc263ade14c569fd5d337ab51181a61670148cfcc6c16d9aa6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteVersion", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosRedirectRuleProps",
    jsii_struct_bases=[],
    name_mapping={
        "reserve_query_string": "reserveQueryString",
        "site_id": "siteId",
        "status_code": "statusCode",
        "target_url": "targetUrl",
        "type": "type",
        "rule": "rule",
        "rule_enable": "ruleEnable",
        "rule_name": "ruleName",
        "site_version": "siteVersion",
    },
)
class RosRedirectRuleProps:
    def __init__(
        self,
        *,
        reserve_query_string: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        target_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosRedirectRule``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-redirectrule

        :param reserve_query_string: 
        :param site_id: 
        :param status_code: 
        :param target_url: 
        :param type: 
        :param rule: 
        :param rule_enable: 
        :param rule_name: 
        :param site_version: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a012768de06c80882db525c2fea251a247944d0364116b3e8a04363c3b7c3e2a)
            check_type(argname="argument reserve_query_string", value=reserve_query_string, expected_type=type_hints["reserve_query_string"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument status_code", value=status_code, expected_type=type_hints["status_code"])
            check_type(argname="argument target_url", value=target_url, expected_type=type_hints["target_url"])
            check_type(argname="argument type", value=type, expected_type=type_hints["type"])
            check_type(argname="argument rule", value=rule, expected_type=type_hints["rule"])
            check_type(argname="argument rule_enable", value=rule_enable, expected_type=type_hints["rule_enable"])
            check_type(argname="argument rule_name", value=rule_name, expected_type=type_hints["rule_name"])
            check_type(argname="argument site_version", value=site_version, expected_type=type_hints["site_version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "reserve_query_string": reserve_query_string,
            "site_id": site_id,
            "status_code": status_code,
            "target_url": target_url,
            "type": type,
        }
        if rule is not None:
            self._values["rule"] = rule
        if rule_enable is not None:
            self._values["rule_enable"] = rule_enable
        if rule_name is not None:
            self._values["rule_name"] = rule_name
        if site_version is not None:
            self._values["site_version"] = site_version

    @builtins.property
    def reserve_query_string(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        reserveQueryString: Indicates whether the feature of retaining the query string is enabled. Valid values:
        on
        off.
        '''
        result = self._values.get("reserve_query_string")
        assert result is not None, "Required property 'reserve_query_string' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The website ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        statusCode: The response code that you want to use to indicate URL redirection. Valid values:

        - 301
        - 302
        - 303
        - 307
        -
        308.
        '''
        result = self._values.get("status_code")
        assert result is not None, "Required property 'status_code' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def target_url(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: targetUrl: The destination URL to which requests are redirected.
        '''
        result = self._values.get("target_url")
        assert result is not None, "Required property 'target_url' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def type(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        type: The redirect type. Valid value:

        - static.
        '''
        result = self._values.get("type")
        assert result is not None, "Required property 'type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def rule(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        rule: Rule content, using conditional expressions to match user requests. When adding global configuration, this parameter does not need to be set. There are two usage scenarios:
        Match all incoming requests: value set to true
        Match specified request: Set the value to a custom expression, for example: (http.host eq "video.example.com").
        '''
        result = self._values.get("rule")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        ruleEnable: Rule switch. When adding global configuration, this parameter does not need to be set. Value range:
        on
        off.
        '''
        result = self._values.get("rule_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def rule_name(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ruleName: Rule name. When adding global configuration, this parameter does not need to be set.
        '''
        result = self._values.get("rule_name")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def site_version(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: siteVersion: The version number of the site configuration. For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        result = self._values.get("site_version")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosRedirectRuleProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosScheduledPreloadJob(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosScheduledPreloadJob",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::ScheduledPreloadJob``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``ScheduledPreloadJob`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-scheduledpreloadjob
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosScheduledPreloadJobProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acdf4e9a0167173cc5fac5529b308a99c178f2436d4b40f5a6ae9e754049e75c)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76455b3cbb959169566276c01c7c33bc9a213b222b68f5681f8c29c2615f0160)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CreateTime: The time when the task was created.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Domains: The domain names to be prefetched.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrErrorInfo")
    def attr_error_info(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ErrorInfo: The error message.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrErrorInfo"))

    @builtins.property
    @jsii.member(jsii_name="attrFailedFileOss")
    def attr_failed_file_oss(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: FailedFileOss: OSS address of failed file.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFailedFileOss"))

    @builtins.property
    @jsii.member(jsii_name="attrFileId")
    def attr_file_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: FileId: The ID of the URL list file, which can be used during downloads.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFileId"))

    @builtins.property
    @jsii.member(jsii_name="attrInsertWay")
    def attr_insert_way(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: InsertWay: The method to submit the URLs to be prefetched.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrInsertWay"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobId")
    def attr_scheduled_preload_job_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ScheduledPreloadJobId: The ID of the prefetch task.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrScheduledPreloadJobId"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobName")
    def attr_scheduled_preload_job_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: ScheduledPreloadJobName: The task name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrScheduledPreloadJobName"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: The site ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskSubmitted")
    def attr_task_submitted(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TaskSubmitted: The number of submitted prefetch tasks.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTaskSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskType")
    def attr_task_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TaskType: The task type. Valid values: refresh and preload.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTaskType"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlCount")
    def attr_url_count(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UrlCount: The total number of URLs.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUrlCount"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlSubmitted")
    def attr_url_submitted(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: UrlSubmitted: The number of submitted URLs.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrUrlSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bb41f86a778d915ed5f2f192e88208b8f86b42aafc4a6ba5c226351ab06e894)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="insertWay")
    def insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: insertWay: The method to submit the URLs to be prefetched.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "insertWay"))

    @insert_way.setter
    def insert_way(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52d1f769768e7af9088332b450d6109c4410fca2c747ecb51062a80ac4e698bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "insertWay", value)

    @builtins.property
    @jsii.member(jsii_name="scheduledPreloadJobName")
    def scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: scheduledPreloadJobName: The name of the scheduled prefetch task.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "scheduledPreloadJobName"))

    @scheduled_preload_job_name.setter
    def scheduled_preload_job_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac64fa06960c81fbd27bb20ee520c15abd7ba8a9fb3b6a3294c51e9dd434bb08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scheduledPreloadJobName", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99c44e71ce7d7d3cfd15da0bec9ae348549552bba07bfb2b164a71c1ffa8fb66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="ossUrl")
    def oss_url(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ossUrl: Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "ossUrl"))

    @oss_url.setter
    def oss_url(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__572f3df151267e7a15af062b862193b631a0bca17bf672ac2992a2d0356e4085)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ossUrl", value)

    @builtins.property
    @jsii.member(jsii_name="urlList")
    def url_list(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]]:
        '''
        :Property: urlList: A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]], jsii.get(self, "urlList"))

    @url_list.setter
    def url_list(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96b36cae441605526c2a6ca50fbb566480e24b4f25fc910090c5e93983410a33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "urlList", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosScheduledPreloadJobProps",
    jsii_struct_bases=[],
    name_mapping={
        "insert_way": "insertWay",
        "scheduled_preload_job_name": "scheduledPreloadJobName",
        "site_id": "siteId",
        "oss_url": "ossUrl",
        "url_list": "urlList",
    },
)
class RosScheduledPreloadJobProps:
    def __init__(
        self,
        *,
        insert_way: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        scheduled_preload_job_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        oss_url: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        url_list: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
    ) -> None:
        '''Properties for defining a ``RosScheduledPreloadJob``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-scheduledpreloadjob

        :param insert_way: 
        :param scheduled_preload_job_name: 
        :param site_id: 
        :param oss_url: 
        :param url_list: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c9993844a3d285b1a2c0c3aa27a18896db21a8134b78749dfc7b26130168869)
            check_type(argname="argument insert_way", value=insert_way, expected_type=type_hints["insert_way"])
            check_type(argname="argument scheduled_preload_job_name", value=scheduled_preload_job_name, expected_type=type_hints["scheduled_preload_job_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument oss_url", value=oss_url, expected_type=type_hints["oss_url"])
            check_type(argname="argument url_list", value=url_list, expected_type=type_hints["url_list"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "insert_way": insert_way,
            "scheduled_preload_job_name": scheduled_preload_job_name,
            "site_id": site_id,
        }
        if oss_url is not None:
            self._values["oss_url"] = oss_url
        if url_list is not None:
            self._values["url_list"] = url_list

    @builtins.property
    def insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: insertWay: The method to submit the URLs to be prefetched.
        '''
        result = self._values.get("insert_way")
        assert result is not None, "Required property 'insert_way' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: scheduledPreloadJobName: The name of the scheduled prefetch task.
        '''
        result = self._values.get("scheduled_preload_job_name")
        assert result is not None, "Required property 'scheduled_preload_job_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def oss_url(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: ossUrl: Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        '''
        result = self._values.get("oss_url")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def url_list(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]]:
        '''
        :Property: urlList: A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        '''
        result = self._values.get("url_list")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosScheduledPreloadJobProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosSiteDeliveryTask(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::SiteDeliveryTask``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``SiteDeliveryTask`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-sitedeliverytask
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosSiteDeliveryTaskProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cb5fdc540fed1946ee8178e8625d407f1c3c4bfe530567a29a25e9d6f6b751c)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d5eb89edb0c9d483bdf41742ead0e2bde1eb9cc86b91a6d5eb24144b47a97a1)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrBusinessType")
    def attr_business_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: BusinessType: Real-time log type.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrBusinessType"))

    @builtins.property
    @jsii.member(jsii_name="attrDataCenter")
    def attr_data_center(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DataCenter: Data Center.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDataCenter"))

    @builtins.property
    @jsii.member(jsii_name="attrDeliveryType")
    def attr_delivery_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DeliveryType: Delivery Type:.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDeliveryType"))

    @builtins.property
    @jsii.member(jsii_name="attrDiscardRate")
    def attr_discard_rate(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DiscardRate: If the discard rate is not filled, the default value is 0.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDiscardRate"))

    @builtins.property
    @jsii.member(jsii_name="attrFieldName")
    def attr_field_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: FieldName: The list of delivery fields to be modified, separated by commas.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFieldName"))

    @builtins.property
    @jsii.member(jsii_name="attrFilterRules")
    def attr_filter_rules(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: FilterRules: The filtering rules.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrFilterRules"))

    @builtins.property
    @jsii.member(jsii_name="attrSinkConfig")
    def attr_sink_config(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SinkConfig: The delivery configuration.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSinkConfig"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteId: The site ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SiteName: The website name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskName")
    def attr_task_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TaskName: The task name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTaskName"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="businessType")
    def business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        businessType: Real-time log type. Valid values:

        - ``dcdn_log_access_l1 (default)``: access log.
        - ``dcdn_log_er``: Edge Routine logs.
        - ``dcdn_log_waf``: firewall logs.
        - ``dcdn_log_ipa``: TCP/UDP proxy logs.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "businessType"))

    @business_type.setter
    def business_type(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f48a2082f314d451f2ce056f9f6fbd8b29a7fc08439f2818ebb405a0709644a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "businessType", value)

    @builtins.property
    @jsii.member(jsii_name="dataCenter")
    def data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        dataCenter: Data Center. Values:

        - ``cn``: Mainland China.
        - ``sg``: Global (excluding Mainland China).
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "dataCenter"))

    @data_center.setter
    def data_center(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__151f1707b048b2dd0c552c34697291aa22463b3c4f7a4df42458efe8106525c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dataCenter", value)

    @builtins.property
    @jsii.member(jsii_name="deliveryType")
    def delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        deliveryType: Delivery Type:

        - ``sls``: Alibaba Cloud Simple Log Service (SLS).
        - ``http``: Http service.
        - ``aws3``: Amazon s3 service.
        - ``oss``: Alibaba Cloud Object Storage Service.
        - ``kafka``: Kafka service.
        - ``aws3cmpt``: Amazon s3 Compatible Service.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "deliveryType"))

    @delivery_type.setter
    def delivery_type(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10966370703cba9766fbedfc92fabfd129440635e027646c87418ffc10ac55e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "deliveryType", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19e5d3bd164ccb678c7601b320b1cce38593c67595e40f5b112816c3f5a51b5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="fieldName")
    def field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: fieldName: The list of delivery fields to be modified, separated by commas.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "fieldName"))

    @field_name.setter
    def field_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9b585e42052732dfdfccc8b9d46a4772d4a83cf2c87c12a9266a151203243ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fieldName", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57a3f95a46e58903fb465d1743dd320c7964d0d52da135519c734505285b4a40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="taskName")
    def task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: taskName: The name of the delivery task.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "taskName"))

    @task_name.setter
    def task_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__507caec7406a3407f35448e044bb0c405d7d895612109d666149974f75c1e12d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "taskName", value)

    @builtins.property
    @jsii.member(jsii_name="discardRate")
    def discard_rate(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: discardRate: If the discard rate is not filled, the default value is 0.
        '''
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "discardRate"))

    @discard_rate.setter
    def discard_rate(
        self,
        value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45c6b459c3f259eeaa93a43ce5f590f0e7bbd81a4095cdfd5b36d1f3c7fd25ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "discardRate", value)

    @builtins.property
    @jsii.member(jsii_name="httpDelivery")
    def http_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.HttpDeliveryProperty"]]:
        '''
        :Property: httpDelivery: HTTP delivery configuration parameters.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.HttpDeliveryProperty"]], jsii.get(self, "httpDelivery"))

    @http_delivery.setter
    def http_delivery(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.HttpDeliveryProperty"]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc64079abc81d0d28e2245dd180ab7784680969608e676f1d9da6f37b3d793fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpDelivery", value)

    @builtins.property
    @jsii.member(jsii_name="kafkaDelivery")
    def kafka_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.KafkaDeliveryProperty"]]:
        '''
        :Property: kafkaDelivery: Kafka delivery configuration parameters.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.KafkaDeliveryProperty"]], jsii.get(self, "kafkaDelivery"))

    @kafka_delivery.setter
    def kafka_delivery(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.KafkaDeliveryProperty"]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d50616054a7d6ebcfca0f6ea3a5d626470903648a9bb50f578fbb360d64337b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "kafkaDelivery", value)

    @builtins.property
    @jsii.member(jsii_name="ossDelivery")
    def oss_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.OssDeliveryProperty"]]:
        '''
        :Property: ossDelivery: OSS delivery configuration.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.OssDeliveryProperty"]], jsii.get(self, "ossDelivery"))

    @oss_delivery.setter
    def oss_delivery(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.OssDeliveryProperty"]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9934f561cfb448592883ce18860db942b088d5071c5b007ce6b3f4d612f6f61b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ossDelivery", value)

    @builtins.property
    @jsii.member(jsii_name="s3Delivery")
    def s3_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.S3DeliveryProperty"]]:
        '''
        :Property: s3Delivery: S3/S3 compatible delivery configuration parameters.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.S3DeliveryProperty"]], jsii.get(self, "s3Delivery"))

    @s3_delivery.setter
    def s3_delivery(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.S3DeliveryProperty"]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f95c94ed770bb4e67d267e3800a0de13406ed33a2cba44d935654f42ddab6139)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "s3Delivery", value)

    @builtins.property
    @jsii.member(jsii_name="slsDelivery")
    def sls_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.SlsDeliveryProperty"]]:
        '''
        :Property: slsDelivery: SLS delivery configuration.
        '''
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.SlsDeliveryProperty"]], jsii.get(self, "slsDelivery"))

    @sls_delivery.setter
    def sls_delivery(
        self,
        value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.SlsDeliveryProperty"]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7367b628b60e82485a25449eb6dadf6a2b439b7977c18c3a62b2ca904a5ec54a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "slsDelivery", value)

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.HeaderParamProperty",
        jsii_struct_bases=[],
        name_mapping={"static_value": "staticValue"},
    )
    class HeaderParamProperty:
        def __init__(
            self,
            *,
            static_value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param static_value: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__860c242571bf348146cfc36b15bf490a49716884e03a2aa9a9d11faa2e053513)
                check_type(argname="argument static_value", value=static_value, expected_type=type_hints["static_value"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if static_value is not None:
                self._values["static_value"] = static_value

        @builtins.property
        def static_value(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: staticValue: The static variable.
            '''
            result = self._values.get("static_value")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "HeaderParamProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.HttpDeliveryProperty",
        jsii_struct_bases=[],
        name_mapping={
            "dest_url": "destUrl",
            "compress": "compress",
            "header_param": "headerParam",
            "log_body_prefix": "logBodyPrefix",
            "log_body_suffix": "logBodySuffix",
            "max_batch_mb": "maxBatchMb",
            "max_batch_size": "maxBatchSize",
            "max_retry": "maxRetry",
            "query_param": "queryParam",
            "standard_auth_on": "standardAuthOn",
            "standard_auth_param": "standardAuthParam",
            "transform_timeout": "transformTimeout",
        },
    )
    class HttpDeliveryProperty:
        def __init__(
            self,
            *,
            dest_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            compress: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            header_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosSiteDeliveryTask.HeaderParamProperty", typing.Dict[builtins.str, typing.Any]]]] = None,
            log_body_prefix: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            log_body_suffix: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            max_batch_mb: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            max_batch_size: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            max_retry: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            query_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosSiteDeliveryTask.QueryParamProperty", typing.Dict[builtins.str, typing.Any]]]] = None,
            standard_auth_on: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            standard_auth_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union["RosSiteDeliveryTask.StandardAuthParamProperty", typing.Dict[builtins.str, typing.Any]]]] = None,
            transform_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param dest_url: 
            :param compress: 
            :param header_param: 
            :param log_body_prefix: 
            :param log_body_suffix: 
            :param max_batch_mb: 
            :param max_batch_size: 
            :param max_retry: 
            :param query_param: 
            :param standard_auth_on: 
            :param standard_auth_param: 
            :param transform_timeout: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__f6ae6e012e4b373372c39243fb3f11ff5423f226beb4e9d07b937c337b334678)
                check_type(argname="argument dest_url", value=dest_url, expected_type=type_hints["dest_url"])
                check_type(argname="argument compress", value=compress, expected_type=type_hints["compress"])
                check_type(argname="argument header_param", value=header_param, expected_type=type_hints["header_param"])
                check_type(argname="argument log_body_prefix", value=log_body_prefix, expected_type=type_hints["log_body_prefix"])
                check_type(argname="argument log_body_suffix", value=log_body_suffix, expected_type=type_hints["log_body_suffix"])
                check_type(argname="argument max_batch_mb", value=max_batch_mb, expected_type=type_hints["max_batch_mb"])
                check_type(argname="argument max_batch_size", value=max_batch_size, expected_type=type_hints["max_batch_size"])
                check_type(argname="argument max_retry", value=max_retry, expected_type=type_hints["max_retry"])
                check_type(argname="argument query_param", value=query_param, expected_type=type_hints["query_param"])
                check_type(argname="argument standard_auth_on", value=standard_auth_on, expected_type=type_hints["standard_auth_on"])
                check_type(argname="argument standard_auth_param", value=standard_auth_param, expected_type=type_hints["standard_auth_param"])
                check_type(argname="argument transform_timeout", value=transform_timeout, expected_type=type_hints["transform_timeout"])
            self._values: typing.Dict[builtins.str, typing.Any] = {
                "dest_url": dest_url,
            }
            if compress is not None:
                self._values["compress"] = compress
            if header_param is not None:
                self._values["header_param"] = header_param
            if log_body_prefix is not None:
                self._values["log_body_prefix"] = log_body_prefix
            if log_body_suffix is not None:
                self._values["log_body_suffix"] = log_body_suffix
            if max_batch_mb is not None:
                self._values["max_batch_mb"] = max_batch_mb
            if max_batch_size is not None:
                self._values["max_batch_size"] = max_batch_size
            if max_retry is not None:
                self._values["max_retry"] = max_retry
            if query_param is not None:
                self._values["query_param"] = query_param
            if standard_auth_on is not None:
                self._values["standard_auth_on"] = standard_auth_on
            if standard_auth_param is not None:
                self._values["standard_auth_param"] = standard_auth_param
            if transform_timeout is not None:
                self._values["transform_timeout"] = transform_timeout

        @builtins.property
        def dest_url(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: destUrl: The address of the HTTP server.
            '''
            result = self._values.get("dest_url")
            assert result is not None, "Required property 'dest_url' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def compress(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: compress: The compression method. By default, data is not compressed.
            '''
            result = self._values.get("compress")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def header_param(
            self,
        ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.HeaderParamProperty"]]:
            '''
            :Property: headerParam: The custom headers.
            '''
            result = self._values.get("header_param")
            return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.HeaderParamProperty"]], result)

        @builtins.property
        def log_body_prefix(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: logBodyPrefix: The prefix of the log delivery package.
            '''
            result = self._values.get("log_body_prefix")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def log_body_suffix(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: logBodySuffix: The suffix of the log delivery package.
            '''
            result = self._values.get("log_body_suffix")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def max_batch_mb(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: maxBatchMb: The maximum size of data for each delivery. Unit: MB.Notice The field type is Long, and the precision may be lost during serialization/deserialization. Please note that the value must not be greater than 9007199254740991.
            '''
            result = self._values.get("max_batch_mb")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def max_batch_size(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: maxBatchSize: The maximum number of entries for each delivery.Notice The field type is Long, and the precision may be lost during serialization/deserialization. Please note that the value must not be greater than 9007199254740991.
            '''
            result = self._values.get("max_batch_size")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def max_retry(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: maxRetry: The maximum number of retries.Notice The field type is Long, and the precision may be lost during serialization/deserialization. Please note that the value must not be greater than 9007199254740991.
            '''
            result = self._values.get("max_retry")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def query_param(
            self,
        ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.QueryParamProperty"]]:
            '''
            :Property: queryParam: The custom query parameters.
            '''
            result = self._values.get("query_param")
            return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.QueryParamProperty"]], result)

        @builtins.property
        def standard_auth_on(
            self,
        ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: standardAuthOn: Specifies whether to use server authentication.
            '''
            result = self._values.get("standard_auth_on")
            return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def standard_auth_param(
            self,
        ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.StandardAuthParamProperty"]]:
            '''
            :Property: standardAuthParam: The authentication configurations.
            '''
            result = self._values.get("standard_auth_param")
            return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosSiteDeliveryTask.StandardAuthParamProperty"]], result)

        @builtins.property
        def transform_timeout(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: transformTimeout: The timeout period. Unit: seconds.Notice The field type is Long, and the precision may be lost during serialization/deserialization. Please note that the value must not be greater than 9007199254740991.
            '''
            result = self._values.get("transform_timeout")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "HttpDeliveryProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.KafkaDeliveryProperty",
        jsii_struct_bases=[],
        name_mapping={
            "balancer": "balancer",
            "brokers": "brokers",
            "compress": "compress",
            "machanism_type": "machanismType",
            "password": "password",
            "topic": "topic",
            "user_auth": "userAuth",
            "user_name": "userName",
        },
    )
    class KafkaDeliveryProperty:
        def __init__(
            self,
            *,
            balancer: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            brokers: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
            compress: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            machanism_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            password: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            topic: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            user_auth: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            user_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param balancer: 
            :param brokers: 
            :param compress: 
            :param machanism_type: 
            :param password: 
            :param topic: 
            :param user_auth: 
            :param user_name: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__377357655dfe7b72e338c230f2c827a58b6f43231822fe581b0b70232419f08d)
                check_type(argname="argument balancer", value=balancer, expected_type=type_hints["balancer"])
                check_type(argname="argument brokers", value=brokers, expected_type=type_hints["brokers"])
                check_type(argname="argument compress", value=compress, expected_type=type_hints["compress"])
                check_type(argname="argument machanism_type", value=machanism_type, expected_type=type_hints["machanism_type"])
                check_type(argname="argument password", value=password, expected_type=type_hints["password"])
                check_type(argname="argument topic", value=topic, expected_type=type_hints["topic"])
                check_type(argname="argument user_auth", value=user_auth, expected_type=type_hints["user_auth"])
                check_type(argname="argument user_name", value=user_name, expected_type=type_hints["user_name"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if balancer is not None:
                self._values["balancer"] = balancer
            if brokers is not None:
                self._values["brokers"] = brokers
            if compress is not None:
                self._values["compress"] = compress
            if machanism_type is not None:
                self._values["machanism_type"] = machanism_type
            if password is not None:
                self._values["password"] = password
            if topic is not None:
                self._values["topic"] = topic
            if user_auth is not None:
                self._values["user_auth"] = user_auth
            if user_name is not None:
                self._values["user_name"] = user_name

        @builtins.property
        def balancer(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: balancer: The load balancing method.
            '''
            result = self._values.get("balancer")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def brokers(
            self,
        ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]]:
            '''
            :Property: brokers: The brokers.
            '''
            result = self._values.get("brokers")
            return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]], result)

        @builtins.property
        def compress(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: compress: The compression method. By default, data is not compressed.
            '''
            result = self._values.get("compress")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def machanism_type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: machanismType: The encryption method.
            '''
            result = self._values.get("machanism_type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def password(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: password: The password.
            '''
            result = self._values.get("password")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def topic(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: topic: The topic.
            '''
            result = self._values.get("topic")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def user_auth(
            self,
        ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: userAuth: Specifies whether to enable authentication.
            '''
            result = self._values.get("user_auth")
            return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def user_name(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: userName: The username.
            '''
            result = self._values.get("user_name")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "KafkaDeliveryProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.OssDeliveryProperty",
        jsii_struct_bases=[],
        name_mapping={
            "aliuid": "aliuid",
            "bucket_name": "bucketName",
            "prefix_path": "prefixPath",
            "region": "region",
        },
    )
    class OssDeliveryProperty:
        def __init__(
            self,
            *,
            aliuid: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            bucket_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            prefix_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param aliuid: 
            :param bucket_name: 
            :param prefix_path: 
            :param region: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__f229ea1e5884a0fa087ec848c9dcfe7c614159139ef65e2534a32a4b07f42673)
                check_type(argname="argument aliuid", value=aliuid, expected_type=type_hints["aliuid"])
                check_type(argname="argument bucket_name", value=bucket_name, expected_type=type_hints["bucket_name"])
                check_type(argname="argument prefix_path", value=prefix_path, expected_type=type_hints["prefix_path"])
                check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if aliuid is not None:
                self._values["aliuid"] = aliuid
            if bucket_name is not None:
                self._values["bucket_name"] = bucket_name
            if prefix_path is not None:
                self._values["prefix_path"] = prefix_path
            if region is not None:
                self._values["region"] = region

        @builtins.property
        def aliuid(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: aliuid: The account ID.
            '''
            result = self._values.get("aliuid")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def bucket_name(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: bucketName: The name of the OSS bucket.
            '''
            result = self._values.get("bucket_name")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def prefix_path(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: prefixPath: The prefix of the path in which you want to store logs.
            '''
            result = self._values.get("prefix_path")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def region(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: region: The region in which the bucket is located.
            '''
            result = self._values.get("region")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "OssDeliveryProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.QueryParamProperty",
        jsii_struct_bases=[],
        name_mapping={"static_value": "staticValue"},
    )
    class QueryParamProperty:
        def __init__(
            self,
            *,
            static_value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param static_value: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__84488098f3d65bdccfc36e573cf25752f3b24e271d96d429afe2ce6d7b9c9796)
                check_type(argname="argument static_value", value=static_value, expected_type=type_hints["static_value"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if static_value is not None:
                self._values["static_value"] = static_value

        @builtins.property
        def static_value(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: staticValue: The static variable.
            '''
            result = self._values.get("static_value")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "QueryParamProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.S3DeliveryProperty",
        jsii_struct_bases=[],
        name_mapping={
            "access_key": "accessKey",
            "bucket_path": "bucketPath",
            "endpoint": "endpoint",
            "prefix_path": "prefixPath",
            "region": "region",
            "s3_cmpt": "s3Cmpt",
            "secret_key": "secretKey",
            "server_side_encryption": "serverSideEncryption",
            "vertify_type": "vertifyType",
        },
    )
    class S3DeliveryProperty:
        def __init__(
            self,
            *,
            access_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            bucket_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            endpoint: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            prefix_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            s3_cmpt: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            secret_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            server_side_encryption: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            vertify_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param access_key: 
            :param bucket_path: 
            :param endpoint: 
            :param prefix_path: 
            :param region: 
            :param s3_cmpt: 
            :param secret_key: 
            :param server_side_encryption: 
            :param vertify_type: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__72bc64db283df3d2889874da3dc38bba70071de8bb523f7d1eb3d137c7daa0fd)
                check_type(argname="argument access_key", value=access_key, expected_type=type_hints["access_key"])
                check_type(argname="argument bucket_path", value=bucket_path, expected_type=type_hints["bucket_path"])
                check_type(argname="argument endpoint", value=endpoint, expected_type=type_hints["endpoint"])
                check_type(argname="argument prefix_path", value=prefix_path, expected_type=type_hints["prefix_path"])
                check_type(argname="argument region", value=region, expected_type=type_hints["region"])
                check_type(argname="argument s3_cmpt", value=s3_cmpt, expected_type=type_hints["s3_cmpt"])
                check_type(argname="argument secret_key", value=secret_key, expected_type=type_hints["secret_key"])
                check_type(argname="argument server_side_encryption", value=server_side_encryption, expected_type=type_hints["server_side_encryption"])
                check_type(argname="argument vertify_type", value=vertify_type, expected_type=type_hints["vertify_type"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if access_key is not None:
                self._values["access_key"] = access_key
            if bucket_path is not None:
                self._values["bucket_path"] = bucket_path
            if endpoint is not None:
                self._values["endpoint"] = endpoint
            if prefix_path is not None:
                self._values["prefix_path"] = prefix_path
            if region is not None:
                self._values["region"] = region
            if s3_cmpt is not None:
                self._values["s3_cmpt"] = s3_cmpt
            if secret_key is not None:
                self._values["secret_key"] = secret_key
            if server_side_encryption is not None:
                self._values["server_side_encryption"] = server_side_encryption
            if vertify_type is not None:
                self._values["vertify_type"] = vertify_type

        @builtins.property
        def access_key(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: accessKey: The access key ID of your Amazon S3 account.
            '''
            result = self._values.get("access_key")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def bucket_path(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: bucketPath: The directory in the bucket.
            '''
            result = self._values.get("bucket_path")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def endpoint(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: endpoint: The endpoint. This parameter is required when the S3Cmpt parameter is set to true.
            '''
            result = self._values.get("endpoint")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def prefix_path(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: prefixPath: The prefix of the path in which you want to store logs.
            '''
            result = self._values.get("prefix_path")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def region(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: region: The region ID of the service.
            '''
            result = self._values.get("region")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def s3_cmpt(
            self,
        ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: s3Cmpt: Specifies whether the service is compatible with Amazon S3.
            '''
            result = self._values.get("s3_cmpt")
            return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def secret_key(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: secretKey: The secret access key of your Amazon S3 account.
            '''
            result = self._values.get("secret_key")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def server_side_encryption(
            self,
        ) -> typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: serverSideEncryption: Server-side encryption.
            '''
            result = self._values.get("server_side_encryption")
            return typing.cast(typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def vertify_type(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: vertifyType: Authentication Type.
            '''
            result = self._values.get("vertify_type")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "S3DeliveryProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.SlsDeliveryProperty",
        jsii_struct_bases=[],
        name_mapping={
            "sls_log_store": "slsLogStore",
            "sls_project": "slsProject",
            "sls_region": "slsRegion",
        },
    )
    class SlsDeliveryProperty:
        def __init__(
            self,
            *,
            sls_log_store: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            sls_project: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            sls_region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param sls_log_store: 
            :param sls_project: 
            :param sls_region: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__5bab1f92e0ccea11ca3c5f0dd522b0e015428a97c4b9f13976ff90b6f39da9a3)
                check_type(argname="argument sls_log_store", value=sls_log_store, expected_type=type_hints["sls_log_store"])
                check_type(argname="argument sls_project", value=sls_project, expected_type=type_hints["sls_project"])
                check_type(argname="argument sls_region", value=sls_region, expected_type=type_hints["sls_region"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if sls_log_store is not None:
                self._values["sls_log_store"] = sls_log_store
            if sls_project is not None:
                self._values["sls_project"] = sls_project
            if sls_region is not None:
                self._values["sls_region"] = sls_region

        @builtins.property
        def sls_log_store(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: slsLogStore: The name of the Logstore.
            '''
            result = self._values.get("sls_log_store")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def sls_project(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: slsProject: The name of the SLS project.
            '''
            result = self._values.get("sls_project")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def sls_region(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: slsRegion: The region in which the SLS project resides.
            '''
            result = self._values.get("sls_region")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "SlsDeliveryProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTask.StandardAuthParamProperty",
        jsii_struct_bases=[],
        name_mapping={
            "expired_time": "expiredTime",
            "private_key": "privateKey",
            "url_path": "urlPath",
        },
    )
    class StandardAuthParamProperty:
        def __init__(
            self,
            *,
            expired_time: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
            url_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        ) -> None:
            '''
            :param expired_time: 
            :param private_key: 
            :param url_path: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__0eda81a41b761d68a39149b2ef426c1a351f46aa8db79395fdcf6c04924711b4)
                check_type(argname="argument expired_time", value=expired_time, expected_type=type_hints["expired_time"])
                check_type(argname="argument private_key", value=private_key, expected_type=type_hints["private_key"])
                check_type(argname="argument url_path", value=url_path, expected_type=type_hints["url_path"])
            self._values: typing.Dict[builtins.str, typing.Any] = {}
            if expired_time is not None:
                self._values["expired_time"] = expired_time
            if private_key is not None:
                self._values["private_key"] = private_key
            if url_path is not None:
                self._values["url_path"] = url_path

        @builtins.property
        def expired_time(
            self,
        ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: expiredTime: The validity period of the signature.Note The value must be greater than 0. We recommend that you specify a value that is greater than 300.
            '''
            result = self._values.get("expired_time")
            return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def private_key(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: privateKey: The private key.
            '''
            result = self._values.get("private_key")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        @builtins.property
        def url_path(
            self,
        ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
            '''
            :Property: urlPath: The URI path for server authentication.
            '''
            result = self._values.get("url_path")
            return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "StandardAuthParamProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosSiteDeliveryTaskProps",
    jsii_struct_bases=[],
    name_mapping={
        "business_type": "businessType",
        "data_center": "dataCenter",
        "delivery_type": "deliveryType",
        "field_name": "fieldName",
        "site_id": "siteId",
        "task_name": "taskName",
        "discard_rate": "discardRate",
        "http_delivery": "httpDelivery",
        "kafka_delivery": "kafkaDelivery",
        "oss_delivery": "ossDelivery",
        "s3_delivery": "s3Delivery",
        "sls_delivery": "slsDelivery",
    },
)
class RosSiteDeliveryTaskProps:
    def __init__(
        self,
        *,
        business_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        data_center: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        delivery_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        field_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        task_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        discard_rate: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.HttpDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        kafka_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.KafkaDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        oss_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.OssDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        s3_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.S3DeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        sls_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.SlsDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    ) -> None:
        '''Properties for defining a ``RosSiteDeliveryTask``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-sitedeliverytask

        :param business_type: 
        :param data_center: 
        :param delivery_type: 
        :param field_name: 
        :param site_id: 
        :param task_name: 
        :param discard_rate: 
        :param http_delivery: 
        :param kafka_delivery: 
        :param oss_delivery: 
        :param s3_delivery: 
        :param sls_delivery: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0d43b73691a6b3d0721cddc1520a2b0a25b890f8ee782b80d06f42f350cb0c6)
            check_type(argname="argument business_type", value=business_type, expected_type=type_hints["business_type"])
            check_type(argname="argument data_center", value=data_center, expected_type=type_hints["data_center"])
            check_type(argname="argument delivery_type", value=delivery_type, expected_type=type_hints["delivery_type"])
            check_type(argname="argument field_name", value=field_name, expected_type=type_hints["field_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument task_name", value=task_name, expected_type=type_hints["task_name"])
            check_type(argname="argument discard_rate", value=discard_rate, expected_type=type_hints["discard_rate"])
            check_type(argname="argument http_delivery", value=http_delivery, expected_type=type_hints["http_delivery"])
            check_type(argname="argument kafka_delivery", value=kafka_delivery, expected_type=type_hints["kafka_delivery"])
            check_type(argname="argument oss_delivery", value=oss_delivery, expected_type=type_hints["oss_delivery"])
            check_type(argname="argument s3_delivery", value=s3_delivery, expected_type=type_hints["s3_delivery"])
            check_type(argname="argument sls_delivery", value=sls_delivery, expected_type=type_hints["sls_delivery"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "business_type": business_type,
            "data_center": data_center,
            "delivery_type": delivery_type,
            "field_name": field_name,
            "site_id": site_id,
            "task_name": task_name,
        }
        if discard_rate is not None:
            self._values["discard_rate"] = discard_rate
        if http_delivery is not None:
            self._values["http_delivery"] = http_delivery
        if kafka_delivery is not None:
            self._values["kafka_delivery"] = kafka_delivery
        if oss_delivery is not None:
            self._values["oss_delivery"] = oss_delivery
        if s3_delivery is not None:
            self._values["s3_delivery"] = s3_delivery
        if sls_delivery is not None:
            self._values["sls_delivery"] = sls_delivery

    @builtins.property
    def business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        businessType: Real-time log type. Valid values:

        - ``dcdn_log_access_l1 (default)``: access log.
        - ``dcdn_log_er``: Edge Routine logs.
        - ``dcdn_log_waf``: firewall logs.
        - ``dcdn_log_ipa``: TCP/UDP proxy logs.
        '''
        result = self._values.get("business_type")
        assert result is not None, "Required property 'business_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        dataCenter: Data Center. Values:

        - ``cn``: Mainland China.
        - ``sg``: Global (excluding Mainland China).
        '''
        result = self._values.get("data_center")
        assert result is not None, "Required property 'data_center' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        deliveryType: Delivery Type:

        - ``sls``: Alibaba Cloud Simple Log Service (SLS).
        - ``http``: Http service.
        - ``aws3``: Amazon s3 service.
        - ``oss``: Alibaba Cloud Object Storage Service.
        - ``kafka``: Kafka service.
        - ``aws3cmpt``: Amazon s3 Compatible Service.
        '''
        result = self._values.get("delivery_type")
        assert result is not None, "Required property 'delivery_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: fieldName: The list of delivery fields to be modified, separated by commas.
        '''
        result = self._values.get("field_name")
        assert result is not None, "Required property 'field_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: taskName: The name of the delivery task.
        '''
        result = self._values.get("task_name")
        assert result is not None, "Required property 'task_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def discard_rate(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: discardRate: If the discard rate is not filled, the default value is 0.
        '''
        result = self._values.get("discard_rate")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.HttpDeliveryProperty]]:
        '''
        :Property: httpDelivery: HTTP delivery configuration parameters.
        '''
        result = self._values.get("http_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.HttpDeliveryProperty]], result)

    @builtins.property
    def kafka_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.KafkaDeliveryProperty]]:
        '''
        :Property: kafkaDelivery: Kafka delivery configuration parameters.
        '''
        result = self._values.get("kafka_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.KafkaDeliveryProperty]], result)

    @builtins.property
    def oss_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.OssDeliveryProperty]]:
        '''
        :Property: ossDelivery: OSS delivery configuration.
        '''
        result = self._values.get("oss_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.OssDeliveryProperty]], result)

    @builtins.property
    def s3_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.S3DeliveryProperty]]:
        '''
        :Property: s3Delivery: S3/S3 compatible delivery configuration parameters.
        '''
        result = self._values.get("s3_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.S3DeliveryProperty]], result)

    @builtins.property
    def sls_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.SlsDeliveryProperty]]:
        '''
        :Property: slsDelivery: SLS delivery configuration.
        '''
        result = self._values.get("sls_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.SlsDeliveryProperty]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosSiteDeliveryTaskProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class RosWaitingRoom(
    _ros_cdk_core_7adfd82f.RosResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.RosWaitingRoom",
):
    '''This class is a base encapsulation around the ROS resource type ``ALIYUN::ESA::WaitingRoom``.

    :Note:

    This class does not contain additional functions, so it is recommended to use the ``WaitingRoom`` class instead of this class for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-waitingroom
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["RosWaitingRoomProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: builtins.bool,
    ) -> None:
        '''
        :param scope: - scope in which this resource is defined.
        :param id: - scoped id of the resource.
        :param props: - resource properties.
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e1e7264b803dd4ffa63fd5588da63c49ddb873f80a1e8f410b941b24906aa15)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @jsii.member(jsii_name="renderProperties")
    def _render_properties(
        self,
        props: typing.Mapping[builtins.str, typing.Any],
    ) -> typing.Mapping[builtins.str, typing.Any]:
        '''
        :param props: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac0e9edb1ea199b436d00f3c8115a9bca194b1944e646539a672f4595f44af85)
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "renderProperties", [props]))

    @jsii.python.classproperty
    @jsii.member(jsii_name="ROS_RESOURCE_TYPE_NAME")
    def ROS_RESOURCE_TYPE_NAME(cls) -> builtins.str:
        '''The resource type name for this resource class.'''
        return typing.cast(builtins.str, jsii.sget(cls, "ROS_RESOURCE_TYPE_NAME"))

    @builtins.property
    @jsii.member(jsii_name="attrCookieName")
    def attr_cookie_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CookieName: Custom Cookie name.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCookieName"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomPageHtml")
    def attr_custom_page_html(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: CustomPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrCustomPageHtml"))

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Description: Waiting room description.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrDisableSessionRenewalEnable")
    def attr_disable_session_renewal_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: DisableSessionRenewalEnable: Disable session renewal.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrDisableSessionRenewalEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrHostNameAndPath")
    def attr_host_name_and_path(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: HostNameAndPath: Host name and path.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrHostNameAndPath"))

    @builtins.property
    @jsii.member(jsii_name="attrJsonResponseEnable")
    def attr_json_response_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: JsonResponseEnable: The JSON response. If the accept request header contains "application/json", JSON data is returned.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrJsonResponseEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrLanguage")
    def attr_language(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: Language: The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrLanguage"))

    @builtins.property
    @jsii.member(jsii_name="attrNewUsersPerMinute")
    def attr_new_users_per_minute(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: NewUsersPerMinute: Number of new users per minute.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrNewUsersPerMinute"))

    @builtins.property
    @jsii.member(jsii_name="attrQueueAllEnable")
    def attr_queue_all_enable(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: QueueAllEnable: All in line.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrQueueAllEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingMethod")
    def attr_queuing_method(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: QueuingMethod: Way of queuing.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrQueuingMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingStatusCode")
    def attr_queuing_status_code(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: QueuingStatusCode: Waiting room status code.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrQueuingStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrSessionDuration")
    def attr_session_duration(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: SessionDuration: Session duration in minutes.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrSessionDuration"))

    @builtins.property
    @jsii.member(jsii_name="attrTotalActiveUsers")
    def attr_total_active_users(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: TotalActiveUsers: Total number of active users.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrTotalActiveUsers"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomId")
    def attr_waiting_room_id(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: WaitingRoomId: The waiting room ID.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrWaitingRoomId"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomName")
    def attr_waiting_room_name(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: WaitingRoomName: The name of the waiting room.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrWaitingRoomName"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomType")
    def attr_waiting_room_type(self) -> _ros_cdk_core_7adfd82f.IResolvable:
        '''
        :Attribute: WaitingRoomType: Waiting room type, support:.
        '''
        return typing.cast(_ros_cdk_core_7adfd82f.IResolvable, jsii.get(self, "attrWaitingRoomType"))

    @builtins.property
    @jsii.member(jsii_name="rosProperties")
    def _ros_properties(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.get(self, "rosProperties"))

    @builtins.property
    @jsii.member(jsii_name="cookieName")
    def cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: cookieName: The name of the custom cookie.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "cookieName"))

    @cookie_name.setter
    def cookie_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ca4b55cdf75f17c1e78655415a41bc3bde439931e3207f851fffaf0de0d48c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cookieName", value)

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @enable_resource_property_constraint.setter
    def enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4538e98c6cf79aaf9bf3ddff996e4a09e0d5b687609d2b52aad56d24de817439)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="hostNameAndPath")
    def host_name_and_path(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosWaitingRoom.HostNameAndPathProperty"]]]:
        '''
        :Property: hostNameAndPath: The hostname and path.
        '''
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosWaitingRoom.HostNameAndPathProperty"]]], jsii.get(self, "hostNameAndPath"))

    @host_name_and_path.setter
    def host_name_and_path(
        self,
        value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, "RosWaitingRoom.HostNameAndPathProperty"]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8150f12e97763b8a3b21e639a3cfc0f8c2c047fde367daefa4e5d730225e0f96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hostNameAndPath", value)

    @builtins.property
    @jsii.member(jsii_name="newUsersPerMinute")
    def new_users_per_minute(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: newUsersPerMinute: The maximum number of new users per minute.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "newUsersPerMinute"))

    @new_users_per_minute.setter
    def new_users_per_minute(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b304e6c9029e46f66af8c02ab054e641bc4301993df78507db4b021e90fc4f3b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "newUsersPerMinute", value)

    @builtins.property
    @jsii.member(jsii_name="queuingMethod")
    def queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        queuingMethod: The queuing method. Value:

        - ``random``: Users gain access to the origin randomly, regardless of the arrival time.
        - ``fifo``: Users gain access to the origin in order of arrival.
        - ``Passthrough``: Users pass through the waiting room and go straight to the origin.
        - ``Reject-all``: Users are blocked from reaching the origin.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "queuingMethod"))

    @queuing_method.setter
    def queuing_method(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6535f2b49a8e1a385307d8edc18d1e07c25c4f8319be927debb28aa08d8630ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "queuingMethod", value)

    @builtins.property
    @jsii.member(jsii_name="queuingStatusCode")
    def queuing_status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        queuingStatusCode: Waiting room status code. Value:

        - ``200``
        - ``202``
        - ``429``.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "queuingStatusCode"))

    @queuing_status_code.setter
    def queuing_status_code(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d74b18fd3fb793ef893e5dd2d57d4eda7bd51b635d6a99f0f5a478e30f38a5d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "queuingStatusCode", value)

    @builtins.property
    @jsii.member(jsii_name="sessionDuration")
    def session_duration(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: sessionDuration: The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "sessionDuration"))

    @session_duration.setter
    def session_duration(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70a81413222f85da2f89cf366489d5c7044a1c487d1d2881276a8d490eac7837)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sessionDuration", value)

    @builtins.property
    @jsii.member(jsii_name="siteId")
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "siteId"))

    @site_id.setter
    def site_id(
        self,
        value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f675485dd62cbdd328c7cf0657472efaf82889a605d2628eac70eda626a1583)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "siteId", value)

    @builtins.property
    @jsii.member(jsii_name="status")
    def status(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        status: Waiting room enabled status. Value:

        - 'on': Enable waiting room
        - 'off': Disabled waiting room
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "status"))

    @status.setter
    def status(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cb5c1a959b5fc7a0a9ab41357720c69ad2dfde30e026109353e0c34e7a44491)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "status", value)

    @builtins.property
    @jsii.member(jsii_name="totalActiveUsers")
    def total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: totalActiveUsers: The maximum number of active users.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "totalActiveUsers"))

    @total_active_users.setter
    def total_active_users(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2fb0a3fa88495116d4c1dbf264577c3de56525b8c80476a9401fa5a50f430513)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "totalActiveUsers", value)

    @builtins.property
    @jsii.member(jsii_name="waitingRoomName")
    def waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: waitingRoomName: The name of the waiting room.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "waitingRoomName"))

    @waiting_room_name.setter
    def waiting_room_name(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3098ebcaa14081485fa6a79048d07bced5ad417e612b86ec66996e297edafcf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "waitingRoomName", value)

    @builtins.property
    @jsii.member(jsii_name="waitingRoomType")
    def waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        waitingRoomType: The type of the waiting room, support:

        - ``default``: Indicates the default type.
        - ``custom``: indicates a custom type.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "waitingRoomType"))

    @waiting_room_type.setter
    def waiting_room_type(
        self,
        value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bd7c570d4fb661e2e5cfa0b5386e405d7764138ec7f867eeb9bf523ebe431ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "waitingRoomType", value)

    @builtins.property
    @jsii.member(jsii_name="customPageHtml")
    def custom_page_html(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: customPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "customPageHtml"))

    @custom_page_html.setter
    def custom_page_html(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c1d90d5c8128dbcc0b00eebd2ef13938c6dc7c2901de3c189c7d105b3f5263c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "customPageHtml", value)

    @builtins.property
    @jsii.member(jsii_name="description")
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: description: Waiting room description.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "description"))

    @description.setter
    def description(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fd2a1643059db2f0d610004ed30117a1b51a6d9ae388d5bcd84ba1cc79df7ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "description", value)

    @builtins.property
    @jsii.member(jsii_name="disableSessionRenewalEnable")
    def disable_session_renewal_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        disableSessionRenewalEnable: Specifies whether to disable session renewal. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "disableSessionRenewalEnable"))

    @disable_session_renewal_enable.setter
    def disable_session_renewal_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09a9222beae454efafc11f1c3f00a44c7d6b06d37d0d9decb0509ebc797e74d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "disableSessionRenewalEnable", value)

    @builtins.property
    @jsii.member(jsii_name="jsonResponseEnable")
    def json_response_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        jsonResponseEnable: The JSON response. If the accept request header contains "application/json", JSON data is returned. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "jsonResponseEnable"))

    @json_response_enable.setter
    def json_response_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c583d2a3eda333c5d62d5042109f89d40b378b43892fe5bd2c9812ce4f1604a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "jsonResponseEnable", value)

    @builtins.property
    @jsii.member(jsii_name="language")
    def language(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        language: The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:

        - ``enus``: English.
        - ``zhcn``: Simplified Chinese.
        - ``zhhk``: Traditional Chinese.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "language"))

    @language.setter
    def language(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d704202033dd94920a05ba49b52e6467d81ca441632b0251ca42ae80e565cd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "language", value)

    @builtins.property
    @jsii.member(jsii_name="queueAllEnable")
    def queue_all_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        queueAllEnable: Specifies whether to queue all requests. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], jsii.get(self, "queueAllEnable"))

    @queue_all_enable.setter
    def queue_all_enable(
        self,
        value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd994909d1119143c97bd7553c40021cfa96d601abd7ee13eb32774e8c59f5c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "queueAllEnable", value)

    @jsii.data_type(
        jsii_type="@alicloud/ros-cdk-esa.RosWaitingRoom.HostNameAndPathProperty",
        jsii_struct_bases=[],
        name_mapping={"domain": "domain", "path": "path", "subdomain": "subdomain"},
    )
    class HostNameAndPathProperty:
        def __init__(
            self,
            *,
            domain: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            path: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
            subdomain: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        ) -> None:
            '''
            :param domain: 
            :param path: 
            :param subdomain: 
            '''
            if __debug__:
                type_hints = typing.get_type_hints(_typecheckingstub__46756a927e6246b815a4f90c7a4781465152968582b96e75552615042bc3fb12)
                check_type(argname="argument domain", value=domain, expected_type=type_hints["domain"])
                check_type(argname="argument path", value=path, expected_type=type_hints["path"])
                check_type(argname="argument subdomain", value=subdomain, expected_type=type_hints["subdomain"])
            self._values: typing.Dict[builtins.str, typing.Any] = {
                "domain": domain,
                "path": path,
                "subdomain": subdomain,
            }

        @builtins.property
        def domain(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: domain: The domain name.
            '''
            result = self._values.get("domain")
            assert result is not None, "Required property 'domain' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def path(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: path: The path.
            '''
            result = self._values.get("path")
            assert result is not None, "Required property 'path' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        @builtins.property
        def subdomain(
            self,
        ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
            '''
            :Property: subdomain: The subdomain.
            '''
            result = self._values.get("subdomain")
            assert result is not None, "Required property 'subdomain' is missing"
            return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

        def __eq__(self, rhs: typing.Any) -> builtins.bool:
            return isinstance(rhs, self.__class__) and rhs._values == self._values

        def __ne__(self, rhs: typing.Any) -> builtins.bool:
            return not (rhs == self)

        def __repr__(self) -> str:
            return "HostNameAndPathProperty(%s)" % ", ".join(
                k + "=" + repr(v) for k, v in self._values.items()
            )


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.RosWaitingRoomProps",
    jsii_struct_bases=[],
    name_mapping={
        "cookie_name": "cookieName",
        "host_name_and_path": "hostNameAndPath",
        "new_users_per_minute": "newUsersPerMinute",
        "queuing_method": "queuingMethod",
        "queuing_status_code": "queuingStatusCode",
        "session_duration": "sessionDuration",
        "site_id": "siteId",
        "status": "status",
        "total_active_users": "totalActiveUsers",
        "waiting_room_name": "waitingRoomName",
        "waiting_room_type": "waitingRoomType",
        "custom_page_html": "customPageHtml",
        "description": "description",
        "disable_session_renewal_enable": "disableSessionRenewalEnable",
        "json_response_enable": "jsonResponseEnable",
        "language": "language",
        "queue_all_enable": "queueAllEnable",
    },
)
class RosWaitingRoomProps:
    def __init__(
        self,
        *,
        cookie_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        host_name_and_path: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosWaitingRoom.HostNameAndPathProperty, typing.Dict[builtins.str, typing.Any]]]]],
        new_users_per_minute: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        queuing_method: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        queuing_status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        session_duration: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        status: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        total_active_users: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        waiting_room_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        waiting_room_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        custom_page_html: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        disable_session_renewal_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        json_response_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        language: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        queue_all_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``RosWaitingRoom``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-waitingroom

        :param cookie_name: 
        :param host_name_and_path: 
        :param new_users_per_minute: 
        :param queuing_method: 
        :param queuing_status_code: 
        :param session_duration: 
        :param site_id: 
        :param status: 
        :param total_active_users: 
        :param waiting_room_name: 
        :param waiting_room_type: 
        :param custom_page_html: 
        :param description: 
        :param disable_session_renewal_enable: 
        :param json_response_enable: 
        :param language: 
        :param queue_all_enable: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d68bf19723c93ce1d0b1e7c186c123f0652cf38110ee55a276695b1a2f5469f)
            check_type(argname="argument cookie_name", value=cookie_name, expected_type=type_hints["cookie_name"])
            check_type(argname="argument host_name_and_path", value=host_name_and_path, expected_type=type_hints["host_name_and_path"])
            check_type(argname="argument new_users_per_minute", value=new_users_per_minute, expected_type=type_hints["new_users_per_minute"])
            check_type(argname="argument queuing_method", value=queuing_method, expected_type=type_hints["queuing_method"])
            check_type(argname="argument queuing_status_code", value=queuing_status_code, expected_type=type_hints["queuing_status_code"])
            check_type(argname="argument session_duration", value=session_duration, expected_type=type_hints["session_duration"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument status", value=status, expected_type=type_hints["status"])
            check_type(argname="argument total_active_users", value=total_active_users, expected_type=type_hints["total_active_users"])
            check_type(argname="argument waiting_room_name", value=waiting_room_name, expected_type=type_hints["waiting_room_name"])
            check_type(argname="argument waiting_room_type", value=waiting_room_type, expected_type=type_hints["waiting_room_type"])
            check_type(argname="argument custom_page_html", value=custom_page_html, expected_type=type_hints["custom_page_html"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
            check_type(argname="argument disable_session_renewal_enable", value=disable_session_renewal_enable, expected_type=type_hints["disable_session_renewal_enable"])
            check_type(argname="argument json_response_enable", value=json_response_enable, expected_type=type_hints["json_response_enable"])
            check_type(argname="argument language", value=language, expected_type=type_hints["language"])
            check_type(argname="argument queue_all_enable", value=queue_all_enable, expected_type=type_hints["queue_all_enable"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "cookie_name": cookie_name,
            "host_name_and_path": host_name_and_path,
            "new_users_per_minute": new_users_per_minute,
            "queuing_method": queuing_method,
            "queuing_status_code": queuing_status_code,
            "session_duration": session_duration,
            "site_id": site_id,
            "status": status,
            "total_active_users": total_active_users,
            "waiting_room_name": waiting_room_name,
            "waiting_room_type": waiting_room_type,
        }
        if custom_page_html is not None:
            self._values["custom_page_html"] = custom_page_html
        if description is not None:
            self._values["description"] = description
        if disable_session_renewal_enable is not None:
            self._values["disable_session_renewal_enable"] = disable_session_renewal_enable
        if json_response_enable is not None:
            self._values["json_response_enable"] = json_response_enable
        if language is not None:
            self._values["language"] = language
        if queue_all_enable is not None:
            self._values["queue_all_enable"] = queue_all_enable

    @builtins.property
    def cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: cookieName: The name of the custom cookie.
        '''
        result = self._values.get("cookie_name")
        assert result is not None, "Required property 'cookie_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def host_name_and_path(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosWaitingRoom.HostNameAndPathProperty]]]:
        '''
        :Property: hostNameAndPath: The hostname and path.
        '''
        result = self._values.get("host_name_and_path")
        assert result is not None, "Required property 'host_name_and_path' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosWaitingRoom.HostNameAndPathProperty]]], result)

    @builtins.property
    def new_users_per_minute(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: newUsersPerMinute: The maximum number of new users per minute.
        '''
        result = self._values.get("new_users_per_minute")
        assert result is not None, "Required property 'new_users_per_minute' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        queuingMethod: The queuing method. Value:

        - ``random``: Users gain access to the origin randomly, regardless of the arrival time.
        - ``fifo``: Users gain access to the origin in order of arrival.
        - ``Passthrough``: Users pass through the waiting room and go straight to the origin.
        - ``Reject-all``: Users are blocked from reaching the origin.
        '''
        result = self._values.get("queuing_method")
        assert result is not None, "Required property 'queuing_method' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def queuing_status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        queuingStatusCode: Waiting room status code. Value:

        - ``200``
        - ``202``
        - ``429``.
        '''
        result = self._values.get("queuing_status_code")
        assert result is not None, "Required property 'queuing_status_code' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def session_duration(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: sessionDuration: The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.
        '''
        result = self._values.get("session_duration")
        assert result is not None, "Required property 'session_duration' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: siteId: The site ID.
        '''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def status(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        status: Waiting room enabled status. Value:

        - 'on': Enable waiting room
        - 'off': Disabled waiting room
        '''
        result = self._values.get("status")
        assert result is not None, "Required property 'status' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: totalActiveUsers: The maximum number of active users.
        '''
        result = self._values.get("total_active_users")
        assert result is not None, "Required property 'total_active_users' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property: waitingRoomName: The name of the waiting room.
        '''
        result = self._values.get("waiting_room_name")
        assert result is not None, "Required property 'waiting_room_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''
        :Property:

        waitingRoomType: The type of the waiting room, support:

        - ``default``: Indicates the default type.
        - ``custom``: indicates a custom type.
        '''
        result = self._values.get("waiting_room_type")
        assert result is not None, "Required property 'waiting_room_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def custom_page_html(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: customPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
        '''
        result = self._values.get("custom_page_html")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property: description: Waiting room description.
        '''
        result = self._values.get("description")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def disable_session_renewal_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        disableSessionRenewalEnable: Specifies whether to disable session renewal. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("disable_session_renewal_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def json_response_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        jsonResponseEnable: The JSON response. If the accept request header contains "application/json", JSON data is returned. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("json_response_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def language(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        language: The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported:

        - ``enus``: English.
        - ``zhcn``: Simplified Chinese.
        - ``zhhk``: Traditional Chinese.
        '''
        result = self._values.get("language")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def queue_all_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''
        :Property:

        queueAllEnable: Specifies whether to queue all requests. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("queue_all_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "RosWaitingRoomProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IScheduledPreloadJob)
class ScheduledPreloadJob(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.ScheduledPreloadJob",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::ScheduledPreloadJob``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosScheduledPreloadJob``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-scheduledpreloadjob
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["ScheduledPreloadJobProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdc52b53df4886e98c1a45a5ea3b47eed72260423062e2ab78d237bc79835ca1)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the task was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: The domain names to be prefetched.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrErrorInfo")
    def attr_error_info(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ErrorInfo: The error message.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrErrorInfo"))

    @builtins.property
    @jsii.member(jsii_name="attrFailedFileOss")
    def attr_failed_file_oss(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FailedFileOss: OSS address of failed file.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFailedFileOss"))

    @builtins.property
    @jsii.member(jsii_name="attrFileId")
    def attr_file_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FileId: The ID of the URL list file, which can be used during downloads.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFileId"))

    @builtins.property
    @jsii.member(jsii_name="attrInsertWay")
    def attr_insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute InsertWay: The method to submit the URLs to be prefetched.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrInsertWay"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobId")
    def attr_scheduled_preload_job_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobId: The ID of the prefetch task.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrScheduledPreloadJobId"))

    @builtins.property
    @jsii.member(jsii_name="attrScheduledPreloadJobName")
    def attr_scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ScheduledPreloadJobName: The task name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrScheduledPreloadJobName"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskSubmitted")
    def attr_task_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskSubmitted: The number of submitted prefetch tasks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskType")
    def attr_task_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskType: The task type.

        Valid values: refresh and preload.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskType"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlCount")
    def attr_url_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlCount: The total number of URLs.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUrlCount"))

    @builtins.property
    @jsii.member(jsii_name="attrUrlSubmitted")
    def attr_url_submitted(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UrlSubmitted: The number of submitted URLs.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUrlSubmitted"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "ScheduledPreloadJobProps":
        return typing.cast("ScheduledPreloadJobProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9dfa29f73971221b0db0388b6d674f7f62d79fc24955a1dfcf71296003b4ae2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f88bf3ab86226dfa4f04ab03ecc328580a4a4b18ef9188a58084b69f0155614)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2eaad7027a121d7a1d87d9910fdb87cca07d88c047de3c9ff9d4fdb43fa6e8f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.ScheduledPreloadJobProps",
    jsii_struct_bases=[],
    name_mapping={
        "insert_way": "insertWay",
        "scheduled_preload_job_name": "scheduledPreloadJobName",
        "site_id": "siteId",
        "oss_url": "ossUrl",
        "url_list": "urlList",
    },
)
class ScheduledPreloadJobProps:
    def __init__(
        self,
        *,
        insert_way: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        scheduled_preload_job_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        oss_url: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        url_list: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
    ) -> None:
        '''Properties for defining a ``ScheduledPreloadJob``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-scheduledpreloadjob

        :param insert_way: Property insertWay: The method to submit the URLs to be prefetched.
        :param scheduled_preload_job_name: Property scheduledPreloadJobName: The name of the scheduled prefetch task.
        :param site_id: Property siteId: The site ID.
        :param oss_url: Property ossUrl: Preheat OSS files regularly and fill in the OSS file address. Note: The OSS file contains the URL that you need to warm up.
        :param url_list: Property urlList: A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcbf9286d901867d236ba793e98f957993ce0aff62a5e46875928376138faa5e)
            check_type(argname="argument insert_way", value=insert_way, expected_type=type_hints["insert_way"])
            check_type(argname="argument scheduled_preload_job_name", value=scheduled_preload_job_name, expected_type=type_hints["scheduled_preload_job_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument oss_url", value=oss_url, expected_type=type_hints["oss_url"])
            check_type(argname="argument url_list", value=url_list, expected_type=type_hints["url_list"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "insert_way": insert_way,
            "scheduled_preload_job_name": scheduled_preload_job_name,
            "site_id": site_id,
        }
        if oss_url is not None:
            self._values["oss_url"] = oss_url
        if url_list is not None:
            self._values["url_list"] = url_list

    @builtins.property
    def insert_way(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property insertWay: The method to submit the URLs to be prefetched.'''
        result = self._values.get("insert_way")
        assert result is not None, "Required property 'insert_way' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def scheduled_preload_job_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property scheduledPreloadJobName: The name of the scheduled prefetch task.'''
        result = self._values.get("scheduled_preload_job_name")
        assert result is not None, "Required property 'scheduled_preload_job_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def oss_url(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property ossUrl: Preheat OSS files regularly and fill in the OSS file address.

        Note: The OSS file contains the URL that you need to warm up.
        '''
        result = self._values.get("oss_url")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def url_list(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]]:
        '''Property urlList: A list of URLs to be preheated, which is used when uploading a preheated file in the text box mode.'''
        result = self._values.get("url_list")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "ScheduledPreloadJobProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(ISiteDeliveryTask)
class SiteDeliveryTask(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.SiteDeliveryTask",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::SiteDeliveryTask``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosSiteDeliveryTask``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-sitedeliverytask
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["SiteDeliveryTaskProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e58195de2c5c1788ce763f2d5fbf40e97ca5d7df2b7f15188aa170c1fccbd3a8)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrBusinessType")
    def attr_business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute BusinessType: Real-time log type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrBusinessType"))

    @builtins.property
    @jsii.member(jsii_name="attrDataCenter")
    def attr_data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DataCenter: Data Center.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDataCenter"))

    @builtins.property
    @jsii.member(jsii_name="attrDeliveryType")
    def attr_delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DeliveryType: Delivery Type:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDeliveryType"))

    @builtins.property
    @jsii.member(jsii_name="attrDiscardRate")
    def attr_discard_rate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DiscardRate: If the discard rate is not filled, the default value is 0.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDiscardRate"))

    @builtins.property
    @jsii.member(jsii_name="attrFieldName")
    def attr_field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FieldName: The list of delivery fields to be modified, separated by commas.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFieldName"))

    @builtins.property
    @jsii.member(jsii_name="attrFilterRules")
    def attr_filter_rules(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FilterRules: The filtering rules.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFilterRules"))

    @builtins.property
    @jsii.member(jsii_name="attrSinkConfig")
    def attr_sink_config(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SinkConfig: The delivery configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSinkConfig"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrTaskName")
    def attr_task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TaskName: The task name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTaskName"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "SiteDeliveryTaskProps":
        return typing.cast("SiteDeliveryTaskProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__685f296b04f576c7395fb3b2de3e445f531cbdda799112b565e3ba76bd6be1b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__601645a2814aa9c398674d06c33b4986a8d33aaf858a5247934f7b4e838b0f28)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65a4e3746aa23bdb197359867f7d5397b2afd6910ea314b8b4a57d254ef92a8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.SiteDeliveryTaskProps",
    jsii_struct_bases=[],
    name_mapping={
        "business_type": "businessType",
        "data_center": "dataCenter",
        "delivery_type": "deliveryType",
        "field_name": "fieldName",
        "site_id": "siteId",
        "task_name": "taskName",
        "discard_rate": "discardRate",
        "http_delivery": "httpDelivery",
        "kafka_delivery": "kafkaDelivery",
        "oss_delivery": "ossDelivery",
        "s3_delivery": "s3Delivery",
        "sls_delivery": "slsDelivery",
    },
)
class SiteDeliveryTaskProps:
    def __init__(
        self,
        *,
        business_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        data_center: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        delivery_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        field_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        task_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        discard_rate: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        http_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.HttpDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        kafka_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.KafkaDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        oss_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.OssDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        s3_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.S3DeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
        sls_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.SlsDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    ) -> None:
        '''Properties for defining a ``SiteDeliveryTask``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-sitedeliverytask

        :param business_type: Property businessType: Real-time log type. Valid values: - ``dcdn_log_access_l1 (default)``: access log. - ``dcdn_log_er``: Edge Routine logs. - ``dcdn_log_waf``: firewall logs. - ``dcdn_log_ipa``: TCP/UDP proxy logs.
        :param data_center: Property dataCenter: Data Center. Values: - ``cn``: Mainland China. - ``sg``: Global (excluding Mainland China).
        :param delivery_type: Property deliveryType: Delivery Type: - ``sls``: Alibaba Cloud Simple Log Service (SLS). - ``http``: Http service. - ``aws3``: Amazon s3 service. - ``oss``: Alibaba Cloud Object Storage Service. - ``kafka``: Kafka service. - ``aws3cmpt``: Amazon s3 Compatible Service.
        :param field_name: Property fieldName: The list of delivery fields to be modified, separated by commas.
        :param site_id: Property siteId: The site ID.
        :param task_name: Property taskName: The name of the delivery task.
        :param discard_rate: Property discardRate: If the discard rate is not filled, the default value is 0.
        :param http_delivery: Property httpDelivery: HTTP delivery configuration parameters.
        :param kafka_delivery: Property kafkaDelivery: Kafka delivery configuration parameters.
        :param oss_delivery: Property ossDelivery: OSS delivery configuration.
        :param s3_delivery: Property s3Delivery: S3/S3 compatible delivery configuration parameters.
        :param sls_delivery: Property slsDelivery: SLS delivery configuration.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2cc50ba147f5a4d1361249383407805b07891d04d02d302b4b06ccc62049e7e)
            check_type(argname="argument business_type", value=business_type, expected_type=type_hints["business_type"])
            check_type(argname="argument data_center", value=data_center, expected_type=type_hints["data_center"])
            check_type(argname="argument delivery_type", value=delivery_type, expected_type=type_hints["delivery_type"])
            check_type(argname="argument field_name", value=field_name, expected_type=type_hints["field_name"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument task_name", value=task_name, expected_type=type_hints["task_name"])
            check_type(argname="argument discard_rate", value=discard_rate, expected_type=type_hints["discard_rate"])
            check_type(argname="argument http_delivery", value=http_delivery, expected_type=type_hints["http_delivery"])
            check_type(argname="argument kafka_delivery", value=kafka_delivery, expected_type=type_hints["kafka_delivery"])
            check_type(argname="argument oss_delivery", value=oss_delivery, expected_type=type_hints["oss_delivery"])
            check_type(argname="argument s3_delivery", value=s3_delivery, expected_type=type_hints["s3_delivery"])
            check_type(argname="argument sls_delivery", value=sls_delivery, expected_type=type_hints["sls_delivery"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "business_type": business_type,
            "data_center": data_center,
            "delivery_type": delivery_type,
            "field_name": field_name,
            "site_id": site_id,
            "task_name": task_name,
        }
        if discard_rate is not None:
            self._values["discard_rate"] = discard_rate
        if http_delivery is not None:
            self._values["http_delivery"] = http_delivery
        if kafka_delivery is not None:
            self._values["kafka_delivery"] = kafka_delivery
        if oss_delivery is not None:
            self._values["oss_delivery"] = oss_delivery
        if s3_delivery is not None:
            self._values["s3_delivery"] = s3_delivery
        if sls_delivery is not None:
            self._values["sls_delivery"] = sls_delivery

    @builtins.property
    def business_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property businessType: Real-time log type.

        Valid values:

        - ``dcdn_log_access_l1 (default)``: access log.
        - ``dcdn_log_er``: Edge Routine logs.
        - ``dcdn_log_waf``: firewall logs.
        - ``dcdn_log_ipa``: TCP/UDP proxy logs.
        '''
        result = self._values.get("business_type")
        assert result is not None, "Required property 'business_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def data_center(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property dataCenter: Data Center.

        Values:

        - ``cn``: Mainland China.
        - ``sg``: Global (excluding Mainland China).
        '''
        result = self._values.get("data_center")
        assert result is not None, "Required property 'data_center' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def delivery_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property deliveryType: Delivery Type: - ``sls``: Alibaba Cloud Simple Log Service (SLS).

        - ``http``: Http service.
        - ``aws3``: Amazon s3 service.
        - ``oss``: Alibaba Cloud Object Storage Service.
        - ``kafka``: Kafka service.
        - ``aws3cmpt``: Amazon s3 Compatible Service.
        '''
        result = self._values.get("delivery_type")
        assert result is not None, "Required property 'delivery_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def field_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property fieldName: The list of delivery fields to be modified, separated by commas.'''
        result = self._values.get("field_name")
        assert result is not None, "Required property 'field_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def task_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property taskName: The name of the delivery task.'''
        result = self._values.get("task_name")
        assert result is not None, "Required property 'task_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def discard_rate(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property discardRate: If the discard rate is not filled, the default value is 0.'''
        result = self._values.get("discard_rate")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def http_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.HttpDeliveryProperty]]:
        '''Property httpDelivery: HTTP delivery configuration parameters.'''
        result = self._values.get("http_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.HttpDeliveryProperty]], result)

    @builtins.property
    def kafka_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.KafkaDeliveryProperty]]:
        '''Property kafkaDelivery: Kafka delivery configuration parameters.'''
        result = self._values.get("kafka_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.KafkaDeliveryProperty]], result)

    @builtins.property
    def oss_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.OssDeliveryProperty]]:
        '''Property ossDelivery: OSS delivery configuration.'''
        result = self._values.get("oss_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.OssDeliveryProperty]], result)

    @builtins.property
    def s3_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.S3DeliveryProperty]]:
        '''Property s3Delivery: S3/S3 compatible delivery configuration parameters.'''
        result = self._values.get("s3_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.S3DeliveryProperty]], result)

    @builtins.property
    def sls_delivery(
        self,
    ) -> typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.SlsDeliveryProperty]]:
        '''Property slsDelivery: SLS delivery configuration.'''
        result = self._values.get("sls_delivery")
        return typing.cast(typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.SlsDeliveryProperty]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "SiteDeliveryTaskProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(IWaitingRoom)
class WaitingRoom(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.WaitingRoom",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::WaitingRoom``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosWaitingRoom``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-waitingroom
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union["WaitingRoomProps", typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bb0604d5abb6a8969d263f278d08a13b3b2b93e216a58c7120bc23f421702e4)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCookieName")
    def attr_cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CookieName: Custom Cookie name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCookieName"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomPageHtml")
    def attr_custom_page_html(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter.

        The incoming content needs to be base64 encoded.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCustomPageHtml"))

    @builtins.property
    @jsii.member(jsii_name="attrDescription")
    def attr_description(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Description: Waiting room description.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDescription"))

    @builtins.property
    @jsii.member(jsii_name="attrDisableSessionRenewalEnable")
    def attr_disable_session_renewal_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DisableSessionRenewalEnable: Disable session renewal.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDisableSessionRenewalEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrHostNameAndPath")
    def attr_host_name_and_path(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HostNameAndPath: Host name and path.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHostNameAndPath"))

    @builtins.property
    @jsii.member(jsii_name="attrJsonResponseEnable")
    def attr_json_response_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute JsonResponseEnable: The JSON response.

        If the accept request header contains "application/json", JSON data is returned.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrJsonResponseEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrLanguage")
    def attr_language(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Language: The language of the waiting room page.

        When the waiting room type is the default type, it needs to be passed in.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrLanguage"))

    @builtins.property
    @jsii.member(jsii_name="attrNewUsersPerMinute")
    def attr_new_users_per_minute(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NewUsersPerMinute: Number of new users per minute.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNewUsersPerMinute"))

    @builtins.property
    @jsii.member(jsii_name="attrQueueAllEnable")
    def attr_queue_all_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueueAllEnable: All in line.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueueAllEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingMethod")
    def attr_queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingMethod: Way of queuing.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueuingMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrQueuingStatusCode")
    def attr_queuing_status_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QueuingStatusCode: Waiting room status code.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQueuingStatusCode"))

    @builtins.property
    @jsii.member(jsii_name="attrSessionDuration")
    def attr_session_duration(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SessionDuration: Session duration in minutes.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSessionDuration"))

    @builtins.property
    @jsii.member(jsii_name="attrTotalActiveUsers")
    def attr_total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TotalActiveUsers: Total number of active users.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTotalActiveUsers"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomId")
    def attr_waiting_room_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomId: The waiting room ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomId"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomName")
    def attr_waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomName: The name of the waiting room.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomName"))

    @builtins.property
    @jsii.member(jsii_name="attrWaitingRoomType")
    def attr_waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute WaitingRoomType: Waiting room type, support:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrWaitingRoomType"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> "WaitingRoomProps":
        return typing.cast("WaitingRoomProps", jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bab06dba5a023d89f19ee062e0784ff8aaed8c5ab1fe7ef4dfe597fce0685478)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f8af29ff569c5386bd800eb94063e64dc59a78095bbd8b55f3f0d91dfd8309c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__468acb3fc29b9f27acf8345badb4e2de8313dca937459daa6f0cdc896c8ae6a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.data_type(
    jsii_type="@alicloud/ros-cdk-esa.WaitingRoomProps",
    jsii_struct_bases=[],
    name_mapping={
        "cookie_name": "cookieName",
        "host_name_and_path": "hostNameAndPath",
        "new_users_per_minute": "newUsersPerMinute",
        "queuing_method": "queuingMethod",
        "queuing_status_code": "queuingStatusCode",
        "session_duration": "sessionDuration",
        "site_id": "siteId",
        "status": "status",
        "total_active_users": "totalActiveUsers",
        "waiting_room_name": "waitingRoomName",
        "waiting_room_type": "waitingRoomType",
        "custom_page_html": "customPageHtml",
        "description": "description",
        "disable_session_renewal_enable": "disableSessionRenewalEnable",
        "json_response_enable": "jsonResponseEnable",
        "language": "language",
        "queue_all_enable": "queueAllEnable",
    },
)
class WaitingRoomProps:
    def __init__(
        self,
        *,
        cookie_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        host_name_and_path: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosWaitingRoom.HostNameAndPathProperty, typing.Dict[builtins.str, typing.Any]]]]],
        new_users_per_minute: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        queuing_method: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        queuing_status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        session_duration: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
        status: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        total_active_users: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        waiting_room_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        waiting_room_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
        custom_page_html: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        disable_session_renewal_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        json_response_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        language: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
        queue_all_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ) -> None:
        '''Properties for defining a ``WaitingRoom``.

        See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-waitingroom

        :param cookie_name: Property cookieName: The name of the custom cookie.
        :param host_name_and_path: Property hostNameAndPath: The hostname and path.
        :param new_users_per_minute: Property newUsersPerMinute: The maximum number of new users per minute.
        :param queuing_method: Property queuingMethod: The queuing method. Value: - ``random``: Users gain access to the origin randomly, regardless of the arrival time. - ``fifo``: Users gain access to the origin in order of arrival. - ``Passthrough``: Users pass through the waiting room and go straight to the origin. - ``Reject-all``: Users are blocked from reaching the origin.
        :param queuing_status_code: Property queuingStatusCode: Waiting room status code. Value: - ``200`` - ``202`` - ``429``.
        :param session_duration: Property sessionDuration: The maximum duration for which a session remains valid after a user leaves the origin. Unit: minutes.
        :param site_id: Property siteId: The site ID.
        :param status: Property status: Waiting room enabled status. Value: - 'on': Enable waiting room - 'off': Disabled waiting room
        :param total_active_users: Property totalActiveUsers: The maximum number of active users.
        :param waiting_room_name: Property waitingRoomName: The name of the waiting room.
        :param waiting_room_type: Property waitingRoomType: The type of the waiting room, support: - ``default``: Indicates the default type. - ``custom``: indicates a custom type.
        :param custom_page_html: Property customPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter. The incoming content needs to be base64 encoded.
        :param description: Property description: Waiting room description.
        :param disable_session_renewal_enable: Property disableSessionRenewalEnable: Specifies whether to disable session renewal. Value: - ``on``: open. - ``off``: closed.
        :param json_response_enable: Property jsonResponseEnable: The JSON response. If the accept request header contains "application/json", JSON data is returned. Value: - ``on``: open. - ``off``: closed.
        :param language: Property language: The language of the waiting room page. When the waiting room type is the default type, it needs to be passed in. The following types are supported: - ``enus``: English. - ``zhcn``: Simplified Chinese. - ``zhhk``: Traditional Chinese.
        :param queue_all_enable: Property queueAllEnable: Specifies whether to queue all requests. Value: - ``on``: open. - ``off``: closed.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f27f090a1d25d4504ca55dcfa03ec74bcf676186b8b0b7ec375fcb40ab81c585)
            check_type(argname="argument cookie_name", value=cookie_name, expected_type=type_hints["cookie_name"])
            check_type(argname="argument host_name_and_path", value=host_name_and_path, expected_type=type_hints["host_name_and_path"])
            check_type(argname="argument new_users_per_minute", value=new_users_per_minute, expected_type=type_hints["new_users_per_minute"])
            check_type(argname="argument queuing_method", value=queuing_method, expected_type=type_hints["queuing_method"])
            check_type(argname="argument queuing_status_code", value=queuing_status_code, expected_type=type_hints["queuing_status_code"])
            check_type(argname="argument session_duration", value=session_duration, expected_type=type_hints["session_duration"])
            check_type(argname="argument site_id", value=site_id, expected_type=type_hints["site_id"])
            check_type(argname="argument status", value=status, expected_type=type_hints["status"])
            check_type(argname="argument total_active_users", value=total_active_users, expected_type=type_hints["total_active_users"])
            check_type(argname="argument waiting_room_name", value=waiting_room_name, expected_type=type_hints["waiting_room_name"])
            check_type(argname="argument waiting_room_type", value=waiting_room_type, expected_type=type_hints["waiting_room_type"])
            check_type(argname="argument custom_page_html", value=custom_page_html, expected_type=type_hints["custom_page_html"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
            check_type(argname="argument disable_session_renewal_enable", value=disable_session_renewal_enable, expected_type=type_hints["disable_session_renewal_enable"])
            check_type(argname="argument json_response_enable", value=json_response_enable, expected_type=type_hints["json_response_enable"])
            check_type(argname="argument language", value=language, expected_type=type_hints["language"])
            check_type(argname="argument queue_all_enable", value=queue_all_enable, expected_type=type_hints["queue_all_enable"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "cookie_name": cookie_name,
            "host_name_and_path": host_name_and_path,
            "new_users_per_minute": new_users_per_minute,
            "queuing_method": queuing_method,
            "queuing_status_code": queuing_status_code,
            "session_duration": session_duration,
            "site_id": site_id,
            "status": status,
            "total_active_users": total_active_users,
            "waiting_room_name": waiting_room_name,
            "waiting_room_type": waiting_room_type,
        }
        if custom_page_html is not None:
            self._values["custom_page_html"] = custom_page_html
        if description is not None:
            self._values["description"] = description
        if disable_session_renewal_enable is not None:
            self._values["disable_session_renewal_enable"] = disable_session_renewal_enable
        if json_response_enable is not None:
            self._values["json_response_enable"] = json_response_enable
        if language is not None:
            self._values["language"] = language
        if queue_all_enable is not None:
            self._values["queue_all_enable"] = queue_all_enable

    @builtins.property
    def cookie_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property cookieName: The name of the custom cookie.'''
        result = self._values.get("cookie_name")
        assert result is not None, "Required property 'cookie_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def host_name_and_path(
        self,
    ) -> typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosWaitingRoom.HostNameAndPathProperty]]]:
        '''Property hostNameAndPath: The hostname and path.'''
        result = self._values.get("host_name_and_path")
        assert result is not None, "Required property 'host_name_and_path' is missing"
        return typing.cast(typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosWaitingRoom.HostNameAndPathProperty]]], result)

    @builtins.property
    def new_users_per_minute(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property newUsersPerMinute: The maximum number of new users per minute.'''
        result = self._values.get("new_users_per_minute")
        assert result is not None, "Required property 'new_users_per_minute' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def queuing_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property queuingMethod: The queuing method.

        Value:

        - ``random``: Users gain access to the origin randomly, regardless of the arrival time.
        - ``fifo``: Users gain access to the origin in order of arrival.
        - ``Passthrough``: Users pass through the waiting room and go straight to the origin.
        - ``Reject-all``: Users are blocked from reaching the origin.
        '''
        result = self._values.get("queuing_method")
        assert result is not None, "Required property 'queuing_method' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def queuing_status_code(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property queuingStatusCode: Waiting room status code.

        Value:

        - ``200``
        - ``202``
        - ``429``.
        '''
        result = self._values.get("queuing_status_code")
        assert result is not None, "Required property 'queuing_status_code' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def session_duration(
        self,
    ) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property sessionDuration: The maximum duration for which a session remains valid after a user leaves the origin.

        Unit: minutes.
        '''
        result = self._values.get("session_duration")
        assert result is not None, "Required property 'session_duration' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def site_id(self) -> typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property siteId: The site ID.'''
        result = self._values.get("site_id")
        assert result is not None, "Required property 'site_id' is missing"
        return typing.cast(typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def status(self) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property status: Waiting room enabled status.

        Value:

        - 'on': Enable waiting room
        - 'off': Disabled waiting room
        '''
        result = self._values.get("status")
        assert result is not None, "Required property 'status' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def total_active_users(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property totalActiveUsers: The maximum number of active users.'''
        result = self._values.get("total_active_users")
        assert result is not None, "Required property 'total_active_users' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def waiting_room_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property waitingRoomName: The name of the waiting room.'''
        result = self._values.get("waiting_room_name")
        assert result is not None, "Required property 'waiting_room_name' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def waiting_room_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Property waitingRoomType: The type of the waiting room, support: - ``default``: Indicates the default type.

        - ``custom``: indicates a custom type.
        '''
        result = self._values.get("waiting_room_type")
        assert result is not None, "Required property 'waiting_room_type' is missing"
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], result)

    @builtins.property
    def custom_page_html(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property customPageHtml: User-defined waiting room page content, when the waiting room type is custom type, you need to enter.

        The incoming content needs to be base64 encoded.
        '''
        result = self._values.get("custom_page_html")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def description(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property description: Waiting room description.'''
        result = self._values.get("description")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def disable_session_renewal_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property disableSessionRenewalEnable: Specifies whether to disable session renewal.

        Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("disable_session_renewal_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def json_response_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property jsonResponseEnable: The JSON response.

        If the accept request header contains "application/json", JSON data is returned. Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("json_response_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def language(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property language: The language of the waiting room page.

        When the waiting room type is the default type, it needs to be passed in. The following types are supported:

        - ``enus``: English.
        - ``zhcn``: Simplified Chinese.
        - ``zhhk``: Traditional Chinese.
        '''
        result = self._values.get("language")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    @builtins.property
    def queue_all_enable(
        self,
    ) -> typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]:
        '''Property queueAllEnable: Specifies whether to queue all requests.

        Value:

        - ``on``: open.
        - ``off``: closed.
        '''
        result = self._values.get("queue_all_enable")
        return typing.cast(typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "WaitingRoomProps(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.implements(ICertificate)
class Certificate(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.Certificate",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::Certificate``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosCertificate``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-certificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[CertificateProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6721421cf07cb271be7086c1b73337fcefd0461af639efae65b9b7885adf837)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrApplyCode")
    def attr_apply_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyCode: Certificate application error code.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrApplyCode"))

    @builtins.property
    @jsii.member(jsii_name="attrApplyMessage")
    def attr_apply_message(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ApplyMessage: Certificate application error message.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrApplyMessage"))

    @builtins.property
    @jsii.member(jsii_name="attrCasId")
    def attr_cas_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CasId: Cloud certificate ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCasId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertId")
    def attr_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertId: The certificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrCertName")
    def attr_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CertName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: Common Name (CN) field of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDcv")
    def attr_dcv(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DCV: DCV information.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDcv"))

    @builtins.property
    @jsii.member(jsii_name="attrDomains")
    def attr_domains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Domains: A list of domain names.

        Multiple domain names are separated by commas.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomains"))

    @builtins.property
    @jsii.member(jsii_name="attrFingerprintSha256")
    def attr_fingerprint_sha256(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute FingerprintSha256: SHA256 fingerprint of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrFingerprintSha256"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate issuer.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuerCn")
    def attr_issuer_cn(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute IssuerCN: Common name of the certificate issuer.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuerCn"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: End time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: Start time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubAlg")
    def attr_pub_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubAlg: Certificate public key algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSerialNumber")
    def attr_serial_number(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SerialNumber: Serial number of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSerialNumber"))

    @builtins.property
    @jsii.member(jsii_name="attrSigAlg")
    def attr_sig_alg(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SigAlg: Certificate signature algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSigAlg"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The site ID, which can be obtained by calling the ListSites interface.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: Site name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CertificateProps:
        return typing.cast(CertificateProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7bbdd8ca2d1da30c7ac2e60d54460c1197afc02d0a58b6e77a6b403f865c3c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35ec6b11da48b449a92896864b98fcb90ef375a8219e97bfec1d696f1d3ba153)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b2f25bff7945454474cf0b6eef73420bb0a5f789fa005237d226c873c3b40e6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IClientCaCertificate)
class ClientCaCertificate(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.ClientCaCertificate",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::ClientCaCertificate``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosClientCaCertificate``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcacertificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[ClientCaCertificateProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b0bfe99a93c55b34115556b37ea553c19a3a8471aa346cbebc99d8ab0b07907)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertId")
    def attr_client_ca_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertId: ClientCaCertificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCaCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCaCertName")
    def attr_client_ca_cert_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCaCertName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCaCertName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The certificate common name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: Creation time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: Certificate Authority.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The expiration date of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The start time of the certificate validity period.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: Certificate public key algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: Alternate certificate subject name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: Certificate signature algorithm.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: Update time.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCaCertificateProps:
        return typing.cast(ClientCaCertificateProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd2df0ab3df8034244c16eb480d3bb1141527b51e97d63c1e70ba9fec35bcf12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__669479428eb92dcfa5a287d69981b3db30c68d308d2dd7dfbb9f90d2e88d135f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d110355417cdb6edafe7055c7a7cf39c21ad3867e0de8e82554885ed7f3dd559)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IClientCertificate)
class ClientCertificate(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.ClientCertificate",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::ClientCertificate``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosClientCertificate``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-clientcertificate
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[ClientCertificateProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8bd6a4aa0d86fc8487af16fcbe9cbdd32630a9153434908fc85a59cc160a51c)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCaCertificateId")
    def attr_ca_certificate_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CACertificateId: The ID of the CA certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCaCertificateId"))

    @builtins.property
    @jsii.member(jsii_name="attrCertificate")
    def attr_certificate(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Certificate: Certificate content.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCertificate"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertId")
    def attr_client_cert_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertId: ClientCertificate Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCertId"))

    @builtins.property
    @jsii.member(jsii_name="attrClientCertificateName")
    def attr_client_certificate_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ClientCertificateName: The certificate name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrClientCertificateName"))

    @builtins.property
    @jsii.member(jsii_name="attrCommonName")
    def attr_common_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CommonName: The Common Name of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCommonName"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the certificate was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrIssuer")
    def attr_issuer(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Issuer: The certificate authority (CA) that issued the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrIssuer"))

    @builtins.property
    @jsii.member(jsii_name="attrNotAfter")
    def attr_not_after(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotAfter: The time when the certificate expires.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotAfter"))

    @builtins.property
    @jsii.member(jsii_name="attrNotBefore")
    def attr_not_before(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute NotBefore: The time when the certificate takes effect.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrNotBefore"))

    @builtins.property
    @jsii.member(jsii_name="attrPubkeyAlgorithm")
    def attr_pubkey_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PubkeyAlgorithm: The public-key algorithm of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPubkeyAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSan")
    def attr_san(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SAN: The Subject Alternative Name (SAN) of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSan"))

    @builtins.property
    @jsii.member(jsii_name="attrSignatureAlgorithm")
    def attr_signature_algorithm(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SignatureAlgorithm: The signature algorithm of the certificate.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSignatureAlgorithm"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: Site Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteName")
    def attr_site_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteName: The website name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteName"))

    @builtins.property
    @jsii.member(jsii_name="attrType")
    def attr_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Type: The certificate type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrType"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the certificate was updated.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> ClientCertificateProps:
        return typing.cast(ClientCertificateProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b433a97afc7473ae7b03bc38d2a9044664e02d334e3f5b4afebeb58330c5ff89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec2032bd9ae8b6c00bb56d1556246530de1bb562b142d1e560d4afd35abc3e6d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10f2c0391d3d2e4586fa37aeeeb1cd55895331163f6101e5c4c0ce866bb16933)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(ICompressionRule)
class CompressionRule(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.CompressionRule",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::CompressionRule``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosCompressionRule``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-compressionrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[CompressionRuleProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5eff886828771d6d60f5c3c291530e46516d0e595b35ba1240cf2093ba073f5b)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrBrotli")
    def attr_brotli(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Brotli: Brotli compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrBrotli"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrGzip")
    def attr_gzip(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Gzip: Gzip compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGzip"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="attrZstd")
    def attr_zstd(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Zstd: Zstd compression.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrZstd"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CompressionRuleProps:
        return typing.cast(CompressionRuleProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6a06785a05ce5191babd4eb2d5b41d1231d2054d71c65604b1abd4fe665ae80e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e7d012c1f8c63e1f872a9778bca83827ccd262aca32caed8f731f45d73e2a19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c4ef18460aa2e15836682590ddd27ca34cea3b03ab2f43cb273d95036c1ec5e9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(ICustomScenePolicy)
class CustomScenePolicy(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.CustomScenePolicy",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::CustomScenePolicy``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosCustomScenePolicy``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-customscenepolicy
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[CustomScenePolicyProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ed810224f209fe4b795e50a927f95f4515d8e21fdae3ea5b1b8035f670d0167)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the policy takes effect.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrCustomScenePolicyName")
    def attr_custom_scene_policy_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CustomScenePolicyName: The name of the policy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCustomScenePolicyName"))

    @builtins.property
    @jsii.member(jsii_name="attrEndTime")
    def attr_end_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EndTime: The time when the policy expires.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEndTime"))

    @builtins.property
    @jsii.member(jsii_name="attrObjects")
    def attr_objects(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Objects: The IDs of websites associated.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrObjects"))

    @builtins.property
    @jsii.member(jsii_name="attrPolicyId")
    def attr_policy_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute PolicyId: The Id of the Policy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrPolicyId"))

    @builtins.property
    @jsii.member(jsii_name="attrTemplate")
    def attr_template(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Template: The name of the policy template.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTemplate"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> CustomScenePolicyProps:
        return typing.cast(CustomScenePolicyProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffe4a0bfa502137b0c47e2dc588032d564868de596a0efcd18d0bbd34bd87bd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3764b2ab332623155eff230da41479578c7758d0e76684c465a3edd806f6cd21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04fe0982d499fb5a40afeb8529b8e1fd848634cf5927719a07611b9e6ebbb5a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IEdgeContainerApp)
class EdgeContainerApp(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.EdgeContainerApp",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::EdgeContainerApp``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosEdgeContainerApp``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapp
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[EdgeContainerAppProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8122658aec562deaec68c378e8da63a1be8e3ca73eea7786bf358d0d7d6c4f1a)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrAppStatus")
    def attr_app_status(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppStatus: The status of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAppStatus"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the application was created.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrDomainName")
    def attr_domain_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute DomainName: The domain name that is associated with the application.

        If no domain name is associated with the application, the value is an empty string.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrDomainName"))

    @builtins.property
    @jsii.member(jsii_name="attrEdgeContainerAppName")
    def attr_edge_container_app_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute EdgeContainerAppName: The name of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrEdgeContainerAppName"))

    @builtins.property
    @jsii.member(jsii_name="attrGatewayType")
    def attr_gateway_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute GatewayType: The type of the gateway.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrGatewayType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckFailTimes")
    def attr_health_check_fail_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckFailTimes: TThe number of consecutive failed health checks required for an application to be considered as unhealthy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckFailTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHost")
    def attr_health_check_host(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHost: The domain name that is used for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckHost"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckHttpCode")
    def attr_health_check_http_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckHttpCode: The HTTP status code returned for a successful health check.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckHttpCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckInterval")
    def attr_health_check_interval(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckInterval: The interval between two consecutive health checks.

        Unit: seconds.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckInterval"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckMethod")
    def attr_health_check_method(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckMethod: The HTTP request method for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckMethod"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckPort")
    def attr_health_check_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckPort: The port used for health checks.

        Valid values: 1 to 65535. Default value: 80.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckPort"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckSuccTimes")
    def attr_health_check_succ_times(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckSuccTimes: The number of consecutive successful health checks required for an application to be considered as healthy.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckSuccTimes"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckTimeout")
    def attr_health_check_timeout(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckTimeout: The timeout period of a health check response.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckTimeout"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckType")
    def attr_health_check_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckType: The health check type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckType"))

    @builtins.property
    @jsii.member(jsii_name="attrHealthCheckUri")
    def attr_health_check_uri(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HealthCheckUri: The URI used for health checks.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHealthCheckUri"))

    @builtins.property
    @jsii.member(jsii_name="attrQuicCid")
    def attr_quic_cid(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute QuicCid: Indicates whether QUIC is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrQuicCid"))

    @builtins.property
    @jsii.member(jsii_name="attrRemarks")
    def attr_remarks(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Remarks: The remarks.

        This parameter is empty by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRemarks"))

    @builtins.property
    @jsii.member(jsii_name="attrServicePort")
    def attr_service_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ServicePort: The server port.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrServicePort"))

    @builtins.property
    @jsii.member(jsii_name="attrTargetPort")
    def attr_target_port(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute TargetPort: The backend port, which is also the service port of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTargetPort"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the application was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrVersionCount")
    def attr_version_count(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute VersionCount: The number of versions of the application.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrVersionCount"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppProps:
        return typing.cast(EdgeContainerAppProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ce3d9b86a34caaef70e3c1c938f6c5d0e31e17822c698c13e8fafb74bb3a9fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f30edac8339f95030bfddea40866ead62e867a1e53d9659066ae81e59988435)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9678906c83108dd46d60f08edc6a962a21552155804093a02bd59ae344af8ca3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IEdgeContainerAppRecord)
class EdgeContainerAppRecord(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.EdgeContainerAppRecord",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::EdgeContainerAppRecord``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosEdgeContainerAppRecord``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-edgecontainerapprecord
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[EdgeContainerAppRecordProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2049ad9239b1c7065c4f044ff4f6f04ef276e1435d6bafcbda0f5335280da4d)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrAppId")
    def attr_app_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AppId: The application ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAppId"))

    @builtins.property
    @jsii.member(jsii_name="attrCname")
    def attr_cname(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Cname: The CNAME of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCname"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: The configuration ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrCreateTime")
    def attr_create_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CreateTime: The time when the domain name was added.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCreateTime"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordId")
    def attr_record_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordId: The record ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordId"))

    @builtins.property
    @jsii.member(jsii_name="attrRecordName")
    def attr_record_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RecordName: The associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRecordName"))

    @builtins.property
    @jsii.member(jsii_name="attrSchemdId")
    def attr_schemd_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SchemdId: The scheduling domain ID of the associated domain name.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSchemdId"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteId")
    def attr_site_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteId: The website ID.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteId"))

    @builtins.property
    @jsii.member(jsii_name="attrUpdateTime")
    def attr_update_time(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute UpdateTime: The time when the scheduling domain ID or CNAME was last modified.

        The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ss format. The time is displayed in UTC.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrUpdateTime"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> EdgeContainerAppRecordProps:
        return typing.cast(EdgeContainerAppRecordProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a4e2ff77f40fba2dc801a504501cac7d41794d850ee3794ab0408438f8ac2c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b162248cee90d1ce873151a00d78a99de05c33f70dcdc114c87d3efcb844195)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__281218bf93d3842767e1d3a4e095ee61105044fc5cdbe3573939d719c594e77b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IHttpRequestHeaderModificationRule)
class HttpRequestHeaderModificationRule(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.HttpRequestHeaderModificationRule",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::HttpRequestHeaderModificationRule``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosHttpRequestHeaderModificationRule``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httprequestheadermodificationrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[HttpRequestHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bece07dcb59f400c1a1517f4dd4b9cfb9ecf84f6891c30273e8c3d0b4c751458)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.

        You can use this parameter to check the global configuration or rule configuration.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrRequestHeaderModification")
    def attr_request_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RequestHeaderModification: The configurations of modifying request headers.

        You can add, delete, or modify a request header.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRequestHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpRequestHeaderModificationRuleProps:
        return typing.cast(HttpRequestHeaderModificationRuleProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bf13f4ba323256c7d23f82f37265b5535008a8b540583044cd4333dc03fc167)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3212522d04cb09a07f7b6948d0d016b5401aed26055407c5370dccdbe5c03b2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe2c07064f708e0b819c21e048ae84baef5c20e90e5ff46fa368d20a7278a2c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IHttpResponseHeaderModificationRule)
class HttpResponseHeaderModificationRule(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.HttpResponseHeaderModificationRule",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::HttpResponseHeaderModificationRule``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosHttpResponseHeaderModificationRule``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpresponseheadermodificationrule
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[HttpResponseHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1507b264830d16a7e71d11650f1ae190fca0e3963eb0ac5c0ee61a3dffc05ea0)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The configuration type.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrResponseHeaderModification")
    def attr_response_header_modification(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ResponseHeaderModification: Modify response headers, supporting add, delete, and modify operations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrResponseHeaderModification"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpResponseHeaderModificationRuleProps:
        return typing.cast(HttpResponseHeaderModificationRuleProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55cec41285b15fe71744ddb6bfdaf004e536de9261d028cf7df8d757d503108d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41f643e11045d1310ecdc5b2817858710a4f7c48393af51707144a0b8e09fbd1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97986debfa8ff64bb2cd554fd1f212878edfc8d26ef4bb8ef83110274eeb5492)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IHttpsApplicationConfiguration)
class HttpsApplicationConfiguration(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.HttpsApplicationConfiguration",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::HttpsApplicationConfiguration``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosHttpsApplicationConfiguration``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsapplicationconfiguration
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[HttpsApplicationConfigurationProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30b41b9eb20b604cece16ad3c7d6ce489dff452a71610cee729893b5763d2633)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrAltSvc")
    def attr_alt_svc(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvc: Function switch, default off.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvc"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcClear")
    def attr_alt_svc_clear(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcClear: Alt-Svc whether The header contains the clear parameter.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcClear"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcMa")
    def attr_alt_svc_ma(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcMa: The effective time of the Alt-Svc, in seconds.

        The default value is 86400 seconds.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcMa"))

    @builtins.property
    @jsii.member(jsii_name="attrAltSvcPersist")
    def attr_alt_svc_persist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute AltSvcPersist: Alt-Svc whether The header contains the persist parameter.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrAltSvcPersist"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: Config Id.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: The type of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHsts")
    def attr_hsts(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Hsts: Whether to enable HSTS.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHsts"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsIncludeSubdomains")
    def attr_hsts_include_subdomains(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsIncludeSubdomains: Whether to include subdomains in HSTS is disabled by default.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsIncludeSubdomains"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsMaxAge")
    def attr_hsts_max_age(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsMaxAge: The expiration time of HSTS, in seconds.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsMaxAge"))

    @builtins.property
    @jsii.member(jsii_name="attrHstsPreload")
    def attr_hsts_preload(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HstsPreload: Whether to enable HSTS preloading.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHstsPreload"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForce")
    def attr_https_force(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForce: Whether to enable forced HTTPS.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsForce"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsForceCode")
    def attr_https_force_code(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsForceCode: Forced HTTPS jump status code, value range:.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsForceCode"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsNoSniDeny")
    def attr_https_no_sni_deny(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsNoSniDeny: Whether to enable to reject TLS handshake requests without SNI.

        This parameter is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsNoSniDeny"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniVerify")
    def attr_https_sni_verify(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniVerify: Whether to enable SNI verification.

        It is disabled by default.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsSniVerify"))

    @builtins.property
    @jsii.member(jsii_name="attrHttpsSniWhitelist")
    def attr_https_sni_whitelist(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute HttpsSniWhitelist: Specifies the list of allowed SNI whitelists, separated by spaces.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttpsSniWhitelist"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrSiteVersion")
    def attr_site_version(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute SiteVersion: The version number of the site configuration.

        For sites that have enabled configuration version management, this parameter can be used to specify the effective version of the configuration site, which defaults to version 0.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSiteVersion"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsApplicationConfigurationProps:
        return typing.cast(HttpsApplicationConfigurationProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a1d235b2799973608d1e358abab42587e56b7b4fe3ba5780373c890c0ef7c28)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7b330c8ed9adf8f74a80b50ae7b9ab87a5ad7903d2d6553368941cdc3cda1d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66feebfc869a7c7f28c7572ebd22068ff8a21eb134839589507e0dbba8edef79)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


@jsii.implements(IHttpsBasicConfiguration)
class HttpsBasicConfiguration(
    _ros_cdk_core_7adfd82f.Resource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@alicloud/ros-cdk-esa.HttpsBasicConfiguration",
):
    '''This class encapsulates and extends the ROS resource type ``ALIYUN::ESA::HttpsBasicConfiguration``.

    :Note:

    This class may have some new functions to facilitate development, so it is recommended to use this class instead of ``RosHttpsBasicConfiguration``for a more convenient development experience.
    See https://www.alibabacloud.com/help/ros/developer-reference/aliyun-esa-httpsbasicconfiguration
    '''

    def __init__(
        self,
        scope: _ros_cdk_core_7adfd82f.Construct,
        id: builtins.str,
        props: typing.Union[HttpsBasicConfigurationProps, typing.Dict[builtins.str, typing.Any]],
        enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
    ) -> None:
        '''Param scope - scope in which this resource is defined Param id    - scoped id of the resource Param props - resource properties.

        :param scope: -
        :param id: -
        :param props: -
        :param enable_resource_property_constraint: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72818ebdc6b3a9fd3a6de2eacf1bcc38dc775c629baa00806d5f108d41871c64)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument props", value=props, expected_type=type_hints["props"])
            check_type(argname="argument enable_resource_property_constraint", value=enable_resource_property_constraint, expected_type=type_hints["enable_resource_property_constraint"])
        jsii.create(self.__class__, self, [scope, id, props, enable_resource_property_constraint])

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuite")
    def attr_ciphersuite(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Ciphersuite: Custom cipher suite, indicating the specific encryption algorithm selected when CiphersuiteGroup is set to custom.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCiphersuite"))

    @builtins.property
    @jsii.member(jsii_name="attrCiphersuiteGroup")
    def attr_ciphersuite_group(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute CiphersuiteGroup: Cipher suite group.

        Default is all cipher suites.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrCiphersuiteGroup"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigId")
    def attr_config_id(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigId: ConfigId of the configuration.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigId"))

    @builtins.property
    @jsii.member(jsii_name="attrConfigType")
    def attr_config_type(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute ConfigType: Configuration type, which can be used to query global or rule configurations.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrConfigType"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp2")
    def attr_http2(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http2: Indicates whether HTTP2 is enabled.

        Default is on.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp2"))

    @builtins.property
    @jsii.member(jsii_name="attrHttp3")
    def attr_http3(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Http3: Whether to enable HTTP3, which is enabled by default.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttp3"))

    @builtins.property
    @jsii.member(jsii_name="attrHttps")
    def attr_https(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Https: Whether to enable HTTPS.

        Default is enabled.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrHttps"))

    @builtins.property
    @jsii.member(jsii_name="attrOcspStapling")
    def attr_ocsp_stapling(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute OcspStapling: Indicates whether OCSP is enabled.

        Default is off.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrOcspStapling"))

    @builtins.property
    @jsii.member(jsii_name="attrRule")
    def attr_rule(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Rule: Rule content, using conditional expressions to match user requests.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRule"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleEnable")
    def attr_rule_enable(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleEnable: Rule switch.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleEnable"))

    @builtins.property
    @jsii.member(jsii_name="attrRuleName")
    def attr_rule_name(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute RuleName: Rule name.

        When adding global configuration, this parameter does not need to be set.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrRuleName"))

    @builtins.property
    @jsii.member(jsii_name="attrSequence")
    def attr_sequence(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Sequence: Order of rule execution.

        The smaller the value, the higher the priority for execution.
        '''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrSequence"))

    @builtins.property
    @jsii.member(jsii_name="attrTls10")
    def attr_tls10(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls10: Whether to enable TLS1.0. Default is disabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls10"))

    @builtins.property
    @jsii.member(jsii_name="attrTls11")
    def attr_tls11(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls11: Whether to enable TLS1.1. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls11"))

    @builtins.property
    @jsii.member(jsii_name="attrTls12")
    def attr_tls12(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls12: Whether to enable TLS1.2. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls12"))

    @builtins.property
    @jsii.member(jsii_name="attrTls13")
    def attr_tls13(
        self,
    ) -> typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]:
        '''Attribute Tls13: Whether to enable TLS1.3. Default is enabled.'''
        return typing.cast(typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable], jsii.get(self, "attrTls13"))

    @builtins.property
    @jsii.member(jsii_name="props")
    def props(self) -> HttpsBasicConfigurationProps:
        return typing.cast(HttpsBasicConfigurationProps, jsii.get(self, "props"))

    @builtins.property
    @jsii.member(jsii_name="enableResourcePropertyConstraint")
    def _enable_resource_property_constraint(self) -> builtins.bool:
        return typing.cast(builtins.bool, jsii.get(self, "enableResourcePropertyConstraint"))

    @_enable_resource_property_constraint.setter
    def _enable_resource_property_constraint(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__628d97e89a554a00174a585ddbc2537785c0d617b7e481cea5e78fed076eca44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "enableResourcePropertyConstraint", value)

    @builtins.property
    @jsii.member(jsii_name="id")
    def _id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @_id.setter
    def _id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3cbd52100119bfb305779260d5990aa307618db5ea448574292aef90e8020304)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value)

    @builtins.property
    @jsii.member(jsii_name="scope")
    def _scope(self) -> _ros_cdk_core_7adfd82f.Construct:
        return typing.cast(_ros_cdk_core_7adfd82f.Construct, jsii.get(self, "scope"))

    @_scope.setter
    def _scope(self, value: _ros_cdk_core_7adfd82f.Construct) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98c643306d49cdd8f793ba5ad20fef0b33df64951dcf18d8890a4a9e378d68b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scope", value)


__all__ = [
    "Certificate",
    "CertificateProps",
    "ClientCaCertificate",
    "ClientCaCertificateProps",
    "ClientCertificate",
    "ClientCertificateProps",
    "CompressionRule",
    "CompressionRuleProps",
    "CustomScenePolicy",
    "CustomScenePolicyProps",
    "EdgeContainerApp",
    "EdgeContainerAppProps",
    "EdgeContainerAppRecord",
    "EdgeContainerAppRecordProps",
    "HttpRequestHeaderModificationRule",
    "HttpRequestHeaderModificationRuleProps",
    "HttpResponseHeaderModificationRule",
    "HttpResponseHeaderModificationRuleProps",
    "HttpsApplicationConfiguration",
    "HttpsApplicationConfigurationProps",
    "HttpsBasicConfiguration",
    "HttpsBasicConfigurationProps",
    "ICertificate",
    "IClientCaCertificate",
    "IClientCertificate",
    "ICompressionRule",
    "ICustomScenePolicy",
    "IEdgeContainerApp",
    "IEdgeContainerAppRecord",
    "IHttpRequestHeaderModificationRule",
    "IHttpResponseHeaderModificationRule",
    "IHttpsApplicationConfiguration",
    "IHttpsBasicConfiguration",
    "IImageTransform",
    "IKvNamespace",
    "INetworkOptimization",
    "IOriginPool",
    "IOriginRule",
    "IRedirectRule",
    "IScheduledPreloadJob",
    "ISiteDeliveryTask",
    "IWaitingRoom",
    "ImageTransform",
    "ImageTransformProps",
    "KvNamespace",
    "KvNamespaceProps",
    "NetworkOptimization",
    "NetworkOptimizationProps",
    "OriginPool",
    "OriginPoolProps",
    "OriginRule",
    "OriginRuleProps",
    "RedirectRule",
    "RedirectRuleProps",
    "RosCertificate",
    "RosCertificateProps",
    "RosClientCaCertificate",
    "RosClientCaCertificateProps",
    "RosClientCertificate",
    "RosClientCertificateProps",
    "RosCompressionRule",
    "RosCompressionRuleProps",
    "RosCustomScenePolicy",
    "RosCustomScenePolicyProps",
    "RosEdgeContainerApp",
    "RosEdgeContainerAppProps",
    "RosEdgeContainerAppRecord",
    "RosEdgeContainerAppRecordProps",
    "RosHttpRequestHeaderModificationRule",
    "RosHttpRequestHeaderModificationRuleProps",
    "RosHttpResponseHeaderModificationRule",
    "RosHttpResponseHeaderModificationRuleProps",
    "RosHttpsApplicationConfiguration",
    "RosHttpsApplicationConfigurationProps",
    "RosHttpsBasicConfiguration",
    "RosHttpsBasicConfigurationProps",
    "RosImageTransform",
    "RosImageTransformProps",
    "RosKvNamespace",
    "RosKvNamespaceProps",
    "RosNetworkOptimization",
    "RosNetworkOptimizationProps",
    "RosOriginPool",
    "RosOriginPoolProps",
    "RosOriginRule",
    "RosOriginRuleProps",
    "RosRedirectRule",
    "RosRedirectRuleProps",
    "RosScheduledPreloadJob",
    "RosScheduledPreloadJobProps",
    "RosSiteDeliveryTask",
    "RosSiteDeliveryTaskProps",
    "RosWaitingRoom",
    "RosWaitingRoomProps",
    "ScheduledPreloadJob",
    "ScheduledPreloadJobProps",
    "SiteDeliveryTask",
    "SiteDeliveryTaskProps",
    "WaitingRoom",
    "WaitingRoomProps",
]

publication.publish()

def _typecheckingstub__0c2c60f90dc93a218be123750b1911f94d2dc6dc648c4ef9d62fbab2d61a6124(
    *,
    created_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    domains: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    cas_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    cert_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    certificate: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe0083b8551d95cfdae4ee1bf1dfbc22f12140664649e80abc3272c1f601baaf(
    *,
    certificate: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    client_ca_cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb13bfd3c7af416c1e19dae153159fc1509f6e6e3131a8d9f40dcaf72e0f8268(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    validity_days: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    csr: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    pkey_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7469a8d498f38fe8ecb82807d4065ffa56ec5fd19c523c68e1cd42392e4c4ba(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    brotli: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    gzip: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    zstd: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8c6c5c452855ef2e3b66094db79f3bf9579cfbdf7443bb118e842f95e1bcc58(
    *,
    create_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    custom_scene_policy_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    end_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    objects: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    template: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a41d5c123c40c0e85ed9d894b67938789439a6b9493097b4c1a0c4ae52e832b(
    *,
    edge_container_app_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    service_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    target_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    health_check_fail_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_http_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_interval: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_method: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_succ_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_uri: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    remarks: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eba66dcac6fa4c295a0908efb6f03fad079e190f4db79a9f3bae7aa388d06885(
    *,
    app_id: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    record_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfd948817919cb145e897b3362373767aa2e7c5e81cea630ac4181e805b64df1(
    *,
    request_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57ed15d204dd64cfcb17ea71ebc8cac8b80e89de5988b19f70364acf2dd723ec(
    *,
    response_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faf03cbaeb9cec86b2c2b136848560d332147c7a26fee41626648a95907dde7f(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    alt_svc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_clear: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_ma: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_persist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_include_subdomains: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_max_age: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_preload: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_force: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_force_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_no_sni_deny: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_sni_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_sni_whitelist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c722a17ccb4f5a6b1e35ec77114c426042f787010d288079f70f028da0f2477c(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ciphersuite: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ciphersuite_group: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http2: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http3: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ocsp_stapling: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls10: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls11: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls12: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls13: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d981bc685a4fe7f8dfa9c107b025755b3a442e1a9ca512239dbc61fb21e9f27(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[ImageTransformProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35bea2619f35d6ca09c8f966f4e2de38428565e82506df57a670a20f937208e7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70ff3cb5b306e55f7e67736d47a4ed76b9bbeff66793f6b136c146b33299d849(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6415ff4cd76b7073bd50ff96c637ae34505752ada3f9ed56be61cc2159dcb26(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c95f307ac2cc902233434978f7010872232b8372546c82c67d9beb95ce43209(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e77b36b3c0b08623fa891707ddff60c1ec6bb632f8ff295e67f410fb8a110381(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[KvNamespaceProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4764e1161b4dfbda8537786ac13bb3ac50f6bf86851fa83fb19392965e273f6e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1a1bc3008e9371757144a6ea419fbb1eb970b7faaf39486de9a297786027497(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb88772f8e20862cdbc1b0e02286521acf2168b9554a5785b6a8d605fb13dd87(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa42647cb354cb034e2d0c17b8c1b6fcd83bdd9c72afaa5468db69342f2cf03c(
    *,
    kv_namespace: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9b9fed517252cf7ae6b2ab4080e2fc7e6099eca128d9591f1353b6b2adfc6e7(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[NetworkOptimizationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__687f90bd5f28c14df142d074a9b34ccd231c4d75f2ae3b2ea15da0762ca83218(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ee47f7a5c846cbd20295f985656e849a344e773439e9bced9e4712d16a9eed2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ea1ee521760db39848b6477903a52bfc747c0905b01678ad67a8e9123cba50a(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b86fec431439444d90ad7fb7be6f6a93e55167b8f2fde24f403475cf31abbdb3(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    grpc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http2_origin: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    smart_routing: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    upload_max_filesize: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    websocket: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93f3a4e689bb731761a408f711130618bc9e35bed364594929948429ecde1fe6(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[OriginPoolProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fea9e3b2c7dc84ea5a27f8a4e1b917f4a0b58612a507616f07620f534746675(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c91827488a4be5aec7965d8ad3f8e338660094ca1dc2ba6c5d30bc549e5322f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e523cdc75087dee3975592d43351562995688133efb5e59867e89f0a055a443(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__152b9618755a639a8a71bc63292a3f2457073246ebc6dbdd91599b029bc24402(
    *,
    origin_pool_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origins: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosOriginPool.OriginsProperty, typing.Dict[builtins.str, typing.Any]]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31cacfa024085162be54b07e3d26593d77a8bc64dda295ee8b7ecf3353a57f0d(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[OriginRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76a7535cc17e7ede8c225e1f5d75a9002d26ac5367b4fb53e6111394601ae03c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed9e8b77815ca1250be788532591dc6c3e0259f7376987471d9b2a305f413f94(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6b76be4091371070385699c6d07e41a34a6310a823d18dd2e908853ca97cea9(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c0e7f00fe85cd4a6f2855f3c622716fc5fad984b58e8252b5fa504a346b77df(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    dns_record: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_max_tries: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_retain_args: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_retain_header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_target_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_http_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_https_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_mtls: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_read_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_scheme: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_sni: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    range: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    range_chunk_size: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7c4122561b787e4a2f3e3585b44e5ff9b17e18f8ed26d38a664472045b8c376(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RedirectRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43e0d811fb15c7a37e505331f651d3df34a2057d76893716d162dac5374efc79(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6fc30eb8775f739211de0f9abb19df9a4a6759796def7dfc2c72b3b47004f9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d8fe138107b7c74f8c891255cdd4b030be6fc68a3b9b49c216bae92e0883a65(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__994b536d47e7011ecf48871debdaa29f6838481821f3fea80d2c16513db38717(
    *,
    reserve_query_string: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    target_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6a3bac1bc0672a45e4e877d60d8f75a10c88d4d2c22dc826698820651b2bd28(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosCertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__475c18897bf2129d0955f59f2232a455be76e1141ee10d72c63cb7f2e1f4506f(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca84c43981975621bde78d128db2d2244c328f918191e817470a4a52c488564a(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f907656b514d09937d4263be06a022d8efb0a4f128989e2e9625fc5f4aee334(
    value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66c028758d1ceaa8e7d421e94d0967ba3c8c2d070c22b2e2e0cfca3d596da960(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6da3e0b69fc5a992cdaa3c5af668bfe873e9c84694c020e8574e46a3dca62fec(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__207079ede392eef654e0f3530ea1ab52a02bea57c3b916eb20365965ddd38a67(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ecb17bd80261320a3e1d8faf6d300601bfec113f29f7bf6d91196f90ad64f5c(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90f2fbfcd4988f52433885cf31fa6bdc84a19aea110eed82461422f6a70c9933(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f14533c704a993c8babb46828f113f98b7e25ccd63331d11170177c46fd130e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bff28deb67d6e37268412e259a15b660d118c4c0c03373bd7f44e6674008311(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d96fc341ed04fdfc938ff956500f5c4c9d0553823df4a8372d2deb0b8b87992(
    *,
    created_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    domains: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    cas_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    cert_id: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    certificate: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3acbd63bc946fd2b0a8f3590133ce73bb4371cb7e1630d4a233376399463ee7(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosClientCaCertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f8b4bc7c52b11e2f0f53518b733398c0d512d7005b978598b1210d7a0fa50b9(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f818a4d204c83146d7678cfc6872a7d4d2ecb6719e6c22ef5ae1bc453e1e2072(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__258dcc6507032556bf6f40eedb54d79edf0bd149507a3c6d8382d78dc60ef789(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__092e48cc6d83d69b7c21b66d2d0b9ce4c168a2be343fdb2b3dbbc5cb20ccb040(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9af818ff55532f450b78663c8fb6872b2d5822a971fabb6579936bb4b987b8ad(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d80308a1a9c5674d66a1010a8db73a7d1466393a26b5480d05ffddc9f3aefe35(
    *,
    certificate: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    client_ca_cert_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f1fbf631696556b0ab2a5e22b17cab33471d44310822c90b5cd464f33343933(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosClientCertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd0fe5133a16de95fc49760cd5bbc48da63659a96c0c6cab5fae8dc678b07a63(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8addc9d542e2f2dbe232f5662853d5c22312add3365e5c8c497ed7f13b7dbe7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2eae976f576c5b5f4cab40541a7f14f1cffa6323532d7e3d41a5f5518fdef28e(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c96d122a9945d184a1cd7e6fba14e68422eee324b5c684de4d6483d16c9b1cdc(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c1b64b4ca787650d98c741b33303e46529c849fe782c81e9847128e8e01eb73e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa961d269f69f3a49a459f08aa8c607cbd8031dbdb2d55c94b0b91df3d3129d7(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd9db4fe9b7160d2710ad2d443e2870849e814867f74f42a275b4ca4715fd764(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    validity_days: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    csr: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    pkey_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab2d8050e9cbee079787d9103719a11350a59d6437f89e1184f169dae1366a0b(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosCompressionRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__377f3fb7810d196ac1cc0cbe4d5e292ca97991aaf1a7aae441a1730939190c5f(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcc52f7a0d38bf94b94768e773629cf92e17add8d00c3f47ef204772ae8e7ef8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8710f6be55d118e4e7d3fdaf755492d6b3ef5c603fb646cd9631160b454f2fbc(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcdf6e8784a05fdabed7604a6ff0c30cdfd6e68e7c596536a15ba7c11852dc2d(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8f1091fc00ac0a6abb545bc3808d9ed350883034e3f35700884da74caa921b3(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef6dce2fbccf982a40f32282b5cf749909ab6c026857d4e3477e21189aee0681(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9dfdcae08dbecc56671f5b464e86b31629344d3e033672f112a0ad2a9f4463f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50bba9747d7cca605c1763e349eec7fe45afba62ecbd5b2417319f5dd70ab763(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8053608321ddc8a1880db867fc1df7e78ea0be640e521e2f89a5cc21f8d6d087(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27093c04ba319129986b466e5d6f3b8eab3b477eb0644fd03e829070cadb7260(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6ecf7394e83d1cbef5037fdda4a2e4197db5a9bfc2cc6a5ee0f934305a94f03(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7039e92f5648929842554a604d4664c6fc076a027a75ff9b92d05c48a334cfc(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__574fd1882433c0c62d4983759fa454656bbe592f038940e426a3e2120face1cd(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    brotli: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    gzip: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    zstd: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5ea99a10d7932b3862dcff1ad30dcd1c7e1320a0342aae69190b19238099b89(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosCustomScenePolicyProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c805e96ca2d59fe4386aa07a0d7a3f045806745ef6f0827326106388b79c19a5(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02e69ec1e39d3a34c2ea425359b6caf71a39e9735bf5b0dd219c3181103493dd(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8285f447dae7c84980297fd6af17bb93bb22b2f4a065ba909c15a6c3273450ad(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__398ef6bae3bb63291373c4ac52bcc4ecb8baa64e4a41185f696cd3fd7f812d97(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac1b9c5059fab483cc8361972556f3dd1f6088ae3bb2496b471fd5afe0a86cc6(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a05e3f6a3dbaf6ecc417ecb92e3e7d98fb6f652455b6875c5340e579009b59e9(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e58dfe5f0ea5638913ea153b92b42cce8efced79f512a8142d2dad8a2ecb9a3f(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e2ea2e37bceef508cf5bc204f1c4fedca49af7c1a6377941d5023086b0d5adb(
    *,
    create_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    custom_scene_policy_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    end_time: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    objects: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    template: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__583e0e85fdbc5f06b3ed0967cc64ccc989ae45f5e48a62e4ae32570e5869beff(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosEdgeContainerAppProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4055b733feb9a082f5c6b090c84196511c74c3c021d4209a0b699247e1ab3207(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b45e8954367bbbc31e2f1e48f656c11e4c2f4212bd06930d4796074f99ecbd9b(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38e77fd803ca1033145405871a1ebce464d59d767e30502c3adce21c1fc89f12(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__664593c224ee1b3aec1f5fbf34bd363e9aa2d078a222052cde539e9929f5d6e4(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3153441ed93d66c27d8f4e41aac27e4422b89fe5581319cd3e1e684c7774f5c(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85fd2d4193347b355cf36e197cea04538edc1ae06e1a35b76a24ce8bde239f1b(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__490d7b0704ea9959efd3d21026980736e9686ecba716803eb2ac4910ceaf34ba(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2d48887c9d4438a3e9af02439eff8b6000c70718f0b7a908116d158bd6ae6ca(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__720034bf0cdaec9e5554b177a2096baefdc1fbe5b4661a7dc6f78961c2902bca(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__268f1b7e638bc4cf1ba90a3e7169d9ce1be47581cd4b516c36a36fe0d10f87c3(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b90522fbdf472557b0e8f2188c2d239d99de3c93bbb2c8729e84f3ae9a04ea16(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f79208e5108ffb9c1a5c1ce9f4ac9a97f925f4ece5fb7e2871c982fc5c6f3901(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d7ab950b1da74af05cc7c689a94dc06be4dfb096f0148793137b4fbe4fee4e1(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4d828d49fc3585b5487a67760577d65c3e38cdb3af9d5c172353f10344095dd(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__068f24ed75e59b055d5c209ded8a3592387c20f6f0df500452a3b1dd4e753267(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25ce8b7d2196196a3a0edb491c9b246e3fc956f99aac1e736ffa0f1880502477(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88bad2680a78bf26028531b34e8c5dff667665d9b9c29403b6e4cfa8cdfed71b(
    *,
    edge_container_app_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    service_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    target_port: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    health_check_fail_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_http_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_interval: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_method: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_succ_times: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    health_check_uri: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    remarks: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c62912e48e98428562d060bc1da0aaef3b7142cf4ce31f408c59ad0377569f77(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosEdgeContainerAppRecordProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d5d85518a5fdc6ba060e76dd7c2154f36ad7751fb05231faa1fc0d34eb7e0f8(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ac51c60cdc6db3a8656cf91a3fb71a52d4bb7c5063ee44b651692a7189d5602(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e817d2746334b771dac8b9b2b55eae954aed2dc9dbee1d6359eb86bd5101236b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bba8250b1789fa71f0a3a09031bb7289468addfce23526a1587ad5048bbfc16(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9eee07fad3d322b1b27055366e9e196314a8c698b20e7c1d951a28afcae877b0(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5c1fd8cc87c7f35324045e1d381e5d05ea50f9a4bd834849dec054c1748722f(
    *,
    app_id: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    record_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ecb2a32ee1584a88ddb181ef326aa9122cee35fa576a7654aafa3f6d988193a3(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosHttpRequestHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1fedcb0c1a0a1984a0c5a8aca4d325edcc3bf9884b3959dc9fa4b9d537dbb48(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88a79880994612583615394fafadddbf729997831ac858f5610ac62c00162461(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e1ebb77ca6c2ad61e51360540a054cba60bb4fd2f00b43679f6a2b73dbf6090(
    value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca68308c5673a815ac9ae26310fbdda3c989d4ab728c89ea469709764542ad47(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98a5cb898063e58660712fa8afa3bbb4b899eb76a2c10fcc7c846ddf071c9d00(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3628c6c5b9049b52e1131e3c406052dd23462af5ffdf4e94293af15f935fc57e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__243b422c383a7361d872907e7fd14cb68f8e4dcee3ddd6119cbef904679acb1c(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc42ff8849cd567b5b5fc6b75d6bd9fcce0dccb99a8b8bdd441fa015ee39a740(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62619cc2ae9a5b431f23ef147b6a5ca023996b1518f6f94f09deb7b5b370be72(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29f789ca399d9d701b9a06d8906b21aef6409835b4c329752d2fd5cc91d1c67f(
    *,
    name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    operation: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36d6f493d2bad16b8a4afac62bb1d602ecbfb9be3eeade440dfedaa04f4fbdb6(
    *,
    request_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpRequestHeaderModificationRule.RequestHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1489d3e65e2c6acd498bb625e1b1babffe13b02b48b88250faed969496fefba8(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosHttpResponseHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f7040400b2736bfa87fff992eecde87a6c046cb5cf9390b74b433c1d03c51e6(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd979653e75e0150488111940452b7f2abb55b962b34994c4e19dc2161968fdd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3043170a092a30d0463d38214066bc4a0e7a5a9a5df7036f062699d82b521f43(
    value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42bbfe1532cc75fcabb70c535781ba334f53eb54c397146980e36ee5625e259c(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4fa5091722b52e7356ddca94d82f601dde3931b1689f9933e14f565875e3084(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__122404d7dda895a0f32e2b030f681f70ccad59b977faebfa49fd3fc77a50d888(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b19ccdb4e307d8d6325a3b08cf388e3fcc2fc6aecbb117efc5a2b53ed30c0ff8(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1622d35d5890170879c20e0149bb10b643672d73f7c3d302671141887b82d5be(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8b948b256221617de2e77a98a002e61f0d9076d7f1c0c87b95f0dbe37f5c1e4(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__327ecadd04e0e98b58b74885d096f25c8ea644db68f8dc01fcefb88131d3d8a9(
    *,
    name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    operation: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36771ecb5303f6de1a3aca2a559ac76f02e520cf25930d6d06078efd9b8ab781(
    *,
    response_header_modification: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosHttpResponseHeaderModificationRule.ResponseHeaderModificationProperty, typing.Dict[builtins.str, typing.Any]]]]],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b717039c48b3642746de1864d3a431d631b80c217ade37f84f53d09fcca1e796(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosHttpsApplicationConfigurationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__242d3c9fc9b50bc3805784ba1078041f9a0cd778f65d0683a7a0f6d9680fb1b6(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9498d2618ee07e991863f7a9cc4c56db69177c60fc0472a70e6b0aca24686f67(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7a76d270a2ed68aa63d623284ab4532fccaef638be83e16ee1465fa272fabd1(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a8ffdb98e5093a1bac0c6514976272fa3f6942876ee247168f585dd635d6486(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__989b4029a9e931782bb416c84f6ea272bea62a5ff02081d316a2b8c8132401b2(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0fe73451f85fb0cb35c231bbd627bbd13bed5fa9e9fa10ef721fadb78f85a58(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5286f795b75daa0a1dd18718a8487ecbe32c517dc5ce76d93e6008c71271d9d7(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f54c40c57c5d2bac62c2e5e110c1d1a663b60697b23217cfb6ac78bf05293e3d(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5c79104695022b26a9e55f1c07de7996c9ffcf5d5b00554123797b34b7de443(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bbf899255166a0df78288d8542c491d56c1d1f51f73dcca6790fc04368d110b1(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6859aef2968e1c7d2e2d2485e1650e0909e1a3ddaa76dcf19554bbcff9d16d63(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36b1bd83dbd5664d8d8f80ef47e076d199abc3254e99d41be807317cae6dfccb(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef830f6ec14741d5c603f7e9aadf267236917b0471ab6fe87c51a7b5d82b1eda(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b51e93892d0ac756624def3fb95c0799adf2856af2d3c7231983974cdc492ffb(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2816a6b31bae62e25d18c781f74dcce8d18e5ac8394e45623b9c3f5b4ab2a31c(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d011955b4662501f55da09c3f1cd8399211e54eaefb63078f505a786f0acc6ae(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0df0a12194dc03ce7dcd3d6176837934752da5dae0b16eb69410ca9864d1959f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25c8acbc3db9e1aa5707885e89883b43de0b7acac3a5ed5f6208584f750c683f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98604bc1deab095bbe9011a719b355cd9e8c83692b5b139fe7ea203078671bec(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f15cf47185f500da8048487df2e4957adaf7146fa0563f9401dc263c577c5f13(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cd50064707a38907f496f645b7e5735506a26193bc7627bdfea302c88e88fba(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b58d174f28c7ad15aa5ded6e9d1831ca8c819b87fa95a5c20b505a583b6ed5b(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98d04457b7260f5e3b8f3c1930b6297246be797c207a16cab14f9024dec51d8b(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    alt_svc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_clear: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_ma: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    alt_svc_persist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_include_subdomains: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_max_age: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    hsts_preload: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_force: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_force_code: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_no_sni_deny: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_sni_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https_sni_whitelist: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e52e72f4d5a95997913f181fda7e5b520cfc4c020532c7a87ac76f83be42c34(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosHttpsBasicConfigurationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0902f994c5254eb738b934ead7dcf68486ed502840ce7fb51b565f525fc99429(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07ff14cded9b9f81a5b6b72f51cbf8f0b04b82223cd4bcff6b99ac297dbbd116(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30bb5bc3fba360defc6456ef619399c82ebd287d7fa0dd91464c1d5e115baf70(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5c6ae8b78ce422ab7b7b758d8585d14a7cd3bf7fdec3aadffdf6a3671e8122e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33717acf528ef9d08d7d7f302657ab6dcbcdc05f3549859f7601d34ffb826854(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e01aaaa4310b9c18eb98e1fa926e5b38ba4f4ae719b4f0df27cb1bb0f45ef2b(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0355907f5457e1a44157599ae14476d27de5694014169caee4cc465123dc0b54(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6988cb4bc56d481782c0970c8bcc2bb43da56d7a738ae95b64342e63ca1455ed(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__990deb7ce3f9b9fb197daee3a4271e33f1ce2213e7e7dd2a970b4a7ce2559d76(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e172ce63e295c2dc2519c390c2444302123a27e2e517912406237b22858756f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__779304ad6a3de8dbaa5e948957fd66c89e33110030822a148d6879668ef7a69e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdb5d98fae63687886f5814811a7235b6e47e07d9b71dfbe33472b4ff5071b8c(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2efab1dffd91c9b804e48862e18f2ccc21380263837952b717824e7b66dec667(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71101757230a6a21227e8b9abbb6e86dcd93b8dae6c95724e7a02a30c05daa59(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f573e3341b89b041891744ea7527014d44a904660f0a04045152de9f04c99598(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1291c53fbf3666c741ee6a1cf21556448fa9bb4eecb3ccee5ed5763e77a36bf(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b554399b5db8568ea8de7b49c7bdca4355d1313d4a0f622e60b7192f139c1f7a(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b2ac046291120a68911b16af97e453840523f88ba9eb2f6babb20432dbc8fe8(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    ciphersuite: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ciphersuite_group: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http2: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http3: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    https: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    ocsp_stapling: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls10: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls11: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls12: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    tls13: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9f72dc1dcb0394fb904555c14db2e760745797c8b0debc397c4b6d0a1bf36a4(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosImageTransformProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59d2b8a2bc666a32c3caf8b31bda8d8a8f6b7a03d0db6241db1dda298cbce76a(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b3040c0a42e530207f2ed01c06995a846e3fdf783ca1295f2c4b6b0bd84e92e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b606a98afe638dc0f7d2ab5d91425e25e61f0d1016b7a1f95254bd41b0f94c29(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e51427297e81115a838cbc48e73efa9023f7dbe2236c68554871c628e2684b7(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f47e9f76e622c21490d5bb57955402ad542f18197f89121aebf03fc52ceb2a76(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__466c47726fc0565332726d6d548fb8e1c3f3b85815a4d0af73685c3ab81e3acb(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__289759cd1f69875d41e363b5e63fd3642b1ef3d7fc3ec9f0276a14ef5ee1bc78(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86bdee223f264f4761f5de2d51aa279f13de85a1b5884e853c0c81ab1f99c171(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e6e45315fe27b9acdbe972239f5c18b0cedd5b493de64713d1f7d3b024fb5e1(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8ba1c1aabf09b447560acf9b31021822cbf28b83930c3da54bbf96fb249a806(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47971b5f7cedeefcddefc864f51edc09ad0ed71a7184de5d2860d8c5414ac695(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    payment_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c9c71b795a1745cb099102cda0de6dae23d35b17b1020bb2701b54439ba5de6(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosKvNamespaceProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab25c82a0b2dea0c5d3022d3543b4629eca01187ba772335bee8c0fdc9e43238(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fcbac16e6adb2524706568657cbdec61f9d65dfc8558df6b9d0e4a8a2c8bb79(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e6ad1d20b49ffb65fb116ddb42ce246b56d0008e67affff622742277e387068(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f35d7efbbee3d570dcdcfc5a580f7e867c2e11ec43331f821bb37d00ca32aafa(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6755144a083a755154999ae0fbc3c2443b2bdbbd47fac8af9a918f4361783bdd(
    *,
    kv_namespace: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5da5c912cf1372805caf2b30d8e89101e21f9cec90b7649a913ba725d7bc09ff(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosNetworkOptimizationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d101e23d0625ec9ad3446f5db6a1ce741a7dce8c523b38743623228f814a079(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4347561246630af8b7a7c7a71cdb1a952760050eaeb55943725f1df10dd4169(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__322464dc5fbf1258698ba3c40d2034d0457ca83fe652ba789c62016943fb165e(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1807dcfe1f8a2baadb2604a2aeb7d098b2d452e6e91b066f33824e293d45ea4b(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b051042c0924ad67fd6b6870c611788a3a35b4baedcc85a64b27e9ecaa8a64f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fed88ffaf188a07a7a09587474cc8b72bdb81d007060622ca79d95f7d113bb08(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eac2056c5bc5a23ecdd347c64b2b72383e7882c965faacec8e5e4a6bf9cf8755(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__335134136816fb3ec077a1e6cda1cc305f63b393f2a1e28f8d7924a127d1a1f5(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c194980e88a300bf2c234380c682c301bb094a9f094423fba74868697b4a3444(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b8a94905be387394c53909b335bffe0dc6dbeb77d860d527ea21852d43bcb1a(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b3896ec4628efefeb4b5a4bed9516c4d9a516b2c3845dacfb9622237b986184(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91b1bdc796b280ddbfccb15241f7c9eb2f1730b0e1bd78eafa882deec3a2a365(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2f0826624a91940d9e1a9f0918dd846ce116dcee4b771f0b5257686483b87c9(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c421b34da49c6f5f8f08bd1537aeefe4b753ee2f105db10b3f4935f807c4d686(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    grpc: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http2_origin: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    smart_routing: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    upload_max_filesize: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    websocket: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__290630094bc40d25c9cf22ca7da3921db2a7dbf7f25c9ce37a6e377bcbe03ed6(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosOriginPoolProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcb5c545402725dc7d5b3fcec5809a5e12b3ec6198dceafa2ed5d9e097bf3085(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dc31d096786586faf2c7c9c011f59ddb8c797b4f768d0205398a30673f39376(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a7034dc5852d0d8b41147e8164a318a914d3dc4bb95cd77c62139909aced98f(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ac852031b30e4c2c7b16e790be463710fcb153ef32f5e371aac065e30a07f32(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__feec4fc857d630918918efc327e8cb6890fcfdc8dd3eb245b1e189bc2d49f95f(
    value: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65fad187118a1ef6ae149f287a79c3db86843a66b2ac9b50f58706894758b323(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosOriginPool.OriginsProperty]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fb3a42ff6f6ede0c81a419376962fccdcd8c622855ebe7fbfff96e0c48393b9(
    *,
    access_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    auth_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    secret_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    version: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a1469caed3cb00cc3ab32cddc042c3f132f2cebc39aa1de6bb35de7c9d69795(
    *,
    address: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    auth_conf: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosOriginPool.AuthConfProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_id: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    weight: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f6b4d7a3df03becbe5d0939aa1111f634a4fda9857a4f52be1c33924fed66af(
    *,
    origin_pool_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    enabled: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origins: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosOriginPool.OriginsProperty, typing.Dict[builtins.str, typing.Any]]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6816a8da0eeddedae835e15c227d5b656010d53af28174b2596d9c3adacc21ad(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosOriginRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17fcc400954164535daaa92fd0d541e0872b1f69b3369ee4240d4ba9a5eca38a(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a64af0567ae119654b0f6d2ee3208bf95106064efdba247c539b5441edff5cf5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4697bd4f3a991a43854785e74bdba61aa80f0e96309b1d6cd799e9cff2688ca(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__114a7f64f8e5545412533b478bae5eb572c850bf1874ccb6a0df899676827a61(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34c15fa4b4e3e6ddfa90619823190feacf9e6f3bb2e1523b136ed2d56d0010ff(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be49a27ad0be7c73c4fa03ad4ea73bd88d66586aa971cb8fb7475828aaa0a8f5(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce2d92f4e52a49a481e513e0d1499894897eae878d7be847c595f19a2c7fa463(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bd3c276171c9884f08fc82efd64161e50b15fe4228482ab70cac337d1a228d0(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7534849a1b50c5048a4a2d3a9ba700d0a1d91b37d070500883adfd9aeb58cf95(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a57976d32ec9647ccb80ef0ad5a9ae41db6fad96f48f008f0436def1924eca9b(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69e3d0237272738c789d7eb57846d2d18a8d138894752977d7a0d226c5b8b49d(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c128f30c76047cb215dc45b508ee285930214956960fb0d5a32c316f992cd46(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96d446cd1cd47b5471baaa030a7e4e8e6ffb2602002fb74e2925888fad3179a2(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2d9a478ec80aed999053199bae33679311e6ae6ae3c66ab7d9ecf170fa1fbab(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c31386c62edb4a3648b56fa3a5b3fce084df8458c6d9d418232f96da83a7639(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9f1c03ba6fca0a4371cf2dcef9415acfa23a97bc8ff2b17339a094608089239(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bec697c21aa3fe9d8fbda888bd12ba7801c2498ef4ea8cce72c2678e820abf20(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__573d6212d312f71ddd368375f7b33141783a90cf6aaa6853fca2c421d60195cf(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__087dd0121526fec1de9e69894c5df007a06c37a8bbda7ea14dfe260c365e6d35(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29866996e2b890be68ca0f1f8f4af9deac8aa297466cf3249fb93c3d14a4866f(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bddc74cf437c6112f789e34b69342549d31c21433af8ff28bd9e3097dbbe724(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__220633af857120bd49b9d6d4fc27983b29c16f87aa844155c98dd4f0f8b2cd8a(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4252aaa6c963df077a37071be4d8bd44be555ada4805962709538f28e7fd94f1(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38f760aad37cef4aff3eae325efc355ddd8248930f88ba63f29cb0299e35c566(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d991ea5f7b552b06f5b076ec75e65dc3d8b2b353ff6226f65a532406abbff6cd(
    *,
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    dns_record: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_max_tries: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_retain_args: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_retain_header: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    follow302_target_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_host: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_http_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_https_port: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_mtls: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_read_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_scheme: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_sni: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    origin_verify: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    range: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    range_chunk_size: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sequence: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a4ecc02150be0f1c5df95596345f635963e31f35a760c97cacb7ce8c9b03591(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosRedirectRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2aec2bd0c404437ed250509e6229506b4dc54aed7f7f403346d9ec93b0d4711d(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bb7a27d9d495bdc5e06f6602fbaa207fbe115630e837b43a7994979b4e25eb5(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86808b481b7e472c18fc80ab53ac138539b1379c33fef028350b824ce3819d7a(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e05324152cbf6112300225e2e134c32c4ebe0f9680f116384d863f7487e4b33d(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22b9872a6c0bb0990c854a79a38f70abc93b69e01aefaa22528fd3264769d5a9(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0d166c0e0b5abff97c329428871362c22311319ca05cc8bd97743e5625d430f(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b2e193e0f221490b32ca787fe973832123e726976c8c6c20615fd80f2abd2c8d(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35d3d7f35b2d8ce660f15f504005fc23c60b95cfd856340a8674efb19a840f5e(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67b5b7591242d0edc01be4bc90f97eb923bdc70594bf2a1ab0e8c20a0c425c50(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__035c78edd8284e2a62073b9a21da34c0c3e6ba501feecf5d102217a0683066a1(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7bd95753881bcc263ade14c569fd5d337ab51181a61670148cfcc6c16d9aa6f(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a012768de06c80882db525c2fea251a247944d0364116b3e8a04363c3b7c3e2a(
    *,
    reserve_query_string: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    target_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    rule: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    rule_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    site_version: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acdf4e9a0167173cc5fac5529b308a99c178f2436d4b40f5a6ae9e754049e75c(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosScheduledPreloadJobProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76455b3cbb959169566276c01c7c33bc9a213b222b68f5681f8c29c2615f0160(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bb41f86a778d915ed5f2f192e88208b8f86b42aafc4a6ba5c226351ab06e894(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52d1f769768e7af9088332b450d6109c4410fca2c747ecb51062a80ac4e698bb(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac64fa06960c81fbd27bb20ee520c15abd7ba8a9fb3b6a3294c51e9dd434bb08(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99c44e71ce7d7d3cfd15da0bec9ae348549552bba07bfb2b164a71c1ffa8fb66(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__572f3df151267e7a15af062b862193b631a0bca17bf672ac2992a2d0356e4085(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96b36cae441605526c2a6ca50fbb566480e24b4f25fc910090c5e93983410a33(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c9993844a3d285b1a2c0c3aa27a18896db21a8134b78749dfc7b26130168869(
    *,
    insert_way: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    scheduled_preload_job_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    oss_url: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    url_list: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cb5fdc540fed1946ee8178e8625d407f1c3c4bfe530567a29a25e9d6f6b751c(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosSiteDeliveryTaskProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d5eb89edb0c9d483bdf41742ead0e2bde1eb9cc86b91a6d5eb24144b47a97a1(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f48a2082f314d451f2ce056f9f6fbd8b29a7fc08439f2818ebb405a0709644a(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__151f1707b048b2dd0c552c34697291aa22463b3c4f7a4df42458efe8106525c2(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10966370703cba9766fbedfc92fabfd129440635e027646c87418ffc10ac55e2(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19e5d3bd164ccb678c7601b320b1cce38593c67595e40f5b112816c3f5a51b5b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9b585e42052732dfdfccc8b9d46a4772d4a83cf2c87c12a9266a151203243ce(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57a3f95a46e58903fb465d1743dd320c7964d0d52da135519c734505285b4a40(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__507caec7406a3407f35448e044bb0c405d7d895612109d666149974f75c1e12d(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45c6b459c3f259eeaa93a43ce5f590f0e7bbd81a4095cdfd5b36d1f3c7fd25ed(
    value: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc64079abc81d0d28e2245dd180ab7784680969608e676f1d9da6f37b3d793fa(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.HttpDeliveryProperty]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d50616054a7d6ebcfca0f6ea3a5d626470903648a9bb50f578fbb360d64337b4(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.KafkaDeliveryProperty]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9934f561cfb448592883ce18860db942b088d5071c5b007ce6b3f4d612f6f61b(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.OssDeliveryProperty]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f95c94ed770bb4e67d267e3800a0de13406ed33a2cba44d935654f42ddab6139(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.S3DeliveryProperty]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7367b628b60e82485a25449eb6dadf6a2b439b7977c18c3a62b2ca904a5ec54a(
    value: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosSiteDeliveryTask.SlsDeliveryProperty]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__860c242571bf348146cfc36b15bf490a49716884e03a2aa9a9d11faa2e053513(
    *,
    static_value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6ae6e012e4b373372c39243fb3f11ff5423f226beb4e9d07b937c337b334678(
    *,
    dest_url: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    compress: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    header_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.HeaderParamProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    log_body_prefix: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    log_body_suffix: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    max_batch_mb: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    max_batch_size: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    max_retry: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    query_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.QueryParamProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    standard_auth_on: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    standard_auth_param: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.StandardAuthParamProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    transform_timeout: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__377357655dfe7b72e338c230f2c827a58b6f43231822fe581b0b70232419f08d(
    *,
    balancer: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    brokers: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
    compress: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    machanism_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    password: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    topic: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    user_auth: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    user_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f229ea1e5884a0fa087ec848c9dcfe7c614159139ef65e2534a32a4b07f42673(
    *,
    aliuid: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    bucket_name: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    prefix_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84488098f3d65bdccfc36e573cf25752f3b24e271d96d429afe2ce6d7b9c9796(
    *,
    static_value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72bc64db283df3d2889874da3dc38bba70071de8bb523f7d1eb3d137c7daa0fd(
    *,
    access_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    bucket_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    endpoint: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    prefix_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    s3_cmpt: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    secret_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    server_side_encryption: typing.Optional[typing.Union[builtins.bool, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    vertify_type: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5bab1f92e0ccea11ca3c5f0dd522b0e015428a97c4b9f13976ff90b6f39da9a3(
    *,
    sls_log_store: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sls_project: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    sls_region: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0eda81a41b761d68a39149b2ef426c1a351f46aa8db79395fdcf6c04924711b4(
    *,
    expired_time: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    private_key: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    url_path: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0d43b73691a6b3d0721cddc1520a2b0a25b890f8ee782b80d06f42f350cb0c6(
    *,
    business_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    data_center: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    delivery_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    field_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    task_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    discard_rate: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.HttpDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    kafka_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.KafkaDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    oss_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.OssDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    s3_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.S3DeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    sls_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.SlsDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e1e7264b803dd4ffa63fd5588da63c49ddb873f80a1e8f410b941b24906aa15(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[RosWaitingRoomProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac0e9edb1ea199b436d00f3c8115a9bca194b1944e646539a672f4595f44af85(
    props: typing.Mapping[builtins.str, typing.Any],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ca4b55cdf75f17c1e78655415a41bc3bde439931e3207f851fffaf0de0d48c5(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4538e98c6cf79aaf9bf3ddff996e4a09e0d5b687609d2b52aad56d24de817439(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8150f12e97763b8a3b21e639a3cfc0f8c2c047fde367daefa4e5d730225e0f96(
    value: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.List[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, RosWaitingRoom.HostNameAndPathProperty]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b304e6c9029e46f66af8c02ab054e641bc4301993df78507db4b021e90fc4f3b(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6535f2b49a8e1a385307d8edc18d1e07c25c4f8319be927debb28aa08d8630ac(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d74b18fd3fb793ef893e5dd2d57d4eda7bd51b635d6a99f0f5a478e30f38a5d3(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70a81413222f85da2f89cf366489d5c7044a1c487d1d2881276a8d490eac7837(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f675485dd62cbdd328c7cf0657472efaf82889a605d2628eac70eda626a1583(
    value: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cb5c1a959b5fc7a0a9ab41357720c69ad2dfde30e026109353e0c34e7a44491(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2fb0a3fa88495116d4c1dbf264577c3de56525b8c80476a9401fa5a50f430513(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3098ebcaa14081485fa6a79048d07bced5ad417e612b86ec66996e297edafcf(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bd7c570d4fb661e2e5cfa0b5386e405d7764138ec7f867eeb9bf523ebe431ef(
    value: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c1d90d5c8128dbcc0b00eebd2ef13938c6dc7c2901de3c189c7d105b3f5263c(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fd2a1643059db2f0d610004ed30117a1b51a6d9ae388d5bcd84ba1cc79df7ee(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09a9222beae454efafc11f1c3f00a44c7d6b06d37d0d9decb0509ebc797e74d1(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c583d2a3eda333c5d62d5042109f89d40b378b43892fe5bd2c9812ce4f1604a(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d704202033dd94920a05ba49b52e6467d81ca441632b0251ca42ae80e565cd2(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd994909d1119143c97bd7553c40021cfa96d601abd7ee13eb32774e8c59f5c4(
    value: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46756a927e6246b815a4f90c7a4781465152968582b96e75552615042bc3fb12(
    *,
    domain: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    path: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    subdomain: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d68bf19723c93ce1d0b1e7c186c123f0652cf38110ee55a276695b1a2f5469f(
    *,
    cookie_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    host_name_and_path: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosWaitingRoom.HostNameAndPathProperty, typing.Dict[builtins.str, typing.Any]]]]],
    new_users_per_minute: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    queuing_method: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    queuing_status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    session_duration: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    status: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    total_active_users: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    waiting_room_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    waiting_room_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    custom_page_html: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    disable_session_renewal_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    json_response_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    language: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    queue_all_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdc52b53df4886e98c1a45a5ea3b47eed72260423062e2ab78d237bc79835ca1(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[ScheduledPreloadJobProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9dfa29f73971221b0db0388b6d674f7f62d79fc24955a1dfcf71296003b4ae2e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f88bf3ab86226dfa4f04ab03ecc328580a4a4b18ef9188a58084b69f0155614(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2eaad7027a121d7a1d87d9910fdb87cca07d88c047de3c9ff9d4fdb43fa6e8f4(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcbf9286d901867d236ba793e98f957993ce0aff62a5e46875928376138faa5e(
    *,
    insert_way: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    scheduled_preload_job_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    oss_url: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    url_list: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e58195de2c5c1788ce763f2d5fbf40e97ca5d7df2b7f15188aa170c1fccbd3a8(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[SiteDeliveryTaskProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__685f296b04f576c7395fb3b2de3e445f531cbdda799112b565e3ba76bd6be1b4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__601645a2814aa9c398674d06c33b4986a8d33aaf858a5247934f7b4e838b0f28(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65a4e3746aa23bdb197359867f7d5397b2afd6910ea314b8b4a57d254ef92a8e(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2cc50ba147f5a4d1361249383407805b07891d04d02d302b4b06ccc62049e7e(
    *,
    business_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    data_center: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    delivery_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    field_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    task_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    discard_rate: typing.Optional[typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    http_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.HttpDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    kafka_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.KafkaDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    oss_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.OssDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    s3_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.S3DeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
    sls_delivery: typing.Optional[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosSiteDeliveryTask.SlsDeliveryProperty, typing.Dict[builtins.str, typing.Any]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bb0604d5abb6a8969d263f278d08a13b3b2b93e216a58c7120bc23f421702e4(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[WaitingRoomProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bab06dba5a023d89f19ee062e0784ff8aaed8c5ab1fe7ef4dfe597fce0685478(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f8af29ff569c5386bd800eb94063e64dc59a78095bbd8b55f3f0d91dfd8309c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__468acb3fc29b9f27acf8345badb4e2de8313dca937459daa6f0cdc896c8ae6a8(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f27f090a1d25d4504ca55dcfa03ec74bcf676186b8b0b7ec375fcb40ab81c585(
    *,
    cookie_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    host_name_and_path: typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Sequence[typing.Union[_ros_cdk_core_7adfd82f.IResolvable, typing.Union[RosWaitingRoom.HostNameAndPathProperty, typing.Dict[builtins.str, typing.Any]]]]],
    new_users_per_minute: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    queuing_method: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    queuing_status_code: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    session_duration: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    site_id: typing.Union[jsii.Number, _ros_cdk_core_7adfd82f.IResolvable],
    status: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    total_active_users: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    waiting_room_name: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    waiting_room_type: typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable],
    custom_page_html: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    description: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    disable_session_renewal_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    json_response_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    language: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
    queue_all_enable: typing.Optional[typing.Union[builtins.str, _ros_cdk_core_7adfd82f.IResolvable]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6721421cf07cb271be7086c1b73337fcefd0461af639efae65b9b7885adf837(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[CertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7bbdd8ca2d1da30c7ac2e60d54460c1197afc02d0a58b6e77a6b403f865c3c9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35ec6b11da48b449a92896864b98fcb90ef375a8219e97bfec1d696f1d3ba153(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b2f25bff7945454474cf0b6eef73420bb0a5f789fa005237d226c873c3b40e6(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b0bfe99a93c55b34115556b37ea553c19a3a8471aa346cbebc99d8ab0b07907(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[ClientCaCertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd2df0ab3df8034244c16eb480d3bb1141527b51e97d63c1e70ba9fec35bcf12(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__669479428eb92dcfa5a287d69981b3db30c68d308d2dd7dfbb9f90d2e88d135f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d110355417cdb6edafe7055c7a7cf39c21ad3867e0de8e82554885ed7f3dd559(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8bd6a4aa0d86fc8487af16fcbe9cbdd32630a9153434908fc85a59cc160a51c(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[ClientCertificateProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b433a97afc7473ae7b03bc38d2a9044664e02d334e3f5b4afebeb58330c5ff89(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec2032bd9ae8b6c00bb56d1556246530de1bb562b142d1e560d4afd35abc3e6d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10f2c0391d3d2e4586fa37aeeeb1cd55895331163f6101e5c4c0ce866bb16933(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5eff886828771d6d60f5c3c291530e46516d0e595b35ba1240cf2093ba073f5b(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[CompressionRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6a06785a05ce5191babd4eb2d5b41d1231d2054d71c65604b1abd4fe665ae80e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e7d012c1f8c63e1f872a9778bca83827ccd262aca32caed8f731f45d73e2a19(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c4ef18460aa2e15836682590ddd27ca34cea3b03ab2f43cb273d95036c1ec5e9(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ed810224f209fe4b795e50a927f95f4515d8e21fdae3ea5b1b8035f670d0167(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[CustomScenePolicyProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffe4a0bfa502137b0c47e2dc588032d564868de596a0efcd18d0bbd34bd87bd9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3764b2ab332623155eff230da41479578c7758d0e76684c465a3edd806f6cd21(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04fe0982d499fb5a40afeb8529b8e1fd848634cf5927719a07611b9e6ebbb5a9(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8122658aec562deaec68c378e8da63a1be8e3ca73eea7786bf358d0d7d6c4f1a(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[EdgeContainerAppProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ce3d9b86a34caaef70e3c1c938f6c5d0e31e17822c698c13e8fafb74bb3a9fc(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f30edac8339f95030bfddea40866ead62e867a1e53d9659066ae81e59988435(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9678906c83108dd46d60f08edc6a962a21552155804093a02bd59ae344af8ca3(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2049ad9239b1c7065c4f044ff4f6f04ef276e1435d6bafcbda0f5335280da4d(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[EdgeContainerAppRecordProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a4e2ff77f40fba2dc801a504501cac7d41794d850ee3794ab0408438f8ac2c6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b162248cee90d1ce873151a00d78a99de05c33f70dcdc114c87d3efcb844195(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__281218bf93d3842767e1d3a4e095ee61105044fc5cdbe3573939d719c594e77b(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bece07dcb59f400c1a1517f4dd4b9cfb9ecf84f6891c30273e8c3d0b4c751458(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[HttpRequestHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bf13f4ba323256c7d23f82f37265b5535008a8b540583044cd4333dc03fc167(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3212522d04cb09a07f7b6948d0d016b5401aed26055407c5370dccdbe5c03b2c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe2c07064f708e0b819c21e048ae84baef5c20e90e5ff46fa368d20a7278a2c3(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1507b264830d16a7e71d11650f1ae190fca0e3963eb0ac5c0ee61a3dffc05ea0(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[HttpResponseHeaderModificationRuleProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55cec41285b15fe71744ddb6bfdaf004e536de9261d028cf7df8d757d503108d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41f643e11045d1310ecdc5b2817858710a4f7c48393af51707144a0b8e09fbd1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97986debfa8ff64bb2cd554fd1f212878edfc8d26ef4bb8ef83110274eeb5492(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30b41b9eb20b604cece16ad3c7d6ce489dff452a71610cee729893b5763d2633(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[HttpsApplicationConfigurationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a1d235b2799973608d1e358abab42587e56b7b4fe3ba5780373c890c0ef7c28(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7b330c8ed9adf8f74a80b50ae7b9ab87a5ad7903d2d6553368941cdc3cda1d5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66feebfc869a7c7f28c7572ebd22068ff8a21eb134839589507e0dbba8edef79(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72818ebdc6b3a9fd3a6de2eacf1bcc38dc775c629baa00806d5f108d41871c64(
    scope: _ros_cdk_core_7adfd82f.Construct,
    id: builtins.str,
    props: typing.Union[HttpsBasicConfigurationProps, typing.Dict[builtins.str, typing.Any]],
    enable_resource_property_constraint: typing.Optional[builtins.bool] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__628d97e89a554a00174a585ddbc2537785c0d617b7e481cea5e78fed076eca44(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3cbd52100119bfb305779260d5990aa307618db5ea448574292aef90e8020304(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98c643306d49cdd8f793ba5ad20fef0b33df64951dcf18d8890a4a9e378d68b9(
    value: _ros_cdk_core_7adfd82f.Construct,
) -> None:
    """Type checking stubs"""
    pass

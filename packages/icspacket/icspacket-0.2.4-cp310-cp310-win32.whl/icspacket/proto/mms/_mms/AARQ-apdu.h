/*
 * Generated by asn1c-v0.9.27-1413-ge0c0052e-dirty for Python bindings (https://github.com/MatrixEditor/asn1c-bindings)
 * From ASN.1 module "ACSE-1"
 */

#ifndef	_AARQ_apdu_H_
#define	_AARQ_apdu_H_


#include <asn_application.h>

/* Including external dependencies */
#include <BIT_STRING.h>
#include <Application-context-name.h>
#include <AP-invocation-identifier.h>
#include <AE-invocation-identifier.h>
#include <ACSE-requirements.h>
#include <Mechanism-name.h>
#include <Implementation-data.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum AARQ_apdu__protocol_version {
	AARQ_apdu__protocol_version_version1	= 0
} e_AARQ_apdu__protocol_version;

/* Forward declarations */
struct AP_title;
struct AE_qualifier;
struct Authentication_value;
struct Application_context_name_list;
struct Association_information;

/* AARQ-apdu */
typedef struct AARQ_apdu {
	BIT_STRING_t *protocol_version; /* DEFAULT {version1} */
	Application_context_name_t application_context_name;
	struct AP_title *called_AP_title; /* OPTIONAL */
	struct AE_qualifier *called_AE_qualifier; /* OPTIONAL */
	AP_invocation_identifier_t *called_AP_invocation_identifier; /* OPTIONAL */
	AE_invocation_identifier_t *called_AE_invocation_identifier; /* OPTIONAL */
	struct AP_title *calling_AP_title; /* OPTIONAL */
	struct AE_qualifier *calling_AE_qualifier; /* OPTIONAL */
	AP_invocation_identifier_t *calling_AP_invocation_identifier; /* OPTIONAL */
	AE_invocation_identifier_t *calling_AE_invocation_identifier; /* OPTIONAL */
	ACSE_requirements_t *sender_acse_requirements; /* OPTIONAL */
	Mechanism_name_t *mechanism_name; /* OPTIONAL */
	struct Authentication_value *calling_authentication_value; /* OPTIONAL */
	struct Application_context_name_list *application_context_name_list; /* OPTIONAL */
	Implementation_data_t *implementation_information; /* OPTIONAL */
	struct Association_information *user_information; /* OPTIONAL */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} AARQ_apdu_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_AARQ_apdu;
extern asn_SEQUENCE_specifics_t asn_SPC_AARQ_apdu_specs_1;
extern asn_TYPE_member_t asn_MBR_AARQ_apdu_1[16];

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include <AP-title.h>
#include <AE-qualifier.h>
#include <Authentication-value.h>
#include <Application-context-name-list.h>
#include <Association-information.h>

#endif	/* _AARQ_apdu_H_ */
#include <asn_internal.h>

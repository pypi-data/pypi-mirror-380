# Fetch dependencies for peek-platform package builds

.peek_linux_dependencies_fetch_template:
    extends: .peek_package_template
    stage: fetch
    script:
        - echo "Fetching peek dependencies..."
        - curl --version
        - mkdir -p $ARTIFACTS_DIR

        # Download peek dependency packages tar file
        # When PACKAGE_VERSION is not 'x', iterate from PACKAGE_VERSION to 0 to allow dependencies to have separate minor versions
        - echo "Downloading peek dependency packages tar for ${LINUX_VERSION}..."
        - if [ "${PACKAGE_VERSION}" = "x" ];
          then
            export TAR_FILE="peek-dependency-packages-${PACKAGE_BRANCH}-${PACKAGE_VERSION}.${LINUX_VERSION}.x86_64.tar";
            echo "${DROPBOX_UPLOAD_URL}/${TAR_FILE}";
            curl -f -o "/tmp/${TAR_FILE}" "${DROPBOX_UPLOAD_URL}/${TAR_FILE}";
          else
            for Z in $(seq ${PACKAGE_VERSION} -1 0);
            do
              export DROPBOX_UPLOAD_URL="${DROPBOX_BASE_URL}/${PACKAGE_BRANCH}.${Z}";
              export TAR_FILE="peek-dependency-packages-${PACKAGE_BRANCH}-${Z}.${LINUX_VERSION}.x86_64.tar";
              echo "Trying ${DROPBOX_UPLOAD_URL}/${TAR_FILE}";
              if curl -f -o "/tmp/${TAR_FILE}" "${DROPBOX_UPLOAD_URL}/${TAR_FILE}";
              then
                echo "Successfully downloaded ${TAR_FILE}";
                break;
              else
                echo "Failed to download ${TAR_FILE}, trying next version...";
              fi;
            done;
          fi

        # Simple extraction approach
        - mkdir -p /tmp/extract
        - cd /tmp/extract
        - tar xf "/tmp/${TAR_FILE}"
        - mv peek-env*rpm "$ARTIFACTS_DIR/peek-env.rpm"
        - mv peek-python*rpm "$ARTIFACTS_DIR/peek-python.rpm"
        - mv peek-postgresql*rpm "$ARTIFACTS_DIR/peek-postgresql.rpm"
        - mv peek-oracle-instant-client*rpm
            "$ARTIFACTS_DIR/peek-oracle-instant-client.rpm"

        # Verify downloads
        - echo "Verifying extracted packages..."
        - ls -la $ARTIFACTS_DIR/*.rpm

        - echo "All peek dependencies extracted successfully"

    artifacts:
        paths:
            - $ARTIFACTS_DIR/peek-env.rpm
            - $ARTIFACTS_DIR/peek-python.rpm
            - $ARTIFACTS_DIR/peek-postgresql.rpm
            - $ARTIFACTS_DIR/peek-oracle-instant-client.rpm
        expire_in: 4 hours

# Concrete fetch jobs for different distributions
peek_linux_dependencies_fetch_rhel8:
    extends:
        - .peek_linux_dependencies_fetch_template
        - .alma8_with_epel
    variables:
        PKG_BUILD_FOR_RHEL8: "true"
        LINUX_VERSION: "el8"
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   if: '$CI_PIPELINE_SOURCE == "web"'
        -   if: '$CI_PIPELINE_SOURCE == "triggers"'
        -   if: '$CI_PIPELINE_SOURCE == "api"'
        -   if: '$BUILD_TARGET == "RHEL8" || $BUILD_TARGET == null || 
           $BUILD_TARGET == ""'

peek_linux_dependencies_fetch_rhel9:
    extends:
        - .peek_linux_dependencies_fetch_template
        - .alma9_with_epel
    variables:
        PKG_BUILD_FOR_RHEL9: "true"
        LINUX_VERSION: "el9"
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   if: '$CI_PIPELINE_SOURCE == "web"'
        -   if: '$CI_PIPELINE_SOURCE == "triggers"'
        -   if: '$CI_PIPELINE_SOURCE == "api"'
        -   if: '$BUILD_TARGET == "RHEL9" || $BUILD_TARGET == null || 
           $BUILD_TARGET == ""'

peek_linux_dependencies_fetch_amzn2023:
    extends:
        - .peek_linux_dependencies_fetch_template
        - .amazonlinux2023_with_epel
    variables:
        PKG_BUILD_FOR_AL_2023_7: "true"
        LINUX_VERSION: "amzn2023"
    rules:
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   if: '$CI_PIPELINE_SOURCE == "web"'
        -   if: '$CI_PIPELINE_SOURCE == "triggers"'
        -   if: '$CI_PIPELINE_SOURCE == "api"'
        -   if: '$BUILD_TARGET == "AL2023_7" || $BUILD_TARGET == null ||
           $BUILD_TARGET == ""'
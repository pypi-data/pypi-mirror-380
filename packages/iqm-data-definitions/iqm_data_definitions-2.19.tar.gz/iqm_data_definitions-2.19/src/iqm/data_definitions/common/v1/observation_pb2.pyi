"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Observation value and uncertainty declarations.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import iqm.data_definitions.common.v1.data_types_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Int64Array(google.protobuf.message.Message):
    """
    Represents an integer array, the dimensions of which are
    enumerated in 'shape' (think of "some_numpy_array.shape"),
    and the integers themselves are enumerated in "items"
    (think of "numpy.nditer(some_numpy_array, order='C')").
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHAPE_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        items: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "shape", b"shape"]) -> None: ...

global___Int64Array = Int64Array

@typing.final
class Float64Array(google.protobuf.message.Message):
    """
    Represents a float array, the dimensions of which are
    enumerated in 'shape' (think of "some_numpy_array.shape"),
    and the integers themselves are enumerated in "items"
    (think of "numpy.nditer(some_numpy_array, order='C')").
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHAPE_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        items: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "shape", b"shape"]) -> None: ...

global___Float64Array = Float64Array

@typing.final
class Complex128Array(google.protobuf.message.Message):
    """
    Represents a complex array, the dimensions of which are
    enumerated in 'shape' (think of "some_numpy_array.shape"),
    and the integers themselves are enumerated in "items"
    (think of "numpy.nditer(some_numpy_array, order='C')").
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SHAPE_FIELD_NUMBER: builtins.int
    ITEMS_FIELD_NUMBER: builtins.int
    @property
    def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def items(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[iqm.data_definitions.common.v1.data_types_pb2.Complex128]: ...
    def __init__(
        self,
        *,
        shape: collections.abc.Iterable[builtins.int] | None = ...,
        items: collections.abc.Iterable[iqm.data_definitions.common.v1.data_types_pb2.Complex128] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["items", b"items", "shape", b"shape"]) -> None: ...

global___Complex128Array = Complex128Array

@typing.final
class ObservationValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUE_FIELD_NUMBER: builtins.int
    FLOAT64_VALUE_FIELD_NUMBER: builtins.int
    COMPLEX128_VALUE_FIELD_NUMBER: builtins.int
    INT64_ARRAY_FIELD_NUMBER: builtins.int
    FLOAT64_ARRAY_FIELD_NUMBER: builtins.int
    COMPLEX128_ARRAY_FIELD_NUMBER: builtins.int
    LEGACY_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    ARRAY_FIELD_NUMBER: builtins.int
    str_value: builtins.str
    int64_value: builtins.int
    float64_value: builtins.float
    legacy_value: builtins.bytes
    bool_value: builtins.bool
    @property
    def complex128_value(self) -> iqm.data_definitions.common.v1.data_types_pb2.Complex128: ...
    @property
    def int64_array(self) -> global___Int64Array: ...
    @property
    def float64_array(self) -> global___Float64Array: ...
    @property
    def complex128_array(self) -> global___Complex128Array: ...
    @property
    def array(self) -> iqm.data_definitions.common.v1.data_types_pb2.Array: ...
    def __init__(
        self,
        *,
        str_value: builtins.str = ...,
        int64_value: builtins.int = ...,
        float64_value: builtins.float = ...,
        complex128_value: iqm.data_definitions.common.v1.data_types_pb2.Complex128 | None = ...,
        int64_array: global___Int64Array | None = ...,
        float64_array: global___Float64Array | None = ...,
        complex128_array: global___Complex128Array | None = ...,
        legacy_value: builtins.bytes = ...,
        bool_value: builtins.bool = ...,
        array: iqm.data_definitions.common.v1.data_types_pb2.Array | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["array", b"array", "bool_value", b"bool_value", "complex128_array", b"complex128_array", "complex128_value", b"complex128_value", "float64_array", b"float64_array", "float64_value", b"float64_value", "int64_array", b"int64_array", "int64_value", b"int64_value", "legacy_value", b"legacy_value", "str_value", b"str_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["array", b"array", "bool_value", b"bool_value", "complex128_array", b"complex128_array", "complex128_value", b"complex128_value", "float64_array", b"float64_array", "float64_value", b"float64_value", "int64_array", b"int64_array", "int64_value", b"int64_value", "legacy_value", b"legacy_value", "str_value", b"str_value", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["str_value", "int64_value", "float64_value", "complex128_value", "int64_array", "float64_array", "complex128_array", "legacy_value", "bool_value", "array"] | None: ...

global___ObservationValue = ObservationValue

@typing.final
class ObservationUncertainty(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INT64_VALUE_FIELD_NUMBER: builtins.int
    FLOAT64_VALUE_FIELD_NUMBER: builtins.int
    COMPLEX128_VALUE_FIELD_NUMBER: builtins.int
    INT64_ARRAY_FIELD_NUMBER: builtins.int
    FLOAT64_ARRAY_FIELD_NUMBER: builtins.int
    COMPLEX128_ARRAY_FIELD_NUMBER: builtins.int
    LEGACY_VALUE_FIELD_NUMBER: builtins.int
    int64_value: builtins.int
    float64_value: builtins.float
    legacy_value: builtins.bytes
    @property
    def complex128_value(self) -> iqm.data_definitions.common.v1.data_types_pb2.Complex128: ...
    @property
    def int64_array(self) -> global___Int64Array: ...
    @property
    def float64_array(self) -> global___Float64Array: ...
    @property
    def complex128_array(self) -> global___Complex128Array: ...
    def __init__(
        self,
        *,
        int64_value: builtins.int = ...,
        float64_value: builtins.float = ...,
        complex128_value: iqm.data_definitions.common.v1.data_types_pb2.Complex128 | None = ...,
        int64_array: global___Int64Array | None = ...,
        float64_array: global___Float64Array | None = ...,
        complex128_array: global___Complex128Array | None = ...,
        legacy_value: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["complex128_array", b"complex128_array", "complex128_value", b"complex128_value", "float64_array", b"float64_array", "float64_value", b"float64_value", "int64_array", b"int64_array", "int64_value", b"int64_value", "legacy_value", b"legacy_value", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["complex128_array", b"complex128_array", "complex128_value", b"complex128_value", "float64_array", b"float64_array", "float64_value", b"float64_value", "int64_array", b"int64_array", "int64_value", b"int64_value", "legacy_value", b"legacy_value", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["int64_value", "float64_value", "complex128_value", "int64_array", "float64_array", "complex128_array", "legacy_value"] | None: ...

global___ObservationUncertainty = ObservationUncertainty

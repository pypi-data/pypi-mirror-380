"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2019-2025 IQM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Playlist(google.protobuf.message.Message):
    """Sequence of instruction schedules to execute."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class ChannelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___ChannelDescription: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___ChannelDescription | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    CHANNELS_FIELD_NUMBER: builtins.int
    SCHEDULES_FIELD_NUMBER: builtins.int
    @property
    def channels(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ChannelDescription]: ...
    @property
    def schedules(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Schedule]: ...
    def __init__(
        self,
        *,
        channels: collections.abc.Mapping[builtins.str, global___ChannelDescription] | None = ...,
        schedules: collections.abc.Iterable[global___Schedule] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["channels", b"channels", "schedules", b"schedules"]) -> None: ...

global___Playlist = Playlist

@typing.final
class Schedule(google.protobuf.message.Message):
    """Synchronous instruction segment to be executed on several control channels in parallel."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Channel(google.protobuf.message.Message):
        """list of ChannelDescription.instruction_table references for a single control channel"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INSTRUCTION_REFS_FIELD_NUMBER: builtins.int
        @property
        def instruction_refs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        def __init__(
            self,
            *,
            instruction_refs: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["instruction_refs", b"instruction_refs"]) -> None: ...

    @typing.final
    class ChannelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Schedule.Channel: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Schedule.Channel | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    CHANNELS_FIELD_NUMBER: builtins.int
    @property
    def channels(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Schedule.Channel]:
        """mapping from channel names to their contents"""

    def __init__(
        self,
        *,
        channels: collections.abc.Mapping[builtins.str, global___Schedule.Channel] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["channels", b"channels"]) -> None: ...

global___Schedule = Schedule

@typing.final
class IQChannelConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLE_RATE_FIELD_NUMBER: builtins.int
    sample_rate: builtins.float
    def __init__(
        self,
        *,
        sample_rate: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["sample_rate", b"sample_rate"]) -> None: ...

global___IQChannelConfig = IQChannelConfig

@typing.final
class RealChannelConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLE_RATE_FIELD_NUMBER: builtins.int
    sample_rate: builtins.float
    def __init__(
        self,
        *,
        sample_rate: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["sample_rate", b"sample_rate"]) -> None: ...

global___RealChannelConfig = RealChannelConfig

@typing.final
class ReadoutChannelConfig(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLE_RATE_FIELD_NUMBER: builtins.int
    sample_rate: builtins.float
    def __init__(
        self,
        *,
        sample_rate: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["sample_rate", b"sample_rate"]) -> None: ...

global___ReadoutChannelConfig = ReadoutChannelConfig

@typing.final
class ChannelConfiguration(google.protobuf.message.Message):
    """Requested configuration for a control channel."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IQ_CHANNEL_FIELD_NUMBER: builtins.int
    REAL_CHANNEL_FIELD_NUMBER: builtins.int
    RO_CHANNEL_FIELD_NUMBER: builtins.int
    @property
    def iq_channel(self) -> global___IQChannelConfig: ...
    @property
    def real_channel(self) -> global___RealChannelConfig: ...
    @property
    def ro_channel(self) -> global___ReadoutChannelConfig: ...
    def __init__(
        self,
        *,
        iq_channel: global___IQChannelConfig | None = ...,
        real_channel: global___RealChannelConfig | None = ...,
        ro_channel: global___ReadoutChannelConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["extended", b"extended", "iq_channel", b"iq_channel", "real_channel", b"real_channel", "ro_channel", b"ro_channel"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["extended", b"extended", "iq_channel", b"iq_channel", "real_channel", b"real_channel", "ro_channel", b"ro_channel"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["extended", b"extended"]) -> typing.Literal["iq_channel", "real_channel", "ro_channel"] | None: ...

global___ChannelConfiguration = ChannelConfiguration

@typing.final
class ChannelDescription(google.protobuf.message.Message):
    """Describes a single control channel in a Playlist."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTROLLER_NAME_FIELD_NUMBER: builtins.int
    CHANNEL_CONFIG_FIELD_NUMBER: builtins.int
    INSTRUCTION_TABLE_FIELD_NUMBER: builtins.int
    WAVEFORM_TABLE_FIELD_NUMBER: builtins.int
    ACQUISITION_TABLE_FIELD_NUMBER: builtins.int
    controller_name: builtins.str
    """name of the controller handling the control channel"""
    @property
    def channel_config(self) -> global___ChannelConfiguration:
        """requested configuration for the channel"""

    @property
    def instruction_table(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Instruction]:
        """instruction and waveform lookup tables for the channel (Schedule refers to these)"""

    @property
    def waveform_table(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Waveform]: ...
    @property
    def acquisition_table(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AcquisitionMethod]:
        """Table of acquisition configs. Only relevant for readout channels.
        Restrictions that may apply:
        - At most one time trace operation allowed.
        - Mixing of time traces and state discrimination not allowed.
        """

    def __init__(
        self,
        *,
        controller_name: builtins.str = ...,
        channel_config: global___ChannelConfiguration | None = ...,
        instruction_table: collections.abc.Iterable[global___Instruction] | None = ...,
        waveform_table: collections.abc.Iterable[global___Waveform] | None = ...,
        acquisition_table: collections.abc.Iterable[global___AcquisitionMethod] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["channel_config", b"channel_config"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["acquisition_table", b"acquisition_table", "channel_config", b"channel_config", "controller_name", b"controller_name", "instruction_table", b"instruction_table", "waveform_table", b"waveform_table"]) -> None: ...

global___ChannelDescription = ChannelDescription

@typing.final
class Instruction(google.protobuf.message.Message):
    """Instructions are things instruments can do, and are executed back to back as referenced in each Schedule.Channel.
    Not all instruction types are supported by all channels.
    If a wrong instruction type is used, the Playlist is rejected.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DURATION_SAMPLES_FIELD_NUMBER: builtins.int
    MULTIPLEXED_REAL_PULSE_FIELD_NUMBER: builtins.int
    MULTIPLEXED_IQ_PULSE_FIELD_NUMBER: builtins.int
    WAIT_FIELD_NUMBER: builtins.int
    REAL_PULSE_FIELD_NUMBER: builtins.int
    IQ_PULSE_FIELD_NUMBER: builtins.int
    VIRTUAL_RZ_FIELD_NUMBER: builtins.int
    CONDITIONAL_INSTRUCTION_FIELD_NUMBER: builtins.int
    READOUT_TRIGGER_FIELD_NUMBER: builtins.int
    duration_samples: builtins.int
    @property
    def multiplexed_real_pulse(self) -> global___MultiplexedRealPulse: ...
    @property
    def multiplexed_iq_pulse(self) -> global___MultiplexedIQPulse: ...
    @property
    def wait(self) -> global___Wait: ...
    @property
    def real_pulse(self) -> global___RealPulse: ...
    @property
    def iq_pulse(self) -> global___IQPulse: ...
    @property
    def virtual_rz(self) -> global___VirtualRZ: ...
    @property
    def conditional_instruction(self) -> global___ConditionalInstruction: ...
    @property
    def readout_trigger(self) -> global___ReadoutTrigger: ...
    def __init__(
        self,
        *,
        duration_samples: builtins.int = ...,
        multiplexed_real_pulse: global___MultiplexedRealPulse | None = ...,
        multiplexed_iq_pulse: global___MultiplexedIQPulse | None = ...,
        wait: global___Wait | None = ...,
        real_pulse: global___RealPulse | None = ...,
        iq_pulse: global___IQPulse | None = ...,
        virtual_rz: global___VirtualRZ | None = ...,
        conditional_instruction: global___ConditionalInstruction | None = ...,
        readout_trigger: global___ReadoutTrigger | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["conditional_instruction", b"conditional_instruction", "iq_pulse", b"iq_pulse", "multiplexed_iq_pulse", b"multiplexed_iq_pulse", "multiplexed_real_pulse", b"multiplexed_real_pulse", "operation", b"operation", "readout_trigger", b"readout_trigger", "real_pulse", b"real_pulse", "virtual_rz", b"virtual_rz", "wait", b"wait"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["conditional_instruction", b"conditional_instruction", "duration_samples", b"duration_samples", "iq_pulse", b"iq_pulse", "multiplexed_iq_pulse", b"multiplexed_iq_pulse", "multiplexed_real_pulse", b"multiplexed_real_pulse", "operation", b"operation", "readout_trigger", b"readout_trigger", "real_pulse", b"real_pulse", "virtual_rz", b"virtual_rz", "wait", b"wait"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["operation", b"operation"]) -> typing.Literal["multiplexed_real_pulse", "multiplexed_iq_pulse", "wait", "real_pulse", "iq_pulse", "virtual_rz", "conditional_instruction", "readout_trigger"] | None: ...

global___Instruction = Instruction

@typing.final
class AcquisitionMethod(google.protobuf.message.Message):
    """Acquisition methods"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class TimeTrace(google.protobuf.message.Message):
        """Capture the raw IQ signal without integration."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DURATION_SAMPLES_FIELD_NUMBER: builtins.int
        duration_samples: builtins.int
        """How many samples to capture."""
        def __init__(
            self,
            *,
            duration_samples: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["duration_samples", b"duration_samples"]) -> None: ...

    @typing.final
    class ComplexIntegration(google.protobuf.message.Message):
        """Perform a weighted integration of the IQ raw signal, resulting a complex number."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WEIGHTS_FIELD_NUMBER: builtins.int
        @property
        def weights(self) -> global___IQPulse:
            """Complex IQ weight to use.
            The total integration window is the maximum length of all integration weights.
            A weights vector shorter than the window is padded with zeros.
            """

        def __init__(
            self,
            *,
            weights: global___IQPulse | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["weights", b"weights"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["weights", b"weights"]) -> None: ...

    @typing.final
    class ThresholdStateDiscrimination(google.protobuf.message.Message):
        """Perform a weighted integration of the IQ raw signal and compares the real part of the result against a
        threshold value, resulting in a boolean.
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        WEIGHTS_FIELD_NUMBER: builtins.int
        THRESHOLD_FIELD_NUMBER: builtins.int
        FEEDBACK_SIGNAL_LABEL_FIELD_NUMBER: builtins.int
        threshold: builtins.float
        """Threshold value used in discrimination."""
        feedback_signal_label: builtins.str
        """In fast feedback routing, the transmitted signals are associated with this label.
        ConditionalInstructions whose "condition" field has the string value of "feedback_signal_label"
        will receive the signal from this ThresholdStateDiscrimination.
        Empty string (default) means the signal is not routed anywhere.
        The same feedback_signal_label may not be used multiple times within the same ReadoutTrigger.
        The same feedback_signal_label can be used in different ReadoutTriggers and different segments.
        """
        @property
        def weights(self) -> global___IQPulse:
            """Same as in ComplexIntegration"""

        def __init__(
            self,
            *,
            weights: global___IQPulse | None = ...,
            threshold: builtins.float = ...,
            feedback_signal_label: builtins.str = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["weights", b"weights"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["feedback_signal_label", b"feedback_signal_label", "threshold", b"threshold", "weights", b"weights"]) -> None: ...

    LABEL_FIELD_NUMBER: builtins.int
    DELAY_SAMPLES_FIELD_NUMBER: builtins.int
    TIMETRACE_FIELD_NUMBER: builtins.int
    INTEGRATION_FIELD_NUMBER: builtins.int
    THRESHOLD_DISCRIMINATION_FIELD_NUMBER: builtins.int
    label: builtins.str
    """Identifier for the returned data, like "QB1__readout.time_trace" """
    delay_samples: builtins.int
    """How much the start of the acquisition should be delayed after the trigger, in samples."""
    @property
    def timetrace(self) -> global___AcquisitionMethod.TimeTrace: ...
    @property
    def integration(self) -> global___AcquisitionMethod.ComplexIntegration: ...
    @property
    def threshold_discrimination(self) -> global___AcquisitionMethod.ThresholdStateDiscrimination: ...
    def __init__(
        self,
        *,
        label: builtins.str = ...,
        delay_samples: builtins.int = ...,
        timetrace: global___AcquisitionMethod.TimeTrace | None = ...,
        integration: global___AcquisitionMethod.ComplexIntegration | None = ...,
        threshold_discrimination: global___AcquisitionMethod.ThresholdStateDiscrimination | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["acquisition_type", b"acquisition_type", "integration", b"integration", "threshold_discrimination", b"threshold_discrimination", "timetrace", b"timetrace"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["acquisition_type", b"acquisition_type", "delay_samples", b"delay_samples", "integration", b"integration", "label", b"label", "threshold_discrimination", b"threshold_discrimination", "timetrace", b"timetrace"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["acquisition_type", b"acquisition_type"]) -> typing.Literal["timetrace", "integration", "threshold_discrimination"] | None: ...

global___AcquisitionMethod = AcquisitionMethod

@typing.final
class Wait(google.protobuf.message.Message):
    """Instruction for an instrument to wait. For AWGs, equivalent to playing zero-valued samples."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___Wait = Wait

@typing.final
class VirtualRZ(google.protobuf.message.Message):
    """Instruction for a virtual z rotation."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PHASE_INCREMENT_FIELD_NUMBER: builtins.int
    phase_increment: builtins.float
    def __init__(
        self,
        *,
        phase_increment: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["phase_increment", b"phase_increment"]) -> None: ...

global___VirtualRZ = VirtualRZ

@typing.final
class RealPulse(google.protobuf.message.Message):
    """Instruction for playing a real-valued pulse, to be used with real channels."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WAVEFORM_REF_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    waveform_ref: builtins.int
    scale: builtins.float
    def __init__(
        self,
        *,
        waveform_ref: builtins.int = ...,
        scale: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["scale", b"scale", "waveform_ref", b"waveform_ref"]) -> None: ...

global___RealPulse = RealPulse

@typing.final
class IQPulse(google.protobuf.message.Message):
    """Instruction for playing an IQ pulse, to be used with IQ channels."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WAVEFORM_I_REF_FIELD_NUMBER: builtins.int
    WAVEFORM_Q_REF_FIELD_NUMBER: builtins.int
    SCALE_I_FIELD_NUMBER: builtins.int
    SCALE_Q_FIELD_NUMBER: builtins.int
    PHASE_FIELD_NUMBER: builtins.int
    PHASE_MOD_FREQ_FIELD_NUMBER: builtins.int
    PHASE_INCREMENT_FIELD_NUMBER: builtins.int
    waveform_i_ref: builtins.int
    waveform_q_ref: builtins.int
    scale_i: builtins.float
    """Pulse modifiers that can be implemented in hardware.
    Semantics: first scale the i and q waves, then apply phase offset and modulation (mixing i and q),
    then apply extra accumulated phase from VirtualRZs, if present.
    Frequency modulation `phase_mod_freq` is applied relative to the start of the pulse, on top of any IF modulation in hardware;
      sideband modulating with this parameter will not result in phase-coherent pulses at the new sideband frequency.
    """
    scale_q: builtins.float
    phase: builtins.float
    phase_mod_freq: builtins.float
    phase_increment: builtins.float
    """Relative phase increment to the phase in the carrier frequency of this pulse and all pulses that are played after it. Unit: rad."""
    def __init__(
        self,
        *,
        waveform_i_ref: builtins.int = ...,
        waveform_q_ref: builtins.int = ...,
        scale_i: builtins.float = ...,
        scale_q: builtins.float = ...,
        phase: builtins.float = ...,
        phase_mod_freq: builtins.float = ...,
        phase_increment: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["phase", b"phase", "phase_increment", b"phase_increment", "phase_mod_freq", b"phase_mod_freq", "scale_i", b"scale_i", "scale_q", b"scale_q", "waveform_i_ref", b"waveform_i_ref", "waveform_q_ref", b"waveform_q_ref"]) -> None: ...

global___IQPulse = IQPulse

@typing.final
class MultiplexedIQPulse(google.protobuf.message.Message):
    """Instruction to simultaneously play multiple IQ pulses.
    Each component pulse entry can be added with arbitrary delay from the beginning of this instruction.
    Where outside of the duration of the MultiplexedPulse, the pulse entries are truncated.
    Where overlapping, samples of multiple pulse entries are summed.
    Where the interval of a MultiplexedPulse does not overlap with any of its entry pulse, its samples will be 0.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        OFFSET_SAMPLES_FIELD_NUMBER: builtins.int
        INSTRUCTION_REF_FIELD_NUMBER: builtins.int
        IQ_PULSE_FIELD_NUMBER: builtins.int
        offset_samples: builtins.int
        """no granularity constraints. negative values allowed (but beginning will be truncated)"""
        instruction_ref: builtins.int
        @property
        def iq_pulse(self) -> global___IQPulse: ...
        def __init__(
            self,
            *,
            offset_samples: builtins.int = ...,
            instruction_ref: builtins.int = ...,
            iq_pulse: global___IQPulse | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["instruction_ref", b"instruction_ref", "iq_pulse", b"iq_pulse", "pulse", b"pulse"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["instruction_ref", b"instruction_ref", "iq_pulse", b"iq_pulse", "offset_samples", b"offset_samples", "pulse", b"pulse"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["pulse", b"pulse"]) -> typing.Literal["instruction_ref", "iq_pulse"] | None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MultiplexedIQPulse.Entry]: ...
    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___MultiplexedIQPulse.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___MultiplexedIQPulse = MultiplexedIQPulse

@typing.final
class MultiplexedRealPulse(google.protobuf.message.Message):
    """Similar to MultiplexedIQPulse, but for real pulses."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Entry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        OFFSET_SAMPLES_FIELD_NUMBER: builtins.int
        INSTRUCTION_REF_FIELD_NUMBER: builtins.int
        REAL_PULSE_FIELD_NUMBER: builtins.int
        offset_samples: builtins.int
        instruction_ref: builtins.int
        @property
        def real_pulse(self) -> global___RealPulse: ...
        def __init__(
            self,
            *,
            offset_samples: builtins.int = ...,
            instruction_ref: builtins.int = ...,
            real_pulse: global___RealPulse | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["instruction_ref", b"instruction_ref", "pulse", b"pulse", "real_pulse", b"real_pulse"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["instruction_ref", b"instruction_ref", "offset_samples", b"offset_samples", "pulse", b"pulse", "real_pulse", b"real_pulse"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["pulse", b"pulse"]) -> typing.Literal["instruction_ref", "real_pulse"] | None: ...

    ENTRIES_FIELD_NUMBER: builtins.int
    @property
    def entries(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___MultiplexedRealPulse.Entry]: ...
    def __init__(
        self,
        *,
        entries: collections.abc.Iterable[global___MultiplexedRealPulse.Entry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["entries", b"entries"]) -> None: ...

global___MultiplexedRealPulse = MultiplexedRealPulse

@typing.final
class ReadoutTrigger(google.protobuf.message.Message):
    """Instruction for playing a probe pulse and acquiring the associated readout results.
    Supported by ReadoutChannelConfig channels.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROBE_PULSE_REF_FIELD_NUMBER: builtins.int
    ACQUSITIONS_FIELD_NUMBER: builtins.int
    probe_pulse_ref: builtins.int
    """Index of the pulse instruction, from the instruction table of the channel description."""
    @property
    def acqusitions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Indices into AcquisitionMethod table of the channel config."""

    def __init__(
        self,
        *,
        probe_pulse_ref: builtins.int = ...,
        acqusitions: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["acqusitions", b"acqusitions", "probe_pulse_ref", b"probe_pulse_ref"]) -> None: ...

global___ReadoutTrigger = ReadoutTrigger

@typing.final
class ConditionalInstruction(google.protobuf.message.Message):
    """Choice between two instructions based on a condition."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONDITION_FIELD_NUMBER: builtins.int
    IF_TRUE_FIELD_NUMBER: builtins.int
    IF_FALSE_FIELD_NUMBER: builtins.int
    condition: builtins.str
    if_true: builtins.int
    """ChannelDescription.instruction_table references for the potential outcomes"""
    if_false: builtins.int
    def __init__(
        self,
        *,
        condition: builtins.str = ...,
        if_true: builtins.int = ...,
        if_false: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["condition", b"condition", "if_false", b"if_false", "if_true", b"if_true"]) -> None: ...

global___ConditionalInstruction = ConditionalInstruction

@typing.final
class Waveform(google.protobuf.message.Message):
    """Real-valued waveform to be stored in AWG waveform memory, can be referenced by various Instructions."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    N_SAMPLES_FIELD_NUMBER: builtins.int
    SAMPLES_FIELD_NUMBER: builtins.int
    GAUSSIAN_FIELD_NUMBER: builtins.int
    GAUSSIAN_DERIVATIVE_FIELD_NUMBER: builtins.int
    CONSTANT_FIELD_NUMBER: builtins.int
    GAUSSIAN_SMOOTHED_SQUARE_FIELD_NUMBER: builtins.int
    TRUNCATED_GAUSSIAN_FIELD_NUMBER: builtins.int
    TRUNCATED_GAUSSIAN_DERIVATIVE_FIELD_NUMBER: builtins.int
    TRUNCATED_GAUSSIAN_SMOOTHED_SQUARE_FIELD_NUMBER: builtins.int
    COSINE_RISE_FALL_FIELD_NUMBER: builtins.int
    n_samples: builtins.int
    @property
    def samples(self) -> global___Samples: ...
    @property
    def gaussian(self) -> global___Gaussian: ...
    @property
    def gaussian_derivative(self) -> global___GaussianDerivative: ...
    @property
    def constant(self) -> global___Constant: ...
    @property
    def gaussian_smoothed_square(self) -> global___GaussianSmoothedSquare: ...
    @property
    def truncated_gaussian(self) -> global___TruncatedGaussian: ...
    @property
    def truncated_gaussian_derivative(self) -> global___TruncatedGaussianDerivative: ...
    @property
    def truncated_gaussian_smoothed_square(self) -> global___TruncatedGaussianSmoothedSquare: ...
    @property
    def cosine_rise_fall(self) -> global___CosineRiseFall: ...
    def __init__(
        self,
        *,
        n_samples: builtins.int = ...,
        samples: global___Samples | None = ...,
        gaussian: global___Gaussian | None = ...,
        gaussian_derivative: global___GaussianDerivative | None = ...,
        constant: global___Constant | None = ...,
        gaussian_smoothed_square: global___GaussianSmoothedSquare | None = ...,
        truncated_gaussian: global___TruncatedGaussian | None = ...,
        truncated_gaussian_derivative: global___TruncatedGaussianDerivative | None = ...,
        truncated_gaussian_smoothed_square: global___TruncatedGaussianSmoothedSquare | None = ...,
        cosine_rise_fall: global___CosineRiseFall | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["constant", b"constant", "cosine_rise_fall", b"cosine_rise_fall", "gaussian", b"gaussian", "gaussian_derivative", b"gaussian_derivative", "gaussian_smoothed_square", b"gaussian_smoothed_square", "samples", b"samples", "truncated_gaussian", b"truncated_gaussian", "truncated_gaussian_derivative", b"truncated_gaussian_derivative", "truncated_gaussian_smoothed_square", b"truncated_gaussian_smoothed_square", "waveform_description", b"waveform_description"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["constant", b"constant", "cosine_rise_fall", b"cosine_rise_fall", "gaussian", b"gaussian", "gaussian_derivative", b"gaussian_derivative", "gaussian_smoothed_square", b"gaussian_smoothed_square", "n_samples", b"n_samples", "samples", b"samples", "truncated_gaussian", b"truncated_gaussian", "truncated_gaussian_derivative", b"truncated_gaussian_derivative", "truncated_gaussian_smoothed_square", b"truncated_gaussian_smoothed_square", "waveform_description", b"waveform_description"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["waveform_description", b"waveform_description"]) -> typing.Literal["samples", "gaussian", "gaussian_derivative", "constant", "gaussian_smoothed_square", "truncated_gaussian", "truncated_gaussian_derivative", "truncated_gaussian_smoothed_square", "cosine_rise_fall"] | None: ...

global___Waveform = Waveform

@typing.final
class Samples(google.protobuf.message.Message):
    """Custom waveform consisting from a list of samples."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SAMPLES_FIELD_NUMBER: builtins.int
    @property
    def samples(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        samples: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["samples", b"samples"]) -> None: ...

global___Samples = Samples

@typing.final
class Gaussian(google.protobuf.message.Message):
    """Gaussian pulse."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGMA_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    sigma: builtins.float
    center_offset: builtins.float
    def __init__(
        self,
        *,
        sigma: builtins.float = ...,
        center_offset: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "sigma", b"sigma"]) -> None: ...

global___Gaussian = Gaussian

@typing.final
class GaussianDerivative(google.protobuf.message.Message):
    """Scaled derivative of a gaussian pulse."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGMA_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    sigma: builtins.float
    center_offset: builtins.float
    def __init__(
        self,
        *,
        sigma: builtins.float = ...,
        center_offset: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "sigma", b"sigma"]) -> None: ...

global___GaussianDerivative = GaussianDerivative

@typing.final
class Constant(google.protobuf.message.Message):
    """Constant-valued waveform."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___Constant = Constant

@typing.final
class GaussianSmoothedSquare(google.protobuf.message.Message):
    """Convolution of a gaussian pulse and a square pulse."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SQUARE_WIDTH_FIELD_NUMBER: builtins.int
    GAUSSIAN_SIGMA_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    square_width: builtins.float
    gaussian_sigma: builtins.float
    center_offset: builtins.float
    def __init__(
        self,
        *,
        square_width: builtins.float = ...,
        gaussian_sigma: builtins.float = ...,
        center_offset: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "gaussian_sigma", b"gaussian_sigma", "square_width", b"square_width"]) -> None: ...

global___GaussianSmoothedSquare = GaussianSmoothedSquare

@typing.final
class TruncatedGaussian(google.protobuf.message.Message):
    """Gaussian pulse, where the decaying tails are removed by offsetting, truncating
    and then rescaling the pulse
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FULL_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    full_width: builtins.float
    center_offset: builtins.float
    def __init__(
        self,
        *,
        full_width: builtins.float = ...,
        center_offset: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "full_width", b"full_width"]) -> None: ...

global___TruncatedGaussian = TruncatedGaussian

@typing.final
class TruncatedGaussianDerivative(google.protobuf.message.Message):
    """Derivative of a gaussian pulse, where the decaying tails are removed by offsetting,
    truncating and then rescaling the pulse
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FULL_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    full_width: builtins.float
    center_offset: builtins.float
    def __init__(
        self,
        *,
        full_width: builtins.float = ...,
        center_offset: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "full_width", b"full_width"]) -> None: ...

global___TruncatedGaussianDerivative = TruncatedGaussianDerivative

@typing.final
class TruncatedGaussianSmoothedSquare(google.protobuf.message.Message):
    """Convolution of a square pulse and a gaussian pulse, offset and truncated so that it has finite support."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FULL_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    RISE_TIME_FIELD_NUMBER: builtins.int
    full_width: builtins.float
    center_offset: builtins.float
    rise_time: builtins.float
    def __init__(
        self,
        *,
        full_width: builtins.float = ...,
        center_offset: builtins.float = ...,
        rise_time: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "full_width", b"full_width", "rise_time", b"rise_time"]) -> None: ...

global___TruncatedGaussianSmoothedSquare = TruncatedGaussianSmoothedSquare

@typing.final
class CosineRiseFall(google.protobuf.message.Message):
    """Waveform that has a sinusoidal rise and fall, and a constant part in between."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FULL_WIDTH_FIELD_NUMBER: builtins.int
    CENTER_OFFSET_FIELD_NUMBER: builtins.int
    RISE_TIME_FIELD_NUMBER: builtins.int
    full_width: builtins.float
    center_offset: builtins.float
    rise_time: builtins.float
    def __init__(
        self,
        *,
        full_width: builtins.float = ...,
        center_offset: builtins.float = ...,
        rise_time: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["center_offset", b"center_offset", "full_width", b"full_width", "rise_time", b"rise_time"]) -> None: ...

global___CosineRiseFall = CosineRiseFall

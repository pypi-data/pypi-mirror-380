"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Protobuf message definitions for transferring Station Control settings tree.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import iqm.data_definitions.common.v1.data_types_pb2
import iqm.data_definitions.common.v1.parameter_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SettingNode(google.protobuf.message.Message):
    """Node of a setting tree. Nodes in the tree consist of settings (leaves) or other nodes (branches)."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Setting(google.protobuf.message.Message):
        """Setting that combines a parameter and a value"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        PARAMETER_NAME_FIELD_NUMBER: builtins.int
        PARAMETER_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        parameter_name: builtins.str
        """The string is to be used when request is sent to the server which already knows the aux data."""
        @property
        def parameter(self) -> iqm.data_definitions.common.v1.parameter_pb2.Parameter:
            """Parameter is to be used when the auxiliary data, like unit and required datatype,
            must be communicated to a client.
            """

        @property
        def value(self) -> iqm.data_definitions.common.v1.data_types_pb2.Datum:
            """The actual payload."""

        def __init__(
            self,
            *,
            parameter_name: builtins.str = ...,
            parameter: iqm.data_definitions.common.v1.parameter_pb2.Parameter | None = ...,
            value: iqm.data_definitions.common.v1.data_types_pb2.Datum | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["parameter", b"parameter", "parameter_desc", b"parameter_desc", "parameter_name", b"parameter_name", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["parameter", b"parameter", "parameter_desc", b"parameter_desc", "parameter_name", b"parameter_name", "value", b"value"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["parameter_desc", b"parameter_desc"]) -> typing.Literal["parameter_name", "parameter"] | None: ...

    @typing.final
    class SettingsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___SettingNode.Setting: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___SettingNode.Setting | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class SubnodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___SettingNode: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___SettingNode | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    SETTINGS_FIELD_NUMBER: builtins.int
    SUBNODES_FIELD_NUMBER: builtins.int
    name: builtins.str
    """Name of the node. By convention, the name is a dot-separated string whose fragments are the keys leading from
    the root node to this node. For example, a nested node `root_node::sub_1::sub_2` should be named `"sub_1.sub_2"`
    which makes the name unique.
    """
    @property
    def settings(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___SettingNode.Setting]:
        """Settings contained in this node."""

    @property
    def subnodes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___SettingNode]:
        """Subnodes contained in the node."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        settings: collections.abc.Mapping[builtins.str, global___SettingNode.Setting] | None = ...,
        subnodes: collections.abc.Mapping[builtins.str, global___SettingNode] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "settings", b"settings", "subnodes", b"subnodes"]) -> None: ...

global___SettingNode = SettingNode

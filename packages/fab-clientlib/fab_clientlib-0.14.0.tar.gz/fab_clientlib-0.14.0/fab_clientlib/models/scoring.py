# coding: utf-8

"""
    FAB Client Lib

    Python client lib to access Flatland Association Benchmarks / AI4REALNET Campaign Hub Backend API, generated with openapi-generator

    The version of the OpenAPI document: 0.0.0
    Contact: contact@flatland-association.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from uuid import UUID
from typing import Optional, Set
from typing_extensions import Self

class Scoring(BaseModel):
    """
    Scoring
    """ # noqa: E501
    field_id: Optional[UUID] = Field(default=None, description="ID of field definition.")
    field_key: Optional[StrictStr] = Field(default=None, description="Key of field.")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Numerical score.")
    rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Item's rank in category.")
    highest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Highest score in category.")
    lowest: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Lowest score in category.")
    __properties: ClassVar[List[str]] = ["field_id", "field_key", "score", "rank", "highest", "lowest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scoring from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if score (nullable) is None
        # and model_fields_set contains the field
        if self.score is None and "score" in self.model_fields_set:
            _dict['score'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scoring from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "field_id": obj.get("field_id"),
            "field_key": obj.get("field_key"),
            "score": obj.get("score"),
            "rank": obj.get("rank"),
            "highest": obj.get("highest"),
            "lowest": obj.get("lowest")
        })
        return _obj



import flax.linen as nn
import jax.numpy as jnp
from typing import Sequence, Callable
import numpy as np
from .atomic_units import au
from .xenonpy_props import XENONPY_PROPS

PERIODIC_TABLE_STR = """
H                                                                                                                           He
Li  Be                                                                                                  B   C   N   O   F   Ne
Na  Mg                                                                                                  Al  Si  P   S   Cl  Ar
K   Ca                                                          Sc  Ti  V   Cr  Mn  Fe  Co  Ni  Cu  Zn  Ga  Ge  As  Se  Br  Kr
Rb  Sr                                                          Y   Zr  Nb  Mo  Tc  Ru  Rh  Pd  Ag  Cd  In  Sn  Sb  Te  I   Xe
Cs  Ba  La  Ce  Pr  Nd  Pm  Sm  Eu  Gd  Tb  Dy  Ho  Er  Tm  Yb  Lu  Hf  Ta  W   Re  Os  Ir  Pt  Au  Hg  Tl  Pb  Bi  Po  At  Rn
Fr  Ra  Ac  Th  Pa  U   Np  Pu  Am  Cm  Bk  Cf  Es  Fm  Md  No  Lr  Rf  Db  Sg  Bh  Hs  Mt  Ds  Rg  Cn  Nh  Fl  Mc  Lv  Ts  Og
"""

PERIODIC_TABLE = ["Dummy"] + PERIODIC_TABLE_STR.strip().split()

PERIODIC_TABLE_REV_IDX = {s: i for i, s in enumerate(PERIODIC_TABLE)}


def _build_periodic_coordinates():
    periods = PERIODIC_TABLE_STR.split("\n")[1:-1]
    coords = [
        [0, 0],
    ]
    for i, p in enumerate(periods):
        for j in range(0, len(p), 4):
            if p[j : j + 4].strip():
                coords.append([i + 1, j // 4 + 1])
    return np.array(coords)


PERIODIC_COORDINATES = _build_periodic_coordinates()

ATOMIC_MASSES = np.array([
    0.0,
    1.008,
    4.002602,
    6.94,
    9.0121831,
    10.81,
    12.011,
    14.007,
    15.999,
    18.99840316,
    20.1797,
    22.98976928,
    24.305,
    26.9815385,
    28.085,
    30.973762,
    32.06,
    35.45,
    39.948,
    39.0983,
    40.078,
    44.955908,
    47.867,
    50.9415,
    51.9961,
    54.938044,
    55.845,
    58.933194,
    58.6934,
    63.546,
    65.38,
    69.723,
    72.63,
    74.921595,
    78.971,
    79.904,
    83.798,
    85.4678,
    87.62,
    88.90584,
    91.224,
    92.90637,
    95.95,
    97.90721,
    101.07,
    102.9055,
    106.42,
    107.8682,
    112.414,
    114.818,
    118.71,
    121.76,
    127.6,
    126.90447,
    131.293,
    132.90545196,
    137.327,
    138.90547,
    140.116,
    140.90766,
    144.242,
    144.91276,
    150.36,
    151.964,
    157.25,
    158.92535,
    162.5,
    164.93033,
    167.259,
    168.93422,
    173.054,
    174.9668,
    178.49,
    180.94788,
    183.84,
    186.207,
    190.23,
    192.217,
    195.084,
    196.966569,
    200.592,
    204.38,
    207.2,
    208.9804,
    208.98243,
    209.98715,
    222.01758,
    223.01974,
    226.02541,
    227.02775,
    232.0377,
    231.03588,
    238.02891,
    237.04817,
    244.06421,
    243.06138,
    247.07035,
    247.07031,
    251.07959,
    252.083,
    257.09511,
    258.09843,
    259.101,
    262.11,
    267.122,
    268.126,
    271.134,
    270.133,
    269.1338,
    278.156,
    281.165,
    281.166,
    285.177,
    286.182,
    289.19,
    289.194,
    293.204,
    293.208,
    294.214,
])

# covalent radii from the Cambridge Structural Database (https://en.wikipedia.org/wiki/Covalent_radius)
COV_RADII = np.array(
    [1.0]
    + [
        0.31,   # H
        0.28,   # He
        1.28,   # Li
        0.96,   # Be
        0.84,   # B
        0.76,   # C
        0.71,   # N
        0.66,   # O
        0.57,   # F
        0.58,   # Ne
        1.66,   # Na
        1.41,   # Mg
        1.21,   # Al
        1.11,   # Si
        1.07,   # P
        1.05,   # S
        1.02,   # Cl
        1.06,   # Ar
        2.03,   # K
        1.76,   # Ca
        1.70,   # Sc
        1.60,   # Ti
        1.53,   # V
        1.39,   # Cr
        1.39,   # Mn
        1.32,   # Fe
        1.26,   # Co
        1.24,   # Ni
        1.32,   # Cu
        1.22,   # Zn
        1.22,   # Ga
        1.20,   # Ge
        1.19,   # As
        1.20,   # Se
        1.20,   # Br
        1.16,   # Kr
        2.20,   # Rb
        1.95,   # Sr
        1.90,   # Y
        1.75,   # Zr
        1.64,   # Nb
        1.54,   # Mo
        1.47,   # Tc
        1.46,   # Ru
        1.42,   # Rh
        1.39,   # Pd
        1.45,   # Ag
        1.44,   # Cd
        1.42,   # In
        1.39,   # Sn
        1.39,   # Sb
        1.38,   # Te
        1.39,   # I
        1.40,   # Xe
        2.44,   # Cs
        2.15,   # Ba
        2.07,   # La
        2.04,   # Ce
        2.04,   # Pr
        2.01,   # Nd
        1.99,   # Pm
        1.98,   # Sm
        1.98,   # Eu
        1.96,   # Gd
        1.94,   # Tb
        1.92,   # Dy
        1.92,   # Ho
        1.89,   # Er
        1.90,   # Tm
        1.87,   # Yb
        1.87,   # Lu
        1.75,   # Hf
        1.70,   # Ta
        1.62,   # W
        1.51,   # Re
        1.44,   # Os
        1.41,   # Ir
        1.36,   # Pt
        1.36,   # Au
        1.32,   # Hg
        1.45,   # Tl
        1.46,   # Pb
        1.48,   # Bi
        1.40,   # Po
        1.50,   # At
        1.50,   # Rn
        2.60,   # Fr
        2.21,   # Ra
        2.15,   # Ac
        2.06,   # Th
        2.00,   # Pa
        1.96,   # U
        1.90,   # Np
        1.87,   # Pu
        1.80,   # Am
        1.69,   # Cm
        1.68,   # Bk
        1.68,   # Cf
        1.65,   # Es
        1.67,   # Fm
        1.73,   # Md
        1.76,   # No
        1.61,   # Lr
        1.57,   # Rf
        1.49,   # Db
        1.43,   # Sg
        1.41,   # Bh
        1.34,   # Hs
        1.29,   # Mt
        1.28,   # Ds
        1.21,   # Rg
        1.22,   # Cn
        1.36,   # Nh
        1.43,   # Fl
        1.62,   # Mc
        1.75,   # Lv
        1.65,   # Ts
        1.57,   # Og
        ]
        + [1.0]
    )

COV_RADII = COV_RADII / au.ANG


EL_STRUCT = [[0] * 19] * len(PERIODIC_TABLE)
#########################1s 2s 2p 3s 3p 4s 3d 4p 5s 4d 5p  6s 4f 5d 6p 7s 5f 6d 7p
EL_STRUCT[1] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # H
EL_STRUCT[2] = [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # He
EL_STRUCT[3] = [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Li
EL_STRUCT[4] = [2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Be
EL_STRUCT[5] = [2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # B
EL_STRUCT[6] = [2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # C
EL_STRUCT[7] = [2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # N
EL_STRUCT[8] = [2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # O
EL_STRUCT[9] = [2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # F
EL_STRUCT[10] = [2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ne
##########################1s 2s 2p 3s 3p 4s 3d 4p  5s 4d 5p 6s 4f 5d 6p
EL_STRUCT[11] = [2, 2, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Na
EL_STRUCT[12] = [2, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Mg
EL_STRUCT[13] = [2, 2, 6, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Al
EL_STRUCT[14] = [2, 2, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Si
EL_STRUCT[15] = [2, 2, 6, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # P
EL_STRUCT[16] = [2, 2, 6, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # S
EL_STRUCT[17] = [2, 2, 6, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Cl
EL_STRUCT[18] = [2, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ar
##########################1s 2s 2p 3s 3p 4s 3d 4p  5s 4d 5p 6s 4f 5d 6p
EL_STRUCT[19] = [2, 2, 6, 2, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # K
EL_STRUCT[20] = [2, 2, 6, 2, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ca
EL_STRUCT[21] = [2, 2, 6, 2, 6, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Sc
EL_STRUCT[22] = [2, 2, 6, 2, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ti
EL_STRUCT[23] = [2, 2, 6, 2, 6, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # V
EL_STRUCT[24] = [2, 2, 6, 2, 6, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Cr
EL_STRUCT[25] = [2, 2, 6, 2, 6, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Mn
EL_STRUCT[26] = [2, 2, 6, 2, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Fe
EL_STRUCT[27] = [2, 2, 6, 2, 6, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Co
EL_STRUCT[28] = [2, 2, 6, 2, 6, 2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ni
EL_STRUCT[29] = [2, 2, 6, 2, 6, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Cu
EL_STRUCT[30] = [2, 2, 6, 2, 6, 2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Zn
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s 4d 5p 6s 4f 5d 6p
EL_STRUCT[31] = [2, 2, 6, 2, 6, 2, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ga
EL_STRUCT[32] = [2, 2, 6, 2, 6, 2, 10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ge
EL_STRUCT[33] = [2, 2, 6, 2, 6, 2, 10, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # As
EL_STRUCT[34] = [2, 2, 6, 2, 6, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Se
EL_STRUCT[35] = [2, 2, 6, 2, 6, 2, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Br
EL_STRUCT[36] = [2, 2, 6, 2, 6, 2, 10, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Kr
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s 4d 5p 6s 4f 5d 6p
EL_STRUCT[37] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Rb
EL_STRUCT[38] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Sr
EL_STRUCT[39] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Y
EL_STRUCT[40] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Zr
EL_STRUCT[41] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Nb
EL_STRUCT[42] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Mo
EL_STRUCT[43] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Tc
EL_STRUCT[44] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ru
EL_STRUCT[45] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Rh
EL_STRUCT[46] = [2, 2, 6, 2, 6, 2, 10, 6, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Pd
EL_STRUCT[47] = [2, 2, 6, 2, 6, 2, 10, 6, 1, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Ag
EL_STRUCT[48] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # Cd
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s  4d 5p 6s 4f 5d 6p
EL_STRUCT[49] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0]  # In
EL_STRUCT[50] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 2, 0, 0, 0, 0, 0, 0, 0, 0]  # Sn
EL_STRUCT[51] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 3, 0, 0, 0, 0, 0, 0, 0, 0]  # Sb
EL_STRUCT[52] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0]  # Te
EL_STRUCT[53] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0]  # I
EL_STRUCT[54] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 0, 0, 0, 0, 0, 0, 0, 0]  # Xe
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s  4d 5p 6s 4f 5d 6p
EL_STRUCT[55] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 1, 0, 0, 0, 0, 0, 0, 0]  # Cs
EL_STRUCT[56] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 0, 0, 0, 0, 0, 0, 0]  # Ba
EL_STRUCT[57] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 0, 1, 0, 0, 0, 0, 0]  # La
EL_STRUCT[58] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 1, 1, 0, 0, 0, 0, 0]  # Ce
EL_STRUCT[59] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 3, 0, 0, 0, 0, 0, 0]  # Pr
EL_STRUCT[60] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 4, 0, 0, 0, 0, 0, 0]  # Nd
EL_STRUCT[61] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 5, 0, 0, 0, 0, 0, 0]  # Pm
EL_STRUCT[62] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 6, 0, 0, 0, 0, 0, 0]  # Sm
EL_STRUCT[63] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 7, 0, 0, 0, 0, 0, 0]  # Eu
EL_STRUCT[64] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 7, 1, 0, 0, 0, 0, 0]  # Gd
EL_STRUCT[65] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 9, 0, 0, 0, 0, 0, 0]  # Tb
EL_STRUCT[66] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 10, 0, 0, 0, 0, 0, 0]  # Dy
EL_STRUCT[67] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 11, 0, 0, 0, 0, 0, 0]  # Ho
EL_STRUCT[68] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 12, 0, 0, 0, 0, 0, 0]  # Er
EL_STRUCT[69] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 13, 0, 0, 0, 0, 0, 0]  # Tm
EL_STRUCT[70] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 0, 0, 0, 0, 0, 0]  # Yb
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s  4d 5p 6s  4f  5d 6p
EL_STRUCT[71] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 1, 0, 0, 0, 0, 0]  # Lu
EL_STRUCT[71] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 2, 0, 0, 0, 0, 0]  # Hf
EL_STRUCT[73] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 3, 0, 0, 0, 0, 0]  # Ta
EL_STRUCT[74] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 4, 0, 0, 0, 0, 0]  # W
EL_STRUCT[75] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 5, 0, 0, 0, 0, 0]  # Re
EL_STRUCT[76] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 6, 0, 0, 0, 0, 0]  # Os
EL_STRUCT[77] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 7, 0, 0, 0, 0, 0]  # Ir
EL_STRUCT[78] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 1, 14, 9, 0, 0, 0, 0, 0]  # Pt
EL_STRUCT[79] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 1, 14, 10, 0, 0, 0, 0, 0]  # Au
EL_STRUCT[80] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 0, 0, 0, 0, 0]  # Hg
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s  4d 5p 6s  4f  5d 6p
EL_STRUCT[81] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 1, 0, 0, 0, 0]  # Tl
EL_STRUCT[82] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 2, 0, 0, 0, 0]  # Pb
EL_STRUCT[83] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 3, 0, 0, 0, 0]  # Bi
EL_STRUCT[84] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 4, 0, 0, 0, 0]  # Po
EL_STRUCT[85] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 5, 0, 0, 0, 0]  # At
EL_STRUCT[86] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 0, 0, 0, 0]  # Rn
###########################1s 2s 2p 3s 3p 4s 3d 4p 5s  4d 5p 6s  4f  5d 6p 7s 5f  6d 7p
EL_STRUCT[87] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 1, 0, 0, 0]  # Fr
EL_STRUCT[88] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 0, 0, 0]  # Ra
EL_STRUCT[89] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 0, 1, 0]  # Ac
EL_STRUCT[90] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 0, 2, 0]  # Th
EL_STRUCT[91] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 2, 1, 0]  # Pa
EL_STRUCT[92] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 3, 1, 0]  # U
EL_STRUCT[93] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 4, 1, 0]  # Np
EL_STRUCT[94] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 6, 0, 0]  # Pu
EL_STRUCT[95] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 7, 0, 0]  # Am
EL_STRUCT[96] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 7, 1, 0]  # Cm
EL_STRUCT[97] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 9, 0, 0]  # Bk
EL_STRUCT[98] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 10, 0, 0]  # Cf
EL_STRUCT[99] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 11, 0, 0]  # Es
EL_STRUCT[100] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 12, 0, 0]  # Fm
EL_STRUCT[101] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 13, 0, 0]  # Md
EL_STRUCT[102] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 0, 0]  # No
EL_STRUCT[103] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 0, 1]  # Lr
EL_STRUCT[104] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 2, 0]  # Rf
EL_STRUCT[105] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 3, 0]  # Db
EL_STRUCT[106] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 4, 0]  # Sg
EL_STRUCT[107] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 5, 0]  # Bh
EL_STRUCT[108] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 6, 0]  # Hs
EL_STRUCT[109] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 7, 0]  # Mt
EL_STRUCT[110] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 8, 0]  # Ds
EL_STRUCT[111] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 9, 0]  # Rg
EL_STRUCT[112] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 0]  # Cn
EL_STRUCT[113] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 1]  # Nh
EL_STRUCT[114] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 2]  # Fl
EL_STRUCT[115] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 3]  # Mc
EL_STRUCT[116] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 4]  # Lv
EL_STRUCT[117] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 5]  # Ts
EL_STRUCT[118] = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 6]  # Og
EL_STRUCT = np.array(EL_STRUCT, dtype=int)


VALENCE_STRUCTURE = [[0.25] * 4] * len(PERIODIC_TABLE)
######################vs vp  vd  vf
VALENCE_STRUCTURE[1] = [1, 0, 0, 0]  # H
VALENCE_STRUCTURE[2] = [2, 0, 0, 0]  # He
VALENCE_STRUCTURE[3] = [1, 0, 0, 0]  # Li
VALENCE_STRUCTURE[4] = [2, 0, 0, 0]  # Be
VALENCE_STRUCTURE[5] = [2, 1, 0, 0]  # B
VALENCE_STRUCTURE[6] = [2, 2, 0, 0]  # C
VALENCE_STRUCTURE[7] = [2, 3, 0, 0]  # N
VALENCE_STRUCTURE[8] = [2, 4, 0, 0]  # O
VALENCE_STRUCTURE[9] = [2, 5, 0, 0]  # F
VALENCE_STRUCTURE[10] = [2, 6, 0, 0]  # Ne
VALENCE_STRUCTURE[11] = [1, 0, 0, 0]  # Na
VALENCE_STRUCTURE[12] = [2, 0, 0, 0]  # Mg
VALENCE_STRUCTURE[13] = [2, 1, 0, 0]  # Al
VALENCE_STRUCTURE[14] = [2, 2, 0, 0]  # Si
VALENCE_STRUCTURE[15] = [2, 3, 0, 0]  # P
VALENCE_STRUCTURE[16] = [2, 4, 0, 0]  # S
VALENCE_STRUCTURE[17] = [2, 5, 0, 0]  # Cl
VALENCE_STRUCTURE[18] = [2, 6, 0, 0]  # Ar
VALENCE_STRUCTURE[19] = [1, 0, 0, 0]  # K
VALENCE_STRUCTURE[20] = [2, 0, 0, 0]  # Ca
VALENCE_STRUCTURE[21] = [2, 0, 1, 0]  # Sc
VALENCE_STRUCTURE[22] = [2, 0, 2, 0]  # Ti
VALENCE_STRUCTURE[23] = [2, 0, 3, 0]  # V
VALENCE_STRUCTURE[24] = [1, 0, 5, 0]  # Cr
VALENCE_STRUCTURE[25] = [2, 0, 5, 0]  # Mn
VALENCE_STRUCTURE[26] = [2, 0, 6, 0]  # Fe
VALENCE_STRUCTURE[27] = [2, 0, 7, 0]  # Co
VALENCE_STRUCTURE[28] = [2, 0, 8, 0]  # Ni
VALENCE_STRUCTURE[29] = [1, 0, 10, 0]  # Cu
VALENCE_STRUCTURE[30] = [2, 0, 10, 0]  # Zn
VALENCE_STRUCTURE[31] = [2, 1, 10, 0]  # Ga
VALENCE_STRUCTURE[32] = [2, 2, 10, 0]  # Ge
VALENCE_STRUCTURE[33] = [2, 3, 10, 0]  # As
VALENCE_STRUCTURE[34] = [2, 4, 10, 0]  # Se
VALENCE_STRUCTURE[35] = [2, 5, 10, 0]  # Br
VALENCE_STRUCTURE[36] = [2, 6, 10, 0]  # Kr
VALENCE_STRUCTURE[37] = [1, 0, 0, 0]  # Rb
VALENCE_STRUCTURE[38] = [2, 0, 0, 0]  # Sr
VALENCE_STRUCTURE[39] = [2, 0, 1, 0]  # Y
VALENCE_STRUCTURE[40] = [2, 0, 2, 0]  # Zr
VALENCE_STRUCTURE[41] = [1, 0, 4, 0]  # Nb
VALENCE_STRUCTURE[42] = [1, 0, 5, 0]  # Mo
VALENCE_STRUCTURE[43] = [2, 0, 5, 0]  # Tc
VALENCE_STRUCTURE[44] = [1, 0, 7, 0]  # Ru
VALENCE_STRUCTURE[45] = [1, 0, 8, 0]  # Rh
VALENCE_STRUCTURE[46] = [0, 0, 10, 0]  # Pd
VALENCE_STRUCTURE[47] = [1, 0, 10, 0]  # Ag
VALENCE_STRUCTURE[48] = [2, 0, 10, 0]  # Cd
VALENCE_STRUCTURE[49] = [2, 1, 10, 0]  # In
VALENCE_STRUCTURE[50] = [2, 2, 10, 0]  # Sn
VALENCE_STRUCTURE[51] = [2, 3, 10, 0]  # Sb
VALENCE_STRUCTURE[52] = [2, 4, 10, 0]  # Te
VALENCE_STRUCTURE[53] = [2, 5, 10, 0]  # I
VALENCE_STRUCTURE[54] = [2, 6, 10, 0]  # Xe
VALENCE_STRUCTURE[55] = [1, 0, 0, 0]  # Cs
VALENCE_STRUCTURE[56] = [2, 0, 0, 0]  # Ba
VALENCE_STRUCTURE[57] = [2, 0, 1, 0]  # La
VALENCE_STRUCTURE[58] = [2, 0, 1, 1]  # Ce
VALENCE_STRUCTURE[59] = [2, 0, 0, 3]  # Pr
VALENCE_STRUCTURE[60] = [2, 0, 0, 4]  # Nd
VALENCE_STRUCTURE[61] = [2, 0, 0, 5]  # Pm
VALENCE_STRUCTURE[62] = [2, 0, 0, 6]  # Sm
VALENCE_STRUCTURE[63] = [2, 0, 0, 7]  # Eu
VALENCE_STRUCTURE[64] = [2, 0, 1, 7]  # Gd
VALENCE_STRUCTURE[65] = [2, 0, 0, 9]  # Tb
VALENCE_STRUCTURE[66] = [2, 0, 0, 10]  # Dy
VALENCE_STRUCTURE[67] = [2, 0, 0, 11]  # Ho
VALENCE_STRUCTURE[68] = [2, 0, 0, 12]  # Er
VALENCE_STRUCTURE[69] = [2, 0, 0, 13]  # Tm
VALENCE_STRUCTURE[70] = [2, 0, 0, 14]  # Yb
VALENCE_STRUCTURE[71] = [2, 0, 1, 14]  # Lu
VALENCE_STRUCTURE[72] = [2, 0, 2, 14]  # Hf
VALENCE_STRUCTURE[73] = [2, 0, 3, 14]  # Ta
VALENCE_STRUCTURE[74] = [2, 0, 4, 14]  # W
VALENCE_STRUCTURE[75] = [2, 0, 5, 14]  # Re
VALENCE_STRUCTURE[76] = [2, 0, 6, 14]  # Os
VALENCE_STRUCTURE[77] = [2, 0, 7, 14]  # Ir
VALENCE_STRUCTURE[78] = [1, 0, 9, 14]  # Pt
VALENCE_STRUCTURE[79] = [1, 0, 10, 14]  # Au
VALENCE_STRUCTURE[80] = [2, 0, 10, 14]  # Hg
VALENCE_STRUCTURE[81] = [2, 1, 10, 14]  # Tl
VALENCE_STRUCTURE[82] = [2, 2, 10, 14]  # Pb
VALENCE_STRUCTURE[83] = [2, 3, 10, 14]  # Bi
VALENCE_STRUCTURE[84] = [2, 4, 10, 14]  # Po
VALENCE_STRUCTURE[85] = [2, 5, 10, 14]  # At
VALENCE_STRUCTURE[86] = [2, 6, 10, 14]  # Rn
######################vs vp  vd  vf
VALENCE_STRUCTURE[87] = [1, 0, 0, 0]  # Fr
VALENCE_STRUCTURE[88] = [2, 0, 0, 0]  # Ra
VALENCE_STRUCTURE[89] = [2, 0, 1, 0]  # Ac
VALENCE_STRUCTURE[90] = [2, 0, 2, 0]  # Th
VALENCE_STRUCTURE[91] = [2, 0, 1, 2]  # Pa
VALENCE_STRUCTURE[92] = [2, 0, 1, 3]  # U
VALENCE_STRUCTURE[93] = [2, 0, 1, 4]  # Np
VALENCE_STRUCTURE[94] = [2, 0, 0, 6]  # Pu
VALENCE_STRUCTURE[95] = [2, 0, 0, 7]  # Am
VALENCE_STRUCTURE[96] = [2, 0, 1, 7]  # Cm
VALENCE_STRUCTURE[97] = [2, 0, 0, 9]  # Bk
VALENCE_STRUCTURE[98] = [2, 0, 0, 10]  # Cf
VALENCE_STRUCTURE[99] = [2, 0, 0, 11]  # Es
VALENCE_STRUCTURE[100] = [2, 0, 0, 12]  # Fm
VALENCE_STRUCTURE[101] = [2, 0, 0, 13]  # Md
VALENCE_STRUCTURE[102] = [2, 0, 0, 14]  # No
VALENCE_STRUCTURE[103] = [2, 1, 0, 14]  # Lr
VALENCE_STRUCTURE[104] = [2, 0, 2, 14]  # Rf
VALENCE_STRUCTURE[105] = [2, 0, 3, 14]  # Db
VALENCE_STRUCTURE[106] = [2, 0, 4, 14]  # Sg
VALENCE_STRUCTURE[107] = [2, 0, 5, 14]  # Bh
VALENCE_STRUCTURE[108] = [2, 0, 6, 14]  # Hs
VALENCE_STRUCTURE[109] = [2, 0, 7, 14]  # Mt
VALENCE_STRUCTURE[110] = [2, 0, 8, 14]  # Ds
VALENCE_STRUCTURE[111] = [2, 0, 9, 14]  # Rg
VALENCE_STRUCTURE[112] = [2, 0, 10, 14]  # Cn
VALENCE_STRUCTURE[113] = [2, 1, 10, 14]  # Nh
VALENCE_STRUCTURE[114] = [2, 2, 10, 14]  # Fl
VALENCE_STRUCTURE[115] = [2, 3, 10, 14]  # Mc
VALENCE_STRUCTURE[116] = [2, 4, 10, 14]  # Lv
VALENCE_STRUCTURE[117] = [2, 5, 10, 14]  # Ts
VALENCE_STRUCTURE[118] = [2, 6, 10, 14]  # Og
VALENCE_STRUCTURE = np.array(VALENCE_STRUCTURE, dtype=float)


VALENCE_ELECTRONS = VALENCE_STRUCTURE.sum(axis=1)

VALENCE_STRUCTURE_FULL = [[[0] * 9, [0] * 9]] * len(PERIODIC_TABLE)
###########################################
VALENCE_STRUCTURE_FULL[1] = [[1] + [0] * 8, [0] * 9]  # H
VALENCE_STRUCTURE_FULL[2] = [[1] + [0] * 8, [1] + [0] * 8]  # He
###########################################
VALENCE_STRUCTURE_FULL[3] = [[1] + [0] * 8, [0] * 9]  # Li
VALENCE_STRUCTURE_FULL[4] = [[1] + [0] * 8, [1] + [0] * 8]  # Be
###########################################
VALENCE_STRUCTURE_FULL[5] = [[1] * 2 + [0] * 7, [1] + [0] * 8]  # B
VALENCE_STRUCTURE_FULL[6] = [[1] * 3 + [0] * 6, [1] + [0] * 8]  # C
VALENCE_STRUCTURE_FULL[7] = [[1] * 4 + [0] * 5, [1] + [0] * 8]  # N
VALENCE_STRUCTURE_FULL[8] = [[1] * 4 + [0] * 5, [1] * 2 + [0] * 7]  # O
VALENCE_STRUCTURE_FULL[9] = [[1] * 4 + [0] * 5, [1] * 3 + [0] * 6]  # F
VALENCE_STRUCTURE_FULL[10] = [[1] * 4 + [0] * 5, [1] * 4 + [0] * 5]  # Ne
###########################################
VALENCE_STRUCTURE_FULL[11] = [[1] + [0] * 8, [0] * 9]  # Na
VALENCE_STRUCTURE_FULL[12] = [[1] + [0] * 8, [1] + [0] * 8]  # Mg
###########################################
VALENCE_STRUCTURE_FULL[13] = [[1] * 2 + [0] * 7, [1] + [0] * 8]  # Al
VALENCE_STRUCTURE_FULL[14] = [[1] * 3 + [0] * 6, [1] + [0] * 8]  # Si
VALENCE_STRUCTURE_FULL[15] = [[1] * 4 + [0] * 5, [1] + [0] * 8]  # P
VALENCE_STRUCTURE_FULL[16] = [[1] * 4 + [0] * 5, [1] * 2 + [0] * 7]  # S
VALENCE_STRUCTURE_FULL[17] = [[1] * 4 + [0] * 5, [1] * 3 + [0] * 6]  # Cl
VALENCE_STRUCTURE_FULL[18] = [[1] * 4 + [0] * 5, [1] * 4 + [0] * 5]  # Ar
###########################################
VALENCE_STRUCTURE_FULL[19] = [[1] + [0] * 8, [0] * 9]  # K
VALENCE_STRUCTURE_FULL[20] = [[1] + [0] * 8, [1] + [0] * 8]  # Ca
###########################################
VALENCE_STRUCTURE_FULL[21] = [
    [1] + [0] * 3 + [1] * 1 + [0] * 4,
    [1] + [0] * 3 + [0] * 5,
]  # Sc
VALENCE_STRUCTURE_FULL[22] = [
    [1] + [0] * 3 + [1] * 2 + [0] * 3,
    [1] + [0] * 3 + [0] * 5,
]  # Ti
VALENCE_STRUCTURE_FULL[23] = [
    [1] + [0] * 3 + [1] * 3 + [0] * 2,
    [1] + [0] * 3 + [0] * 5,
]  # V
VALENCE_STRUCTURE_FULL[24] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [0] + [0] * 3 + [0] * 5,
]  # Cr
VALENCE_STRUCTURE_FULL[25] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [0] * 5,
]  # Mn
VALENCE_STRUCTURE_FULL[26] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 1 + [0] * 4,
]  # Fe
VALENCE_STRUCTURE_FULL[27] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 2 + [0] * 3,
]  # Co
VALENCE_STRUCTURE_FULL[28] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 3 + [0] * 2,
]  # Ni
VALENCE_STRUCTURE_FULL[29] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 4 + [0] * 1,
]  # Cu
VALENCE_STRUCTURE_FULL[30] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
]  # Zn
###########################################
VALENCE_STRUCTURE_FULL[31] = [
    [1] * 2 + [0] * 2 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # Ga
VALENCE_STRUCTURE_FULL[32] = [
    [1] * 3 + [0] * 1 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # Ge
VALENCE_STRUCTURE_FULL[33] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # As
VALENCE_STRUCTURE_FULL[34] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 2 + [0] * 2 + [1] * 5,
]  # Se
VALENCE_STRUCTURE_FULL[35] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 3 + [0] * 1 + [1] * 5,
]  # Br
VALENCE_STRUCTURE_FULL[36] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 4 + [0] * 0 + [1] * 5,
]  # Kr
###########################################
VALENCE_STRUCTURE_FULL[37] = [[1] + [0] * 8, [0] * 9]  # Rb
VALENCE_STRUCTURE_FULL[38] = [[1] + [0] * 8, [1] + [0] * 8]  # Sr
###########################################
VALENCE_STRUCTURE_FULL[39] = [
    [1] + [0] * 3 + [1] * 1 + [0] * 4,
    [1] + [0] * 3 + [0] * 5,
]  # Y
VALENCE_STRUCTURE_FULL[40] = [
    [1] + [0] * 3 + [1] * 2 + [0] * 3,
    [1] + [0] * 3 + [0] * 5,
]  # Zr
VALENCE_STRUCTURE_FULL[41] = [
    [1] + [0] * 3 + [1] * 3 + [0] * 2,
    [0] + [0] * 3 + [0] * 5,
]  # Nb
VALENCE_STRUCTURE_FULL[42] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [0] + [0] * 3 + [0] * 5,
]  # Mo
VALENCE_STRUCTURE_FULL[43] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [0] * 5,
]  # Tc
VALENCE_STRUCTURE_FULL[44] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 1 + [0] * 4,
]  # Ru
VALENCE_STRUCTURE_FULL[45] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 2 + [0] * 3,
]  # Rh
VALENCE_STRUCTURE_FULL[46] = [
    [0] + [0] * 3 + [1] * 5 + [0] * 0,
    [0] + [0] * 3 + [1] * 5 + [0] * 0,
]  # Pd
VALENCE_STRUCTURE_FULL[47] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 4 + [0] * 1,
]  # Ag
VALENCE_STRUCTURE_FULL[48] = [
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
    [1] + [0] * 3 + [1] * 5 + [0] * 0,
]  # Cd
###########################################
VALENCE_STRUCTURE_FULL[49] = [
    [1] * 2 + [0] * 2 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # In
VALENCE_STRUCTURE_FULL[50] = [
    [1] * 3 + [0] * 1 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # Sn
VALENCE_STRUCTURE_FULL[51] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 1 + [0] * 3 + [1] * 5,
]  # Sb
VALENCE_STRUCTURE_FULL[52] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 2 + [0] * 2 + [1] * 5,
]  # Te
VALENCE_STRUCTURE_FULL[53] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 3 + [0] * 1 + [1] * 5,
]  # I
VALENCE_STRUCTURE_FULL[54] = [
    [1] * 4 + [0] * 0 + [1] * 5,
    [1] * 4 + [0] * 0 + [1] * 5,
]  # Xe
###########################################

VALENCE_STRUCTURE_FULL = np.array(VALENCE_STRUCTURE_FULL, dtype=int)

# ATOMIC ELECTRONEGATIVITIES FROM
# A generally applicable atomic-charge dependent London dispersion correction (SI)
# (Caldeweyher et al.)
D3_ELECTRONEGATIVITIES = np.array(
    [1.0]
    + [
        1.23695041,
        1.26590957,
        0.54341808,
        0.99666991,
        1.26691604,
        1.40028282,
        1.55819364,
        1.56866440,
        1.57540015,
        1.15056627,
        0.55936220,
        0.72373742,
        1.12910844,
        1.12306840,
        1.52672442,
        1.40768172,
        1.48154584,
        1.31062963,
        0.40374140,
        0.75442607,
        0.76482096,
        0.98457281,
        0.96702598,
        1.05266584,
        0.93274875,
        1.04025281,
        0.92738624,
        1.07419210,
        1.07900668,
        1.04712861,
        1.15018618,
        1.15388455,
        1.36313743,
        1.36485106,
        1.39801837,
        1.18695346,
        0.36273870,
        0.58797255,
        0.71961946,
        0.96158233,
        0.89585296,
        0.81360499,
        1.00794665,
        0.92613682,
        1.09152285,
        1.14907070,
        1.13508911,
        1.08853785,
        1.11005982,
        1.12452195,
        1.21642129,
        1.36507125,
        1.40340000,
        1.16653482,
        0.34125098,
        0.58884173,
        0.68441115,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.56999999,
        0.87936784,
        1.02761808,
        0.93297476,
        1.10172128,
        0.97350071,
        1.16695666,
        1.23997927,
        1.18464453,
        1.14191734,
        1.12334192,
        1.01485321,
        1.12950808,
        1.30804834,
        1.33689961,
        1.27465977,
    ]
    + [1.0]
)

D3_HARDNESSES = np.array(
    [1.0e1]
    + [
        -0.35015861,
        1.04121227,
        0.09281243,
        0.09412380,
        0.26629137,
        0.19408787,
        0.05317918,
        0.03151644,
        0.32275132,
        1.30996037,
        0.24206510,
        0.04147733,
        0.11634126,
        0.13155266,
        0.15350650,
        0.15250997,
        0.17523529,
        0.28774450,
        0.42937314,
        0.01896455,
        0.07179178,
        -0.01121381,
        -0.03093370,
        0.02716319,
        -0.01843812,
        -0.15270393,
        -0.09192645,
        -0.13418723,
        -0.09861139,
        0.18338109,
        0.08299615,
        0.11370033,
        0.19005278,
        0.10980677,
        0.12327841,
        0.25345554,
        0.58615231,
        0.16093861,
        0.04548530,
        -0.02478645,
        0.01909943,
        0.01402541,
        -0.03595279,
        0.01137752,
        -0.03697213,
        0.08009416,
        0.02274892,
        0.12801822,
        -0.02078702,
        0.05284319,
        0.07581190,
        0.09663758,
        0.09547417,
        0.07803344,
        0.64913257,
        0.15348654,
        0.05054344,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        0.11000000,
        -0.02786741,
        0.01057858,
        -0.03892226,
        -0.04574364,
        -0.03874080,
        -0.03782372,
        -0.07046855,
        0.09546597,
        0.21953269,
        0.02522348,
        0.15263050,
        0.08042611,
        0.01878626,
        0.08715453,
        0.10500484,
    ]
    + [1.0e1]
)

D3_KAPPA = np.array(
    [0.0]
    + [
        0.04916110,
        0.10937243,
        -0.12349591,
        -0.02665108,
        -0.02631658,
        0.06005196,
        0.09279548,
        0.11689703,
        0.15704746,
        0.07987901,
        -0.10002962,
        -0.07712863,
        -0.02170561,
        -0.04964052,
        0.14250599,
        0.07126660,
        0.13682750,
        0.14877121,
        -0.10219289,
        -0.08979338,
        -0.08273597,
        -0.01754829,
        -0.02765460,
        -0.02558926,
        -0.08010286,
        -0.04163215,
        -0.09369631,
        -0.03774117,
        -0.05759708,
        0.02431998,
        -0.01056270,
        -0.02692862,
        0.07657769,
        0.06561608,
        0.08006749,
        0.14139200,
        -0.05351029,
        -0.06701705,
        -0.07377246,
        -0.02927768,
        -0.03867291,
        -0.06929825,
        -0.04485293,
        -0.04800824,
        -0.01484022,
        0.07917502,
        0.06619243,
        0.02434095,
        -0.01505548,
        -0.03030768,
        0.01418235,
        0.08953411,
        0.08967527,
        0.07277771,
        -0.02129476,
        -0.06188828,
        -0.06568203,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.11000000,
        -0.03585873,
        -0.03132400,
        -0.05902379,
        -0.02827592,
        -0.07606260,
        -0.02123839,
        0.03814822,
        0.02146834,
        0.01580538,
        -0.00894298,
        -0.05864876,
        -0.01817842,
        0.07721851,
        0.07936083,
        0.05849285,
    ]
    + [0.0]
)

D3_VDW_RADII = np.array(
    [1.0]
    + [
        0.55159092,
        0.66205886,
        0.90529132,
        1.51710827,
        2.86070364,
        1.88862966,
        1.32250290,
        1.23166285,
        1.77503721,
        1.11955204,
        1.28263182,
        1.22344336,
        1.70936266,
        1.54075036,
        1.38200579,
        2.18849322,
        1.36779065,
        1.27039703,
        1.64466502,
        1.58859404,
        1.65357953,
        1.50021521,
        1.30104175,
        1.46301827,
        1.32928147,
        1.02766713,
        1.02291377,
        0.94343886,
        1.14881311,
        1.47080755,
        1.76901636,
        1.98724061,
        2.41244711,
        2.26739524,
        2.95378999,
        1.20807752,
        1.65941046,
        1.62733880,
        1.61344972,
        1.63220728,
        1.60899928,
        1.43501286,
        1.54559205,
        1.32663678,
        1.37644152,
        1.36051851,
        1.23395526,
        1.65734544,
        1.53895240,
        1.97542736,
        1.97636542,
        2.05432381,
        3.80138135,
        1.43893803,
        1.75505957,
        1.59815118,
        1.76401732,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.63999999,
        1.47055223,
        1.81127084,
        1.40189963,
        1.54015481,
        1.33721475,
        1.57165422,
        1.04815857,
        1.78342098,
        2.79106396,
        1.78160840,
        2.47588882,
        2.37670734,
        1.76613217,
        2.66172302,
        2.82773085,
    ]
    + [1.0]
)

D3_COV_RADII = np.array(
    [1.0]
    + [
        0.32,   # H
        0.46,   # He
        1.33,   # Li
        1.02,   # Be
        0.85,   # B
        0.75,   # C
        0.71,   # N
        0.63,   # O
        0.64,   # F
        0.67,   # Ne
        1.55,   # Na
        1.39,   # Mg
        1.26,   # Al
        1.16,   # Si
        1.11,   # P
        1.03,   # S
        0.99,   # Cl
        0.96,   # Ar
        1.96,   # K
        1.71,   # Ca
        1.48,   # Sc
        1.36,   # Ti
        1.34,   # V
        1.22,   # Cr
        1.19,   # Mn
        1.16,   # Fe
        1.11,   # Co
        1.10,   # Ni
        1.12,   # Cu
        1.18,   # Zn
        1.24,   # Ga
        1.21,   # Ge
        1.21,   # As
        1.16,   # Se
        1.14,   # Br
        1.17,   # Kr
        2.10,   # Rb
        1.85,   # Sr
        1.63,   # Y
        1.54,   # Zr
        1.47,   # Nb
        1.38,   # Mo
        1.28,   # Tc
        1.25,   # Ru
        1.25,   # Rh
        1.20,   # Pd
        1.28,   # Ag
        1.36,   # Cd
        1.42,   # In
        1.40,   # Sn
        1.40,   # Sb
        1.36,   # Te
        1.33,   # I
        1.31,   # Xe
        2.32,   # Cs
        1.96,   # Ba
        1.80,   # La
        1.63,   # Ce
        1.76,   # Pr
        1.74,   # Nd
        1.73,   # Pm
        1.72,   # Sm
        1.68,   # Eu
        1.69,   # Gd
        1.68,   # Tb
        1.67,   # Dy
        1.66,   # Ho
        1.65,   # Er
        1.64,   # Tm
        1.70,   # Yb
        1.62,   # Lu
        1.52,   # Hf
        1.46,   # Ta
        1.37,   # W
        1.31,   # Re
        1.29,   # Os
        1.22,   # Ir
        1.23,   # Pt
        1.24,   # Au
        1.33,   # Hg
        1.44,   # Tl
        1.44,   # Pb
        1.51,   # Bi
        1.45,   # Po
        1.47,   # At
        1.42,   # Rn
    ]
    + [1.0]
)
D3_COV_RADII = D3_COV_RADII/ au.ANG

# free atom vdw radii in bohr from Tkatchenko-Scheffler
VDW_RADII_TS = np.array([
    1.0,  # Dummy
    3.1,  # H
    2.65,  # He
    4.16,  # Li
    4.17,  # Be
    3.89,  # B
    3.59,  # C
    3.34,  # N
    3.19,  # O
    3.04,  # F
    2.91,  # Ne
    3.73,  # Na
    4.27,  # Mg
    4.33,  # Al
    4.2,  # Si
    4.01,  # P
    3.86,  # S
    3.71,  # Cl
    3.55,  # Ar
    3.71,  # K
    4.65,  # Ca
    4.59,  # Sc
    4.51,  # Ti
    4.44,  # V
    3.99,  # Cr
    3.97,  # Mn
    4.23,  # Fe
    4.18,  # Co
    3.82,  # Ni
    3.76,  # Cu
    4.02,  # Zn
    4.19,  # Ga
    4.2,  # Ge
    4.11,  # As
    4.04,  # Se
    3.93,  # Br
    3.82,  # Kr
    3.72,  # Rb
    4.54,  # Sr
    4.8151,  # Y
    4.53,  # Zr
    4.2365,  # Nb
    4.099,  # Mo
    4.076,  # Tc
    3.9953,  # Ru
    3.95,  # Rh
    3.66,  # Pd
    3.82,  # Ag
    3.99,  # Cd
    4.23198,  # In
    4.303,  # Sn
    4.276,  # Sb
    4.22,  # Te
    4.17,  # I
    4.08,  # Xe
    3.78,  # Cs
    4.77,  # Ba
    3.14,  # La
    3.26,  # Ce
    3.28,  # Pr
    3.3,  # Nd
    3.27,  # Pm
    3.32,  # Sm
    3.4,  # Eu
    3.62,  # Gd
    3.42,  # Tb
    3.26,  # Dy
    3.24,  # Ho
    3.3,  # Er
    3.26,  # Tm
    3.22,  # Yb
    3.2,  # Lu
    4.21,  # Hf
    4.15,  # Ta
    4.08,  # W
    4.02,  # Re
    3.84,  # Os
    4.0,  # Ir
    3.92,  # Pt
    3.86,  # Au
    3.98,  # Hg
    3.91,  # Tl
    4.31,  # Pb
    4.32,  # Bi
    4.097,  # Po
    4.07,  # At
    4.23,  # Rn
    3.9,  # Fr
    4.98,  # Ra
    2.75,  # Ac
    2.85,  # Th
    2.71,  # Pa
    3.0,  # U
    3.28,  # Np
    3.45,  # Pu
    3.51,  # Am
    3.47,  # Cm
    3.56,  # Bk
    3.55,  # Cf
    3.76,  # Es
    3.89,  # Fm
    3.93,  # Md
    3.78,  # No
    1.0,  # Dummy
])

# free atom C6 coefficients in hartree*bohr**6
C6_FREE = np.array([
    1.0,  # Dummy
    6.5,  # H
    1.46,  # He
    1387.0,  # Li
    214.0,  # Be
    99.5,  # B
    46.6,  # C
    24.2,  # N
    15.6,  # O
    9.52,  # F
    6.38,  # Ne
    1556.0,  # Na
    627.0,  # Mg
    528.0,  # Al
    305.0,  # Si
    185.0,  # P
    134.0,  # S
    94.6,  # Cl
    64.3,  # Ar
    3897.0,  # K
    2221.0,  # Ca
    1383.0,  # Sc
    1044.0,  # Ti
    832.0,  # V
    602.0,  # Cr
    552.0,  # Mn
    482.0,  # Fe
    408.0,  # Co
    373.0,  # Ni
    253.0,  # Cu
    284.0,  # Zn
    498.0,  # Ga
    354.0,  # Ge
    246.0,  # As
    210.0,  # Se
    162.0,  # Br
    129.6,  # Kr
    4691.0,  # Rb
    3170.0,  # Sr
    1968.58,  # Y
    1677.91,  # Zr
    1263.61,  # Nb
    1028.73,  # Mo
    1390.87,  # Tc
    609.754,  # Ru
    469.0,  # Rh
    157.5,  # Pd
    339.0,  # Ag
    452.0,  # Cd
    707.046,  # In
    587.417,  # Sn
    459.322,  # Sb
    396.0,  # Te
    385.0,  # I
    285.9,  # Xe
    6582.08,  # Cs
    5727.0,  # Ba
    3884.5,  # La
    3708.33,  # Ce
    3911.84,  # Pr
    3908.75,  # Nd
    3847.68,  # Pm
    3708.69,  # Sm
    3511.71,  # Eu
    2781.53,  # Gd
    3124.41,  # Tb
    2984.29,  # Dy
    2839.95,  # Ho
    2724.12,  # Er
    2576.78,  # Tm
    2387.53,  # Yb
    2371.8,  # Lu
    1274.8,  # Hf
    1019.92,  # Ta
    847.93,  # W
    710.2,  # Re
    596.67,  # Os
    359.1,  # Ir
    347.1,  # Pt
    298.0,  # Au
    392.0,  # Hg
    717.44,  # Tl
    697.0,  # Pb
    571.0,  # Bi
    530.92,  # Po
    457.53,  # At
    420.6,  # 390.63,  #Rn
    4224.44,  # Fr
    4851.32,  # Ra
    3604.41,  # Ac
    4047.54,  # Th
    2367.42,  # Pa
    1877.1,  # U
    2507.88,  # Np
    2117.27,  # Pu
    2110.98,  # Am
    2403.22,  # Cm
    1985.82,  # Bk
    1891.92,  # Cf
    1851.1,  # Es
    1787.07,  # Fm
    1701.0,  # Md
    1578.18,  # No
    1.0,  # Dummy
])

# free atom polarizabilities in bohr**3
POLARIZABILITIES = np.ones(len(PERIODIC_TABLE),dtype=float) #[1.0] * len(PERIODIC_TABLE)
POLARIZABILITIES[1] = 4.5
POLARIZABILITIES[2] = 1.38
POLARIZABILITIES[3] = 164
POLARIZABILITIES[4] = 37.7010
POLARIZABILITIES[5] = 20.5010
POLARIZABILITIES[6] = 11.3020
POLARIZABILITIES[7] = 7.4020
POLARIZABILITIES[8] = 5.3020
POLARIZABILITIES[9] = 3.74080
POLARIZABILITIES[10] = 2.66
POLARIZABILITIES[11] = 163.010
POLARIZABILITIES[12] = 71.2040
POLARIZABILITIES[13] = 57.8010
POLARIZABILITIES[14] = 37.3070
POLARIZABILITIES[15] = 25.010
POLARIZABILITIES[16] = 19.4010
POLARIZABILITIES[17] = 14.6020
POLARIZABILITIES[18] = 11.1
POLARIZABILITIES[19] = 290.010
POLARIZABILITIES[20] = 161.040
POLARIZABILITIES[21] = 9710
POLARIZABILITIES[22] = 10010
POLARIZABILITIES[23] = 8710
POLARIZABILITIES[24] = 8312
POLARIZABILITIES[25] = 68.090
POLARIZABILITIES[26] = 62.040
POLARIZABILITIES[27] = 55.040
POLARIZABILITIES[28] = 49.030
POLARIZABILITIES[29] = 47.010
POLARIZABILITIES[30] = 38.7030
POLARIZABILITIES[31] = 50.030
POLARIZABILITIES[32] = 40.010
POLARIZABILITIES[33] = 30.010
POLARIZABILITIES[34] = 29.010
POLARIZABILITIES[35] = 21.010
POLARIZABILITIES[36] = 16.8
POLARIZABILITIES[37] = 320.010
POLARIZABILITIES[38] = 197.010
POLARIZABILITIES[39] = 16212
POLARIZABILITIES[40] = 11213
POLARIZABILITIES[41] = 98.080
POLARIZABILITIES[42] = 87.060
POLARIZABILITIES[43] = 7910
POLARIZABILITIES[44] = 7210
POLARIZABILITIES[45] = 6610
POLARIZABILITIES[46] = 26.1010
POLARIZABILITIES[47] = 55.080
POLARIZABILITIES[48] = 46.020
POLARIZABILITIES[49] = 65.040
POLARIZABILITIES[50] = 53.060
POLARIZABILITIES[51] = 43.020
POLARIZABILITIES[52] = 38.040
POLARIZABILITIES[53] = 32.9010
POLARIZABILITIES[54] = 27.3020
POLARIZABILITIES[55] = 401.010
POLARIZABILITIES[56] = 27210
POLARIZABILITIES[57] = 21520
POLARIZABILITIES[58] = 20520
POLARIZABILITIES[59] = 21620
POLARIZABILITIES[60] = 20820
POLARIZABILITIES[61] = 20020
POLARIZABILITIES[62] = 19220
POLARIZABILITIES[63] = 18420
POLARIZABILITIES[64] = 15820
POLARIZABILITIES[65] = 17020
POLARIZABILITIES[66] = 16515
POLARIZABILITIES[67] = 15610
POLARIZABILITIES[68] = 15015
POLARIZABILITIES[69] = 14415
POLARIZABILITIES[70] = 139.060
POLARIZABILITIES[71] = 137.070
POLARIZABILITIES[72] = 103.060
POLARIZABILITIES[73] = 7420
POLARIZABILITIES[74] = 6815
POLARIZABILITIES[75] = 62.030
POLARIZABILITIES[76] = 57.030
POLARIZABILITIES[77] = 54.070
POLARIZABILITIES[78] = 48.040
POLARIZABILITIES[79] = 36.030
POLARIZABILITIES[80] = 33.9040
POLARIZABILITIES[81] = 50.020
POLARIZABILITIES[82] = 47.030
POLARIZABILITIES[83] = 48.040
POLARIZABILITIES[84] = 44.040
POLARIZABILITIES[85] = 42.040
POLARIZABILITIES[86] = 35.020
POLARIZABILITIES[87] = 318.020
POLARIZABILITIES[88] = 246.040
POLARIZABILITIES[89] = 20312
POLARIZABILITIES[90] = 21754
POLARIZABILITIES[91] = 15420
POLARIZABILITIES[92] = 12917
POLARIZABILITIES[93] = 15120
POLARIZABILITIES[94] = 13220
POLARIZABILITIES[95] = 13125
POLARIZABILITIES[96] = 14425
POLARIZABILITIES[97] = 12525
POLARIZABILITIES[98] = 12220
POLARIZABILITIES[99] = 11820
POLARIZABILITIES[100] = 11320
POLARIZABILITIES[101] = 10920
POLARIZABILITIES[102] = 110.060
POLARIZABILITIES[103] = 32020
POLARIZABILITIES[104] = 11210
POLARIZABILITIES[105] = 42.040
POLARIZABILITIES[106] = 40.040
POLARIZABILITIES[107] = 38.040
POLARIZABILITIES[108] = 36.040
POLARIZABILITIES[109] = 34.030
POLARIZABILITIES[110] = 32.030
POLARIZABILITIES[111] = 32.060
POLARIZABILITIES[112] = 28.020
POLARIZABILITIES[113] = 29.020
POLARIZABILITIES[114] = 31.040
POLARIZABILITIES[115] = 7120
POLARIZABILITIES[116] = np.nan
POLARIZABILITIES[117] = 7615
POLARIZABILITIES[118] = 58.060

# POLARIZABILITIES = [
#    1.0,  #Dummy
#    4.5,  #H
#    1.38,  #He
#    164.2,  #Li
#    38.0,  #Be
#    21.0,  #B
#    12.0,  #C
#    7.4,  #N
#    5.4,  #O
#    3.8,  #F
#    2.67,  #Ne
#    162.7,  #Na
#    71.0,  #Mg
#    60.0,  #Al
#    37.0,  #Si
#    25.0,  #P
#    19.6,  #S
#    15.0,  #Cl
#    11.1,  #Ar
#    292.9,  #K
#    160.0,  #Ca
#    120.0,  #Sc
#    98.0,  #Ti
#    84.0,  #V
#    78.0,  #Cr
#    63.0,  #Mn
#    56.0,  #Fe
#    50.0,  #Co
#    48.0,  #Ni
#    42.0,  #Cu
#    40.0,  #Zn
#    60.0,  #Ga
#    41.0,  #Ge
#    29.0,  #As
#    25.0,  #Se
#    20.0,  #Br
#    16.8,  #Kr
#    319.2,  #Rb
#    199.0,  #Sr
#    126.737,  #Y
#    119.97,  #Zr
#    101.603,  #Nb
#    88.4225785,  #Mo
#    80.083,  #Tc
#    65.895,  #Ru
#    56.1,  #Rh
#    23.68,  #Pd
#    50.6,  #Ag
#    39.7,  #Cd
#    70.22,  #In
#    55.95,  #Sn
#    43.67197,  #Sb
#    37.65,  #Te
#    35.0,  #I
#    27.3,  #Xe
#    427.12,  #Cs
#    275.0,  #Ba
#    213.7,  #La
#    204.7,  #Ce
#    215.8,  #Pr
#    208.4,  #Nd
#    200.2,  #Pm
#    192.1,  #Sm
#    184.2,  #Eu
#    158.3,  #Gd
#    169.5,  #Tb
#    164.64,  #Dy
#    156.3,  #Ho
#    150.2,  #Er
#    144.3,  #Tm
#    138.9,  #Yb
#    137.2,  #Lu
#    99.52,  #Hf
#    82.53,  #Ta
#    71.041,  #W
#    63.04,  #Re
#    55.055,  #Os
#    42.51,  #Ir
#    39.68,  #Pt
#    36.5,  #Au
#    33.9,  #Hg
#    69.92,  #Tl
#    61.8,  #Pb
#    49.02,  #Bi
#    45.013,  #Po
#    38.93,  #At
#    33.54,  #Rn
#    317.8,  #Fr
#    246.2,  #Ra
#    203.3,  #Ac
#    217.0,  #Th
#    154.4,  #Pa
#    127.8,  #U
#    150.5,  #Np
#    132.2,  #Pu
#    131.2,  #Am
#    143.6,  #Cm
#    125.3,  #Bk
#    121.5,  #Cf
#    117.5,  #Es
#    113.4,  #Fm
#    109.4,  #Md
#    105.4,  #No
#    1.0,  #Dummy
# ]

# VDW radii in bohr from Charry, Tkatchenko, J. Chem. Theory Comput. 2024, 20, 17, 7469–7478
VDW_RADII = np.ones(len(PERIODIC_TABLE),dtype=float) #[1.0] * len(PERIODIC_TABLE)
VDW_RADII[1] = 3.164697
VDW_RADII[2] = 2.672999
VDW_RADII[3] = 5.289595
VDW_RADII[4] = 4.287516
VDW_RADII[5] = 3.930227
VDW_RADII[6] = 3.609691
VDW_RADII[7] = 3.39813
VDW_RADII[8] = 3.24017
VDW_RADII[9] = 3.082294
VDW_RADII[10] = 2.935712
VDW_RADII[11] = 5.285046
VDW_RADII[12] = 4.695238
VDW_RADII[13] = 4.557411
VDW_RADII[14] = 4.28111
VDW_RADII[15] = 4.04323
VDW_RADII[16] = 3.899329
VDW_RADII[17] = 3.744173
VDW_RADII[18] = 3.600377
VDW_RADII[19] = 5.738428
VDW_RADII[20] = 5.27619
VDW_RADII[21] = 4.90772
VDW_RADII[22] = 4.92970
VDW_RADII[23] = 4.83279
VDW_RADII[24] = 4.79999
VDW_RADII[25] = 4.66488
VDW_RADII[26] = 4.60342
VDW_RADII[27] = 4.52547
VDW_RADII[28] = 4.45139
VDW_RADII[29] = 4.42513
VDW_RADII[30] = 4.303648
VDW_RADII[31] = 4.46438
VDW_RADII[32] = 4.32415
VDW_RADII[33] = 4.15020
VDW_RADII[34] = 4.13020
VDW_RADII[35] = 3.94427
VDW_RADII[36] = 3.819973
VDW_RADII[37] = 5.819626
VDW_RADII[38] = 5.430039
VDW_RADII[39] = 5.28056
VDW_RADII[40] = 5.00983
VDW_RADII[41] = 4.91457
VDW_RADII[42] = 4.83248
VDW_RADII[43] = 4.76586
VDW_RADII[44] = 4.70393
VDW_RADII[45] = 4.6410
VDW_RADII[46] = 4.068122
VDW_RADII[47] = 4.52594
VDW_RADII[48] = 4.41127
VDW_RADII[49] = 4.63541
VDW_RADII[50] = 4.50173
VDW_RADII[51] = 4.36929
VDW_RADII[52] = 4.29265
VDW_RADII[53] = 4.204918
VDW_RADII[54] = 4.094343
VDW_RADII[55] = 6.010321
VDW_RADII[56] = 5.68630
VDW_RADII[57] = 5.49873
VDW_RADII[58] = 5.46176
VDW_RADII[59] = 5.50273
VDW_RADII[60] = 5.47275
VDW_RADII[61] = 5.44278
VDW_RADII[62] = 5.41081
VDW_RADII[63] = 5.37783
VDW_RADII[64] = 5.26295
VDW_RADII[65] = 5.31789
VDW_RADII[66] = 5.29469
VDW_RADII[67] = 5.25248
VDW_RADII[68] = 5.22375
VDW_RADII[69] = 5.19277
VDW_RADII[70] = 5.16632
VDW_RADII[71] = 5.15538
VDW_RADII[72] = 4.95041
VDW_RADII[73] = 4.7218
VDW_RADII[74] = 4.6615
VDW_RADII[75] = 4.60332
VDW_RADII[76] = 4.54834
VDW_RADII[77] = 4.51384
VDW_RADII[78] = 4.43853
VDW_RADII[79] = 4.25951
VDW_RADII[80] = 4.223071
VDW_RADII[81] = 4.46426
VDW_RADII[82] = 4.42540
VDW_RADII[83] = 4.43853
VDW_RADII[84] = 4.38357
VDW_RADII[85] = 4.35459
VDW_RADII[86] = 4.24235
VDW_RADII[87] = 5.814452
VDW_RADII[88] = 5.60513
VDW_RADII[89] = 5.45346
VDW_RADII[90] = 5.5120
VDW_RADII[91] = 5.24297
VDW_RADII[92] = 5.11196
VDW_RADII[93] = 5.22899
VDW_RADII[94] = 5.1311
VDW_RADII[95] = 5.1214
VDW_RADII[96] = 5.1913
VDW_RADII[97] = 5.0915
VDW_RADII[98] = 5.0712
VDW_RADII[99] = 5.0512
VDW_RADII[100] = 5.0213
VDW_RADII[101] = 4.9913
VDW_RADII[102] = 4.99639
VDW_RADII[103] = 5.82052
VDW_RADII[104] = 5.00964
VDW_RADII[105] = 4.35459
VDW_RADII[106] = 4.32462
VDW_RADII[107] = 4.29265
VDW_RADII[108] = 4.25968
VDW_RADII[109] = 4.22553
VDW_RADII[110] = 4.18856
VDW_RADII[111] = 4.1911
VDW_RADII[112] = 4.10942
VDW_RADII[113] = 4.13041
VDW_RADII[114] = 4.16977
VDW_RADII[115] = 4.6919
VDW_RADII[116] = np.nan
VDW_RADII[117] = 4.7413
VDW_RADII[118] = 4.56067


PAULING_ELECTRONEGATIVITY = np.zeros(len(PERIODIC_TABLE),dtype=float) #[0.0] * len(PERIODIC_TABLE)
PAULING_ELECTRONEGATIVITY[1] = 2.20
PAULING_ELECTRONEGATIVITY[2] = 4.42  # -1. organov
PAULING_ELECTRONEGATIVITY[3] = 0.98
PAULING_ELECTRONEGATIVITY[4] = 1.57
PAULING_ELECTRONEGATIVITY[5] = 2.04
PAULING_ELECTRONEGATIVITY[6] = 2.55
PAULING_ELECTRONEGATIVITY[7] = 3.04
PAULING_ELECTRONEGATIVITY[8] = 3.44
PAULING_ELECTRONEGATIVITY[9] = 3.98
PAULING_ELECTRONEGATIVITY[10] = 4.44  # -1 organov
PAULING_ELECTRONEGATIVITY[11] = 0.93
PAULING_ELECTRONEGATIVITY[12] = 1.31
PAULING_ELECTRONEGATIVITY[13] = 1.61
PAULING_ELECTRONEGATIVITY[14] = 1.90
PAULING_ELECTRONEGATIVITY[15] = 2.19
PAULING_ELECTRONEGATIVITY[16] = 2.58
PAULING_ELECTRONEGATIVITY[17] = 3.16
PAULING_ELECTRONEGATIVITY[18] = 3.57  # -1 organov
PAULING_ELECTRONEGATIVITY[19] = 0.82
PAULING_ELECTRONEGATIVITY[20] = 1.00
PAULING_ELECTRONEGATIVITY[21] = 1.36
PAULING_ELECTRONEGATIVITY[22] = 1.54
PAULING_ELECTRONEGATIVITY[23] = 1.63
PAULING_ELECTRONEGATIVITY[24] = 1.66
PAULING_ELECTRONEGATIVITY[25] = 1.55
PAULING_ELECTRONEGATIVITY[26] = 1.83
PAULING_ELECTRONEGATIVITY[27] = 1.88
PAULING_ELECTRONEGATIVITY[28] = 1.91
PAULING_ELECTRONEGATIVITY[29] = 1.90
PAULING_ELECTRONEGATIVITY[30] = 1.65
PAULING_ELECTRONEGATIVITY[31] = 1.81
PAULING_ELECTRONEGATIVITY[32] = 2.01
PAULING_ELECTRONEGATIVITY[33] = 2.18
PAULING_ELECTRONEGATIVITY[34] = 2.55
PAULING_ELECTRONEGATIVITY[35] = 2.96
PAULING_ELECTRONEGATIVITY[36] = 3.37  # -1 organov
PAULING_ELECTRONEGATIVITY[37] = 0.82
PAULING_ELECTRONEGATIVITY[38] = 0.95
PAULING_ELECTRONEGATIVITY[39] = 1.22
PAULING_ELECTRONEGATIVITY[40] = 1.33
PAULING_ELECTRONEGATIVITY[41] = 1.60
PAULING_ELECTRONEGATIVITY[42] = 2.16
PAULING_ELECTRONEGATIVITY[43] = 1.90
PAULING_ELECTRONEGATIVITY[44] = 2.20
PAULING_ELECTRONEGATIVITY[45] = 2.28
PAULING_ELECTRONEGATIVITY[46] = 2.20
PAULING_ELECTRONEGATIVITY[47] = 1.93
PAULING_ELECTRONEGATIVITY[48] = 1.69
PAULING_ELECTRONEGATIVITY[49] = 1.78
PAULING_ELECTRONEGATIVITY[50] = 1.96
PAULING_ELECTRONEGATIVITY[51] = 2.05
PAULING_ELECTRONEGATIVITY[52] = 2.10
PAULING_ELECTRONEGATIVITY[53] = 2.66
PAULING_ELECTRONEGATIVITY[54] = 3.12  # -1 organov

SJS_COORDINATES = [[0] * 4] * len(PERIODIC_TABLE)
SJS_COORDINATES[1] = [0, 1, 1, 0]
SJS_COORDINATES[2] = [0, 1, -1, 0]
SJS_COORDINATES[3] = [0, 2, 1, 0]
SJS_COORDINATES[4] = [0, 2, -1, 0]
SJS_COORDINATES[5] = [1, 3, 1, -1]
SJS_COORDINATES[6] = [1, 3, 2, 0]
SJS_COORDINATES[7] = [1, 3, 1, 1]
SJS_COORDINATES[8] = [1, 3, -1, -1]
SJS_COORDINATES[9] = [1, 3, -2, 0]
SJS_COORDINATES[10] = [1, 3, -1, 1]
SJS_COORDINATES[11] = [0, 3, 1, 0]
SJS_COORDINATES[12] = [0, 3, -1, 0]
SJS_COORDINATES[13] = [1, 4, 1, -1]
SJS_COORDINATES[14] = [1, 4, 2, 0]
SJS_COORDINATES[15] = [1, 4, 1, 1]
SJS_COORDINATES[16] = [1, 4, -1, -1]
SJS_COORDINATES[17] = [1, 4, -2, 0]
SJS_COORDINATES[18] = [1, 4, -1, 1]
SJS_COORDINATES[19] = [0, 4, 1, 0]
SJS_COORDINATES[20] = [0, 4, -1, 0]
SJS_COORDINATES[21] = [2, 5, 1, -2]
SJS_COORDINATES[22] = [2, 5, 2, -1]
SJS_COORDINATES[23] = [2, 5, 3, 0]
SJS_COORDINATES[24] = [2, 5, 2, 1]
SJS_COORDINATES[25] = [2, 5, 1, 2]
SJS_COORDINATES[26] = [2, 5, -1, -2]
SJS_COORDINATES[27] = [2, 5, -2, -1]
SJS_COORDINATES[28] = [2, 5, -3, 0]
SJS_COORDINATES[29] = [2, 5, -2, 1]
SJS_COORDINATES[30] = [2, 5, -1, 2]
SJS_COORDINATES[31] = [1, 5, 1, -1]
SJS_COORDINATES[32] = [1, 5, 2, 0]
SJS_COORDINATES[33] = [1, 5, 1, 1]
SJS_COORDINATES[34] = [1, 5, -1, -1]
SJS_COORDINATES[35] = [1, 5, -2, 0]
SJS_COORDINATES[36] = [1, 5, -1, 1]
SJS_COORDINATES[37] = [0, 5, 1, 0]
SJS_COORDINATES[38] = [0, 5, -1, 0]
SJS_COORDINATES[39] = [2, 6, 1, -2]
SJS_COORDINATES[40] = [2, 6, 2, -1]
SJS_COORDINATES[41] = [2, 6, 3, 0]
SJS_COORDINATES[42] = [2, 6, 2, 1]
SJS_COORDINATES[43] = [2, 6, 1, 2]
SJS_COORDINATES[44] = [2, 6, -1, -2]
SJS_COORDINATES[45] = [2, 6, -2, -1]
SJS_COORDINATES[46] = [2, 6, -3, 0]
SJS_COORDINATES[47] = [2, 6, -2, 1]
SJS_COORDINATES[48] = [2, 6, -1, 2]
SJS_COORDINATES[49] = [1, 6, 1, -1]
SJS_COORDINATES[50] = [1, 6, 2, 0]
SJS_COORDINATES[51] = [1, 6, 1, 1]
SJS_COORDINATES[52] = [1, 6, -1, -1]
SJS_COORDINATES[53] = [1, 6, -2, 0]
SJS_COORDINATES[54] = [1, 6, -1, 1]
SJS_COORDINATES[55] = [0, 6, 1, 0]
SJS_COORDINATES[56] = [0, 6, -1, 0]
SJS_COORDINATES[57] = [2, 7, 1, -2]
SJS_COORDINATES[58] = [3, 7, 1, -3]
SJS_COORDINATES[59] = [3, 7, 2, -2]
SJS_COORDINATES[60] = [3, 7, 3, -1]
SJS_COORDINATES[61] = [3, 7, 4, 0]
SJS_COORDINATES[62] = [3, 7, 3, 1]
SJS_COORDINATES[63] = [3, 7, 2, 2]
SJS_COORDINATES[64] = [3, 7, 1, 3]
SJS_COORDINATES[65] = [3, 7, -1, -3]
SJS_COORDINATES[66] = [3, 7, -2, -2]
SJS_COORDINATES[67] = [3, 7, -3, -1]
SJS_COORDINATES[68] = [3, 7, -4, 0]
SJS_COORDINATES[69] = [3, 7, -3, 1]
SJS_COORDINATES[70] = [3, 7, -2, 2]
SJS_COORDINATES[71] = [3, 7, -1, 3]
SJS_COORDINATES[72] = [2, 7, 2, -1]
SJS_COORDINATES[73] = [2, 7, 3, 0]
SJS_COORDINATES[74] = [2, 7, 2, 1]
SJS_COORDINATES[75] = [2, 7, 1, 2]
SJS_COORDINATES[76] = [2, 7, -1, -2]
SJS_COORDINATES[77] = [2, 7, -2, -1]
SJS_COORDINATES[78] = [2, 7, -3, 0]
SJS_COORDINATES[79] = [2, 7, -2, 1]
SJS_COORDINATES[80] = [2, 7, -1, 2]
SJS_COORDINATES[81] = [1, 7, 1, -1]
SJS_COORDINATES[82] = [1, 7, 2, 0]
SJS_COORDINATES[83] = [1, 7, 1, 1]
SJS_COORDINATES[84] = [1, 7, -1, -1]
SJS_COORDINATES[85] = [1, 7, -2, 0]
SJS_COORDINATES[86] = [1, 7, -1, 1]
SJS_COORDINATES[87] = [0, 7, 1, 0]
SJS_COORDINATES[88] = [0, 7, -1, 0]
SJS_COORDINATES[89] = [2, 8, 1, -2]
SJS_COORDINATES[90] = [3, 8, 1, -3]
SJS_COORDINATES[91] = [3, 8, 2, -2]
SJS_COORDINATES[92] = [3, 8, 3, -1]
SJS_COORDINATES[93] = [3, 8, 4, 0]
SJS_COORDINATES[94] = [3, 8, 3, 1]
SJS_COORDINATES[95] = [3, 8, 2, 2]
SJS_COORDINATES[96] = [3, 8, 1, 3]
SJS_COORDINATES[97] = [3, 8, -1, -3]
SJS_COORDINATES[98] = [3, 8, -2, -2]
SJS_COORDINATES[99] = [3, 8, -3, -1]
SJS_COORDINATES[100] = [3, 8, -4, 0]
SJS_COORDINATES[101] = [3, 8, -3, 1]
SJS_COORDINATES[102] = [3, 8, -2, 2]
SJS_COORDINATES[103] = [3, 8, -1, 3]
SJS_COORDINATES[104] = [2, 8, 2, -1]
SJS_COORDINATES[105] = [2, 8, 3, 0]
SJS_COORDINATES[106] = [2, 8, 2, 1]
SJS_COORDINATES[107] = [2, 8, 1, 2]
SJS_COORDINATES[108] = [2, 8, -1, -2]
SJS_COORDINATES[109] = [2, 8, -2, -1]
SJS_COORDINATES[110] = [2, 8, -3, 0]
SJS_COORDINATES[111] = [2, 8, -2, 1]
SJS_COORDINATES[112] = [2, 8, -1, 2]
SJS_COORDINATES[113] = [1, 8, 1, -1]
SJS_COORDINATES[114] = [1, 8, 2, 0]
SJS_COORDINATES[115] = [1, 8, 1, 1]
SJS_COORDINATES[116] = [1, 8, -1, -1]
SJS_COORDINATES[117] = [1, 8, -2, 0]
SJS_COORDINATES[118] = [1, 8, -1, 1]
SJS_COORDINATES = np.array(SJS_COORDINATES,dtype=int)

ATOMIC_IONIZATION_ENERGY = 1.e-5*np.ones(len(PERIODIC_TABLE),dtype=float) #[1.e-5] * len(PERIODIC_TABLE)
ATOMIC_IONIZATION_ENERGY[1] = 1312.0
ATOMIC_IONIZATION_ENERGY[2] = 2372.3
ATOMIC_IONIZATION_ENERGY[3] = 520.2
ATOMIC_IONIZATION_ENERGY[4] = 899.5
ATOMIC_IONIZATION_ENERGY[5] = 800.6
ATOMIC_IONIZATION_ENERGY[6] = 1086.5
ATOMIC_IONIZATION_ENERGY[7] = 1402.3
ATOMIC_IONIZATION_ENERGY[8] = 1313.9
ATOMIC_IONIZATION_ENERGY[9] = 1681.0
ATOMIC_IONIZATION_ENERGY[10] = 2080.7
ATOMIC_IONIZATION_ENERGY[11] = 495.8
ATOMIC_IONIZATION_ENERGY[12] = 737.7
ATOMIC_IONIZATION_ENERGY[13] = 577.5
ATOMIC_IONIZATION_ENERGY[14] = 786.5
ATOMIC_IONIZATION_ENERGY[15] = 1011.8
ATOMIC_IONIZATION_ENERGY[16] = 999.6
ATOMIC_IONIZATION_ENERGY[17] = 1251.2
ATOMIC_IONIZATION_ENERGY[18] = 1520.6
ATOMIC_IONIZATION_ENERGY[19] = 418.8
ATOMIC_IONIZATION_ENERGY[20] = 589.8
ATOMIC_IONIZATION_ENERGY[21] = 633.1
ATOMIC_IONIZATION_ENERGY[22] = 658.8
ATOMIC_IONIZATION_ENERGY[23] = 650.9
ATOMIC_IONIZATION_ENERGY[24] = 652.9
ATOMIC_IONIZATION_ENERGY[25] = 717.3
ATOMIC_IONIZATION_ENERGY[26] = 762.5
ATOMIC_IONIZATION_ENERGY[27] = 760.4
ATOMIC_IONIZATION_ENERGY[28] = 737.1
ATOMIC_IONIZATION_ENERGY[29] = 745.5
ATOMIC_IONIZATION_ENERGY[30] = 906.4
ATOMIC_IONIZATION_ENERGY[31] = 578.8
ATOMIC_IONIZATION_ENERGY[32] = 762.0
ATOMIC_IONIZATION_ENERGY[33] = 947.0
ATOMIC_IONIZATION_ENERGY[34] = 941.0
ATOMIC_IONIZATION_ENERGY[35] = 1139.9
ATOMIC_IONIZATION_ENERGY[36] = 1350.8
ATOMIC_IONIZATION_ENERGY[37] = 403.0
ATOMIC_IONIZATION_ENERGY[38] = 549.5
ATOMIC_IONIZATION_ENERGY[39] = 600.0
ATOMIC_IONIZATION_ENERGY[40] = 640.1
ATOMIC_IONIZATION_ENERGY[41] = 652.1
ATOMIC_IONIZATION_ENERGY[42] = 684.3
ATOMIC_IONIZATION_ENERGY[43] = 686.9
ATOMIC_IONIZATION_ENERGY[44] = 710.2
ATOMIC_IONIZATION_ENERGY[45] = 719.7
ATOMIC_IONIZATION_ENERGY[46] = 804.4
ATOMIC_IONIZATION_ENERGY[47] = 731.0
ATOMIC_IONIZATION_ENERGY[48] = 867.8
ATOMIC_IONIZATION_ENERGY[49] = 558.3
ATOMIC_IONIZATION_ENERGY[50] = 708.6
ATOMIC_IONIZATION_ENERGY[51] = 834.0
ATOMIC_IONIZATION_ENERGY[52] = 869.3
ATOMIC_IONIZATION_ENERGY[53] = 1008.4
ATOMIC_IONIZATION_ENERGY[54] = 1170.4
ATOMIC_IONIZATION_ENERGY[55] = 375.7
ATOMIC_IONIZATION_ENERGY[56] = 502.9
ATOMIC_IONIZATION_ENERGY[57] = 538.1
ATOMIC_IONIZATION_ENERGY[58] = 534.6
ATOMIC_IONIZATION_ENERGY[59] = 527.0
ATOMIC_IONIZATION_ENERGY[60] = 533.1
ATOMIC_IONIZATION_ENERGY[61] = 540.0
ATOMIC_IONIZATION_ENERGY[62] = 545.1
ATOMIC_IONIZATION_ENERGY[63] = 547.1
ATOMIC_IONIZATION_ENERGY[64] = 593.4
ATOMIC_IONIZATION_ENERGY[65] = 565.8
ATOMIC_IONIZATION_ENERGY[66] = 573.0
ATOMIC_IONIZATION_ENERGY[67] = 581.0
ATOMIC_IONIZATION_ENERGY[68] = 589.3
ATOMIC_IONIZATION_ENERGY[69] = 596.7
ATOMIC_IONIZATION_ENERGY[70] = 603.4
ATOMIC_IONIZATION_ENERGY[71] = 523.5
ATOMIC_IONIZATION_ENERGY[72] = 658.5
ATOMIC_IONIZATION_ENERGY[73] = 761.0
ATOMIC_IONIZATION_ENERGY[74] = 770.0
ATOMIC_IONIZATION_ENERGY[75] = 760.0
ATOMIC_IONIZATION_ENERGY[76] = 840.0
ATOMIC_IONIZATION_ENERGY[77] = 880.0
ATOMIC_IONIZATION_ENERGY[78] = 870.0
ATOMIC_IONIZATION_ENERGY[79] = 890.1
ATOMIC_IONIZATION_ENERGY[80] = 1007.1
ATOMIC_IONIZATION_ENERGY[81] = 589.4
ATOMIC_IONIZATION_ENERGY[82] = 715.6
ATOMIC_IONIZATION_ENERGY[83] = 703.0
ATOMIC_IONIZATION_ENERGY[84] = 812.1
ATOMIC_IONIZATION_ENERGY[85] = 899.0
ATOMIC_IONIZATION_ENERGY[86] = 1037.0
ATOMIC_IONIZATION_ENERGY[87] = 380.0
ATOMIC_IONIZATION_ENERGY[88] = 509.3
ATOMIC_IONIZATION_ENERGY[89] = 499.0
ATOMIC_IONIZATION_ENERGY[90] = 587.0
ATOMIC_IONIZATION_ENERGY[91] = 568.0
ATOMIC_IONIZATION_ENERGY[92] = 597.6
ATOMIC_IONIZATION_ENERGY[93] = 604.5
ATOMIC_IONIZATION_ENERGY[94] = 584.7
ATOMIC_IONIZATION_ENERGY[95] = 578.0
ATOMIC_IONIZATION_ENERGY[96] = 581.0
ATOMIC_IONIZATION_ENERGY[97] = 601.0
ATOMIC_IONIZATION_ENERGY[98] = 608.0
ATOMIC_IONIZATION_ENERGY[99] = 619.0
ATOMIC_IONIZATION_ENERGY[100] = 627.0
ATOMIC_IONIZATION_ENERGY[101] = 635.0
ATOMIC_IONIZATION_ENERGY[102] = 642.0
ATOMIC_IONIZATION_ENERGY[103] = 470.0
ATOMIC_IONIZATION_ENERGY[104] = 580.0

ATOMIC_IONIZATION_ENERGY = ATOMIC_IONIZATION_ENERGY / au.KJPERMOL


ATOMIC_ELECTRON_AFFINITY = 1.e-5*np.ones(len(PERIODIC_TABLE),dtype=float) #[1.e-5] * len(PERIODIC_TABLE)
ATOMIC_ELECTRON_AFFINITY[1] = 72.769
ATOMIC_ELECTRON_AFFINITY[2] = -48
ATOMIC_ELECTRON_AFFINITY[3] = 59.632
ATOMIC_ELECTRON_AFFINITY[4] = -48
ATOMIC_ELECTRON_AFFINITY[5] = 26.989
ATOMIC_ELECTRON_AFFINITY[6] = 121.776
ATOMIC_ELECTRON_AFFINITY[7] = -6.8
ATOMIC_ELECTRON_AFFINITY[8] = 140.975
ATOMIC_ELECTRON_AFFINITY[9] = 328.164
ATOMIC_ELECTRON_AFFINITY[10] = -116
ATOMIC_ELECTRON_AFFINITY[11] = 52.867
ATOMIC_ELECTRON_AFFINITY[12] = -40
ATOMIC_ELECTRON_AFFINITY[13] = 41.762
ATOMIC_ELECTRON_AFFINITY[14] = 134.068
ATOMIC_ELECTRON_AFFINITY[15] = 72.037
ATOMIC_ELECTRON_AFFINITY[16] = 200.410
ATOMIC_ELECTRON_AFFINITY[17] = 348.575
ATOMIC_ELECTRON_AFFINITY[18] = -96
ATOMIC_ELECTRON_AFFINITY[19] = 48.383
ATOMIC_ELECTRON_AFFINITY[20] = 2.37
ATOMIC_ELECTRON_AFFINITY[21] = 17.307
ATOMIC_ELECTRON_AFFINITY[22] = 7.289
ATOMIC_ELECTRON_AFFINITY[23] = 50.911
ATOMIC_ELECTRON_AFFINITY[24] = 65.217
ATOMIC_ELECTRON_AFFINITY[25] = -50
ATOMIC_ELECTRON_AFFINITY[26] = 14.785
ATOMIC_ELECTRON_AFFINITY[27] = 63.897
ATOMIC_ELECTRON_AFFINITY[28] = 111.65
ATOMIC_ELECTRON_AFFINITY[29] = 119.235
ATOMIC_ELECTRON_AFFINITY[30] = -58
ATOMIC_ELECTRON_AFFINITY[31] = 29.058
ATOMIC_ELECTRON_AFFINITY[32] = 118.935
ATOMIC_ELECTRON_AFFINITY[33] = 77.65
ATOMIC_ELECTRON_AFFINITY[34] = 194.958
ATOMIC_ELECTRON_AFFINITY[35] = 324.536
ATOMIC_ELECTRON_AFFINITY[36] = -96
ATOMIC_ELECTRON_AFFINITY[37] = 46.884
ATOMIC_ELECTRON_AFFINITY[38] = 5.023
ATOMIC_ELECTRON_AFFINITY[39] = 30.035
ATOMIC_ELECTRON_AFFINITY[40] = 41.806
ATOMIC_ELECTRON_AFFINITY[41] = 88.516
ATOMIC_ELECTRON_AFFINITY[42] = 72.097
ATOMIC_ELECTRON_AFFINITY[43] = 53
ATOMIC_ELECTRON_AFFINITY[44] = 100.950
ATOMIC_ELECTRON_AFFINITY[45] = 110.27
ATOMIC_ELECTRON_AFFINITY[46] = 54.24
ATOMIC_ELECTRON_AFFINITY[47] = 125.862
ATOMIC_ELECTRON_AFFINITY[48] = -68
ATOMIC_ELECTRON_AFFINITY[49] = 37.043
ATOMIC_ELECTRON_AFFINITY[50] = 107.298
ATOMIC_ELECTRON_AFFINITY[51] = 101.059
ATOMIC_ELECTRON_AFFINITY[52] = 190.161
ATOMIC_ELECTRON_AFFINITY[53] = 295.153
ATOMIC_ELECTRON_AFFINITY[54] = -77
ATOMIC_ELECTRON_AFFINITY[55] = 45.5023
ATOMIC_ELECTRON_AFFINITY[56] = 13.954
ATOMIC_ELECTRON_AFFINITY[57] = 53.795
ATOMIC_ELECTRON_AFFINITY[58] = 57.906
ATOMIC_ELECTRON_AFFINITY[59] = 10.539
ATOMIC_ELECTRON_AFFINITY[60] = 9.406
ATOMIC_ELECTRON_AFFINITY[61] = 12.45
ATOMIC_ELECTRON_AFFINITY[62] = 15.63
ATOMIC_ELECTRON_AFFINITY[63] = 11.2
ATOMIC_ELECTRON_AFFINITY[64] = 20.5
ATOMIC_ELECTRON_AFFINITY[65] = 12.67
ATOMIC_ELECTRON_AFFINITY[66] = 1.45
ATOMIC_ELECTRON_AFFINITY[67] = 32.61
ATOMIC_ELECTRON_AFFINITY[68] = 30.10
ATOMIC_ELECTRON_AFFINITY[69] = 99.0
ATOMIC_ELECTRON_AFFINITY[70] = -1.93
ATOMIC_ELECTRON_AFFINITY[71] = 23.04
ATOMIC_ELECTRON_AFFINITY[72] = 17.18
ATOMIC_ELECTRON_AFFINITY[73] = 31.730
ATOMIC_ELECTRON_AFFINITY[74] = 78.76
ATOMIC_ELECTRON_AFFINITY[75] = 5.827
ATOMIC_ELECTRON_AFFINITY[76] = 103.978
ATOMIC_ELECTRON_AFFINITY[77] = 150.908
ATOMIC_ELECTRON_AFFINITY[78] = 205.041
ATOMIC_ELECTRON_AFFINITY[79] = 222.747
ATOMIC_ELECTRON_AFFINITY[80] = -48.0
ATOMIC_ELECTRON_AFFINITY[81] = 30.880
ATOMIC_ELECTRON_AFFINITY[82] = 34.418
ATOMIC_ELECTRON_AFFINITY[83] = 90.92
ATOMIC_ELECTRON_AFFINITY[84] = 136.1
ATOMIC_ELECTRON_AFFINITY[85] = 233.087
ATOMIC_ELECTRON_AFFINITY[86] = -68
ATOMIC_ELECTRON_AFFINITY[87] = 46.89
ATOMIC_ELECTRON_AFFINITY[88] = 9.6485
ATOMIC_ELECTRON_AFFINITY[89] = 33.77
ATOMIC_ELECTRON_AFFINITY[90] = 58.633
ATOMIC_ELECTRON_AFFINITY[91] = 53.03
ATOMIC_ELECTRON_AFFINITY[92] = 30.39
ATOMIC_ELECTRON_AFFINITY[93] = 45.85
ATOMIC_ELECTRON_AFFINITY[94] = -48.33
ATOMIC_ELECTRON_AFFINITY[95] = 9.93
ATOMIC_ELECTRON_AFFINITY[96] = 27.17
ATOMIC_ELECTRON_AFFINITY[97] = -165.24
ATOMIC_ELECTRON_AFFINITY[98] = -97.31
ATOMIC_ELECTRON_AFFINITY[99] = -28.6
ATOMIC_ELECTRON_AFFINITY[100] = 33.96
ATOMIC_ELECTRON_AFFINITY[101] = 93.91
ATOMIC_ELECTRON_AFFINITY[102] = -223.22
ATOMIC_ELECTRON_AFFINITY[103] = -30.04
# ATOMIC_ELECTRON_AFFINITY[104] = 0.0
# ATOMIC_ELECTRON_AFFINITY[105] = 0.0
# ATOMIC_ELECTRON_AFFINITY[106] = 0.0
# ATOMIC_ELECTRON_AFFINITY[107] = 0.0
# ATOMIC_ELECTRON_AFFINITY[108] = 0.0
# ATOMIC_ELECTRON_AFFINITY[109] = 0.0
# ATOMIC_ELECTRON_AFFINITY[110] = 0.0
# ATOMIC_ELECTRON_AFFINITY[111] = 151.0
# ATOMIC_ELECTRON_AFFINITY[112] = 0.0
# ATOMIC_ELECTRON_AFFINITY[113] = 66.6
# ATOMIC_ELECTRON_AFFINITY[114] = 0.0
# ATOMIC_ELECTRON_AFFINITY[115] = 35.3
# ATOMIC_ELECTRON_AFFINITY[116] = 74.9
# ATOMIC_ELECTRON_AFFINITY[117] = 165.9
# ATOMIC_ELECTRON_AFFINITY[118] = 7.72

ATOMIC_ELECTRON_AFFINITY = ATOMIC_ELECTRON_AFFINITY / au.KJPERMOL

MULLIKEN_HARDNESS = 0.5*(ATOMIC_IONIZATION_ENERGY - ATOMIC_ELECTRON_AFFINITY) #[0.5*(ei - ea) for ei, ea in zip(ATOMIC_IONIZATION_ENERGY, ATOMIC_ELECTRON_AFFINITY)]
MULLIKEN_ELCTRONEGATIVITY = 0.5*(ATOMIC_IONIZATION_ENERGY + ATOMIC_ELECTRON_AFFINITY) #[0.5*(ei + ea) for ei, ea in zip(ATOMIC_IONIZATION_ENERGY, ATOMIC_ELECTRON_AFFINITY)]

# Ground state multiplicities (2S+1) of the elements
# https://en.wikipedia.org/wiki/Term_symbol
MULTIPLICITIES = np.array([
    1,  # Dummy
    2,  # H
    1,  # He
    2,  # Li
    1,  # Be
    2,  # B
    3,  # C
    4,  # N
    3,  # O
    2,  # F
    1,  # Ne
    2,  # Na
    1,  # Mg
    2,  # Al
    3,  # Si
    4,  # P
    3,  # S
    2,  # Cl
    1,  # Ar
    2,  # K
    1,  # Ca
    2,  # Sc
    3,  # Ti
    4,  # V
    7,  # Cr
    6,  # Mn
    5,  # Fe
    4,  # Co
    3,  # Ni
    2,  # Cu
    1,  # Zn
    2,  # Ga
    3,  # Ge
    4,  # As
    3,  # Se
    2,  # Br
    1,  # Kr
    2,  # Rb
    1,  # Sr
    2,  # Y
    3,  # Zr
    6,  # Nb
    7,  # Mo
    6,  # Tc
    5,  # Ru
    4,  # Rh
    1,  # Pd
    2,  # Ag
    1,  # Cd
    2,  # In
    3,  # Sn
    4,  # Sb
    3,  # Te
    2,  # I
    1,  # Xe
    2,  # Cs
    1,  # Ba
    2,  # La
    1,  # Ce
    4,  # Pr
    5,  # Nd
    6,  # Pm
    7,  # Sm
    8,  # Eu
    9,  # Gd
    6,  # Tb
    5,  # Dy
    4,  # Ho
    3,  # Er
    2,  # Tm
    1,  # Yb
    2,  # Lu
    3,  # Hf
    4,  # Ta
    5,  # W
    6,  # Re
    5,  # Os
    4,  # Ir
    3,  # Pt
    2,  # Au
    1,  # Hg
    2,  # Tl
    3,  # Pb
    4,  # Bi
    3,  # Po
    2,  # At
    1,  # Rn
    2,  # Fr
    1,  # Ra
    2,  # Ac
    3,  # Th
    4,  # Pa
    5,  # U
    6,  # Np
    7,  # Pu
    8,  # Am
    9,  # Cm
    6,  # Bk
    5,  # Cs
    4,  # Es
    3,  # Fm
    2,  # Md
    1,  # No
    2,  # Lr
    3,  # Rf
    4,  # Db
    5,  # Sg
    6,  # Bh
    5,  # Hs
    4,  # Mt
    3,  # Ds
    2,  # Rg
    1,  # Cn
    2,  # Nh
    3,  # Fl
    4,  # Mc
    3,  # Lv
    2,  # Ts
    1,  # Og
    1,  # Dummy
], dtype=int)

GTO_EXPONENTS = np.ones(len(PERIODIC_TABLE),dtype=float) # [1.0] * len(PERIODIC_TABLE)
GTO_EXPONENTS[1] = 0.534337523756312  # H
GTO_EXPONENTS[2] = 0.7021159834472296  # He
GTO_EXPONENTS[3] = 0.166838519142176  # Li
GTO_EXPONENTS[4] = 0.18912512649376215  # Be
GTO_EXPONENTS[5] = 0.19595732141600747  # B
GTO_EXPONENTS[6] = 0.206883838259186  # C
GTO_EXPONENTS[7] = 0.221439796025873  # N
GTO_EXPONENTS[8] = 0.223967308625516  # O
GTO_EXPONENTS[9] = 0.231257590182828  # F
GTO_EXPONENTS[10] = 0.24453829863755244  # Ne
GTO_EXPONENTS[11] = 0.095892938712585  # Na
GTO_EXPONENTS[12] = 0.10079467931059707  # Mg
GTO_EXPONENTS[13] = 0.10028848072986629  # Al
GTO_EXPONENTS[14] = 0.105219608142377  # Si
GTO_EXPONENTS[15] = 0.108476721661715  # P
GTO_EXPONENTS[16] = 0.115618357843499  # S
GTO_EXPONENTS[17] = 0.113714050615107  # Cl
GTO_EXPONENTS[18] = 0.1212883463892641  # Ar
GTO_EXPONENTS[19] = 0.060223294377778  # K
GTO_EXPONENTS[20] = 0.059395381582096514  # Ca
GTO_EXPONENTS[21] = 0.06079192524304038  # Sc
GTO_EXPONENTS[22] = 0.06203767983760801  # Ti
GTO_EXPONENTS[23] = 0.06290468817369953  # V
GTO_EXPONENTS[24] = 0.06388264750522  # Cr
GTO_EXPONENTS[25] = 0.06552139521612342  # Mn
GTO_EXPONENTS[26] = 0.06692644492343844  # Fe
GTO_EXPONENTS[27] = 0.0678792955976895  # Co
GTO_EXPONENTS[28] = 0.06856122786267473  # Ni
GTO_EXPONENTS[29] = 0.06958759021503495  # Cu
GTO_EXPONENTS[30] = 0.07236231041610941  # Zn
GTO_EXPONENTS[31] = 0.06957555627430864  # Ga
GTO_EXPONENTS[32] = 0.0725904697228818  # Ge
GTO_EXPONENTS[33] = 0.0756872561897057  # As
GTO_EXPONENTS[34] = 0.07656851771723322  # Se
GTO_EXPONENTS[35] = 0.07990716762113642  # Br
GTO_EXPONENTS[36] = 0.08346065503143778  # Kr
GTO_EXPONENTS[37] = 0.04317280857546588  # Rb
GTO_EXPONENTS[38] = 0.04520583675239638  # Sr
GTO_EXPONENTS[39] = 0.04653338466628383  # Y
GTO_EXPONENTS[40] = 0.04767221848599982  # Zr
GTO_EXPONENTS[41] = 0.04844559221185299  # Nb
GTO_EXPONENTS[42] = 0.04938434537005703  # Mo
GTO_EXPONENTS[43] = 0.050291756781459286  # Tc
GTO_EXPONENTS[44] = 0.05112821282855135  # Ru
GTO_EXPONENTS[45] = 0.05196978925495233  # Rh
GTO_EXPONENTS[46] = 0.05356553096002117  # Pd
GTO_EXPONENTS[47] = 0.053599320010163626  # Ag
GTO_EXPONENTS[48] = 0.05573994809955866  # Cd
GTO_EXPONENTS[49] = 0.05341539504249603  # In
GTO_EXPONENTS[50] = 0.0556907204737427  # Sn
GTO_EXPONENTS[51] = 0.0577449406299723  # Sb
GTO_EXPONENTS[52] = 0.05889812625623931  # Te
GTO_EXPONENTS[53] = 0.0611555894435609  # I
GTO_EXPONENTS[54] = 0.06370219003886742  # Xe
GTO_EXPONENTS[55] = 0.03224362451708012  # Cs
GTO_EXPONENTS[56] = 0.03283206686879559  # Ba
GTO_EXPONENTS[57] = 0.03342513862348529  # La
GTO_EXPONENTS[58] = 0.03402285738400748  # Ce
GTO_EXPONENTS[59] = 0.03462523957847376  # Pr
GTO_EXPONENTS[60] = 0.03523230055661496  # Nd
GTO_EXPONENTS[61] = 0.03584405467681633  # Pm
GTO_EXPONENTS[62] = 0.036460515384859206  # Sm
GTO_EXPONENTS[63] = 0.03708169528527649  # Eu
GTO_EXPONENTS[64] = 0.037707606206117524  # Gd
GTO_EXPONENTS[65] = 0.03833825925782179  # Tb
GTO_EXPONENTS[66] = 0.038973664886817035  # Dy
GTO_EXPONENTS[67] = 0.039613832924385146  # Ho
GTO_EXPONENTS[68] = 0.04025877263127613  # Er
GTO_EXPONENTS[69] = 0.040908492738495464  # Tm
GTO_EXPONENTS[70] = 0.041563001484642384  # Yb
GTO_EXPONENTS[71] = 0.04222230665013448  # Lu
GTO_EXPONENTS[72] = 0.04288641558861739  # Hf
GTO_EXPONENTS[73] = 0.043555335255825986  # Ta
GTO_EXPONENTS[74] = 0.044229072236135106  # W
GTO_EXPONENTS[75] = 0.04490763276701256  # Re
GTO_EXPONENTS[76] = 0.045591022761565465  # Os
GTO_EXPONENTS[77] = 0.04627924782935086  # Ir
GTO_EXPONENTS[78] = 0.046972313295604785  # Pt
GTO_EXPONENTS[79] = 0.047670224219027967  # Au
GTO_EXPONENTS[80] = 0.048372985408253175  # Hg
GTO_EXPONENTS[81] = 0.04908060143710664  # Tl
GTO_EXPONENTS[82] = 0.04979307665876563  # Pb
GTO_EXPONENTS[83] = 0.05051041521890378  # Bi
GTO_EXPONENTS[84] = 0.05123262106790798  # Po
GTO_EXPONENTS[85] = 0.05195969797224218  # At
GTO_EXPONENTS[86] = 0.052691649525027  # Rn
GTO_EXPONENTS[87] = 0.03578427498778282  # Fr
GTO_EXPONENTS[88] = 0.036391747269481335  # Ra
GTO_EXPONENTS[89] = 0.03700414495208116  # Ac
GTO_EXPONENTS[90] = 0.037621469663581576  # Th
GTO_EXPONENTS[91] = 0.03824372296172443  # Pa
GTO_EXPONENTS[92] = 0.038870906337742386  # U
GTO_EXPONENTS[93] = 0.039503021219869885  # Np
GTO_EXPONENTS[94] = 0.040140068976634066  # Pu
GTO_EXPONENTS[95] = 0.04078205091994164  # Am
GTO_EXPONENTS[96] = 0.0414289683079762  # Cm
GTO_EXPONENTS[97] = 0.04208082234791952  # Bk
GTO_EXPONENTS[98] = 0.04273761419850917  # Cf
GTO_EXPONENTS[99] = 0.04339934497244377  # Es
GTO_EXPONENTS[100] = 0.04406601573864634  # Fm
GTO_EXPONENTS[101] = 0.044737627524395585  # Md
GTO_EXPONENTS[102] = 0.04541418131733376  # No
GTO_EXPONENTS[103] = 0.04609567806735967  # Lr
GTO_EXPONENTS[104] = 0.046782118688413976  # Rf
GTO_EXPONENTS[105] = 0.047473504060164484  # Db
GTO_EXPONENTS[106] = 0.048169835029597215  # Sg
GTO_EXPONENTS[107] = 0.04887111241251998  # Bh
GTO_EXPONENTS[108] = 0.049577336994983415  # Hs
GTO_EXPONENTS[109] = 0.050288509534625325  # Mt
GTO_EXPONENTS[110] = 0.05100463076194258  # Ds
GTO_EXPONENTS[111] = 0.05172570138149545  # Rg
GTO_EXPONENTS[112] = 0.052451722073048296  # Cn
GTO_EXPONENTS[113] = 0.05318269349265068  # Nh
GTO_EXPONENTS[114] = 0.05391861627366232  # Fl
GTO_EXPONENTS[115] = 0.05465949102772548  # Mc
GTO_EXPONENTS[116] = 0.055405318345687654  # Lv
GTO_EXPONENTS[117] = 0.056156098798477695  # Ts

PUBCHEM_IONIZATION_ENERGY = np.array(
    [0.0]
    + [
        0.49971728701446033,
        0.9035555916917588,
        0.19815234678496618,
        0.34261393343402075,
        0.30494587789719013,
        0.4137973710680117,
        0.5341146528510198,
        0.5004522734639595,
        0.6402834454811693,
        0.7924991391724399,
        0.18885476819880215,
        0.2809853196435184,
        0.2199814443350904,
        0.29958047681584643,
        0.3853901447948702,
        0.38072298084055073,
        0.47656521385523765,
        0.5791693222053166,
        0.15952880886378676,
        0.2246486082894099,
        0.24111230475819048,
        0.2509243738590039,
        0.24791092941605747,
        0.24868266518803156,
        0.2731944632788276,
        0.2903931461971073,
        0.28962141042513323,
        0.2807648237086687,
        0.283925265441515,
        0.34522313532974264,
        0.22045918552726484,
        0.29031964755215744,
        0.36069460009169935,
        0.35837939277577713,
        0.43415649571913767,
        0.5144905146493929,
        0.15350191997789384,
        0.20928739149487804,
        0.22847053782680538,
        0.24379500529886233,
        0.24838867060823192,
        0.2606261949923924,
        0.2675350676176843,
        0.2705117627381558,
        0.2741131963407015,
        0.30637910147371344,
        0.27841286707027146,
        0.33052340633975996,
        0.21263157984009906,
        0.2698870242560815,
        0.31751414618362533,
        0.33111139549935925,
        0.38406716918577183,
        0.445769281621224,
        0.14310186171748113,
        0.19153746873947397,
        0.20495097144283314,
        0.2035544971887848,
        0.20079829800316307,
        0.2030400066741354,
        0.2039587397360093,
        0.20741317604865525,
        0.20836865843300412,
        0.22600833322098332,
        0.2154980269931457,
        0.21825422617876744,
        0.22130441994418887,
        0.2244648616770351,
        0.22725781018513183,
        0.22983026275837878,
        0.1994018237491147,
        0.25081412589157903,
        0.28995215432740784,
        0.29325959335015395,
        0.2895846611026583,
        0.3197191055321227,
        0.33441883452210536,
        0.3307439022746097,
        0.33904924915394996,
        0.38358942799359735,
        0.2244648616770351,
        0.27256972479675334,
        0.2678658115199589,
        0.30931904727171,
        0.34911856351208803,
        0.394871469993409,
        0.14332235765233087,
        0.19399967334529608,
        0.1899939971955258,
        0.22343588064773634,
        0.21645350937749455,
        0.22762530340988138,
        0.23027125462807826,
        0.2227008941982372,
        0.22023868959241513,
        0.22123092129923894,
        0.22894827901897985,
        0.2315207315922268,
        0.23593065028922158,
        0.2388705960872181,
        0.24181054188521467,
        0.24438299445846162,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    + [0.0],
)

# Possible oxidation states for each element (extracted from PubChem https://pubchem.ncbi.nlm.nih.gov/periodic-table/#property=OxidationStates)
OXIDATION_STATES = [[0]] * len(PERIODIC_TABLE)
OXIDATION_STATES[1] = [+1, -1]
OXIDATION_STATES[2] = [0]
OXIDATION_STATES[3] = [+1]
OXIDATION_STATES[4] = [+2]
OXIDATION_STATES[5] = [+3]
OXIDATION_STATES[6] = [+4, +2, -4]
OXIDATION_STATES[7] = [+5, +4, +3, +2, +1, -1, -2, -3]
OXIDATION_STATES[8] = [-2]
OXIDATION_STATES[9] = [-1]
OXIDATION_STATES[10] = [0]
OXIDATION_STATES[11] = [+1]
OXIDATION_STATES[12] = [+2]
OXIDATION_STATES[13] = [+3]
OXIDATION_STATES[14] = [+4, +2, -4]
OXIDATION_STATES[15] = [+5, +3, -3]
OXIDATION_STATES[16] = [+6, +4, -2]
OXIDATION_STATES[17] = [+7, +5, +1, -1]
OXIDATION_STATES[18] = [0]
OXIDATION_STATES[19] = [+1]
OXIDATION_STATES[20] = [+2]
OXIDATION_STATES[21] = [+3]
OXIDATION_STATES[22] = [+4, +3, +2]
OXIDATION_STATES[23] = [+5, +4, +3, +2]
OXIDATION_STATES[24] = [+6, +3, +2]
OXIDATION_STATES[25] = [+7, +4, +3, +2]
OXIDATION_STATES[26] = [+3, +2]
OXIDATION_STATES[27] = [+3, +2]
OXIDATION_STATES[28] = [+3, +2]
OXIDATION_STATES[29] = [+2, +1]
OXIDATION_STATES[30] = [+2]
OXIDATION_STATES[31] = [+3]
OXIDATION_STATES[32] = [+4, +2]
OXIDATION_STATES[33] = [+5, +3, -3]
OXIDATION_STATES[34] = [+6, +4, -2]
OXIDATION_STATES[35] = [+5, +1, -1]
OXIDATION_STATES[36] = [0]
OXIDATION_STATES[37] = [+1]
OXIDATION_STATES[38] = [+2]
OXIDATION_STATES[39] = [+3]
OXIDATION_STATES[40] = [+4]
OXIDATION_STATES[41] = [+5, +3]
OXIDATION_STATES[42] = [+6]
OXIDATION_STATES[43] = [+7, +6, +4]
OXIDATION_STATES[44] = [+3]
OXIDATION_STATES[45] = [+3]
OXIDATION_STATES[46] = [+3, +2]
OXIDATION_STATES[47] = [+1]
OXIDATION_STATES[48] = [+2]
OXIDATION_STATES[49] = [+3]
OXIDATION_STATES[50] = [+4, +2]
OXIDATION_STATES[51] = [+5, +3, -3]
OXIDATION_STATES[52] = [+6, +4, -2]
OXIDATION_STATES[53] = [+7, +5, +1, -1]
OXIDATION_STATES[54] = [0]
OXIDATION_STATES[55] = [+1]
OXIDATION_STATES[56] = [+2]
OXIDATION_STATES[57] = [+3]
OXIDATION_STATES[58] = [+4, +3]
OXIDATION_STATES[59] = [+3]
OXIDATION_STATES[60] = [+3]
OXIDATION_STATES[61] = [+3]
OXIDATION_STATES[62] = [+3, +2]
OXIDATION_STATES[63] = [+3, +2]
OXIDATION_STATES[64] = [+3]
OXIDATION_STATES[65] = [+3]
OXIDATION_STATES[66] = [+3]
OXIDATION_STATES[67] = [+3]
OXIDATION_STATES[68] = [+3]
OXIDATION_STATES[69] = [+3]
OXIDATION_STATES[70] = [+3, +2]
OXIDATION_STATES[71] = [+3]
OXIDATION_STATES[72] = [+4]
OXIDATION_STATES[73] = [+5]
OXIDATION_STATES[74] = [+6]
OXIDATION_STATES[75] = [+7, +6, +4]
OXIDATION_STATES[76] = [+4, +3]
OXIDATION_STATES[77] = [+4, +3]
OXIDATION_STATES[78] = [+4, +2]
OXIDATION_STATES[79] = [+3, +1]
OXIDATION_STATES[80] = [+2, +1]
OXIDATION_STATES[81] = [+3, +1]
OXIDATION_STATES[82] = [+4, +2]
OXIDATION_STATES[83] = [+5, +3]
OXIDATION_STATES[84] = [+4, +2]
OXIDATION_STATES[85] = [7, 5, 3, 1, -1]
OXIDATION_STATES[86] = [0]
OXIDATION_STATES[87] = [+1]
OXIDATION_STATES[88] = [+2]
OXIDATION_STATES[89] = [+3]
OXIDATION_STATES[90] = [+4]
OXIDATION_STATES[91] = [+5, +4]
OXIDATION_STATES[92] = [+6, +5, +4, +3]
OXIDATION_STATES[93] = [+6, +5, +4, +3]
OXIDATION_STATES[94] = [+6, +5, +4, +3]
OXIDATION_STATES[95] = [+6, +5, +4, +3]
OXIDATION_STATES[96] = [+3]
OXIDATION_STATES[97] = [+4, +3]
OXIDATION_STATES[98] = [+3]
OXIDATION_STATES[99] = [+3]
OXIDATION_STATES[100] = [+3]
OXIDATION_STATES[101] = [+3, +2]
OXIDATION_STATES[102] = [+3, +2]
OXIDATION_STATES[103] = [+3]
OXIDATION_STATES[104] = [+4]
OXIDATION_STATES[105] = [5, 4, 3]
OXIDATION_STATES[106] = [6, 5, 4, 3, 0]
OXIDATION_STATES[107] = [7, 5, 4, 3]
OXIDATION_STATES[108] = [8, 6, 5, 4, 3, 2]
OXIDATION_STATES[109] = [9, 8, 6, 4, 3, 1]
OXIDATION_STATES[110] = [8, 6, 4, 2, 0]
OXIDATION_STATES[111] = [5, 3, 1, -1]
OXIDATION_STATES[112] = [2, 1, 0]
OXIDATION_STATES[113] = [0]
OXIDATION_STATES[114] = [6, 4, 2, 1, 0]
OXIDATION_STATES[115] = [3, 1]
OXIDATION_STATES[116] = [+4, +2, -2]
OXIDATION_STATES[117] = [+5, +3, +1, -1]
OXIDATION_STATES[118] = [+6, +4, +2, +1, 0, -1]

__states_set = sorted(set(sum(OXIDATION_STATES, [])))
__nstates = len(__states_set)
__state_dict = {s: i for i, s in enumerate(__states_set)}
__conv_tensor = np.zeros((len(PERIODIC_TABLE), __nstates))
for i, states in enumerate(OXIDATION_STATES[1 : len(PERIODIC_TABLE)]):
    for s in states:
        __conv_tensor[i, __state_dict[s]] = 1
OXIDATION_STATES_ONE_HOT = np.copy(__conv_tensor)
del __states_set, __nstates, __state_dict, __conv_tensor

# Covalent radii from UFF (in Angstrom)
UFF_MAX_COV_RADII = np.ones(len(PERIODIC_TABLE),dtype=float) #[1.]*len(PERIODIC_TABLE)
UFF_MAX_COV_RADII[1]=0.354
UFF_MAX_COV_RADII[2]=0.849
UFF_MAX_COV_RADII[3]=1.336
UFF_MAX_COV_RADII[4]=1.074
UFF_MAX_COV_RADII[5]=0.838
UFF_MAX_COV_RADII[6]=0.757
UFF_MAX_COV_RADII[7]=0.7
UFF_MAX_COV_RADII[8]=0.68
UFF_MAX_COV_RADII[9]=0.668
UFF_MAX_COV_RADII[10]=0.92
UFF_MAX_COV_RADII[11]=1.539
UFF_MAX_COV_RADII[12]=1.421
UFF_MAX_COV_RADII[13]=1.244
UFF_MAX_COV_RADII[14]=1.117
UFF_MAX_COV_RADII[15]=1.101
UFF_MAX_COV_RADII[16]=1.077
UFF_MAX_COV_RADII[17]=1.044
UFF_MAX_COV_RADII[18]=1.032
UFF_MAX_COV_RADII[19]=1.953
UFF_MAX_COV_RADII[20]=1.761
UFF_MAX_COV_RADII[21]=1.513
UFF_MAX_COV_RADII[22]=1.412
UFF_MAX_COV_RADII[23]=1.402
UFF_MAX_COV_RADII[24]=1.345
UFF_MAX_COV_RADII[25]=1.382
UFF_MAX_COV_RADII[26]=1.335
UFF_MAX_COV_RADII[27]=1.241
UFF_MAX_COV_RADII[28]=1.164
UFF_MAX_COV_RADII[29]=1.302
UFF_MAX_COV_RADII[30]=1.193
UFF_MAX_COV_RADII[31]=1.26
UFF_MAX_COV_RADII[32]=1.197
UFF_MAX_COV_RADII[33]=1.211
UFF_MAX_COV_RADII[34]=1.19
UFF_MAX_COV_RADII[35]=1.192
UFF_MAX_COV_RADII[36]=1.147
UFF_MAX_COV_RADII[37]=2.26
UFF_MAX_COV_RADII[38]=2.052
UFF_MAX_COV_RADII[39]=1.698
UFF_MAX_COV_RADII[40]=1.564
UFF_MAX_COV_RADII[41]=1.473
UFF_MAX_COV_RADII[42]=1.484
UFF_MAX_COV_RADII[43]=1.322
UFF_MAX_COV_RADII[44]=1.478
UFF_MAX_COV_RADII[45]=1.332
UFF_MAX_COV_RADII[46]=1.338
UFF_MAX_COV_RADII[47]=1.386
UFF_MAX_COV_RADII[48]=1.403
UFF_MAX_COV_RADII[49]=1.459
UFF_MAX_COV_RADII[50]=1.398
UFF_MAX_COV_RADII[51]=1.407
UFF_MAX_COV_RADII[52]=1.386
UFF_MAX_COV_RADII[53]=1.382
UFF_MAX_COV_RADII[54]=1.267
UFF_MAX_COV_RADII[55]=2.57
UFF_MAX_COV_RADII[56]=2.277
UFF_MAX_COV_RADII[57]=1.943
UFF_MAX_COV_RADII[58]=1.841
UFF_MAX_COV_RADII[59]=1.823
UFF_MAX_COV_RADII[60]=1.816
UFF_MAX_COV_RADII[61]=1.801
UFF_MAX_COV_RADII[62]=1.78
UFF_MAX_COV_RADII[63]=1.771
UFF_MAX_COV_RADII[64]=1.735
UFF_MAX_COV_RADII[65]=1.732
UFF_MAX_COV_RADII[66]=1.71
UFF_MAX_COV_RADII[67]=1.696
UFF_MAX_COV_RADII[68]=1.673
UFF_MAX_COV_RADII[69]=1.66
UFF_MAX_COV_RADII[70]=1.637
UFF_MAX_COV_RADII[71]=1.671
UFF_MAX_COV_RADII[72]=1.611
UFF_MAX_COV_RADII[73]=1.511
UFF_MAX_COV_RADII[74]=1.526
UFF_MAX_COV_RADII[75]=1.372
UFF_MAX_COV_RADII[76]=1.372
UFF_MAX_COV_RADII[77]=1.371
UFF_MAX_COV_RADII[78]=1.364
UFF_MAX_COV_RADII[79]=1.262
UFF_MAX_COV_RADII[80]=1.34
UFF_MAX_COV_RADII[81]=1.518
UFF_MAX_COV_RADII[82]=1.459
UFF_MAX_COV_RADII[83]=1.512
UFF_MAX_COV_RADII[84]=1.5
UFF_MAX_COV_RADII[85]=1.545
UFF_MAX_COV_RADII[86]=1.42
UFF_MAX_COV_RADII[87]=2.88
UFF_MAX_COV_RADII[88]=2.512
UFF_MAX_COV_RADII[89]=1.983
UFF_MAX_COV_RADII[90]=1.721
UFF_MAX_COV_RADII[91]=1.711
UFF_MAX_COV_RADII[92]=1.684
UFF_MAX_COV_RADII[93]=1.666
UFF_MAX_COV_RADII[94]=1.657
UFF_MAX_COV_RADII[95]=1.66
UFF_MAX_COV_RADII[96]=1.801
UFF_MAX_COV_RADII[97]=1.761
UFF_MAX_COV_RADII[98]=1.75
UFF_MAX_COV_RADII[99]=1.724
UFF_MAX_COV_RADII[100]=1.712
UFF_MAX_COV_RADII[101]=1.689
UFF_MAX_COV_RADII[102]=1.679
UFF_MAX_COV_RADII[103]=1.698

# Convert UFF radii to Bohr
UFF_MAX_COV_RADII = UFF_MAX_COV_RADII/au.ANG

# Van der Waals radii from UFF (in Angstrom)
UFF_VDW_RADII = np.ones(len(PERIODIC_TABLE),dtype=float) # [1.]*len(PERIODIC_TABLE)
UFF_VDW_RADII[1]=2.886
UFF_VDW_RADII[2]=2.362
UFF_VDW_RADII[3]=2.451
UFF_VDW_RADII[4]=2.745
UFF_VDW_RADII[5]=4.083
UFF_VDW_RADII[6]=3.851
UFF_VDW_RADII[7]=3.66
UFF_VDW_RADII[8]=3.5
UFF_VDW_RADII[9]=3.364
UFF_VDW_RADII[10]=3.243
UFF_VDW_RADII[11]=2.983
UFF_VDW_RADII[12]=3.021
UFF_VDW_RADII[13]=4.499
UFF_VDW_RADII[14]=4.295
UFF_VDW_RADII[15]=4.147
UFF_VDW_RADII[16]=4.035
UFF_VDW_RADII[17]=3.947
UFF_VDW_RADII[18]=3.868
UFF_VDW_RADII[19]=3.812
UFF_VDW_RADII[20]=3.399
UFF_VDW_RADII[21]=3.295
UFF_VDW_RADII[22]=3.175
UFF_VDW_RADII[23]=3.144
UFF_VDW_RADII[24]=3.023
UFF_VDW_RADII[25]=2.961
UFF_VDW_RADII[26]=2.912
UFF_VDW_RADII[27]=2.872
UFF_VDW_RADII[28]=2.834
UFF_VDW_RADII[29]=3.495
UFF_VDW_RADII[30]=2.763
UFF_VDW_RADII[31]=4.383
UFF_VDW_RADII[32]=4.28
UFF_VDW_RADII[33]=4.23
UFF_VDW_RADII[34]=4.205
UFF_VDW_RADII[35]=4.189
UFF_VDW_RADII[36]=4.141
UFF_VDW_RADII[37]=4.114
UFF_VDW_RADII[38]=3.641
UFF_VDW_RADII[39]=3.345
UFF_VDW_RADII[40]=3.124
UFF_VDW_RADII[41]=3.165
UFF_VDW_RADII[42]=3.052
UFF_VDW_RADII[43]=2.998
UFF_VDW_RADII[44]=2.963
UFF_VDW_RADII[45]=2.929
UFF_VDW_RADII[46]=2.899
UFF_VDW_RADII[47]=3.148
UFF_VDW_RADII[48]=2.848
UFF_VDW_RADII[49]=4.463
UFF_VDW_RADII[50]=4.392
UFF_VDW_RADII[51]=4.42
UFF_VDW_RADII[52]=4.47
UFF_VDW_RADII[53]=4.5
UFF_VDW_RADII[54]=4.404
UFF_VDW_RADII[55]=4.517
UFF_VDW_RADII[56]=3.703
UFF_VDW_RADII[57]=3.522
UFF_VDW_RADII[58]=3.556
UFF_VDW_RADII[59]=3.606
UFF_VDW_RADII[60]=3.575
UFF_VDW_RADII[61]=3.547
UFF_VDW_RADII[62]=3.52
UFF_VDW_RADII[63]=3.493
UFF_VDW_RADII[64]=3.368
UFF_VDW_RADII[65]=3.451
UFF_VDW_RADII[66]=3.428
UFF_VDW_RADII[67]=3.409
UFF_VDW_RADII[68]=3.391
UFF_VDW_RADII[69]=3.374
UFF_VDW_RADII[70]=3.355
UFF_VDW_RADII[71]=3.64
UFF_VDW_RADII[72]=3.141
UFF_VDW_RADII[73]=3.17
UFF_VDW_RADII[74]=3.069
UFF_VDW_RADII[75]=2.954
UFF_VDW_RADII[76]=3.12
UFF_VDW_RADII[77]=2.84
UFF_VDW_RADII[78]=2.754
UFF_VDW_RADII[79]=3.293
UFF_VDW_RADII[80]=2.705
UFF_VDW_RADII[81]=4.347
UFF_VDW_RADII[82]=4.297
UFF_VDW_RADII[83]=4.37
UFF_VDW_RADII[84]=4.709
UFF_VDW_RADII[85]=4.75
UFF_VDW_RADII[86]=4.765
UFF_VDW_RADII[87]=4.9
UFF_VDW_RADII[88]=3.677
UFF_VDW_RADII[89]=3.478
UFF_VDW_RADII[90]=3.396
UFF_VDW_RADII[91]=3.424
UFF_VDW_RADII[92]=3.395
UFF_VDW_RADII[93]=3.424
UFF_VDW_RADII[94]=3.424
UFF_VDW_RADII[95]=3.381
UFF_VDW_RADII[96]=3.326
UFF_VDW_RADII[97]=3.339
UFF_VDW_RADII[98]=3.313
UFF_VDW_RADII[99]=3.299
UFF_VDW_RADII[100]=3.286
UFF_VDW_RADII[101]=3.274
UFF_VDW_RADII[102]=3.248
UFF_VDW_RADII[103]=3.236

# Convert UFF radii to Bohr
UFF_VDW_RADII = UFF_VDW_RADII/au.ANG

UFF_EFFECTIVE_CHARGE = np.zeros(len(PERIODIC_TABLE),dtype=float) #[0.0] * len(PERIODIC_TABLE)
UFF_EFFECTIVE_CHARGE[1]=0.712
UFF_EFFECTIVE_CHARGE[2]=0.098
UFF_EFFECTIVE_CHARGE[3]=1.026
UFF_EFFECTIVE_CHARGE[4]=1.565
UFF_EFFECTIVE_CHARGE[5]=1.755
UFF_EFFECTIVE_CHARGE[6]=1.912
UFF_EFFECTIVE_CHARGE[7]=2.544
UFF_EFFECTIVE_CHARGE[8]=2.3
UFF_EFFECTIVE_CHARGE[9]=1.735
UFF_EFFECTIVE_CHARGE[10]=0.194
UFF_EFFECTIVE_CHARGE[11]=1.081
UFF_EFFECTIVE_CHARGE[12]=1.787
UFF_EFFECTIVE_CHARGE[13]=1.792
UFF_EFFECTIVE_CHARGE[14]=2.323
UFF_EFFECTIVE_CHARGE[15]=2.863
UFF_EFFECTIVE_CHARGE[16]=2.703
UFF_EFFECTIVE_CHARGE[17]=2.348
UFF_EFFECTIVE_CHARGE[18]=0.3
UFF_EFFECTIVE_CHARGE[19]=1.165
UFF_EFFECTIVE_CHARGE[20]=2.141
UFF_EFFECTIVE_CHARGE[21]=2.592
UFF_EFFECTIVE_CHARGE[22]=2.659
UFF_EFFECTIVE_CHARGE[23]=2.679
UFF_EFFECTIVE_CHARGE[24]=2.463
UFF_EFFECTIVE_CHARGE[25]=2.43
UFF_EFFECTIVE_CHARGE[26]=2.43
UFF_EFFECTIVE_CHARGE[27]=2.43
UFF_EFFECTIVE_CHARGE[28]=2.43
UFF_EFFECTIVE_CHARGE[29]=1.756
UFF_EFFECTIVE_CHARGE[30]=1.308
UFF_EFFECTIVE_CHARGE[31]=1.821
UFF_EFFECTIVE_CHARGE[32]=2.789
UFF_EFFECTIVE_CHARGE[33]=2.864
UFF_EFFECTIVE_CHARGE[34]=2.764
UFF_EFFECTIVE_CHARGE[35]=2.519
UFF_EFFECTIVE_CHARGE[36]=0.452
UFF_EFFECTIVE_CHARGE[37]=1.592
UFF_EFFECTIVE_CHARGE[38]=2.449
UFF_EFFECTIVE_CHARGE[39]=3.257
UFF_EFFECTIVE_CHARGE[40]=3.667
UFF_EFFECTIVE_CHARGE[41]=3.618
UFF_EFFECTIVE_CHARGE[42]=3.4
UFF_EFFECTIVE_CHARGE[43]=3.4
UFF_EFFECTIVE_CHARGE[44]=3.4
UFF_EFFECTIVE_CHARGE[45]=3.508
UFF_EFFECTIVE_CHARGE[46]=3.21
UFF_EFFECTIVE_CHARGE[47]=1.956
UFF_EFFECTIVE_CHARGE[48]=1.65
UFF_EFFECTIVE_CHARGE[49]=2.07
UFF_EFFECTIVE_CHARGE[50]=2.961
UFF_EFFECTIVE_CHARGE[51]=2.704
UFF_EFFECTIVE_CHARGE[52]=2.882
UFF_EFFECTIVE_CHARGE[53]=2.65
UFF_EFFECTIVE_CHARGE[54]=0.556
UFF_EFFECTIVE_CHARGE[55]=1.573
UFF_EFFECTIVE_CHARGE[56]=2.727
UFF_EFFECTIVE_CHARGE[57]=3.3
UFF_EFFECTIVE_CHARGE[58]=3.3
UFF_EFFECTIVE_CHARGE[59]=3.3
UFF_EFFECTIVE_CHARGE[60]=3.3
UFF_EFFECTIVE_CHARGE[61]=3.3
UFF_EFFECTIVE_CHARGE[62]=3.3
UFF_EFFECTIVE_CHARGE[63]=3.3
UFF_EFFECTIVE_CHARGE[64]=3.3
UFF_EFFECTIVE_CHARGE[65]=3.3
UFF_EFFECTIVE_CHARGE[66]=3.3
UFF_EFFECTIVE_CHARGE[67]=3.416
UFF_EFFECTIVE_CHARGE[68]=3.3
UFF_EFFECTIVE_CHARGE[69]=3.3
UFF_EFFECTIVE_CHARGE[70]=2.618
UFF_EFFECTIVE_CHARGE[71]=3.271
UFF_EFFECTIVE_CHARGE[72]=3.921
UFF_EFFECTIVE_CHARGE[73]=4.075
UFF_EFFECTIVE_CHARGE[74]=3.7
UFF_EFFECTIVE_CHARGE[75]=3.7
UFF_EFFECTIVE_CHARGE[76]=3.7
UFF_EFFECTIVE_CHARGE[77]=3.731
UFF_EFFECTIVE_CHARGE[78]=3.382
UFF_EFFECTIVE_CHARGE[79]=2.625
UFF_EFFECTIVE_CHARGE[80]=1.75
UFF_EFFECTIVE_CHARGE[81]=2.068
UFF_EFFECTIVE_CHARGE[82]=2.846
UFF_EFFECTIVE_CHARGE[83]=2.47
UFF_EFFECTIVE_CHARGE[84]=2.33
UFF_EFFECTIVE_CHARGE[85]=2.24
UFF_EFFECTIVE_CHARGE[86]=0.583
UFF_EFFECTIVE_CHARGE[87]=1.847
UFF_EFFECTIVE_CHARGE[88]=2.92
UFF_EFFECTIVE_CHARGE[89]=3.9
UFF_EFFECTIVE_CHARGE[90]=4.202
UFF_EFFECTIVE_CHARGE[91]=3.9
UFF_EFFECTIVE_CHARGE[92]=3.9
UFF_EFFECTIVE_CHARGE[93]=3.9
UFF_EFFECTIVE_CHARGE[94]=3.9
UFF_EFFECTIVE_CHARGE[95]=3.9
UFF_EFFECTIVE_CHARGE[96]=3.9
UFF_EFFECTIVE_CHARGE[97]=3.9
UFF_EFFECTIVE_CHARGE[98]=3.9
UFF_EFFECTIVE_CHARGE[99]=3.9
UFF_EFFECTIVE_CHARGE[100]=3.9
UFF_EFFECTIVE_CHARGE[101]=3.9
UFF_EFFECTIVE_CHARGE[102]=3.9
UFF_EFFECTIVE_CHARGE[103]=3.9

UFF_ZETA_SCALE = 12.*np.ones(len(PERIODIC_TABLE),dtype=float) # [12.0] * len(PERIODIC_TABLE)
UFF_ZETA_SCALE[1]=12.0
UFF_ZETA_SCALE[2]=15.24
UFF_ZETA_SCALE[3]=12.0
UFF_ZETA_SCALE[4]=12.0
UFF_ZETA_SCALE[5]=12.052
UFF_ZETA_SCALE[6]=12.73
UFF_ZETA_SCALE[7]=13.407
UFF_ZETA_SCALE[8]=14.085
UFF_ZETA_SCALE[9]=14.762
UFF_ZETA_SCALE[10]=15.44
UFF_ZETA_SCALE[11]=12.0
UFF_ZETA_SCALE[12]=12.0
UFF_ZETA_SCALE[13]=11.278
UFF_ZETA_SCALE[14]=12.175
UFF_ZETA_SCALE[15]=13.072
UFF_ZETA_SCALE[16]=13.969
UFF_ZETA_SCALE[17]=14.866
UFF_ZETA_SCALE[18]=15.763
UFF_ZETA_SCALE[19]=12.0
UFF_ZETA_SCALE[20]=12.0
UFF_ZETA_SCALE[21]=12.0
UFF_ZETA_SCALE[22]=12.0
UFF_ZETA_SCALE[23]=12.0
UFF_ZETA_SCALE[24]=12.0
UFF_ZETA_SCALE[25]=12.0
UFF_ZETA_SCALE[26]=12.0
UFF_ZETA_SCALE[27]=12.0
UFF_ZETA_SCALE[28]=12.0
UFF_ZETA_SCALE[29]=12.0
UFF_ZETA_SCALE[30]=12.0
UFF_ZETA_SCALE[31]=11.0
UFF_ZETA_SCALE[32]=12.0
UFF_ZETA_SCALE[33]=13.0
UFF_ZETA_SCALE[34]=14.0
UFF_ZETA_SCALE[35]=15.0
UFF_ZETA_SCALE[36]=16.0
UFF_ZETA_SCALE[37]=12.0
UFF_ZETA_SCALE[38]=12.0
UFF_ZETA_SCALE[39]=12.0
UFF_ZETA_SCALE[40]=12.0
UFF_ZETA_SCALE[41]=12.0
UFF_ZETA_SCALE[42]=12.0
UFF_ZETA_SCALE[43]=12.0
UFF_ZETA_SCALE[44]=12.0
UFF_ZETA_SCALE[45]=12.0
UFF_ZETA_SCALE[46]=12.0
UFF_ZETA_SCALE[47]=12.0
UFF_ZETA_SCALE[48]=12.0
UFF_ZETA_SCALE[49]=11.0
UFF_ZETA_SCALE[50]=12.0
UFF_ZETA_SCALE[51]=13.0
UFF_ZETA_SCALE[52]=14.0
UFF_ZETA_SCALE[53]=15.0
UFF_ZETA_SCALE[54]=12.0
UFF_ZETA_SCALE[55]=12.0
UFF_ZETA_SCALE[56]=12.0
UFF_ZETA_SCALE[57]=12.0
UFF_ZETA_SCALE[58]=12.0
UFF_ZETA_SCALE[59]=12.0
UFF_ZETA_SCALE[60]=12.0
UFF_ZETA_SCALE[61]=12.0
UFF_ZETA_SCALE[62]=12.0
UFF_ZETA_SCALE[63]=12.0
UFF_ZETA_SCALE[64]=12.0
UFF_ZETA_SCALE[65]=12.0
UFF_ZETA_SCALE[66]=12.0
UFF_ZETA_SCALE[67]=12.0
UFF_ZETA_SCALE[68]=12.0
UFF_ZETA_SCALE[69]=12.0
UFF_ZETA_SCALE[70]=12.0
UFF_ZETA_SCALE[71]=12.0
UFF_ZETA_SCALE[72]=12.0
UFF_ZETA_SCALE[73]=12.0
UFF_ZETA_SCALE[74]=12.0
UFF_ZETA_SCALE[75]=12.0
UFF_ZETA_SCALE[76]=12.0
UFF_ZETA_SCALE[77]=12.0
UFF_ZETA_SCALE[78]=12.0
UFF_ZETA_SCALE[79]=12.0
UFF_ZETA_SCALE[80]=12.0
UFF_ZETA_SCALE[81]=11.0
UFF_ZETA_SCALE[82]=12.0
UFF_ZETA_SCALE[83]=13.0
UFF_ZETA_SCALE[84]=14.0
UFF_ZETA_SCALE[85]=15.0
UFF_ZETA_SCALE[86]=16.0
UFF_ZETA_SCALE[87]=12.0
UFF_ZETA_SCALE[88]=12.0
UFF_ZETA_SCALE[89]=12.0
UFF_ZETA_SCALE[90]=12.0
UFF_ZETA_SCALE[91]=12.0
UFF_ZETA_SCALE[92]=12.0
UFF_ZETA_SCALE[93]=12.0
UFF_ZETA_SCALE[94]=12.0
UFF_ZETA_SCALE[95]=12.0
UFF_ZETA_SCALE[96]=12.0
UFF_ZETA_SCALE[97]=12.0
UFF_ZETA_SCALE[98]=12.0
UFF_ZETA_SCALE[99]=12.0
UFF_ZETA_SCALE[100]=12.0
UFF_ZETA_SCALE[101]=12.0
UFF_ZETA_SCALE[102]=12.0
UFF_ZETA_SCALE[103]=12.0


# UFF D energy parameters in kcal/mol
UFF_D_ENERGY = np.zeros(len(PERIODIC_TABLE),dtype=float) # [0.0] * len(PERIODIC_TABLE)
UFF_D_ENERGY[1]=0.044
UFF_D_ENERGY[2]=0.056
UFF_D_ENERGY[3]=0.025
UFF_D_ENERGY[4]=0.085
UFF_D_ENERGY[5]=0.18
UFF_D_ENERGY[6]=0.105
UFF_D_ENERGY[7]=0.069
UFF_D_ENERGY[8]=0.06
UFF_D_ENERGY[9]=0.05
UFF_D_ENERGY[10]=0.042
UFF_D_ENERGY[11]=0.03
UFF_D_ENERGY[12]=0.111
UFF_D_ENERGY[13]=0.505
UFF_D_ENERGY[14]=0.402
UFF_D_ENERGY[15]=0.305
UFF_D_ENERGY[16]=0.274
UFF_D_ENERGY[17]=0.227
UFF_D_ENERGY[18]=0.185
UFF_D_ENERGY[19]=0.035
UFF_D_ENERGY[20]=0.238
UFF_D_ENERGY[21]=0.019
UFF_D_ENERGY[22]=0.017
UFF_D_ENERGY[23]=0.016
UFF_D_ENERGY[24]=0.015
UFF_D_ENERGY[25]=0.013
UFF_D_ENERGY[26]=0.013
UFF_D_ENERGY[27]=0.014
UFF_D_ENERGY[28]=0.015
UFF_D_ENERGY[29]=0.005
UFF_D_ENERGY[30]=0.124
UFF_D_ENERGY[31]=0.415
UFF_D_ENERGY[32]=0.379
UFF_D_ENERGY[33]=0.309
UFF_D_ENERGY[34]=0.291
UFF_D_ENERGY[35]=0.251
UFF_D_ENERGY[36]=0.22
UFF_D_ENERGY[37]=0.04
UFF_D_ENERGY[38]=0.235
UFF_D_ENERGY[39]=0.072
UFF_D_ENERGY[40]=0.069
UFF_D_ENERGY[41]=0.059
UFF_D_ENERGY[42]=0.056
UFF_D_ENERGY[43]=0.048
UFF_D_ENERGY[44]=0.056
UFF_D_ENERGY[45]=0.053
UFF_D_ENERGY[46]=0.048
UFF_D_ENERGY[47]=0.036
UFF_D_ENERGY[48]=0.228
UFF_D_ENERGY[49]=0.599
UFF_D_ENERGY[50]=0.567
UFF_D_ENERGY[51]=0.449
UFF_D_ENERGY[52]=0.398
UFF_D_ENERGY[53]=0.339
UFF_D_ENERGY[54]=0.332
UFF_D_ENERGY[55]=0.045
UFF_D_ENERGY[56]=0.364
UFF_D_ENERGY[57]=0.017
UFF_D_ENERGY[58]=0.013
UFF_D_ENERGY[59]=0.01
UFF_D_ENERGY[60]=0.01
UFF_D_ENERGY[61]=0.009
UFF_D_ENERGY[62]=0.008
UFF_D_ENERGY[63]=0.008
UFF_D_ENERGY[64]=0.009
UFF_D_ENERGY[65]=0.007
UFF_D_ENERGY[66]=0.007
UFF_D_ENERGY[67]=0.007
UFF_D_ENERGY[68]=0.007
UFF_D_ENERGY[69]=0.006
UFF_D_ENERGY[70]=0.228
UFF_D_ENERGY[71]=0.041
UFF_D_ENERGY[72]=0.072
UFF_D_ENERGY[73]=0.081
UFF_D_ENERGY[74]=0.067
UFF_D_ENERGY[75]=0.066
UFF_D_ENERGY[76]=0.037
UFF_D_ENERGY[77]=0.073
UFF_D_ENERGY[78]=0.08
UFF_D_ENERGY[79]=0.039
UFF_D_ENERGY[80]=0.385
UFF_D_ENERGY[81]=0.68
UFF_D_ENERGY[82]=0.663
UFF_D_ENERGY[83]=0.518
UFF_D_ENERGY[84]=0.325
UFF_D_ENERGY[85]=0.284
UFF_D_ENERGY[86]=0.248
UFF_D_ENERGY[87]=0.05
UFF_D_ENERGY[88]=0.404
UFF_D_ENERGY[89]=0.033
UFF_D_ENERGY[90]=0.026
UFF_D_ENERGY[91]=0.022
UFF_D_ENERGY[92]=0.022
UFF_D_ENERGY[93]=0.019
UFF_D_ENERGY[94]=0.016
UFF_D_ENERGY[95]=0.014
UFF_D_ENERGY[96]=0.013
UFF_D_ENERGY[97]=0.013
UFF_D_ENERGY[98]=0.013
UFF_D_ENERGY[99]=0.012
UFF_D_ENERGY[100]=0.012
UFF_D_ENERGY[101]=0.011
UFF_D_ENERGY[102]=0.011
UFF_D_ENERGY[103]=0.011

# convert UFF D energy to hartree
UFF_D_ENERGY = UFF_D_ENERGY/au.KCALPERMOL

UFF_NTYPES = np.ones(len(PERIODIC_TABLE),dtype=int) #[1]*len(PERIODIC_TABLE)
UFF_NTYPES[1]=2
UFF_NTYPES[5]=2
UFF_NTYPES[6]=4
UFF_NTYPES[7]=4
UFF_NTYPES[8]=5
UFF_NTYPES[15]=3
UFF_NTYPES[16]=5
UFF_NTYPES[22]=2
UFF_NTYPES[26]=2
UFF_NTYPES[42]=2
UFF_NTYPES[74]=3
UFF_NTYPES[75]=2

UFF_COV_RADII = np.ones((len(PERIODIC_TABLE),5),dtype=float)
UFF_COV_RADII[1][0]=0.354
UFF_COV_RADII[1][1]=0.46
UFF_COV_RADII[2][0]=0.849
UFF_COV_RADII[3][0]=1.336
UFF_COV_RADII[4][0]=1.074
UFF_COV_RADII[5][0]=0.838
UFF_COV_RADII[5][1]=0.828
UFF_COV_RADII[6][0]=0.757
UFF_COV_RADII[6][1]=0.729
UFF_COV_RADII[6][2]=0.732
UFF_COV_RADII[6][3]=0.706
UFF_COV_RADII[7][0]=0.7
UFF_COV_RADII[7][1]=0.699
UFF_COV_RADII[7][2]=0.685
UFF_COV_RADII[7][3]=0.656
UFF_COV_RADII[8][0]=0.658
UFF_COV_RADII[8][1]=0.528
UFF_COV_RADII[8][2]=0.68
UFF_COV_RADII[8][3]=0.634
UFF_COV_RADII[8][4]=0.639
UFF_COV_RADII[9][0]=0.668
UFF_COV_RADII[10][0]=0.92
UFF_COV_RADII[11][0]=1.539
UFF_COV_RADII[12][0]=1.421
UFF_COV_RADII[13][0]=1.244
UFF_COV_RADII[14][0]=1.117
UFF_COV_RADII[15][0]=1.101
UFF_COV_RADII[15][1]=1.056
UFF_COV_RADII[15][2]=1.056
UFF_COV_RADII[16][0]=1.064
UFF_COV_RADII[16][1]=1.049
UFF_COV_RADII[16][2]=1.027
UFF_COV_RADII[16][3]=1.077
UFF_COV_RADII[16][4]=0.854
UFF_COV_RADII[17][0]=1.044
UFF_COV_RADII[18][0]=1.032
UFF_COV_RADII[19][0]=1.953
UFF_COV_RADII[20][0]=1.761
UFF_COV_RADII[21][0]=1.513
UFF_COV_RADII[22][0]=1.412
UFF_COV_RADII[22][1]=1.412
UFF_COV_RADII[23][0]=1.402
UFF_COV_RADII[24][0]=1.345
UFF_COV_RADII[25][0]=1.382
UFF_COV_RADII[26][0]=1.27
UFF_COV_RADII[26][1]=1.335
UFF_COV_RADII[27][0]=1.241
UFF_COV_RADII[28][0]=1.164
UFF_COV_RADII[29][0]=1.302
UFF_COV_RADII[30][0]=1.193
UFF_COV_RADII[31][0]=1.26
UFF_COV_RADII[32][0]=1.197
UFF_COV_RADII[33][0]=1.211
UFF_COV_RADII[34][0]=1.19
UFF_COV_RADII[35][0]=1.192
UFF_COV_RADII[36][0]=1.147
UFF_COV_RADII[37][0]=2.26
UFF_COV_RADII[38][0]=2.052
UFF_COV_RADII[39][0]=1.698
UFF_COV_RADII[40][0]=1.564
UFF_COV_RADII[41][0]=1.473
UFF_COV_RADII[42][0]=1.467
UFF_COV_RADII[42][1]=1.484
UFF_COV_RADII[43][0]=1.322
UFF_COV_RADII[44][0]=1.478
UFF_COV_RADII[45][0]=1.332
UFF_COV_RADII[46][0]=1.338
UFF_COV_RADII[47][0]=1.386
UFF_COV_RADII[48][0]=1.403
UFF_COV_RADII[49][0]=1.459
UFF_COV_RADII[50][0]=1.398
UFF_COV_RADII[51][0]=1.407
UFF_COV_RADII[52][0]=1.386
UFF_COV_RADII[53][0]=1.382
UFF_COV_RADII[54][0]=1.267
UFF_COV_RADII[55][0]=2.57
UFF_COV_RADII[56][0]=2.277
UFF_COV_RADII[57][0]=1.943
UFF_COV_RADII[58][0]=1.841
UFF_COV_RADII[59][0]=1.823
UFF_COV_RADII[60][0]=1.816
UFF_COV_RADII[61][0]=1.801
UFF_COV_RADII[62][0]=1.78
UFF_COV_RADII[63][0]=1.771
UFF_COV_RADII[64][0]=1.735
UFF_COV_RADII[65][0]=1.732
UFF_COV_RADII[66][0]=1.71
UFF_COV_RADII[67][0]=1.696
UFF_COV_RADII[68][0]=1.673
UFF_COV_RADII[69][0]=1.66
UFF_COV_RADII[70][0]=1.637
UFF_COV_RADII[71][0]=1.671
UFF_COV_RADII[72][0]=1.611
UFF_COV_RADII[73][0]=1.511
UFF_COV_RADII[74][0]=1.392
UFF_COV_RADII[74][1]=1.526
UFF_COV_RADII[74][2]=1.38
UFF_COV_RADII[75][0]=1.372
UFF_COV_RADII[75][1]=1.314
UFF_COV_RADII[76][0]=1.372
UFF_COV_RADII[77][0]=1.371
UFF_COV_RADII[78][0]=1.364
UFF_COV_RADII[79][0]=1.262
UFF_COV_RADII[80][0]=1.34
UFF_COV_RADII[81][0]=1.518
UFF_COV_RADII[82][0]=1.459
UFF_COV_RADII[83][0]=1.512
UFF_COV_RADII[84][0]=1.5
UFF_COV_RADII[85][0]=1.545
UFF_COV_RADII[86][0]=1.42
UFF_COV_RADII[87][0]=2.88
UFF_COV_RADII[88][0]=2.512
UFF_COV_RADII[89][0]=1.983
UFF_COV_RADII[90][0]=1.721
UFF_COV_RADII[91][0]=1.711
UFF_COV_RADII[92][0]=1.684
UFF_COV_RADII[93][0]=1.666
UFF_COV_RADII[94][0]=1.657
UFF_COV_RADII[95][0]=1.66
UFF_COV_RADII[96][0]=1.801
UFF_COV_RADII[97][0]=1.761
UFF_COV_RADII[98][0]=1.75
UFF_COV_RADII[99][0]=1.724
UFF_COV_RADII[100][0]=1.712
UFF_COV_RADII[101][0]=1.689
UFF_COV_RADII[102][0]=1.679
UFF_COV_RADII[103][0]=1.698

UFF_COV_RADII = UFF_COV_RADII/au.ANG


UFF_COV_ANGLE = 180.*np.ones((len(PERIODIC_TABLE),5),dtype=float)
UFF_COV_ANGLE[1][0]=180.0
UFF_COV_ANGLE[1][1]=83.5
UFF_COV_ANGLE[2][0]=90.0
UFF_COV_ANGLE[3][0]=180.0
UFF_COV_ANGLE[4][0]=109.47
UFF_COV_ANGLE[5][0]=109.47
UFF_COV_ANGLE[5][1]=120.0
UFF_COV_ANGLE[6][0]=109.47
UFF_COV_ANGLE[6][1]=120.0
UFF_COV_ANGLE[6][2]=120.0
UFF_COV_ANGLE[6][3]=180.0
UFF_COV_ANGLE[7][0]=106.7
UFF_COV_ANGLE[7][1]=120.0
UFF_COV_ANGLE[7][2]=111.2
UFF_COV_ANGLE[7][3]=180.0
UFF_COV_ANGLE[8][0]=104.51
UFF_COV_ANGLE[8][1]=146.0
UFF_COV_ANGLE[8][2]=110.0
UFF_COV_ANGLE[8][3]=120.0
UFF_COV_ANGLE[8][4]=180.0
UFF_COV_ANGLE[9][0]=180.0
UFF_COV_ANGLE[10][0]=90.0
UFF_COV_ANGLE[11][0]=180.0
UFF_COV_ANGLE[12][0]=109.47
UFF_COV_ANGLE[13][0]=109.47
UFF_COV_ANGLE[14][0]=109.47
UFF_COV_ANGLE[15][0]=93.8
UFF_COV_ANGLE[15][1]=109.47
UFF_COV_ANGLE[15][2]=109.47
UFF_COV_ANGLE[16][0]=92.1
UFF_COV_ANGLE[16][1]=103.2
UFF_COV_ANGLE[16][2]=109.47
UFF_COV_ANGLE[16][3]=92.2
UFF_COV_ANGLE[16][4]=120.0
UFF_COV_ANGLE[17][0]=180.0
UFF_COV_ANGLE[18][0]=90.0
UFF_COV_ANGLE[19][0]=180.0
UFF_COV_ANGLE[20][0]=90.0
UFF_COV_ANGLE[21][0]=109.47
UFF_COV_ANGLE[22][0]=109.47
UFF_COV_ANGLE[22][1]=90.0
UFF_COV_ANGLE[23][0]=109.47
UFF_COV_ANGLE[24][0]=90.0
UFF_COV_ANGLE[25][0]=90.0
UFF_COV_ANGLE[26][0]=109.47
UFF_COV_ANGLE[26][1]=90.0
UFF_COV_ANGLE[27][0]=90.0
UFF_COV_ANGLE[28][0]=90.0
UFF_COV_ANGLE[29][0]=109.47
UFF_COV_ANGLE[30][0]=109.47
UFF_COV_ANGLE[31][0]=109.47
UFF_COV_ANGLE[32][0]=109.47
UFF_COV_ANGLE[33][0]=92.1
UFF_COV_ANGLE[34][0]=90.6
UFF_COV_ANGLE[35][0]=180.0
UFF_COV_ANGLE[36][0]=90.0
UFF_COV_ANGLE[37][0]=180.0
UFF_COV_ANGLE[38][0]=90.0
UFF_COV_ANGLE[39][0]=109.47
UFF_COV_ANGLE[40][0]=109.47
UFF_COV_ANGLE[41][0]=109.47
UFF_COV_ANGLE[42][0]=90.0
UFF_COV_ANGLE[42][1]=109.47
UFF_COV_ANGLE[43][0]=90.0
UFF_COV_ANGLE[44][0]=90.0
UFF_COV_ANGLE[45][0]=90.0
UFF_COV_ANGLE[46][0]=90.0
UFF_COV_ANGLE[47][0]=180.0
UFF_COV_ANGLE[48][0]=109.47
UFF_COV_ANGLE[49][0]=109.47
UFF_COV_ANGLE[50][0]=109.47
UFF_COV_ANGLE[51][0]=91.6
UFF_COV_ANGLE[52][0]=90.25
UFF_COV_ANGLE[53][0]=180.0
UFF_COV_ANGLE[54][0]=90.0
UFF_COV_ANGLE[55][0]=180.0
UFF_COV_ANGLE[56][0]=90.0
UFF_COV_ANGLE[57][0]=109.47
UFF_COV_ANGLE[58][0]=90.0
UFF_COV_ANGLE[59][0]=90.0
UFF_COV_ANGLE[60][0]=90.0
UFF_COV_ANGLE[61][0]=90.0
UFF_COV_ANGLE[62][0]=90.0
UFF_COV_ANGLE[63][0]=90.0
UFF_COV_ANGLE[64][0]=90.0
UFF_COV_ANGLE[65][0]=90.0
UFF_COV_ANGLE[66][0]=90.0
UFF_COV_ANGLE[67][0]=90.0
UFF_COV_ANGLE[68][0]=90.0
UFF_COV_ANGLE[69][0]=90.0
UFF_COV_ANGLE[70][0]=90.0
UFF_COV_ANGLE[71][0]=90.0
UFF_COV_ANGLE[72][0]=109.47
UFF_COV_ANGLE[73][0]=109.47
UFF_COV_ANGLE[74][0]=90.0
UFF_COV_ANGLE[74][1]=109.47
UFF_COV_ANGLE[74][2]=109.47
UFF_COV_ANGLE[75][0]=90.0
UFF_COV_ANGLE[75][1]=109.47
UFF_COV_ANGLE[76][0]=90.0
UFF_COV_ANGLE[77][0]=90.0
UFF_COV_ANGLE[78][0]=90.0
UFF_COV_ANGLE[79][0]=90.0
UFF_COV_ANGLE[80][0]=180.0
UFF_COV_ANGLE[81][0]=120.0
UFF_COV_ANGLE[82][0]=109.47
UFF_COV_ANGLE[83][0]=90.0
UFF_COV_ANGLE[84][0]=90.0
UFF_COV_ANGLE[85][0]=180.0
UFF_COV_ANGLE[86][0]=90.0
UFF_COV_ANGLE[87][0]=180.0
UFF_COV_ANGLE[88][0]=90.0
UFF_COV_ANGLE[89][0]=90.0
UFF_COV_ANGLE[90][0]=90.0
UFF_COV_ANGLE[91][0]=90.0
UFF_COV_ANGLE[92][0]=90.0
UFF_COV_ANGLE[93][0]=90.0
UFF_COV_ANGLE[94][0]=90.0
UFF_COV_ANGLE[95][0]=90.0
UFF_COV_ANGLE[96][0]=90.0
UFF_COV_ANGLE[97][0]=90.0
UFF_COV_ANGLE[98][0]=90.0
UFF_COV_ANGLE[99][0]=90.0
UFF_COV_ANGLE[100][0]=90.0
UFF_COV_ANGLE[101][0]=90.0
UFF_COV_ANGLE[102][0]=90.0
UFF_COV_ANGLE[103][0]=90.0

UFF_MAX_COORDINATION = np.zeros(len(PERIODIC_TABLE),dtype=int)
UFF_MAX_COORDINATION[1] = 1
UFF_MAX_COORDINATION[2] = 4
UFF_MAX_COORDINATION[3] = 1
UFF_MAX_COORDINATION[4] = 4
UFF_MAX_COORDINATION[5] = 4
UFF_MAX_COORDINATION[6] = 4
UFF_MAX_COORDINATION[7] = 4
UFF_MAX_COORDINATION[8] = 2
UFF_MAX_COORDINATION[9] = 1
UFF_MAX_COORDINATION[10] = 4
UFF_MAX_COORDINATION[11] = 1
UFF_MAX_COORDINATION[12] = 4
UFF_MAX_COORDINATION[13] = 4
UFF_MAX_COORDINATION[14] = 4
UFF_MAX_COORDINATION[15] = 4
UFF_MAX_COORDINATION[16] = 4
UFF_MAX_COORDINATION[17] = 1
UFF_MAX_COORDINATION[18] = 4
UFF_MAX_COORDINATION[19] = 1
UFF_MAX_COORDINATION[20] = 6
UFF_MAX_COORDINATION[21] = 4
UFF_MAX_COORDINATION[22] = 6
UFF_MAX_COORDINATION[23] = 4
UFF_MAX_COORDINATION[24] = 6
UFF_MAX_COORDINATION[25] = 6
UFF_MAX_COORDINATION[26] = 6
UFF_MAX_COORDINATION[27] = 6
UFF_MAX_COORDINATION[28] = 4
UFF_MAX_COORDINATION[29] = 4
UFF_MAX_COORDINATION[30] = 4
UFF_MAX_COORDINATION[31] = 4
UFF_MAX_COORDINATION[32] = 4
UFF_MAX_COORDINATION[33] = 4
UFF_MAX_COORDINATION[34] = 4
UFF_MAX_COORDINATION[35] = 1
UFF_MAX_COORDINATION[36] = 4
UFF_MAX_COORDINATION[37] = 1
UFF_MAX_COORDINATION[38] = 6
UFF_MAX_COORDINATION[39] = 4
UFF_MAX_COORDINATION[40] = 4
UFF_MAX_COORDINATION[41] = 4
UFF_MAX_COORDINATION[42] = 6
UFF_MAX_COORDINATION[43] = 6
UFF_MAX_COORDINATION[44] = 6
UFF_MAX_COORDINATION[45] = 6
UFF_MAX_COORDINATION[46] = 4
UFF_MAX_COORDINATION[47] = 2
UFF_MAX_COORDINATION[48] = 4
UFF_MAX_COORDINATION[49] = 4
UFF_MAX_COORDINATION[50] = 4
UFF_MAX_COORDINATION[51] = 4
UFF_MAX_COORDINATION[52] = 4
UFF_MAX_COORDINATION[53] = 1
UFF_MAX_COORDINATION[54] = 4
UFF_MAX_COORDINATION[55] = 1
UFF_MAX_COORDINATION[56] = 6
UFF_MAX_COORDINATION[72] = 4
UFF_MAX_COORDINATION[73] = 4
UFF_MAX_COORDINATION[74] = 6
UFF_MAX_COORDINATION[75] = 6
UFF_MAX_COORDINATION[76] = 6
UFF_MAX_COORDINATION[77] = 6
UFF_MAX_COORDINATION[78] = 4
UFF_MAX_COORDINATION[79] = 4
UFF_MAX_COORDINATION[80] = 2
UFF_MAX_COORDINATION[81] = 4
UFF_MAX_COORDINATION[82] = 4
UFF_MAX_COORDINATION[83] = 3
UFF_MAX_COORDINATION[84] = 4
UFF_MAX_COORDINATION[85] = 1
UFF_MAX_COORDINATION[86] = 4
UFF_MAX_COORDINATION[87] = 1
UFF_MAX_COORDINATION[88] = 6
UFF_MAX_COORDINATION[57] = 4
UFF_MAX_COORDINATION[58] = 6
UFF_MAX_COORDINATION[59] = 6
UFF_MAX_COORDINATION[60] = 6
UFF_MAX_COORDINATION[61] = 6
UFF_MAX_COORDINATION[62] = 6
UFF_MAX_COORDINATION[63] = 6
UFF_MAX_COORDINATION[64] = 6
UFF_MAX_COORDINATION[65] = 6
UFF_MAX_COORDINATION[66] = 6
UFF_MAX_COORDINATION[67] = 6
UFF_MAX_COORDINATION[68] = 6
UFF_MAX_COORDINATION[69] = 6
UFF_MAX_COORDINATION[70] = 6
UFF_MAX_COORDINATION[71] = 6
UFF_MAX_COORDINATION[89] = 6
UFF_MAX_COORDINATION[90] = 6
UFF_MAX_COORDINATION[91] = 6
UFF_MAX_COORDINATION[92] = 6
UFF_MAX_COORDINATION[93] = 6
UFF_MAX_COORDINATION[94] = 6
UFF_MAX_COORDINATION[95] = 6
UFF_MAX_COORDINATION[96] = 6
UFF_MAX_COORDINATION[97] = 6
UFF_MAX_COORDINATION[98] = 6
UFF_MAX_COORDINATION[99] = 6
UFF_MAX_COORDINATION[100] = 6
UFF_MAX_COORDINATION[101] = 6
UFF_MAX_COORDINATION[102] = 6
UFF_MAX_COORDINATION[103] = 6

# chemical blocks
# 0: H
# 1: CNOPS+Se
# 2: halogens
# 3: alkali metals
# 4: alkaline earth metals
# 5: transition metals
# 6: post-transition metals
# 7: metalloids
# 8: lanthanides
# 9: actinides
# 10: noble gases
CHEMICAL_BLOCKS_NAMES = ['H','CNOPSSe','halogens','alkali','alkaline','transition_metals','post_metals','metalloids','lanthanides','actinides','noble gases']
CHEMICAL_BLOCKS_NAMES = [b.strip().upper() for b in CHEMICAL_BLOCKS_NAMES]

CHEMICAL_BLOCKS = -np.ones(len(PERIODIC_TABLE)+1,dtype=int)
CHEMICAL_BLOCKS[1] = 0
CHEMICAL_BLOCKS[2] = 10
CHEMICAL_BLOCKS[3] = 3
CHEMICAL_BLOCKS[4] = 4
CHEMICAL_BLOCKS[5] = 7
CHEMICAL_BLOCKS[6] = 1
CHEMICAL_BLOCKS[7] = 1
CHEMICAL_BLOCKS[8] = 1
CHEMICAL_BLOCKS[9] = 2
CHEMICAL_BLOCKS[10] = 10
CHEMICAL_BLOCKS[11] = 3
CHEMICAL_BLOCKS[12] = 4
CHEMICAL_BLOCKS[13] = 6
CHEMICAL_BLOCKS[14] = 7
CHEMICAL_BLOCKS[15] = 1
CHEMICAL_BLOCKS[16] = 1
CHEMICAL_BLOCKS[17] = 2
CHEMICAL_BLOCKS[18] = 10
CHEMICAL_BLOCKS[19] = 3
CHEMICAL_BLOCKS[20] = 4
CHEMICAL_BLOCKS[21] = 5
CHEMICAL_BLOCKS[22] = 5
CHEMICAL_BLOCKS[23] = 5
CHEMICAL_BLOCKS[24] = 5
CHEMICAL_BLOCKS[25] = 5
CHEMICAL_BLOCKS[26] = 5
CHEMICAL_BLOCKS[27] = 5
CHEMICAL_BLOCKS[28] = 5
CHEMICAL_BLOCKS[29] = 5
CHEMICAL_BLOCKS[30] = 5
CHEMICAL_BLOCKS[31] = 6
CHEMICAL_BLOCKS[32] = 7
CHEMICAL_BLOCKS[33] = 7
CHEMICAL_BLOCKS[34] = 1
CHEMICAL_BLOCKS[35] = 2
CHEMICAL_BLOCKS[36] = 10
CHEMICAL_BLOCKS[37] = 3
CHEMICAL_BLOCKS[38] = 4
CHEMICAL_BLOCKS[39] = 5
CHEMICAL_BLOCKS[40] = 5
CHEMICAL_BLOCKS[41] = 5
CHEMICAL_BLOCKS[42] = 5
CHEMICAL_BLOCKS[43] = 5
CHEMICAL_BLOCKS[44] = 5
CHEMICAL_BLOCKS[45] = 5
CHEMICAL_BLOCKS[46] = 5
CHEMICAL_BLOCKS[47] = 5
CHEMICAL_BLOCKS[48] = 5
CHEMICAL_BLOCKS[49] = 6
CHEMICAL_BLOCKS[50] = 6
CHEMICAL_BLOCKS[51] = 7
CHEMICAL_BLOCKS[52] = 7
CHEMICAL_BLOCKS[53] = 2
CHEMICAL_BLOCKS[54] = 10
CHEMICAL_BLOCKS[55] = 3
CHEMICAL_BLOCKS[56] = 4
CHEMICAL_BLOCKS[57] = 8
CHEMICAL_BLOCKS[58] = 8
CHEMICAL_BLOCKS[59] = 8
CHEMICAL_BLOCKS[60] = 8
CHEMICAL_BLOCKS[61] = 8
CHEMICAL_BLOCKS[62] = 8
CHEMICAL_BLOCKS[63] = 8
CHEMICAL_BLOCKS[64] = 8
CHEMICAL_BLOCKS[65] = 8
CHEMICAL_BLOCKS[66] = 8
CHEMICAL_BLOCKS[67] = 8
CHEMICAL_BLOCKS[68] = 8
CHEMICAL_BLOCKS[69] = 8
CHEMICAL_BLOCKS[70] = 8
CHEMICAL_BLOCKS[71] = 8
CHEMICAL_BLOCKS[72] = 5
CHEMICAL_BLOCKS[73] = 5
CHEMICAL_BLOCKS[74] = 5
CHEMICAL_BLOCKS[75] = 5
CHEMICAL_BLOCKS[76] = 5
CHEMICAL_BLOCKS[77] = 5
CHEMICAL_BLOCKS[78] = 5
CHEMICAL_BLOCKS[79] = 5
CHEMICAL_BLOCKS[80] = 5
CHEMICAL_BLOCKS[81] = 6
CHEMICAL_BLOCKS[82] = 6
CHEMICAL_BLOCKS[83] = 6
CHEMICAL_BLOCKS[84] = 6
CHEMICAL_BLOCKS[85] = 2
CHEMICAL_BLOCKS[86] = 10
CHEMICAL_BLOCKS[87] = 3
CHEMICAL_BLOCKS[88] = 4
CHEMICAL_BLOCKS[89] = 9
CHEMICAL_BLOCKS[90] = 9
CHEMICAL_BLOCKS[91] = 9
CHEMICAL_BLOCKS[92] = 9
CHEMICAL_BLOCKS[93] = 9
CHEMICAL_BLOCKS[94] = 9
CHEMICAL_BLOCKS[95] = 9
CHEMICAL_BLOCKS[96] = 9
CHEMICAL_BLOCKS[97] = 9
CHEMICAL_BLOCKS[98] = 9
CHEMICAL_BLOCKS[99] = 9
CHEMICAL_BLOCKS[100] = 9
CHEMICAL_BLOCKS[101] = 9
CHEMICAL_BLOCKS[102] = 9
CHEMICAL_BLOCKS[103] = 9
CHEMICAL_BLOCKS[104] = 5
CHEMICAL_BLOCKS[105] = 5
CHEMICAL_BLOCKS[106] = 5
CHEMICAL_BLOCKS[107] = 5
CHEMICAL_BLOCKS[108] = 5
CHEMICAL_BLOCKS[109] = 5
CHEMICAL_BLOCKS[110] = 5
CHEMICAL_BLOCKS[111] = 5
CHEMICAL_BLOCKS[112] = 5
CHEMICAL_BLOCKS[113] = 6
CHEMICAL_BLOCKS[114] = 6
CHEMICAL_BLOCKS[115] = 6
CHEMICAL_BLOCKS[116] = 6
CHEMICAL_BLOCKS[117] = 2
CHEMICAL_BLOCKS[118] = 10


CHEMICAL_PROPERTIES = {
    "ATOMIC_NUMBER": [i for i in range(len(PERIODIC_TABLE))],
    "ATOMIC_MASSES": ATOMIC_MASSES,
    "EL_STRUCT": EL_STRUCT,
    "VALENCE_STRUCTURE": VALENCE_STRUCTURE,
    "VALENCE_ELECTRONS": VALENCE_ELECTRONS,
    "D3_ELECTRONEGATIVITIES": D3_ELECTRONEGATIVITIES,
    "D3_HARDNESSES": D3_HARDNESSES,
    "D3_KAPPA": D3_KAPPA,
    "D3_VDW_RADII": D3_VDW_RADII,
    "D3_COV_RADII": D3_COV_RADII,
    "VDW_RADII": VDW_RADII,
    "C6_FREE": C6_FREE,
    "POLARIZABILITIES": POLARIZABILITIES,
    "PAULING_ELECTRONEGATIVITY": PAULING_ELECTRONEGATIVITY,
    "SJS_COORDINATES": SJS_COORDINATES,
    "ATOMIC_IONIZATION_ENERGY": ATOMIC_IONIZATION_ENERGY,
    "ATOMIC_ELECTRON_AFFINITY": ATOMIC_ELECTRON_AFFINITY,
    "GTO_EXPONENTS": GTO_EXPONENTS,
    "MULTIPLICITY": MULTIPLICITIES,
    "OXIDATION_STATES": OXIDATION_STATES,
}

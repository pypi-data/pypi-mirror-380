
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class DisablePeerConnectedBot(TLRequest[bool]):
    """
    Permanently disconnect a specific chat from all [business bots](https://core.telegram.org/api/business#connected-bots) (equivalent to specifying it in recipients.exclude_users during initial configuration with [account.updateConnectedBot](https://core.telegram.org/method/account.updateConnectedBot)); to reconnect of a chat disconnected using this method the user must reconnect the entire bot by invoking [account.updateConnectedBot](https://core.telegram.org/method/account.updateConnectedBot).

    Raises:
        `400`BotAlreadyDisabledError: The connected business bot was already disabled for the specified peer.
        `400`BotNotConnectedYetError: No [business bot](https://core.telegram.org/api/business#connected-bots) is connected to the currently logged in user.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0X5E437ED9
    _result_id = 0X43B904E1

    def __init__(
        self,
        peer: 'TypeInputPeer'
    ):

        """
        Permanently disconnect a specific chat from all [business bots](https://core.telegram.org/api/business#connected-bots) (equivalent to specifying it in recipients.exclude_users during initial configuration with [account.updateConnectedBot](https://core.telegram.org/method/account.updateConnectedBot)); to reconnect of a chat disconnected using this method the user must reconnect the entire bot by invoking [account.updateConnectedBot](https://core.telegram.org/method/account.updateConnectedBot).

        Args:
            peer ('TypeInputPeer'): The chat to disconnect
        """

        self.peer = peer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd9~C^' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )

            return writer.getvalue()
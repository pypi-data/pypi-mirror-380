
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.help.user_info import TypeHelpUserInfo


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser
    from ...types.message_entity import TypeMessageEntity


class EditUserInfo(TLRequest[TypeHelpUserInfo]):
    """
    Internal use

    Raises:
        `400`EntityBoundsInvalidError: A specified [entity offset or length](https://core.telegram.org/api/entities#entity-length) is invalid, see [here &raquo;](https://core.telegram.org/api/entities#entity-length) for info on how to properly compute the entity offset/length.
        `403`UserInvalidError: Invalid user provided.

    """

    _id = 0X66B91B70
    _result_id = 0X4485F05

    def __init__(
        self,
        user_id: 'TypeInputUser',
        message: str,
        entities: List['TypeMessageEntity']
    ):

        """
        Internal use

        Args:
            user_id ('TypeInputUser'): User
            message (str): Message
            entities (List['TypeMessageEntity']): [Message entities for styled text](https://core.telegram.org/api/entities)
        """

        self.user_id = user_id
        self.message = message
        self.entities = entities

    def to_bytes(self, boxed: bool=True):
        with Writer(b'p\x1b\xb9f' if boxed else b'') as writer:
            writer.object(
                self.user_id,
                group_id=0XB628962F
            )
            writer.string(self.message)
            writer.vector(
                self.entities,
                lambda value: writer.object(
                    value,
                    group_id=0X3CDFF38A
                )
            )

            return writer.getvalue()
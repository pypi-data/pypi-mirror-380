
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from .future_salt import TypeFutureSalt
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class FutureSalts(TLObject, family='TypeFutureSalts'):
    _id = 0XAE500895
    _group_id = 0XE61DEDD4

    def __init__(
        self,
        req_msg_id: int,
        now: int,
        salts: List[TypeFutureSalt]
    ):

        self.req_msg_id = req_msg_id
        self.now = now
        self.salts = salts

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x95\x08P\xae' if boxed else b'') as writer:
            writer.long(self.req_msg_id)
            writer.int(self.now)
            writer.vector(
                self.salts,
                lambda value: writer.object(
                    value,
                    boxed=False,
                    base_type=TypeFutureSalt
                ),
                boxed=False
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        req_msg_id_ = reader.long()
        now_ = reader.int()
        salts_ = reader.vector(
            lambda: reader.object(
                boxed=False,
                base_type=TypeFutureSalt
            ),
            boxed=False
        )

        return cls(
            req_msg_id=req_msg_id_,
            now=now_,
            salts=salts_
        )

TypeFutureSalts = FutureSalts
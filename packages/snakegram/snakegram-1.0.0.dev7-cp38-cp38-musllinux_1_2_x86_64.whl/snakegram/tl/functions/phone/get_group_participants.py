
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.phone.group_participants import TypePhoneGroupParticipants


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer
    from ...types.input_group_call import TypeInputGroupCall


class GetGroupParticipants(TLRequest[TypePhoneGroupParticipants]):
    """
    Get group call participants

    Raises:
        `400`GroupcallInvalidError: The specified group call is invalid.

    """

    _id = 0XC558D8AB
    _result_id = 0X752DA8B2

    def __init__(
        self,
        call: 'TypeInputGroupCall',
        ids: List['TypeInputPeer'],
        sources: List[int],
        offset: str,
        limit: int
    ):

        """
        Get group call participants

        Args:
            call ('TypeInputGroupCall'): Group call
            ids (List['TypeInputPeer']): If specified, will fetch group participant info about the specified peers
            sources (List[int]): If specified, will fetch group participant info about the specified WebRTC source IDs
            offset (str): Offset for results, taken from the next_offset field of [phone.groupParticipants](https://core.telegram.org/constructor/phone.groupParticipants), initially an empty string. Note: if no more results are available, the method call will return an empty next_offset; thus, avoid providing the next_offset returned in [phone.groupParticipants](https://core.telegram.org/constructor/phone.groupParticipants) if it is empty, to avoid an infinite loop.
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.call = call
        self.ids = ids
        self.sources = sources
        self.offset = offset
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xab\xd8X\xc5' if boxed else b'') as writer:
            writer.object(
                self.call,
                group_id=0XDA9A559A
            )
            writer.vector(
                self.ids,
                lambda value: writer.object(
                    value,
                    group_id=0X995DB9DF
                )
            )
            writer.vector(
                self.sources,
                writer.int
            )
            writer.string(self.offset)
            writer.int(self.limit)

            return writer.getvalue()
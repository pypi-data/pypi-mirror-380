
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .file_location import TypeFileLocation
    from ...gadgets.byteutils import Reader


class PhotoSizeEmpty(TLObject, family='TypePhotoSize'):
    _id = 0XE17E23C
    _group_id = 0X478D00B0

    def __init__(
        self,
        type: str
    ):

        self.type = type

    def to_bytes(self, boxed: bool=True):
        with Writer(b'<\xe2\x17\x0e' if boxed else b'') as writer:
            writer.string(self.type)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        type_ = reader.string()

        return cls(
            type=type_
        )

class PhotoSize(TLObject, family='TypePhotoSize'):
    _id = 0X77BFB61B
    _group_id = 0X478D00B0

    def __init__(
        self,
        type: str,
        location: 'TypeFileLocation',
        w: int,
        h: int,
        size: int
    ):

        self.type = type
        self.location = location
        self.w = w
        self.h = h
        self.size = size

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x1b\xb6\xbfw' if boxed else b'') as writer:
            writer.string(self.type)
            writer.object(
                self.location,
                group_id=0X926C7631
            )
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        type_ = reader.string()
        location_ = reader.object(
            group_id=0X926C7631
        )

        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()

        return cls(
            type=type_,
            location=location_,
            w=w_,
            h=h_,
            size=size_
        )

class PhotoCachedSize(TLObject, family='TypePhotoSize'):
    _id = 0XE9A734FA
    _group_id = 0X478D00B0

    def __init__(
        self,
        type: str,
        location: 'TypeFileLocation',
        w: int,
        h: int,
        bytes: bytes
    ):

        self.type = type
        self.location = location
        self.w = w
        self.h = h
        self.bytes = bytes

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xfa4\xa7\xe9' if boxed else b'') as writer:
            writer.string(self.type)
            writer.object(
                self.location,
                group_id=0X926C7631
            )
            writer.int(self.w)
            writer.int(self.h)
            writer.bytes(self.bytes)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        type_ = reader.string()
        location_ = reader.object(
            group_id=0X926C7631
        )

        w_ = reader.int()
        h_ = reader.int()
        bytes_ = reader.bytes()

        return cls(
            type=type_,
            location=location_,
            w=w_,
            h=h_,
            bytes=bytes_
        )

TypePhotoSize = Union[
    PhotoSizeEmpty,
    PhotoSize,
    PhotoCachedSize
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class InputPhotoEmpty(TLObject, family='TypeInputPhoto'):
    """
    Empty constructor.
    """

    _id = 0X1CD7BF0D
    _group_id = 0XB05DFB35


    def to_bytes(self, boxed: bool=True):
        return b'\r\xbf\xd7\x1c' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPhoto(TLObject, family='TypeInputPhoto'):
    """
    Defines a photo for further interaction.
    """

    _id = 0X3BB3B94A
    _group_id = 0XB05DFB35

    def __init__(
        self,
        id: int,
        access_hash: int,
        file_reference: bytes
    ):

        """
        Defines a photo for further interaction.

        Args:
            id (int): Photo identifier
            access_hash (int): access_hash value from the [photo](https://core.telegram.org/constructor/photo) constructor
            file_reference (bytes): [File reference](https://core.telegram.org/api/file_reference)
        """

        self.id = id
        self.access_hash = access_hash
        self.file_reference = file_reference

    def to_bytes(self, boxed: bool=True):
        with Writer(b'J\xb9\xb3;' if boxed else b'') as writer:
            writer.long(self.id)
            writer.long(self.access_hash)
            writer.bytes(self.file_reference)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        id_ = reader.long()
        access_hash_ = reader.long()
        file_reference_ = reader.bytes()

        return cls(
            id=id_,
            access_hash=access_hash_,
            file_reference=file_reference_
        )

TypeInputPhoto = Union[
    InputPhotoEmpty,
    InputPhoto
]
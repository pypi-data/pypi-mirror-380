
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class PQInnerDataDc(TLObject, family='TypePQInnerData'):
    _id = 0XA9F55F95
    _group_id = 0X28150717

    def __init__(
        self,
        pq: bytes,
        p: bytes,
        q: bytes,
        nonce: int,
        server_nonce: int,
        new_nonce: int,
        dc: int
    ):

        self.pq = pq
        self.p = p
        self.q = q
        self.nonce = nonce
        self.server_nonce = server_nonce
        self.new_nonce = new_nonce
        self.dc = dc

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x95_\xf5\xa9' if boxed else b'') as writer:
            writer.bytes(self.pq)
            writer.bytes(self.p)
            writer.bytes(self.q)
            writer.int128(self.nonce)
            writer.int128(self.server_nonce)
            writer.int256(self.new_nonce)
            writer.int(self.dc)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        pq_ = reader.bytes()
        p_ = reader.bytes()
        q_ = reader.bytes()
        nonce_ = reader.int128()
        server_nonce_ = reader.int128()
        new_nonce_ = reader.int256()
        dc_ = reader.int()

        return cls(
            pq=pq_,
            p=p_,
            q=q_,
            nonce=nonce_,
            server_nonce=server_nonce_,
            new_nonce=new_nonce_,
            dc=dc_
        )

class PQInnerDataTempDc(TLObject, family='TypePQInnerData'):
    _id = 0X56FDDF88
    _group_id = 0X28150717

    def __init__(
        self,
        pq: bytes,
        p: bytes,
        q: bytes,
        nonce: int,
        server_nonce: int,
        new_nonce: int,
        dc: int,
        expires_in: int
    ):

        self.pq = pq
        self.p = p
        self.q = q
        self.nonce = nonce
        self.server_nonce = server_nonce
        self.new_nonce = new_nonce
        self.dc = dc
        self.expires_in = expires_in

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x88\xdf\xfdV' if boxed else b'') as writer:
            writer.bytes(self.pq)
            writer.bytes(self.p)
            writer.bytes(self.q)
            writer.int128(self.nonce)
            writer.int128(self.server_nonce)
            writer.int256(self.new_nonce)
            writer.int(self.dc)
            writer.int(self.expires_in)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        pq_ = reader.bytes()
        p_ = reader.bytes()
        q_ = reader.bytes()
        nonce_ = reader.int128()
        server_nonce_ = reader.int128()
        new_nonce_ = reader.int256()
        dc_ = reader.int()
        expires_in_ = reader.int()

        return cls(
            pq=pq_,
            p=p_,
            q=q_,
            nonce=nonce_,
            server_nonce=server_nonce_,
            new_nonce=new_nonce_,
            dc=dc_,
            expires_in=expires_in_
        )

TypePQInnerData = Union[
    PQInnerDataDc,
    PQInnerDataTempDc
]
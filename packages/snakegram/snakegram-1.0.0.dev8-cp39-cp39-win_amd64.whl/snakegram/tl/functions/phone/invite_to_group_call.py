
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ...types.updates import TypeUpdates
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser
    from ...types.input_group_call import TypeInputGroupCall


class InviteToGroupCall(TLRequest[TypeUpdates]):
    """
    Invite a set of users to a group call.

    Raises:
        `403`ChatTypeInvalidError: The specified user type is invalid.
        `403`GroupcallForbiddenError: The group call has already ended.
        `403`UserNotParticipantError: You're not a member of this supergroup/channel.
        `400`GroupcallInvalidError: The specified group call is invalid.
        `400`InviteForbiddenWithJoinasError: If the user has anonymously joined a group call as a channel, they can't invite other users to the group call because that would cause deanonymization, because the invite would be sent using the original user ID, not the anonymized channel ID.
        `400`UserAlreadyInvitedError: You have already invited this user.

    """

    _id = 0X7B393160
    _result_id = 0XD68D29C0

    def __init__(
        self,
        call: 'TypeInputGroupCall',
        users: List['TypeInputUser']
    ):

        """
        Invite a set of users to a group call.

        Args:
            call ('TypeInputGroupCall'): The group call
            users (List['TypeInputUser']): The users to invite.
        """

        self.call = call
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'`19{' if boxed else b'') as writer:
            writer.object(
                self.call,
                group_id=0XDA9A559A
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0XB628962F
                )
            )

            return writer.getvalue()
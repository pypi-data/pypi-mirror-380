
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.chats import TypeMessagesChats


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser


class GetCommonChats(TLRequest[TypeMessagesChats]):
    """
    Get chats in common with a user

    Raises:
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`UserIdInvalidError: The provided user ID is invalid.

    """

    _id = 0XE40CA104
    _result_id = 0X23A4AC0E

    def __init__(
        self,
        user_id: 'TypeInputUser',
        max_id: int,
        limit: int
    ):

        """
        Get chats in common with a user

        Args:
            user_id ('TypeInputUser'): User ID
            max_id (int): Maximum ID of chat to return (see [pagination](https://core.telegram.org/api/offsets))
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.user_id = user_id
        self.max_id = max_id
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x04\xa1\x0c\xe4' if boxed else b'') as writer:
            writer.object(
                self.user_id,
                group_id=0XB628962F
            )
            writer.long(self.max_id)
            writer.int(self.limit)

            return writer.getvalue()
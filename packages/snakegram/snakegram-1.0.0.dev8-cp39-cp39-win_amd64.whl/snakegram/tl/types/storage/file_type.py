
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class FileUnknown(TLObject, family='TypeStorageFileType'):
    """
    Unknown type.
    """

    _id = 0XAA963B05
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\x05;\x96\xaa' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FilePartial(TLObject, family='TypeStorageFileType'):
    """
    Part of a bigger file.
    """

    _id = 0X40BC6F52
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'Ro\xbc@' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileJpeg(TLObject, family='TypeStorageFileType'):
    """
    JPEG image. MIME type: image/jpeg.
    """

    _id = 0X7EFE0E
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\x0e\xfe~\x00' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileGif(TLObject, family='TypeStorageFileType'):
    """
    GIF image. MIME type: image/gif.
    """

    _id = 0XCAE1AADF
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\xdf\xaa\xe1\xca' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FilePng(TLObject, family='TypeStorageFileType'):
    """
    PNG image. MIME type: image/png.
    """

    _id = 0XA4F63C0
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\xc0cO\n' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FilePdf(TLObject, family='TypeStorageFileType'):
    """
    PDF document image. MIME type: application/pdf.
    """

    _id = 0XAE1E508D
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\x8dP\x1e\xae' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileMp3(TLObject, family='TypeStorageFileType'):
    """
    Mp3 audio. MIME type: audio/mpeg.
    """

    _id = 0X528A0677
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'w\x06\x8aR' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileMov(TLObject, family='TypeStorageFileType'):
    """
    Quicktime video. MIME type: video/quicktime.
    """

    _id = 0X4B09EBBC
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\xbc\xeb\tK' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileMp4(TLObject, family='TypeStorageFileType'):
    """
    MPEG-4 video. MIME type: video/mp4.
    """

    _id = 0XB3CEA0E4
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'\xe4\xa0\xce\xb3' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class FileWebp(TLObject, family='TypeStorageFileType'):
    """
    WEBP image. MIME type: image/webp.
    """

    _id = 0X1081464C
    _group_id = 0X903DE3AC


    def to_bytes(self, boxed: bool=True):
        return b'LF\x81\x10' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeStorageFileType = Union[
    FileUnknown,
    FilePartial,
    FileJpeg,
    FileGif,
    FilePng,
    FilePdf,
    FileMp3,
    FileMov,
    FileMp4,
    FileWebp
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class PeerUser(TLObject, family='TypePeer'):
    """
    Chat partner
    """

    _id = 0X59511722
    _group_id = 0XB4DECBCA

    def __init__(
        self,
        user_id: int
    ):

        """
        Chat partner

        Args:
            user_id (int): User identifier
        """

        self.user_id = user_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'"\x17QY' if boxed else b'') as writer:
            writer.long(self.user_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        user_id_ = reader.long()

        return cls(
            user_id=user_id_
        )

class PeerChat(TLObject, family='TypePeer'):
    """
    Group.
    """

    _id = 0X36C6019A
    _group_id = 0XB4DECBCA

    def __init__(
        self,
        chat_id: int
    ):

        """
        Group.

        Args:
            chat_id (int): Group identifier
        """

        self.chat_id = chat_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9a\x01\xc66' if boxed else b'') as writer:
            writer.long(self.chat_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        chat_id_ = reader.long()

        return cls(
            chat_id=chat_id_
        )

class PeerChannel(TLObject, family='TypePeer'):
    """
    Channel/supergroup
    """

    _id = 0XA2A5371E
    _group_id = 0XB4DECBCA

    def __init__(
        self,
        channel_id: int
    ):

        """
        Channel/supergroup

        Args:
            channel_id (int): Channel ID
        """

        self.channel_id = channel_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x1e7\xa5\xa2' if boxed else b'') as writer:
            writer.long(self.channel_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        channel_id_ = reader.long()

        return cls(
            channel_id=channel_id_
        )

TypePeer = Union[
    PeerUser,
    PeerChat,
    PeerChannel
]
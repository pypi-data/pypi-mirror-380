
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class QuickReply(TLObject, family='TypeQuickReply'):
    """
    A [quick reply shortcut](https://core.telegram.org/api/business#quick-reply-shortcuts).
    """

    _id = 0X697102B
    _group_id = 0XD6D497C7

    def __init__(
        self,
        shortcut_id: int,
        shortcut: str,
        top_message: int,
        count: int
    ):

        """
        A [quick reply shortcut](https://core.telegram.org/api/business#quick-reply-shortcuts).

        Args:
            shortcut_id (int): Unique shortcut ID.
            shortcut (str): Shortcut name.
            top_message (int): ID of the last message in the shortcut.
            count (int): Total number of messages in the shortcut.
        """

        self.shortcut_id = shortcut_id
        self.shortcut = shortcut
        self.top_message = top_message
        self.count = count

    def to_bytes(self, boxed: bool=True):
        with Writer(b'+\x10\x97\x06' if boxed else b'') as writer:
            writer.int(self.shortcut_id)
            writer.string(self.shortcut)
            writer.int(self.top_message)
            writer.int(self.count)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        shortcut_id_ = reader.int()
        shortcut_ = reader.string()
        top_message_ = reader.int()
        count_ = reader.int()

        return cls(
            shortcut_id=shortcut_id_,
            shortcut=shortcut_,
            top_message=top_message_,
            count=count_
        )

TypeQuickReply = QuickReply
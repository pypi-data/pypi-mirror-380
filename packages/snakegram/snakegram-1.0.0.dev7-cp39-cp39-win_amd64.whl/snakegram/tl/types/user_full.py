
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .photo import TypePhoto
    from .bot_info import TypeBotInfo
    from .birthday import TypeBirthday
    from .document import TypeDocument
    from .chat_theme import TypeChatTheme
    from .wall_paper import TypeWallPaper
    from .profile_tab import TypeProfileTab
    from .peer_stories import TypePeerStories
    from .stars_rating import TypeStarsRating
    from .peer_settings import TypePeerSettings
    from .business_intro import TypeBusinessIntro
    from .star_ref_program import TypeStarRefProgram
    from .bot_verification import TypeBotVerification
    from .chat_admin_rights import TypeChatAdminRights
    from .business_location import TypeBusinessLocation
    from .business_work_hours import TypeBusinessWorkHours
    from ...gadgets.byteutils import Reader
    from .peer_notify_settings import TypePeerNotifySettings
    from .business_away_message import TypeBusinessAwayMessage
    from .business_greeting_message import TypeBusinessGreetingMessage
    from .disallowed_gifts_settings import TypeDisallowedGiftsSettings


class UserFull(TLObject, family='TypeUserFull'):
    """
    Extended user info
    """

    _id = 0XC577B5AD
    _group_id = 0X5B1E34C9

    def __init__(
        self,
        id: int,
        settings: 'TypePeerSettings',
        notify_settings: 'TypePeerNotifySettings',
        common_chats_count: int,
        blocked: bool = False,
        phone_calls_available: bool = False,
        phone_calls_private: bool = False,
        can_pin_message: bool = False,
        has_scheduled: bool = False,
        video_calls_available: bool = False,
        voice_messages_forbidden: bool = False,
        translations_disabled: bool = False,
        stories_pinned_available: bool = False,
        blocked_my_stories_from: bool = False,
        wallpaper_overridden: bool = False,
        contact_require_premium: bool = False,
        read_dates_private: bool = False,
        sponsored_enabled: bool = False,
        can_view_revenue: bool = False,
        bot_can_manage_emoji_status: bool = False,
        display_gifts_button: bool = False,
        about: Optional[str] = None,
        personal_photo: Optional['TypePhoto'] = None,
        profile_photo: Optional['TypePhoto'] = None,
        fallback_photo: Optional['TypePhoto'] = None,
        bot_info: Optional['TypeBotInfo'] = None,
        pinned_msg_id: Optional[int] = None,
        folder_id: Optional[int] = None,
        ttl_period: Optional[int] = None,
        theme: Optional['TypeChatTheme'] = None,
        private_forward_name: Optional[str] = None,
        bot_group_admin_rights: Optional['TypeChatAdminRights'] = None,
        bot_broadcast_admin_rights: Optional['TypeChatAdminRights'] = None,
        wallpaper: Optional['TypeWallPaper'] = None,
        stories: Optional['TypePeerStories'] = None,
        business_work_hours: Optional['TypeBusinessWorkHours'] = None,
        business_location: Optional['TypeBusinessLocation'] = None,
        business_greeting_message: Optional['TypeBusinessGreetingMessage'] = None,
        business_away_message: Optional['TypeBusinessAwayMessage'] = None,
        business_intro: Optional['TypeBusinessIntro'] = None,
        birthday: Optional['TypeBirthday'] = None,
        personal_channel_id: Optional[int] = None,
        personal_channel_message: Optional[int] = None,
        stargifts_count: Optional[int] = None,
        starref_program: Optional['TypeStarRefProgram'] = None,
        bot_verification: Optional['TypeBotVerification'] = None,
        send_paid_messages_stars: Optional[int] = None,
        disallowed_gifts: Optional['TypeDisallowedGiftsSettings'] = None,
        stars_rating: Optional['TypeStarsRating'] = None,
        stars_my_pending_rating: Optional['TypeStarsRating'] = None,
        stars_my_pending_rating_date: Optional[int] = None,
        main_tab: Optional['TypeProfileTab'] = None,
        saved_music: Optional['TypeDocument'] = None
    ):

        """
        Extended user info

        Args:
            id (int): User ID
            settings ('TypePeerSettings'): Peer settings
            notify_settings ('TypePeerNotifySettings'): Notification settings
            common_chats_count (int): Chats in common with this user
            blocked (bool, optional): Whether you have blocked this user
            phone_calls_available (bool, optional): Whether this user can make VoIP calls
            phone_calls_private (bool, optional): Whether this user's privacy settings allow you to call them
            can_pin_message (bool, optional): Whether you can pin messages in the chat with this user, you can do this only for a chat with yourself
            has_scheduled (bool, optional): Whether [scheduled messages](https://core.telegram.org/api/scheduled-messages) are available
            video_calls_available (bool, optional): Whether the user can receive video calls
            voice_messages_forbidden (bool, optional): Whether this user doesn't allow sending voice messages in a private chat with them
            translations_disabled (bool, optional): Whether the [real-time chat translation popup](https://core.telegram.org/api/translation) should be hidden.
            stories_pinned_available (bool, optional): Whether this user has some [pinned stories](https://core.telegram.org/api/stories#pinned-or-archived-stories).
            blocked_my_stories_from (bool, optional): Whether we've [blocked this user, preventing them from seeing our stories](https://core.telegram.org/api/block).
            wallpaper_overridden (bool, optional): Whether the other user has chosen a custom wallpaper for us using [messages.setChatWallPaper](https://core.telegram.org/method/messages.setChatWallPaper) and the for_both flag, see [here](https://core.telegram.org/api/wallpapers#installing-wallpapers-in-a-specific-chat-or-channel) for more info.
            contact_require_premium (bool, optional): If set, we cannot write to this user: subscribe to [Telegram Premium](https://core.telegram.org/api/premium) to get permission to write to this user. To set this flag for ourselves invoke [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings), setting the settings.new_noncontact_peers_require_premium flag, see [here](https://core.telegram.org/api/privacy#require-premium-for-new-non-contact-users) for more info.
            read_dates_private (bool, optional): If set, we cannot fetch the exact read date of messages we send to this user using [messages.getOutboxReadDate](https://core.telegram.org/method/messages.getOutboxReadDate).  The exact read date of messages might still be unavailable for other reasons, see [here](https://core.telegram.org/method/messages.getOutboxReadDate) for more info.  To set this flag for ourselves invoke [account.setGlobalPrivacySettings](https://core.telegram.org/method/account.setGlobalPrivacySettings), setting the settings.hide_read_marks flag.
            sponsored_enabled (bool, optional): Whether ads were re-enabled for the current account (only accessible to the currently logged-in user), see [here](https://core.telegram.org/api/business#re-enable-ads) for more info.
            can_view_revenue (bool, optional): If set, this user can view [ad revenue statistics](https://core.telegram.org/api/revenue#revenue-statistics) for this bot.
            bot_can_manage_emoji_status (bool, optional): If set, this is a bot that can [change our emoji status](https://core.telegram.org/api/emoji-status#setting-an-emoji-status-from-a-bot)
            display_gifts_button (bool, optional): ...
            about (Optional[str], optional): Bio of the user
            personal_photo (Optional['TypePhoto'], optional): Personal profile photo, to be shown instead of profile_photo.
            profile_photo (Optional['TypePhoto'], optional): Profile photo
            fallback_photo (Optional['TypePhoto'], optional): Fallback profile photo, displayed if no photo is present in profile_photo or personal_photo, due to privacy settings.
            bot_info (Optional['TypeBotInfo'], optional): For bots, info about the bot (bot commands, etc)
            pinned_msg_id (Optional[int], optional): Message ID of the last [pinned message](https://core.telegram.org/api/pin)
            folder_id (Optional[int], optional): [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
            ttl_period (Optional[int], optional): Time To Live of all messages in this chat; once a message is this many seconds old, it must be deleted.
            theme (Optional['TypeChatTheme'], optional): ...
            private_forward_name (Optional[str], optional): Anonymized text to be shown instead of the user's name on forwarded messages
            bot_group_admin_rights (Optional['TypeChatAdminRights'], optional): A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a group, see [here for more info on how to handle them](https://core.telegram.org/api/rights#suggested-bot-rights).
            bot_broadcast_admin_rights (Optional['TypeChatAdminRights'], optional): A [suggested set of administrator rights](https://core.telegram.org/api/rights#suggested-bot-rights) for the bot, to be shown when adding the bot as admin to a channel, see [here for more info on how to handle them](https://core.telegram.org/api/rights#suggested-bot-rights).
            wallpaper (Optional['TypeWallPaper'], optional): [Wallpaper](https://core.telegram.org/api/wallpapers) to use in the private chat with the user.
            stories (Optional['TypePeerStories'], optional): Active [stories](https://core.telegram.org/api/stories)
            business_work_hours (Optional['TypeBusinessWorkHours'], optional): [Telegram Business working hours](https://core.telegram.org/api/business#opening-hours).
            business_location (Optional['TypeBusinessLocation'], optional): [Telegram Business location](https://core.telegram.org/api/business#location).
            business_greeting_message (Optional['TypeBusinessGreetingMessage'], optional): [Telegram Business greeting message](https://core.telegram.org/api/business#greeting-messages).
            business_away_message (Optional['TypeBusinessAwayMessage'], optional): [Telegram Business away message](https://core.telegram.org/api/business#away-messages).
            business_intro (Optional['TypeBusinessIntro'], optional): Specifies a custom [Telegram Business profile introduction](https://core.telegram.org/api/business#business-introduction).
            birthday (Optional['TypeBirthday'], optional): Contains info about the user's [birthday](https://core.telegram.org/api/profile#birthday).
            personal_channel_id (Optional[int], optional): ID of the associated personal [channel](https://core.telegram.org/api/channel), that should be shown in the [profile page](https://core.telegram.org/api/profile#personal-channel).
            personal_channel_message (Optional[int], optional): ID of the latest message of the associated personal [channel](https://core.telegram.org/api/channel), that should be previewed in the [profile page](https://core.telegram.org/api/profile#personal-channel).
            stargifts_count (Optional[int], optional): Number of [gifts](https://core.telegram.org/api/gifts) the user has chosen to display on their profile
            starref_program (Optional['TypeStarRefProgram'], optional): This bot has an active [referral program](https://core.telegram.org/api/bots/referrals)
            bot_verification (Optional['TypeBotVerification'], optional): ...
            send_paid_messages_stars (Optional[int], optional): ...
            disallowed_gifts (Optional['TypeDisallowedGiftsSettings'], optional): ...
            stars_rating (Optional['TypeStarsRating'], optional): ...
            stars_my_pending_rating (Optional['TypeStarsRating'], optional): ...
            stars_my_pending_rating_date (Optional[int], optional): ...
            main_tab (Optional['TypeProfileTab'], optional): ...
            saved_music (Optional['TypeDocument'], optional): ...
        """

        self.id = id
        self.settings = settings
        self.notify_settings = notify_settings
        self.common_chats_count = common_chats_count
        self.blocked = blocked
        self.phone_calls_available = phone_calls_available
        self.phone_calls_private = phone_calls_private
        self.can_pin_message = can_pin_message
        self.has_scheduled = has_scheduled
        self.video_calls_available = video_calls_available
        self.voice_messages_forbidden = voice_messages_forbidden
        self.translations_disabled = translations_disabled
        self.stories_pinned_available = stories_pinned_available
        self.blocked_my_stories_from = blocked_my_stories_from
        self.wallpaper_overridden = wallpaper_overridden
        self.contact_require_premium = contact_require_premium
        self.read_dates_private = read_dates_private
        self.sponsored_enabled = sponsored_enabled
        self.can_view_revenue = can_view_revenue
        self.bot_can_manage_emoji_status = bot_can_manage_emoji_status
        self.display_gifts_button = display_gifts_button
        self.about = about
        self.personal_photo = personal_photo
        self.profile_photo = profile_photo
        self.fallback_photo = fallback_photo
        self.bot_info = bot_info
        self.pinned_msg_id = pinned_msg_id
        self.folder_id = folder_id
        self.ttl_period = ttl_period
        self.theme = theme
        self.private_forward_name = private_forward_name
        self.bot_group_admin_rights = bot_group_admin_rights
        self.bot_broadcast_admin_rights = bot_broadcast_admin_rights
        self.wallpaper = wallpaper
        self.stories = stories
        self.business_work_hours = business_work_hours
        self.business_location = business_location
        self.business_greeting_message = business_greeting_message
        self.business_away_message = business_away_message
        self.business_intro = business_intro
        self.birthday = birthday
        self.personal_channel_id = personal_channel_id
        self.personal_channel_message = personal_channel_message
        self.stargifts_count = stargifts_count
        self.starref_program = starref_program
        self.bot_verification = bot_verification
        self.send_paid_messages_stars = send_paid_messages_stars
        self.disallowed_gifts = disallowed_gifts
        self.stars_rating = stars_rating
        self.stars_my_pending_rating = stars_my_pending_rating
        self.stars_my_pending_rating_date = stars_my_pending_rating_date
        self.main_tab = main_tab
        self.saved_music = saved_music

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xad\xb5w\xc5' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.blocked, 0)
                flags(self.phone_calls_available, 4)
                flags(self.phone_calls_private, 5)
                flags(self.can_pin_message, 7)
                flags(self.has_scheduled, 12)
                flags(self.video_calls_available, 13)
                flags(self.voice_messages_forbidden, 20)
                flags(self.translations_disabled, 23)
                flags(self.stories_pinned_available, 26)
                flags(self.blocked_my_stories_from, 27)
                flags(self.wallpaper_overridden, 28)
                flags(self.contact_require_premium, 29)
                flags(self.read_dates_private, 30)

                with writer.flag() as flags2:
                    flags2(self.sponsored_enabled, 7)
                    flags2(self.can_view_revenue, 9)
                    flags2(self.bot_can_manage_emoji_status, 10)
                    flags2(self.display_gifts_button, 16)
                    writer.long(self.id)

                    if flags(self.about, 1):
                        writer.string(self.about)
                    writer.object(
                        self.settings,
                        group_id=0XF43C8196
                    )

                    if flags(self.personal_photo, 21):
                        writer.object(
                            self.personal_photo,
                            group_id=0XDDAD9CAC
                        )

                    if flags(self.profile_photo, 2):
                        writer.object(
                            self.profile_photo,
                            group_id=0XDDAD9CAC
                        )

                    if flags(self.fallback_photo, 22):
                        writer.object(
                            self.fallback_photo,
                            group_id=0XDDAD9CAC
                        )
                    writer.object(
                        self.notify_settings,
                        group_id=0X372BF8CC
                    )

                    if flags(self.bot_info, 3):
                        writer.object(
                            self.bot_info,
                            group_id=0XAD8F02B7
                        )

                    if flags(self.pinned_msg_id, 6):
                        writer.int(self.pinned_msg_id)
                    writer.int(self.common_chats_count)

                    if flags(self.folder_id, 11):
                        writer.int(self.folder_id)

                    if flags(self.ttl_period, 14):
                        writer.int(self.ttl_period)

                    if flags(self.theme, 15):
                        writer.object(
                            self.theme,
                            group_id=0X7FBD8E9C
                        )

                    if flags(self.private_forward_name, 16):
                        writer.string(self.private_forward_name)

                    if flags(self.bot_group_admin_rights, 17):
                        writer.object(
                            self.bot_group_admin_rights,
                            group_id=0X2A03C5CB
                        )

                    if flags(self.bot_broadcast_admin_rights, 18):
                        writer.object(
                            self.bot_broadcast_admin_rights,
                            group_id=0X2A03C5CB
                        )

                    if flags(self.wallpaper, 24):
                        writer.object(
                            self.wallpaper,
                            group_id=0XC6E3E0E2
                        )

                    if flags(self.stories, 25):
                        writer.object(
                            self.stories,
                            group_id=0XE4A19284
                        )

                    if flags2(self.business_work_hours, 0):
                        writer.object(
                            self.business_work_hours,
                            group_id=0XC0979D8
                        )

                    if flags2(self.business_location, 1):
                        writer.object(
                            self.business_location,
                            group_id=0X9BFE943
                        )

                    if flags2(self.business_greeting_message, 2):
                        writer.object(
                            self.business_greeting_message,
                            group_id=0X765CFD01
                        )

                    if flags2(self.business_away_message, 3):
                        writer.object(
                            self.business_away_message,
                            group_id=0X34919EA2
                        )

                    if flags2(self.business_intro, 4):
                        writer.object(
                            self.business_intro,
                            group_id=0X96BF3991
                        )

                    if flags2(self.birthday, 5):
                        writer.object(
                            self.birthday,
                            group_id=0XFA278314
                        )

                    if flags2(self.personal_channel_id, 6):
                        writer.long(self.personal_channel_id)

                    if flags2(self.personal_channel_message, 6):
                        writer.int(self.personal_channel_message)

                    if flags2(self.stargifts_count, 8):
                        writer.int(self.stargifts_count)

                    if flags2(self.starref_program, 11):
                        writer.object(
                            self.starref_program,
                            group_id=0X1A73AF29
                        )

                    if flags2(self.bot_verification, 12):
                        writer.object(
                            self.bot_verification,
                            group_id=0X80813E55
                        )

                    if flags2(self.send_paid_messages_stars, 14):
                        writer.long(self.send_paid_messages_stars)

                    if flags2(self.disallowed_gifts, 15):
                        writer.object(
                            self.disallowed_gifts,
                            group_id=0XC69AFE64
                        )

                    if flags2(self.stars_rating, 17):
                        writer.object(
                            self.stars_rating,
                            group_id=0X95FE7CE3
                        )

                    if flags2(self.stars_my_pending_rating, 18):
                        writer.object(
                            self.stars_my_pending_rating,
                            group_id=0X95FE7CE3
                        )

                    if flags2(self.stars_my_pending_rating_date, 18):
                        writer.int(self.stars_my_pending_rating_date)

                    if flags2(self.main_tab, 20):
                        writer.object(
                            self.main_tab,
                            group_id=0X9A764961
                        )

                    if flags2(self.saved_music, 21):
                        writer.object(
                            self.saved_music,
                            group_id=0X6547BD50
                        )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        flags2 = reader.flag()
        id_ = reader.long()
        about_ = (
            reader.string()
            if flags(1) else None
        )

        settings_ = reader.object(
            group_id=0XF43C8196
        )

        personal_photo_ = (
            reader.object(
                group_id=0XDDAD9CAC
            )
            if flags(21) else None
        )

        profile_photo_ = (
            reader.object(
                group_id=0XDDAD9CAC
            )
            if flags(2) else None
        )

        fallback_photo_ = (
            reader.object(
                group_id=0XDDAD9CAC
            )
            if flags(22) else None
        )

        notify_settings_ = reader.object(
            group_id=0X372BF8CC
        )

        bot_info_ = (
            reader.object(
                group_id=0XAD8F02B7
            )
            if flags(3) else None
        )

        pinned_msg_id_ = (
            reader.int()
            if flags(6) else None
        )

        common_chats_count_ = reader.int()
        folder_id_ = (
            reader.int()
            if flags(11) else None
        )

        ttl_period_ = (
            reader.int()
            if flags(14) else None
        )

        theme_ = (
            reader.object(
                group_id=0X7FBD8E9C
            )
            if flags(15) else None
        )

        private_forward_name_ = (
            reader.string()
            if flags(16) else None
        )

        bot_group_admin_rights_ = (
            reader.object(
                group_id=0X2A03C5CB
            )
            if flags(17) else None
        )

        bot_broadcast_admin_rights_ = (
            reader.object(
                group_id=0X2A03C5CB
            )
            if flags(18) else None
        )

        wallpaper_ = (
            reader.object(
                group_id=0XC6E3E0E2
            )
            if flags(24) else None
        )

        stories_ = (
            reader.object(
                group_id=0XE4A19284
            )
            if flags(25) else None
        )

        business_work_hours_ = (
            reader.object(
                group_id=0XC0979D8
            )
            if flags2(0) else None
        )

        business_location_ = (
            reader.object(
                group_id=0X9BFE943
            )
            if flags2(1) else None
        )

        business_greeting_message_ = (
            reader.object(
                group_id=0X765CFD01
            )
            if flags2(2) else None
        )

        business_away_message_ = (
            reader.object(
                group_id=0X34919EA2
            )
            if flags2(3) else None
        )

        business_intro_ = (
            reader.object(
                group_id=0X96BF3991
            )
            if flags2(4) else None
        )

        birthday_ = (
            reader.object(
                group_id=0XFA278314
            )
            if flags2(5) else None
        )

        personal_channel_id_ = (
            reader.long()
            if flags2(6) else None
        )

        personal_channel_message_ = (
            reader.int()
            if flags2(6) else None
        )

        stargifts_count_ = (
            reader.int()
            if flags2(8) else None
        )

        starref_program_ = (
            reader.object(
                group_id=0X1A73AF29
            )
            if flags2(11) else None
        )

        bot_verification_ = (
            reader.object(
                group_id=0X80813E55
            )
            if flags2(12) else None
        )

        send_paid_messages_stars_ = (
            reader.long()
            if flags2(14) else None
        )

        disallowed_gifts_ = (
            reader.object(
                group_id=0XC69AFE64
            )
            if flags2(15) else None
        )

        stars_rating_ = (
            reader.object(
                group_id=0X95FE7CE3
            )
            if flags2(17) else None
        )

        stars_my_pending_rating_ = (
            reader.object(
                group_id=0X95FE7CE3
            )
            if flags2(18) else None
        )

        stars_my_pending_rating_date_ = (
            reader.int()
            if flags2(18) else None
        )

        main_tab_ = (
            reader.object(
                group_id=0X9A764961
            )
            if flags2(20) else None
        )

        saved_music_ = (
            reader.object(
                group_id=0X6547BD50
            )
            if flags2(21) else None
        )

        return cls(
            id=id_,
            settings=settings_,
            notify_settings=notify_settings_,
            common_chats_count=common_chats_count_,
            blocked=flags(0),
            phone_calls_available=flags(4),
            phone_calls_private=flags(5),
            can_pin_message=flags(7),
            has_scheduled=flags(12),
            video_calls_available=flags(13),
            voice_messages_forbidden=flags(20),
            translations_disabled=flags(23),
            stories_pinned_available=flags(26),
            blocked_my_stories_from=flags(27),
            wallpaper_overridden=flags(28),
            contact_require_premium=flags(29),
            read_dates_private=flags(30),
            sponsored_enabled=flags2(7),
            can_view_revenue=flags2(9),
            bot_can_manage_emoji_status=flags2(10),
            display_gifts_button=flags2(16),
            about=about_,
            personal_photo=personal_photo_,
            profile_photo=profile_photo_,
            fallback_photo=fallback_photo_,
            bot_info=bot_info_,
            pinned_msg_id=pinned_msg_id_,
            folder_id=folder_id_,
            ttl_period=ttl_period_,
            theme=theme_,
            private_forward_name=private_forward_name_,
            bot_group_admin_rights=bot_group_admin_rights_,
            bot_broadcast_admin_rights=bot_broadcast_admin_rights_,
            wallpaper=wallpaper_,
            stories=stories_,
            business_work_hours=business_work_hours_,
            business_location=business_location_,
            business_greeting_message=business_greeting_message_,
            business_away_message=business_away_message_,
            business_intro=business_intro_,
            birthday=birthday_,
            personal_channel_id=personal_channel_id_,
            personal_channel_message=personal_channel_message_,
            stargifts_count=stargifts_count_,
            starref_program=starref_program_,
            bot_verification=bot_verification_,
            send_paid_messages_stars=send_paid_messages_stars_,
            disallowed_gifts=disallowed_gifts_,
            stars_rating=stars_rating_,
            stars_my_pending_rating=stars_my_pending_rating_,
            stars_my_pending_rating_date=stars_my_pending_rating_date_,
            main_tab=main_tab_,
            saved_music=saved_music_
        )

TypeUserFull = UserFull

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, List
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.messages import TypeMessagesMessages


class GetQuickReplyMessages(TLRequest[TypeMessagesMessages]):
    """
    Fetch (a subset or all) messages in a [quick reply shortcut](https://core.telegram.org/api/business#quick-reply-shortcuts).

    Raises:
        `400`ShortcutInvalidError: The specified shortcut is invalid.

    """

    _id = 0X94A495C3
    _result_id = 0XC8BB9188

    def __init__(
        self,
        shortcut_id: int,
        hash: int,
        id: Optional[List[int]] = None
    ):

        """
        Fetch (a subset or all) messages in a [quick reply shortcut](https://core.telegram.org/api/business#quick-reply-shortcuts).

        Args:
            shortcut_id (int): Quick reply shortcut ID.
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            id (Optional[List[int]], optional): IDs of the messages to fetch, if empty fetches all of them.
        """

        self.shortcut_id = shortcut_id
        self.hash = hash
        self.id = id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc3\x95\xa4\x94' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.int(self.shortcut_id)

                if flags(self.id, 0):
                    writer.vector(
                        self.id,
                        writer.int
                    )
                writer.long(self.hash)

            return writer.getvalue()
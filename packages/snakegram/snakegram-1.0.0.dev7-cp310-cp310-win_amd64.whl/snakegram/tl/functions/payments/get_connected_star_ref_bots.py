
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.payments.connected_star_ref_bots import TypePaymentsConnectedStarRefBots


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class GetConnectedStarRefBots(TLRequest[TypePaymentsConnectedStarRefBots]):
    """
    Fetch all affiliations we have created for a certain peer
    """

    _id = 0X5869A553
    _result_id = 0X84FD0666

    def __init__(
        self,
        peer: 'TypeInputPeer',
        limit: int,
        offset_date: Optional[int] = None,
        offset_link: Optional[str] = None
    ):

        """
        Fetch all affiliations we have created for a certain peer

        Args:
            peer ('TypeInputPeer'): The affiliated peer
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
            offset_date (Optional[int], optional): If set, returns only results older than the specified unixtime
            offset_link (Optional[str], optional): Offset for [pagination](https://core.telegram.org/api/offsets), taken from the last returned [connectedBotStarRef](https://core.telegram.org/constructor/connectedBotStarRef). url (initially empty)
        """

        self.peer = peer
        self.limit = limit
        self.offset_date = offset_date
        self.offset_link = offset_link

    def to_bytes(self, boxed: bool=True):
        with Writer(b'S\xa5iX' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.object(
                    self.peer,
                    group_id=0X995DB9DF
                )

                if flags(self.offset_date, 2):
                    writer.int(self.offset_date)

                if flags(self.offset_link, 2):
                    writer.string(self.offset_link)
                writer.int(self.limit)

            return writer.getvalue()
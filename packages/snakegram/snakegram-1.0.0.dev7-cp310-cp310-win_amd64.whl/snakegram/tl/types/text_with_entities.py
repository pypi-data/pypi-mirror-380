
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .message_entity import TypeMessageEntity
    from ...gadgets.byteutils import Reader


class TextWithEntities(TLObject, family='TypeTextWithEntities'):
    """
    Styled text with [message entities](https://core.telegram.org/api/entities)
    """

    _id = 0X751F3146
    _group_id = 0X5D96896

    def __init__(
        self,
        text: str,
        entities: List['TypeMessageEntity']
    ):

        """
        Styled text with [message entities](https://core.telegram.org/api/entities)

        Args:
            text (str): Text
            entities (List['TypeMessageEntity']): [Message entities for styled text](https://core.telegram.org/api/entities)
        """

        self.text = text
        self.entities = entities

    def to_bytes(self, boxed: bool=True):
        with Writer(b'F1\x1fu' if boxed else b'') as writer:
            writer.string(self.text)
            writer.vector(
                self.entities,
                lambda value: writer.object(
                    value,
                    group_id=0X3CDFF38A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        text_ = reader.string()
        entities_ = reader.vector(
            lambda: reader.object(
                group_id=0X3CDFF38A
            )
        )

        return cls(
            text=text_,
            entities=entities_
        )

TypeTextWithEntities = TextWithEntities
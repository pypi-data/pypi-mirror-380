
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class StartHistoryImport(TLRequest[bool]):
    """
    Complete the [history import process](https://core.telegram.org/api/import), importing all messages into the chat. 
    To be called only after initializing the import with [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport) and uploading all files using [messages.uploadImportedMedia](https://core.telegram.org/method/messages.uploadImportedMedia).

    Raises:
        `400`ImportIdInvalidError: The specified import ID is invalid.

    """

    _id = 0XB43DF344
    _result_id = 0X43B904E1

    def __init__(
        self,
        peer: 'TypeInputPeer',
        import_id: int
    ):

        """
        Complete the [history import process](https://core.telegram.org/api/import), importing all messages into the chat. 
        To be called only after initializing the import with [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport) and uploading all files using [messages.uploadImportedMedia](https://core.telegram.org/method/messages.uploadImportedMedia).

        Args:
            peer ('TypeInputPeer'): The Telegram chat where the messages should be [imported, click here for more info](https://core.telegram.org/api/import)
            import_id (int): Identifier of a history import session, returned by [messages.initHistoryImport](https://core.telegram.org/method/messages.initHistoryImport).
        """

        self.peer = peer
        self.import_id = import_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'D\xf3=\xb4' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.long(self.import_id)

            return writer.getvalue()
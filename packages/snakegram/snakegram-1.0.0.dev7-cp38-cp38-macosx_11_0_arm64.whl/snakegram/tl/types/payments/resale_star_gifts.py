
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List, Optional
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..chat import TypeChat
    from ..user import TypeUser
    from ..star_gift import TypeStarGift
    from ..star_gift_attribute import TypeStarGiftAttribute
    from ....gadgets.byteutils import Reader
    from ..star_gift_attribute_counter import TypeStarGiftAttributeCounter


class ResaleStarGifts(TLObject, family='TypePaymentsResaleStarGifts'):
    _id = 0X947A12DF
    _group_id = 0X3A050DD3

    def __init__(
        self,
        count: int,
        gifts: List['TypeStarGift'],
        chats: List['TypeChat'],
        users: List['TypeUser'],
        next_offset: Optional[str] = None,
        attributes: Optional[List['TypeStarGiftAttribute']] = None,
        attributes_hash: Optional[int] = None,
        counters: Optional[List['TypeStarGiftAttributeCounter']] = None
    ):

        self.count = count
        self.gifts = gifts
        self.chats = chats
        self.users = users
        self.next_offset = next_offset
        self.attributes = attributes
        self.attributes_hash = attributes_hash
        self.counters = counters

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xdf\x12z\x94' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.int(self.count)
                writer.vector(
                    self.gifts,
                    lambda value: writer.object(
                        value,
                        group_id=0X87440C7B
                    )
                )

                if flags(self.next_offset, 0):
                    writer.string(self.next_offset)

                if flags(self.attributes, 1):
                    writer.vector(
                        self.attributes,
                        lambda value: writer.object(
                            value,
                            group_id=0XEE235015
                        )
                    )

                if flags(self.attributes_hash, 1):
                    writer.long(self.attributes_hash)
                writer.vector(
                    self.chats,
                    lambda value: writer.object(
                        value,
                        group_id=0X73A5C0D9
                    )
                )

                if flags(self.counters, 2):
                    writer.vector(
                        self.counters,
                        lambda value: writer.object(
                            value,
                            group_id=0X873675A5
                        )
                    )
                writer.vector(
                    self.users,
                    lambda value: writer.object(
                        value,
                        group_id=0X9BABE43A
                    )
                )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        count_ = reader.int()
        gifts_ = reader.vector(
            lambda: reader.object(
                group_id=0X87440C7B
            )
        )

        next_offset_ = (
            reader.string()
            if flags(0) else None
        )

        attributes_ = (
            reader.vector(
                lambda: reader.object(
                    group_id=0XEE235015
                )
            )
            if flags(1) else None
        )

        attributes_hash_ = (
            reader.long()
            if flags(1) else None
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        counters_ = (
            reader.vector(
                lambda: reader.object(
                    group_id=0X873675A5
                )
            )
            if flags(2) else None
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            count=count_,
            gifts=gifts_,
            chats=chats_,
            users=users_,
            next_offset=next_offset_,
            attributes=attributes_,
            attributes_hash=attributes_hash_,
            counters=counters_
        )

TypePaymentsResaleStarGifts = ResaleStarGifts

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ...types.updates import TypeUpdates
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class SendVote(TLRequest[TypeUpdates]):
    """
    Vote in a [poll](https://core.telegram.org/constructor/poll)

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChannelPrivateError: You haven't joined this channel/supergroup.
        `400`MessageIdInvalidError: The provided message id is invalid.
        `400`MessagePollClosedError: Poll closed.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`OptionsTooMuchError: Too many options provided.
        `400`OptionInvalidError: Invalid option selected.
        `400`PeerIdInvalidError: The provided peer id is invalid.
        `400`RevoteNotAllowedError: You cannot change your vote.

    """

    _id = 0X10EA6184
    _result_id = 0XD68D29C0

    def __init__(
        self,
        peer: 'TypeInputPeer',
        msg_id: int,
        options: List[bytes]
    ):

        """
        Vote in a [poll](https://core.telegram.org/constructor/poll)

        Args:
            peer ('TypeInputPeer'): The chat where the poll was sent
            msg_id (int): The message ID of the poll
            options (List[bytes]): The options that were chosen
        """

        self.peer = peer
        self.msg_id = msg_id
        self.options = options

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x84a\xea\x10' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.msg_id)
            writer.vector(
                self.options,
                writer.bytes
            )

            return writer.getvalue()
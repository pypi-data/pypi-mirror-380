
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

import re
from ..base_rpc_errors import NotAcceptableError


class BannedRightsInvalidError(
    NotAcceptableError,
    pattern='BANNED_RIGHTS_INVALID'
):
    """
    NotAcceptableError (406): `BANNED_RIGHTS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You provided some invalid flags in the banned rights.'
        )

class BusinessAddressActiveError(
    NotAcceptableError,
    pattern='BUSINESS_ADDRESS_ACTIVE'
):
    """
    NotAcceptableError (406): `BUSINESS_ADDRESS_ACTIVE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The user is currently advertising a [Business Location](https://core.telegram.org/api/business#location), the location may only be changed (or removed) using [account.updateBusinessLocation &raquo;](https://core.telegram.org/method/account.updateBusinessLocation).  .'
        )

class CallProtocolCompatLayerInvalidError(
    NotAcceptableError,
    pattern='CALL_PROTOCOL_COMPAT_LAYER_INVALID'
):
    """
    NotAcceptableError (406): `CALL_PROTOCOL_COMPAT_LAYER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The other side of the call does not support any of the VoIP protocols supported by the local client, as specified by the `protocol.layer` and `protocol.library_versions` fields.'
        )

class ChannelPrivateError(
    NotAcceptableError,
    pattern='CHANNEL_PRIVATE'
):
    """
    NotAcceptableError (406): `CHANNEL_PRIVATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You haven't joined this channel/supergroup."
        )

class ChannelTooLargeError(
    NotAcceptableError,
    pattern='CHANNEL_TOO_LARGE'
):
    """
    NotAcceptableError (406): `CHANNEL_TOO_LARGE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).'
        )

class ChatForwardsRestrictedError(
    NotAcceptableError,
    pattern='CHAT_FORWARDS_RESTRICTED'
):
    """
    NotAcceptableError (406): `CHAT_FORWARDS_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't forward messages from a protected chat."
        )

class FilerefUpgradeNeededError(
    NotAcceptableError,
    pattern='FILEREF_UPGRADE_NEEDED'
):
    """
    NotAcceptableError (406): `FILEREF_UPGRADE_NEEDED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The client has to be updated in order to support [file references](https://core.telegram.org/api/file_reference).'
        )

class FreshChangeAdminsForbiddenError(
    NotAcceptableError,
    pattern='FRESH_CHANGE_ADMINS_FORBIDDEN'
):
    """
    NotAcceptableError (406): `FRESH_CHANGE_ADMINS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You were just elected admin, you can't add or modify other admins yet."
        )

class FreshChangePhoneForbiddenError(
    NotAcceptableError,
    pattern='FRESH_CHANGE_PHONE_FORBIDDEN'
):
    """
    NotAcceptableError (406): `FRESH_CHANGE_PHONE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't change phone number right after logging in, please wait at least 24 hours."
        )

class FreshResetAuthorisationForbiddenError(
    NotAcceptableError,
    pattern='FRESH_RESET_AUTHORISATION_FORBIDDEN'
):
    """
    NotAcceptableError (406): `FRESH_RESET_AUTHORISATION_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't logout other sessions if less than 24 hours have passed since you logged on the current session."
        )

class InviteHashExpiredError(
    NotAcceptableError,
    pattern='INVITE_HASH_EXPIRED'
):
    """
    NotAcceptableError (406): `INVITE_HASH_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The invite link has expired.'
        )

class PaymentUnsupportedError(
    NotAcceptableError,
    pattern='PAYMENT_UNSUPPORTED'
):
    """
    NotAcceptableError (406): `PAYMENT_UNSUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A detailed description of the error will be received separately as described [here &raquo;](https://core.telegram.org/api/errors#406-not-acceptable).'
        )

class PhoneNumberInvalidError(
    NotAcceptableError,
    pattern='PHONE_NUMBER_INVALID'
):
    """
    NotAcceptableError (406): `PHONE_NUMBER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The phone number is invalid.'
        )

class PhonePasswordFloodError(
    NotAcceptableError,
    pattern='PHONE_PASSWORD_FLOOD'
):
    """
    NotAcceptableError (406): `PHONE_PASSWORD_FLOOD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have tried logging in too many times.'
        )

class PremiumCurrentlyUnavailableError(
    NotAcceptableError,
    pattern='PREMIUM_CURRENTLY_UNAVAILABLE'
):
    """
    NotAcceptableError (406): `PREMIUM_CURRENTLY_UNAVAILABLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot currently purchase a Premium subscription.'
        )

class PreviousChatImportActiveWaitMinError(
    NotAcceptableError,
    pattern=re.compile(r'PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_(?P<minutes>\d+)MIN')
):
    """
    NotAcceptableError (406): `PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_{minutes}MIN`
    """

    def __init__(
        self,
        request,
        minutes: int = 0
    ):
        self.minutes = minutes

        super().__init__(
            request,
            f'Import for this chat is already in progress, wait {minutes} minutes before starting a new one.'
        )

class PrivacyPremiumRequiredError(
    NotAcceptableError,
    pattern='PRIVACY_PREMIUM_REQUIRED'
):
    """
    NotAcceptableError (406): `PRIVACY_PREMIUM_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You need a [Telegram Premium subscription](https://core.telegram.org/api/premium) to send a message to this user.'
        )

class SendCodeUnavailableError(
    NotAcceptableError,
    pattern='SEND_CODE_UNAVAILABLE'
):
    """
    NotAcceptableError (406): `SEND_CODE_UNAVAILABLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Returned when all available options for this type of number were already used (e.g. flash-call, then SMS, then this error might be returned to trigger a second resend).'
        )

class StickersetInvalidError(
    NotAcceptableError,
    pattern='STICKERSET_INVALID'
):
    """
    NotAcceptableError (406): `STICKERSET_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided sticker set is invalid.'
        )

class StickersetOwnerAnonymousError(
    NotAcceptableError,
    pattern='STICKERSET_OWNER_ANONYMOUS'
):
    """
    NotAcceptableError (406): `STICKERSET_OWNER_ANONYMOUS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Provided stickerset can't be installed as group stickerset to prevent admin deanonymization."
        )

class TopicClosedError(
    NotAcceptableError,
    pattern='TOPIC_CLOSED'
):
    """
    NotAcceptableError (406): `TOPIC_CLOSED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This topic was closed, you can't send messages to it anymore."
        )

class TopicDeletedError(
    NotAcceptableError,
    pattern='TOPIC_DELETED'
):
    """
    NotAcceptableError (406): `TOPIC_DELETED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified topic was deleted.'
        )

class UpdateAppToLoginError(
    NotAcceptableError,
    pattern='UPDATE_APP_TO_LOGIN'
):
    """
    NotAcceptableError (406): `UPDATE_APP_TO_LOGIN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Please update to the latest version of MadelineProto to login.'
        )

class UserRestrictedError(
    NotAcceptableError,
    pattern='USER_RESTRICTED'
):
    """
    NotAcceptableError (406): `USER_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're spamreported, you can't create channels or chats."
        )

class UserpicPrivacyRequiredError(
    NotAcceptableError,
    pattern='USERPIC_PRIVACY_REQUIRED'
):
    """
    NotAcceptableError (406): `USERPIC_PRIVACY_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You need to disable privacy settings for your profile picture in order to make your geolocation public.'
        )

class UserpicUploadRequiredError(
    NotAcceptableError,
    pattern='USERPIC_UPLOAD_REQUIRED'
):
    """
    NotAcceptableError (406): `USERPIC_UPLOAD_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must have a profile picture to publish your geolocation.'
        )

class AuthKeyDuplicatedError(
    NotAcceptableError,
    pattern='AUTH_KEY_DUPLICATED'
):
    """
    NotAcceptableError (406): `AUTH_KEY_DUPLICATED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Concurrent usage of the current session from multiple connections was detected, the current session was invalidated by the server for security reasons!'
        )

class PreviousChatImportActiveWaitMinError(
    NotAcceptableError,
    pattern=re.compile(r'PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_(?P<minutes>\d+)MIN')
):
    """
    NotAcceptableError (406): `PREVIOUS_CHAT_IMPORT_ACTIVE_WAIT_{minutes}MIN`
    """

    def __init__(
        self,
        request,
        minutes: int = 0
    ):
        self.minutes = minutes

        super().__init__(
            request,
            f'Import for this chat is already in progress, wait {minutes} minutes before starting a new one.'
        )

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stats.public_forwards import TypeStatsPublicForwards


if TYPE_CHECKING:
    from ...types.input_channel import TypeInputChannel


class GetMessagePublicForwards(TLRequest[TypeStatsPublicForwards]):
    """
    Obtains a list of messages, indicating to which other public channels was a channel message forwarded. 
    Will return a list of [messages](https://core.telegram.org/constructor/message) with peer_id equal to the public channel to which this message was forwarded.

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `400`MessageIdInvalidError: The provided message id is invalid.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0X5F150144
    _result_id = 0X1DAE9D9D

    def __init__(
        self,
        channel: 'TypeInputChannel',
        msg_id: int,
        offset: str,
        limit: int
    ):

        """
        Obtains a list of messages, indicating to which other public channels was a channel message forwarded. 
        Will return a list of [messages](https://core.telegram.org/constructor/message) with peer_id equal to the public channel to which this message was forwarded.

        Args:
            channel ('TypeInputChannel'): Source channel
            msg_id (int): Source message ID
            offset (str): Offset for [pagination](https://core.telegram.org/api/offsets), empty string on first call, then use the next_offset field of the returned constructor (if present, otherwise no more results are available).
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.channel = channel
        self.msg_id = msg_id
        self.offset = offset
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'D\x01\x15_' if boxed else b'') as writer:
            writer.object(
                self.channel,
                group_id=0X42691CEF
            )
            writer.int(self.msg_id)
            writer.string(self.offset)
            writer.int(self.limit)

            return writer.getvalue()
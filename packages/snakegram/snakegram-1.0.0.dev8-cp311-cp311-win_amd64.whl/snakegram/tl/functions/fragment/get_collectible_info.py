
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.fragment.collectible_info import TypeFragmentCollectibleInfo


if TYPE_CHECKING:
    from ...types.input_collectible import TypeInputCollectible


class GetCollectibleInfo(TLRequest[TypeFragmentCollectibleInfo]):
    """
    Fetch information about a [fragment collectible, see here](https://core.telegram.org/api/fragment#fetching-info-about-fragment-collectibles) for more info on the full flow.

    Raises:
        `400`CollectibleInvalidError: The specified collectible is invalid.
        `400`CollectibleNotFoundError: The specified collectible could not be found.

    """

    _id = 0XBE1E85BA
    _result_id = 0X7729CB9D

    def __init__(
        self,
        collectible: 'TypeInputCollectible'
    ):

        """
        Fetch information about a [fragment collectible, see here](https://core.telegram.org/api/fragment#fetching-info-about-fragment-collectibles) for more info on the full flow.

        Args:
            collectible ('TypeInputCollectible'): Collectible to fetch info about.
        """

        self.collectible = collectible

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xba\x85\x1e\xbe' if boxed else b'') as writer:
            writer.object(
                self.collectible,
                group_id=0XBA1CA278
            )

            return writer.getvalue()
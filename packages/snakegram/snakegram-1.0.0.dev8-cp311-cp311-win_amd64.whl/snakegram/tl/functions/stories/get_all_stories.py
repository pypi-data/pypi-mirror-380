
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stories.all_stories import TypeStoriesAllStories


class GetAllStories(TLRequest[TypeStoriesAllStories]):
    """
    Fetch the List of active (or active and hidden) stories, see [here](https://core.telegram.org/api/stories#watching-stories) for more info on watching stories.
    """

    _id = 0XEEB0D625
    _result_id = 0X7372A65E

    def __init__(
        self,
        next: bool = False,
        hidden: bool = False,
        state: Optional[str] = None
    ):

        """
        Fetch the List of active (or active and hidden) stories, see [here](https://core.telegram.org/api/stories#watching-stories) for more info on watching stories.

        Args:
            next (bool, optional): If next and state are both set, uses the passed state to paginate to the next results; if neither state nor next are set, fetches the initial page; if state is set and next is not set, check for changes in the active/hidden peerset, see [here](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow.
            hidden (bool, optional): If set, fetches the hidden active story list, otherwise fetches the active story list, see [here](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow.
            state (Optional[str], optional): If next and state are both set, uses the passed state to paginate to the next results; if neither state nor next are set, fetches the initial page; if state is set and next is not set, check for changes in the active/hidden peerset, see [here](https://core.telegram.org/api/stories#watching-stories) for more info on the full flow.
        """

        self.next = next
        self.hidden = hidden
        self.state = state

    def to_bytes(self, boxed: bool=True):
        with Writer(b'%\xd6\xb0\xee' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.next, 1)
                flags(self.hidden, 2)

                if flags(self.state, 0):
                    writer.string(self.state)

            return writer.getvalue()
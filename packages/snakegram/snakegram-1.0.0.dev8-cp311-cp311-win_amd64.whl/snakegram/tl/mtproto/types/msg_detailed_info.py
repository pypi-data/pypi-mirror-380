
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class MsgDetailedInfo(TLObject, family='TypeMsgDetailedInfo'):
    _id = 0X276D3EC6
    _group_id = 0XF30CD7E1

    def __init__(
        self,
        msg_id: int,
        answer_msg_id: int,
        bytes: int,
        status: int
    ):

        self.msg_id = msg_id
        self.answer_msg_id = answer_msg_id
        self.bytes = bytes
        self.status = status

    def to_bytes(self, boxed: bool=True):
        with Writer(b"\xc6>m'" if boxed else b'') as writer:
            writer.long(self.msg_id)
            writer.long(self.answer_msg_id)
            writer.int(self.bytes)
            writer.int(self.status)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        msg_id_ = reader.long()
        answer_msg_id_ = reader.long()
        bytes_ = reader.int()
        status_ = reader.int()

        return cls(
            msg_id=msg_id_,
            answer_msg_id=answer_msg_id_,
            bytes=bytes_,
            status=status_
        )

class MsgNewDetailedInfo(TLObject, family='TypeMsgDetailedInfo'):
    _id = 0X809DB6DF
    _group_id = 0XF30CD7E1

    def __init__(
        self,
        answer_msg_id: int,
        bytes: int,
        status: int
    ):

        self.answer_msg_id = answer_msg_id
        self.bytes = bytes
        self.status = status

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xdf\xb6\x9d\x80' if boxed else b'') as writer:
            writer.long(self.answer_msg_id)
            writer.int(self.bytes)
            writer.int(self.status)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        answer_msg_id_ = reader.long()
        bytes_ = reader.int()
        status_ = reader.int()

        return cls(
            answer_msg_id=answer_msg_id_,
            bytes=bytes_,
            status=status_
        )

TypeMsgDetailedInfo = Union[
    MsgDetailedInfo,
    MsgNewDetailedInfo
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class PrivacyKeyStatusTimestamp(TLObject, family='TypePrivacyKey'):
    """
    Whether we can see the last online timestamp of this user.
    """

    _id = 0XBC2EAB30
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'0\xab.\xbc' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyChatInvite(TLObject, family='TypePrivacyKey'):
    """
    Whether the user can be invited to chats
    """

    _id = 0X500E6DFA
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xfam\x0eP' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyPhoneCall(TLObject, family='TypePrivacyKey'):
    """
    Whether the user accepts phone calls
    """

    _id = 0X3D662B7B
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'{+f=' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyPhoneP2P(TLObject, family='TypePrivacyKey'):
    """
    Whether P2P connections in phone calls with this user are allowed
    """

    _id = 0X39491CC8
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xc8\x1cI9' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyForwards(TLObject, family='TypePrivacyKey'):
    """
    Whether messages forwarded from the user will be [anonymously forwarded](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)
    """

    _id = 0X69EC56A3
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xa3V\xeci' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyProfilePhoto(TLObject, family='TypePrivacyKey'):
    """
    Whether the profile picture of the user is visible
    """

    _id = 0X96151FED
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xed\x1f\x15\x96' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyPhoneNumber(TLObject, family='TypePrivacyKey'):
    """
    Whether the user allows us to see his phone number
    """

    _id = 0XD19AE46D
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'm\xe4\x9a\xd1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyAddedByPhone(TLObject, family='TypePrivacyKey'):
    """
    Whether this user can be added to our contact list by their phone number
    """

    _id = 0X42FFD42B
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'+\xd4\xffB' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyVoiceMessages(TLObject, family='TypePrivacyKey'):
    """
    Whether the user accepts voice messages
    """

    _id = 0X697F414
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\x14\xf4\x97\x06' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyAbout(TLObject, family='TypePrivacyKey'):
    """
    Whether people can see your bio
    """

    _id = 0XA486B761
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'a\xb7\x86\xa4' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyBirthday(TLObject, family='TypePrivacyKey'):
    """
    Whether the user can see our birthday.
    """

    _id = 0X2000A518
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\x18\xa5\x00 ' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyStarGiftsAutoSave(TLObject, family='TypePrivacyKey'):
    """
    Whether received [gifts](https://core.telegram.org/api/gifts) will be automatically displayed on our profile
    """

    _id = 0X2CA4FDF8
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xf8\xfd\xa4,' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class PrivacyKeyNoPaidMessages(TLObject, family='TypePrivacyKey'):
    _id = 0X17D348D2
    _group_id = 0XB678C916


    def to_bytes(self, boxed: bool=True):
        return b'\xd2H\xd3\x17' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypePrivacyKey = Union[
    PrivacyKeyStatusTimestamp,
    PrivacyKeyChatInvite,
    PrivacyKeyPhoneCall,
    PrivacyKeyPhoneP2P,
    PrivacyKeyForwards,
    PrivacyKeyProfilePhoto,
    PrivacyKeyPhoneNumber,
    PrivacyKeyAddedByPhone,
    PrivacyKeyVoiceMessages,
    PrivacyKeyAbout,
    PrivacyKeyBirthday,
    PrivacyKeyStarGiftsAutoSave,
    PrivacyKeyNoPaidMessages
]
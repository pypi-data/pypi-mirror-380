
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.sticker_set import TypeMessagesStickerSet


if TYPE_CHECKING:
    from ...types.input_document import TypeInputDocument
    from ...types.input_sticker_set_item import TypeInputStickerSetItem


class ReplaceSticker(TLRequest[TypeMessagesStickerSet]):
    """
    Replace a sticker in a [stickerset](https://core.telegram.org/api/stickers).

    **Bots can use this method**

    Raises:
        `400`StickerInvalidError: The provided sticker is invalid.

    """

    _id = 0X4696459A
    _result_id = 0X5CC84E96

    def __init__(
        self,
        sticker: 'TypeInputDocument',
        new_sticker: 'TypeInputStickerSetItem'
    ):

        """
        Replace a sticker in a [stickerset](https://core.telegram.org/api/stickers).

        **Bots can use this method**

        Args:
            sticker ('TypeInputDocument'): Old sticker document.
            new_sticker ('TypeInputStickerSetItem'): New sticker.
        """

        self.sticker = sticker
        self.new_sticker = new_sticker

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9aE\x96F' if boxed else b'') as writer:
            writer.object(
                self.sticker,
                group_id=0X84313E
            )
            writer.object(
                self.new_sticker,
                group_id=0X6B1BC0F3
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .text_with_entities import TypeTextWithEntities
    from ...gadgets.byteutils import Reader


class PendingSuggestion(TLObject, family='TypePendingSuggestion'):
    _id = 0XE7E82E12
    _group_id = 0XD3F7A57A

    def __init__(
        self,
        suggestion: str,
        title: 'TypeTextWithEntities',
        description: 'TypeTextWithEntities',
        url: str
    ):

        self.suggestion = suggestion
        self.title = title
        self.description = description
        self.url = url

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x12.\xe8\xe7' if boxed else b'') as writer:
            writer.string(self.suggestion)
            writer.object(
                self.title,
                group_id=0X5D96896
            )
            writer.object(
                self.description,
                group_id=0X5D96896
            )
            writer.string(self.url)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        suggestion_ = reader.string()
        title_ = reader.object(
            group_id=0X5D96896
        )

        description_ = reader.object(
            group_id=0X5D96896
        )

        url_ = reader.string()

        return cls(
            suggestion=suggestion_,
            title=title_,
            description=description_,
            url=url_
        )

TypePendingSuggestion = PendingSuggestion

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING, Optional
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .peer import TypePeer
    from .document import TypeDocument
    from .text_with_entities import TypeTextWithEntities
    from ...gadgets.byteutils import Reader


class StarGiftAttributeModel(TLObject, family='TypeStarGiftAttribute'):
    _id = 0X39D99013
    _group_id = 0XEE235015

    def __init__(
        self,
        name: str,
        document: 'TypeDocument',
        rarity_permille: int
    ):

        self.name = name
        self.document = document
        self.rarity_permille = rarity_permille

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x13\x90\xd99' if boxed else b'') as writer:
            writer.string(self.name)
            writer.object(
                self.document,
                group_id=0X6547BD50
            )
            writer.int(self.rarity_permille)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        name_ = reader.string()
        document_ = reader.object(
            group_id=0X6547BD50
        )

        rarity_permille_ = reader.int()

        return cls(
            name=name_,
            document=document_,
            rarity_permille=rarity_permille_
        )

class StarGiftAttributePattern(TLObject, family='TypeStarGiftAttribute'):
    _id = 0X13ACFF19
    _group_id = 0XEE235015

    def __init__(
        self,
        name: str,
        document: 'TypeDocument',
        rarity_permille: int
    ):

        self.name = name
        self.document = document
        self.rarity_permille = rarity_permille

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x19\xff\xac\x13' if boxed else b'') as writer:
            writer.string(self.name)
            writer.object(
                self.document,
                group_id=0X6547BD50
            )
            writer.int(self.rarity_permille)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        name_ = reader.string()
        document_ = reader.object(
            group_id=0X6547BD50
        )

        rarity_permille_ = reader.int()

        return cls(
            name=name_,
            document=document_,
            rarity_permille=rarity_permille_
        )

class StarGiftAttributeBackdrop(TLObject, family='TypeStarGiftAttribute'):
    _id = 0XD93D859C
    _group_id = 0XEE235015

    def __init__(
        self,
        name: str,
        backdrop_id: int,
        center_color: int,
        edge_color: int,
        pattern_color: int,
        text_color: int,
        rarity_permille: int
    ):

        self.name = name
        self.backdrop_id = backdrop_id
        self.center_color = center_color
        self.edge_color = edge_color
        self.pattern_color = pattern_color
        self.text_color = text_color
        self.rarity_permille = rarity_permille

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9c\x85=\xd9' if boxed else b'') as writer:
            writer.string(self.name)
            writer.int(self.backdrop_id)
            writer.int(self.center_color)
            writer.int(self.edge_color)
            writer.int(self.pattern_color)
            writer.int(self.text_color)
            writer.int(self.rarity_permille)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        name_ = reader.string()
        backdrop_id_ = reader.int()
        center_color_ = reader.int()
        edge_color_ = reader.int()
        pattern_color_ = reader.int()
        text_color_ = reader.int()
        rarity_permille_ = reader.int()

        return cls(
            name=name_,
            backdrop_id=backdrop_id_,
            center_color=center_color_,
            edge_color=edge_color_,
            pattern_color=pattern_color_,
            text_color=text_color_,
            rarity_permille=rarity_permille_
        )

class StarGiftAttributeOriginalDetails(TLObject, family='TypeStarGiftAttribute'):
    _id = 0XE0BFF26C
    _group_id = 0XEE235015

    def __init__(
        self,
        recipient_id: 'TypePeer',
        date: int,
        sender_id: Optional['TypePeer'] = None,
        message: Optional['TypeTextWithEntities'] = None
    ):

        self.recipient_id = recipient_id
        self.date = date
        self.sender_id = sender_id
        self.message = message

    def to_bytes(self, boxed: bool=True):
        with Writer(b'l\xf2\xbf\xe0' if boxed else b'') as writer:
            with writer.flag() as flags:

                if flags(self.sender_id, 0):
                    writer.object(
                        self.sender_id,
                        group_id=0XB4DECBCA
                    )
                writer.object(
                    self.recipient_id,
                    group_id=0XB4DECBCA
                )
                writer.int(self.date)

                if flags(self.message, 1):
                    writer.object(
                        self.message,
                        group_id=0X5D96896
                    )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        sender_id_ = (
            reader.object(
                group_id=0XB4DECBCA
            )
            if flags(0) else None
        )

        recipient_id_ = reader.object(
            group_id=0XB4DECBCA
        )

        date_ = reader.int()
        message_ = (
            reader.object(
                group_id=0X5D96896
            )
            if flags(1) else None
        )

        return cls(
            recipient_id=recipient_id_,
            date=date_,
            sender_id=sender_id_,
            message=message_
        )

TypeStarGiftAttribute = Union[
    StarGiftAttributeModel,
    StarGiftAttributePattern,
    StarGiftAttributeBackdrop,
    StarGiftAttributeOriginalDetails
]
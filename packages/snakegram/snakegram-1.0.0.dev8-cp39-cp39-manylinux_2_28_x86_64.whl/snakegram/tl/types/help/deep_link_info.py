
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional, List, Union
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..message_entity import TypeMessageEntity
    from ....gadgets.byteutils import Reader


class DeepLinkInfoEmpty(TLObject, family='TypeHelpDeepLinkInfo'):
    """
    Deep link info empty
    """

    _id = 0X66AFA166
    _group_id = 0X6FD49518


    def to_bytes(self, boxed: bool=True):
        return b'f\xa1\xaff' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class DeepLinkInfo(TLObject, family='TypeHelpDeepLinkInfo'):
    """
    Deep link info, see [the here for more details](https://core.telegram.org/api/links#unsupported-links)
    """

    _id = 0X6A4EE832
    _group_id = 0X6FD49518

    def __init__(
        self,
        message: str,
        update_app: bool = False,
        entities: Optional[List['TypeMessageEntity']] = None
    ):

        """
        Deep link info, see [the here for more details](https://core.telegram.org/api/links#unsupported-links)

        Args:
            message (str): Message to show to the user
            update_app (bool, optional): An update of the app is required to parse this link
            entities (Optional[List['TypeMessageEntity']], optional): [Message entities for styled text](https://core.telegram.org/api/entities)
        """

        self.message = message
        self.update_app = update_app
        self.entities = entities

    def to_bytes(self, boxed: bool=True):
        with Writer(b'2\xe8Nj' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.update_app, 0)
                writer.string(self.message)

                if flags(self.entities, 1):
                    writer.vector(
                        self.entities,
                        lambda value: writer.object(
                            value,
                            group_id=0X3CDFF38A
                        )
                    )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        message_ = reader.string()
        entities_ = (
            reader.vector(
                lambda: reader.object(
                    group_id=0X3CDFF38A
                )
            )
            if flags(1) else None
        )

        return cls(
            message=message_,
            update_app=flags(0),
            entities=entities_
        )

TypeHelpDeepLinkInfo = Union[
    DeepLinkInfoEmpty,
    DeepLinkInfo
]
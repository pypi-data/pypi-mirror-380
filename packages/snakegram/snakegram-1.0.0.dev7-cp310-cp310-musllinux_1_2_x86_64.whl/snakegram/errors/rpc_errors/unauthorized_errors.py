
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from ..base_rpc_errors import UnauthorizedError


class AuthKeyInvalidError(
    UnauthorizedError,
    pattern='AUTH_KEY_INVALID'
):
    """
    UnauthorizedError (401): `AUTH_KEY_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified auth key is invalid.'
        )

class AuthKeyPermEmptyError(
    UnauthorizedError,
    pattern='AUTH_KEY_PERM_EMPTY'
):
    """
    UnauthorizedError (401): `AUTH_KEY_PERM_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The method is unavailable for temporary authorization keys, not bound to a permanent authorization key.'
        )

class AuthKeyUnregisteredError(
    UnauthorizedError,
    pattern='AUTH_KEY_UNREGISTERED'
):
    """
    UnauthorizedError (401): `AUTH_KEY_UNREGISTERED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified authorization key is not registered in the system (for example, a PFS temporary key has expired).'
        )

class SessionExpiredError(
    UnauthorizedError,
    pattern='SESSION_EXPIRED'
):
    """
    UnauthorizedError (401): `SESSION_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The session has expired.'
        )

class SessionPasswordNeededError(
    UnauthorizedError,
    pattern='SESSION_PASSWORD_NEEDED'
):
    """
    UnauthorizedError (401): `SESSION_PASSWORD_NEEDED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            '2FA is enabled, use a password to login.'
        )

class SessionRevokedError(
    UnauthorizedError,
    pattern='SESSION_REVOKED'
):
    """
    UnauthorizedError (401): `SESSION_REVOKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The session was revoked by the user.'
        )

class UserDeactivatedError(
    UnauthorizedError,
    pattern='USER_DEACTIVATED'
):
    """
    UnauthorizedError (401): `USER_DEACTIVATED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The current account was deleted by the user.'
        )

class UserDeactivatedBanError(
    UnauthorizedError,
    pattern='USER_DEACTIVATED_BAN'
):
    """
    UnauthorizedError (401): `USER_DEACTIVATED_BAN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The current account was deleted and banned by Telegram's antispam system."
        )

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List, Union
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..chat import TypeChat
    from ..user import TypeUser
    from ..peer_blocked import TypePeerBlocked
    from ....gadgets.byteutils import Reader


class Blocked(TLObject, family='TypeContactsBlocked'):
    """
    Full list of blocked users.
    """

    _id = 0XADE1591
    _group_id = 0X5E5B815

    def __init__(
        self,
        blocked: List['TypePeerBlocked'],
        chats: List['TypeChat'],
        users: List['TypeUser']
    ):

        """
        Full list of blocked users.

        Args:
            blocked (List['TypePeerBlocked']): List of blocked users
            chats (List['TypeChat']): Blocked chats
            users (List['TypeUser']): List of users
        """

        self.blocked = blocked
        self.chats = chats
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x91\x15\xde\n' if boxed else b'') as writer:
            writer.vector(
                self.blocked,
                lambda value: writer.object(
                    value,
                    group_id=0XA27FE45B
                )
            )
            writer.vector(
                self.chats,
                lambda value: writer.object(
                    value,
                    group_id=0X73A5C0D9
                )
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        blocked_ = reader.vector(
            lambda: reader.object(
                group_id=0XA27FE45B
            )
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            blocked=blocked_,
            chats=chats_,
            users=users_
        )

class BlockedSlice(TLObject, family='TypeContactsBlocked'):
    """
    Incomplete list of blocked users.
    """

    _id = 0XE1664194
    _group_id = 0X5E5B815

    def __init__(
        self,
        count: int,
        blocked: List['TypePeerBlocked'],
        chats: List['TypeChat'],
        users: List['TypeUser']
    ):

        """
        Incomplete list of blocked users.

        Args:
            count (int): Total number of elements in the list
            blocked (List['TypePeerBlocked']): List of blocked users
            chats (List['TypeChat']): Blocked chats
            users (List['TypeUser']): List of users
        """

        self.count = count
        self.blocked = blocked
        self.chats = chats
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x94Af\xe1' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.blocked,
                lambda value: writer.object(
                    value,
                    group_id=0XA27FE45B
                )
            )
            writer.vector(
                self.chats,
                lambda value: writer.object(
                    value,
                    group_id=0X73A5C0D9
                )
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        blocked_ = reader.vector(
            lambda: reader.object(
                group_id=0XA27FE45B
            )
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            count=count_,
            blocked=blocked_,
            chats=chats_,
            users=users_
        )

TypeContactsBlocked = Union[
    Blocked,
    BlockedSlice
]
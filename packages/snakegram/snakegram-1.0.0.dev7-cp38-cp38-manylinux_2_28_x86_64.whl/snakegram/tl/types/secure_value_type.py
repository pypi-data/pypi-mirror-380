
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class SecureValueTypePersonalDetails(TLObject, family='TypeSecureValueType'):
    """
    Personal details
    """

    _id = 0X9D2A81E3
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\xe3\x81*\x9d' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypePassport(TLObject, family='TypeSecureValueType'):
    """
    Passport
    """

    _id = 0X3DAC6A00
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\x00j\xac=' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeDriverLicense(TLObject, family='TypeSecureValueType'):
    """
    Driver's license
    """

    _id = 0X6E425C4
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\xc4%\xe4\x06' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeIdentityCard(TLObject, family='TypeSecureValueType'):
    """
    Identity card
    """

    _id = 0XA0D0744B
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'Kt\xd0\xa0' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeInternalPassport(TLObject, family='TypeSecureValueType'):
    """
    Internal [passport](https://core.telegram.org/passport)
    """

    _id = 0X99A48F23
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'#\x8f\xa4\x99' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeAddress(TLObject, family='TypeSecureValueType'):
    """
    Address
    """

    _id = 0XCBE31E26
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'&\x1e\xe3\xcb' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeUtilityBill(TLObject, family='TypeSecureValueType'):
    """
    Utility bill
    """

    _id = 0XFC36954E
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'N\x956\xfc' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeBankStatement(TLObject, family='TypeSecureValueType'):
    """
    Bank statement
    """

    _id = 0X89137C0D
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\r|\x13\x89' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeRentalAgreement(TLObject, family='TypeSecureValueType'):
    """
    Rental agreement
    """

    _id = 0X8B883488
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\x884\x88\x8b' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypePassportRegistration(TLObject, family='TypeSecureValueType'):
    """
    Internal registration [passport](https://core.telegram.org/passport)
    """

    _id = 0X99E3806A
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'j\x80\xe3\x99' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeTemporaryRegistration(TLObject, family='TypeSecureValueType'):
    """
    Temporary registration
    """

    _id = 0XEA02EC33
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'3\xec\x02\xea' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypePhone(TLObject, family='TypeSecureValueType'):
    """
    Phone
    """

    _id = 0XB320AADB
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\xdb\xaa \xb3' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureValueTypeEmail(TLObject, family='TypeSecureValueType'):
    """
    Email
    """

    _id = 0X8E3CA7EE
    _group_id = 0X24ADF799


    def to_bytes(self, boxed: bool=True):
        return b'\xee\xa7<\x8e' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeSecureValueType = Union[
    SecureValueTypePersonalDetails,
    SecureValueTypePassport,
    SecureValueTypeDriverLicense,
    SecureValueTypeIdentityCard,
    SecureValueTypeInternalPassport,
    SecureValueTypeAddress,
    SecureValueTypeUtilityBill,
    SecureValueTypeBankStatement,
    SecureValueTypeRentalAgreement,
    SecureValueTypePassportRegistration,
    SecureValueTypeTemporaryRegistration,
    SecureValueTypePhone,
    SecureValueTypeEmail
]
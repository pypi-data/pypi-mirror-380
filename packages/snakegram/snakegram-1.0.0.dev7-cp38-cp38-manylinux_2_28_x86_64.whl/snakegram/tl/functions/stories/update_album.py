
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, List, TYPE_CHECKING
from ...types.story_album import TypeStoryAlbum
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class UpdateAlbum(TLRequest[TypeStoryAlbum]):
    _id = 0X5E5259B6
    _result_id = 0X48B2C677

    def __init__(
        self,
        peer: 'TypeInputPeer',
        album_id: int,
        title: Optional[str] = None,
        delete_stories: Optional[List[int]] = None,
        add_stories: Optional[List[int]] = None,
        order: Optional[List[int]] = None
    ):

        self.peer = peer
        self.album_id = album_id
        self.title = title
        self.delete_stories = delete_stories
        self.add_stories = add_stories
        self.order = order

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xb6YR^' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.object(
                    self.peer,
                    group_id=0X995DB9DF
                )
                writer.int(self.album_id)

                if flags(self.title, 0):
                    writer.string(self.title)

                if flags(self.delete_stories, 1):
                    writer.vector(
                        self.delete_stories,
                        writer.int
                    )

                if flags(self.add_stories, 2):
                    writer.vector(
                        self.add_stories,
                        writer.int
                    )

                if flags(self.order, 3):
                    writer.vector(
                        self.order,
                        writer.int
                    )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...types.updates import TypeUpdates
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer
    from ...types.text_with_entities import TypeTextWithEntities


class EditFactCheck(TLRequest[TypeUpdates]):
    """
    Edit/create a [fact-check](https://core.telegram.org/api/factcheck) on a message.

    Raises:
        `403`ChatActionForbiddenError: You cannot execute this action.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0X589EE75
    _result_id = 0XD68D29C0

    def __init__(
        self,
        peer: 'TypeInputPeer',
        msg_id: int,
        text: 'TypeTextWithEntities'
    ):

        """
        Edit/create a [fact-check](https://core.telegram.org/api/factcheck) on a message.

        Args:
            peer ('TypeInputPeer'): Peer where the message was sent
            msg_id (int): Message ID
            text ('TypeTextWithEntities'): Fact-check (maximum UTF-8 length specified in [appConfig.factcheck_length_limit](https://core.telegram.org/api/config#factcheck-length-limit)).
        """

        self.peer = peer
        self.msg_id = msg_id
        self.text = text

    def to_bytes(self, boxed: bool=True):
        with Writer(b'u\xee\x89\x05' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.msg_id)
            writer.object(
                self.text,
                group_id=0X5D96896
            )

            return writer.getvalue()
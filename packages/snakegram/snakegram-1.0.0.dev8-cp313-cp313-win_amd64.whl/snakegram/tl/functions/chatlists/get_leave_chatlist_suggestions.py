
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ...types.peer import TypePeer
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_chatlist import TypeInputChatlist


class GetLeaveChatlistSuggestions(TLRequest[List[TypePeer]]):
    """
    Returns identifiers of pinned or always included chats from a chat folder imported using a [chat folder deep link](https://core.telegram.org/api/links#chat-folder-links), which are suggested to be left when the chat folder is deleted.

    Raises:
        `400`FilterIdInvalidError: The specified filter ID is invalid.
        `400`FilterNotSupportedError: The specified filter cannot be used in this context.

    """

    _id = 0XFDBCD714

    def __init__(
        self,
        chatlist: 'TypeInputChatlist'
    ):

        """
        Returns identifiers of pinned or always included chats from a chat folder imported using a [chat folder deep link](https://core.telegram.org/api/links#chat-folder-links), which are suggested to be left when the chat folder is deleted.

        Args:
            chatlist ('TypeInputChatlist'): Folder ID
        """

        self.chatlist = chatlist

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x14\xd7\xbc\xfd' if boxed else b'') as writer:
            writer.object(
                self.chatlist,
                group_id=0XF1847C0F
            )

            return writer.getvalue()
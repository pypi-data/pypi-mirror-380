
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..user import TypeUser
    from ....gadgets.byteutils import Reader
    from ..connected_bot_star_ref import TypeConnectedBotStarRef


class ConnectedStarRefBots(TLObject, family='TypePaymentsConnectedStarRefBots'):
    """
    Active [affiliations](https://core.telegram.org/api/bots/referrals#becoming-an-affiliate)
    """

    _id = 0X98D5EA1D
    _group_id = 0X84FD0666

    def __init__(
        self,
        count: int,
        connected_bots: List['TypeConnectedBotStarRef'],
        users: List['TypeUser']
    ):

        """
        Active [affiliations](https://core.telegram.org/api/bots/referrals#becoming-an-affiliate)

        Args:
            count (int): Total number of active affiliations
            connected_bots (List['TypeConnectedBotStarRef']): The affiliations
            users (List['TypeUser']): Peers mentioned in connected_bots
        """

        self.count = count
        self.connected_bots = connected_bots
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x1d\xea\xd5\x98' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.connected_bots,
                lambda value: writer.object(
                    value,
                    group_id=0X6510BF0A
                )
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        connected_bots_ = reader.vector(
            lambda: reader.object(
                group_id=0X6510BF0A
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            count=count_,
            connected_bots=connected_bots_,
            users=users_
        )

TypePaymentsConnectedStarRefBots = ConnectedStarRefBots
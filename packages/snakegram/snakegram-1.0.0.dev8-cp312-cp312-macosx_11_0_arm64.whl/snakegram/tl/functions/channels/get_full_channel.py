
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.chat_full import TypeMessagesChatFull


if TYPE_CHECKING:
    from ...types.input_channel import TypeInputChannel


class GetFullChannel(TLRequest[TypeMessagesChatFull]):
    """
    Get full info about a [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [channel](https://core.telegram.org/api/channel#channels)

    **Bots can use this method**

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChatNotModifiedError: No changes were made to chat information because the new information you passed is identical to the current information.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `406`ChannelPrivateError: You haven't joined this channel/supergroup.
        `403`ChannelPublicGroupNaError: channel/supergroup not available.

    """

    _id = 0X8736A09
    _result_id = 0X3E55CBDF

    def __init__(
        self,
        channel: 'TypeInputChannel'
    ):

        """
        Get full info about a [supergroup](https://core.telegram.org/api/channel#supergroups), [gigagroup](https://core.telegram.org/api/channel#gigagroups) or [channel](https://core.telegram.org/api/channel#channels)

        **Bots can use this method**

        Args:
            channel ('TypeInputChannel'): The [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups) to get info about
        """

        self.channel = channel

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\tjs\x08' if boxed else b'') as writer:
            writer.object(
                self.channel,
                group_id=0X42691CEF
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, List, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.web_page_preview import TypeMessagesWebPagePreview


if TYPE_CHECKING:
    from ...types.message_entity import TypeMessageEntity


class GetWebPagePreview(TLRequest[TypeMessagesWebPagePreview]):
    """
    Get preview of webpage

    Raises:
        `400`EntityBoundsInvalidError: A specified [entity offset or length](https://core.telegram.org/api/entities#entity-length) is invalid, see [here &raquo;](https://core.telegram.org/api/entities#entity-length) for info on how to properly compute the entity offset/length.
        `400`MessageEmptyError: The provided message is empty.

    """

    _id = 0X570D6F6F
    _result_id = 0XF01A9A03

    def __init__(
        self,
        message: str,
        entities: Optional[List['TypeMessageEntity']] = None
    ):

        """
        Get preview of webpage

        Args:
            message (str): Message from which to extract the preview
            entities (Optional[List['TypeMessageEntity']], optional): [Message entities for styled text](https://core.telegram.org/api/entities)
        """

        self.message = message
        self.entities = entities

    def to_bytes(self, boxed: bool=True):
        with Writer(b'oo\rW' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.string(self.message)

                if flags(self.entities, 3):
                    writer.vector(
                        self.entities,
                        lambda value: writer.object(
                            value,
                            group_id=0X3CDFF38A
                        )
                    )

            return writer.getvalue()
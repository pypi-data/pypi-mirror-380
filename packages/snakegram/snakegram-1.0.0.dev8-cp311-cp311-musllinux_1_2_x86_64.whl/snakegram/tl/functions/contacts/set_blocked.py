
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class SetBlocked(TLRequest[bool]):
    """
    Replace the contents of an entire [blocklist, see here for more info](https://core.telegram.org/api/block).
    """

    _id = 0X94C65C76
    _result_id = 0X43B904E1

    def __init__(
        self,
        id: List['TypeInputPeer'],
        limit: int,
        my_stories_from: bool = False
    ):

        """
        Replace the contents of an entire [blocklist, see here for more info](https://core.telegram.org/api/block).

        Args:
            id (List['TypeInputPeer']): Full content of the blocklist.
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
            my_stories_from (bool, optional): Whether to edit the story blocklist; if not set, will edit the main blocklist. See [here](https://core.telegram.org/api/block) for differences between the two.
        """

        self.id = id
        self.limit = limit
        self.my_stories_from = my_stories_from

    def to_bytes(self, boxed: bool=True):
        with Writer(b'v\\\xc6\x94' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.my_stories_from, 0)
                writer.vector(
                    self.id,
                    lambda value: writer.object(
                        value,
                        group_id=0X995DB9DF
                    )
                )
                writer.int(self.limit)

            return writer.getvalue()
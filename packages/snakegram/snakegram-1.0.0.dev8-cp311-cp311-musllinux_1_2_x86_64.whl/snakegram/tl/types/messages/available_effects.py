
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..document import TypeDocument
    from ..available_effect import TypeAvailableEffect
    from ....gadgets.byteutils import Reader


class AvailableEffectsNotModified(TLObject, family='TypeMessagesAvailableEffects'):
    """
    The full list of usable [animated message effects](https://core.telegram.org/api/effects) hasn't changed.
    """

    _id = 0XD1ED9A5B
    _group_id = 0X9BFC4B02


    def to_bytes(self, boxed: bool=True):
        return b'[\x9a\xed\xd1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AvailableEffects(TLObject, family='TypeMessagesAvailableEffects'):
    """
    The full list of usable [animated message effects](https://core.telegram.org/api/effects).
    """

    _id = 0XBDDB616E
    _group_id = 0X9BFC4B02

    def __init__(
        self,
        hash: int,
        effects: List['TypeAvailableEffect'],
        documents: List['TypeDocument']
    ):

        """
        The full list of usable [animated message effects](https://core.telegram.org/api/effects).

        Args:
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            effects (List['TypeAvailableEffect']): Message effects
            documents (List['TypeDocument']): Documents specified in the effects constructors.
        """

        self.hash = hash
        self.effects = effects
        self.documents = documents

    def to_bytes(self, boxed: bool=True):
        with Writer(b'na\xdb\xbd' if boxed else b'') as writer:
            writer.int(self.hash)
            writer.vector(
                self.effects,
                lambda value: writer.object(
                    value,
                    group_id=0X34642D8E
                )
            )
            writer.vector(
                self.documents,
                lambda value: writer.object(
                    value,
                    group_id=0X6547BD50
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        hash_ = reader.int()
        effects_ = reader.vector(
            lambda: reader.object(
                group_id=0X34642D8E
            )
        )

        documents_ = reader.vector(
            lambda: reader.object(
                group_id=0X6547BD50
            )
        )

        return cls(
            hash=hash_,
            effects=effects_,
            documents=documents_
        )

TypeMessagesAvailableEffects = Union[
    AvailableEffectsNotModified,
    AvailableEffects
]
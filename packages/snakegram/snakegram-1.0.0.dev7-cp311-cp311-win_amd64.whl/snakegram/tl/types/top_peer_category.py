
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class TopPeerCategoryBotsPM(TLObject, family='TypeTopPeerCategory'):
    """
    Most used bots
    """

    _id = 0XAB661B5B
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'[\x1bf\xab' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryBotsInline(TLObject, family='TypeTopPeerCategory'):
    """
    Most used inline bots
    """

    _id = 0X148677E2
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\xe2w\x86\x14' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryCorrespondents(TLObject, family='TypeTopPeerCategory'):
    """
    Users we've chatted most frequently with
    """

    _id = 0X637B7ED
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\xed\xb77\x06' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryGroups(TLObject, family='TypeTopPeerCategory'):
    """
    Often-opened groups and supergroups
    """

    _id = 0XBD17A14A
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'J\xa1\x17\xbd' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryChannels(TLObject, family='TypeTopPeerCategory'):
    """
    Most frequently visited channels
    """

    _id = 0X161D9628
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'(\x96\x1d\x16' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryPhoneCalls(TLObject, family='TypeTopPeerCategory'):
    """
    Most frequently called users
    """

    _id = 0X1E76A78C
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\x8c\xa7v\x1e' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryForwardUsers(TLObject, family='TypeTopPeerCategory'):
    """
    Users to which the users often forwards messages to
    """

    _id = 0XA8406CA9
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\xa9l@\xa8' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryForwardChats(TLObject, family='TypeTopPeerCategory'):
    """
    Chats to which the users often forwards messages to
    """

    _id = 0XFBEEC0F0
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\xf0\xc0\xee\xfb' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class TopPeerCategoryBotsApp(TLObject, family='TypeTopPeerCategory'):
    """
    Most frequently used [Main Mini Bot Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps).
    """

    _id = 0XFD9E7BEC
    _group_id = 0X71CE270D


    def to_bytes(self, boxed: bool=True):
        return b'\xec{\x9e\xfd' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeTopPeerCategory = Union[
    TopPeerCategoryBotsPM,
    TopPeerCategoryBotsInline,
    TopPeerCategoryCorrespondents,
    TopPeerCategoryGroups,
    TopPeerCategoryChannels,
    TopPeerCategoryPhoneCalls,
    TopPeerCategoryForwardUsers,
    TopPeerCategoryForwardChats,
    TopPeerCategoryBotsApp
]
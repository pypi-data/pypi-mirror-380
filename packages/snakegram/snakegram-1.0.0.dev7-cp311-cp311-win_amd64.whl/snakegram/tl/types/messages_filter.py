
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class InputMessagesFilterEmpty(TLObject, family='TypeMessagesFilter'):
    """
    Filter is absent.
    """

    _id = 0X57E2F66C
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'l\xf6\xe2W' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterPhotos(TLObject, family='TypeMessagesFilter'):
    """
    Filter for messages containing photos.
    """

    _id = 0X9609A51C
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x1c\xa5\t\x96' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterVideo(TLObject, family='TypeMessagesFilter'):
    """
    Filter for messages containing videos.
    """

    _id = 0X9FC00E65
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'e\x0e\xc0\x9f' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterPhotoVideo(TLObject, family='TypeMessagesFilter'):
    """
    Filter for messages containing photos or videos.
    """

    _id = 0X56E9F0E4
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\xe4\xf0\xe9V' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterDocument(TLObject, family='TypeMessagesFilter'):
    """
    Filter for messages containing documents.
    """

    _id = 0X9EDDF188
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x88\xf1\xdd\x9e' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterUrl(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing URLs
    """

    _id = 0X7EF0DD87
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x87\xdd\xf0~' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterGif(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing gifs
    """

    _id = 0XFFC86587
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x87e\xc8\xff' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterVoice(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing voice notes
    """

    _id = 0X50F5C392
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x92\xc3\xf5P' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterMusic(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing audio files
    """

    _id = 0X3751B49E
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x9e\xb4Q7' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterChatPhotos(TLObject, family='TypeMessagesFilter'):
    """
    Return only chat photo changes
    """

    _id = 0X3A20ECB8
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\xb8\xec :' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterPhoneCalls(TLObject, family='TypeMessagesFilter'):
    """
    Return only phone calls
    """

    _id = 0X80C99768
    _group_id = 0X8CDA33F

    def __init__(
        self,
        missed: bool = False
    ):

        """
        Return only phone calls

        Args:
            missed (bool, optional): Return only missed phone calls
        """

        self.missed = missed

    def to_bytes(self, boxed: bool=True):
        with Writer(b'h\x97\xc9\x80' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.missed, 0)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()

        return cls(
            missed=flags(0)
        )

class InputMessagesFilterRoundVoice(TLObject, family='TypeMessagesFilter'):
    """
    Return only round videos and voice notes
    """

    _id = 0X7A7C17A4
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\xa4\x17|z' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterRoundVideo(TLObject, family='TypeMessagesFilter'):
    """
    Return only round videos
    """

    _id = 0XB549DA53
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'S\xdaI\xb5' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterMyMentions(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages where the current user was [mentioned](https://core.telegram.org/api/mentions).
    """

    _id = 0XC1F8E69A
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x9a\xe6\xf8\xc1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterGeo(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing geolocations
    """

    _id = 0XE7026D0D
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\rm\x02\xe7' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterContacts(TLObject, family='TypeMessagesFilter'):
    """
    Return only messages containing contacts
    """

    _id = 0XE062DB83
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'\x83\xdbb\xe0' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputMessagesFilterPinned(TLObject, family='TypeMessagesFilter'):
    """
    Fetch only pinned messages
    """

    _id = 0X1BB00451
    _group_id = 0X8CDA33F


    def to_bytes(self, boxed: bool=True):
        return b'Q\x04\xb0\x1b' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeMessagesFilter = Union[
    InputMessagesFilterEmpty,
    InputMessagesFilterPhotos,
    InputMessagesFilterVideo,
    InputMessagesFilterPhotoVideo,
    InputMessagesFilterDocument,
    InputMessagesFilterUrl,
    InputMessagesFilterGif,
    InputMessagesFilterVoice,
    InputMessagesFilterMusic,
    InputMessagesFilterChatPhotos,
    InputMessagesFilterPhoneCalls,
    InputMessagesFilterRoundVoice,
    InputMessagesFilterRoundVideo,
    InputMessagesFilterMyMentions,
    InputMessagesFilterGeo,
    InputMessagesFilterContacts,
    InputMessagesFilterPinned
]
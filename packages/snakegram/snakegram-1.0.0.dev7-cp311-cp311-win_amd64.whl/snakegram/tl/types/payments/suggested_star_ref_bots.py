
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING, Optional
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..user import TypeUser
    from ..star_ref_program import TypeStarRefProgram
    from ....gadgets.byteutils import Reader


class SuggestedStarRefBots(TLObject, family='TypePaymentsSuggestedStarRefBots'):
    """
    A list of suggested [mini apps](https://core.telegram.org/api/bots/webapps) with available [affiliate programs](https://core.telegram.org/api/bots/referrals)
    """

    _id = 0XB4D5D859
    _group_id = 0XD7BB8E42

    def __init__(
        self,
        count: int,
        suggested_bots: List['TypeStarRefProgram'],
        users: List['TypeUser'],
        next_offset: Optional[str] = None
    ):

        """
        A list of suggested [mini apps](https://core.telegram.org/api/bots/webapps) with available [affiliate programs](https://core.telegram.org/api/bots/referrals)

        Args:
            count (int): Total number of results (for pagination)
            suggested_bots (List['TypeStarRefProgram']): Suggested affiliate programs (full or partial list to be fetched using pagination)
            users (List['TypeUser']): Peers mentioned in suggested_bots
            next_offset (Optional[str], optional): Next offset for [pagination](https://core.telegram.org/api/offsets)
        """

        self.count = count
        self.suggested_bots = suggested_bots
        self.users = users
        self.next_offset = next_offset

    def to_bytes(self, boxed: bool=True):
        with Writer(b'Y\xd8\xd5\xb4' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.int(self.count)
                writer.vector(
                    self.suggested_bots,
                    lambda value: writer.object(
                        value,
                        group_id=0X1A73AF29
                    )
                )
                writer.vector(
                    self.users,
                    lambda value: writer.object(
                        value,
                        group_id=0X9BABE43A
                    )
                )

                if flags(self.next_offset, 0):
                    writer.string(self.next_offset)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        count_ = reader.int()
        suggested_bots_ = reader.vector(
            lambda: reader.object(
                group_id=0X1A73AF29
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        next_offset_ = (
            reader.string()
            if flags(0) else None
        )

        return cls(
            count=count_,
            suggested_bots=suggested_bots_,
            users=users_,
            next_offset=next_offset_
        )

TypePaymentsSuggestedStarRefBots = SuggestedStarRefBots

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .peer import TypePeer
    from .message import TypeMessage
    from .story_item import TypeStoryItem
    from ...gadgets.byteutils import Reader


class PublicForwardMessage(TLObject, family='TypePublicForward'):
    """
    Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a message.
    """

    _id = 0X1F2BF4A
    _group_id = 0X912BFF85

    def __init__(
        self,
        message: 'TypeMessage'
    ):

        """
        Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a message.

        Args:
            message ('TypeMessage'): Info about the message with the reposted story.
        """

        self.message = message

    def to_bytes(self, boxed: bool=True):
        with Writer(b'J\xbf\xf2\x01' if boxed else b'') as writer:
            writer.object(
                self.message,
                group_id=0X25780A8F
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        message_ = reader.object(
            group_id=0X25780A8F
        )

        return cls(
            message=message_
        )

class PublicForwardStory(TLObject, family='TypePublicForward'):
    """
    Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a repost by a public channel.
    """

    _id = 0XEDF3ADD0
    _group_id = 0X912BFF85

    def __init__(
        self,
        peer: 'TypePeer',
        story: 'TypeStoryItem'
    ):

        """
        Contains info about a forward of a [story](https://core.telegram.org/api/stories) as a repost by a public channel.

        Args:
            peer ('TypePeer'): The channel that reposted the story.
            story ('TypeStoryItem'): The reposted story (may be different from the original story).
        """

        self.peer = peer
        self.story = story

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd0\xad\xf3\xed' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0XB4DECBCA
            )
            writer.object(
                self.story,
                group_id=0X8436985A
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        peer_ = reader.object(
            group_id=0XB4DECBCA
        )

        story_ = reader.object(
            group_id=0X8436985A
        )

        return cls(
            peer=peer_,
            story=story_
        )

TypePublicForward = Union[
    PublicForwardMessage,
    PublicForwardStory
]
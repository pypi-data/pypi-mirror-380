
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.auth.authorization import TypeAuthAuthorization


class ImportBotAuthorization(TLRequest[TypeAuthAuthorization]):
    """
    Login as a bot

    **Bots can use this method**

    Raises:
        `400`AccessTokenExpiredError: Access token expired.
        `400`AccessTokenInvalidError: Access token invalid.
        `400`ApiIdInvalidError: API ID invalid.
        `400`ApiIdPublishedFloodError: This API id was published somewhere, you can't use it now.

    """

    _id = 0X67A3FF2C
    _result_id = 0X2A654890

    def __init__(
        self,
        flags: int,
        api_id: int,
        api_hash: str,
        bot_auth_token: str
    ):

        """
        Login as a bot

        **Bots can use this method**

        Args:
            flags (int): ...
            api_id (int): Application identifier (see. [App configuration](https://core.telegram.org/myapp))
            api_hash (str): Application identifier hash (see. [App configuration](https://core.telegram.org/myapp))
            bot_auth_token (str): Bot token (see [bots](https://core.telegram.org/bots))
        """

        self.flags = flags
        self.api_id = api_id
        self.api_hash = api_hash
        self.bot_auth_token = bot_auth_token

    def to_bytes(self, boxed: bool=True):
        with Writer(b',\xff\xa3g' if boxed else b'') as writer:
            writer.int(self.flags)
            writer.int(self.api_id)
            writer.string(self.api_hash)
            writer.string(self.bot_auth_token)

            return writer.getvalue()
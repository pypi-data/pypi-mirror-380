
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..text_with_entities import TypeTextWithEntities
    from ....gadgets.byteutils import Reader


class TranslateResult(TLObject, family='TypeMessagesTranslatedText'):
    """
    Translated text with [entities](https://core.telegram.org/api/entities)
    """

    _id = 0X33DB32F8
    _group_id = 0X10CCC929

    def __init__(
        self,
        result: List['TypeTextWithEntities']
    ):

        """
        Translated text with [entities](https://core.telegram.org/api/entities)

        Args:
            result (List['TypeTextWithEntities']): Text+ [entities](https://core.telegram.org/api/entities), for each input message.
        """

        self.result = result

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf82\xdb3' if boxed else b'') as writer:
            writer.vector(
                self.result,
                lambda value: writer.object(
                    value,
                    group_id=0X5D96896
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        result_ = reader.vector(
            lambda: reader.object(
                group_id=0X5D96896
            )
        )

        return cls(
            result=result_
        )

TypeMessagesTranslatedText = TranslateResult
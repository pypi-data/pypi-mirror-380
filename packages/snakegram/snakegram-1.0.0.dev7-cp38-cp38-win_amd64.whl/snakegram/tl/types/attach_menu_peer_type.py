
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class AttachMenuPeerTypeSameBotPM(TLObject, family='TypeAttachMenuPeerType'):
    """
    The bot attachment menu entry is available in the chat with the bot that offers it
    """

    _id = 0X7D6BE90E
    _group_id = 0X29D3BE68


    def to_bytes(self, boxed: bool=True):
        return b'\x0e\xe9k}' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AttachMenuPeerTypeBotPM(TLObject, family='TypeAttachMenuPeerType'):
    """
    The bot attachment menu entry is available in private chats with other bots (excluding the bot that offers the current attachment menu)
    """

    _id = 0XC32BFA1A
    _group_id = 0X29D3BE68


    def to_bytes(self, boxed: bool=True):
        return b'\x1a\xfa+\xc3' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AttachMenuPeerTypePM(TLObject, family='TypeAttachMenuPeerType'):
    """
    The bot attachment menu entry is available in private chats with other users (not bots)
    """

    _id = 0XF146D31F
    _group_id = 0X29D3BE68


    def to_bytes(self, boxed: bool=True):
        return b'\x1f\xd3F\xf1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AttachMenuPeerTypeChat(TLObject, family='TypeAttachMenuPeerType'):
    """
    The bot attachment menu entry is available in [groups and supergroups](https://core.telegram.org/api/channel)
    """

    _id = 0X509113F
    _group_id = 0X29D3BE68


    def to_bytes(self, boxed: bool=True):
        return b'?\x11\t\x05' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AttachMenuPeerTypeBroadcast(TLObject, family='TypeAttachMenuPeerType'):
    """
    The bot attachment menu entry is available in channels
    """

    _id = 0X7BFBDEFC
    _group_id = 0X29D3BE68


    def to_bytes(self, boxed: bool=True):
        return b'\xfc\xde\xfb{' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeAttachMenuPeerType = Union[
    AttachMenuPeerTypeSameBotPM,
    AttachMenuPeerTypeBotPM,
    AttachMenuPeerTypePM,
    AttachMenuPeerTypeChat,
    AttachMenuPeerTypeBroadcast
]
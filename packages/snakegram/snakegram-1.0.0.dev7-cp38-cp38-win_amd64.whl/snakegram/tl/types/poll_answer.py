
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .text_with_entities import TypeTextWithEntities
    from ...gadgets.byteutils import Reader


class PollAnswer(TLObject, family='TypePollAnswer'):
    """
    A possible answer of a poll
    """

    _id = 0XFF16E2CA
    _group_id = 0X4A9B454B

    def __init__(
        self,
        text: 'TypeTextWithEntities',
        option: bytes
    ):

        """
        A possible answer of a poll

        Args:
            text ('TypeTextWithEntities'): Textual representation of the answer (only [Premium](https://core.telegram.org/api/premium) users can use [custom emoji entities](https://core.telegram.org/api/custom-emoji) here).
            option (bytes): The param that has to be passed to [messages.sendVote](https://core.telegram.org/method/messages.sendVote).
        """

        self.text = text
        self.option = option

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xca\xe2\x16\xff' if boxed else b'') as writer:
            writer.object(
                self.text,
                group_id=0X5D96896
            )
            writer.bytes(self.option)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        text_ = reader.object(
            group_id=0X5D96896
        )

        option_ = reader.bytes()

        return cls(
            text=text_,
            option=option_
        )

TypePollAnswer = PollAnswer
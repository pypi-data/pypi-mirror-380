
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class ExportedAuthorization(TLObject, family='TypeAuthExportedAuthorization'):
    """
    Data for copying of authorization between data centers.
    """

    _id = 0XB434E2B8
    _group_id = 0X51D8FD67

    def __init__(
        self,
        id: int,
        bytes: bytes
    ):

        """
        Data for copying of authorization between data centers.

        Args:
            id (int): current user identifier
            bytes (bytes): authorizes key
        """

        self.id = id
        self.bytes = bytes

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xb8\xe24\xb4' if boxed else b'') as writer:
            writer.long(self.id)
            writer.bytes(self.bytes)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        id_ = reader.long()
        bytes_ = reader.bytes()

        return cls(
            id=id_,
            bytes=bytes_
        )

TypeAuthExportedAuthorization = ExportedAuthorization

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .input_peer import TypeInputPeer
    from .input_user import TypeInputUser
    from ...gadgets.byteutils import Reader


class BotCommandScopeDefault(TLObject, family='TypeBotCommandScope'):
    """
    The commands will be valid in all dialogs
    """

    _id = 0X2F6CB2AB
    _group_id = 0XE7915F1F


    def to_bytes(self, boxed: bool=True):
        return b'\xab\xb2l/' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BotCommandScopeUsers(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will only be valid in all private chats with users.
    """

    _id = 0X3C4F04D8
    _group_id = 0XE7915F1F


    def to_bytes(self, boxed: bool=True):
        return b'\xd8\x04O<' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BotCommandScopeChats(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will be valid in all [groups and supergroups](https://core.telegram.org/api/channel).
    """

    _id = 0X6FE1A881
    _group_id = 0XE7915F1F


    def to_bytes(self, boxed: bool=True):
        return b'\x81\xa8\xe1o' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BotCommandScopeChatAdmins(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will be valid only for chat administrators, in all [groups and supergroups](https://core.telegram.org/api/channel).
    """

    _id = 0XB9AA606A
    _group_id = 0XE7915F1F


    def to_bytes(self, boxed: bool=True):
        return b'j`\xaa\xb9' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BotCommandScopePeer(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will be valid only in a specific dialog.
    """

    _id = 0XDB9D897D
    _group_id = 0XE7915F1F

    def __init__(
        self,
        peer: 'TypeInputPeer'
    ):

        """
        The specified bot commands will be valid only in a specific dialog.

        Args:
            peer ('TypeInputPeer'): The dialog
        """

        self.peer = peer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'}\x89\x9d\xdb' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        peer_ = reader.object(
            group_id=0X995DB9DF
        )

        return cls(
            peer=peer_
        )

class BotCommandScopePeerAdmins(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will be valid for all admins of the specified [group or supergroup](https://core.telegram.org/api/channel).
    """

    _id = 0X3FD863D1
    _group_id = 0XE7915F1F

    def __init__(
        self,
        peer: 'TypeInputPeer'
    ):

        """
        The specified bot commands will be valid for all admins of the specified [group or supergroup](https://core.telegram.org/api/channel).

        Args:
            peer ('TypeInputPeer'): The chat
        """

        self.peer = peer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd1c\xd8?' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        peer_ = reader.object(
            group_id=0X995DB9DF
        )

        return cls(
            peer=peer_
        )

class BotCommandScopePeerUser(TLObject, family='TypeBotCommandScope'):
    """
    The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https://core.telegram.org/api/channel).
    """

    _id = 0XA1321F3
    _group_id = 0XE7915F1F

    def __init__(
        self,
        peer: 'TypeInputPeer',
        user_id: 'TypeInputUser'
    ):

        """
        The specified bot commands will be valid only for a specific user in the specified [group or supergroup](https://core.telegram.org/api/channel).

        Args:
            peer ('TypeInputPeer'): The chat
            user_id ('TypeInputUser'): The user
        """

        self.peer = peer
        self.user_id = user_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf3!\x13\n' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.object(
                self.user_id,
                group_id=0XB628962F
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        peer_ = reader.object(
            group_id=0X995DB9DF
        )

        user_id_ = reader.object(
            group_id=0XB628962F
        )

        return cls(
            peer=peer_,
            user_id=user_id_
        )

TypeBotCommandScope = Union[
    BotCommandScopeDefault,
    BotCommandScopeUsers,
    BotCommandScopeChats,
    BotCommandScopeChatAdmins,
    BotCommandScopePeer,
    BotCommandScopePeerAdmins,
    BotCommandScopePeerUser
]
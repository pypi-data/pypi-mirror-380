
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from ..base_rpc_errors import ForbiddenError


class AnonymousReactionsDisabledError(
    ForbiddenError,
    pattern='ANONYMOUS_REACTIONS_DISABLED'
):
    """
    ForbiddenError (403): `ANONYMOUS_REACTIONS_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Sorry, anonymous administrators cannot leave reactions or participate in polls.'
        )

class BroadcastForbiddenError(
    ForbiddenError,
    pattern='BROADCAST_FORBIDDEN'
):
    """
    ForbiddenError (403): `BROADCAST_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Channel poll voters and reactions cannot be fetched to prevent deanonymization.'
        )

class ChannelPublicGroupNaError(
    ForbiddenError,
    pattern='CHANNEL_PUBLIC_GROUP_NA'
):
    """
    ForbiddenError (403): `CHANNEL_PUBLIC_GROUP_NA`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'channel/supergroup not available.'
        )

class ChatActionForbiddenError(
    ForbiddenError,
    pattern='CHAT_ACTION_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_ACTION_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot execute this action.'
        )

class ChatAdminInviteRequiredError(
    ForbiddenError,
    pattern='CHAT_ADMIN_INVITE_REQUIRED'
):
    """
    ForbiddenError (403): `CHAT_ADMIN_INVITE_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You do not have the rights to do this.'
        )

class ChatAdminRequiredError(
    ForbiddenError,
    pattern='CHAT_ADMIN_REQUIRED'
):
    """
    ForbiddenError (403): `CHAT_ADMIN_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must be an admin in this chat to do this.'
        )

class ChatGuestSendForbiddenError(
    ForbiddenError,
    pattern='CHAT_GUEST_SEND_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_GUEST_SEND_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You join the discussion group before commenting, see [here &raquo;](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group) for more info.'
        )

class ChatSendAudiosForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_AUDIOS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_AUDIOS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send audio messages in this chat."
        )

class ChatSendDocsForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_DOCS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_DOCS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send documents in this chat."
        )

class ChatSendGameForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_GAME_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_GAME_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send a game to this chat."
        )

class ChatSendGifsForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_GIFS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_GIFS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send gifs in this chat."
        )

class ChatSendInlineForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_INLINE_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_INLINE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send inline messages in this group."
        )

class ChatSendMediaForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_MEDIA_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_MEDIA_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send media in this chat."
        )

class ChatSendPhotosForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_PHOTOS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_PHOTOS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send photos in this chat."
        )

class ChatSendPlainForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_PLAIN_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_PLAIN_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send non-media (text) messages in this chat."
        )

class ChatSendPollForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_POLL_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_POLL_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send polls in this chat."
        )

class ChatSendRoundvideosForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_ROUNDVIDEOS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_ROUNDVIDEOS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send round videos to this chat."
        )

class ChatSendStickersForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_STICKERS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_STICKERS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send stickers in this chat."
        )

class ChatSendVideosForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_VIDEOS_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_VIDEOS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send videos in this chat."
        )

class ChatSendVoicesForbiddenError(
    ForbiddenError,
    pattern='CHAT_SEND_VOICES_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_SEND_VOICES_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send voice recordings in this chat."
        )

class ChatTypeInvalidError(
    ForbiddenError,
    pattern='CHAT_TYPE_INVALID'
):
    """
    ForbiddenError (403): `CHAT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified user type is invalid.'
        )

class ChatWriteForbiddenError(
    ForbiddenError,
    pattern='CHAT_WRITE_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_WRITE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't write in this chat."
        )

class EditBotInviteForbiddenError(
    ForbiddenError,
    pattern='EDIT_BOT_INVITE_FORBIDDEN'
):
    """
    ForbiddenError (403): `EDIT_BOT_INVITE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Normal users can't edit invites that were created by bots."
        )

class GroupcallAlreadyStartedError(
    ForbiddenError,
    pattern='GROUPCALL_ALREADY_STARTED'
):
    """
    ForbiddenError (403): `GROUPCALL_ALREADY_STARTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The groupcall has already started, you can join directly using [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall).'
        )

class GroupcallForbiddenError(
    ForbiddenError,
    pattern='GROUPCALL_FORBIDDEN'
):
    """
    ForbiddenError (403): `GROUPCALL_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The group call has already ended.'
        )

class InlineBotRequiredError(
    ForbiddenError,
    pattern='INLINE_BOT_REQUIRED'
):
    """
    ForbiddenError (403): `INLINE_BOT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Only the inline bot can edit message.'
        )

class MessageAuthorRequiredError(
    ForbiddenError,
    pattern='MESSAGE_AUTHOR_REQUIRED'
):
    """
    ForbiddenError (403): `MESSAGE_AUTHOR_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Message author required.'
        )

class MessageDeleteForbiddenError(
    ForbiddenError,
    pattern='MESSAGE_DELETE_FORBIDDEN'
):
    """
    ForbiddenError (403): `MESSAGE_DELETE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't delete one of the messages you tried to delete, most likely because it is a service message."
        )

class NotEligibleError(
    ForbiddenError,
    pattern='NOT_ELIGIBLE'
):
    """
    ForbiddenError (403): `NOT_ELIGIBLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The current user is not eligible to join the Peer-to-Peer Login Program.'
        )

class ParticipantJoinMissingError(
    ForbiddenError,
    pattern='PARTICIPANT_JOIN_MISSING'
):
    """
    ForbiddenError (403): `PARTICIPANT_JOIN_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall)."
        )

class PeerIdInvalidError(
    ForbiddenError,
    pattern='PEER_ID_INVALID'
):
    """
    ForbiddenError (403): `PEER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided peer id is invalid.'
        )

class PollVoteRequiredError(
    ForbiddenError,
    pattern='POLL_VOTE_REQUIRED'
):
    """
    ForbiddenError (403): `POLL_VOTE_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Cast a vote in the poll before calling this method.'
        )

class PremiumAccountRequiredError(
    ForbiddenError,
    pattern='PREMIUM_ACCOUNT_REQUIRED'
):
    """
    ForbiddenError (403): `PREMIUM_ACCOUNT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A premium account is required to execute this action.'
        )

class PrivacyPremiumRequiredError(
    ForbiddenError,
    pattern='PRIVACY_PREMIUM_REQUIRED'
):
    """
    ForbiddenError (403): `PRIVACY_PREMIUM_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You need a [Telegram Premium subscription](https://core.telegram.org/api/premium) to send a message to this user.'
        )

class PublicChannelMissingError(
    ForbiddenError,
    pattern='PUBLIC_CHANNEL_MISSING'
):
    """
    ForbiddenError (403): `PUBLIC_CHANNEL_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You can only export group call invite links for public chats or channels.'
        )

class RightForbiddenError(
    ForbiddenError,
    pattern='RIGHT_FORBIDDEN'
):
    """
    ForbiddenError (403): `RIGHT_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Your admin rights do not allow you to do this.'
        )

class SensitiveChangeForbiddenError(
    ForbiddenError,
    pattern='SENSITIVE_CHANGE_FORBIDDEN'
):
    """
    ForbiddenError (403): `SENSITIVE_CHANGE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't change your sensitive content settings."
        )

class TakeoutRequiredError(
    ForbiddenError,
    pattern='TAKEOUT_REQUIRED'
):
    """
    ForbiddenError (403): `TAKEOUT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A [takeout](https://core.telegram.org/api/takeout) session needs to be initialized first, [see here &raquo; for more info](https://core.telegram.org/api/takeout).'
        )

class UserBotInvalidError(
    ForbiddenError,
    pattern='USER_BOT_INVALID'
):
    """
    ForbiddenError (403): `USER_BOT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.'
        )

class UserChannelsTooMuchError(
    ForbiddenError,
    pattern='USER_CHANNELS_TOO_MUCH'
):
    """
    ForbiddenError (403): `USER_CHANNELS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the users you tried to add is already in too many channels/supergroups.'
        )

class UserDeletedError(
    ForbiddenError,
    pattern='USER_DELETED'
):
    """
    ForbiddenError (403): `USER_DELETED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send this secret message because the other participant deleted their account."
        )

class UserInvalidError(
    ForbiddenError,
    pattern='USER_INVALID'
):
    """
    ForbiddenError (403): `USER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid user provided.'
        )

class UserIsBlockedError(
    ForbiddenError,
    pattern='USER_IS_BLOCKED'
):
    """
    ForbiddenError (403): `USER_IS_BLOCKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You were blocked by this user.'
        )

class UserNotMutualContactError(
    ForbiddenError,
    pattern='USER_NOT_MUTUAL_CONTACT'
):
    """
    ForbiddenError (403): `USER_NOT_MUTUAL_CONTACT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided user is not a mutual contact.'
        )

class UserNotParticipantError(
    ForbiddenError,
    pattern='USER_NOT_PARTICIPANT'
):
    """
    ForbiddenError (403): `USER_NOT_PARTICIPANT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're not a member of this supergroup/channel."
        )

class UserPrivacyRestrictedError(
    ForbiddenError,
    pattern='USER_PRIVACY_RESTRICTED'
):
    """
    ForbiddenError (403): `USER_PRIVACY_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The user's privacy settings do not allow you to do this."
        )

class UserRestrictedError(
    ForbiddenError,
    pattern='USER_RESTRICTED'
):
    """
    ForbiddenError (403): `USER_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're spamreported, you can't create channels or chats."
        )

class VoiceMessagesForbiddenError(
    ForbiddenError,
    pattern='VOICE_MESSAGES_FORBIDDEN'
):
    """
    ForbiddenError (403): `VOICE_MESSAGES_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This user's privacy settings forbid you from sending voice messages."
        )

class YourPrivacyRestrictedError(
    ForbiddenError,
    pattern='YOUR_PRIVACY_RESTRICTED'
):
    """
    ForbiddenError (403): `YOUR_PRIVACY_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot fetch the read date of this message because you have disallowed other users to do so for *your* messages; to fix, allow other users to see *your* exact last online date OR purchase a [Telegram Premium](https://core.telegram.org/api/premium) subscription.'
        )

class ChatForbiddenError(
    ForbiddenError,
    pattern='CHAT_FORBIDDEN'
):
    """
    ForbiddenError (403): `CHAT_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This chat is not available to the current user.'
        )
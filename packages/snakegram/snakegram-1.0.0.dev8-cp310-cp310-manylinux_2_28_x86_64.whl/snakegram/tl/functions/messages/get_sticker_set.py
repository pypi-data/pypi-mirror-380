
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.sticker_set import TypeMessagesStickerSet


if TYPE_CHECKING:
    from ...types.input_sticker_set import TypeInputStickerSet


class GetStickerSet(TLRequest[TypeMessagesStickerSet]):
    """
    Get info about a stickerset

    **Bots can use this method**

    Raises:
        `400`EmoticonStickerpackMissingError: inputStickerSetDice.emoji cannot be empty.
        `406`StickersetInvalidError: The provided sticker set is invalid.

    """

    _id = 0XC8A0EC74
    _result_id = 0X5CC84E96

    def __init__(
        self,
        stickerset: 'TypeInputStickerSet',
        hash: int
    ):

        """
        Get info about a stickerset

        **Bots can use this method**

        Args:
            stickerset ('TypeInputStickerSet'): Stickerset
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
        """

        self.stickerset = stickerset
        self.hash = hash

    def to_bytes(self, boxed: bool=True):
        with Writer(b't\xec\xa0\xc8' if boxed else b'') as writer:
            writer.object(
                self.stickerset,
                group_id=0X919D8BA5
            )
            writer.int(self.hash)

            return writer.getvalue()
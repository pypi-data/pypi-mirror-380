
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class EmailVerifyPurposeLoginSetup(TLObject, family='TypeEmailVerifyPurpose'):
    """
    Email verification purpose: setup login email
    """

    _id = 0X4345BE73
    _group_id = 0X41635250

    def __init__(
        self,
        phone_number: str,
        phone_code_hash: str
    ):

        """
        Email verification purpose: setup login email

        Args:
            phone_number (str): Phone number
            phone_code_hash (str): Phone code hash as specified by the [documentation](https://core.telegram.org/api/auth#email-verification)
        """

        self.phone_number = phone_number
        self.phone_code_hash = phone_code_hash

    def to_bytes(self, boxed: bool=True):
        with Writer(b's\xbeEC' if boxed else b'') as writer:
            writer.string(self.phone_number)
            writer.string(self.phone_code_hash)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        phone_number_ = reader.string()
        phone_code_hash_ = reader.string()

        return cls(
            phone_number=phone_number_,
            phone_code_hash=phone_code_hash_
        )

class EmailVerifyPurposeLoginChange(TLObject, family='TypeEmailVerifyPurpose'):
    """
    Email verification purpose: change login email
    """

    _id = 0X527D22EB
    _group_id = 0X41635250


    def to_bytes(self, boxed: bool=True):
        return b'\xeb"}R' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class EmailVerifyPurposePassport(TLObject, family='TypeEmailVerifyPurpose'):
    """
    Verify an email for use in [telegram passport](https://core.telegram.org/api/passport)
    """

    _id = 0XBBF51685
    _group_id = 0X41635250


    def to_bytes(self, boxed: bool=True):
        return b'\x85\x16\xf5\xbb' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeEmailVerifyPurpose = Union[
    EmailVerifyPurposeLoginSetup,
    EmailVerifyPurposeLoginChange,
    EmailVerifyPurposePassport
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class ChannelAdminLogEventsFilter(TLObject, family='TypeChannelAdminLogEventsFilter'):
    """
    Filter only certain admin log events
    """

    _id = 0XEA107AE4
    _group_id = 0X22E916DA

    def __init__(
        self,
        join: bool = False,
        leave: bool = False,
        invite: bool = False,
        ban: bool = False,
        unban: bool = False,
        kick: bool = False,
        unkick: bool = False,
        promote: bool = False,
        demote: bool = False,
        info: bool = False,
        settings: bool = False,
        pinned: bool = False,
        edit: bool = False,
        delete: bool = False,
        group_call: bool = False,
        invites: bool = False,
        send: bool = False,
        forums: bool = False,
        sub_extend: bool = False
    ):

        """
        Filter only certain admin log events

        Args:
            join (bool, optional): [Join events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoin), including [joins using invite links](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByInvite) and [join requests](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantJoinByRequest).
            leave (bool, optional): [Leave events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantLeave)
            invite (bool, optional): [Invite events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantInvite)
            ban (bool, optional): [Ban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)
            unban (bool, optional): [Unban events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)
            kick (bool, optional): [Kick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)
            unkick (bool, optional): [Unkick events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleBan)
            promote (bool, optional): [Admin promotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin)
            demote (bool, optional): [Admin demotion events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantToggleAdmin)
            info (bool, optional): Info change events (when [about](https://core.telegram.org/constructor/channelAdminLogEventActionChangeAbout), [linked chat](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLinkedChat), [location](https://core.telegram.org/constructor/channelAdminLogEventActionChangeLocation), [photo](https://core.telegram.org/constructor/channelAdminLogEventActionChangePhoto), [stickerset](https://core.telegram.org/constructor/channelAdminLogEventActionChangeStickerSet), [title](https://core.telegram.org/constructor/channelAdminLogEventActionChangeTitle) or [username](https://core.telegram.org/constructor/channelAdminLogEventActionChangeUsername), [slowmode](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSlowMode), [history TTL](https://core.telegram.org/constructor/channelAdminLogEventActionChangeHistoryTTL) settings of a channel gets modified)
            settings (bool, optional): Settings change events ( [invites](https://core.telegram.org/constructor/channelAdminLogEventActionToggleInvites), [hidden prehistory](https://core.telegram.org/constructor/channelAdminLogEventActionTogglePreHistoryHidden), [signatures](https://core.telegram.org/constructor/channelAdminLogEventActionToggleSignatures), [default banned rights](https://core.telegram.org/constructor/channelAdminLogEventActionDefaultBannedRights), [forum toggle events](https://core.telegram.org/constructor/channelAdminLogEventActionToggleForum))
            pinned (bool, optional): [Message pin events](https://core.telegram.org/constructor/channelAdminLogEventActionUpdatePinned)
            edit (bool, optional): [Message edit events](https://core.telegram.org/constructor/channelAdminLogEventActionEditMessage)
            delete (bool, optional): [Message deletion events](https://core.telegram.org/constructor/channelAdminLogEventActionDeleteMessage)
            group_call (bool, optional): Group call events
            invites (bool, optional): Invite events
            send (bool, optional): A message was posted in a channel
            forums (bool, optional): [Forum](https://core.telegram.org/api/forum)-related events
            sub_extend (bool, optional): [Telegram Star subscription extension events](https://core.telegram.org/constructor/channelAdminLogEventActionParticipantSubExtend)
        """

        self.join = join
        self.leave = leave
        self.invite = invite
        self.ban = ban
        self.unban = unban
        self.kick = kick
        self.unkick = unkick
        self.promote = promote
        self.demote = demote
        self.info = info
        self.settings = settings
        self.pinned = pinned
        self.edit = edit
        self.delete = delete
        self.group_call = group_call
        self.invites = invites
        self.send = send
        self.forums = forums
        self.sub_extend = sub_extend

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xe4z\x10\xea' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.join, 0)
                flags(self.leave, 1)
                flags(self.invite, 2)
                flags(self.ban, 3)
                flags(self.unban, 4)
                flags(self.kick, 5)
                flags(self.unkick, 6)
                flags(self.promote, 7)
                flags(self.demote, 8)
                flags(self.info, 9)
                flags(self.settings, 10)
                flags(self.pinned, 11)
                flags(self.edit, 12)
                flags(self.delete, 13)
                flags(self.group_call, 14)
                flags(self.invites, 15)
                flags(self.send, 16)
                flags(self.forums, 17)
                flags(self.sub_extend, 18)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()

        return cls(
            join=flags(0),
            leave=flags(1),
            invite=flags(2),
            ban=flags(3),
            unban=flags(4),
            kick=flags(5),
            unkick=flags(6),
            promote=flags(7),
            demote=flags(8),
            info=flags(9),
            settings=flags(10),
            pinned=flags(11),
            edit=flags(12),
            delete=flags(13),
            group_call=flags(14),
            invites=flags(15),
            send=flags(16),
            forums=flags(17),
            sub_extend=flags(18)
        )

TypeChannelAdminLogEventsFilter = ChannelAdminLogEventsFilter
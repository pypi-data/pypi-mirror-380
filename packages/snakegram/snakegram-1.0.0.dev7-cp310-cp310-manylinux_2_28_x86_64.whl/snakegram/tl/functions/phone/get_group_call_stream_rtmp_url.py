
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.phone.group_call_stream_rtmp_url import TypePhoneGroupCallStreamRtmpUrl


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class GetGroupCallStreamRtmpUrl(TLRequest[TypePhoneGroupCallStreamRtmpUrl]):
    """
    Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with [phone.createGroupCall](https://core.telegram.org/method/phone.createGroupCall) (the rtmp_stream flag must be set).

    Raises:
        `400`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0XDEB3ABBF
    _result_id = 0XF1E0D682

    def __init__(
        self,
        peer: 'TypeInputPeer',
        revoke: bool
    ):

        """
        Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with [phone.createGroupCall](https://core.telegram.org/method/phone.createGroupCall) (the rtmp_stream flag must be set).

        Args:
            peer ('TypeInputPeer'): Peer to livestream into
            revoke (bool): Whether to revoke the previous stream key or simply return the existing one
        """

        self.peer = peer
        self.revoke = revoke

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xbf\xab\xb3\xde' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.object(
                self.revoke,
                group_id=0X43B904E1
            )

            return writer.getvalue()
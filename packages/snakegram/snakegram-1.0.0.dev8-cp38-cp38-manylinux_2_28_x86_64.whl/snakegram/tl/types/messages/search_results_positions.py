
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader
    from ..search_results_position import TypeSearchResultsPosition


class SearchResultsPositions(TLObject, family='TypeMessagesSearchResultsPositions'):
    """
    Information about sparse positions of messages
    """

    _id = 0X53B22BAF
    _group_id = 0X7D9333D2

    def __init__(
        self,
        count: int,
        positions: List['TypeSearchResultsPosition']
    ):

        """
        Information about sparse positions of messages

        Args:
            count (int): Total number of found messages
            positions (List['TypeSearchResultsPosition']): List of message positions
        """

        self.count = count
        self.positions = positions

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xaf+\xb2S' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.positions,
                lambda value: writer.object(
                    value,
                    group_id=0XF3E2DC37
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        positions_ = reader.vector(
            lambda: reader.object(
                group_id=0XF3E2DC37
            )
        )

        return cls(
            count=count_,
            positions=positions_
        )

TypeMessagesSearchResultsPositions = SearchResultsPositions
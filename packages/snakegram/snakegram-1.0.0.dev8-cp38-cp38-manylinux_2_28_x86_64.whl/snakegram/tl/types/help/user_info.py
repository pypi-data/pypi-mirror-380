
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..message_entity import TypeMessageEntity
    from ....gadgets.byteutils import Reader


class UserInfoEmpty(TLObject, family='TypeHelpUserInfo'):
    """
    Internal use
    """

    _id = 0XF3AE2EED
    _group_id = 0X4485F05


    def to_bytes(self, boxed: bool=True):
        return b'\xed.\xae\xf3' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class UserInfo(TLObject, family='TypeHelpUserInfo'):
    """
    Internal use
    """

    _id = 0X1EB3758
    _group_id = 0X4485F05

    def __init__(
        self,
        message: str,
        entities: List['TypeMessageEntity'],
        author: str,
        date: int
    ):

        """
        Internal use

        Args:
            message (str): Info
            entities (List['TypeMessageEntity']): [Message entities for styled text](https://core.telegram.org/api/entities)
            author (str): Author
            date (int): Date
        """

        self.message = message
        self.entities = entities
        self.author = author
        self.date = date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'X7\xeb\x01' if boxed else b'') as writer:
            writer.string(self.message)
            writer.vector(
                self.entities,
                lambda value: writer.object(
                    value,
                    group_id=0X3CDFF38A
                )
            )
            writer.string(self.author)
            writer.int(self.date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        message_ = reader.string()
        entities_ = reader.vector(
            lambda: reader.object(
                group_id=0X3CDFF38A
            )
        )

        author_ = reader.string()
        date_ = reader.int()

        return cls(
            message=message_,
            entities=entities_,
            author=author_,
            date=date_
        )

TypeHelpUserInfo = Union[
    UserInfoEmpty,
    UserInfo
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class StickerPack(TLObject, family='TypeStickerPack'):
    """
    A stickerpack is a group of stickers associated to the same emoji. 
    It is not a sticker pack the way it is usually intended, you may be looking for a [StickerSet](https://core.telegram.org/type/StickerSet).
    """

    _id = 0X12B299D4
    _group_id = 0X6962BC17

    def __init__(
        self,
        emoticon: str,
        documents: List[int]
    ):

        """
        A stickerpack is a group of stickers associated to the same emoji. 
        It is not a sticker pack the way it is usually intended, you may be looking for a [StickerSet](https://core.telegram.org/type/StickerSet).

        Args:
            emoticon (str): Emoji
            documents (List[int]): Stickers
        """

        self.emoticon = emoticon
        self.documents = documents

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd4\x99\xb2\x12' if boxed else b'') as writer:
            writer.string(self.emoticon)
            writer.vector(
                self.documents,
                writer.long
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        emoticon_ = reader.string()
        documents_ = reader.vector(
            reader.long
        )

        return cls(
            emoticon=emoticon_,
            documents=documents_
        )

TypeStickerPack = StickerPack

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING, Optional
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..user import TypeUser
    from ....gadgets.byteutils import Reader


class PopularAppBots(TLObject, family='TypeBotsPopularAppBots'):
    """
    Popular [Main Mini Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps), to be used in the [apps tab of global search](https://core.telegram.org/api/search#apps-tab).
    """

    _id = 0X1991B13B
    _group_id = 0XA21C88DD

    def __init__(
        self,
        users: List['TypeUser'],
        next_offset: Optional[str] = None
    ):

        """
        Popular [Main Mini Apps](https://core.telegram.org/api/bots/webapps#main-mini-apps), to be used in the [apps tab of global search](https://core.telegram.org/api/search#apps-tab).

        Args:
            users (List['TypeUser']): The bots associated to each [Main Mini App, see here](https://core.telegram.org/api/bots/webapps#main-mini-apps) for more info.
            next_offset (Optional[str], optional): Offset for [pagination](https://core.telegram.org/api/offsets).
        """

        self.users = users
        self.next_offset = next_offset

    def to_bytes(self, boxed: bool=True):
        with Writer(b';\xb1\x91\x19' if boxed else b'') as writer:
            with writer.flag() as flags:

                if flags(self.next_offset, 0):
                    writer.string(self.next_offset)
                writer.vector(
                    self.users,
                    lambda value: writer.object(
                        value,
                        group_id=0X9BABE43A
                    )
                )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        next_offset_ = (
            reader.string()
            if flags(0) else None
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            users=users_,
            next_offset=next_offset_
        )

TypeBotsPopularAppBots = PopularAppBots
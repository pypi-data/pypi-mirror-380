
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader
    from ..sponsored_message_report_option import TypeSponsoredMessageReportOption


class SponsoredMessageReportResultChooseOption(TLObject, family='TypeChannelsSponsoredMessageReportResult'):
    """
    The user must choose a report option from the localized options available in options, and after selection, [channels.reportSponsoredMessage](https://core.telegram.org/method/channels.reportSponsoredMessage) must be invoked again, passing the option's option field to the option param of the method.
    """

    _id = 0X846F9E42
    _group_id = 0XA14AF036

    def __init__(
        self,
        title: str,
        options: List['TypeSponsoredMessageReportOption']
    ):

        """
        The user must choose a report option from the localized options available in options, and after selection, [channels.reportSponsoredMessage](https://core.telegram.org/method/channels.reportSponsoredMessage) must be invoked again, passing the option's option field to the option param of the method.

        Args:
            title (str): Title of the option selection popup.
            options (List['TypeSponsoredMessageReportOption']): Localized list of options.
        """

        self.title = title
        self.options = options

    def to_bytes(self, boxed: bool=True):
        with Writer(b'B\x9eo\x84' if boxed else b'') as writer:
            writer.string(self.title)
            writer.vector(
                self.options,
                lambda value: writer.object(
                    value,
                    group_id=0XDF0166F7
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        title_ = reader.string()
        options_ = reader.vector(
            lambda: reader.object(
                group_id=0XDF0166F7
            )
        )

        return cls(
            title=title_,
            options=options_
        )

class SponsoredMessageReportResultAdsHidden(TLObject, family='TypeChannelsSponsoredMessageReportResult'):
    """
    Sponsored messages were hidden for the user in all chats.
    """

    _id = 0X3E3BCF2F
    _group_id = 0XA14AF036


    def to_bytes(self, boxed: bool=True):
        return b'/\xcf;>' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SponsoredMessageReportResultReported(TLObject, family='TypeChannelsSponsoredMessageReportResult'):
    """
    The sponsored message was reported successfully.
    """

    _id = 0XAD798849
    _group_id = 0XA14AF036


    def to_bytes(self, boxed: bool=True):
        return b'I\x88y\xad' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeChannelsSponsoredMessageReportResult = Union[
    SponsoredMessageReportResultChooseOption,
    SponsoredMessageReportResultAdsHidden,
    SponsoredMessageReportResultReported
]
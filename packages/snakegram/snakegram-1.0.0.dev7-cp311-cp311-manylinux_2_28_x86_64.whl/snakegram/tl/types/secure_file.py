
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class SecureFileEmpty(TLObject, family='TypeSecureFile'):
    """
    Empty constructor
    """

    _id = 0X64199744
    _group_id = 0X69864312


    def to_bytes(self, boxed: bool=True):
        return b'D\x97\x19d' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class SecureFile(TLObject, family='TypeSecureFile'):
    """
    Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs](https://core.telegram.org/passport/encryption#inputsecurefile)
    """

    _id = 0X7D09C27E
    _group_id = 0X69864312

    def __init__(
        self,
        id: int,
        access_hash: int,
        size: int,
        dc_id: int,
        date: int,
        file_hash: bytes,
        secret: bytes
    ):

        """
        Secure [passport](https://core.telegram.org/passport) file, for more info [see the passport docs](https://core.telegram.org/passport/encryption#inputsecurefile)

        Args:
            id (int): ID
            access_hash (int): Access hash
            size (int): File size
            dc_id (int): DC ID
            date (int): Date of upload
            file_hash (bytes): File hash
            secret (bytes): Secret
        """

        self.id = id
        self.access_hash = access_hash
        self.size = size
        self.dc_id = dc_id
        self.date = date
        self.file_hash = file_hash
        self.secret = secret

    def to_bytes(self, boxed: bool=True):
        with Writer(b'~\xc2\t}' if boxed else b'') as writer:
            writer.long(self.id)
            writer.long(self.access_hash)
            writer.long(self.size)
            writer.int(self.dc_id)
            writer.int(self.date)
            writer.bytes(self.file_hash)
            writer.bytes(self.secret)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        id_ = reader.long()
        access_hash_ = reader.long()
        size_ = reader.long()
        dc_id_ = reader.int()
        date_ = reader.int()
        file_hash_ = reader.bytes()
        secret_ = reader.bytes()

        return cls(
            id=id_,
            access_hash=access_hash_,
            size=size_,
            dc_id=dc_id_,
            date=date_,
            file_hash=file_hash_,
            secret=secret_
        )

TypeSecureFile = Union[
    SecureFileEmpty,
    SecureFile
]
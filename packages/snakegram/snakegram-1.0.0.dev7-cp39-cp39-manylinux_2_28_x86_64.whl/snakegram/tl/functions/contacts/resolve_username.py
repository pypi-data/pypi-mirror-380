
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.contacts.resolved_peer import TypeContactsResolvedPeer


class ResolveUsername(TLRequest[TypeContactsResolvedPeer]):
    """
    Resolve a @username to get peer info

    **Bots can use this method**

    Raises:
        `400`ConnectionLayerInvalidError: Layer invalid.
        `400`UsernameInvalidError: The provided username is not valid.
        `400`UsernameNotOccupiedError: The provided username is not occupied.

    """

    _id = 0X725AFBBC
    _result_id = 0X10C42A66

    def __init__(
        self,
        username: str,
        referer: Optional[str] = None
    ):

        """
        Resolve a @username to get peer info

        **Bots can use this method**

        Args:
            username (str): @username to resolve
            referer (Optional[str], optional): [Referrer ID from referral links](https://core.telegram.org/api/links#referral-links).
        """

        self.username = username
        self.referer = referer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xbc\xfbZr' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.string(self.username)

                if flags(self.referer, 0):
                    writer.string(self.referer)

            return writer.getvalue()
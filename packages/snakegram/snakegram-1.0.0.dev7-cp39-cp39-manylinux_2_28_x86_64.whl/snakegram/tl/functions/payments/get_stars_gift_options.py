
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional, List, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stars_gift_option import TypeStarsGiftOption


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser


class GetStarsGiftOptions(TLRequest[List[TypeStarsGiftOption]]):
    """
    Obtain a list of [Telegram Stars gift options](https://core.telegram.org/api/stars#buying-or-gifting-stars) as [starsGiftOption](https://core.telegram.org/constructor/starsGiftOption) constructors.

    Raises:
        `400`UserGiftUnavailableError: Gifts are not available in the current region ([stars_gifts_enabled](https://core.telegram.org/api/config#stars-gifts-enabled) is equal to false).
        `400`UserIdInvalidError: The provided user ID is invalid.

    """

    _id = 0XD3C96BC8

    def __init__(
        self,
        user_id: Optional['TypeInputUser'] = None
    ):

        """
        Obtain a list of [Telegram Stars gift options](https://core.telegram.org/api/stars#buying-or-gifting-stars) as [starsGiftOption](https://core.telegram.org/constructor/starsGiftOption) constructors.

        Args:
            user_id (Optional['TypeInputUser'], optional): Receiver of the gift (optional).
        """

        self.user_id = user_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc8k\xc9\xd3' if boxed else b'') as writer:
            with writer.flag() as flags:

                if flags(self.user_id, 0):
                    writer.object(
                        self.user_id,
                        group_id=0XB628962F
                    )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..sticker_set_covered import TypeStickerSetCovered
    from ....gadgets.byteutils import Reader


class MyStickers(TLObject, family='TypeMessagesMyStickers'):
    """
    The list of [stickersets owned by the current account](https://core.telegram.org/api/stickers).
    """

    _id = 0XFAFF629D
    _group_id = 0X760C31C6

    def __init__(
        self,
        count: int,
        sets: List['TypeStickerSetCovered']
    ):

        """
        The list of [stickersets owned by the current account](https://core.telegram.org/api/stickers).

        Args:
            count (int): Total number of owned stickersets.
            sets (List['TypeStickerSetCovered']): Stickersets
        """

        self.count = count
        self.sets = sets

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9db\xff\xfa' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.sets,
                lambda value: writer.object(
                    value,
                    group_id=0X16103538
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        sets_ = reader.vector(
            lambda: reader.object(
                group_id=0X16103538
            )
        )

        return cls(
            count=count_,
            sets=sets_
        )

TypeMessagesMyStickers = MyStickers
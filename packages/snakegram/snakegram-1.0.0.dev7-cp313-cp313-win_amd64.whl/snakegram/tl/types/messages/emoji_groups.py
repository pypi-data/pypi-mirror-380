
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..emoji_group import TypeEmojiGroup
    from ....gadgets.byteutils import Reader


class EmojiGroupsNotModified(TLObject, family='TypeMessagesEmojiGroups'):
    """
    The list of [emoji categories](https://core.telegram.org/api/emoji-categories) hasn't changed.
    """

    _id = 0X6FB4AD87
    _group_id = 0XECDF6346


    def to_bytes(self, boxed: bool=True):
        return b'\x87\xad\xb4o' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class EmojiGroups(TLObject, family='TypeMessagesEmojiGroups'):
    """
    Represents a list of [emoji categories](https://core.telegram.org/api/emoji-categories).
    """

    _id = 0X881FB94B
    _group_id = 0XECDF6346

    def __init__(
        self,
        hash: int,
        groups: List['TypeEmojiGroup']
    ):

        """
        Represents a list of [emoji categories](https://core.telegram.org/api/emoji-categories).

        Args:
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            groups (List['TypeEmojiGroup']): A list of [emoji categories](https://core.telegram.org/api/emoji-categories).
        """

        self.hash = hash
        self.groups = groups

    def to_bytes(self, boxed: bool=True):
        with Writer(b'K\xb9\x1f\x88' if boxed else b'') as writer:
            writer.int(self.hash)
            writer.vector(
                self.groups,
                lambda value: writer.object(
                    value,
                    group_id=0X61DE3946
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        hash_ = reader.int()
        groups_ = reader.vector(
            lambda: reader.object(
                group_id=0X61DE3946
            )
        )

        return cls(
            hash=hash_,
            groups=groups_
        )

TypeMessagesEmojiGroups = Union[
    EmojiGroupsNotModified,
    EmojiGroups
]
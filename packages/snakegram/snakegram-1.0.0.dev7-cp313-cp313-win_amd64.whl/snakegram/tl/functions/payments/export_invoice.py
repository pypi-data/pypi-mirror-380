
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.payments.exported_invoice import TypePaymentsExportedInvoice


if TYPE_CHECKING:
    from ...types.input_media import TypeInputMedia


class ExportInvoice(TLRequest[TypePaymentsExportedInvoice]):
    """
    Generate an [invoice deep link](https://core.telegram.org/api/links#invoice-links)

    **Bots can use this method**

    Raises:
        `400`CurrencyTotalAmountInvalidError: The total amount of all prices is invalid.
        `400`InvoicePayloadInvalidError: The specified invoice payload is invalid.
        `400`MediaInvalidError: Media invalid.
        `400`PaymentProviderInvalidError: The specified payment provider is invalid.
        `400`StarsInvoiceInvalidError: The specified Telegram Star invoice is invalid.
        `400`WebdocumentMimeInvalidError: Invalid webdocument mime type provided.
        `400`WebdocumentUrlEmptyError: The passed web document URL is empty.

    """

    _id = 0XF91B065
    _result_id = 0XBECEEE02

    def __init__(
        self,
        invoice_media: 'TypeInputMedia'
    ):

        """
        Generate an [invoice deep link](https://core.telegram.org/api/links#invoice-links)

        **Bots can use this method**

        Args:
            invoice_media ('TypeInputMedia'): Invoice
        """

        self.invoice_media = invoice_media

    def to_bytes(self, boxed: bool=True):
        with Writer(b'e\xb0\x91\x0f' if boxed else b'') as writer:
            writer.object(
                self.invoice_media,
                group_id=0XCEC6DE21
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.photos.photos import TypePhotosPhotos


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser


class GetUserPhotos(TLRequest[TypePhotosPhotos]):
    """
    Returns the list of user photos.

    **Bots can use this method**

    Raises:
        `400`MaxIdInvalidError: The provided max ID is invalid.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`UserIdInvalidError: The provided user ID is invalid.

    """

    _id = 0X91CD32A8
    _result_id = 0X48D204C5

    def __init__(
        self,
        user_id: 'TypeInputUser',
        offset: int,
        max_id: int,
        limit: int
    ):

        """
        Returns the list of user photos.

        **Bots can use this method**

        Args:
            user_id ('TypeInputUser'): User ID
            offset (int): Number of list elements to be skipped
            max_id (int): If a positive value was transferred, the method will return only photos with IDs less than the set one. This parameter is often useful when [refetching file references](https://core.telegram.org/api/file_reference), as in conjuction with limit=1 and offset=-1 the [photo](https://core.telegram.org/constructor/photo) object with the id specified in max_id can be fetched.
            limit (int): Number of list elements to be returned
        """

        self.user_id = user_id
        self.offset = offset
        self.max_id = max_id
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xa82\xcd\x91' if boxed else b'') as writer:
            writer.object(
                self.user_id,
                group_id=0XB628962F
            )
            writer.int(self.offset)
            writer.long(self.max_id)
            writer.int(self.limit)

            return writer.getvalue()
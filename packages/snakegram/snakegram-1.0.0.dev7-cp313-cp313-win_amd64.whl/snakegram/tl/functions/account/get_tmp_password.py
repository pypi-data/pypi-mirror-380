
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.account.tmp_password import TypeAccountTmpPassword


if TYPE_CHECKING:
    from ...types.input_check_password_srp import TypeInputCheckPasswordSRP


class GetTmpPassword(TLRequest[TypeAccountTmpPassword]):
    """
    Get temporary payment password

    Raises:
        `400`PasswordHashInvalidError: The provided password hash is invalid.
        `400`SrpAInvalidError: The specified inputCheckPasswordSRP.A value is invalid.
        `400`TmpPasswordDisabledError: The temporary password is disabled.

    """

    _id = 0X449E0B51
    _result_id = 0XE4512AE1

    def __init__(
        self,
        password: 'TypeInputCheckPasswordSRP',
        period: int
    ):

        """
        Get temporary payment password

        Args:
            password ('TypeInputCheckPasswordSRP'): SRP password parameters
            period (int): Time during which the temporary password will be valid, in seconds; should be between 60 and 86400
        """

        self.password = password
        self.period = period

    def to_bytes(self, boxed: bool=True):
        with Writer(b'Q\x0b\x9eD' if boxed else b'') as writer:
            writer.object(
                self.password,
                group_id=0X9F1A3F43
            )
            writer.int(self.period)

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class SecurePlainPhone(TLObject, family='TypeSecurePlainData'):
    """
    Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first](https://core.telegram.org/passport/encryption#secureplaindata).
    """

    _id = 0X7D6099DD
    _group_id = 0X8F8CADB9

    def __init__(
        self,
        phone: str
    ):

        """
        Phone number to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first](https://core.telegram.org/passport/encryption#secureplaindata).

        Args:
            phone (str): Phone number
        """

        self.phone = phone

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xdd\x99`}' if boxed else b'') as writer:
            writer.string(self.phone)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        phone_ = reader.string()

        return cls(
            phone=phone_
        )

class SecurePlainEmail(TLObject, family='TypeSecurePlainData'):
    """
    Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first](https://core.telegram.org/passport/encryption#secureplaindata).
    """

    _id = 0X21EC5A5F
    _group_id = 0X8F8CADB9

    def __init__(
        self,
        email: str
    ):

        """
        Email address to use in [telegram passport](https://core.telegram.org/passport): [it must be verified, first](https://core.telegram.org/passport/encryption#secureplaindata).

        Args:
            email (str): Email address
        """

        self.email = email

    def to_bytes(self, boxed: bool=True):
        with Writer(b'_Z\xec!' if boxed else b'') as writer:
            writer.string(self.email)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        email_ = reader.string()

        return cls(
            email=email_
        )

TypeSecurePlainData = Union[
    SecurePlainPhone,
    SecurePlainEmail
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .labeled_price import TypeLabeledPrice
    from ...gadgets.byteutils import Reader


class ShippingOption(TLObject, family='TypeShippingOption'):
    """
    Shipping option
    """

    _id = 0XB6213CDF
    _group_id = 0X76120353

    def __init__(
        self,
        id: str,
        title: str,
        prices: List['TypeLabeledPrice']
    ):

        """
        Shipping option

        Args:
            id (str): Option ID
            title (str): Title
            prices (List['TypeLabeledPrice']): List of price portions
        """

        self.id = id
        self.title = title
        self.prices = prices

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xdf<!\xb6' if boxed else b'') as writer:
            writer.string(self.id)
            writer.string(self.title)
            writer.vector(
                self.prices,
                lambda value: writer.object(
                    value,
                    group_id=0X1E1F1A68
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        id_ = reader.string()
        title_ = reader.string()
        prices_ = reader.vector(
            lambda: reader.object(
                group_id=0X1E1F1A68
            )
        )

        return cls(
            id=id_,
            title=title_,
            prices=prices_
        )

TypeShippingOption = ShippingOption
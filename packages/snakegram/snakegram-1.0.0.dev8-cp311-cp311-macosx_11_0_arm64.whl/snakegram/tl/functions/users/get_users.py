
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ...types.user import TypeUser
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser


class GetUsers(TLRequest[List[TypeUser]]):
    """
    Returns basic user info according to their identifiers.

    **Bots can use this method**

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChannelPrivateError: You haven't joined this channel/supergroup.
        `400`FromMessageBotDisabledError: Bots can't use fromMessage min constructors.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`PeerIdInvalidError: The provided peer id is invalid.
        `400`UserBannedInChannelError: You're banned from sending messages in supergroups/channels.

    """

    _id = 0XD91A548

    def __init__(
        self,
        id: List['TypeInputUser']
    ):

        """
        Returns basic user info according to their identifiers.

        **Bots can use this method**

        Args:
            id (List['TypeInputUser']): List of user identifiers
        """

        self.id = id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'H\xa5\x91\r' if boxed else b'') as writer:
            writer.vector(
                self.id,
                lambda value: writer.object(
                    value,
                    group_id=0XB628962F
                )
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Optional
from ...types.stats_graph import TypeStatsGraph
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


class LoadAsyncGraph(TLRequest[TypeStatsGraph]):
    """
    Load [channel statistics graph](https://core.telegram.org/api/stats) asynchronously

    Raises:
        `400`GraphExpiredReloadError: This graph has expired, please obtain a new graph token.
        `400`GraphInvalidReloadError: Invalid graph token provided, please reload the stats and provide the updated token.
        `400`GraphOutdatedReloadError: The graph is outdated, please get a new async token using stats.getBroadcastStats.

    """

    _id = 0X621D5FA0
    _result_id = 0XAFAEA986

    def __init__(
        self,
        token: str,
        x: Optional[int] = None
    ):

        """
        Load [channel statistics graph](https://core.telegram.org/api/stats) asynchronously

        Args:
            token (str): Graph token from [statsGraphAsync](https://core.telegram.org/constructor/statsGraphAsync) constructor
            x (Optional[int], optional): Zoom value, if required
        """

        self.token = token
        self.x = x

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xa0_\x1db' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.string(self.token)

                if flags(self.x, 0):
                    writer.long(self.x)

            return writer.getvalue()
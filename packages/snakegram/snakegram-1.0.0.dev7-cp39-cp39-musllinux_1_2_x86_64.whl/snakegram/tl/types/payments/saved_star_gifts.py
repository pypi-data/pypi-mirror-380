
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..chat import TypeChat
    from ..user import TypeUser
    from ..saved_star_gift import TypeSavedStarGift
    from ....gadgets.byteutils import Reader


class SavedStarGifts(TLObject, family='TypePaymentsSavedStarGifts'):
    _id = 0X95F389B1
    _group_id = 0X3F1FE4F

    def __init__(
        self,
        count: int,
        gifts: List['TypeSavedStarGift'],
        chats: List['TypeChat'],
        users: List['TypeUser'],
        chat_notifications_enabled: bool = False,
        next_offset: Optional[str] = None
    ):

        self.count = count
        self.gifts = gifts
        self.chats = chats
        self.users = users
        self.chat_notifications_enabled = chat_notifications_enabled
        self.next_offset = next_offset

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xb1\x89\xf3\x95' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.int(self.count)

                if flags(self.chat_notifications_enabled, 1):
                    writer.object(
                        self.chat_notifications_enabled,
                        group_id=0X43B904E1
                    )
                writer.vector(
                    self.gifts,
                    lambda value: writer.object(
                        value,
                        group_id=0X7D90D642
                    )
                )

                if flags(self.next_offset, 0):
                    writer.string(self.next_offset)
                writer.vector(
                    self.chats,
                    lambda value: writer.object(
                        value,
                        group_id=0X73A5C0D9
                    )
                )
                writer.vector(
                    self.users,
                    lambda value: writer.object(
                        value,
                        group_id=0X9BABE43A
                    )
                )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        count_ = reader.int()
        chat_notifications_enabled_ = (
            reader.object(
                group_id=0X43B904E1
            )
            if flags(1) else None
        )

        gifts_ = reader.vector(
            lambda: reader.object(
                group_id=0X7D90D642
            )
        )

        next_offset_ = (
            reader.string()
            if flags(0) else None
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            count=count_,
            gifts=gifts_,
            chats=chats_,
            users=users_,
            chat_notifications_enabled=chat_notifications_enabled_,
            next_offset=next_offset_
        )

TypePaymentsSavedStarGifts = SavedStarGifts

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Union, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..user import TypeUser
    from ....gadgets.byteutils import Reader


class Users(TLObject, family='TypeUsersUsers'):
    _id = 0X62D706B8
    _group_id = 0X3C8D2FFD

    def __init__(
        self,
        users: List['TypeUser']
    ):

        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xb8\x06\xd7b' if boxed else b'') as writer:
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            users=users_
        )

class UsersSlice(TLObject, family='TypeUsersUsers'):
    _id = 0X315A4974
    _group_id = 0X3C8D2FFD

    def __init__(
        self,
        count: int,
        users: List['TypeUser']
    ):

        self.count = count
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'tIZ1' if boxed else b'') as writer:
            writer.int(self.count)
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        count_ = reader.int()
        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            count=count_,
            users=users_
        )

TypeUsersUsers = Union[
    Users,
    UsersSlice
]
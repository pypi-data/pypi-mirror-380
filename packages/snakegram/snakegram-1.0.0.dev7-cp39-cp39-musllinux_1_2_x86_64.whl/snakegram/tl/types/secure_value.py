
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional, List
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .secure_data import TypeSecureData
    from .secure_file import TypeSecureFile
    from .secure_value_type import TypeSecureValueType
    from .secure_plain_data import TypeSecurePlainData
    from ...gadgets.byteutils import Reader


class SecureValue(TLObject, family='TypeSecureValue'):
    """
    Secure value
    """

    _id = 0X187FA0CA
    _group_id = 0XF39C206D

    def __init__(
        self,
        type: 'TypeSecureValueType',
        hash: bytes,
        data: Optional['TypeSecureData'] = None,
        front_side: Optional['TypeSecureFile'] = None,
        reverse_side: Optional['TypeSecureFile'] = None,
        selfie: Optional['TypeSecureFile'] = None,
        translation: Optional[List['TypeSecureFile']] = None,
        files: Optional[List['TypeSecureFile']] = None,
        plain_data: Optional['TypeSecurePlainData'] = None
    ):

        """
        Secure value

        Args:
            type ('TypeSecureValueType'): Secure [passport](https://core.telegram.org/passport) value type
            hash (bytes): Data hash
            data (Optional['TypeSecureData'], optional): Encrypted [Telegram Passport](https://core.telegram.org/passport) element data
            front_side (Optional['TypeSecureFile'], optional): Encrypted [passport](https://core.telegram.org/passport) file with the front side of the document
            reverse_side (Optional['TypeSecureFile'], optional): Encrypted [passport](https://core.telegram.org/passport) file with the reverse side of the document
            selfie (Optional['TypeSecureFile'], optional): Encrypted [passport](https://core.telegram.org/passport) file with a selfie of the user holding the document
            translation (Optional[List['TypeSecureFile']], optional): Array of encrypted [passport](https://core.telegram.org/passport) files with translated versions of the provided documents
            files (Optional[List['TypeSecureFile']], optional): Array of encrypted [passport](https://core.telegram.org/passport) files with photos the of the documents
            plain_data (Optional['TypeSecurePlainData'], optional): Plaintext verified [passport](https://core.telegram.org/passport) data
        """

        self.type = type
        self.hash = hash
        self.data = data
        self.front_side = front_side
        self.reverse_side = reverse_side
        self.selfie = selfie
        self.translation = translation
        self.files = files
        self.plain_data = plain_data

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xca\xa0\x7f\x18' if boxed else b'') as writer:
            with writer.flag() as flags:
                writer.object(
                    self.type,
                    group_id=0X24ADF799
                )

                if flags(self.data, 0):
                    writer.object(
                        self.data,
                        group_id=0X48EA8661
                    )

                if flags(self.front_side, 1):
                    writer.object(
                        self.front_side,
                        group_id=0X69864312
                    )

                if flags(self.reverse_side, 2):
                    writer.object(
                        self.reverse_side,
                        group_id=0X69864312
                    )

                if flags(self.selfie, 3):
                    writer.object(
                        self.selfie,
                        group_id=0X69864312
                    )

                if flags(self.translation, 6):
                    writer.vector(
                        self.translation,
                        lambda value: writer.object(
                            value,
                            group_id=0X69864312
                        )
                    )

                if flags(self.files, 4):
                    writer.vector(
                        self.files,
                        lambda value: writer.object(
                            value,
                            group_id=0X69864312
                        )
                    )

                if flags(self.plain_data, 5):
                    writer.object(
                        self.plain_data,
                        group_id=0X8F8CADB9
                    )
                writer.bytes(self.hash)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        type_ = reader.object(
            group_id=0X24ADF799
        )

        data_ = (
            reader.object(
                group_id=0X48EA8661
            )
            if flags(0) else None
        )

        front_side_ = (
            reader.object(
                group_id=0X69864312
            )
            if flags(1) else None
        )

        reverse_side_ = (
            reader.object(
                group_id=0X69864312
            )
            if flags(2) else None
        )

        selfie_ = (
            reader.object(
                group_id=0X69864312
            )
            if flags(3) else None
        )

        translation_ = (
            reader.vector(
                lambda: reader.object(
                    group_id=0X69864312
                )
            )
            if flags(6) else None
        )

        files_ = (
            reader.vector(
                lambda: reader.object(
                    group_id=0X69864312
                )
            )
            if flags(4) else None
        )

        plain_data_ = (
            reader.object(
                group_id=0X8F8CADB9
            )
            if flags(5) else None
        )

        hash_ = reader.bytes()

        return cls(
            type=type_,
            hash=hash_,
            data=data_,
            front_side=front_side_,
            reverse_side=reverse_side_,
            selfie=selfie_,
            translation=translation_,
            files=files_,
            plain_data=plain_data_
        )

TypeSecureValue = SecureValue
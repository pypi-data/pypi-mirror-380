
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_channel import TypeInputChannel


class ToggleUsername(TLRequest[bool]):
    """
    Activate or deactivate a purchased [fragment.com](https://fragment.com) username associated to a [supergroup or channel](https://core.telegram.org/api/channel) we own.

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChannelPrivateError: You haven't joined this channel/supergroup.
        `400`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `400`ChatNotModifiedError: No changes were made to chat information because the new information you passed is identical to the current information.
        `400`UsernamesActiveTooMuchError: The maximum number of active usernames was reached.
        `400`UsernameInvalidError: The provided username is not valid.
        `400`UsernameNotModifiedError: The username was not modified.

    """

    _id = 0X50F24105
    _result_id = 0X43B904E1

    def __init__(
        self,
        channel: 'TypeInputChannel',
        username: str,
        active: bool
    ):

        """
        Activate or deactivate a purchased [fragment.com](https://fragment.com) username associated to a [supergroup or channel](https://core.telegram.org/api/channel) we own.

        Args:
            channel ('TypeInputChannel'): [Supergroup or channel](https://core.telegram.org/api/channel)
            username (str): Username
            active (bool): Whether to activate or deactivate the username
        """

        self.channel = channel
        self.username = username
        self.active = active

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x05A\xf2P' if boxed else b'') as writer:
            writer.object(
                self.channel,
                group_id=0X42691CEF
            )
            writer.string(self.username)
            writer.object(
                self.active,
                group_id=0X43B904E1
            )

            return writer.getvalue()
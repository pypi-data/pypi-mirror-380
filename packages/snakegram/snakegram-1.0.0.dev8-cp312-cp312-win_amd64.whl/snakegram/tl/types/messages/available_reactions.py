
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..available_reaction import TypeAvailableReaction
    from ....gadgets.byteutils import Reader


class AvailableReactionsNotModified(TLObject, family='TypeMessagesAvailableReactions'):
    """
    No new reactions are available
    """

    _id = 0X9F071957
    _group_id = 0X90CC7E3A


    def to_bytes(self, boxed: bool=True):
        return b'W\x19\x07\x9f' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class AvailableReactions(TLObject, family='TypeMessagesAvailableReactions'):
    """
    Animations and metadata associated with [message reactions](https://core.telegram.org/api/reactions)
    """

    _id = 0X768E3AAD
    _group_id = 0X90CC7E3A

    def __init__(
        self,
        hash: int,
        reactions: List['TypeAvailableReaction']
    ):

        """
        Animations and metadata associated with [message reactions](https://core.telegram.org/api/reactions)

        Args:
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            reactions (List['TypeAvailableReaction']): Animations and metadata associated with [message reactions](https://core.telegram.org/api/reactions)
        """

        self.hash = hash
        self.reactions = reactions

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xad:\x8ev' if boxed else b'') as writer:
            writer.int(self.hash)
            writer.vector(
                self.reactions,
                lambda value: writer.object(
                    value,
                    group_id=0XE58A4CAE
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        hash_ = reader.int()
        reactions_ = reader.vector(
            lambda: reader.object(
                group_id=0XE58A4CAE
            )
        )

        return cls(
            hash=hash_,
            reactions=reactions_
        )

TypeMessagesAvailableReactions = Union[
    AvailableReactionsNotModified,
    AvailableReactions
]
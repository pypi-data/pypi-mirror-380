
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class InputPrivacyKeyStatusTimestamp(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people will be able to see our exact last online timestamp.
    """

    _id = 0X4F96CB18
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\x18\xcb\x96O' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyChatInvite(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people will be able to invite you to chats
    """

    _id = 0XBDFB0426
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'&\x04\xfb\xbd' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyPhoneCall(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether you will accept phone calls
    """

    _id = 0XFABADC5F
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'_\xdc\xba\xfa' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyPhoneP2P(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether to allow P2P communication during VoIP calls
    """

    _id = 0XDB9E70D2
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xd2p\x9e\xdb' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyForwards(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether messages forwarded from you will be [anonymous](https://telegram.org/blog/unsend-privacy-emoji#anonymous-forwarding)
    """

    _id = 0XA4DD4C08
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\x08L\xdd\xa4' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyProfilePhoto(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people will be able to see your profile picture
    """

    _id = 0X5719BACC
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xcc\xba\x19W' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyPhoneNumber(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people will be able to see your phone number
    """

    _id = 0X352DAFA
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xfa\xdaR\x03' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyAddedByPhone(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people can add you to their contact list by your phone number
    """

    _id = 0XD1219BDD
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xdd\x9b!\xd1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyVoiceMessages(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people can send you voice messages or round videos ( [Premium](https://core.telegram.org/api/premium) users only).
    """

    _id = 0XAEE69D68
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'h\x9d\xe6\xae' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyAbout(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether people can see your bio
    """

    _id = 0X3823CC40
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'@\xcc#8' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyBirthday(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether the user can see our birthday.
    """

    _id = 0XD65A11CC
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xcc\x11Z\xd6' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyStarGiftsAutoSave(TLObject, family='TypeInputPrivacyKey'):
    """
    Whether received [gifts](https://core.telegram.org/api/gifts) will be automatically displayed on our profile
    """

    _id = 0XE1732341
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'A#s\xe1' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class InputPrivacyKeyNoPaidMessages(TLObject, family='TypeInputPrivacyKey'):
    _id = 0XBDC597B4
    _group_id = 0XA90825F7


    def to_bytes(self, boxed: bool=True):
        return b'\xb4\x97\xc5\xbd' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeInputPrivacyKey = Union[
    InputPrivacyKeyStatusTimestamp,
    InputPrivacyKeyChatInvite,
    InputPrivacyKeyPhoneCall,
    InputPrivacyKeyPhoneP2P,
    InputPrivacyKeyForwards,
    InputPrivacyKeyProfilePhoto,
    InputPrivacyKeyPhoneNumber,
    InputPrivacyKeyAddedByPhone,
    InputPrivacyKeyVoiceMessages,
    InputPrivacyKeyAbout,
    InputPrivacyKeyBirthday,
    InputPrivacyKeyStarGiftsAutoSave,
    InputPrivacyKeyNoPaidMessages
]
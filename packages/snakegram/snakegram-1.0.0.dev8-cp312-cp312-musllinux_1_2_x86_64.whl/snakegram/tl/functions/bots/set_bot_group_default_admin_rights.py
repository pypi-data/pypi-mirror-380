
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.chat_admin_rights import TypeChatAdminRights


class SetBotGroupDefaultAdminRights(TLRequest[bool]):
    """
    Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to groups, see [here for more info on how to handle them](https://core.telegram.org/api/rights#suggested-bot-rights).

    **Bots can use this method**

    Raises:
        `400`RightsNotModifiedError: The new admin rights are equal to the old rights, no change was made.
        `400`UserBotRequiredError: This method can only be called by a bot.

    """

    _id = 0X925EC9EA
    _result_id = 0X43B904E1

    def __init__(
        self,
        admin_rights: 'TypeChatAdminRights'
    ):

        """
        Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to groups, see [here for more info on how to handle them](https://core.telegram.org/api/rights#suggested-bot-rights).

        **Bots can use this method**

        Args:
            admin_rights ('TypeChatAdminRights'): Admin rights
        """

        self.admin_rights = admin_rights

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xea\xc9^\x92' if boxed else b'') as writer:
            writer.object(
                self.admin_rights,
                group_id=0X2A03C5CB
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class ReadDiscussion(TLRequest[bool]):
    """
    Mark a [thread](https://core.telegram.org/api/threads) as read

    Raises:
        `400`ChatIdInvalidError: The provided chat id is invalid.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0XF731A9F4
    _result_id = 0X43B904E1

    def __init__(
        self,
        peer: 'TypeInputPeer',
        msg_id: int,
        read_max_id: int
    ):

        """
        Mark a [thread](https://core.telegram.org/api/threads) as read

        Args:
            peer ('TypeInputPeer'): Group ID
            msg_id (int): ID of message that started the thread
            read_max_id (int): ID up to which thread messages were read
        """

        self.peer = peer
        self.msg_id = msg_id
        self.read_max_id = read_max_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf4\xa91\xf7' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.msg_id)
            writer.int(self.read_max_id)

            return writer.getvalue()
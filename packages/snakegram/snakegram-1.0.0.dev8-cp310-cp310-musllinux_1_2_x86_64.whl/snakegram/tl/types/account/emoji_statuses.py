
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..emoji_status import TypeEmojiStatus
    from ....gadgets.byteutils import Reader


class EmojiStatusesNotModified(TLObject, family='TypeAccountEmojiStatuses'):
    """
    The server-side list of [emoji statuses](https://core.telegram.org/api/emoji-status) hasn't changed
    """

    _id = 0XD08CE645
    _group_id = 0XE6C72B8B


    def to_bytes(self, boxed: bool=True):
        return b'E\xe6\x8c\xd0' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class EmojiStatuses(TLObject, family='TypeAccountEmojiStatuses'):
    """
    A list of [emoji statuses](https://core.telegram.org/api/emoji-status)
    """

    _id = 0X90C467D1
    _group_id = 0XE6C72B8B

    def __init__(
        self,
        hash: int,
        statuses: List['TypeEmojiStatus']
    ):

        """
        A list of [emoji statuses](https://core.telegram.org/api/emoji-status)

        Args:
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            statuses (List['TypeEmojiStatus']): [Emoji statuses](https://core.telegram.org/api/emoji-status)
        """

        self.hash = hash
        self.statuses = statuses

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd1g\xc4\x90' if boxed else b'') as writer:
            writer.long(self.hash)
            writer.vector(
                self.statuses,
                lambda value: writer.object(
                    value,
                    group_id=0XFBDA9FB
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        hash_ = reader.long()
        statuses_ = reader.vector(
            lambda: reader.object(
                group_id=0XFBDA9FB
            )
        )

        return cls(
            hash=hash_,
            statuses=statuses_
        )

TypeAccountEmojiStatuses = Union[
    EmojiStatusesNotModified,
    EmojiStatuses
]
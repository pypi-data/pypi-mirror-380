
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..user import TypeUser
    from ..stats_graph import TypeStatsGraph
    from ....gadgets.byteutils import Reader
    from ..stats_date_range_days import TypeStatsDateRangeDays
    from ..stats_group_top_admin import TypeStatsGroupTopAdmin
    from ..stats_group_top_poster import TypeStatsGroupTopPoster
    from ..stats_group_top_inviter import TypeStatsGroupTopInviter
    from ..stats_abs_value_and_prev import TypeStatsAbsValueAndPrev


class MegagroupStats(TLObject, family='TypeStatsMegagroupStats'):
    """
    Supergroup [statistics](https://core.telegram.org/api/stats)
    """

    _id = 0XEF7FF916
    _group_id = 0XE1DF1101

    def __init__(
        self,
        period: 'TypeStatsDateRangeDays',
        members: 'TypeStatsAbsValueAndPrev',
        messages: 'TypeStatsAbsValueAndPrev',
        viewers: 'TypeStatsAbsValueAndPrev',
        posters: 'TypeStatsAbsValueAndPrev',
        growth_graph: 'TypeStatsGraph',
        members_graph: 'TypeStatsGraph',
        new_members_by_source_graph: 'TypeStatsGraph',
        languages_graph: 'TypeStatsGraph',
        messages_graph: 'TypeStatsGraph',
        actions_graph: 'TypeStatsGraph',
        top_hours_graph: 'TypeStatsGraph',
        weekdays_graph: 'TypeStatsGraph',
        top_posters: List['TypeStatsGroupTopPoster'],
        top_admins: List['TypeStatsGroupTopAdmin'],
        top_inviters: List['TypeStatsGroupTopInviter'],
        users: List['TypeUser']
    ):

        """
        Supergroup [statistics](https://core.telegram.org/api/stats)

        Args:
            period ('TypeStatsDateRangeDays'): Period in consideration
            members ('TypeStatsAbsValueAndPrev'): Member count change for period in consideration
            messages ('TypeStatsAbsValueAndPrev'): Message number change for period in consideration
            viewers ('TypeStatsAbsValueAndPrev'): Number of users that viewed messages, for range in consideration
            posters ('TypeStatsAbsValueAndPrev'): Number of users that posted messages, for range in consideration
            growth_graph ('TypeStatsGraph'): Supergroup growth graph (absolute subscriber count)
            members_graph ('TypeStatsGraph'): Members growth (relative subscriber count)
            new_members_by_source_graph ('TypeStatsGraph'): New members by source graph
            languages_graph ('TypeStatsGraph'): Subscriber language graph (pie chart)
            messages_graph ('TypeStatsGraph'): Message activity graph (stacked bar graph, message type)
            actions_graph ('TypeStatsGraph'): Group activity graph (deleted, modified messages, blocked users)
            top_hours_graph ('TypeStatsGraph'): Activity per hour graph (absolute)
            weekdays_graph ('TypeStatsGraph'): Activity per day of week graph (absolute)
            top_posters (List['TypeStatsGroupTopPoster']): Info about most active group members
            top_admins (List['TypeStatsGroupTopAdmin']): Info about most active group admins
            top_inviters (List['TypeStatsGroupTopInviter']): Info about most active group inviters
            users (List['TypeUser']): Info about users mentioned in statistics
        """

        self.period = period
        self.members = members
        self.messages = messages
        self.viewers = viewers
        self.posters = posters
        self.growth_graph = growth_graph
        self.members_graph = members_graph
        self.new_members_by_source_graph = new_members_by_source_graph
        self.languages_graph = languages_graph
        self.messages_graph = messages_graph
        self.actions_graph = actions_graph
        self.top_hours_graph = top_hours_graph
        self.weekdays_graph = weekdays_graph
        self.top_posters = top_posters
        self.top_admins = top_admins
        self.top_inviters = top_inviters
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x16\xf9\x7f\xef' if boxed else b'') as writer:
            writer.object(
                self.period,
                group_id=0X79285AFD
            )
            writer.object(
                self.members,
                group_id=0X3AA03D8A
            )
            writer.object(
                self.messages,
                group_id=0X3AA03D8A
            )
            writer.object(
                self.viewers,
                group_id=0X3AA03D8A
            )
            writer.object(
                self.posters,
                group_id=0X3AA03D8A
            )
            writer.object(
                self.growth_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.members_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.new_members_by_source_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.languages_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.messages_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.actions_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.top_hours_graph,
                group_id=0XAFAEA986
            )
            writer.object(
                self.weekdays_graph,
                group_id=0XAFAEA986
            )
            writer.vector(
                self.top_posters,
                lambda value: writer.object(
                    value,
                    group_id=0X4487FEA5
                )
            )
            writer.vector(
                self.top_admins,
                lambda value: writer.object(
                    value,
                    group_id=0X783EA4E5
                )
            )
            writer.vector(
                self.top_inviters,
                lambda value: writer.object(
                    value,
                    group_id=0X811F685F
                )
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        period_ = reader.object(
            group_id=0X79285AFD
        )

        members_ = reader.object(
            group_id=0X3AA03D8A
        )

        messages_ = reader.object(
            group_id=0X3AA03D8A
        )

        viewers_ = reader.object(
            group_id=0X3AA03D8A
        )

        posters_ = reader.object(
            group_id=0X3AA03D8A
        )

        growth_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        members_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        new_members_by_source_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        languages_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        messages_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        actions_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        top_hours_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        weekdays_graph_ = reader.object(
            group_id=0XAFAEA986
        )

        top_posters_ = reader.vector(
            lambda: reader.object(
                group_id=0X4487FEA5
            )
        )

        top_admins_ = reader.vector(
            lambda: reader.object(
                group_id=0X783EA4E5
            )
        )

        top_inviters_ = reader.vector(
            lambda: reader.object(
                group_id=0X811F685F
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            period=period_,
            members=members_,
            messages=messages_,
            viewers=viewers_,
            posters=posters_,
            growth_graph=growth_graph_,
            members_graph=members_graph_,
            new_members_by_source_graph=new_members_by_source_graph_,
            languages_graph=languages_graph_,
            messages_graph=messages_graph_,
            actions_graph=actions_graph_,
            top_hours_graph=top_hours_graph_,
            weekdays_graph=weekdays_graph_,
            top_posters=top_posters_,
            top_admins=top_admins_,
            top_inviters=top_inviters_,
            users=users_
        )

TypeStatsMegagroupStats = MegagroupStats
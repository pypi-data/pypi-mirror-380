
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class BusinessAwayMessageScheduleAlways(TLObject, family='TypeBusinessAwayMessageSchedule'):
    """
    Always send [Telegram Business away messages](https://core.telegram.org/api/business#away-messages) to users writing to us in private.
    """

    _id = 0XC9B9E2B9
    _group_id = 0X764A459D


    def to_bytes(self, boxed: bool=True):
        return b'\xb9\xe2\xb9\xc9' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BusinessAwayMessageScheduleOutsideWorkHours(TLObject, family='TypeBusinessAwayMessageSchedule'):
    """
    Send [Telegram Business away messages](https://core.telegram.org/api/business#away-messages) to users writing to us in private outside of the configured [Telegram Business working hours](https://core.telegram.org/api/business#opening-hours).
    """

    _id = 0XC3F2F501
    _group_id = 0X764A459D


    def to_bytes(self, boxed: bool=True):
        return b'\x01\xf5\xf2\xc3' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class BusinessAwayMessageScheduleCustom(TLObject, family='TypeBusinessAwayMessageSchedule'):
    """
    Send [Telegram Business away messages](https://core.telegram.org/api/business#away-messages) to users writing to us in private in the specified time span.
    """

    _id = 0XCC4D9ECC
    _group_id = 0X764A459D

    def __init__(
        self,
        start_date: int,
        end_date: int
    ):

        """
        Send [Telegram Business away messages](https://core.telegram.org/api/business#away-messages) to users writing to us in private in the specified time span.

        Args:
            start_date (int): Start date (UNIX timestamp).
            end_date (int): End date (UNIX timestamp).
        """

        self.start_date = start_date
        self.end_date = end_date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xcc\x9eM\xcc' if boxed else b'') as writer:
            writer.int(self.start_date)
            writer.int(self.end_date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        start_date_ = reader.int()
        end_date_ = reader.int()

        return cls(
            start_date=start_date_,
            end_date=end_date_
        )

TypeBusinessAwayMessageSchedule = Union[
    BusinessAwayMessageScheduleAlways,
    BusinessAwayMessageScheduleOutsideWorkHours,
    BusinessAwayMessageScheduleCustom
]
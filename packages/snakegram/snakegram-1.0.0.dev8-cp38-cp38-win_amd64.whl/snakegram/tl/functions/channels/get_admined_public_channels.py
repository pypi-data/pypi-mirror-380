
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.messages.chats import TypeMessagesChats


class GetAdminedPublicChannels(TLRequest[TypeMessagesChats]):
    """
    Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we're admin in. Usually called when the user exceeds the [limit](https://core.telegram.org/constructor/config) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.

    Raises:
        `400`ChannelsAdminLocatedTooMuchError: The user has reached the limit of public geogroups.
        `400`ChannelsAdminPublicTooMuchError: You're admin of too many public channels, make some channels private to change the username of this channel.

    """

    _id = 0XF8B036AF
    _result_id = 0X23A4AC0E

    def __init__(
        self,
        by_location: bool = False,
        check_limit: bool = False,
        for_personal: bool = False
    ):

        """
        Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we're admin in. Usually called when the user exceeds the [limit](https://core.telegram.org/constructor/config) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.

        Args:
            by_location (bool, optional): Get geogroups
            check_limit (bool, optional): If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](https://core.telegram.org#possible-errors) will be returned. Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](https://core.telegram.org/method/channels.checkUsername)/ [channels.updateUsername](https://core.telegram.org/method/channels.updateUsername).
            for_personal (bool, optional): Set this flag to only fetch the full list of channels that may be passed to [account.updatePersonalChannel](https://core.telegram.org/method/account.updatePersonalChannel) to [display them on our profile page](https://core.telegram.org/api/profile#personal-channel).
        """

        self.by_location = by_location
        self.check_limit = check_limit
        self.for_personal = for_personal

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xaf6\xb0\xf8' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.by_location, 0)
                flags(self.check_limit, 1)
                flags(self.for_personal, 2)

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class MessageEntityUnknown(TLObject, family='TypeMessageEntity'):
    _id = 0XBB92BA95
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x95\xba\x92\xbb' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityMention(TLObject, family='TypeMessageEntity'):
    _id = 0XFA04579D
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9dW\x04\xfa' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityHashtag(TLObject, family='TypeMessageEntity'):
    _id = 0X6F635B0D
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\r[co' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityBotCommand(TLObject, family='TypeMessageEntity'):
    _id = 0X6CEF8AC7
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc7\x8a\xefl' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityUrl(TLObject, family='TypeMessageEntity'):
    _id = 0X6ED02538
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'8%\xd0n' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityEmail(TLObject, family='TypeMessageEntity'):
    _id = 0X64E475C2
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc2u\xe4d' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityBold(TLObject, family='TypeMessageEntity'):
    _id = 0XBD610BC9
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc9\x0ba\xbd' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityItalic(TLObject, family='TypeMessageEntity'):
    _id = 0X826F8B60
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'`\x8bo\x82' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityCode(TLObject, family='TypeMessageEntity'):
    _id = 0X28A20571
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'q\x05\xa2(' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityPre(TLObject, family='TypeMessageEntity'):
    _id = 0X73924BE0
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int,
        language: str
    ):

        self.offset = offset
        self.length = length
        self.language = language

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xe0K\x92s' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)
            writer.string(self.language)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()
        language_ = reader.string()

        return cls(
            offset=offset_,
            length=length_,
            language=language_
        )

class MessageEntityTextUrl(TLObject, family='TypeMessageEntity'):
    _id = 0X76A6D327
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int,
        url: str
    ):

        self.offset = offset
        self.length = length
        self.url = url

    def to_bytes(self, boxed: bool=True):
        with Writer(b"'\xd3\xa6v" if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)
            writer.string(self.url)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()
        url_ = reader.string()

        return cls(
            offset=offset_,
            length=length_,
            url=url_
        )

class MessageEntityMentionName(TLObject, family='TypeMessageEntity'):
    _id = 0X352DCA58
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int,
        user_id: int
    ):

        self.offset = offset
        self.length = length
        self.user_id = user_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'X\xca-5' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)
            writer.int(self.user_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()
        user_id_ = reader.int()

        return cls(
            offset=offset_,
            length=length_,
            user_id=user_id_
        )

class MessageEntityPhone(TLObject, family='TypeMessageEntity'):
    _id = 0X9B69E34B
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'K\xe3i\x9b' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityCashtag(TLObject, family='TypeMessageEntity'):
    _id = 0X4C4E743F
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'?tNL' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityBankCard(TLObject, family='TypeMessageEntity'):
    _id = 0X761E6AF4
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf4j\x1ev' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityUnderline(TLObject, family='TypeMessageEntity'):
    _id = 0X9C4E7E8B
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x8b~N\x9c' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityStrike(TLObject, family='TypeMessageEntity'):
    _id = 0XBF0693D4
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd4\x93\x06\xbf' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityBlockquote(TLObject, family='TypeMessageEntity'):
    _id = 0X20DF5D0
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd0\xf5\r\x02' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntitySpoiler(TLObject, family='TypeMessageEntity'):
    _id = 0X32CA960F
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int
    ):

        self.offset = offset
        self.length = length

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x0f\x96\xca2' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()

        return cls(
            offset=offset_,
            length=length_
        )

class MessageEntityCustomEmoji(TLObject, family='TypeMessageEntity'):
    _id = 0XC8CF05F8
    _group_id = 0X3CDFF38A

    def __init__(
        self,
        offset: int,
        length: int,
        document_id: int
    ):

        self.offset = offset
        self.length = length
        self.document_id = document_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf8\x05\xcf\xc8' if boxed else b'') as writer:
            writer.int(self.offset)
            writer.int(self.length)
            writer.long(self.document_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        offset_ = reader.int()
        length_ = reader.int()
        document_id_ = reader.long()

        return cls(
            offset=offset_,
            length=length_,
            document_id=document_id_
        )

TypeMessageEntity = Union[
    MessageEntityUnknown,
    MessageEntityMention,
    MessageEntityHashtag,
    MessageEntityBotCommand,
    MessageEntityUrl,
    MessageEntityEmail,
    MessageEntityBold,
    MessageEntityItalic,
    MessageEntityCode,
    MessageEntityPre,
    MessageEntityTextUrl,
    MessageEntityMentionName,
    MessageEntityPhone,
    MessageEntityCashtag,
    MessageEntityBankCard,
    MessageEntityUnderline,
    MessageEntityStrike,
    MessageEntityBlockquote,
    MessageEntitySpoiler,
    MessageEntityCustomEmoji
]
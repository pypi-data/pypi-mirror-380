
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

import re
from ..base_rpc_errors import BadRequestError


class AboutTooLongError(
    BadRequestError,
    pattern='ABOUT_TOO_LONG'
):
    """
    BadRequestError (400): `ABOUT_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'About string too long.'
        )

class AccessTokenExpiredError(
    BadRequestError,
    pattern='ACCESS_TOKEN_EXPIRED'
):
    """
    BadRequestError (400): `ACCESS_TOKEN_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Access token expired.'
        )

class AccessTokenInvalidError(
    BadRequestError,
    pattern='ACCESS_TOKEN_INVALID'
):
    """
    BadRequestError (400): `ACCESS_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Access token invalid.'
        )

class AdExpiredError(
    BadRequestError,
    pattern='AD_EXPIRED'
):
    """
    BadRequestError (400): `AD_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The ad has expired (too old or not found).'
        )

class AddressInvalidError(
    BadRequestError,
    pattern='ADDRESS_INVALID'
):
    """
    BadRequestError (400): `ADDRESS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified geopoint address is invalid.'
        )

class AdminIdInvalidError(
    BadRequestError,
    pattern='ADMIN_ID_INVALID'
):
    """
    BadRequestError (400): `ADMIN_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified admin ID is invalid.'
        )

class AdminRankEmojiNotAllowedError(
    BadRequestError,
    pattern='ADMIN_RANK_EMOJI_NOT_ALLOWED'
):
    """
    BadRequestError (400): `ADMIN_RANK_EMOJI_NOT_ALLOWED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An admin rank cannot contain emojis.'
        )

class AdminRankInvalidError(
    BadRequestError,
    pattern='ADMIN_RANK_INVALID'
):
    """
    BadRequestError (400): `ADMIN_RANK_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified admin rank is invalid.'
        )

class AdminRightsEmptyError(
    BadRequestError,
    pattern='ADMIN_RIGHTS_EMPTY'
):
    """
    BadRequestError (400): `ADMIN_RIGHTS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The chatAdminRights constructor passed in keyboardButtonRequestPeer.peer_type.user_admin_rights has no rights set (i.e. flags is 0).'
        )

class AdminsTooMuchError(
    BadRequestError,
    pattern='ADMINS_TOO_MUCH'
):
    """
    BadRequestError (400): `ADMINS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'There are too many admins.'
        )

class AlbumPhotosTooManyError(
    BadRequestError,
    pattern='ALBUM_PHOTOS_TOO_MANY'
):
    """
    BadRequestError (400): `ALBUM_PHOTOS_TOO_MANY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have uploaded too many profile photos, delete some before retrying.'
        )

class ApiIdInvalidError(
    BadRequestError,
    pattern='API_ID_INVALID'
):
    """
    BadRequestError (400): `API_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'API ID invalid.'
        )

class ApiIdPublishedFloodError(
    BadRequestError,
    pattern='API_ID_PUBLISHED_FLOOD'
):
    """
    BadRequestError (400): `API_ID_PUBLISHED_FLOOD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This API id was published somewhere, you can't use it now."
        )

class ArticleTitleEmptyError(
    BadRequestError,
    pattern='ARTICLE_TITLE_EMPTY'
):
    """
    BadRequestError (400): `ARTICLE_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The title of the article is empty.'
        )

class AudioContentUrlEmptyError(
    BadRequestError,
    pattern='AUDIO_CONTENT_URL_EMPTY'
):
    """
    BadRequestError (400): `AUDIO_CONTENT_URL_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The remote URL specified in the content field is empty.'
        )

class AudioTitleEmptyError(
    BadRequestError,
    pattern='AUDIO_TITLE_EMPTY'
):
    """
    BadRequestError (400): `AUDIO_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An empty audio title was provided.'
        )

class AuthBytesInvalidError(
    BadRequestError,
    pattern='AUTH_BYTES_INVALID'
):
    """
    BadRequestError (400): `AUTH_BYTES_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided authorization is invalid.'
        )

class AuthTokenAlreadyAcceptedError(
    BadRequestError,
    pattern='AUTH_TOKEN_ALREADY_ACCEPTED'
):
    """
    BadRequestError (400): `AUTH_TOKEN_ALREADY_ACCEPTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified auth token was already accepted.'
        )

class AuthTokenExceptionError(
    BadRequestError,
    pattern='AUTH_TOKEN_EXCEPTION'
):
    """
    BadRequestError (400): `AUTH_TOKEN_EXCEPTION`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An error occurred while importing the auth token.'
        )

class AuthTokenExpiredError(
    BadRequestError,
    pattern='AUTH_TOKEN_EXPIRED'
):
    """
    BadRequestError (400): `AUTH_TOKEN_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The authorization token has expired.'
        )

class AuthTokenInvalidError(
    BadRequestError,
    pattern='AUTH_TOKEN_INVALID'
):
    """
    BadRequestError (400): `AUTH_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified auth token is invalid.'
        )

class AuthTokenInvalidxError(
    BadRequestError,
    pattern='AUTH_TOKEN_INVALIDX'
):
    """
    BadRequestError (400): `AUTH_TOKEN_INVALIDX`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified auth token is invalid.'
        )

class AutoarchiveNotAvailableError(
    BadRequestError,
    pattern='AUTOARCHIVE_NOT_AVAILABLE'
):
    """
    BadRequestError (400): `AUTOARCHIVE_NOT_AVAILABLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The autoarchive setting is not available at this time: please check the value of the [autoarchive_setting_available field in client config &raquo;](https://core.telegram.org/api/config#client-configuration) before calling this method.'
        )

class BalanceTooLowError(
    BadRequestError,
    pattern='BALANCE_TOO_LOW'
):
    """
    BadRequestError (400): `BALANCE_TOO_LOW`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The transaction cannot be completed because the current [Telegram Stars balance](https://core.telegram.org/api/stars) is too low.'
        )

class BankCardNumberInvalidError(
    BadRequestError,
    pattern='BANK_CARD_NUMBER_INVALID'
):
    """
    BadRequestError (400): `BANK_CARD_NUMBER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified card number is invalid.'
        )

class BannedRightsInvalidError(
    BadRequestError,
    pattern='BANNED_RIGHTS_INVALID'
):
    """
    BadRequestError (400): `BANNED_RIGHTS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You provided some invalid flags in the banned rights.'
        )

class BirthdayInvalidError(
    BadRequestError,
    pattern='BIRTHDAY_INVALID'
):
    """
    BadRequestError (400): `BIRTHDAY_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An invalid age was specified, must be between 0 and 150 years.'
        )

class BoostNotModifiedError(
    BadRequestError,
    pattern='BOOST_NOT_MODIFIED'
):
    """
    BadRequestError (400): `BOOST_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're already [boosting](https://core.telegram.org/api/boost) the specified channel."
        )

class BoostPeerInvalidError(
    BadRequestError,
    pattern='BOOST_PEER_INVALID'
):
    """
    BadRequestError (400): `BOOST_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `boost_peer` is invalid.'
        )

class BoostsEmptyError(
    BadRequestError,
    pattern='BOOSTS_EMPTY'
):
    """
    BadRequestError (400): `BOOSTS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No boost slots were specified.'
        )

class BoostsRequiredError(
    BadRequestError,
    pattern='BOOSTS_REQUIRED'
):
    """
    BadRequestError (400): `BOOSTS_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified channel must first be [boosted by its users](https://core.telegram.org/api/boost) in order to perform this action.'
        )

class BotAlreadyDisabledError(
    BadRequestError,
    pattern='BOT_ALREADY_DISABLED'
):
    """
    BadRequestError (400): `BOT_ALREADY_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The connected business bot was already disabled for the specified peer.'
        )

class BotAppBotInvalidError(
    BadRequestError,
    pattern='BOT_APP_BOT_INVALID'
):
    """
    BadRequestError (400): `BOT_APP_BOT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The bot_id passed in the inputBotAppShortName constructor is invalid.'
        )

class BotAppInvalidError(
    BadRequestError,
    pattern='BOT_APP_INVALID'
):
    """
    BadRequestError (400): `BOT_APP_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified bot app is invalid.'
        )

class BotAppShortnameInvalidError(
    BadRequestError,
    pattern='BOT_APP_SHORTNAME_INVALID'
):
    """
    BadRequestError (400): `BOT_APP_SHORTNAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified bot app short name is invalid.'
        )

class BotBusinessMissingError(
    BadRequestError,
    pattern='BOT_BUSINESS_MISSING'
):
    """
    BadRequestError (400): `BOT_BUSINESS_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified bot is not a business bot (the [user](https://core.telegram.org/constructor/user).`bot_business` flag is not set).'
        )

class BotChannelsNaError(
    BadRequestError,
    pattern='BOT_CHANNELS_NA'
):
    """
    BadRequestError (400): `BOT_CHANNELS_NA`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Bots can't edit admin privileges."
        )

class BotCommandDescriptionInvalidError(
    BadRequestError,
    pattern='BOT_COMMAND_DESCRIPTION_INVALID'
):
    """
    BadRequestError (400): `BOT_COMMAND_DESCRIPTION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified command description is invalid.'
        )

class BotCommandInvalidError(
    BadRequestError,
    pattern='BOT_COMMAND_INVALID'
):
    """
    BadRequestError (400): `BOT_COMMAND_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified command is invalid.'
        )

class BotDomainInvalidError(
    BadRequestError,
    pattern='BOT_DOMAIN_INVALID'
):
    """
    BadRequestError (400): `BOT_DOMAIN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Bot domain invalid.'
        )

class BotGamesDisabledError(
    BadRequestError,
    pattern='BOT_GAMES_DISABLED'
):
    """
    BadRequestError (400): `BOT_GAMES_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Games can't be sent to channels."
        )

class BotGroupsBlockedError(
    BadRequestError,
    pattern='BOT_GROUPS_BLOCKED'
):
    """
    BadRequestError (400): `BOT_GROUPS_BLOCKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This bot can't be added to groups."
        )

class BotInlineDisabledError(
    BadRequestError,
    pattern='BOT_INLINE_DISABLED'
):
    """
    BadRequestError (400): `BOT_INLINE_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This bot can't be used in inline mode."
        )

class BotInvalidError(
    BadRequestError,
    pattern='BOT_INVALID'
):
    """
    BadRequestError (400): `BOT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This is not a valid bot.'
        )

class BotInvoiceInvalidError(
    BadRequestError,
    pattern='BOT_INVOICE_INVALID'
):
    """
    BadRequestError (400): `BOT_INVOICE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invoice is invalid.'
        )

class BotNotConnectedYetError(
    BadRequestError,
    pattern='BOT_NOT_CONNECTED_YET'
):
    """
    BadRequestError (400): `BOT_NOT_CONNECTED_YET`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No [business bot](https://core.telegram.org/api/business#connected-bots) is connected to the currently logged in user.'
        )

class BotOnesideNotAvailError(
    BadRequestError,
    pattern='BOT_ONESIDE_NOT_AVAIL'
):
    """
    BadRequestError (400): `BOT_ONESIDE_NOT_AVAIL`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Bots can't pin messages in PM just for themselves."
        )

class BotPaymentsDisabledError(
    BadRequestError,
    pattern='BOT_PAYMENTS_DISABLED'
):
    """
    BadRequestError (400): `BOT_PAYMENTS_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Please enable bot payments in botfather before calling this method.'
        )

class BotResponseTimeoutError(
    BadRequestError,
    pattern='BOT_RESPONSE_TIMEOUT'
):
    """
    BadRequestError (400): `BOT_RESPONSE_TIMEOUT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A timeout occurred while fetching data from the bot.'
        )

class BotScoreNotModifiedError(
    BadRequestError,
    pattern='BOT_SCORE_NOT_MODIFIED'
):
    """
    BadRequestError (400): `BOT_SCORE_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The score wasn't modified."
        )

class BotWebviewDisabledError(
    BadRequestError,
    pattern='BOT_WEBVIEW_DISABLED'
):
    """
    BadRequestError (400): `BOT_WEBVIEW_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A webview cannot be opened in the specified conditions: emitted for example if `from_bot_menu` or `url` are set and `peer` is not the chat with the bot.'
        )

class BotsTooMuchError(
    BadRequestError,
    pattern='BOTS_TOO_MUCH'
):
    """
    BadRequestError (400): `BOTS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'There are too many bots in this chat/channel.'
        )

class BroadcastIdInvalidError(
    BadRequestError,
    pattern='BROADCAST_ID_INVALID'
):
    """
    BadRequestError (400): `BROADCAST_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Broadcast ID invalid.'
        )

class BroadcastPublicVotersForbiddenError(
    BadRequestError,
    pattern='BROADCAST_PUBLIC_VOTERS_FORBIDDEN'
):
    """
    BadRequestError (400): `BROADCAST_PUBLIC_VOTERS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't forward polls with public voters."
        )

class BroadcastRequiredError(
    BadRequestError,
    pattern='BROADCAST_REQUIRED'
):
    """
    BadRequestError (400): `BROADCAST_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This method can only be called on a channel, please use stats.getMegagroupStats for supergroups.'
        )

class BusinessPeerInvalidError(
    BadRequestError,
    pattern='BUSINESS_PEER_INVALID'
):
    """
    BadRequestError (400): `BUSINESS_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Messages can't be set to the specified peer through the current [business connection](https://core.telegram.org/api/business#connected-bots)."
        )

class BusinessPeerUsageMissingError(
    BadRequestError,
    pattern='BUSINESS_PEER_USAGE_MISSING'
):
    """
    BadRequestError (400): `BUSINESS_PEER_USAGE_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You cannot send a message to a user through a [business connection](https://core.telegram.org/api/business#connected-bots) if the user hasn't recently contacted us."
        )

class BusinessRecipientsEmptyError(
    BadRequestError,
    pattern='BUSINESS_RECIPIENTS_EMPTY'
):
    """
    BadRequestError (400): `BUSINESS_RECIPIENTS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You didn't set any flag in inputBusinessBotRecipients, thus the bot cannot work with *any* peer."
        )

class BusinessWorkHoursEmptyError(
    BadRequestError,
    pattern='BUSINESS_WORK_HOURS_EMPTY'
):
    """
    BadRequestError (400): `BUSINESS_WORK_HOURS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No work hours were specified.'
        )

class BusinessWorkHoursPeriodInvalidError(
    BadRequestError,
    pattern='BUSINESS_WORK_HOURS_PERIOD_INVALID'
):
    """
    BadRequestError (400): `BUSINESS_WORK_HOURS_PERIOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified work hours are invalid, see [here &raquo;](https://core.telegram.org/api/business#opening-hours) for the exact requirements.'
        )

class ButtonCopyTextInvalidError(
    BadRequestError,
    pattern='BUTTON_COPY_TEXT_INVALID'
):
    """
    BadRequestError (400): `BUTTON_COPY_TEXT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified [keyboardButtonCopy](https://core.telegram.org/constructor/keyboardButtonCopy).`copy_text` is invalid.'
        )

class ButtonDataInvalidError(
    BadRequestError,
    pattern='BUTTON_DATA_INVALID'
):
    """
    BadRequestError (400): `BUTTON_DATA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The data of one or more of the buttons you provided is invalid.'
        )

class ButtonIdInvalidError(
    BadRequestError,
    pattern='BUTTON_ID_INVALID'
):
    """
    BadRequestError (400): `BUTTON_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified button ID is invalid.'
        )

class ButtonPosInvalidError(
    BadRequestError,
    pattern='BUTTON_POS_INVALID'
):
    """
    BadRequestError (400): `BUTTON_POS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The position of one of the keyboard buttons is invalid (i.e. a Game or Pay button not in the first position, and so on...).'
        )

class ButtonTextInvalidError(
    BadRequestError,
    pattern='BUTTON_TEXT_INVALID'
):
    """
    BadRequestError (400): `BUTTON_TEXT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified button text is invalid.'
        )

class ButtonTypeInvalidError(
    BadRequestError,
    pattern='BUTTON_TYPE_INVALID'
):
    """
    BadRequestError (400): `BUTTON_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The type of one or more of the buttons you provided is invalid.'
        )

class ButtonUrlInvalidError(
    BadRequestError,
    pattern='BUTTON_URL_INVALID'
):
    """
    BadRequestError (400): `BUTTON_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Button URL invalid.'
        )

class ButtonUserInvalidError(
    BadRequestError,
    pattern='BUTTON_USER_INVALID'
):
    """
    BadRequestError (400): `BUTTON_USER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The `user_id` passed to inputKeyboardButtonUserProfile is invalid!'
        )

class ButtonUserPrivacyRestrictedError(
    BadRequestError,
    pattern='BUTTON_USER_PRIVACY_RESTRICTED'
):
    """
    BadRequestError (400): `BUTTON_USER_PRIVACY_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The privacy setting of the user specified in a [inputKeyboardButtonUserProfile](https://core.telegram.org/constructor/inputKeyboardButtonUserProfile) button do not allow creating such a button.'
        )

class CallAlreadyAcceptedError(
    BadRequestError,
    pattern='CALL_ALREADY_ACCEPTED'
):
    """
    BadRequestError (400): `CALL_ALREADY_ACCEPTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The call was already accepted.'
        )

class CallAlreadyDeclinedError(
    BadRequestError,
    pattern='CALL_ALREADY_DECLINED'
):
    """
    BadRequestError (400): `CALL_ALREADY_DECLINED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The call was already declined.'
        )

class CallOccupyFailedError(
    BadRequestError,
    pattern='CALL_OCCUPY_FAILED'
):
    """
    BadRequestError (400): `CALL_OCCUPY_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The call failed because the user is already making another call.'
        )

class CallPeerInvalidError(
    BadRequestError,
    pattern='CALL_PEER_INVALID'
):
    """
    BadRequestError (400): `CALL_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided call peer object is invalid.'
        )

class CallProtocolFlagsInvalidError(
    BadRequestError,
    pattern='CALL_PROTOCOL_FLAGS_INVALID'
):
    """
    BadRequestError (400): `CALL_PROTOCOL_FLAGS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Call protocol flags invalid.'
        )

class CdnMethodInvalidError(
    BadRequestError,
    pattern='CDN_METHOD_INVALID'
):
    """
    BadRequestError (400): `CDN_METHOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't call this method in a CDN DC."
        )

class ChannelForumMissingError(
    BadRequestError,
    pattern='CHANNEL_FORUM_MISSING'
):
    """
    BadRequestError (400): `CHANNEL_FORUM_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This supergroup is not a forum.'
        )

class ChannelIdInvalidError(
    BadRequestError,
    pattern='CHANNEL_ID_INVALID'
):
    """
    BadRequestError (400): `CHANNEL_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified supergroup ID is invalid.'
        )

class ChannelInvalidError(
    BadRequestError,
    pattern='CHANNEL_INVALID'
):
    """
    BadRequestError (400): `CHANNEL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided channel is invalid.'
        )

class ChannelParicipantMissingError(
    BadRequestError,
    pattern='CHANNEL_PARICIPANT_MISSING'
):
    """
    BadRequestError (400): `CHANNEL_PARICIPANT_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The current user is not in the channel.'
        )

class ChannelPrivateError(
    BadRequestError,
    pattern='CHANNEL_PRIVATE'
):
    """
    BadRequestError (400): `CHANNEL_PRIVATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You haven't joined this channel/supergroup."
        )

class ChannelTooBigError(
    BadRequestError,
    pattern='CHANNEL_TOO_BIG'
):
    """
    BadRequestError (400): `CHANNEL_TOO_BIG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This channel has too many participants (>1000) to be deleted.'
        )

class ChannelTooLargeError(
    BadRequestError,
    pattern='CHANNEL_TOO_LARGE'
):
    """
    BadRequestError (400): `CHANNEL_TOO_LARGE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Channel is too large to be deleted; this error is issued when trying to delete channels with more than 1000 members (subject to change).'
        )

class ChannelsAdminLocatedTooMuchError(
    BadRequestError,
    pattern='CHANNELS_ADMIN_LOCATED_TOO_MUCH'
):
    """
    BadRequestError (400): `CHANNELS_ADMIN_LOCATED_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The user has reached the limit of public geogroups.'
        )

class ChannelsAdminPublicTooMuchError(
    BadRequestError,
    pattern='CHANNELS_ADMIN_PUBLIC_TOO_MUCH'
):
    """
    BadRequestError (400): `CHANNELS_ADMIN_PUBLIC_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're admin of too many public channels, make some channels private to change the username of this channel."
        )

class ChannelsTooMuchError(
    BadRequestError,
    pattern='CHANNELS_TOO_MUCH'
):
    """
    BadRequestError (400): `CHANNELS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have joined too many channels/supergroups.'
        )

class ChargeAlreadyRefundedError(
    BadRequestError,
    pattern='CHARGE_ALREADY_REFUNDED'
):
    """
    BadRequestError (400): `CHARGE_ALREADY_REFUNDED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The transaction was already refunded.'
        )

class ChatAboutNotModifiedError(
    BadRequestError,
    pattern='CHAT_ABOUT_NOT_MODIFIED'
):
    """
    BadRequestError (400): `CHAT_ABOUT_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'About text has not changed.'
        )

class ChatAboutTooLongError(
    BadRequestError,
    pattern='CHAT_ABOUT_TOO_LONG'
):
    """
    BadRequestError (400): `CHAT_ABOUT_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Chat about too long.'
        )

class ChatAdminRequiredError(
    BadRequestError,
    pattern='CHAT_ADMIN_REQUIRED'
):
    """
    BadRequestError (400): `CHAT_ADMIN_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must be an admin in this chat to do this.'
        )

class ChatDiscussionUnallowedError(
    BadRequestError,
    pattern='CHAT_DISCUSSION_UNALLOWED'
):
    """
    BadRequestError (400): `CHAT_DISCUSSION_UNALLOWED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't enable forum topics in a discussion group linked to a channel."
        )

class ChatForwardsRestrictedError(
    BadRequestError,
    pattern='CHAT_FORWARDS_RESTRICTED'
):
    """
    BadRequestError (400): `CHAT_FORWARDS_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't forward messages from a protected chat."
        )

class ChatIdEmptyError(
    BadRequestError,
    pattern='CHAT_ID_EMPTY'
):
    """
    BadRequestError (400): `CHAT_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided chat ID is empty.'
        )

class ChatIdInvalidError(
    BadRequestError,
    pattern='CHAT_ID_INVALID'
):
    """
    BadRequestError (400): `CHAT_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided chat id is invalid.'
        )

class ChatInvalidError(
    BadRequestError,
    pattern='CHAT_INVALID'
):
    """
    BadRequestError (400): `CHAT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid chat.'
        )

class ChatInvitePermanentError(
    BadRequestError,
    pattern='CHAT_INVITE_PERMANENT'
):
    """
    BadRequestError (400): `CHAT_INVITE_PERMANENT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't set an expiration date on permanent invite links."
        )

class ChatLinkExistsError(
    BadRequestError,
    pattern='CHAT_LINK_EXISTS'
):
    """
    BadRequestError (400): `CHAT_LINK_EXISTS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The chat is public, you can't hide the history to new users."
        )

class ChatMemberAddFailedError(
    BadRequestError,
    pattern='CHAT_MEMBER_ADD_FAILED'
):
    """
    BadRequestError (400): `CHAT_MEMBER_ADD_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Could not add participants.'
        )

class ChatNotModifiedError(
    BadRequestError,
    pattern='CHAT_NOT_MODIFIED'
):
    """
    BadRequestError (400): `CHAT_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No changes were made to chat information because the new information you passed is identical to the current information.'
        )

class ChatPublicRequiredError(
    BadRequestError,
    pattern='CHAT_PUBLIC_REQUIRED'
):
    """
    BadRequestError (400): `CHAT_PUBLIC_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You can only enable join requests in public groups.'
        )

class ChatRestrictedError(
    BadRequestError,
    pattern='CHAT_RESTRICTED'
):
    """
    BadRequestError (400): `CHAT_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send messages in this chat, you were restricted."
        )

class ChatRevokeDateUnsupportedError(
    BadRequestError,
    pattern='CHAT_REVOKE_DATE_UNSUPPORTED'
):
    """
    BadRequestError (400): `CHAT_REVOKE_DATE_UNSUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            '`min_date` and `max_date` are not available for using with non-user peers.'
        )

class ChatSendInlineForbiddenError(
    BadRequestError,
    pattern='CHAT_SEND_INLINE_FORBIDDEN'
):
    """
    BadRequestError (400): `CHAT_SEND_INLINE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send inline messages in this group."
        )

class ChatTitleEmptyError(
    BadRequestError,
    pattern='CHAT_TITLE_EMPTY'
):
    """
    BadRequestError (400): `CHAT_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No chat title provided.'
        )

class ChatTooBigError(
    BadRequestError,
    pattern='CHAT_TOO_BIG'
):
    """
    BadRequestError (400): `CHAT_TOO_BIG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This method is not available for groups with more than `chat_read_mark_size_threshold` members, [see client configuration &raquo;](https://core.telegram.org/api/config#client-configuration).'
        )

class ChatlinkSlugEmptyError(
    BadRequestError,
    pattern='CHATLINK_SLUG_EMPTY'
):
    """
    BadRequestError (400): `CHATLINK_SLUG_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified slug is empty.'
        )

class ChatlinkSlugExpiredError(
    BadRequestError,
    pattern='CHATLINK_SLUG_EXPIRED'
):
    """
    BadRequestError (400): `CHATLINK_SLUG_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified [business chat link](https://core.telegram.org/api/business#business-chat-links) has expired.'
        )

class ChatlinksTooMuchError(
    BadRequestError,
    pattern='CHATLINKS_TOO_MUCH'
):
    """
    BadRequestError (400): `CHATLINKS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many [business chat links](https://core.telegram.org/api/business#business-chat-links) were created, please delete some older links.'
        )

class ChatlistExcludeInvalidError(
    BadRequestError,
    pattern='CHATLIST_EXCLUDE_INVALID'
):
    """
    BadRequestError (400): `CHATLIST_EXCLUDE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `exclude_peers` are invalid.'
        )

class ChatlistsTooMuchError(
    BadRequestError,
    pattern='CHATLISTS_TOO_MUCH'
):
    """
    BadRequestError (400): `CHATLISTS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have created too many folder links, hitting the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [limits &raquo;](https://core.telegram.org/api/config#chatlist-invites-limit-default).'
        )

class CodeEmptyError(
    BadRequestError,
    pattern='CODE_EMPTY'
):
    """
    BadRequestError (400): `CODE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided code is empty.'
        )

class CodeHashInvalidError(
    BadRequestError,
    pattern='CODE_HASH_INVALID'
):
    """
    BadRequestError (400): `CODE_HASH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Code hash invalid.'
        )

class CodeInvalidError(
    BadRequestError,
    pattern='CODE_INVALID'
):
    """
    BadRequestError (400): `CODE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Code invalid.'
        )

class CollectibleInvalidError(
    BadRequestError,
    pattern='COLLECTIBLE_INVALID'
):
    """
    BadRequestError (400): `COLLECTIBLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified collectible is invalid.'
        )

class CollectibleNotFoundError(
    BadRequestError,
    pattern='COLLECTIBLE_NOT_FOUND'
):
    """
    BadRequestError (400): `COLLECTIBLE_NOT_FOUND`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified collectible could not be found.'
        )

class ColorInvalidError(
    BadRequestError,
    pattern='COLOR_INVALID'
):
    """
    BadRequestError (400): `COLOR_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified color palette ID was invalid.'
        )

class ConnectionApiIdInvalidError(
    BadRequestError,
    pattern='CONNECTION_API_ID_INVALID'
):
    """
    BadRequestError (400): `CONNECTION_API_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided API id is invalid.'
        )

class ConnectionAppVersionEmptyError(
    BadRequestError,
    pattern='CONNECTION_APP_VERSION_EMPTY'
):
    """
    BadRequestError (400): `CONNECTION_APP_VERSION_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'App version is empty.'
        )

class ConnectionIdInvalidError(
    BadRequestError,
    pattern='CONNECTION_ID_INVALID'
):
    """
    BadRequestError (400): `CONNECTION_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified connection ID is invalid.'
        )

class ConnectionLayerInvalidError(
    BadRequestError,
    pattern='CONNECTION_LAYER_INVALID'
):
    """
    BadRequestError (400): `CONNECTION_LAYER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Layer invalid.'
        )

class ContactAddMissingError(
    BadRequestError,
    pattern='CONTACT_ADD_MISSING'
):
    """
    BadRequestError (400): `CONTACT_ADD_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Contact to add is missing.'
        )

class ContactIdInvalidError(
    BadRequestError,
    pattern='CONTACT_ID_INVALID'
):
    """
    BadRequestError (400): `CONTACT_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided contact ID is invalid.'
        )

class ContactMissingError(
    BadRequestError,
    pattern='CONTACT_MISSING'
):
    """
    BadRequestError (400): `CONTACT_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified user is not a contact.'
        )

class ContactNameEmptyError(
    BadRequestError,
    pattern='CONTACT_NAME_EMPTY'
):
    """
    BadRequestError (400): `CONTACT_NAME_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Contact name empty.'
        )

class ContactReqMissingError(
    BadRequestError,
    pattern='CONTACT_REQ_MISSING'
):
    """
    BadRequestError (400): `CONTACT_REQ_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Missing contact request.'
        )

class CreateCallFailedError(
    BadRequestError,
    pattern='CREATE_CALL_FAILED'
):
    """
    BadRequestError (400): `CREATE_CALL_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An error occurred while creating the call.'
        )

class CurrencyTotalAmountInvalidError(
    BadRequestError,
    pattern='CURRENCY_TOTAL_AMOUNT_INVALID'
):
    """
    BadRequestError (400): `CURRENCY_TOTAL_AMOUNT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The total amount of all prices is invalid.'
        )

class CustomReactionsTooManyError(
    BadRequestError,
    pattern='CUSTOM_REACTIONS_TOO_MANY'
):
    """
    BadRequestError (400): `CUSTOM_REACTIONS_TOO_MANY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many custom reactions were specified.'
        )

class DataInvalidError(
    BadRequestError,
    pattern='DATA_INVALID'
):
    """
    BadRequestError (400): `DATA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Encrypted data invalid.'
        )

class DataJsonInvalidError(
    BadRequestError,
    pattern='DATA_JSON_INVALID'
):
    """
    BadRequestError (400): `DATA_JSON_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided JSON data is invalid.'
        )

class DataTooLongError(
    BadRequestError,
    pattern='DATA_TOO_LONG'
):
    """
    BadRequestError (400): `DATA_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Data too long.'
        )

class DateEmptyError(
    BadRequestError,
    pattern='DATE_EMPTY'
):
    """
    BadRequestError (400): `DATE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Date empty.'
        )

class DcIdInvalidError(
    BadRequestError,
    pattern='DC_ID_INVALID'
):
    """
    BadRequestError (400): `DC_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided DC ID is invalid.'
        )

class DhGAInvalidError(
    BadRequestError,
    pattern='DH_G_A_INVALID'
):
    """
    BadRequestError (400): `DH_G_A_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'g_a invalid.'
        )

class DocumentInvalidError(
    BadRequestError,
    pattern='DOCUMENT_INVALID'
):
    """
    BadRequestError (400): `DOCUMENT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified document is invalid.'
        )

class EmailHashExpiredError(
    BadRequestError,
    pattern='EMAIL_HASH_EXPIRED'
):
    """
    BadRequestError (400): `EMAIL_HASH_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Email hash expired.'
        )

class EmailInvalidError(
    BadRequestError,
    pattern='EMAIL_INVALID'
):
    """
    BadRequestError (400): `EMAIL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified email is invalid.'
        )

class EmailNotAllowedError(
    BadRequestError,
    pattern='EMAIL_NOT_ALLOWED'
):
    """
    BadRequestError (400): `EMAIL_NOT_ALLOWED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified email cannot be used to complete the operation.'
        )

class EmailNotSetupError(
    BadRequestError,
    pattern='EMAIL_NOT_SETUP'
):
    """
    BadRequestError (400): `EMAIL_NOT_SETUP`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'In order to change the login email with emailVerifyPurposeLoginChange, an existing login email must already be set using emailVerifyPurposeLoginSetup.'
        )

class EmailUnconfirmedError(
    BadRequestError,
    pattern='EMAIL_UNCONFIRMED'
):
    """
    BadRequestError (400): `EMAIL_UNCONFIRMED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Email unconfirmed.'
        )

class EmailUnconfirmedError(
    BadRequestError,
    pattern=re.compile(r'EMAIL_UNCONFIRMED_(?P<length>\d+)')
):
    """
    BadRequestError (400): `EMAIL_UNCONFIRMED_{length}`
    """

    def __init__(
        self,
        request,
        length: int = 0
    ):
        self.length = length

        super().__init__(
            request,
            f"The provided email isn't confirmed, {length} is the length of the verification code that was just sent to the email: use [account.verifyEmail](https://core.telegram.org/method/account.verifyEmail) to enter the received verification code and enable the recovery email."
        )

class EmailVerifyExpiredError(
    BadRequestError,
    pattern='EMAIL_VERIFY_EXPIRED'
):
    """
    BadRequestError (400): `EMAIL_VERIFY_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The verification email has expired.'
        )

class EmojiInvalidError(
    BadRequestError,
    pattern='EMOJI_INVALID'
):
    """
    BadRequestError (400): `EMOJI_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified theme emoji is valid.'
        )

class EmojiMarkupInvalidError(
    BadRequestError,
    pattern='EMOJI_MARKUP_INVALID'
):
    """
    BadRequestError (400): `EMOJI_MARKUP_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `video_emoji_markup` was invalid.'
        )

class EmojiNotModifiedError(
    BadRequestError,
    pattern='EMOJI_NOT_MODIFIED'
):
    """
    BadRequestError (400): `EMOJI_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The theme wasn't changed."
        )

class EmoticonEmptyError(
    BadRequestError,
    pattern='EMOTICON_EMPTY'
):
    """
    BadRequestError (400): `EMOTICON_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The emoji is empty.'
        )

class EmoticonInvalidError(
    BadRequestError,
    pattern='EMOTICON_INVALID'
):
    """
    BadRequestError (400): `EMOTICON_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified emoji is invalid.'
        )

class EmoticonStickerpackMissingError(
    BadRequestError,
    pattern='EMOTICON_STICKERPACK_MISSING'
):
    """
    BadRequestError (400): `EMOTICON_STICKERPACK_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'inputStickerSetDice.emoji cannot be empty.'
        )

class EncryptedMessageInvalidError(
    BadRequestError,
    pattern='ENCRYPTED_MESSAGE_INVALID'
):
    """
    BadRequestError (400): `ENCRYPTED_MESSAGE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Encrypted message invalid.'
        )

class EncryptionAlreadyAcceptedError(
    BadRequestError,
    pattern='ENCRYPTION_ALREADY_ACCEPTED'
):
    """
    BadRequestError (400): `ENCRYPTION_ALREADY_ACCEPTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Secret chat already accepted.'
        )

class EncryptionAlreadyDeclinedError(
    BadRequestError,
    pattern='ENCRYPTION_ALREADY_DECLINED'
):
    """
    BadRequestError (400): `ENCRYPTION_ALREADY_DECLINED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The secret chat was already declined.'
        )

class EncryptionDeclinedError(
    BadRequestError,
    pattern='ENCRYPTION_DECLINED'
):
    """
    BadRequestError (400): `ENCRYPTION_DECLINED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The secret chat was declined.'
        )

class EncryptionIdInvalidError(
    BadRequestError,
    pattern='ENCRYPTION_ID_INVALID'
):
    """
    BadRequestError (400): `ENCRYPTION_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided secret chat ID is invalid.'
        )

class EntitiesTooLongError(
    BadRequestError,
    pattern='ENTITIES_TOO_LONG'
):
    """
    BadRequestError (400): `ENTITIES_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You provided too many styled message entities.'
        )

class EntityBoundsInvalidError(
    BadRequestError,
    pattern='ENTITY_BOUNDS_INVALID'
):
    """
    BadRequestError (400): `ENTITY_BOUNDS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A specified [entity offset or length](https://core.telegram.org/api/entities#entity-length) is invalid, see [here &raquo;](https://core.telegram.org/api/entities#entity-length) for info on how to properly compute the entity offset/length.'
        )

class EntityMentionUserInvalidError(
    BadRequestError,
    pattern='ENTITY_MENTION_USER_INVALID'
):
    """
    BadRequestError (400): `ENTITY_MENTION_USER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You mentioned an invalid user.'
        )

class ErrorTextEmptyError(
    BadRequestError,
    pattern='ERROR_TEXT_EMPTY'
):
    """
    BadRequestError (400): `ERROR_TEXT_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided error message is empty.'
        )

class ExpireDateInvalidError(
    BadRequestError,
    pattern='EXPIRE_DATE_INVALID'
):
    """
    BadRequestError (400): `EXPIRE_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified expiration date is invalid.'
        )

class ExportCardInvalidError(
    BadRequestError,
    pattern='EXPORT_CARD_INVALID'
):
    """
    BadRequestError (400): `EXPORT_CARD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Provided card is invalid.'
        )

class ExtendedMediaAmountInvalidError(
    BadRequestError,
    pattern='EXTENDED_MEDIA_AMOUNT_INVALID'
):
    """
    BadRequestError (400): `EXTENDED_MEDIA_AMOUNT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `stars_amount` of the passed [inputMediaPaidMedia](https://core.telegram.org/constructor/inputMediaPaidMedia) is invalid.'
        )

class ExternalUrlInvalidError(
    BadRequestError,
    pattern='EXTERNAL_URL_INVALID'
):
    """
    BadRequestError (400): `EXTERNAL_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'External URL invalid.'
        )

class FileContentTypeInvalidError(
    BadRequestError,
    pattern='FILE_CONTENT_TYPE_INVALID'
):
    """
    BadRequestError (400): `FILE_CONTENT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'File content-type is invalid.'
        )

class FileEmtpyError(
    BadRequestError,
    pattern='FILE_EMTPY'
):
    """
    BadRequestError (400): `FILE_EMTPY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An empty file was provided.'
        )

class FileIdInvalidError(
    BadRequestError,
    pattern='FILE_ID_INVALID'
):
    """
    BadRequestError (400): `FILE_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided file id is invalid.'
        )

class FilePartEmptyError(
    BadRequestError,
    pattern='FILE_PART_EMPTY'
):
    """
    BadRequestError (400): `FILE_PART_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided file part is empty.'
        )

class FilePartInvalidError(
    BadRequestError,
    pattern='FILE_PART_INVALID'
):
    """
    BadRequestError (400): `FILE_PART_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The file part number is invalid.'
        )

class FilePartLengthInvalidError(
    BadRequestError,
    pattern='FILE_PART_LENGTH_INVALID'
):
    """
    BadRequestError (400): `FILE_PART_LENGTH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The length of a file part is invalid.'
        )

class FilePartSizeChangedError(
    BadRequestError,
    pattern='FILE_PART_SIZE_CHANGED'
):
    """
    BadRequestError (400): `FILE_PART_SIZE_CHANGED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Provided file part size has changed.'
        )

class FilePartSizeInvalidError(
    BadRequestError,
    pattern='FILE_PART_SIZE_INVALID'
):
    """
    BadRequestError (400): `FILE_PART_SIZE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided file part size is invalid.'
        )

class FilePartTooBigError(
    BadRequestError,
    pattern='FILE_PART_TOO_BIG'
):
    """
    BadRequestError (400): `FILE_PART_TOO_BIG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The uploaded file part is too big.'
        )

class FilePartTooSmallError(
    BadRequestError,
    pattern='FILE_PART_TOO_SMALL'
):
    """
    BadRequestError (400): `FILE_PART_TOO_SMALL`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The size of the uploaded file part is too small, please see the documentation for the allowed sizes.'
        )

class FilePartsInvalidError(
    BadRequestError,
    pattern='FILE_PARTS_INVALID'
):
    """
    BadRequestError (400): `FILE_PARTS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The number of file parts is invalid.'
        )

class FileReferenceExpiredError(
    BadRequestError,
    pattern=re.compile(r'FILE_REFERENCE_(?P<index>\d+)_EXPIRED')
):
    """
    BadRequestError (400): `FILE_REFERENCE_{index}_EXPIRED`
    """

    def __init__(
        self,
        request,
        index: int = 0
    ):
        self.index = index

        super().__init__(
            request,
            f'The file reference of the media file at index {index} in the passed media array expired, it [must be refreshed](https://core.telegram.org/api/file_reference).'
        )

class FileReferenceInvalidError(
    BadRequestError,
    pattern=re.compile(r'FILE_REFERENCE_(?P<index>\d+)_INVALID')
):
    """
    BadRequestError (400): `FILE_REFERENCE_{index}_INVALID`
    """

    def __init__(
        self,
        request,
        index: int = 0
    ):
        self.index = index

        super().__init__(
            request,
            f'The file reference of the media file at index {index} in the passed media array is invalid.'
        )

class FileReferenceEmptyError(
    BadRequestError,
    pattern='FILE_REFERENCE_EMPTY'
):
    """
    BadRequestError (400): `FILE_REFERENCE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An empty [file reference](https://core.telegram.org/api/file_reference) was specified.'
        )

class FileReferenceExpiredError(
    BadRequestError,
    pattern='FILE_REFERENCE_EXPIRED'
):
    """
    BadRequestError (400): `FILE_REFERENCE_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'File reference expired, it must be refetched as described in [the documentation](https://core.telegram.org/api/file_reference).'
        )

class FileReferenceInvalidError(
    BadRequestError,
    pattern='FILE_REFERENCE_INVALID'
):
    """
    BadRequestError (400): `FILE_REFERENCE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified [file reference](https://core.telegram.org/api/file_reference) is invalid.'
        )

class FileTitleEmptyError(
    BadRequestError,
    pattern='FILE_TITLE_EMPTY'
):
    """
    BadRequestError (400): `FILE_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An empty file title was specified.'
        )

class FileTokenInvalidError(
    BadRequestError,
    pattern='FILE_TOKEN_INVALID'
):
    """
    BadRequestError (400): `FILE_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The master DC did not accept the `file_token` (e.g., the token has expired). Continue downloading the file from the master DC using upload.getFile.'
        )

class FilterIdInvalidError(
    BadRequestError,
    pattern='FILTER_ID_INVALID'
):
    """
    BadRequestError (400): `FILTER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified filter ID is invalid.'
        )

class FilterIncludeEmptyError(
    BadRequestError,
    pattern='FILTER_INCLUDE_EMPTY'
):
    """
    BadRequestError (400): `FILTER_INCLUDE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The include_peers vector of the filter is empty.'
        )

class FilterNotSupportedError(
    BadRequestError,
    pattern='FILTER_NOT_SUPPORTED'
):
    """
    BadRequestError (400): `FILTER_NOT_SUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified filter cannot be used in this context.'
        )

class FilterTitleEmptyError(
    BadRequestError,
    pattern='FILTER_TITLE_EMPTY'
):
    """
    BadRequestError (400): `FILTER_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The title field of the filter is empty.'
        )

class FirstnameInvalidError(
    BadRequestError,
    pattern='FIRSTNAME_INVALID'
):
    """
    BadRequestError (400): `FIRSTNAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The first name is invalid.'
        )

class FolderIdEmptyError(
    BadRequestError,
    pattern='FOLDER_ID_EMPTY'
):
    """
    BadRequestError (400): `FOLDER_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An empty folder ID was specified.'
        )

class FolderIdInvalidError(
    BadRequestError,
    pattern='FOLDER_ID_INVALID'
):
    """
    BadRequestError (400): `FOLDER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid folder ID.'
        )

class FormExpiredError(
    BadRequestError,
    pattern='FORM_EXPIRED'
):
    """
    BadRequestError (400): `FORM_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The form was generated more than 10 minutes ago and has expired, please re-generate it using [payments.getPaymentForm](https://core.telegram.org/method/payments.getPaymentForm) and pass the new `form_id`.'
        )

class FormIdEmptyError(
    BadRequestError,
    pattern='FORM_ID_EMPTY'
):
    """
    BadRequestError (400): `FORM_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified form ID is empty.'
        )

class FormUnsupportedError(
    BadRequestError,
    pattern='FORM_UNSUPPORTED'
):
    """
    BadRequestError (400): `FORM_UNSUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Please update your client.'
        )

class ForumEnabledError(
    BadRequestError,
    pattern='FORUM_ENABLED'
):
    """
    BadRequestError (400): `FORUM_ENABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't execute the specified action because the group is a [forum](https://core.telegram.org/api/forum), disable forum functionality to continue."
        )

class FreshChangeAdminsForbiddenError(
    BadRequestError,
    pattern='FRESH_CHANGE_ADMINS_FORBIDDEN'
):
    """
    BadRequestError (400): `FRESH_CHANGE_ADMINS_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You were just elected admin, you can't add or modify other admins yet."
        )

class FromMessageBotDisabledError(
    BadRequestError,
    pattern='FROM_MESSAGE_BOT_DISABLED'
):
    """
    BadRequestError (400): `FROM_MESSAGE_BOT_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Bots can't use fromMessage min constructors."
        )

class FromPeerInvalidError(
    BadRequestError,
    pattern='FROM_PEER_INVALID'
):
    """
    BadRequestError (400): `FROM_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified from_id is invalid.'
        )

class GameBotInvalidError(
    BadRequestError,
    pattern='GAME_BOT_INVALID'
):
    """
    BadRequestError (400): `GAME_BOT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Bots can't send another bot's game."
        )

class GeneralModifyIconForbiddenError(
    BadRequestError,
    pattern='GENERAL_MODIFY_ICON_FORBIDDEN'
):
    """
    BadRequestError (400): `GENERAL_MODIFY_ICON_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You can\'t modify the icon of the "General" topic.'
        )

class GeoPointInvalidError(
    BadRequestError,
    pattern='GEO_POINT_INVALID'
):
    """
    BadRequestError (400): `GEO_POINT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid geoposition provided.'
        )

class GifContentTypeInvalidError(
    BadRequestError,
    pattern='GIF_CONTENT_TYPE_INVALID'
):
    """
    BadRequestError (400): `GIF_CONTENT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'GIF content-type invalid.'
        )

class GifIdInvalidError(
    BadRequestError,
    pattern='GIF_ID_INVALID'
):
    """
    BadRequestError (400): `GIF_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided GIF ID is invalid.'
        )

class GiftSlugExpiredError(
    BadRequestError,
    pattern='GIFT_SLUG_EXPIRED'
):
    """
    BadRequestError (400): `GIFT_SLUG_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified gift slug has expired.'
        )

class GiftSlugInvalidError(
    BadRequestError,
    pattern='GIFT_SLUG_INVALID'
):
    """
    BadRequestError (400): `GIFT_SLUG_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified slug is invalid.'
        )

class GraphExpiredReloadError(
    BadRequestError,
    pattern='GRAPH_EXPIRED_RELOAD'
):
    """
    BadRequestError (400): `GRAPH_EXPIRED_RELOAD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This graph has expired, please obtain a new graph token.'
        )

class GraphInvalidReloadError(
    BadRequestError,
    pattern='GRAPH_INVALID_RELOAD'
):
    """
    BadRequestError (400): `GRAPH_INVALID_RELOAD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid graph token provided, please reload the stats and provide the updated token.'
        )

class GraphOutdatedReloadError(
    BadRequestError,
    pattern='GRAPH_OUTDATED_RELOAD'
):
    """
    BadRequestError (400): `GRAPH_OUTDATED_RELOAD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The graph is outdated, please get a new async token using stats.getBroadcastStats.'
        )

class GroupcallAlreadyDiscardedError(
    BadRequestError,
    pattern='GROUPCALL_ALREADY_DISCARDED'
):
    """
    BadRequestError (400): `GROUPCALL_ALREADY_DISCARDED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The group call was already discarded.'
        )

class GroupcallForbiddenError(
    BadRequestError,
    pattern='GROUPCALL_FORBIDDEN'
):
    """
    BadRequestError (400): `GROUPCALL_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The group call has already ended.'
        )

class GroupcallInvalidError(
    BadRequestError,
    pattern='GROUPCALL_INVALID'
):
    """
    BadRequestError (400): `GROUPCALL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified group call is invalid.'
        )

class GroupcallJoinMissingError(
    BadRequestError,
    pattern='GROUPCALL_JOIN_MISSING'
):
    """
    BadRequestError (400): `GROUPCALL_JOIN_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You haven't joined this group call."
        )

class GroupcallNotModifiedError(
    BadRequestError,
    pattern='GROUPCALL_NOT_MODIFIED'
):
    """
    BadRequestError (400): `GROUPCALL_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Group call settings weren't modified."
        )

class GroupcallSsrcDuplicateMuchError(
    BadRequestError,
    pattern='GROUPCALL_SSRC_DUPLICATE_MUCH'
):
    """
    BadRequestError (400): `GROUPCALL_SSRC_DUPLICATE_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The app needs to retry joining the group call with a new SSRC value.'
        )

class GroupedMediaInvalidError(
    BadRequestError,
    pattern='GROUPED_MEDIA_INVALID'
):
    """
    BadRequestError (400): `GROUPED_MEDIA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid grouped media.'
        )

class HashInvalidError(
    BadRequestError,
    pattern='HASH_INVALID'
):
    """
    BadRequestError (400): `HASH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided hash is invalid.'
        )

class HashtagInvalidError(
    BadRequestError,
    pattern='HASHTAG_INVALID'
):
    """
    BadRequestError (400): `HASHTAG_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified hashtag is invalid.'
        )

class HideRequesterMissingError(
    BadRequestError,
    pattern='HIDE_REQUESTER_MISSING'
):
    """
    BadRequestError (400): `HIDE_REQUESTER_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The join request was missing or was already handled.'
        )

class IdExpiredError(
    BadRequestError,
    pattern='ID_EXPIRED'
):
    """
    BadRequestError (400): `ID_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed prepared inline message ID has expired.'
        )

class IdInvalidError(
    BadRequestError,
    pattern='ID_INVALID'
):
    """
    BadRequestError (400): `ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed ID is invalid.'
        )

class ImageProcessFailedError(
    BadRequestError,
    pattern='IMAGE_PROCESS_FAILED'
):
    """
    BadRequestError (400): `IMAGE_PROCESS_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Failure while processing image.'
        )

class ImportFileInvalidError(
    BadRequestError,
    pattern='IMPORT_FILE_INVALID'
):
    """
    BadRequestError (400): `IMPORT_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified chat export file is invalid.'
        )

class ImportFormatDateInvalidError(
    BadRequestError,
    pattern='IMPORT_FORMAT_DATE_INVALID'
):
    """
    BadRequestError (400): `IMPORT_FORMAT_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The date specified in the import file is invalid.'
        )

class ImportFormatUnrecognizedError(
    BadRequestError,
    pattern='IMPORT_FORMAT_UNRECOGNIZED'
):
    """
    BadRequestError (400): `IMPORT_FORMAT_UNRECOGNIZED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified chat export file was exported from an unsupported chat app.'
        )

class ImportIdInvalidError(
    BadRequestError,
    pattern='IMPORT_ID_INVALID'
):
    """
    BadRequestError (400): `IMPORT_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified import ID is invalid.'
        )

class ImportTokenInvalidError(
    BadRequestError,
    pattern='IMPORT_TOKEN_INVALID'
):
    """
    BadRequestError (400): `IMPORT_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified token is invalid.'
        )

class InlineResultExpiredError(
    BadRequestError,
    pattern='INLINE_RESULT_EXPIRED'
):
    """
    BadRequestError (400): `INLINE_RESULT_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The inline query expired.'
        )

class InputChatlistInvalidError(
    BadRequestError,
    pattern='INPUT_CHATLIST_INVALID'
):
    """
    BadRequestError (400): `INPUT_CHATLIST_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified folder is invalid.'
        )

class InputFileInvalidError(
    BadRequestError,
    pattern='INPUT_FILE_INVALID'
):
    """
    BadRequestError (400): `INPUT_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified [InputFile](https://core.telegram.org/type/InputFile) is invalid.'
        )

class InputFilterInvalidError(
    BadRequestError,
    pattern='INPUT_FILTER_INVALID'
):
    """
    BadRequestError (400): `INPUT_FILTER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified filter is invalid.'
        )

class InputPeersEmptyError(
    BadRequestError,
    pattern='INPUT_PEERS_EMPTY'
):
    """
    BadRequestError (400): `INPUT_PEERS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified peer array is empty.'
        )

class InputTextEmptyError(
    BadRequestError,
    pattern='INPUT_TEXT_EMPTY'
):
    """
    BadRequestError (400): `INPUT_TEXT_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified text is empty.'
        )

class InputTextTooLongError(
    BadRequestError,
    pattern='INPUT_TEXT_TOO_LONG'
):
    """
    BadRequestError (400): `INPUT_TEXT_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified text is too long.'
        )

class InputUserDeactivatedError(
    BadRequestError,
    pattern='INPUT_USER_DEACTIVATED'
):
    """
    BadRequestError (400): `INPUT_USER_DEACTIVATED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified user was deleted.'
        )

class InviteForbiddenWithJoinasError(
    BadRequestError,
    pattern='INVITE_FORBIDDEN_WITH_JOINAS'
):
    """
    BadRequestError (400): `INVITE_FORBIDDEN_WITH_JOINAS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "If the user has anonymously joined a group call as a channel, they can't invite other users to the group call because that would cause deanonymization, because the invite would be sent using the original user ID, not the anonymized channel ID."
        )

class InviteHashEmptyError(
    BadRequestError,
    pattern='INVITE_HASH_EMPTY'
):
    """
    BadRequestError (400): `INVITE_HASH_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The invite hash is empty.'
        )

class InviteHashExpiredError(
    BadRequestError,
    pattern='INVITE_HASH_EXPIRED'
):
    """
    BadRequestError (400): `INVITE_HASH_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The invite link has expired.'
        )

class InviteHashInvalidError(
    BadRequestError,
    pattern='INVITE_HASH_INVALID'
):
    """
    BadRequestError (400): `INVITE_HASH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The invite hash is invalid.'
        )

class InviteRequestSentError(
    BadRequestError,
    pattern='INVITE_REQUEST_SENT'
):
    """
    BadRequestError (400): `INVITE_REQUEST_SENT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have successfully requested to join this chat or channel.'
        )

class InviteRevokedMissingError(
    BadRequestError,
    pattern='INVITE_REVOKED_MISSING'
):
    """
    BadRequestError (400): `INVITE_REVOKED_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invite link was already revoked or is invalid.'
        )

class InviteSlugEmptyError(
    BadRequestError,
    pattern='INVITE_SLUG_EMPTY'
):
    """
    BadRequestError (400): `INVITE_SLUG_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invite slug is empty.'
        )

class InviteSlugExpiredError(
    BadRequestError,
    pattern='INVITE_SLUG_EXPIRED'
):
    """
    BadRequestError (400): `INVITE_SLUG_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified chat folder link has expired.'
        )

class InviteSlugInvalidError(
    BadRequestError,
    pattern='INVITE_SLUG_INVALID'
):
    """
    BadRequestError (400): `INVITE_SLUG_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invitation slug is invalid.'
        )

class InvitesTooMuchError(
    BadRequestError,
    pattern='INVITES_TOO_MUCH'
):
    """
    BadRequestError (400): `INVITES_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The maximum number of per-folder invites specified by the `chatlist_invites_limit_default`/`chatlist_invites_limit_premium` [client configuration parameters &raquo;](https://core.telegram.org/api/config#chatlist-invites-limit-default) was reached.'
        )

class InvoicePayloadInvalidError(
    BadRequestError,
    pattern='INVOICE_PAYLOAD_INVALID'
):
    """
    BadRequestError (400): `INVOICE_PAYLOAD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invoice payload is invalid.'
        )

class JoinAsPeerInvalidError(
    BadRequestError,
    pattern='JOIN_AS_PEER_INVALID'
):
    """
    BadRequestError (400): `JOIN_AS_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified peer cannot be used to join a group call.'
        )

class LangCodeInvalidError(
    BadRequestError,
    pattern='LANG_CODE_INVALID'
):
    """
    BadRequestError (400): `LANG_CODE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified language code is invalid.'
        )

class LangCodeNotSupportedError(
    BadRequestError,
    pattern='LANG_CODE_NOT_SUPPORTED'
):
    """
    BadRequestError (400): `LANG_CODE_NOT_SUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified language code is not supported.'
        )

class LangPackInvalidError(
    BadRequestError,
    pattern='LANG_PACK_INVALID'
):
    """
    BadRequestError (400): `LANG_PACK_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided language pack is invalid.'
        )

class LanguageInvalidError(
    BadRequestError,
    pattern='LANGUAGE_INVALID'
):
    """
    BadRequestError (400): `LANGUAGE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified lang_code is invalid.'
        )

class LastnameInvalidError(
    BadRequestError,
    pattern='LASTNAME_INVALID'
):
    """
    BadRequestError (400): `LASTNAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The last name is invalid.'
        )

class LimitInvalidError(
    BadRequestError,
    pattern='LIMIT_INVALID'
):
    """
    BadRequestError (400): `LIMIT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided limit is invalid.'
        )

class LinkNotModifiedError(
    BadRequestError,
    pattern='LINK_NOT_MODIFIED'
):
    """
    BadRequestError (400): `LINK_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Discussion link not modified.'
        )

class LocationInvalidError(
    BadRequestError,
    pattern='LOCATION_INVALID'
):
    """
    BadRequestError (400): `LOCATION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided location is invalid.'
        )

class MaxDateInvalidError(
    BadRequestError,
    pattern='MAX_DATE_INVALID'
):
    """
    BadRequestError (400): `MAX_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified maximum date is invalid.'
        )

class MaxIdInvalidError(
    BadRequestError,
    pattern='MAX_ID_INVALID'
):
    """
    BadRequestError (400): `MAX_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided max ID is invalid.'
        )

class MaxQtsInvalidError(
    BadRequestError,
    pattern='MAX_QTS_INVALID'
):
    """
    BadRequestError (400): `MAX_QTS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified max_qts is invalid.'
        )

class Md5ChecksumInvalidError(
    BadRequestError,
    pattern='MD5_CHECKSUM_INVALID'
):
    """
    BadRequestError (400): `MD5_CHECKSUM_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The MD5 checksums do not match.'
        )

class MediaCaptionTooLongError(
    BadRequestError,
    pattern='MEDIA_CAPTION_TOO_LONG'
):
    """
    BadRequestError (400): `MEDIA_CAPTION_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The caption is too long.'
        )

class MediaEmptyError(
    BadRequestError,
    pattern='MEDIA_EMPTY'
):
    """
    BadRequestError (400): `MEDIA_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided media object is invalid.'
        )

class MediaFileInvalidError(
    BadRequestError,
    pattern='MEDIA_FILE_INVALID'
):
    """
    BadRequestError (400): `MEDIA_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified media file is invalid.'
        )

class MediaGroupedInvalidError(
    BadRequestError,
    pattern='MEDIA_GROUPED_INVALID'
):
    """
    BadRequestError (400): `MEDIA_GROUPED_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You tried to send media of different types in an album.'
        )

class MediaInvalidError(
    BadRequestError,
    pattern='MEDIA_INVALID'
):
    """
    BadRequestError (400): `MEDIA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Media invalid.'
        )

class MediaNewInvalidError(
    BadRequestError,
    pattern='MEDIA_NEW_INVALID'
):
    """
    BadRequestError (400): `MEDIA_NEW_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The new media is invalid.'
        )

class MediaPrevInvalidError(
    BadRequestError,
    pattern='MEDIA_PREV_INVALID'
):
    """
    BadRequestError (400): `MEDIA_PREV_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Previous media invalid.'
        )

class MediaTtlInvalidError(
    BadRequestError,
    pattern='MEDIA_TTL_INVALID'
):
    """
    BadRequestError (400): `MEDIA_TTL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified media TTL is invalid.'
        )

class MediaTypeInvalidError(
    BadRequestError,
    pattern='MEDIA_TYPE_INVALID'
):
    """
    BadRequestError (400): `MEDIA_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified media type cannot be used in stories.'
        )

class MediaVideoStoryMissingError(
    BadRequestError,
    pattern='MEDIA_VIDEO_STORY_MISSING'
):
    """
    BadRequestError (400): `MEDIA_VIDEO_STORY_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A non-story video cannot be repubblished as a story (emitted when trying to resend a non-story video as a story using inputDocument).'
        )

class MegagroupGeoRequiredError(
    BadRequestError,
    pattern='MEGAGROUP_GEO_REQUIRED'
):
    """
    BadRequestError (400): `MEGAGROUP_GEO_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This method can only be invoked on a geogroup.'
        )

class MegagroupIdInvalidError(
    BadRequestError,
    pattern='MEGAGROUP_ID_INVALID'
):
    """
    BadRequestError (400): `MEGAGROUP_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid supergroup ID.'
        )

class MegagroupPrehistoryHiddenError(
    BadRequestError,
    pattern='MEGAGROUP_PREHISTORY_HIDDEN'
):
    """
    BadRequestError (400): `MEGAGROUP_PREHISTORY_HIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Group with hidden history for new members can't be set as discussion groups."
        )

class MegagroupRequiredError(
    BadRequestError,
    pattern='MEGAGROUP_REQUIRED'
):
    """
    BadRequestError (400): `MEGAGROUP_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You can only use this method on a supergroup.'
        )

class MessageEditTimeExpiredError(
    BadRequestError,
    pattern='MESSAGE_EDIT_TIME_EXPIRED'
):
    """
    BadRequestError (400): `MESSAGE_EDIT_TIME_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't edit this message anymore, too much time has passed since its creation."
        )

class MessageEmptyError(
    BadRequestError,
    pattern='MESSAGE_EMPTY'
):
    """
    BadRequestError (400): `MESSAGE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided message is empty.'
        )

class MessageIdInvalidError(
    BadRequestError,
    pattern='MESSAGE_ID_INVALID'
):
    """
    BadRequestError (400): `MESSAGE_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided message id is invalid.'
        )

class MessageIdsEmptyError(
    BadRequestError,
    pattern='MESSAGE_IDS_EMPTY'
):
    """
    BadRequestError (400): `MESSAGE_IDS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No message ids were provided.'
        )

class MessageNotModifiedError(
    BadRequestError,
    pattern='MESSAGE_NOT_MODIFIED'
):
    """
    BadRequestError (400): `MESSAGE_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The provided message data is identical to the previous message data, the message wasn't modified."
        )

class MessageNotReadYetError(
    BadRequestError,
    pattern='MESSAGE_NOT_READ_YET'
):
    """
    BadRequestError (400): `MESSAGE_NOT_READ_YET`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The specified message wasn't read yet."
        )

class MessagePollClosedError(
    BadRequestError,
    pattern='MESSAGE_POLL_CLOSED'
):
    """
    BadRequestError (400): `MESSAGE_POLL_CLOSED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Poll closed.'
        )

class MessageTooLongError(
    BadRequestError,
    pattern='MESSAGE_TOO_LONG'
):
    """
    BadRequestError (400): `MESSAGE_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided message is too long.'
        )

class MessageTooOldError(
    BadRequestError,
    pattern='MESSAGE_TOO_OLD'
):
    """
    BadRequestError (400): `MESSAGE_TOO_OLD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The message is too old, the requested information is not available.'
        )

class MethodInvalidError(
    BadRequestError,
    pattern='METHOD_INVALID'
):
    """
    BadRequestError (400): `METHOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified method is invalid.'
        )

class MinDateInvalidError(
    BadRequestError,
    pattern='MIN_DATE_INVALID'
):
    """
    BadRequestError (400): `MIN_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified minimum date is invalid.'
        )

class MsgIdInvalidError(
    BadRequestError,
    pattern='MSG_ID_INVALID'
):
    """
    BadRequestError (400): `MSG_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid message ID provided.'
        )

class MsgTooOldError(
    BadRequestError,
    pattern='MSG_TOO_OLD'
):
    """
    BadRequestError (400): `MSG_TOO_OLD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            '[`chat_read_mark_expire_period` seconds](https://core.telegram.org/api/config#chat-read-mark-expire-period) have passed since the message was sent, read receipts were deleted.'
        )

class MsgWaitFailedError(
    BadRequestError,
    pattern='MSG_WAIT_FAILED'
):
    """
    BadRequestError (400): `MSG_WAIT_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A waiting call returned an error.'
        )

class MultiMediaTooLongError(
    BadRequestError,
    pattern='MULTI_MEDIA_TOO_LONG'
):
    """
    BadRequestError (400): `MULTI_MEDIA_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many media files for album.'
        )

class NewSaltInvalidError(
    BadRequestError,
    pattern='NEW_SALT_INVALID'
):
    """
    BadRequestError (400): `NEW_SALT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The new salt is invalid.'
        )

class NewSettingsEmptyError(
    BadRequestError,
    pattern='NEW_SETTINGS_EMPTY'
):
    """
    BadRequestError (400): `NEW_SETTINGS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No password is set on the current account, and no new password was specified in `new_settings`.'
        )

class NewSettingsInvalidError(
    BadRequestError,
    pattern='NEW_SETTINGS_INVALID'
):
    """
    BadRequestError (400): `NEW_SETTINGS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The new password settings are invalid.'
        )

class NextOffsetInvalidError(
    BadRequestError,
    pattern='NEXT_OFFSET_INVALID'
):
    """
    BadRequestError (400): `NEXT_OFFSET_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified offset is longer than 64 bytes.'
        )

class NotEligibleError(
    BadRequestError,
    pattern='NOT_ELIGIBLE'
):
    """
    BadRequestError (400): `NOT_ELIGIBLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The current user is not eligible to join the Peer-to-Peer Login Program.'
        )

class NotJoinedError(
    BadRequestError,
    pattern='NOT_JOINED'
):
    """
    BadRequestError (400): `NOT_JOINED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The current user hasn't joined the Peer-to-Peer Login Program."
        )

class OffsetInvalidError(
    BadRequestError,
    pattern='OFFSET_INVALID'
):
    """
    BadRequestError (400): `OFFSET_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided offset is invalid.'
        )

class OffsetPeerIdInvalidError(
    BadRequestError,
    pattern='OFFSET_PEER_ID_INVALID'
):
    """
    BadRequestError (400): `OFFSET_PEER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided offset peer is invalid.'
        )

class OptionInvalidError(
    BadRequestError,
    pattern='OPTION_INVALID'
):
    """
    BadRequestError (400): `OPTION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid option selected.'
        )

class OptionsTooMuchError(
    BadRequestError,
    pattern='OPTIONS_TOO_MUCH'
):
    """
    BadRequestError (400): `OPTIONS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many options provided.'
        )

class OrderInvalidError(
    BadRequestError,
    pattern='ORDER_INVALID'
):
    """
    BadRequestError (400): `ORDER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified username order is invalid.'
        )

class PackShortNameInvalidError(
    BadRequestError,
    pattern='PACK_SHORT_NAME_INVALID'
):
    """
    BadRequestError (400): `PACK_SHORT_NAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Short pack name invalid.'
        )

class PackShortNameOccupiedError(
    BadRequestError,
    pattern='PACK_SHORT_NAME_OCCUPIED'
):
    """
    BadRequestError (400): `PACK_SHORT_NAME_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A stickerpack with this name already exists.'
        )

class PackTitleInvalidError(
    BadRequestError,
    pattern='PACK_TITLE_INVALID'
):
    """
    BadRequestError (400): `PACK_TITLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The stickerpack title is invalid.'
        )

class ParticipantIdInvalidError(
    BadRequestError,
    pattern='PARTICIPANT_ID_INVALID'
):
    """
    BadRequestError (400): `PARTICIPANT_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified participant ID is invalid.'
        )

class ParticipantJoinMissingError(
    BadRequestError,
    pattern='PARTICIPANT_JOIN_MISSING'
):
    """
    BadRequestError (400): `PARTICIPANT_JOIN_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Trying to enable a presentation, when the user hasn't joined the Video Chat with [phone.joinGroupCall](https://core.telegram.org/method/phone.joinGroupCall)."
        )

class ParticipantVersionOutdatedError(
    BadRequestError,
    pattern='PARTICIPANT_VERSION_OUTDATED'
):
    """
    BadRequestError (400): `PARTICIPANT_VERSION_OUTDATED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The other participant does not use an up to date telegram client with support for calls.'
        )

class ParticipantsTooFewError(
    BadRequestError,
    pattern='PARTICIPANTS_TOO_FEW'
):
    """
    BadRequestError (400): `PARTICIPANTS_TOO_FEW`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Not enough participants.'
        )

class PasswordEmptyError(
    BadRequestError,
    pattern='PASSWORD_EMPTY'
):
    """
    BadRequestError (400): `PASSWORD_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided password is empty.'
        )

class PasswordHashInvalidError(
    BadRequestError,
    pattern='PASSWORD_HASH_INVALID'
):
    """
    BadRequestError (400): `PASSWORD_HASH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided password hash is invalid.'
        )

class PasswordMissingError(
    BadRequestError,
    pattern='PASSWORD_MISSING'
):
    """
    BadRequestError (400): `PASSWORD_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must [enable 2FA](https://core.telegram.org/api/srp) before executing this operation.'
        )

class PasswordRecoveryExpiredError(
    BadRequestError,
    pattern='PASSWORD_RECOVERY_EXPIRED'
):
    """
    BadRequestError (400): `PASSWORD_RECOVERY_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The recovery code has expired.'
        )

class PasswordRecoveryNaError(
    BadRequestError,
    pattern='PASSWORD_RECOVERY_NA'
):
    """
    BadRequestError (400): `PASSWORD_RECOVERY_NA`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "No email was set, can't recover password via email."
        )

class PasswordRequiredError(
    BadRequestError,
    pattern='PASSWORD_REQUIRED'
):
    """
    BadRequestError (400): `PASSWORD_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A [2FA password](https://core.telegram.org/api/srp) must be configured to use Telegram Passport.'
        )

class PasswordTooFreshError(
    BadRequestError,
    pattern=re.compile(r'PASSWORD_TOO_FRESH_(?P<seconds>\d+)')
):
    """
    BadRequestError (400): `PASSWORD_TOO_FRESH_{seconds}`
    """

    def __init__(
        self,
        request,
        seconds: int = 0
    ):
        self.seconds = seconds

        super().__init__(
            request,
            f'The password was modified less than 24 hours ago, try again in {seconds} seconds.'
        )

class PaymentProviderInvalidError(
    BadRequestError,
    pattern='PAYMENT_PROVIDER_INVALID'
):
    """
    BadRequestError (400): `PAYMENT_PROVIDER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified payment provider is invalid.'
        )

class PeerHistoryEmptyError(
    BadRequestError,
    pattern='PEER_HISTORY_EMPTY'
):
    """
    BadRequestError (400): `PEER_HISTORY_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't pin an empty chat with a user."
        )

class PeerIdInvalidError(
    BadRequestError,
    pattern='PEER_ID_INVALID'
):
    """
    BadRequestError (400): `PEER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided peer id is invalid.'
        )

class PeerIdNotSupportedError(
    BadRequestError,
    pattern='PEER_ID_NOT_SUPPORTED'
):
    """
    BadRequestError (400): `PEER_ID_NOT_SUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided peer ID is not supported.'
        )

class PeerTypesInvalidError(
    BadRequestError,
    pattern='PEER_TYPES_INVALID'
):
    """
    BadRequestError (400): `PEER_TYPES_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed [keyboardButtonSwitchInline](https://core.telegram.org/constructor/keyboardButtonSwitchInline).`peer_types` field is invalid.'
        )

class PeersListEmptyError(
    BadRequestError,
    pattern='PEERS_LIST_EMPTY'
):
    """
    BadRequestError (400): `PEERS_LIST_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified list of peers is empty.'
        )

class PersistentTimestampEmptyError(
    BadRequestError,
    pattern='PERSISTENT_TIMESTAMP_EMPTY'
):
    """
    BadRequestError (400): `PERSISTENT_TIMESTAMP_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Persistent timestamp empty.'
        )

class PersistentTimestampInvalidError(
    BadRequestError,
    pattern='PERSISTENT_TIMESTAMP_INVALID'
):
    """
    BadRequestError (400): `PERSISTENT_TIMESTAMP_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Persistent timestamp invalid.'
        )

class PhoneCodeEmptyError(
    BadRequestError,
    pattern='PHONE_CODE_EMPTY'
):
    """
    BadRequestError (400): `PHONE_CODE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'phone_code is missing.'
        )

class PhoneCodeExpiredError(
    BadRequestError,
    pattern='PHONE_CODE_EXPIRED'
):
    """
    BadRequestError (400): `PHONE_CODE_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The phone code you provided has expired.'
        )

class PhoneCodeHashEmptyError(
    BadRequestError,
    pattern='PHONE_CODE_HASH_EMPTY'
):
    """
    BadRequestError (400): `PHONE_CODE_HASH_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'phone_code_hash is missing.'
        )

class PhoneCodeInvalidError(
    BadRequestError,
    pattern='PHONE_CODE_INVALID'
):
    """
    BadRequestError (400): `PHONE_CODE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided phone code is invalid.'
        )

class PhoneHashExpiredError(
    BadRequestError,
    pattern='PHONE_HASH_EXPIRED'
):
    """
    BadRequestError (400): `PHONE_HASH_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An invalid or expired `phone_code_hash` was provided.'
        )

class PhoneNotOccupiedError(
    BadRequestError,
    pattern='PHONE_NOT_OCCUPIED'
):
    """
    BadRequestError (400): `PHONE_NOT_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No user is associated to the specified phone number.'
        )

class PhoneNumberAppSignupForbiddenError(
    BadRequestError,
    pattern='PHONE_NUMBER_APP_SIGNUP_FORBIDDEN'
):
    """
    BadRequestError (400): `PHONE_NUMBER_APP_SIGNUP_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't sign up using this app."
        )

class PhoneNumberBannedError(
    BadRequestError,
    pattern='PHONE_NUMBER_BANNED'
):
    """
    BadRequestError (400): `PHONE_NUMBER_BANNED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided phone number is banned from telegram.'
        )

class PhoneNumberFloodError(
    BadRequestError,
    pattern='PHONE_NUMBER_FLOOD'
):
    """
    BadRequestError (400): `PHONE_NUMBER_FLOOD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You asked for the code too many times.'
        )

class PhoneNumberInvalidError(
    BadRequestError,
    pattern='PHONE_NUMBER_INVALID'
):
    """
    BadRequestError (400): `PHONE_NUMBER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The phone number is invalid.'
        )

class PhoneNumberOccupiedError(
    BadRequestError,
    pattern='PHONE_NUMBER_OCCUPIED'
):
    """
    BadRequestError (400): `PHONE_NUMBER_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The phone number is already in use.'
        )

class PhoneNumberUnoccupiedError(
    BadRequestError,
    pattern='PHONE_NUMBER_UNOCCUPIED'
):
    """
    BadRequestError (400): `PHONE_NUMBER_UNOCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The phone number is not yet being used.'
        )

class PhonePasswordProtectedError(
    BadRequestError,
    pattern='PHONE_PASSWORD_PROTECTED'
):
    """
    BadRequestError (400): `PHONE_PASSWORD_PROTECTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This phone is password protected.'
        )

class PhotoContentTypeInvalidError(
    BadRequestError,
    pattern='PHOTO_CONTENT_TYPE_INVALID'
):
    """
    BadRequestError (400): `PHOTO_CONTENT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo mime-type invalid.'
        )

class PhotoContentUrlEmptyError(
    BadRequestError,
    pattern='PHOTO_CONTENT_URL_EMPTY'
):
    """
    BadRequestError (400): `PHOTO_CONTENT_URL_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo URL invalid.'
        )

class PhotoCropFileMissingError(
    BadRequestError,
    pattern='PHOTO_CROP_FILE_MISSING'
):
    """
    BadRequestError (400): `PHOTO_CROP_FILE_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo crop file missing.'
        )

class PhotoCropSizeSmallError(
    BadRequestError,
    pattern='PHOTO_CROP_SIZE_SMALL'
):
    """
    BadRequestError (400): `PHOTO_CROP_SIZE_SMALL`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo is too small.'
        )

class PhotoExtInvalidError(
    BadRequestError,
    pattern='PHOTO_EXT_INVALID'
):
    """
    BadRequestError (400): `PHOTO_EXT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The extension of the photo is invalid.'
        )

class PhotoFileMissingError(
    BadRequestError,
    pattern='PHOTO_FILE_MISSING'
):
    """
    BadRequestError (400): `PHOTO_FILE_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Profile photo file missing.'
        )

class PhotoIdInvalidError(
    BadRequestError,
    pattern='PHOTO_ID_INVALID'
):
    """
    BadRequestError (400): `PHOTO_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo ID invalid.'
        )

class PhotoInvalidError(
    BadRequestError,
    pattern='PHOTO_INVALID'
):
    """
    BadRequestError (400): `PHOTO_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo invalid.'
        )

class PhotoInvalidDimensionsError(
    BadRequestError,
    pattern='PHOTO_INVALID_DIMENSIONS'
):
    """
    BadRequestError (400): `PHOTO_INVALID_DIMENSIONS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The photo dimensions are invalid.'
        )

class PhotoSaveFileInvalidError(
    BadRequestError,
    pattern='PHOTO_SAVE_FILE_INVALID'
):
    """
    BadRequestError (400): `PHOTO_SAVE_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Internal issues, try again later.'
        )

class PhotoThumbUrlEmptyError(
    BadRequestError,
    pattern='PHOTO_THUMB_URL_EMPTY'
):
    """
    BadRequestError (400): `PHOTO_THUMB_URL_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Photo thumbnail URL is empty.'
        )

class PinRestrictedError(
    BadRequestError,
    pattern='PIN_RESTRICTED'
):
    """
    BadRequestError (400): `PIN_RESTRICTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't pin messages."
        )

class PinnedDialogsTooMuchError(
    BadRequestError,
    pattern='PINNED_DIALOGS_TOO_MUCH'
):
    """
    BadRequestError (400): `PINNED_DIALOGS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many pinned dialogs.'
        )

class PollAnswerInvalidError(
    BadRequestError,
    pattern='POLL_ANSWER_INVALID'
):
    """
    BadRequestError (400): `POLL_ANSWER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the poll answers is not acceptable.'
        )

class PollAnswersInvalidError(
    BadRequestError,
    pattern='POLL_ANSWERS_INVALID'
):
    """
    BadRequestError (400): `POLL_ANSWERS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid poll answers were provided.'
        )

class PollOptionDuplicateError(
    BadRequestError,
    pattern='POLL_OPTION_DUPLICATE'
):
    """
    BadRequestError (400): `POLL_OPTION_DUPLICATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Duplicate poll options provided.'
        )

class PollOptionInvalidError(
    BadRequestError,
    pattern='POLL_OPTION_INVALID'
):
    """
    BadRequestError (400): `POLL_OPTION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid poll option provided.'
        )

class PollQuestionInvalidError(
    BadRequestError,
    pattern='POLL_QUESTION_INVALID'
):
    """
    BadRequestError (400): `POLL_QUESTION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the poll questions is not acceptable.'
        )

class PremiumAccountRequiredError(
    BadRequestError,
    pattern='PREMIUM_ACCOUNT_REQUIRED'
):
    """
    BadRequestError (400): `PREMIUM_ACCOUNT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A premium account is required to execute this action.'
        )

class PricingChatInvalidError(
    BadRequestError,
    pattern='PRICING_CHAT_INVALID'
):
    """
    BadRequestError (400): `PRICING_CHAT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The pricing for the [subscription](https://core.telegram.org/api/subscriptions) is invalid, the maximum price is specified in the [`stars_subscription_amount_max` config key &raquo;](https://core.telegram.org/api/config#stars-subscription-amount-max).'
        )

class PrivacyKeyInvalidError(
    BadRequestError,
    pattern='PRIVACY_KEY_INVALID'
):
    """
    BadRequestError (400): `PRIVACY_KEY_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The privacy key is invalid.'
        )

class PrivacyTooLongError(
    BadRequestError,
    pattern='PRIVACY_TOO_LONG'
):
    """
    BadRequestError (400): `PRIVACY_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many privacy rules were specified, the current limit is 1000.'
        )

class PrivacyValueInvalidError(
    BadRequestError,
    pattern='PRIVACY_VALUE_INVALID'
):
    """
    BadRequestError (400): `PRIVACY_VALUE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified privacy rule combination is invalid.'
        )

class PublicKeyRequiredError(
    BadRequestError,
    pattern='PUBLIC_KEY_REQUIRED'
):
    """
    BadRequestError (400): `PUBLIC_KEY_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A public key is required.'
        )

class QueryIdEmptyError(
    BadRequestError,
    pattern='QUERY_ID_EMPTY'
):
    """
    BadRequestError (400): `QUERY_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The query ID is empty.'
        )

class QueryIdInvalidError(
    BadRequestError,
    pattern='QUERY_ID_INVALID'
):
    """
    BadRequestError (400): `QUERY_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The query ID is invalid.'
        )

class QueryTooShortError(
    BadRequestError,
    pattern='QUERY_TOO_SHORT'
):
    """
    BadRequestError (400): `QUERY_TOO_SHORT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The query string is too short.'
        )

class QuickRepliesTooMuchError(
    BadRequestError,
    pattern='QUICK_REPLIES_TOO_MUCH'
):
    """
    BadRequestError (400): `QUICK_REPLIES_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A maximum of [appConfig.`quick_replies_limit`](https://core.telegram.org/api/config#quick-replies-limit) shortcuts may be created, the limit was reached.'
        )

class QuizAnswerMissingError(
    BadRequestError,
    pattern='QUIZ_ANSWER_MISSING'
):
    """
    BadRequestError (400): `QUIZ_ANSWER_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You can forward a quiz while hiding the original author only after choosing an option in the quiz.'
        )

class QuizCorrectAnswerInvalidError(
    BadRequestError,
    pattern='QUIZ_CORRECT_ANSWER_INVALID'
):
    """
    BadRequestError (400): `QUIZ_CORRECT_ANSWER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An invalid value was provided to the correct_answers field.'
        )

class QuizCorrectAnswersEmptyError(
    BadRequestError,
    pattern='QUIZ_CORRECT_ANSWERS_EMPTY'
):
    """
    BadRequestError (400): `QUIZ_CORRECT_ANSWERS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No correct quiz answer was specified.'
        )

class QuizCorrectAnswersTooMuchError(
    BadRequestError,
    pattern='QUIZ_CORRECT_ANSWERS_TOO_MUCH'
):
    """
    BadRequestError (400): `QUIZ_CORRECT_ANSWERS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You specified too many correct answers in a quiz, quizzes can only have one right answer!'
        )

class QuizMultipleInvalidError(
    BadRequestError,
    pattern='QUIZ_MULTIPLE_INVALID'
):
    """
    BadRequestError (400): `QUIZ_MULTIPLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Quizzes can't have the multiple_choice flag set!"
        )

class QuoteTextInvalidError(
    BadRequestError,
    pattern='QUOTE_TEXT_INVALID'
):
    """
    BadRequestError (400): `QUOTE_TEXT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `reply_to`.`quote_text` field is invalid.'
        )

class RaiseHandForbiddenError(
    BadRequestError,
    pattern='RAISE_HAND_FORBIDDEN'
):
    """
    BadRequestError (400): `RAISE_HAND_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot raise your hand.'
        )

class RandomIdEmptyError(
    BadRequestError,
    pattern='RANDOM_ID_EMPTY'
):
    """
    BadRequestError (400): `RANDOM_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Random ID empty.'
        )

class RandomIdInvalidError(
    BadRequestError,
    pattern='RANDOM_ID_INVALID'
):
    """
    BadRequestError (400): `RANDOM_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A provided random ID is invalid.'
        )

class RandomLengthInvalidError(
    BadRequestError,
    pattern='RANDOM_LENGTH_INVALID'
):
    """
    BadRequestError (400): `RANDOM_LENGTH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Random length invalid.'
        )

class RangesInvalidError(
    BadRequestError,
    pattern='RANGES_INVALID'
):
    """
    BadRequestError (400): `RANGES_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid range provided.'
        )

class ReactionEmptyError(
    BadRequestError,
    pattern='REACTION_EMPTY'
):
    """
    BadRequestError (400): `REACTION_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Empty reaction provided.'
        )

class ReactionInvalidError(
    BadRequestError,
    pattern='REACTION_INVALID'
):
    """
    BadRequestError (400): `REACTION_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified reaction is invalid.'
        )

class ReactionsTooManyError(
    BadRequestError,
    pattern='REACTIONS_TOO_MANY'
):
    """
    BadRequestError (400): `REACTIONS_TOO_MANY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The message already has exactly `reactions_uniq_max` reaction emojis, you can't react with a new emoji, see [the docs for more info &raquo;](https://core.telegram.org/api/config#client-configuration)."
        )

class ReceiptEmptyError(
    BadRequestError,
    pattern='RECEIPT_EMPTY'
):
    """
    BadRequestError (400): `RECEIPT_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified receipt is empty.'
        )

class ReplyMarkupBuyEmptyError(
    BadRequestError,
    pattern='REPLY_MARKUP_BUY_EMPTY'
):
    """
    BadRequestError (400): `REPLY_MARKUP_BUY_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Reply markup for buy button empty.'
        )

class ReplyMarkupGameEmptyError(
    BadRequestError,
    pattern='REPLY_MARKUP_GAME_EMPTY'
):
    """
    BadRequestError (400): `REPLY_MARKUP_GAME_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "A game message is being edited, but the newly provided keyboard doesn't have a keyboardButtonGame button."
        )

class ReplyMarkupInvalidError(
    BadRequestError,
    pattern='REPLY_MARKUP_INVALID'
):
    """
    BadRequestError (400): `REPLY_MARKUP_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided reply markup is invalid.'
        )

class ReplyMarkupTooLongError(
    BadRequestError,
    pattern='REPLY_MARKUP_TOO_LONG'
):
    """
    BadRequestError (400): `REPLY_MARKUP_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified reply_markup is too long.'
        )

class ReplyMessageIdInvalidError(
    BadRequestError,
    pattern='REPLY_MESSAGE_ID_INVALID'
):
    """
    BadRequestError (400): `REPLY_MESSAGE_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified reply-to message ID is invalid.'
        )

class ReplyMessagesTooMuchError(
    BadRequestError,
    pattern='REPLY_MESSAGES_TOO_MUCH'
):
    """
    BadRequestError (400): `REPLY_MESSAGES_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Each shortcut can contain a maximum of [appConfig.`quick_reply_messages_limit`](https://core.telegram.org/api/config#quick-reply-messages-limit) messages, the limit was reached.'
        )

class ReplyToInvalidError(
    BadRequestError,
    pattern='REPLY_TO_INVALID'
):
    """
    BadRequestError (400): `REPLY_TO_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `reply_to` field is invalid.'
        )

class ReplyToUserInvalidError(
    BadRequestError,
    pattern='REPLY_TO_USER_INVALID'
):
    """
    BadRequestError (400): `REPLY_TO_USER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The replied-to user is invalid.'
        )

class RequestTokenInvalidError(
    BadRequestError,
    pattern='REQUEST_TOKEN_INVALID'
):
    """
    BadRequestError (400): `REQUEST_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The master DC did not accept the `request_token` from the CDN DC. Continue downloading the file from the master DC using upload.getFile.'
        )

class ResetRequestMissingError(
    BadRequestError,
    pattern='RESET_REQUEST_MISSING'
):
    """
    BadRequestError (400): `RESET_REQUEST_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No password reset is in progress.'
        )

class ResultIdDuplicateError(
    BadRequestError,
    pattern='RESULT_ID_DUPLICATE'
):
    """
    BadRequestError (400): `RESULT_ID_DUPLICATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You provided a duplicate result ID.'
        )

class ResultIdEmptyError(
    BadRequestError,
    pattern='RESULT_ID_EMPTY'
):
    """
    BadRequestError (400): `RESULT_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Result ID empty.'
        )

class ResultIdInvalidError(
    BadRequestError,
    pattern='RESULT_ID_INVALID'
):
    """
    BadRequestError (400): `RESULT_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the specified result IDs is invalid.'
        )

class ResultTypeInvalidError(
    BadRequestError,
    pattern='RESULT_TYPE_INVALID'
):
    """
    BadRequestError (400): `RESULT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Result type invalid.'
        )

class ResultsTooMuchError(
    BadRequestError,
    pattern='RESULTS_TOO_MUCH'
):
    """
    BadRequestError (400): `RESULTS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Too many results were provided.'
        )

class RevoteNotAllowedError(
    BadRequestError,
    pattern='REVOTE_NOT_ALLOWED'
):
    """
    BadRequestError (400): `REVOTE_NOT_ALLOWED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot change your vote.'
        )

class RightsNotModifiedError(
    BadRequestError,
    pattern='RIGHTS_NOT_MODIFIED'
):
    """
    BadRequestError (400): `RIGHTS_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The new admin rights are equal to the old rights, no change was made.'
        )

class RingtoneInvalidError(
    BadRequestError,
    pattern='RINGTONE_INVALID'
):
    """
    BadRequestError (400): `RINGTONE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified ringtone is invalid.'
        )

class RingtoneMimeInvalidError(
    BadRequestError,
    pattern='RINGTONE_MIME_INVALID'
):
    """
    BadRequestError (400): `RINGTONE_MIME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The MIME type for the ringtone is invalid.'
        )

class RsaDecryptFailedError(
    BadRequestError,
    pattern='RSA_DECRYPT_FAILED'
):
    """
    BadRequestError (400): `RSA_DECRYPT_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Internal RSA decryption failed.'
        )

class ScheduleBotNotAllowedError(
    BadRequestError,
    pattern='SCHEDULE_BOT_NOT_ALLOWED'
):
    """
    BadRequestError (400): `SCHEDULE_BOT_NOT_ALLOWED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Bots cannot schedule messages.'
        )

class ScheduleDateInvalidError(
    BadRequestError,
    pattern='SCHEDULE_DATE_INVALID'
):
    """
    BadRequestError (400): `SCHEDULE_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid schedule date provided.'
        )

class ScheduleDateTooLateError(
    BadRequestError,
    pattern='SCHEDULE_DATE_TOO_LATE'
):
    """
    BadRequestError (400): `SCHEDULE_DATE_TOO_LATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't schedule a message this far in the future."
        )

class ScheduleStatusPrivateError(
    BadRequestError,
    pattern='SCHEDULE_STATUS_PRIVATE'
):
    """
    BadRequestError (400): `SCHEDULE_STATUS_PRIVATE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Can't schedule until user is online, if the user's last seen timestamp is hidden by their privacy settings."
        )

class ScheduleTooMuchError(
    BadRequestError,
    pattern='SCHEDULE_TOO_MUCH'
):
    """
    BadRequestError (400): `SCHEDULE_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'There are too many scheduled messages.'
        )

class ScoreInvalidError(
    BadRequestError,
    pattern='SCORE_INVALID'
):
    """
    BadRequestError (400): `SCORE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified game score is invalid.'
        )

class SearchQueryEmptyError(
    BadRequestError,
    pattern='SEARCH_QUERY_EMPTY'
):
    """
    BadRequestError (400): `SEARCH_QUERY_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The search query is empty.'
        )

class SearchWithLinkNotSupportedError(
    BadRequestError,
    pattern='SEARCH_WITH_LINK_NOT_SUPPORTED'
):
    """
    BadRequestError (400): `SEARCH_WITH_LINK_NOT_SUPPORTED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot provide a search query and an invite link at the same time.'
        )

class SecondsInvalidError(
    BadRequestError,
    pattern='SECONDS_INVALID'
):
    """
    BadRequestError (400): `SECONDS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid duration provided.'
        )

class SecureSecretRequiredError(
    BadRequestError,
    pattern='SECURE_SECRET_REQUIRED'
):
    """
    BadRequestError (400): `SECURE_SECRET_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A secure secret is required.'
        )

class SendAsPeerInvalidError(
    BadRequestError,
    pattern='SEND_AS_PEER_INVALID'
):
    """
    BadRequestError (400): `SEND_AS_PEER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You can't send messages as the specified peer."
        )

class SendMessageMediaInvalidError(
    BadRequestError,
    pattern='SEND_MESSAGE_MEDIA_INVALID'
):
    """
    BadRequestError (400): `SEND_MESSAGE_MEDIA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid media provided.'
        )

class SendMessageTypeInvalidError(
    BadRequestError,
    pattern='SEND_MESSAGE_TYPE_INVALID'
):
    """
    BadRequestError (400): `SEND_MESSAGE_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The message type is invalid.'
        )

class SessionTooFreshError(
    BadRequestError,
    pattern=re.compile(r'SESSION_TOO_FRESH_(?P<seconds>\d+)')
):
    """
    BadRequestError (400): `SESSION_TOO_FRESH_{seconds}`
    """

    def __init__(
        self,
        request,
        seconds: int = 0
    ):
        self.seconds = seconds

        super().__init__(
            request,
            f'This session was created less than 24 hours ago, try again in {seconds} seconds.'
        )

class SettingsInvalidError(
    BadRequestError,
    pattern='SETTINGS_INVALID'
):
    """
    BadRequestError (400): `SETTINGS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid settings were provided.'
        )

class Sha256HashInvalidError(
    BadRequestError,
    pattern='SHA256_HASH_INVALID'
):
    """
    BadRequestError (400): `SHA256_HASH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided SHA256 hash is invalid.'
        )

class ShortNameInvalidError(
    BadRequestError,
    pattern='SHORT_NAME_INVALID'
):
    """
    BadRequestError (400): `SHORT_NAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified short name is invalid.'
        )

class ShortNameOccupiedError(
    BadRequestError,
    pattern='SHORT_NAME_OCCUPIED'
):
    """
    BadRequestError (400): `SHORT_NAME_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified short name is already in use.'
        )

class ShortcutInvalidError(
    BadRequestError,
    pattern='SHORTCUT_INVALID'
):
    """
    BadRequestError (400): `SHORTCUT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified shortcut is invalid.'
        )

class SlotsEmptyError(
    BadRequestError,
    pattern='SLOTS_EMPTY'
):
    """
    BadRequestError (400): `SLOTS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified slot list is empty.'
        )

class SlowmodeMultiMsgsDisabledError(
    BadRequestError,
    pattern='SLOWMODE_MULTI_MSGS_DISABLED'
):
    """
    BadRequestError (400): `SLOWMODE_MULTI_MSGS_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Slowmode is enabled, you cannot forward multiple messages to this group.'
        )

class SlugInvalidError(
    BadRequestError,
    pattern='SLUG_INVALID'
):
    """
    BadRequestError (400): `SLUG_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified invoice slug is invalid.'
        )

class SmsCodeCreateFailedError(
    BadRequestError,
    pattern='SMS_CODE_CREATE_FAILED'
):
    """
    BadRequestError (400): `SMS_CODE_CREATE_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An error occurred while creating the SMS code.'
        )

class SmsjobIdInvalidError(
    BadRequestError,
    pattern='SMSJOB_ID_INVALID'
):
    """
    BadRequestError (400): `SMSJOB_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified job ID is invalid.'
        )

class SrpAInvalidError(
    BadRequestError,
    pattern='SRP_A_INVALID'
):
    """
    BadRequestError (400): `SRP_A_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified inputCheckPasswordSRP.A value is invalid.'
        )

class SrpIdInvalidError(
    BadRequestError,
    pattern='SRP_ID_INVALID'
):
    """
    BadRequestError (400): `SRP_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid SRP ID provided.'
        )

class SrpPasswordChangedError(
    BadRequestError,
    pattern='SRP_PASSWORD_CHANGED'
):
    """
    BadRequestError (400): `SRP_PASSWORD_CHANGED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Password has changed.'
        )

class StargiftInvalidError(
    BadRequestError,
    pattern='STARGIFT_INVALID'
):
    """
    BadRequestError (400): `STARGIFT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed [inputInvoiceStarGift](https://core.telegram.org/constructor/inputInvoiceStarGift) is invalid.'
        )

class StargiftUsageLimitedError(
    BadRequestError,
    pattern='STARGIFT_USAGE_LIMITED'
):
    """
    BadRequestError (400): `STARGIFT_USAGE_LIMITED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The gift is sold out.'
        )

class StarrefAwaitingEndError(
    BadRequestError,
    pattern='STARREF_AWAITING_END'
):
    """
    BadRequestError (400): `STARREF_AWAITING_END`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The previous referral program was terminated less than 24 hours ago: further changes can be made after the date specified in userFull.starref_program.end_date.'
        )

class StarrefExpiredError(
    BadRequestError,
    pattern='STARREF_EXPIRED'
):
    """
    BadRequestError (400): `STARREF_EXPIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified referral link is invalid.'
        )

class StarrefHashRevokedError(
    BadRequestError,
    pattern='STARREF_HASH_REVOKED'
):
    """
    BadRequestError (400): `STARREF_HASH_REVOKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified affiliate link was already revoked.'
        )

class StarrefPermilleInvalidError(
    BadRequestError,
    pattern='STARREF_PERMILLE_INVALID'
):
    """
    BadRequestError (400): `STARREF_PERMILLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified commission_permille is invalid: the minimum and maximum values for this parameter are contained in the [starref_min_commission_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref_max_commission_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.'
        )

class StarrefPermilleTooLowError(
    BadRequestError,
    pattern='STARREF_PERMILLE_TOO_LOW'
):
    """
    BadRequestError (400): `STARREF_PERMILLE_TOO_LOW`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified commission_permille is too low: the minimum and maximum values for this parameter are contained in the [starref_min_commission_permille](https://core.telegram.org/api/config#starref-min-commission-permille) and [starref_max_commission_permille](https://core.telegram.org/api/config#starref-max-commission-permille) client configuration parameters.'
        )

class StarsInvoiceInvalidError(
    BadRequestError,
    pattern='STARS_INVOICE_INVALID'
):
    """
    BadRequestError (400): `STARS_INVOICE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified Telegram Star invoice is invalid.'
        )

class StarsPaymentRequiredError(
    BadRequestError,
    pattern='STARS_PAYMENT_REQUIRED'
):
    """
    BadRequestError (400): `STARS_PAYMENT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'To import this chat invite link, you must first [pay for the associated Telegram Star subscription &raquo;](https://core.telegram.org/api/subscriptions#channel-subscriptions).'
        )

class StartParamEmptyError(
    BadRequestError,
    pattern='START_PARAM_EMPTY'
):
    """
    BadRequestError (400): `START_PARAM_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The start parameter is empty.'
        )

class StartParamInvalidError(
    BadRequestError,
    pattern='START_PARAM_INVALID'
):
    """
    BadRequestError (400): `START_PARAM_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Start parameter invalid.'
        )

class StartParamTooLongError(
    BadRequestError,
    pattern='START_PARAM_TOO_LONG'
):
    """
    BadRequestError (400): `START_PARAM_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Start parameter is too long.'
        )

class StickerDocumentInvalidError(
    BadRequestError,
    pattern='STICKER_DOCUMENT_INVALID'
):
    """
    BadRequestError (400): `STICKER_DOCUMENT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified sticker document is invalid.'
        )

class StickerEmojiInvalidError(
    BadRequestError,
    pattern='STICKER_EMOJI_INVALID'
):
    """
    BadRequestError (400): `STICKER_EMOJI_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Sticker emoji invalid.'
        )

class StickerFileInvalidError(
    BadRequestError,
    pattern='STICKER_FILE_INVALID'
):
    """
    BadRequestError (400): `STICKER_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Sticker file invalid.'
        )

class StickerGifDimensionsError(
    BadRequestError,
    pattern='STICKER_GIF_DIMENSIONS'
):
    """
    BadRequestError (400): `STICKER_GIF_DIMENSIONS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified video sticker has invalid dimensions.'
        )

class StickerIdInvalidError(
    BadRequestError,
    pattern='STICKER_ID_INVALID'
):
    """
    BadRequestError (400): `STICKER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided sticker ID is invalid.'
        )

class StickerInvalidError(
    BadRequestError,
    pattern='STICKER_INVALID'
):
    """
    BadRequestError (400): `STICKER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided sticker is invalid.'
        )

class StickerMimeInvalidError(
    BadRequestError,
    pattern='STICKER_MIME_INVALID'
):
    """
    BadRequestError (400): `STICKER_MIME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified sticker MIME type is invalid.'
        )

class StickerPngDimensionsError(
    BadRequestError,
    pattern='STICKER_PNG_DIMENSIONS'
):
    """
    BadRequestError (400): `STICKER_PNG_DIMENSIONS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Sticker png dimensions invalid.'
        )

class StickerPngNopngError(
    BadRequestError,
    pattern='STICKER_PNG_NOPNG'
):
    """
    BadRequestError (400): `STICKER_PNG_NOPNG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the specified stickers is not a valid PNG file.'
        )

class StickerTgsNodocError(
    BadRequestError,
    pattern='STICKER_TGS_NODOC'
):
    """
    BadRequestError (400): `STICKER_TGS_NODOC`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must send the animated sticker as a document.'
        )

class StickerTgsNotgsError(
    BadRequestError,
    pattern='STICKER_TGS_NOTGS'
):
    """
    BadRequestError (400): `STICKER_TGS_NOTGS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid TGS sticker provided.'
        )

class StickerThumbPngNopngError(
    BadRequestError,
    pattern='STICKER_THUMB_PNG_NOPNG'
):
    """
    BadRequestError (400): `STICKER_THUMB_PNG_NOPNG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Incorrect stickerset thumb file provided, PNG / WEBP expected.'
        )

class StickerThumbTgsNotgsError(
    BadRequestError,
    pattern='STICKER_THUMB_TGS_NOTGS'
):
    """
    BadRequestError (400): `STICKER_THUMB_TGS_NOTGS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Incorrect stickerset TGS thumb file provided.'
        )

class StickerVideoBigError(
    BadRequestError,
    pattern='STICKER_VIDEO_BIG'
):
    """
    BadRequestError (400): `STICKER_VIDEO_BIG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified video sticker is too big.'
        )

class StickerVideoNodocError(
    BadRequestError,
    pattern='STICKER_VIDEO_NODOC'
):
    """
    BadRequestError (400): `STICKER_VIDEO_NODOC`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must send the video sticker as a document.'
        )

class StickerVideoNowebmError(
    BadRequestError,
    pattern='STICKER_VIDEO_NOWEBM'
):
    """
    BadRequestError (400): `STICKER_VIDEO_NOWEBM`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified video sticker is not in webm format.'
        )

class StickerpackStickersTooMuchError(
    BadRequestError,
    pattern='STICKERPACK_STICKERS_TOO_MUCH'
):
    """
    BadRequestError (400): `STICKERPACK_STICKERS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "There are too many stickers in this stickerpack, you can't add any more."
        )

class StickersEmptyError(
    BadRequestError,
    pattern='STICKERS_EMPTY'
):
    """
    BadRequestError (400): `STICKERS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No sticker provided.'
        )

class StickersTooMuchError(
    BadRequestError,
    pattern='STICKERS_TOO_MUCH'
):
    """
    BadRequestError (400): `STICKERS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "There are too many stickers in this stickerpack, you can't add any more."
        )

class StickersetInvalidError(
    BadRequestError,
    pattern='STICKERSET_INVALID'
):
    """
    BadRequestError (400): `STICKERSET_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided sticker set is invalid.'
        )

class StoriesNeverCreatedError(
    BadRequestError,
    pattern='STORIES_NEVER_CREATED'
):
    """
    BadRequestError (400): `STORIES_NEVER_CREATED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This peer hasn't ever posted any stories."
        )

class StoriesTooMuchError(
    BadRequestError,
    pattern='STORIES_TOO_MUCH'
):
    """
    BadRequestError (400): `STORIES_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have hit the maximum active stories limit as specified by the [`story_expiring_limit_*` client configuration parameters](https://core.telegram.org/api/config#story-expiring-limit-default): you should buy a [Premium](https://core.telegram.org/api/premium) subscription, delete an active story, or wait for the oldest story to expire.'
        )

class StoryIdEmptyError(
    BadRequestError,
    pattern='STORY_ID_EMPTY'
):
    """
    BadRequestError (400): `STORY_ID_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You specified no story IDs.'
        )

class StoryIdInvalidError(
    BadRequestError,
    pattern='STORY_ID_INVALID'
):
    """
    BadRequestError (400): `STORY_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified story ID is invalid.'
        )

class StoryNotModifiedError(
    BadRequestError,
    pattern='STORY_NOT_MODIFIED'
):
    """
    BadRequestError (400): `STORY_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The new story information you passed is equal to the previous story information, thus it wasn't modified."
        )

class StoryPeriodInvalidError(
    BadRequestError,
    pattern='STORY_PERIOD_INVALID'
):
    """
    BadRequestError (400): `STORY_PERIOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified story period is invalid for this account.'
        )

class StorySendFloodMonthlyError(
    BadRequestError,
    pattern=re.compile(r'STORY_SEND_FLOOD_MONTHLY_(?P<seconds>\d+)')
):
    """
    BadRequestError (400): `STORY_SEND_FLOOD_MONTHLY_{seconds}`
    """

    def __init__(
        self,
        request,
        seconds: int = 0
    ):
        self.seconds = seconds

        super().__init__(
            request,
            f"You've hit the monthly story limit as specified by the [`stories_sent_monthly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-monthly-limit-default): wait {seconds} seconds before posting a new story."
        )

class StorySendFloodWeeklyError(
    BadRequestError,
    pattern=re.compile(r'STORY_SEND_FLOOD_WEEKLY_(?P<seconds>\d+)')
):
    """
    BadRequestError (400): `STORY_SEND_FLOOD_WEEKLY_{seconds}`
    """

    def __init__(
        self,
        request,
        seconds: int = 0
    ):
        self.seconds = seconds

        super().__init__(
            request,
            f"You've hit the weekly story limit as specified by the [`stories_sent_weekly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-weekly-limit-default): wait {seconds} seconds before posting a new story."
        )

class SubscriptionExportMissingError(
    BadRequestError,
    pattern='SUBSCRIPTION_EXPORT_MISSING'
):
    """
    BadRequestError (400): `SUBSCRIPTION_EXPORT_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot send a [bot subscription invoice](https://core.telegram.org/api/subscriptions#bot-subscriptions) directly, you may only create invoice links using [payments.exportInvoice](https://core.telegram.org/method/payments.exportInvoice).'
        )

class SubscriptionPeriodInvalidError(
    BadRequestError,
    pattern='SUBSCRIPTION_PERIOD_INVALID'
):
    """
    BadRequestError (400): `SUBSCRIPTION_PERIOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified subscription_pricing.period is invalid.'
        )

class SwitchPmTextEmptyError(
    BadRequestError,
    pattern='SWITCH_PM_TEXT_EMPTY'
):
    """
    BadRequestError (400): `SWITCH_PM_TEXT_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The switch_pm.text field was empty.'
        )

class SwitchWebviewUrlInvalidError(
    BadRequestError,
    pattern='SWITCH_WEBVIEW_URL_INVALID'
):
    """
    BadRequestError (400): `SWITCH_WEBVIEW_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The URL specified in switch_webview.url is invalid!'
        )

class TakeoutInvalidError(
    BadRequestError,
    pattern='TAKEOUT_INVALID'
):
    """
    BadRequestError (400): `TAKEOUT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified takeout ID is invalid.'
        )

class TakeoutRequiredError(
    BadRequestError,
    pattern='TAKEOUT_REQUIRED'
):
    """
    BadRequestError (400): `TAKEOUT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A [takeout](https://core.telegram.org/api/takeout) session needs to be initialized first, [see here &raquo; for more info](https://core.telegram.org/api/takeout).'
        )

class TaskAlreadyExistsError(
    BadRequestError,
    pattern='TASK_ALREADY_EXISTS'
):
    """
    BadRequestError (400): `TASK_ALREADY_EXISTS`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An email reset was already requested.'
        )

class TempAuthKeyAlreadyBoundError(
    BadRequestError,
    pattern='TEMP_AUTH_KEY_ALREADY_BOUND'
):
    """
    BadRequestError (400): `TEMP_AUTH_KEY_ALREADY_BOUND`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed temporary key is already bound to another **perm_auth_key_id**.'
        )

class TempAuthKeyEmptyError(
    BadRequestError,
    pattern='TEMP_AUTH_KEY_EMPTY'
):
    """
    BadRequestError (400): `TEMP_AUTH_KEY_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No temporary auth key provided.'
        )

class TermsUrlInvalidError(
    BadRequestError,
    pattern='TERMS_URL_INVALID'
):
    """
    BadRequestError (400): `TERMS_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified [invoice](https://core.telegram.org/constructor/invoice).`terms_url` is invalid.'
        )

class ThemeFileInvalidError(
    BadRequestError,
    pattern='THEME_FILE_INVALID'
):
    """
    BadRequestError (400): `THEME_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid theme file provided.'
        )

class ThemeFormatInvalidError(
    BadRequestError,
    pattern='THEME_FORMAT_INVALID'
):
    """
    BadRequestError (400): `THEME_FORMAT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid theme format provided.'
        )

class ThemeInvalidError(
    BadRequestError,
    pattern='THEME_INVALID'
):
    """
    BadRequestError (400): `THEME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid theme provided.'
        )

class ThemeMimeInvalidError(
    BadRequestError,
    pattern='THEME_MIME_INVALID'
):
    """
    BadRequestError (400): `THEME_MIME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The theme's MIME type is invalid."
        )

class ThemeParamsInvalidError(
    BadRequestError,
    pattern='THEME_PARAMS_INVALID'
):
    """
    BadRequestError (400): `THEME_PARAMS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified `theme_params` field is invalid.'
        )

class ThemeTitleInvalidError(
    BadRequestError,
    pattern='THEME_TITLE_INVALID'
):
    """
    BadRequestError (400): `THEME_TITLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified theme title is invalid.'
        )

class TimezoneInvalidError(
    BadRequestError,
    pattern='TIMEZONE_INVALID'
):
    """
    BadRequestError (400): `TIMEZONE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified timezone does not exist.'
        )

class TitleInvalidError(
    BadRequestError,
    pattern='TITLE_INVALID'
):
    """
    BadRequestError (400): `TITLE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified stickerpack title is invalid.'
        )

class TmpPasswordDisabledError(
    BadRequestError,
    pattern='TMP_PASSWORD_DISABLED'
):
    """
    BadRequestError (400): `TMP_PASSWORD_DISABLED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The temporary password is disabled.'
        )

class TmpPasswordInvalidError(
    BadRequestError,
    pattern='TMP_PASSWORD_INVALID'
):
    """
    BadRequestError (400): `TMP_PASSWORD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed tmp_password is invalid.'
        )

class ToLangInvalidError(
    BadRequestError,
    pattern='TO_LANG_INVALID'
):
    """
    BadRequestError (400): `TO_LANG_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified destination language is invalid.'
        )

class TokenEmptyError(
    BadRequestError,
    pattern='TOKEN_EMPTY'
):
    """
    BadRequestError (400): `TOKEN_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified token is empty.'
        )

class TokenInvalidError(
    BadRequestError,
    pattern='TOKEN_INVALID'
):
    """
    BadRequestError (400): `TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided token is invalid.'
        )

class TokenTypeInvalidError(
    BadRequestError,
    pattern='TOKEN_TYPE_INVALID'
):
    """
    BadRequestError (400): `TOKEN_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified token type is invalid.'
        )

class TopicCloseSeparatelyError(
    BadRequestError,
    pattern='TOPIC_CLOSE_SEPARATELY'
):
    """
    BadRequestError (400): `TOPIC_CLOSE_SEPARATELY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The `close` flag cannot be provided together with any of the other flags.'
        )

class TopicClosedError(
    BadRequestError,
    pattern='TOPIC_CLOSED'
):
    """
    BadRequestError (400): `TOPIC_CLOSED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This topic was closed, you can't send messages to it anymore."
        )

class TopicDeletedError(
    BadRequestError,
    pattern='TOPIC_DELETED'
):
    """
    BadRequestError (400): `TOPIC_DELETED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified topic was deleted.'
        )

class TopicHideSeparatelyError(
    BadRequestError,
    pattern='TOPIC_HIDE_SEPARATELY'
):
    """
    BadRequestError (400): `TOPIC_HIDE_SEPARATELY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The `hide` flag cannot be provided together with any of the other flags.'
        )

class TopicIdInvalidError(
    BadRequestError,
    pattern='TOPIC_ID_INVALID'
):
    """
    BadRequestError (400): `TOPIC_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified topic ID is invalid.'
        )

class TopicNotModifiedError(
    BadRequestError,
    pattern='TOPIC_NOT_MODIFIED'
):
    """
    BadRequestError (400): `TOPIC_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The updated topic info is equal to the current topic info, nothing was changed.'
        )

class TopicTitleEmptyError(
    BadRequestError,
    pattern='TOPIC_TITLE_EMPTY'
):
    """
    BadRequestError (400): `TOPIC_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified topic title is empty.'
        )

class TopicsEmptyError(
    BadRequestError,
    pattern='TOPICS_EMPTY'
):
    """
    BadRequestError (400): `TOPICS_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You specified no topic IDs.'
        )

class TransactionIdInvalidError(
    BadRequestError,
    pattern='TRANSACTION_ID_INVALID'
):
    """
    BadRequestError (400): `TRANSACTION_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified transaction ID is invalid.'
        )

class TranscriptionFailedError(
    BadRequestError,
    pattern='TRANSCRIPTION_FAILED'
):
    """
    BadRequestError (400): `TRANSCRIPTION_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Audio transcription failed.'
        )

class TranslateReqQuotaExceededError(
    BadRequestError,
    pattern='TRANSLATE_REQ_QUOTA_EXCEEDED'
):
    """
    BadRequestError (400): `TRANSLATE_REQ_QUOTA_EXCEEDED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Translation is currently unavailable due to a temporary server-side lack of resources.'
        )

class TtlDaysInvalidError(
    BadRequestError,
    pattern='TTL_DAYS_INVALID'
):
    """
    BadRequestError (400): `TTL_DAYS_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided TTL is invalid.'
        )

class TtlMediaInvalidError(
    BadRequestError,
    pattern='TTL_MEDIA_INVALID'
):
    """
    BadRequestError (400): `TTL_MEDIA_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid media Time To Live was provided.'
        )

class TtlPeriodInvalidError(
    BadRequestError,
    pattern='TTL_PERIOD_INVALID'
):
    """
    BadRequestError (400): `TTL_PERIOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified TTL period is invalid.'
        )

class TypesEmptyError(
    BadRequestError,
    pattern='TYPES_EMPTY'
):
    """
    BadRequestError (400): `TYPES_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'No top peer type was provided.'
        )

class UntilDateInvalidError(
    BadRequestError,
    pattern='UNTIL_DATE_INVALID'
):
    """
    BadRequestError (400): `UNTIL_DATE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid until date provided.'
        )

class UrlInvalidError(
    BadRequestError,
    pattern='URL_INVALID'
):
    """
    BadRequestError (400): `URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid URL provided.'
        )

class UsageLimitInvalidError(
    BadRequestError,
    pattern='USAGE_LIMIT_INVALID'
):
    """
    BadRequestError (400): `USAGE_LIMIT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified usage limit is invalid.'
        )

class UserAdminInvalidError(
    BadRequestError,
    pattern='USER_ADMIN_INVALID'
):
    """
    BadRequestError (400): `USER_ADMIN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're not an admin."
        )

class UserAlreadyInvitedError(
    BadRequestError,
    pattern='USER_ALREADY_INVITED'
):
    """
    BadRequestError (400): `USER_ALREADY_INVITED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You have already invited this user.'
        )

class UserAlreadyParticipantError(
    BadRequestError,
    pattern='USER_ALREADY_PARTICIPANT'
):
    """
    BadRequestError (400): `USER_ALREADY_PARTICIPANT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The user is already in the group.'
        )

class UserBannedInChannelError(
    BadRequestError,
    pattern='USER_BANNED_IN_CHANNEL'
):
    """
    BadRequestError (400): `USER_BANNED_IN_CHANNEL`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're banned from sending messages in supergroups/channels."
        )

class UserBlockedError(
    BadRequestError,
    pattern='USER_BLOCKED'
):
    """
    BadRequestError (400): `USER_BLOCKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'User blocked.'
        )

class UserBotError(
    BadRequestError,
    pattern='USER_BOT'
):
    """
    BadRequestError (400): `USER_BOT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Bots can only be admins in channels.'
        )

class UserBotInvalidError(
    BadRequestError,
    pattern='USER_BOT_INVALID'
):
    """
    BadRequestError (400): `USER_BOT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'User accounts must provide the `bot` method parameter when calling this method. If there is no such method parameter, this method can only be invoked by bot accounts.'
        )

class UserBotRequiredError(
    BadRequestError,
    pattern='USER_BOT_REQUIRED'
):
    """
    BadRequestError (400): `USER_BOT_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This method can only be called by a bot.'
        )

class UserChannelsTooMuchError(
    BadRequestError,
    pattern='USER_CHANNELS_TOO_MUCH'
):
    """
    BadRequestError (400): `USER_CHANNELS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'One of the users you tried to add is already in too many channels/supergroups.'
        )

class UserCreatorError(
    BadRequestError,
    pattern='USER_CREATOR'
):
    """
    BadRequestError (400): `USER_CREATOR`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "For channels.editAdmin: you've tried to edit the admin rights of the owner, but you're not the owner; for channels.leaveChannel: you can't leave this channel, because you're its creator."
        )

class UserGiftUnavailableError(
    BadRequestError,
    pattern='USER_GIFT_UNAVAILABLE'
):
    """
    BadRequestError (400): `USER_GIFT_UNAVAILABLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Gifts are not available in the current region ([stars_gifts_enabled](https://core.telegram.org/api/config#stars-gifts-enabled) is equal to false).'
        )

class UserIdInvalidError(
    BadRequestError,
    pattern='USER_ID_INVALID'
):
    """
    BadRequestError (400): `USER_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided user ID is invalid.'
        )

class UserInvalidError(
    BadRequestError,
    pattern='USER_INVALID'
):
    """
    BadRequestError (400): `USER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid user provided.'
        )

class UserIsBlockedError(
    BadRequestError,
    pattern='USER_IS_BLOCKED'
):
    """
    BadRequestError (400): `USER_IS_BLOCKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You were blocked by this user.'
        )

class UserIsBotError(
    BadRequestError,
    pattern='USER_IS_BOT'
):
    """
    BadRequestError (400): `USER_IS_BOT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "Bots can't send messages to other bots."
        )

class UserKickedError(
    BadRequestError,
    pattern='USER_KICKED'
):
    """
    BadRequestError (400): `USER_KICKED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'This user was kicked from this supergroup/channel.'
        )

class UserNotMutualContactError(
    BadRequestError,
    pattern='USER_NOT_MUTUAL_CONTACT'
):
    """
    BadRequestError (400): `USER_NOT_MUTUAL_CONTACT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided user is not a mutual contact.'
        )

class UserNotParticipantError(
    BadRequestError,
    pattern='USER_NOT_PARTICIPANT'
):
    """
    BadRequestError (400): `USER_NOT_PARTICIPANT`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "You're not a member of this supergroup/channel."
        )

class UserPublicMissingError(
    BadRequestError,
    pattern='USER_PUBLIC_MISSING'
):
    """
    BadRequestError (400): `USER_PUBLIC_MISSING`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Cannot generate a link to stories posted by a peer without a username.'
        )

class UserVolumeInvalidError(
    BadRequestError,
    pattern='USER_VOLUME_INVALID'
):
    """
    BadRequestError (400): `USER_VOLUME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified user volume is invalid.'
        )

class UsernameInvalidError(
    BadRequestError,
    pattern='USERNAME_INVALID'
):
    """
    BadRequestError (400): `USERNAME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided username is not valid.'
        )

class UsernameNotModifiedError(
    BadRequestError,
    pattern='USERNAME_NOT_MODIFIED'
):
    """
    BadRequestError (400): `USERNAME_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The username was not modified.'
        )

class UsernameNotOccupiedError(
    BadRequestError,
    pattern='USERNAME_NOT_OCCUPIED'
):
    """
    BadRequestError (400): `USERNAME_NOT_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided username is not occupied.'
        )

class UsernameOccupiedError(
    BadRequestError,
    pattern='USERNAME_OCCUPIED'
):
    """
    BadRequestError (400): `USERNAME_OCCUPIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The provided username is already occupied.'
        )

class UsernamePurchaseAvailableError(
    BadRequestError,
    pattern='USERNAME_PURCHASE_AVAILABLE'
):
    """
    BadRequestError (400): `USERNAME_PURCHASE_AVAILABLE`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified username can be purchased on https://fragment.com.'
        )

class UsernamesActiveTooMuchError(
    BadRequestError,
    pattern='USERNAMES_ACTIVE_TOO_MUCH'
):
    """
    BadRequestError (400): `USERNAMES_ACTIVE_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The maximum number of active usernames was reached.'
        )

class UserpicUploadRequiredError(
    BadRequestError,
    pattern='USERPIC_UPLOAD_REQUIRED'
):
    """
    BadRequestError (400): `USERPIC_UPLOAD_REQUIRED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You must have a profile picture to publish your geolocation.'
        )

class UsersTooFewError(
    BadRequestError,
    pattern='USERS_TOO_FEW'
):
    """
    BadRequestError (400): `USERS_TOO_FEW`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Not enough users (to create a chat, for example).'
        )

class UsersTooMuchError(
    BadRequestError,
    pattern='USERS_TOO_MUCH'
):
    """
    BadRequestError (400): `USERS_TOO_MUCH`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The maximum number of users has been exceeded (to create a chat, for example).'
        )

class VenueIdInvalidError(
    BadRequestError,
    pattern='VENUE_ID_INVALID'
):
    """
    BadRequestError (400): `VENUE_ID_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified venue ID is invalid.'
        )

class VideoContentTypeInvalidError(
    BadRequestError,
    pattern='VIDEO_CONTENT_TYPE_INVALID'
):
    """
    BadRequestError (400): `VIDEO_CONTENT_TYPE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "The video's content type is invalid."
        )

class VideoFileInvalidError(
    BadRequestError,
    pattern='VIDEO_FILE_INVALID'
):
    """
    BadRequestError (400): `VIDEO_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified video file is invalid.'
        )

class VideoPauseForbiddenError(
    BadRequestError,
    pattern='VIDEO_PAUSE_FORBIDDEN'
):
    """
    BadRequestError (400): `VIDEO_PAUSE_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot pause the video stream.'
        )

class VideoStopForbiddenError(
    BadRequestError,
    pattern='VIDEO_STOP_FORBIDDEN'
):
    """
    BadRequestError (400): `VIDEO_STOP_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You cannot stop the video stream.'
        )

class VideoTitleEmptyError(
    BadRequestError,
    pattern='VIDEO_TITLE_EMPTY'
):
    """
    BadRequestError (400): `VIDEO_TITLE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified video title is empty.'
        )

class VoiceMessagesForbiddenError(
    BadRequestError,
    pattern='VOICE_MESSAGES_FORBIDDEN'
):
    """
    BadRequestError (400): `VOICE_MESSAGES_FORBIDDEN`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            "This user's privacy settings forbid you from sending voice messages."
        )

class WallpaperFileInvalidError(
    BadRequestError,
    pattern='WALLPAPER_FILE_INVALID'
):
    """
    BadRequestError (400): `WALLPAPER_FILE_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified wallpaper file is invalid.'
        )

class WallpaperInvalidError(
    BadRequestError,
    pattern='WALLPAPER_INVALID'
):
    """
    BadRequestError (400): `WALLPAPER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified wallpaper is invalid.'
        )

class WallpaperMimeInvalidError(
    BadRequestError,
    pattern='WALLPAPER_MIME_INVALID'
):
    """
    BadRequestError (400): `WALLPAPER_MIME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified wallpaper MIME type is invalid.'
        )

class WallpaperNotFoundError(
    BadRequestError,
    pattern='WALLPAPER_NOT_FOUND'
):
    """
    BadRequestError (400): `WALLPAPER_NOT_FOUND`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified wallpaper could not be found.'
        )

class WcConvertUrlInvalidError(
    BadRequestError,
    pattern='WC_CONVERT_URL_INVALID'
):
    """
    BadRequestError (400): `WC_CONVERT_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'WC convert URL invalid.'
        )

class WebdocumentInvalidError(
    BadRequestError,
    pattern='WEBDOCUMENT_INVALID'
):
    """
    BadRequestError (400): `WEBDOCUMENT_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid webdocument URL provided.'
        )

class WebdocumentMimeInvalidError(
    BadRequestError,
    pattern='WEBDOCUMENT_MIME_INVALID'
):
    """
    BadRequestError (400): `WEBDOCUMENT_MIME_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Invalid webdocument mime type provided.'
        )

class WebdocumentSizeTooBigError(
    BadRequestError,
    pattern='WEBDOCUMENT_SIZE_TOO_BIG'
):
    """
    BadRequestError (400): `WEBDOCUMENT_SIZE_TOO_BIG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Webdocument is too big!'
        )

class WebdocumentUrlEmptyError(
    BadRequestError,
    pattern='WEBDOCUMENT_URL_EMPTY'
):
    """
    BadRequestError (400): `WEBDOCUMENT_URL_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed web document URL is empty.'
        )

class WebdocumentUrlInvalidError(
    BadRequestError,
    pattern='WEBDOCUMENT_URL_INVALID'
):
    """
    BadRequestError (400): `WEBDOCUMENT_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified webdocument URL is invalid.'
        )

class WebpageCurlFailedError(
    BadRequestError,
    pattern='WEBPAGE_CURL_FAILED'
):
    """
    BadRequestError (400): `WEBPAGE_CURL_FAILED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Failure while fetching the webpage with cURL.'
        )

class WebpageMediaEmptyError(
    BadRequestError,
    pattern='WEBPAGE_MEDIA_EMPTY'
):
    """
    BadRequestError (400): `WEBPAGE_MEDIA_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Webpage media empty.'
        )

class WebpageNotFoundError(
    BadRequestError,
    pattern='WEBPAGE_NOT_FOUND'
):
    """
    BadRequestError (400): `WEBPAGE_NOT_FOUND`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'A preview for the specified webpage `url` could not be generated.'
        )

class WebpageUrlInvalidError(
    BadRequestError,
    pattern='WEBPAGE_URL_INVALID'
):
    """
    BadRequestError (400): `WEBPAGE_URL_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified webpage `url` is invalid.'
        )

class WebpushAuthInvalidError(
    BadRequestError,
    pattern='WEBPUSH_AUTH_INVALID'
):
    """
    BadRequestError (400): `WEBPUSH_AUTH_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified web push authentication secret is invalid.'
        )

class WebpushKeyInvalidError(
    BadRequestError,
    pattern='WEBPUSH_KEY_INVALID'
):
    """
    BadRequestError (400): `WEBPUSH_KEY_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified web push elliptic curve Diffie-Hellman public key is invalid.'
        )

class WebpushTokenInvalidError(
    BadRequestError,
    pattern='WEBPUSH_TOKEN_INVALID'
):
    """
    BadRequestError (400): `WEBPUSH_TOKEN_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified web push token is invalid.'
        )

class YouBlockedUserError(
    BadRequestError,
    pattern='YOU_BLOCKED_USER'
):
    """
    BadRequestError (400): `YOU_BLOCKED_USER`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'You blocked this user.'
        )

class BotMethodInvalidError(
    BadRequestError,
    pattern='BOT_METHOD_INVALID'
):
    """
    BadRequestError (400): `BOT_METHOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified method cannot be used by bots.'
        )

class ConnectionDeviceModelEmptyError(
    BadRequestError,
    pattern='CONNECTION_DEVICE_MODEL_EMPTY'
):
    """
    BadRequestError (400): `CONNECTION_DEVICE_MODEL_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified device model is empty.'
        )

class ConnectionLangPackInvalidError(
    BadRequestError,
    pattern='CONNECTION_LANG_PACK_INVALID'
):
    """
    BadRequestError (400): `CONNECTION_LANG_PACK_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified language pack is empty.'
        )

class ConnectionNotInitedError(
    BadRequestError,
    pattern='CONNECTION_NOT_INITED'
):
    """
    BadRequestError (400): `CONNECTION_NOT_INITED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'Please initialize the connection using initConnection before making queries.'
        )

class ConnectionSystemEmptyError(
    BadRequestError,
    pattern='CONNECTION_SYSTEM_EMPTY'
):
    """
    BadRequestError (400): `CONNECTION_SYSTEM_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified system version is empty.'
        )

class ConnectionSystemLangCodeEmptyError(
    BadRequestError,
    pattern='CONNECTION_SYSTEM_LANG_CODE_EMPTY'
):
    """
    BadRequestError (400): `CONNECTION_SYSTEM_LANG_CODE_EMPTY`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified system language code is empty.'
        )

class FileMigrateError(
    BadRequestError,
    pattern=re.compile(r'FILE_MIGRATE_(?P<dc_id>\d+)')
):
    """
    BadRequestError (400): `FILE_MIGRATE_{dc_id}`
    """

    def __init__(
        self,
        request,
        dc_id: int = 0
    ):
        self.dc_id = dc_id

        super().__init__(
            request,
            f'The file currently being accessed is stored in DC {dc_id}, please re-send the query to that DC.'
        )

class FilePartMissingError(
    BadRequestError,
    pattern=re.compile(r'FILE_PART_(?P<index>\d+)_MISSING')
):
    """
    BadRequestError (400): `FILE_PART_{index}_MISSING`
    """

    def __init__(
        self,
        request,
        index: int = 0
    ):
        self.index = index

        super().__init__(
            request,
            f'Part {index} of the file is missing from storage. Try repeating the method call to resave the part.'
        )

class InputConstructorInvalidError(
    BadRequestError,
    pattern='INPUT_CONSTRUCTOR_INVALID'
):
    """
    BadRequestError (400): `INPUT_CONSTRUCTOR_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified TL constructor is invalid.'
        )

class InputFetchErrorError(
    BadRequestError,
    pattern='INPUT_FETCH_ERROR'
):
    """
    BadRequestError (400): `INPUT_FETCH_ERROR`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An error occurred while parsing the provided TL constructor.'
        )

class InputFetchFailError(
    BadRequestError,
    pattern='INPUT_FETCH_FAIL'
):
    """
    BadRequestError (400): `INPUT_FETCH_FAIL`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'An error occurred while parsing the provided TL constructor.'
        )

class InputLayerInvalidError(
    BadRequestError,
    pattern='INPUT_LAYER_INVALID'
):
    """
    BadRequestError (400): `INPUT_LAYER_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified layer is invalid.'
        )

class InputMethodInvalidError(
    BadRequestError,
    pattern='INPUT_METHOD_INVALID'
):
    """
    BadRequestError (400): `INPUT_METHOD_INVALID`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The specified method is invalid.'
        )

class InputRequestTooLongError(
    BadRequestError,
    pattern='INPUT_REQUEST_TOO_LONG'
):
    """
    BadRequestError (400): `INPUT_REQUEST_TOO_LONG`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The request payload is too long.'
        )

class PeerFloodError(
    BadRequestError,
    pattern='PEER_FLOOD'
):
    """
    BadRequestError (400): `PEER_FLOOD`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The current account is spamreported, you cannot execute this action, check @spambot for more info.'
        )

class StickersetNotModifiedError(
    BadRequestError,
    pattern='STICKERSET_NOT_MODIFIED'
):
    """
    BadRequestError (400): `STICKERSET_NOT_MODIFIED`
    """

    def __init__(
        self,
        request
    ):
        super().__init__(
            request,
            'The passed stickerset information is equal to the current information.'
        )

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class UniqueStarGiftValueInfo(TLObject, family='TypePaymentsUniqueStarGiftValueInfo'):
    _id = 0X512FE446
    _group_id = 0XBE5F9E5B

    def __init__(
        self,
        currency: str,
        value: int,
        initial_sale_date: int,
        initial_sale_stars: int,
        initial_sale_price: int,
        last_sale_on_fragment: bool = False,
        value_is_average: bool = False,
        last_sale_date: Optional[int] = None,
        last_sale_price: Optional[int] = None,
        floor_price: Optional[int] = None,
        average_price: Optional[int] = None,
        listed_count: Optional[int] = None,
        fragment_listed_count: Optional[int] = None,
        fragment_listed_url: Optional[str] = None
    ):

        self.currency = currency
        self.value = value
        self.initial_sale_date = initial_sale_date
        self.initial_sale_stars = initial_sale_stars
        self.initial_sale_price = initial_sale_price
        self.last_sale_on_fragment = last_sale_on_fragment
        self.value_is_average = value_is_average
        self.last_sale_date = last_sale_date
        self.last_sale_price = last_sale_price
        self.floor_price = floor_price
        self.average_price = average_price
        self.listed_count = listed_count
        self.fragment_listed_count = fragment_listed_count
        self.fragment_listed_url = fragment_listed_url

    def to_bytes(self, boxed: bool=True):
        with Writer(b'F\xe4/Q' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.last_sale_on_fragment, 1)
                flags(self.value_is_average, 6)
                writer.string(self.currency)
                writer.long(self.value)
                writer.int(self.initial_sale_date)
                writer.long(self.initial_sale_stars)
                writer.long(self.initial_sale_price)

                if flags(self.last_sale_date, 0):
                    writer.int(self.last_sale_date)

                if flags(self.last_sale_price, 0):
                    writer.long(self.last_sale_price)

                if flags(self.floor_price, 2):
                    writer.long(self.floor_price)

                if flags(self.average_price, 3):
                    writer.long(self.average_price)

                if flags(self.listed_count, 4):
                    writer.int(self.listed_count)

                if flags(self.fragment_listed_count, 5):
                    writer.int(self.fragment_listed_count)

                if flags(self.fragment_listed_url, 5):
                    writer.string(self.fragment_listed_url)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        currency_ = reader.string()
        value_ = reader.long()
        initial_sale_date_ = reader.int()
        initial_sale_stars_ = reader.long()
        initial_sale_price_ = reader.long()
        last_sale_date_ = (
            reader.int()
            if flags(0) else None
        )

        last_sale_price_ = (
            reader.long()
            if flags(0) else None
        )

        floor_price_ = (
            reader.long()
            if flags(2) else None
        )

        average_price_ = (
            reader.long()
            if flags(3) else None
        )

        listed_count_ = (
            reader.int()
            if flags(4) else None
        )

        fragment_listed_count_ = (
            reader.int()
            if flags(5) else None
        )

        fragment_listed_url_ = (
            reader.string()
            if flags(5) else None
        )

        return cls(
            currency=currency_,
            value=value_,
            initial_sale_date=initial_sale_date_,
            initial_sale_stars=initial_sale_stars_,
            initial_sale_price=initial_sale_price_,
            last_sale_on_fragment=flags(1),
            value_is_average=flags(6),
            last_sale_date=last_sale_date_,
            last_sale_price=last_sale_price_,
            floor_price=floor_price_,
            average_price=average_price_,
            listed_count=listed_count_,
            fragment_listed_count=fragment_listed_count_,
            fragment_listed_url=fragment_listed_url_
        )

TypePaymentsUniqueStarGiftValueInfo = UniqueStarGiftValueInfo

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.exported_story_link import TypeExportedStoryLink


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class ExportStoryLink(TLRequest[TypeExportedStoryLink]):
    """
    Generate a [story deep link](https://core.telegram.org/api/links#story-links) for a specific story

    Raises:
        `400`PeerIdInvalidError: The provided peer id is invalid.
        `400`StoryIdEmptyError: You specified no story IDs.
        `400`UserPublicMissingError: Cannot generate a link to stories posted by a peer without a username.

    """

    _id = 0X7B8DEF20
    _result_id = 0X6653907B

    def __init__(
        self,
        peer: 'TypeInputPeer',
        id: int
    ):

        """
        Generate a [story deep link](https://core.telegram.org/api/links#story-links) for a specific story

        Args:
            peer ('TypeInputPeer'): Peer where the story was posted
            id (int): Story ID
        """

        self.peer = peer
        self.id = id

    def to_bytes(self, boxed: bool=True):
        with Writer(b' \xef\x8d{' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.id)

            return writer.getvalue()
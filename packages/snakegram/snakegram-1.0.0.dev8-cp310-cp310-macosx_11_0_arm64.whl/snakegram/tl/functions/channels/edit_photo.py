
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ...types.updates import TypeUpdates
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_channel import TypeInputChannel
    from ...types.input_chat_photo import TypeInputChatPhoto


class EditPhoto(TLRequest[TypeUpdates]):
    """
    Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)

    **Bots can use this method**

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChannelPrivateError: You haven't joined this channel/supergroup.
        `400`ChatNotModifiedError: No changes were made to chat information because the new information you passed is identical to the current information.
        `400`FilePartsInvalidError: The number of file parts is invalid.
        `400`FileReferenceInvalidError: The specified [file reference](https://core.telegram.org/api/file_reference) is invalid.
        `400`ImageProcessFailedError: Failure while processing image.
        `400`PhotoCropSizeSmallError: Photo is too small.
        `400`PhotoExtInvalidError: The extension of the photo is invalid.
        `400`PhotoFileMissingError: Profile photo file missing.
        `400`PhotoInvalidError: Photo invalid.
        `400`StickerMimeInvalidError: The specified sticker MIME type is invalid.
        `403`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `403`ChatWriteForbiddenError: You can't write in this chat.

    """

    _id = 0XF12E57C9
    _result_id = 0XD68D29C0

    def __init__(
        self,
        channel: 'TypeInputChannel',
        photo: 'TypeInputChatPhoto'
    ):

        """
        Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)

        **Bots can use this method**

        Args:
            channel ('TypeInputChannel'): Channel/supergroup whose photo should be edited
            photo ('TypeInputChatPhoto'): New photo
        """

        self.channel = channel
        self.photo = photo

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc9W.\xf1' if boxed else b'') as writer:
            writer.object(
                self.channel,
                group_id=0X42691CEF
            )
            writer.object(
                self.photo,
                group_id=0X5610625F
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_user import TypeInputUser


class BotCancelStarsSubscription(TLRequest[bool]):
    """
    Cancel a [bot subscription](https://core.telegram.org/api/subscriptions#bot-subscriptions)

    Raises:
        `400`UserIdInvalidError: The provided user ID is invalid.

    """

    _id = 0X6DFA0622
    _result_id = 0X43B904E1

    def __init__(
        self,
        user_id: 'TypeInputUser',
        charge_id: str,
        restore: bool = False
    ):

        """
        Cancel a [bot subscription](https://core.telegram.org/api/subscriptions#bot-subscriptions)

        Args:
            user_id ('TypeInputUser'): The ID of the user whose subscription should be (un)cancelled
            charge_id (str): The provider_charge_id from the [messageActionPaymentSentMe](https://core.telegram.org/constructor/messageActionPaymentSentMe) service message sent to the bot for the first subscription payment.
            restore (bool, optional): If not set, disables autorenewal of the subscriptions, and prevents the user from reactivating the subscription once the current period expires: a subscription cancelled by the bot will have the [starsSubscription](https://core.telegram.org/constructor/starsSubscription). bot_canceled flag set.  The bot can can partially undo this operation by setting this flag: this will allow the user to reactivate the subscription.
        """

        self.user_id = user_id
        self.charge_id = charge_id
        self.restore = restore

    def to_bytes(self, boxed: bool=True):
        with Writer(b'"\x06\xfam' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.restore, 0)
                writer.object(
                    self.user_id,
                    group_id=0XB628962F
                )
                writer.string(self.charge_id)

            return writer.getvalue()
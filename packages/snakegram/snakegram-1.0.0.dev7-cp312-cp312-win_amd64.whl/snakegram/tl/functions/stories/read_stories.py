
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class ReadStories(TLRequest[List[int]]):
    """
    Mark all stories up to a certain ID as read, for a given peer; will emit an [updateReadStories](https://core.telegram.org/constructor/updateReadStories) update to all logged-in sessions.

    Raises:
        `400`MaxIdInvalidError: The provided max ID is invalid.
        `400`PeerIdInvalidError: The provided peer id is invalid.
        `400`StoriesNeverCreatedError: This peer hasn't ever posted any stories.

    """

    _id = 0XA556DAC8

    def __init__(
        self,
        peer: 'TypeInputPeer',
        max_id: int
    ):

        """
        Mark all stories up to a certain ID as read, for a given peer; will emit an [updateReadStories](https://core.telegram.org/constructor/updateReadStories) update to all logged-in sessions.

        Args:
            peer ('TypeInputPeer'): The peer whose stories should be marked as read.
            max_id (int): Mark all stories up to and including this ID as read
        """

        self.peer = peer
        self.max_id = max_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xc8\xdaV\xa5' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.max_id)

            return writer.getvalue()
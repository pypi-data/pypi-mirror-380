
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, Union, TYPE_CHECKING
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader
    from .send_message_action import TypeSendMessageAction


class DecryptedMessageActionSetMessageTTL(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XA1733AEC
    _group_id = 0XCD835435

    def __init__(
        self,
        ttl_seconds: int
    ):

        self.ttl_seconds = ttl_seconds

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xec:s\xa1' if boxed else b'') as writer:
            writer.int(self.ttl_seconds)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        ttl_seconds_ = reader.int()

        return cls(
            ttl_seconds=ttl_seconds_
        )

class DecryptedMessageActionReadMessages(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XC4F40BE
    _group_id = 0XCD835435

    def __init__(
        self,
        random_ids: List[int]
    ):

        self.random_ids = random_ids

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xbe@O\x0c' if boxed else b'') as writer:
            writer.vector(
                self.random_ids,
                writer.long
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        random_ids_ = reader.vector(
            reader.long
        )

        return cls(
            random_ids=random_ids_
        )

class DecryptedMessageActionDeleteMessages(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0X65614304
    _group_id = 0XCD835435

    def __init__(
        self,
        random_ids: List[int]
    ):

        self.random_ids = random_ids

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x04Cae' if boxed else b'') as writer:
            writer.vector(
                self.random_ids,
                writer.long
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        random_ids_ = reader.vector(
            reader.long
        )

        return cls(
            random_ids=random_ids_
        )

class DecryptedMessageActionScreenshotMessages(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0X8AC1F475
    _group_id = 0XCD835435

    def __init__(
        self,
        random_ids: List[int]
    ):

        self.random_ids = random_ids

    def to_bytes(self, boxed: bool=True):
        with Writer(b'u\xf4\xc1\x8a' if boxed else b'') as writer:
            writer.vector(
                self.random_ids,
                writer.long
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        random_ids_ = reader.vector(
            reader.long
        )

        return cls(
            random_ids=random_ids_
        )

class DecryptedMessageActionFlushHistory(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0X6719E45C
    _group_id = 0XCD835435


    def to_bytes(self, boxed: bool=True):
        return b'\\\xe4\x19g' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class DecryptedMessageActionResend(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0X511110B0
    _group_id = 0XCD835435

    def __init__(
        self,
        start_seq_no: int,
        end_seq_no: int
    ):

        self.start_seq_no = start_seq_no
        self.end_seq_no = end_seq_no

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xb0\x10\x11Q' if boxed else b'') as writer:
            writer.int(self.start_seq_no)
            writer.int(self.end_seq_no)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        start_seq_no_ = reader.int()
        end_seq_no_ = reader.int()

        return cls(
            start_seq_no=start_seq_no_,
            end_seq_no=end_seq_no_
        )

class DecryptedMessageActionNotifyLayer(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XF3048883
    _group_id = 0XCD835435

    def __init__(
        self,
        layer: int
    ):

        self.layer = layer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x83\x88\x04\xf3' if boxed else b'') as writer:
            writer.int(self.layer)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        layer_ = reader.int()

        return cls(
            layer=layer_
        )

class DecryptedMessageActionTyping(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XCCB27641
    _group_id = 0XCD835435

    def __init__(
        self,
        action: 'TypeSendMessageAction'
    ):

        self.action = action

    def to_bytes(self, boxed: bool=True):
        with Writer(b'Av\xb2\xcc' if boxed else b'') as writer:
            writer.object(
                self.action,
                group_id=0X49241DFC
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        action_ = reader.object(
            group_id=0X49241DFC
        )

        return cls(
            action=action_
        )

class DecryptedMessageActionRequestKey(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XF3C9611B
    _group_id = 0XCD835435

    def __init__(
        self,
        exchange_id: int,
        g_a: bytes
    ):

        self.exchange_id = exchange_id
        self.g_a = g_a

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x1ba\xc9\xf3' if boxed else b'') as writer:
            writer.long(self.exchange_id)
            writer.bytes(self.g_a)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        exchange_id_ = reader.long()
        g_a_ = reader.bytes()

        return cls(
            exchange_id=exchange_id_,
            g_a=g_a_
        )

class DecryptedMessageActionAcceptKey(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0X6FE1735B
    _group_id = 0XCD835435

    def __init__(
        self,
        exchange_id: int,
        g_b: bytes,
        key_fingerprint: int
    ):

        self.exchange_id = exchange_id
        self.g_b = g_b
        self.key_fingerprint = key_fingerprint

    def to_bytes(self, boxed: bool=True):
        with Writer(b'[s\xe1o' if boxed else b'') as writer:
            writer.long(self.exchange_id)
            writer.bytes(self.g_b)
            writer.long(self.key_fingerprint)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        exchange_id_ = reader.long()
        g_b_ = reader.bytes()
        key_fingerprint_ = reader.long()

        return cls(
            exchange_id=exchange_id_,
            g_b=g_b_,
            key_fingerprint=key_fingerprint_
        )

class DecryptedMessageActionAbortKey(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XDD05EC6B
    _group_id = 0XCD835435

    def __init__(
        self,
        exchange_id: int
    ):

        self.exchange_id = exchange_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'k\xec\x05\xdd' if boxed else b'') as writer:
            writer.long(self.exchange_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        exchange_id_ = reader.long()

        return cls(
            exchange_id=exchange_id_
        )

class DecryptedMessageActionCommitKey(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XEC2E0B9B
    _group_id = 0XCD835435

    def __init__(
        self,
        exchange_id: int,
        key_fingerprint: int
    ):

        self.exchange_id = exchange_id
        self.key_fingerprint = key_fingerprint

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x9b\x0b.\xec' if boxed else b'') as writer:
            writer.long(self.exchange_id)
            writer.long(self.key_fingerprint)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        exchange_id_ = reader.long()
        key_fingerprint_ = reader.long()

        return cls(
            exchange_id=exchange_id_,
            key_fingerprint=key_fingerprint_
        )

class DecryptedMessageActionNoop(TLObject, family='TypeDecryptedMessageAction'):
    _id = 0XA82FDD63
    _group_id = 0XCD835435


    def to_bytes(self, boxed: bool=True):
        return b'c\xdd/\xa8' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeDecryptedMessageAction = Union[
    DecryptedMessageActionSetMessageTTL,
    DecryptedMessageActionReadMessages,
    DecryptedMessageActionDeleteMessages,
    DecryptedMessageActionScreenshotMessages,
    DecryptedMessageActionFlushHistory,
    DecryptedMessageActionResend,
    DecryptedMessageActionNotifyLayer,
    DecryptedMessageActionTyping,
    DecryptedMessageActionRequestKey,
    DecryptedMessageActionAcceptKey,
    DecryptedMessageActionAbortKey,
    DecryptedMessageActionCommitKey,
    DecryptedMessageActionNoop
]
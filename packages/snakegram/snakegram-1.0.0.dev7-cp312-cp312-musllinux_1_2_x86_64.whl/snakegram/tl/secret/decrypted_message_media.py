
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING, Union
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .photo_size import TypePhotoSize
    from .document_attribute import TypeDocumentAttribute
    from ...gadgets.byteutils import Reader


class DecryptedMessageMediaEmpty(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X89F5C4A
    _group_id = 0X403DEA17


    def to_bytes(self, boxed: bool=True):
        return b'J\\\x9f\x08' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class DecryptedMessageMediaPhoto8(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X32798A8C
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        w: int,
        h: int,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.w = w
        self.h = h
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x8c\x8ay2' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            w=w_,
            h=h_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaVideo8(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X4CEE6EF3
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        duration: int,
        w: int,
        h: int,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.duration = duration
        self.w = w
        self.h = h
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf3n\xeeL' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.int(self.duration)
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        duration_ = reader.int()
        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            duration=duration_,
            w=w_,
            h=h_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaGeoPoint(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X35480A59
    _group_id = 0X403DEA17

    def __init__(
        self,
        lat: float,
        long: float
    ):

        self.lat = lat
        self.long = long

    def to_bytes(self, boxed: bool=True):
        with Writer(b'Y\nH5' if boxed else b'') as writer:
            writer.double(self.lat)
            writer.double(self.long)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        lat_ = reader.double()
        long_ = reader.double()

        return cls(
            lat=lat_,
            long=long_
        )

class DecryptedMessageMediaContact(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X588A0A97
    _group_id = 0X403DEA17

    def __init__(
        self,
        phone_number: str,
        first_name: str,
        last_name: str,
        user_id: int
    ):

        self.phone_number = phone_number
        self.first_name = first_name
        self.last_name = last_name
        self.user_id = user_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x97\n\x8aX' if boxed else b'') as writer:
            writer.string(self.phone_number)
            writer.string(self.first_name)
            writer.string(self.last_name)
            writer.int(self.user_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        phone_number_ = reader.string()
        first_name_ = reader.string()
        last_name_ = reader.string()
        user_id_ = reader.int()

        return cls(
            phone_number=phone_number_,
            first_name=first_name_,
            last_name=last_name_,
            user_id=user_id_
        )

class DecryptedMessageMediaDocument8(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0XB095434B
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        file_name: str,
        mime_type: str,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.file_name = file_name
        self.mime_type = mime_type
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b'KC\x95\xb0' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.string(self.file_name)
            writer.string(self.mime_type)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        file_name_ = reader.string()
        mime_type_ = reader.string()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            file_name=file_name_,
            mime_type=mime_type_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaAudio8(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X6080758F
    _group_id = 0X403DEA17

    def __init__(
        self,
        duration: int,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.duration = duration
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x8fu\x80`' if boxed else b'') as writer:
            writer.int(self.duration)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        duration_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            duration=duration_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaVideo23(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X524A415D
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        duration: int,
        mime_type: str,
        w: int,
        h: int,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.duration = duration
        self.mime_type = mime_type
        self.w = w
        self.h = h
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b']AJR' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.int(self.duration)
            writer.string(self.mime_type)
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        duration_ = reader.int()
        mime_type_ = reader.string()
        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            duration=duration_,
            mime_type=mime_type_,
            w=w_,
            h=h_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaAudio(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X57E0A9CB
    _group_id = 0X403DEA17

    def __init__(
        self,
        duration: int,
        mime_type: str,
        size: int,
        key: bytes,
        iv: bytes
    ):

        self.duration = duration
        self.mime_type = mime_type
        self.size = size
        self.key = key
        self.iv = iv

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xcb\xa9\xe0W' if boxed else b'') as writer:
            writer.int(self.duration)
            writer.string(self.mime_type)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        duration_ = reader.int()
        mime_type_ = reader.string()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()

        return cls(
            duration=duration_,
            mime_type=mime_type_,
            size=size_,
            key=key_,
            iv=iv_
        )

class DecryptedMessageMediaExternalDocument(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0XFA95B0DD
    _group_id = 0X403DEA17

    def __init__(
        self,
        id: int,
        access_hash: int,
        date: int,
        mime_type: str,
        size: int,
        thumb: 'TypePhotoSize',
        dc_id: int,
        attributes: List['TypeDocumentAttribute']
    ):

        self.id = id
        self.access_hash = access_hash
        self.date = date
        self.mime_type = mime_type
        self.size = size
        self.thumb = thumb
        self.dc_id = dc_id
        self.attributes = attributes

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xdd\xb0\x95\xfa' if boxed else b'') as writer:
            writer.long(self.id)
            writer.long(self.access_hash)
            writer.int(self.date)
            writer.string(self.mime_type)
            writer.int(self.size)
            writer.object(
                self.thumb,
                group_id=0X478D00B0
            )
            writer.int(self.dc_id)
            writer.vector(
                self.attributes,
                lambda value: writer.object(
                    value,
                    group_id=0X9EBF3A46
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        id_ = reader.long()
        access_hash_ = reader.long()
        date_ = reader.int()
        mime_type_ = reader.string()
        size_ = reader.int()
        thumb_ = reader.object(
            group_id=0X478D00B0
        )

        dc_id_ = reader.int()
        attributes_ = reader.vector(
            lambda: reader.object(
                group_id=0X9EBF3A46
            )
        )

        return cls(
            id=id_,
            access_hash=access_hash_,
            date=date_,
            mime_type=mime_type_,
            size=size_,
            thumb=thumb_,
            dc_id=dc_id_,
            attributes=attributes_
        )

class DecryptedMessageMediaPhoto(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0XF1FA8D78
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        w: int,
        h: int,
        size: int,
        key: bytes,
        iv: bytes,
        caption: str
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.w = w
        self.h = h
        self.size = size
        self.key = key
        self.iv = iv
        self.caption = caption

    def to_bytes(self, boxed: bool=True):
        with Writer(b'x\x8d\xfa\xf1' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)
            writer.string(self.caption)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()
        caption_ = reader.string()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            w=w_,
            h=h_,
            size=size_,
            key=key_,
            iv=iv_,
            caption=caption_
        )

class DecryptedMessageMediaVideo(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X970C8C0E
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        duration: int,
        mime_type: str,
        w: int,
        h: int,
        size: int,
        key: bytes,
        iv: bytes,
        caption: str
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.duration = duration
        self.mime_type = mime_type
        self.w = w
        self.h = h
        self.size = size
        self.key = key
        self.iv = iv
        self.caption = caption

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x0e\x8c\x0c\x97' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.int(self.duration)
            writer.string(self.mime_type)
            writer.int(self.w)
            writer.int(self.h)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)
            writer.string(self.caption)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        duration_ = reader.int()
        mime_type_ = reader.string()
        w_ = reader.int()
        h_ = reader.int()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()
        caption_ = reader.string()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            duration=duration_,
            mime_type=mime_type_,
            w=w_,
            h=h_,
            size=size_,
            key=key_,
            iv=iv_,
            caption=caption_
        )

class DecryptedMessageMediaDocument46(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X7AFE8AE2
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        mime_type: str,
        size: int,
        key: bytes,
        iv: bytes,
        attributes: List['TypeDocumentAttribute'],
        caption: str
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.mime_type = mime_type
        self.size = size
        self.key = key
        self.iv = iv
        self.attributes = attributes
        self.caption = caption

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xe2\x8a\xfez' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.string(self.mime_type)
            writer.int(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)
            writer.vector(
                self.attributes,
                lambda value: writer.object(
                    value,
                    group_id=0X9EBF3A46
                )
            )
            writer.string(self.caption)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        mime_type_ = reader.string()
        size_ = reader.int()
        key_ = reader.bytes()
        iv_ = reader.bytes()
        attributes_ = reader.vector(
            lambda: reader.object(
                group_id=0X9EBF3A46
            )
        )

        caption_ = reader.string()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            mime_type=mime_type_,
            size=size_,
            key=key_,
            iv=iv_,
            attributes=attributes_,
            caption=caption_
        )

class DecryptedMessageMediaVenue(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X8A0DF56F
    _group_id = 0X403DEA17

    def __init__(
        self,
        lat: float,
        long: float,
        title: str,
        address: str,
        provider: str,
        venue_id: str
    ):

        self.lat = lat
        self.long = long
        self.title = title
        self.address = address
        self.provider = provider
        self.venue_id = venue_id

    def to_bytes(self, boxed: bool=True):
        with Writer(b'o\xf5\r\x8a' if boxed else b'') as writer:
            writer.double(self.lat)
            writer.double(self.long)
            writer.string(self.title)
            writer.string(self.address)
            writer.string(self.provider)
            writer.string(self.venue_id)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        lat_ = reader.double()
        long_ = reader.double()
        title_ = reader.string()
        address_ = reader.string()
        provider_ = reader.string()
        venue_id_ = reader.string()

        return cls(
            lat=lat_,
            long=long_,
            title=title_,
            address=address_,
            provider=provider_,
            venue_id=venue_id_
        )

class DecryptedMessageMediaWebPage(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0XE50511D8
    _group_id = 0X403DEA17

    def __init__(
        self,
        url: str
    ):

        self.url = url

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd8\x11\x05\xe5' if boxed else b'') as writer:
            writer.string(self.url)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        url_ = reader.string()

        return cls(
            url=url_
        )

class DecryptedMessageMediaDocument(TLObject, family='TypeDecryptedMessageMedia'):
    _id = 0X6ABD9782
    _group_id = 0X403DEA17

    def __init__(
        self,
        thumb: bytes,
        thumb_w: int,
        thumb_h: int,
        mime_type: str,
        size: int,
        key: bytes,
        iv: bytes,
        attributes: List['TypeDocumentAttribute'],
        caption: str
    ):

        self.thumb = thumb
        self.thumb_w = thumb_w
        self.thumb_h = thumb_h
        self.mime_type = mime_type
        self.size = size
        self.key = key
        self.iv = iv
        self.attributes = attributes
        self.caption = caption

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x82\x97\xbdj' if boxed else b'') as writer:
            writer.bytes(self.thumb)
            writer.int(self.thumb_w)
            writer.int(self.thumb_h)
            writer.string(self.mime_type)
            writer.long(self.size)
            writer.bytes(self.key)
            writer.bytes(self.iv)
            writer.vector(
                self.attributes,
                lambda value: writer.object(
                    value,
                    group_id=0X9EBF3A46
                )
            )
            writer.string(self.caption)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        thumb_ = reader.bytes()
        thumb_w_ = reader.int()
        thumb_h_ = reader.int()
        mime_type_ = reader.string()
        size_ = reader.long()
        key_ = reader.bytes()
        iv_ = reader.bytes()
        attributes_ = reader.vector(
            lambda: reader.object(
                group_id=0X9EBF3A46
            )
        )

        caption_ = reader.string()

        return cls(
            thumb=thumb_,
            thumb_w=thumb_w_,
            thumb_h=thumb_h_,
            mime_type=mime_type_,
            size=size_,
            key=key_,
            iv=iv_,
            attributes=attributes_,
            caption=caption_
        )

TypeDecryptedMessageMedia = Union[
    DecryptedMessageMediaEmpty,
    DecryptedMessageMediaPhoto8,
    DecryptedMessageMediaVideo8,
    DecryptedMessageMediaGeoPoint,
    DecryptedMessageMediaContact,
    DecryptedMessageMediaDocument8,
    DecryptedMessageMediaAudio8,
    DecryptedMessageMediaVideo23,
    DecryptedMessageMediaAudio,
    DecryptedMessageMediaExternalDocument,
    DecryptedMessageMediaPhoto,
    DecryptedMessageMediaVideo,
    DecryptedMessageMediaDocument46,
    DecryptedMessageMediaVenue,
    DecryptedMessageMediaWebPage,
    DecryptedMessageMediaDocument
]
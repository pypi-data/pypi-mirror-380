
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stories.stories import TypeStoriesStories


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class GetStoriesArchive(TLRequest[TypeStoriesStories]):
    """
    Fetch the [story archive](https://core.telegram.org/api/stories#pinned-or-archived-stories) of a peer we control.

    Raises:
        `400`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0XB4352016
    _result_id = 0X596CD06C

    def __init__(
        self,
        peer: 'TypeInputPeer',
        offset_id: int,
        limit: int
    ):

        """
        Fetch the [story archive](https://core.telegram.org/api/stories#pinned-or-archived-stories) of a peer we control.

        Args:
            peer ('TypeInputPeer'): Peer whose archived stories should be fetched
            offset_id (int): [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
            limit (int): Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
        """

        self.peer = peer
        self.offset_id = offset_id
        self.limit = limit

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x16 5\xb4' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )
            writer.int(self.offset_id)
            writer.int(self.limit)

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from .post_address import TypePostAddress
    from ...gadgets.byteutils import Reader


class PaymentRequestedInfo(TLObject, family='TypePaymentRequestedInfo'):
    """
    Order info provided by the user
    """

    _id = 0X909C3F94
    _group_id = 0X89AE5563

    def __init__(
        self,
        name: Optional[str] = None,
        phone: Optional[str] = None,
        email: Optional[str] = None,
        shipping_address: Optional['TypePostAddress'] = None
    ):

        """
        Order info provided by the user

        Args:
            name (Optional[str], optional): User's full name
            phone (Optional[str], optional): User's phone number
            email (Optional[str], optional): User's email address
            shipping_address (Optional['TypePostAddress'], optional): User's shipping address
        """

        self.name = name
        self.phone = phone
        self.email = email
        self.shipping_address = shipping_address

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x94?\x9c\x90' if boxed else b'') as writer:
            with writer.flag() as flags:

                if flags(self.name, 0):
                    writer.string(self.name)

                if flags(self.phone, 1):
                    writer.string(self.phone)

                if flags(self.email, 2):
                    writer.string(self.email)

                if flags(self.shipping_address, 3):
                    writer.object(
                        self.shipping_address,
                        group_id=0X7BF3C2EF
                    )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        name_ = (
            reader.string()
            if flags(0) else None
        )

        phone_ = (
            reader.string()
            if flags(1) else None
        )

        email_ = (
            reader.string()
            if flags(2) else None
        )

        shipping_address_ = (
            reader.object(
                group_id=0X7BF3C2EF
            )
            if flags(3) else None
        )

        return cls(
            name=name_,
            phone=phone_,
            email=email_,
            shipping_address=shipping_address_
        )

TypePaymentRequestedInfo = PaymentRequestedInfo
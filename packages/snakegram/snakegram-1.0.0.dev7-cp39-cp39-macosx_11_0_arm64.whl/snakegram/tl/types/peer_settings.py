
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, Optional
from ...gadgets.tlobject import TLObject
from ...gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ...gadgets.byteutils import Reader


class PeerSettings(TLObject, family='TypePeerSettings'):
    """
    List of actions that are possible when interacting with this user, to be shown as suggested actions in the [chat action bar](https://core.telegram.org/api/action-bar), see [here](https://core.telegram.org/api/action-bar) for more info.
    """

    _id = 0XF47741F7
    _group_id = 0XF43C8196

    def __init__(
        self,
        report_spam: bool = False,
        add_contact: bool = False,
        block_contact: bool = False,
        share_contact: bool = False,
        need_contacts_exception: bool = False,
        report_geo: bool = False,
        autoarchived: bool = False,
        invite_members: bool = False,
        request_chat_broadcast: bool = False,
        business_bot_paused: bool = False,
        business_bot_can_reply: bool = False,
        geo_distance: Optional[int] = None,
        request_chat_title: Optional[str] = None,
        request_chat_date: Optional[int] = None,
        business_bot_id: Optional[int] = None,
        business_bot_manage_url: Optional[str] = None,
        charge_paid_message_stars: Optional[int] = None,
        registration_month: Optional[str] = None,
        phone_country: Optional[str] = None,
        name_change_date: Optional[int] = None,
        photo_change_date: Optional[int] = None
    ):

        """
        List of actions that are possible when interacting with this user, to be shown as suggested actions in the [chat action bar](https://core.telegram.org/api/action-bar), see [here](https://core.telegram.org/api/action-bar) for more info.

        Args:
            report_spam (bool, optional): Whether we can still report the user for spam
            add_contact (bool, optional): Whether we can add the user as contact
            block_contact (bool, optional): Whether we can block the user
            share_contact (bool, optional): Whether we can share the user's contact
            need_contacts_exception (bool, optional): Whether a special exception for contacts is needed
            report_geo (bool, optional): Whether we can report a geogroup as irrelevant for this location
            autoarchived (bool, optional): Whether this peer was automatically archived according to [privacy settings](https://core.telegram.org/constructor/globalPrivacySettings) and can be unarchived
            invite_members (bool, optional): If set, this is a recently created group chat to which new members can be invited
            request_chat_broadcast (bool, optional): This flag is set if request_chat_title and request_chat_date fields are set and the [join request](https://core.telegram.org/api/invites#join-requests) is related to a channel (otherwise if only the request fields are set, the [join request](https://core.telegram.org/api/invites#join-requests) is related to a chat).
            business_bot_paused (bool, optional): This flag is set if both business_bot_id and business_bot_manage_url are set and all [connected business bots](https://core.telegram.org/api/business#connected-bots) were paused in this chat using [account.toggleConnectedBotPaused](https://core.telegram.org/method/account.toggleConnectedBotPaused).
            business_bot_can_reply (bool, optional): This flag is set if both business_bot_id and business_bot_manage_url are set and [connected business bots](https://core.telegram.org/api/business#connected-bots) can reply to messages in this chat, as specified by the settings during [initial configuration](https://core.telegram.org/api/business#connected-bots).
            geo_distance (Optional[int], optional): Distance in meters between us and this peer
            request_chat_title (Optional[str], optional): If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the chat/channel's title.
            request_chat_date (Optional[int], optional): If set, this is a private chat with an administrator of a chat or channel to which the user sent a join request, and this field contains the timestamp when the [join request](https://core.telegram.org/api/invites#join-requests) was sent.
            business_bot_id (Optional[int], optional): Contains the ID of the [business bot](https://core.telegram.org/api/business#connected-bots) managing this chat, used to display info about the bot in the action bar.
            business_bot_manage_url (Optional[str], optional): Contains a [deep link](https://core.telegram.org/api/links), used to open a management menu in the business bot. This flag is set if and only if business_bot_id is set.
            charge_paid_message_stars (Optional[int], optional): ...
            registration_month (Optional[str], optional): ...
            phone_country (Optional[str], optional): ...
            name_change_date (Optional[int], optional): ...
            photo_change_date (Optional[int], optional): ...
        """

        self.report_spam = report_spam
        self.add_contact = add_contact
        self.block_contact = block_contact
        self.share_contact = share_contact
        self.need_contacts_exception = need_contacts_exception
        self.report_geo = report_geo
        self.autoarchived = autoarchived
        self.invite_members = invite_members
        self.request_chat_broadcast = request_chat_broadcast
        self.business_bot_paused = business_bot_paused
        self.business_bot_can_reply = business_bot_can_reply
        self.geo_distance = geo_distance
        self.request_chat_title = request_chat_title
        self.request_chat_date = request_chat_date
        self.business_bot_id = business_bot_id
        self.business_bot_manage_url = business_bot_manage_url
        self.charge_paid_message_stars = charge_paid_message_stars
        self.registration_month = registration_month
        self.phone_country = phone_country
        self.name_change_date = name_change_date
        self.photo_change_date = photo_change_date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf7Aw\xf4' if boxed else b'') as writer:
            with writer.flag() as flags:
                flags(self.report_spam, 0)
                flags(self.add_contact, 1)
                flags(self.block_contact, 2)
                flags(self.share_contact, 3)
                flags(self.need_contacts_exception, 4)
                flags(self.report_geo, 5)
                flags(self.autoarchived, 7)
                flags(self.invite_members, 8)
                flags(self.request_chat_broadcast, 10)
                flags(self.business_bot_paused, 11)
                flags(self.business_bot_can_reply, 12)

                if flags(self.geo_distance, 6):
                    writer.int(self.geo_distance)

                if flags(self.request_chat_title, 9):
                    writer.string(self.request_chat_title)

                if flags(self.request_chat_date, 9):
                    writer.int(self.request_chat_date)

                if flags(self.business_bot_id, 13):
                    writer.long(self.business_bot_id)

                if flags(self.business_bot_manage_url, 13):
                    writer.string(self.business_bot_manage_url)

                if flags(self.charge_paid_message_stars, 14):
                    writer.long(self.charge_paid_message_stars)

                if flags(self.registration_month, 15):
                    writer.string(self.registration_month)

                if flags(self.phone_country, 16):
                    writer.string(self.phone_country)

                if flags(self.name_change_date, 17):
                    writer.int(self.name_change_date)

                if flags(self.photo_change_date, 18):
                    writer.int(self.photo_change_date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        flags = reader.flag()
        geo_distance_ = (
            reader.int()
            if flags(6) else None
        )

        request_chat_title_ = (
            reader.string()
            if flags(9) else None
        )

        request_chat_date_ = (
            reader.int()
            if flags(9) else None
        )

        business_bot_id_ = (
            reader.long()
            if flags(13) else None
        )

        business_bot_manage_url_ = (
            reader.string()
            if flags(13) else None
        )

        charge_paid_message_stars_ = (
            reader.long()
            if flags(14) else None
        )

        registration_month_ = (
            reader.string()
            if flags(15) else None
        )

        phone_country_ = (
            reader.string()
            if flags(16) else None
        )

        name_change_date_ = (
            reader.int()
            if flags(17) else None
        )

        photo_change_date_ = (
            reader.int()
            if flags(18) else None
        )

        return cls(
            report_spam=flags(0),
            add_contact=flags(1),
            block_contact=flags(2),
            share_contact=flags(3),
            need_contacts_exception=flags(4),
            report_geo=flags(5),
            autoarchived=flags(7),
            invite_members=flags(8),
            request_chat_broadcast=flags(10),
            business_bot_paused=flags(11),
            business_bot_can_reply=flags(12),
            geo_distance=geo_distance_,
            request_chat_title=request_chat_title_,
            request_chat_date=request_chat_date_,
            business_bot_id=business_bot_id_,
            business_bot_manage_url=business_bot_manage_url_,
            charge_paid_message_stars=charge_paid_message_stars_,
            registration_month=registration_month_,
            phone_country=phone_country_,
            name_change_date=name_change_date_,
            photo_change_date=photo_change_date_
        )

TypePeerSettings = PeerSettings
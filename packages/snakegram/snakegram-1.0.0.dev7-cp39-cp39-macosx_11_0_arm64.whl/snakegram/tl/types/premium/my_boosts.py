
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING, List
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..chat import TypeChat
    from ..user import TypeUser
    from ..my_boost import TypeMyBoost
    from ....gadgets.byteutils import Reader


class MyBoosts(TLObject, family='TypePremiumMyBoosts'):
    """
    A list of peers we are currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left.
    """

    _id = 0X9AE228E2
    _group_id = 0XE8B6B21C

    def __init__(
        self,
        my_boosts: List['TypeMyBoost'],
        chats: List['TypeChat'],
        users: List['TypeUser']
    ):

        """
        A list of peers we are currently [boosting](https://core.telegram.org/api/boost), and how many [boost slots](https://core.telegram.org/api/boost) we have left.

        Args:
            my_boosts (List['TypeMyBoost']): Info about boosted peers and remaining boost slots.
            chats (List['TypeChat']): Referenced chats
            users (List['TypeUser']): Referenced users
        """

        self.my_boosts = my_boosts
        self.chats = chats
        self.users = users

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xe2(\xe2\x9a' if boxed else b'') as writer:
            writer.vector(
                self.my_boosts,
                lambda value: writer.object(
                    value,
                    group_id=0X99626BD3
                )
            )
            writer.vector(
                self.chats,
                lambda value: writer.object(
                    value,
                    group_id=0X73A5C0D9
                )
            )
            writer.vector(
                self.users,
                lambda value: writer.object(
                    value,
                    group_id=0X9BABE43A
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        my_boosts_ = reader.vector(
            lambda: reader.object(
                group_id=0X99626BD3
            )
        )

        chats_ = reader.vector(
            lambda: reader.object(
                group_id=0X73A5C0D9
            )
        )

        users_ = reader.vector(
            lambda: reader.object(
                group_id=0X9BABE43A
            )
        )

        return cls(
            my_boosts=my_boosts_,
            chats=chats_,
            users=users_
        )

TypePremiumMyBoosts = MyBoosts
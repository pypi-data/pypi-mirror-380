
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stories.peer_stories import TypeStoriesPeerStories


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class GetPeerStories(TLRequest[TypeStoriesPeerStories]):
    """
    Fetch the full active [story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer.

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`ChannelPrivateError: You haven't joined this channel/supergroup.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `400`PeerIdInvalidError: The provided peer id is invalid.

    """

    _id = 0X2C4ADA50
    _result_id = 0XF45D1F58

    def __init__(
        self,
        peer: 'TypeInputPeer'
    ):

        """
        Fetch the full active [story list](https://core.telegram.org/api/stories#watching-stories) of a specific peer.

        Args:
            peer ('TypeInputPeer'): Peer whose stories should be fetched
        """

        self.peer = peer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'P\xdaJ,' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )

            return writer.getvalue()
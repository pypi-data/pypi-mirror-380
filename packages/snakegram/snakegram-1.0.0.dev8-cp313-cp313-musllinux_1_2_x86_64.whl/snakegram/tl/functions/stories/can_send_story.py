
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.stories.can_send_story_count import TypeStoriesCanSendStoryCount


if TYPE_CHECKING:
    from ...types.input_peer import TypeInputPeer


class CanSendStory(TLRequest[TypeStoriesCanSendStoryCount]):
    """
    Check whether we can post stories as the specified peer.

    Raises:
        `400`BoostsRequiredError: The specified channel must first be [boosted by its users](https://core.telegram.org/api/boost) in order to perform this action.
        `400`ChatAdminRequiredError: You must be an admin in this chat to do this.
        `400`PeerIdInvalidError: The provided peer id is invalid.
        `400`PremiumAccountRequiredError: A premium account is required to execute this action.
        `400`StoriesTooMuchError: You have hit the maximum active stories limit as specified by the [`story_expiring_limit_*` client configuration parameters](https://core.telegram.org/api/config#story-expiring-limit-default): you should buy a [Premium](https://core.telegram.org/api/premium) subscription, delete an active story, or wait for the oldest story to expire.
        `400`StorySendFloodMonthlyError: You've hit the monthly story limit as specified by the [`stories_sent_monthly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-monthly-limit-default): wait {seconds} seconds before posting a new story.
        `400`StorySendFloodWeeklyError: You've hit the weekly story limit as specified by the [`stories_sent_weekly_limit_*` client configuration parameters](https://core.telegram.org/api/config#stories-sent-weekly-limit-default): wait {seconds} seconds before posting a new story.

    """

    _id = 0X30EB63F0
    _result_id = 0X20423CDA

    def __init__(
        self,
        peer: 'TypeInputPeer'
    ):

        """
        Check whether we can post stories as the specified peer.

        Args:
            peer ('TypeInputPeer'): The peer from which we wish to post stories.
        """

        self.peer = peer

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xf0c\xeb0' if boxed else b'') as writer:
            writer.object(
                self.peer,
                group_id=0X995DB9DF
            )

            return writer.getvalue()

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import TYPE_CHECKING
from ....gadgets.tlobject import TLRequest
from ....gadgets.byteutils import Writer
from ...types.channels.channel_participants import TypeChannelsChannelParticipants


if TYPE_CHECKING:
    from ...types.input_channel import TypeInputChannel
    from ...types.channel_participants_filter import TypeChannelParticipantsFilter


class GetParticipants(TLRequest[TypeChannelsChannelParticipants]):
    """
    Get the participants of a [supergroup/channel](https://core.telegram.org/api/channel)

    **Bots can use this method**

    Raises:
        `400`ChannelInvalidError: The provided channel is invalid.
        `400`MsgIdInvalidError: Invalid message ID provided.
        `406`ChannelPrivateError: You haven't joined this channel/supergroup.
        `403`ChatAdminRequiredError: You must be an admin in this chat to do this.

    """

    _id = 0X77CED9D0
    _result_id = 0X5A75AC6A

    def __init__(
        self,
        channel: 'TypeInputChannel',
        filter: 'TypeChannelParticipantsFilter',
        offset: int,
        limit: int,
        hash: int
    ):

        """
        Get the participants of a [supergroup/channel](https://core.telegram.org/api/channel)

        **Bots can use this method**

        Args:
            channel ('TypeInputChannel'): Channel
            filter ('TypeChannelParticipantsFilter'): Which participant types to fetch
            offset (int): [Offset](https://core.telegram.org/api/offsets)
            limit (int): [Limit](https://core.telegram.org/api/offsets)
            hash (int): [Hash](https://core.telegram.org/api/offsets)
        """

        self.channel = channel
        self.filter = filter
        self.offset = offset
        self.limit = limit
        self.hash = hash

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\xd0\xd9\xcew' if boxed else b'') as writer:
            writer.object(
                self.channel,
                group_id=0X42691CEF
            )
            writer.object(
                self.filter,
                group_id=0X70FFAC0D
            )
            writer.int(self.offset)
            writer.int(self.limit)
            writer.long(self.hash)

            return writer.getvalue()
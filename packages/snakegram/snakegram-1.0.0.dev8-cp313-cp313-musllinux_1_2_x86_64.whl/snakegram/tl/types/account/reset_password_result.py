
#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import Union, TYPE_CHECKING
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ....gadgets.byteutils import Reader


class ResetPasswordFailedWait(TLObject, family='TypeAccountResetPasswordResult'):
    """
    You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.
    """

    _id = 0XE3779861
    _group_id = 0XECE08C46

    def __init__(
        self,
        retry_date: int
    ):

        """
        You recently requested a password reset that was canceled, please wait until the specified date before requesting another reset.

        Args:
            retry_date (int): Wait until this date before requesting another reset.
        """

        self.retry_date = retry_date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'a\x98w\xe3' if boxed else b'') as writer:
            writer.int(self.retry_date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        retry_date_ = reader.int()

        return cls(
            retry_date=retry_date_
        )

class ResetPasswordRequestedWait(TLObject, family='TypeAccountResetPasswordResult'):
    """
    You successfully requested a password reset, please wait until the specified date before finalizing the reset.
    """

    _id = 0XE9EFFC7D
    _group_id = 0XECE08C46

    def __init__(
        self,
        until_date: int
    ):

        """
        You successfully requested a password reset, please wait until the specified date before finalizing the reset.

        Args:
            until_date (int): Wait until this date before finalizing the reset.
        """

        self.until_date = until_date

    def to_bytes(self, boxed: bool=True):
        with Writer(b'}\xfc\xef\xe9' if boxed else b'') as writer:
            writer.int(self.until_date)

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        until_date_ = reader.int()

        return cls(
            until_date=until_date_
        )

class ResetPasswordOk(TLObject, family='TypeAccountResetPasswordResult'):
    """
    The 2FA password was reset successfully.
    """

    _id = 0XE926D63E
    _group_id = 0XECE08C46


    def to_bytes(self, boxed: bool=True):
        return b'>\xd6&\xe9' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

TypeAccountResetPasswordResult = Union[
    ResetPasswordFailedWait,
    ResetPasswordRequestedWait,
    ResetPasswordOk
]

#                     !!! WARNING !!!
#             This is an auto-generated file!
#                 Generated by [Builder].
# Any manual modifications will be lost upon regeneration.
#             DO NOT EDIT THIS FILE DIRECTLY.

from typing import List, TYPE_CHECKING, Union
from ....gadgets.tlobject import TLObject
from ....gadgets.byteutils import Writer


if TYPE_CHECKING:
    from ..wall_paper import TypeWallPaper
    from ....gadgets.byteutils import Reader


class WallPapersNotModified(TLObject, family='TypeAccountWallPapers'):
    """
    No new [wallpapers](https://core.telegram.org/api/wallpapers) were found
    """

    _id = 0X1C199183
    _group_id = 0X4921AD0B


    def to_bytes(self, boxed: bool=True):
        return b'\x83\x91\x19\x1c' if boxed else b''

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        return cls()

class WallPapers(TLObject, family='TypeAccountWallPapers'):
    """
    Installed [wallpapers](https://core.telegram.org/api/wallpapers)
    """

    _id = 0XCDC3858C
    _group_id = 0X4921AD0B

    def __init__(
        self,
        hash: int,
        wallpapers: List['TypeWallPaper']
    ):

        """
        Installed [wallpapers](https://core.telegram.org/api/wallpapers)

        Args:
            hash (int): [Hash used for caching, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
            wallpapers (List['TypeWallPaper']): [Wallpapers](https://core.telegram.org/api/wallpapers)
        """

        self.hash = hash
        self.wallpapers = wallpapers

    def to_bytes(self, boxed: bool=True):
        with Writer(b'\x8c\x85\xc3\xcd' if boxed else b'') as writer:
            writer.long(self.hash)
            writer.vector(
                self.wallpapers,
                lambda value: writer.object(
                    value,
                    group_id=0XC6E3E0E2
                )
            )

            return writer.getvalue()

    @classmethod
    def from_reader(cls, reader: 'Reader'):
        hash_ = reader.long()
        wallpapers_ = reader.vector(
            lambda: reader.object(
                group_id=0XC6E3E0E2
            )
        )

        return cls(
            hash=hash_,
            wallpapers=wallpapers_
        )

TypeAccountWallPapers = Union[
    WallPapersNotModified,
    WallPapers
]
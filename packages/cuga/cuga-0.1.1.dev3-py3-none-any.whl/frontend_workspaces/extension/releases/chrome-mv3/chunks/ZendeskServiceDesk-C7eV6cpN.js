import{aZ as w,a_ as M,a$ as u,G as b,f,O as P}from"./AppContainer-DlJO1h2A.js";import{$ as C,M as L}from"./sidepanel-CYx2dhah.js";import{S as W}from"./ServiceDeskImpl-B4MsmRMX.js";/**
* @license
* 
* (C) Copyright IBM Corp. 2017, 2025. All Rights Reserved.
* 
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
* 
* @carbon/ai-chat 0.3.3
* 
* Built: Jul 11 2025 1:09 pm -04:00
* 
* 
*/var c;(function(a){a.MESSAGE="chat.msg",a.TYPING="typing",a.WAIT_QUEUE="chat.wait_queue",a.QUEUE_POSITION="chat.queue_position",a.MEMBER_JOIN="chat.memberjoin",a.MEMBER_LEAVE="chat.memberleave",a.LAST_READ="last_read",a.COMMENT="chat.comment"})(c||(c={}));var m;(function(a){a.ONLINE="online",a.AWAY="away",a.OFFLINE="offline"})(m||(m={}));var E;(function(a){a.CLOSED="closed",a.CONNECTED="connected",a.CONNECTING="connecting"})(E||(E={}));const v=5,U=1e3,G="https://dev.zopim.com/web-sdk/latest/web-sdk.js",$="agent:",x="visitor",Z="x-watson-assistant-session_",K="x-watson-assistant-session-support_",O=`${u} Zendesk account is not online`,J=`${u} A message to the agent is required to initiate a connection to the service desk.`,j=`${u} Zendesk Web SDK is not initialized.`,z=`${u} Received a structured message without a string message from agent and this is not supported.`,I=a=>`${u} Event type ${a} not currently supported.`,q=`${u} Received options attached to the message and the options will not be displayed to the user.`,F=`${u} Received a structured message from agent and this is not supported. Only the string message will be sent.`,Q="zendesk";global.zendeskScriptLoaded=!1;class Y extends W{constructor(t,e,s){if(super(t,e,s),this.isConnected=!1,this.account_key=e&&e.subscription&&e.subscription.account&&e.subscription.account.id,!this.account_key)throw new Error("Zendesk account key is not found in definition config.");this.isChatStarted=!1}async ensureZendeskModuleLoadedAndConnected(){return global.zendeskScriptLoaded?(this.sdk=window.zChat,this.loadingSDKPromise=Promise.resolve()):!this.loadingSDKPromise&&!this.sdk&&(this.loadingSDKPromise=new Promise((t,e)=>{const s=document.createElement("script");s.type="text/javascript",s.async=!0,s.src=G,s.onerror=n=>{e(n)},s.onload=()=>{this.loadingSDKPromise=null,this.sdk=window.zChat;const n={account_key:this.account_key,suppress_console_error:!0};this.authJWT&&(n.authentication={jwt_fn:i=>{i(this.authJWT)}}),this.sdk.init(n),this.sdk.on("chat",i=>{this.isAccountOnline()&&this.handleChatEvent(i)}),this.sdk.on("agent_update",i=>{this.isAccountOnline()&&this.handleChatAgentUpdateEvent(i)}),this.sdk.on("error",i=>{const{context:r}=i;r==="init"&&this.callback.setErrorStatus({type:C.CONNECTING,logInfo:i.message})}),this.sdk.on("connection_update",i=>{switch(i){case E.CONNECTED:{this.isConnected=!0,this.callback.setErrorStatus({type:C.DISCONNECTED,isDisconnected:!1}),t(void 0);break}case E.CONNECTING:case E.CLOSED:{const r=this.isConnected;this.isConnected=!1,r&&this.callback.setErrorStatus({type:C.DISCONNECTED,isDisconnected:!0});break}}})},document.getElementsByTagName("head")[0].appendChild(s),global.zendeskScriptLoaded=!0})),this.loadingSDKPromise}async startChat(t,e){var n,i,r,l,p,_,k,S;const s=t.output.generic.find(w);if(this.authJWT=(i=(n=s.transfer_info)==null?void 0:n.additional_data)==null?void 0:i.jwt,await this.ensureZendeskModuleLoadedAndConnected(),!this.isChatStarted)if(this.isAccountOnline()){this.authJWT||this.sdk.setVisitorInfo({display_name:this.state.userID||"Unknown Visitor",email:"",phone:""}),await this.clearChatDepartment();const N=(p=(l=(r=s.transfer_info)==null?void 0:r.target)==null?void 0:l[Q])==null?void 0:p.department,R=N&&this.sdk.getAllDepartments().find(o=>o.name===N&&o.status===m.ONLINE);R&&await this.setChatDepartment(R.id);const T=()=>new Promise(o=>{const h=[],d=JSON.stringify(e.agentAppInfo);h.push(`${Z}${this.state.sessionID}_${Date.now()}_${d}`);const g=e.agentAppInfo.sessionHistoryKey.replace(/\./g,"ä").replace(/_/g,"â").replace(/::/g,"à");h.push(`${K}${this.state.sessionID}_${Date.now()}_${g}`),this.sdk.addTags(h,D=>o(this.handleError(D)))});await this.doWithRetry(0,T);const y=(S=(k=(_=t.context)==null?void 0:_.integrations)==null?void 0:k.zendesk)==null?void 0:S.pre_chat;if(typeof y=="object"&&!M(y)){const o=Object.entries(y).map(([d,g])=>`${d}_${g}`),h=()=>new Promise(d=>{this.sdk.addTags(o,g=>d(this.handleError(g)))});await this.doWithRetry(0,h)}if(s.transfer_info&&Array.isArray(s.transfer_info.summary_message_to_agent))s.transfer_info.summary_message_to_agent.forEach(o=>{o.response_type===L.TEXT&&this.sdk.sendChatMsg(o.text,h=>{if(h)throw Error(h)})});else throw Error(J);const A=this.sdk.getServingAgentsInfo();if(Array.isArray(A)&&A.length>0){const{nick:o,display_name:h}=A[0],d={id:o,nickname:h};this.currentAgent=d,this.callback.agentJoined(d)}this.isChatStarted=!0}else throw Error(O)}async endChat(){await this.ensureZendeskModuleLoadedAndConnected(),this.assertChatStarted();const t=()=>new Promise(e=>{this.sdk.endChat({clear_dept_id_on_chat_ended:!0},s=>{s?(f("[ZendeskServiceDesk]",s),e(!1)):(this.isChatStarted=!1,this.currentAgent=void 0,e(!0))})});await this.doWithRetry(0,t)}async sendMessageToAgent(t,e){await this.ensureZendeskModuleLoadedAndConnected(),this.assertChatStarted();const{text:s}=t.input;if(this.isAccountOnline()){const n=()=>new Promise(i=>{this.sdk.sendChatMsg(s,r=>{r?(f("[ZendeskServiceDesk] Error sending message",r),i(!1)):(this.sdk.sendTyping(!1),i(!0))})});await this.doWithRetry(0,n)}else throw Error(O)}async userReadMessages(){await this.ensureZendeskModuleLoadedAndConnected(),this.assertChatStarted(),this.sdk.markAsRead()}async userTyping(t){await this.ensureZendeskModuleLoadedAndConnected(),this.assertChatStarted(),this.sdk.sendTyping(t)}async areAnyAgentsOnline(t){var s,n;const e=t.output.generic.find(w);return this.authJWT=(n=(s=e==null?void 0:e.transfer_info)==null?void 0:s.additional_data)==null?void 0:n.jwt,await this.ensureZendeskModuleLoadedAndConnected(),this.isAccountOnline()}handleChatEvent(t){switch(t.type){case c.MESSAGE:{this.handleChatMessageEvent(t);break}case c.TYPING:{this.handleChatTypingEvent(t);break}case c.WAIT_QUEUE:{const e={type:c.QUEUE_POSITION,nick:t.nick,queue_position:t.wait_queue};this.handleChatQueuePositionEvent(e);break}case c.QUEUE_POSITION:{this.handleChatQueuePositionEvent(t);break}case c.MEMBER_JOIN:break;case c.MEMBER_LEAVE:{this.handleChatAgentLeaveEvent(t);break}case c.LAST_READ:{this.handleChatAgentLastReadEvent(t);break}case c.COMMENT:{this.handleChatComment(t);break}default:{console.warn(I(t.type)),this.handleEventNotSupported(t);break}}}async handleChatMessageEvent(t){const{msg:e,structured_msg:s,options:n}=t;if(this.isAgentMessage(t)){if(s||Array.isArray(n)&&n.length>0){if(!e)throw Error(z);const l=s?F:q;console.warn(l);const p=()=>new Promise(_=>this.sdk.sendChatComment(l,k=>_(this.handleError(k))));await this.doWithRetry(0,p)}const i=this.currentAgent?this.currentAgent.id:null,r=b(e);this.callback.agentTyping(!1),this.callback.sendMessageToUser(r,i)}}handleChatTypingEvent(t){const{typing:e}=t;this.isAgentMessage(t)&&this.callback.agentTyping(e)}handleChatQueuePositionEvent(t){const{queue_position:e}=t,s={position_in_queue:e};this.callback.updateAgentAvailability(s)}handleChatAgentUpdateEvent(t){if(!this.isChatStarted)return;const{nick:e,display_name:s}=t,n={id:e,nickname:s,profile_picture_url:t.avatar_path?t.avatar_path:void 0};this.currentAgent&&this.currentAgent.id!==n.id?(this.callback.beginTransferToAnotherAgent(n),this.callback.agentJoined(n)):this.currentAgent||this.callback.agentJoined(n),this.currentAgent=n}handleChatAgentLeaveEvent(t){const{nick:e}=t;this.isAgentMessage(t)&&e===this.currentAgent.id&&(this.callback.agentLeftChat(),this.currentAgent=null)}handleChatAgentLastReadEvent(t){this.isAgentMessage(t)&&this.callback.agentReadMessages()}async handleChatComment(t){this.isVisitorMessage(t)||this.handleEventNotSupported(t)}async handleEventNotSupported(t){const e=()=>new Promise(s=>this.sdk.sendChatComment(I(t.type),n=>s(this.handleError(n))));await this.doWithRetry(0,e)}isAgentMessage(t){return typeof t.nick=="string"&&t.nick.startsWith($)}isVisitorMessage(t){return typeof t.nick=="string"&&t.nick.startsWith(x)}isAccountOnline(){var t;return((t=this.sdk)==null?void 0:t.getAccountStatus())===m.ONLINE}assertChatStarted(){if(!this.isChatStarted)throw Error(j)}async setChatDepartment(t){const e=()=>new Promise(s=>this.sdk.setVisitorDefaultDepartment(t,n=>s(this.handleError(n))));await this.doWithRetry(0,e)}async clearChatDepartment(){const t=()=>new Promise(e=>this.sdk.clearVisitorDefaultDepartment(s=>e(this.handleError(s))));await this.doWithRetry(0,t)}async doWithRetry(t,e){if(t>v)return!1;try{if(await e())return!0}catch(s){f("Error in ZendeskServiceDesk.doWithRetry",s)}return await P(U),this.doWithRetry(t+1,e)}handleError(t){return t?(f("[ZendeskServiceDesk]",t),!1):!0}}export{Y as ZendeskServiceDesk};

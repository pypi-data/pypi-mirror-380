import{G as S,O as f,P as c}from"./AppContainer-DlJO1h2A.js";import{$ as A,M as d,B as T,K as w}from"./sidepanel-CYx2dhah.js";/**
* @license
* 
* (C) Copyright IBM Corp. 2017, 2025. All Rights Reserved.
* 
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
* 
* @carbon/ai-chat 0.3.3
* 
* Built: Jul 11 2025 1:09 pm -04:00
* 
* 
*/var u;(function(e){e[e.NONE=1]="NONE",e[e.LINE=2]="LINE",e[e.MINUTES=3]="MINUTES",e[e.MESSAGE=4]="MESSAGE",e[e.CONNECTING_ERROR=5]="CONNECTING_ERROR",e[e.THROW_ERROR=6]="THROW_ERROR"})(u||(u={}));const k=e=>`Hi${e?` ${e}`:""}, I'm Shepard! I'm a **mock** service desk agent. Type *"help"* to see a list of messages you can mock me with. <script>alert("If you see this, it is a serious bug!");<\/script>`,_=`The biggest problem that teams encounter when dealing with coding standards is the variety of opinions on the subject or the introduction of new team members who are familiar with a different standard. The first point I would make to address this is that I don't believe that what exactly is in your coding standard is nearly as important as having a standard and using it consistently. It doesn't matter if you want braces to be on the following line or the same line as long as whatever you do is consistent.

But those who don't agree to a specific point are likely to feel that it's "wrong" and not just "different." Over my career I have worked on a lot of different projects with a wide range of coding standards and in my experience, it takes relatively little time to adopt a new standard once you've set aside your resistance to it. You may feel that putting braces on the same line is "wrong" but I bet that if you try it, in just a few days you will begin to feel that the new style is "right" and it's now your old style that's "wrong".

As an example, I spent 20 years of my life believing that you were supposed to end a sentence with two spaces instead of one. Then one day I started to notice in javadoc comments that other members of my team used just one. I decided to go look up the best practices for this and concluded that the two spaces were outdated and it's now generally accepted to use just one. I made a few weak attempts to change but I just found it hard to switch a habit that I had had for so long. One day I finally decided to practice what I preach and made a serious attempt to relegate that extra space to history and sure enough, within a couple of days I no longer had any difficulty typing one space instead of two and in not much time after that, I found myself occasionally noticing the two spaces in old code of mine and found that it did indeed look odd now...

[More](https://medium.com/@damon.lundin/on-coding-standards-4420e3fa281f)

<script>alert("If you see this, it is a serious bug!")<\/script>`,b="https://web-chat.assistant.test.watson.cloud.ibm.com",r={id:"CommanderShepard-id",nickname:"Shepard",profile_picture_url:`${b}/assets/example_avatar_1.png`},p={id:"GarrusVakarian-id",nickname:"Garrus",profile_picture_url:`${b}/assets/example_avatar_2.png`},m={id:"Legion-id",nickname:"Legion",profile_picture_url:`${b}/assets/example_avatar_missing.png`},y={id:null,nickname:null};class Y{constructor(t){this.mockState={connectDelayFactor:1,connectInfoType:u.LINE,agentAvailabilityDelay:0,agentAvailability:!0,showStateChanges:!1,currentAgent:r},console.log("Creating MockServiceDesk"),this.factoryParameters=t,this.chatInstance=t.instance,this.callback=t.callback,this.callback.updateCapabilities({allowFileUploads:!0,allowedFileUploadTypes:"image/*,.txt",allowMultipleFileUploads:!0}),window.watsonAssistantChat=window.watsonAssistantChat||{},window.watsonAssistantChat.mockServiceDesk=this}getName(){return"wac mock service desk"}updateState(t){this.state=t,this.hasStarted&&this.mockState.showStateChanges&&g(this,$(t))}startChat(t,a){if(console.log("MockServiceDesk [startChat]: connectMessage",t),console.log("MockServiceDesk [startChat]: startChatOptions",a),this.preStartChatPayload=a.preStartChatPayload||{},this.mockState.connectInfoType===u.CONNECTING_ERROR)return g(this,I(this.mockState));if(this.mockState.connectInfoType===u.THROW_ERROR)throw new Error("The mock service desk threw an error during startChat!");return this.mockState.connectDelayFactor===0?g(this,E(this.preStartChatPayload.userName)):this.mockState.connectInfoType===u.NONE?g(this,M(this.preStartChatPayload.userName,this.mockState)):(this.hasStarted=!0,g(this,v(this.preStartChatPayload.userName,this.mockState)))}endChat(t){var o,i;console.log("MockServiceDesk [endChat]",t);let a;if(((o=t.preEndChatPayload)==null?void 0:o.wasAgentHelpful)===!0?a="We understand that you found the agent helpful. He will be given a cookie!":((i=t.preEndChatPayload)==null?void 0:i.wasAgentHelpful)===!1&&(a="We are sorry that the agent was not helpful. He will be reassigned to Siberia."),a){const s=`Thank you for responding to our survey. ${a}`;this.sendMessageToUser(S(s),this.mockState.currentAgent.id)}return Promise.resolve()}userTyping(t){return console.log(`MockServiceDesk [userTyping]: isTyping=${t}`),Promise.resolve()}sendMessageToAgent(t,a,o){console.log("MockServiceDesk [sendMessageToAgent]",t,o);const{text:i}=t.input;let s;if(i){const n=i.toLowerCase();if(n.includes("help"))s=O();else if(n.includes("blank"))s=null;else if(n.includes("joke"))s=B();else if(n.includes("someone else"))this.mockState.currentAgent===r||this.mockState.currentAgent===y?s=N():this.mockState.currentAgent===p?s=U():s=C();else if(n.includes("text long"))s=l(_);else if(n.includes("text medium"))s=l("Thanks for being so interesting! I'm sure we're going to have a *wonderful* conversation. Let's get started...");else if(n.includes("markdown"))s=l(W);else if(n.includes("multiple"))s=F();else if(n.includes("hide"))s=l("Session history will hide this message!");else if(n.includes("secret"))s=l("I'm afraid I don't know any secrets!");else if(n.includes("version"))s=l(`Web chat version: ${this.factoryParameters.instance.getWidgetVersion()}`);else if(n.includes("intl")){const h=this.factoryParameters.instance.getIntl().formatMessage({id:"input_placeholder"});s=l(`Intl string (input_placeholder): *${h}*`)}else n.includes("leave")?s=G():n.includes("text")?s=l("TypeScript is awesome! I don't know how anyone can live without it. Seriously?!"):n.includes("upload")?s=l("Alright, you can upload some files. But only .png files please.",0,!1):n.includes("message throw")?s=L():n.includes("image")?s=P():n.includes("files")?s=x():n.includes("video")?s=H():n.includes("custom")?s=D():n.includes("hang")?s=j():s=l('If you say so. Type *"help"* for a list of other things you can say.')}return o.filesToUpload&&o.filesToUpload.forEach(n=>{setTimeout(()=>{let h;n.file.name.endsWith(".png")||(h="Only .png files may be uploaded."),this.callback.setFileUploadStatus(n.id,!!h,h)},Math.random()*5e3+1)}),g(this,s)}filesSelectedForUpload(t){console.log("MockServiceDesk [filesSelectedForUpload]",t),t.forEach(a=>{a.file.name.toLowerCase().startsWith("a")&&this.callback.setFileUploadStatus(a.id,!0,'You may not upload files that start with the letter "A"! Duh.')})}userReadMessages(){return console.log("MockServiceDesk [userReadMessages]"),Promise.resolve()}sendMessageToUser(t,a){this.callback.agentTyping(!1),this.callback.sendMessageToUser(t,a)}async areAnyAgentsOnline(){return this.mockState.agentAvailabilityDelay&&await f(this.mockState.agentAvailabilityDelay*1e3),this.mockState.agentAvailability}async screenShareStop(){this.callback.sendMessageToUser("Alright, you have stopped sharing your screen.",this.mockState.currentAgent.id)}async reconnect(){return await f(2e3),this.hasStarted=!0,!0}}function g(e,t){if(t){let a=0;return t.forEach(i=>{a+=i.delay||0,setTimeout(()=>{i.callback(e)},a)}),t[t.length-1].returnPromise||Promise.resolve()}return Promise.resolve()}function E(e){return[{delay:0,callback:t=>{t.mockState.currentAgent=r,t.callback.agentJoined(r),t.sendMessageToUser(k(e),t.mockState.currentAgent.id)}}]}function M(e,t){return[{delay:1e3*t.connectDelayFactor,callback:a=>{t.currentAgent=r,a.callback.agentJoined(r)}},{delay:1e3,callback:a=>{a.callback.agentTyping(!0)}},{delay:1e3,callback:a=>{a.sendMessageToUser(k(e),r.id)}}]}function I(e){return[{delay:1e3*e.connectDelayFactor,callback:t=>{e.currentAgent=r,t.callback.setErrorStatus({type:A.CONNECTING,logInfo:"Error!",messageToUser:"Apparently all our agents are taking naps"})}}]}function v(e,t){let a;switch(t==null?void 0:t.connectInfoType){case u.MESSAGE:{a=[{message:"Agent getting on a *plane*..."},{message:"Agent getting on a *train*..."},{message:"Agent getting into a *car*..."}];break}case u.MINUTES:{a=[{estimated_wait_time:30},{estimated_wait_time:2},{estimated_wait_time:1}];break}default:{a=[{position_in_queue:30},{position_in_queue:2},{position_in_queue:1}];break}}return[{delay:1e3,callback:o=>{o.callback.updateAgentAvailability(a[0])}},{delay:500*t.connectDelayFactor,callback:o=>{o.callback.updateAgentAvailability(a[1])}},{delay:1e3*t.connectDelayFactor,callback:o=>{o.callback.updateAgentAvailability(a[2])}},{delay:1e3,callback:o=>{t.currentAgent=r,o.callback.agentJoined(r)}},{delay:1e3,callback:o=>{o.callback.agentTyping(!0)}},{delay:1e3,callback:o=>{o.sendMessageToUser(k(e),t.currentAgent.id)}}]}const R=`You can send me the messages below to get a specific response from me.


**text**: I will say something pithy.
**text medium**: I will send you a few lines of text.
**text long**: I will bore you with a treatise on coding standards.
**joke**: I will tell you a joke with after a longer pause with multiple pauses in between messages.
**someone else**: I will transfer you to someone not as nice as I am.
**multiple**: I will output a response with multiple items in it.
**version**: I will output the version of web chat being used.
**intl**: I will output the current value for a translatable string.
**message throw**: This will throw an error while sending this message.
**hang**: The service desk will never respond to this message.
**leave**: I will leave the chat without ending it.
**hide**: I will send a message that should get hidden from session history.
**hide this message**: The user message should be hidden from session history.
**secret**: I will send you a message with the word "secret" in it.
**image**: I will insert an image response.
**files**: I will insert some file responses.
**video**: I will insert a video response.
**custom**: I will insert a custom response.
**markdown**: I will insert some markdown.`;function O(){return[{delay:0,callback:e=>{e.sendMessageToUser("***These messages must be sent to an agent and not to the bot.***",e.mockState.currentAgent.id),e.sendMessageToUser(R,e.mockState.currentAgent.id)}}]}function l(e,t=1e3,a=!0){const o=[];return a&&o.push({delay:t,callback:i=>{i.callback.agentReadMessages(),i.callback.agentTyping(!0)}}),o.push({delay:t,callback:i=>{i.sendMessageToUser(e,i.mockState.currentAgent.id)}}),o}function N(){return[{delay:1e3,callback:e=>{e.callback.agentReadMessages(),e.callback.agentTyping(!0)}},{delay:1e3,callback:e=>{e.sendMessageToUser("Noooooo! I thought we were getting along so well!",e.mockState.currentAgent.id)}},{delay:500,callback:e=>{e.callback.agentReadMessages(),e.callback.agentTyping(!0)}},{delay:500,callback:e=>{e.sendMessageToUser("Okay, I'll find **someone else** you can talk to.",e.mockState.currentAgent.id)}},{delay:1e3,callback:e=>{e.callback.beginTransferToAnotherAgent()}},{delay:1e3,callback:e=>{e.mockState.currentAgent=p,e.callback.agentJoined(p)}},{delay:1e3,callback:e=>{e.callback.agentReadMessages(),e.callback.agentTyping(!0)}},{delay:500,callback:e=>{e.sendMessageToUser("Hi! I'm **Garrus** and I'm nicer than **Shepard**!",e.mockState.currentAgent.id)}}]}function U(){return[{delay:0,callback:e=>{e.sendMessageToUser("You'll regret this.",e.mockState.currentAgent.id)}},{delay:0,callback:e=>{e.callback.agentReadMessages(),e.callback.agentTyping(!0)}},{delay:1e3,callback:e=>{e.mockState.currentAgent=m,e.callback.beginTransferToAnotherAgent(m),e.callback.agentJoined(m)}},{delay:0,callback:e=>{e.sendMessageToUser("Shepard-Commander.",e.mockState.currentAgent.id)}}]}function G(){return[{delay:0,callback:e=>{e.sendMessageToUser("I am leaving now!",e.mockState.currentAgent.id),e.callback.agentLeftChat()}}]}function C(){return[{delay:0,callback:e=>{e.sendMessageToUser("Transferring you to a no-name.",e.mockState.currentAgent.id),e.mockState.currentAgent=y,e.callback.agentJoined(y),e.sendMessageToUser("Hi.",e.mockState.currentAgent.id)}}]}function L(){return[{delay:0,callback:()=>{},returnPromise:Promise.reject()}]}function P(){return[{delay:0,callback:e=>{const t={id:null,output:{generic:[c({response_type:d.IMAGE,source:"https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg",title:"Grump cat"})]}};e.sendMessageToUser(t,e.mockState.currentAgent.id)}}]}function x(){return[{delay:0,callback:e=>{const t={id:null,output:{generic:[c({response_type:d.BUTTON,kind:w.LINK,button_type:T.URL,url:"https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg",label:"Grump Cat.png",target:"_blank"}),c({response_type:d.BUTTON,kind:w.LINK,button_type:T.URL,url:"https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/maine-coon-694730_1280.jpg",target:"_blank"})]}};e.sendMessageToUser(t,e.mockState.currentAgent.id)}}]}function H(){return[{delay:0,callback:e=>{const t={id:null,output:{generic:[c({response_type:d.VIDEO,title:"The video title",source:"https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/lake%20(720p).mp4",alt_text:"The video alternate text",description:"The video description"})]}};e.sendMessageToUser(t,e.mockState.currentAgent.id)}}]}function D(){return[{delay:0,callback:e=>{const t={id:null,output:{generic:[c({response_type:d.TEXT,text:"Below is a custom response but you may not see it if no handler has been created."}),c({response_type:d.USER_DEFINED,user_defined:{user_defined_type:"agent_custom"}})]}};e.sendMessageToUser(t,e.mockState.currentAgent.id)}}]}function F(){return[{delay:0,callback:e=>{const t={id:null,output:{generic:[c({response_type:d.TEXT,text:"This is a text item in this response."}),c({response_type:d.TEXT,text:"This is a second text item."}),c({response_type:d.IMAGE,source:"https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg"})]}};e.sendMessageToUser(t,e.mockState.currentAgent.id)}}]}function j(){return[{delay:0,callback:()=>{},returnPromise:new Promise(()=>{})}]}function B(){return[{delay:1e3,callback:e=>{e.callback.agentReadMessages(),e.callback.agentTyping(!0)}},{delay:5e3,callback:e=>{e.sendMessageToUser("One atom says to another atom: I think I've lost an electron.",e.mockState.currentAgent.id)}},{delay:2e3,callback:e=>{e.sendMessageToUser("The second atom says: are you sure?",e.mockState.currentAgent.id)}},{delay:2e3,callback:e=>{e.sendMessageToUser("The first atom says: I'm positive.",e.mockState.currentAgent.id)}}]}function $(e){return[{delay:0,callback:t=>{t.sendMessageToUser(`The web chat state has changed: ${JSON.stringify(e)}`,t.mockState.currentAgent.id)}}]}const K="\n```\nconst example = {\n  value: true,\n};\n```\n",W=`
This is **bold**, ***bold and italics***, **bold *italics inside***, *italics **bold inside***, and ~~strikethrough~~.

# H1
H1 Text
## H2
H2 Text

1. Ordered List 1 
2. Ordered List 2 

- Unordered List 1 
- Unordered List 2

\`Inline code\`

${K}

| Header 1 | Header 2 |
| ----------- | ----------- |
| Text 1 | Text 2 |
| Text 3 | Text 4 |

---

[IBM's HomePage 1 (new tab)](https://ibm.com)

[IBM's HomePage 1 (same tab)](https://ibm.com){{target=_self}}

ibm.com (autolink, new tab)

![Cute kitten!](https://web-chat.global.assistant.test.watson.appdomain.cloud/assets/cat-1950632_1280.jpg)
`;export{u as ConnectInfoType,W as MARKDOWN,D as MESSAGE_CUSTOM,x as MESSAGE_FILES,P as MESSAGE_IMAGE,F as MESSAGE_TO_AGENT_MULTIPLE,l as MESSAGE_TO_AGENT_TEXT,H as MESSAGE_VIDEO,y as MOCK_AGENT_PROFILE_EMPTY,p as MOCK_AGENT_PROFILE_GARRUS,m as MOCK_AGENT_PROFILE_LEGION,r as MOCK_AGENT_PROFILE_SHEPARD,Y as MockServiceDesk,_ as TEXT_LONG,g as runSteps};

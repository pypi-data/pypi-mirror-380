import{d as f,aZ as m,c as L,aB as V,b0 as X,b1 as Y,b2 as W,b3 as j,O as C,m as B,f as _,b4 as P,b5 as J,G as H,b6 as x}from"./AppContainer-DlJO1h2A.js";import{$ as p,A as z}from"./sidepanel-CYx2dhah.js";import{S as Z}from"./ServiceDeskImpl-B4MsmRMX.js";/**
* @license
* 
* (C) Copyright IBM Corp. 2017, 2025. All Rights Reserved.
* 
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
* 
* http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
* 
* @carbon/ai-chat 0.3.3
* 
* Built: Jul 11 2025 1:09 pm -04:00
* 
* 
*/const u="[SFServiceDesk]",ee="buttonId",te="sfDomain",se="organizationId",ae=3,K=3,Q=100,ie=15,O="47",E={IP_ADDRESS:"Visitor IP Address",NETWORK:"Network",LOCATION:"Location",AGENT_APP_SESSION:"x_watson_assistant_session",AGENT_APP_TOKEN:"x_watson_assistant_token",AGENT_APP_KEY:"x_watson_assistant_key"},N="__c",A={IP_ADDRESS:"IpAddress",NETWORK:"VisitorNetwork",LOCATION:"Location",AGENT_APP_SESSION:`x_watson_assistant_session${N}`,AGENT_APP_TOKEN:`x_watson_assistant_token${N}`,AGENT_APP_KEY:`x_watson_assistant_key${N}`};var w;(function(I){I.CASE="Case",I.CHAT_TRANSCRIPT="LiveChatTranscript"})(w||(w={}));var k;(function(I){I.CASE_ID="CaseId"})(k||(k={}));class le extends Z{constructor(e,t,s,a){var r;super(e,t,a),this.routingInfoQueue=[],this.serviceManager=a;const{subscription:o}=t;if(!(o!=null&&o.data)){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:"The integration needs to be subscribed first to the service desk"});return}if(!((r=o.account)!=null&&r.id)||!o.data[ee]||!o.data[te]||!o.data[se]){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:"Mandatory service desk subscription values missing"});return}if(!s){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:"Unable to determine URL to call Salesforce"});return}this.baseUrl=`https://${s}/chat/rest`,this.callback.updateCapabilities({allowMultipleFileUploads:!1})}buildPrechatDetails(e,t,s,a){return{label:e,value:t,entityFieldMaps:[{entityName:w.CHAT_TRANSCRIPT,fieldName:typeof s=="string"?s:s[0]}],transcriptFields:typeof s=="string"?[s]:s,displayToAgent:a}}buildPrechatEntities(e,t){return{entityName:w.CHAT_TRANSCRIPT,showOnCreate:!0,linkToEntityName:w.CASE,linkToEntityField:k.CASE_ID,saveToTranscript:k.CASE_ID,entityFieldsMaps:[{fieldName:t,label:e}]}}getAllPrechatDetails(e,t,s,a,o,r,n){const i=[],l=this.buildPrechatDetails(E.AGENT_APP_SESSION,e,A.AGENT_APP_SESSION,!1);i.push(l);const d=this.buildPrechatDetails(E.AGENT_APP_TOKEN,t,A.AGENT_APP_TOKEN,!1);i.push(d);const c=this.buildPrechatDetails(E.AGENT_APP_KEY,s,A.AGENT_APP_KEY,!1);i.push(c);const g=this.buildPrechatDetails(E.IP_ADDRESS,a||"",A.IP_ADDRESS,!1);i.push(g);const b=this.buildPrechatDetails(E.NETWORK,r||"",A.NETWORK,!1);i.push(b);const S=this.buildPrechatDetails(E.LOCATION,o||"",A.LOCATION,!1);return i.push(S),n&&(Array.isArray(n.details)?n==null||n.details.forEach(h=>{i.push(this.buildPrechatDetails(h.label,h.value||"",h.transcriptFields||h.label+N,h.displayToAgent||!1))}):Object.entries(n).forEach(([h,y])=>i.push(this.buildPrechatDetails(h,y,h+N,!1)))),i}getAllPrechatEntities(e){const t=[],s=this.buildPrechatEntities(E.AGENT_APP_SESSION,A.AGENT_APP_SESSION);t.push(s);const a=this.buildPrechatEntities(E.AGENT_APP_TOKEN,A.AGENT_APP_TOKEN);t.push(a);const o=this.buildPrechatEntities(E.AGENT_APP_KEY,A.AGENT_APP_KEY);t.push(o);const r=this.buildPrechatEntities(E.IP_ADDRESS,A.IP_ADDRESS);t.push(r);const n=this.buildPrechatEntities(E.NETWORK,A.NETWORK);t.push(n);const i=this.buildPrechatEntities(E.LOCATION,A.LOCATION);return t.push(i),e&&(Array.isArray(e.entities)?e.entities.forEach(l=>{t.push(l)}):Array.isArray(e.details)?e.details.forEach(l=>{var d;t.push(this.buildPrechatEntities(l.label,((d=l.transcriptFields)==null?void 0:d.length)>0?l.transcriptFields[0]:l.label+N))}):Object.keys(e).forEach(l=>t.push(this.buildPrechatEntities(l,l+N)))),t}async startChat(e,t){f(`${u} Called startChat`,e,t),this.connectMessage=e,this.startChatOptions=t,this.hasAgentJoined=!1,this.updatePersistedState({fileUploadRequest:null}),this.callback.updateCapabilities({allowFileUploads:!1});const s=e.output.generic.find(m);this.buildRoutingInfos(s),await this.startChatInternal()}buildRoutingInfos(e){var o,r,n,i,l,d;const{subscription:t}=this.config,s=(n=(r=(o=e==null?void 0:e.transfer_info)==null?void 0:o.target)==null?void 0:r.salesforce)==null?void 0:n.additional_routing_info;f(`${u} Building routing infos`,e,t);let a;s?(a=L(s),a.forEach(c=>{var g,b,S;c.org_id=c.org_id||t.data.organizationId,c.deployment_id=c.deployment_id||t.account.id,c.deployment_url=c.deployment_url||t.data.sfDomain,c.button_ids&&(c.button_overrides=c.button_ids,V(`${u} The additionalRoutingInfo.button_ids property is deprecated. Use button_overrides instead.`)),c.button_id=c.button_id||((S=(b=(g=e.transfer_info)==null?void 0:g.target)==null?void 0:b.salesforce)==null?void 0:S.button_id)||t.data.buttonId})):a=[{org_id:t.data.organizationId,deployment_id:t.account.id,deployment_url:t.data.sfDomain,button_id:((d=(l=(i=e==null?void 0:e.transfer_info)==null?void 0:i.target)==null?void 0:l.salesforce)==null?void 0:d.button_id)||t.data.buttonId}],this.routingInfoQueue=a,X()&&f(`${u} Built routing infos`,L(a))}async startChatInternal(){var S,h,y,R,U,D,$,F,G,v,M,q;f(`${u} Starting chat`,this.startChatOptions),await this.checkRoutingInfoQueue();const e=this.routingInfoQueue[0];if(!e){this.callback.setErrorStatus({type:p.CONNECTING,messageToUser:this.getIntlText("errors_noAgentsAvailable")});return}this.updatePersistedState({toAgentSequence:0}),this.isReconnecting=!1,this.connectItem=this.connectMessage.output.generic.find(m);const t=(y=(h=(S=this.connectMessage.context)==null?void 0:S.integrations)==null?void 0:h.chat)==null?void 0:y.browser_info,s=(R=this.startChatOptions.preStartChatPayload)==null?void 0:R.preChat,a=($=(D=(U=this.connectMessage.context)==null?void 0:U.integrations)==null?void 0:D.salesforce)==null?void 0:$.pre_chat,o=Y({},a,s);if(!((v=(G=(F=this.connectItem)==null?void 0:F.transfer_info)==null?void 0:G.additional_data)!=null&&v.jwt)){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:"Unable to connect due to missing security tokens"});return}const r=this.connectItem.transfer_info.additional_data.jwt,n=`${this.baseUrl}/System/SessionId`;let i;try{const T={"X-LIVEAGENT-AFFINITY":null,"X-LIVEAGENT-API-VERSION":O,"X-WATSON-TARGET-DOMAIN":e.deployment_url};i=await this.sendToSalesforce("GET",n,null,T)}catch(T){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:T});return}if(!i||!i.ok){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:`Unable to start a live agent session: ${i.status}`});return}try{const T=await i.json();this.updatePersistedState({sessionData:T}),f(`${u} Starting with chat session data`,T)}catch(T){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:T});return}const l=`${this.baseUrl}/Chasitor/ChasitorInit`,d=this.getAllPrechatDetails(this.state.sessionID,r,this.startChatOptions.agentAppInfo.sessionHistoryKey,t==null?void 0:t.client_ip_address,void 0,void 0,o),c=this.getAllPrechatEntities(o),g=JSON.stringify({organizationId:e.org_id,deploymentId:e.deployment_id,buttonId:e.button_id,buttonOverrides:e.button_overrides,userAgent:navigator==null?void 0:navigator.userAgent,language:this.state.locale?this.state.locale:navigator==null?void 0:navigator.language,screenResolution:`${(M=window==null?void 0:window.screen)==null?void 0:M.height}X${(q=window==null?void 0:window.screen)==null?void 0:q.width}`,prechatDetails:d,receiveQueueUpdates:!0,isPost:!0,prechatEntities:c});let b;try{b=await this.sendToSalesforce("POST",l,g,null)}catch(T){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:T})}if(!b||!b.ok){this.callback.setErrorStatus({type:p.CONNECTING,logInfo:`Unable to contact an agent: ${b.status}`});return}this.updatePersistedState({fromAgentSequence:-1}),this.startPolling()}async handleChatEstablished(e){const t={nickname:e.name,id:e.userId};this.callback.agentJoined(t),this.hasAgentJoined=!0;const s=W(this.connectItem,"Begin conversation");await j(s,async a=>{await C(ie),await this.sendMessageToAgent(B(a),"",{})})}async endChat(){if(this.currentPoller&&(this.currentPoller.stop=!0,this.currentPoller=null,!this.isReconnecting)){const e=`${this.baseUrl}/Chasitor/ChatEnd`,t=JSON.stringify({reason:"client"});try{const s=await this.sendToSalesforce("POST",e,t,null);(!s||!s.ok)&&_("Failed to end chat",s)}catch(s){_("Unable to close chat with Salesforce agent.",s)}}}async sendMessageToAgent(e,t,s){var a;if(this.isReconnecting)throw new Error("[SFServiceDesk] Message failed to send due to a reconnection in progress");if(e.input.text){const o=`${this.baseUrl}/Chasitor/ChatMessage`,r=JSON.stringify({text:e.input.text}),n=await this.sendToSalesforce("POST",o,r,null);if(!(n!=null&&n.ok))throw new Error("[SFServiceDesk] Message failed to send")}(a=s.filesToUpload)!=null&&a.length&&await this.doFileUpload(s.filesToUpload[0])}async doFileUpload(e){const{fileUploadRequest:t}=this.persistedState();if(!t)this.callback.setFileUploadStatus(e.id,!0);else{const s=new FormData;s.append("file",e.file);const a=t,{sessionData:o}=this.persistedState(),r=`${a.uploadServletUrl}?orgId=${this.routingInfoQueue[0].org_id}&chatKey=${o.id}&fileToken=${a.fileToken}&encoding=UTF-8`,n=await this.serviceManager.fetch(r,{method:"POST",body:s});f(`${u} Got response in doFileUpload`,await P(n)),this.callback.setFileUploadStatus(e.id,!n.ok)}this.callback.updateCapabilities({allowFileUploads:!1}),this.updatePersistedState({fileUploadRequest:null})}userReadMessages(){return Promise.resolve()}async userTyping(e){if(!this.isReconnecting){let t,s;e?s=`${this.baseUrl}/Chasitor/ChasitorTyping`:s=`${this.baseUrl}/Chasitor/ChasitorNotTyping`;try{t=await this.sendToSalesforce("POST",s,"{}")}catch(a){_(`Failed calling ${s}`,a)}t!=null&&t.ok||_(`Failed calling ${s}, response code: ${t.status}`)}}async areAnyAgentsOnline(e){f(`${u} Called areAnyAgentsOnline`,e);const t=e.output.generic.find(m);return this.buildRoutingInfos(t),await this.checkRoutingInfoQueue(),this.routingInfoQueue.length!==0}async checkRoutingInfoQueue(){for(;this.routingInfoQueue.length;)if(!await this.callAgentAvailabilityAPI(this.routingInfoQueue[0]))this.routingInfoQueue.splice(0,1);else return}async callAgentAvailabilityAPI(e){var l,d,c;const{org_id:t,deployment_id:s,button_overrides:a,button_id:o}=e,r=[];a?a.forEach(g=>{J(r,g.split("_"))}):o&&r.push(o);const n=`?org_id=${t}&deployment_id=${s}&Availability.ids=[${r}]`,i=`${this.baseUrl}/Visitor/Availability${n}`;try{const g={"X-LIVEAGENT-API-VERSION":O,"X-WATSON-TARGET-DOMAIN":e.deployment_url},S=await(await this.sendToSalesforce("GET",i,null,g)).json(),h=(c=(d=(l=S==null?void 0:S.messages)==null?void 0:l.find(y=>y.type==="Availability"))==null?void 0:d.message)==null?void 0:c.results;return!!(h!=null&&h.find(y=>y.isAvailable))}catch(g){return _("Error in callAgentAvailabilityAPI",g),!1}}async getMessagesFromAgent(e){const t=`${this.baseUrl}/System/Messages?ack=${this.persistedState().fromAgentSequence}`,s=await this.serviceManager.fetch(t,{method:"GET",credentials:"include",headers:this.getHeaders(!1)});if(f(`${u} Got response in getMessagesFromAgent`,await P(s)),s.status===200){const a=await s.json();f(`${u} Parsed response`,a),this.updatePersistedState({fromAgentSequence:a.sequence}),a.offset&&this.updatePersistedState({lastOffset:a.offset});let o=!1;for(let r=0;r<a.messages.length;r++){const n=a.messages[r];switch(n.type){case"AgentDisconnect":{await this.callback.agentLeftChat();break}case"AgentTyping":{o||await this.callback.agentTyping(!0);break}case"AgentNotTyping":{o=!0,await this.callback.agentTyping(!1);break}case"ChasitorSessionData":{await this.resyncState();break}case"ChatEnded":{e.stop=!0,await this.callback.agentEndedChat();break}case"ChatEstablished":{this.handleChatEstablished(n.message).catch(i=>{_("Error establishing chat",i)});break}case"ChatMessage":{const i=n.message;await this.callback.agentTyping(!1),await this.callback.sendMessageToUser(i.text);break}case"ChatRequestFail":{const i=n.message;e.stop=!0,i.reason==="Unavailable"&&(this.hasAgentJoined?await this.callback.agentEndedChat():(this.routingInfoQueue.splice(0,1),this.startChatInternal().catch(l=>_("Error restarting chat",l))));break}case"ChatRequestSuccess":{const i=n.message;if(i.queuePosition!==0){const l={position_in_queue:i.queuePosition+1};await this.callback.updateAgentAvailability(l)}break}case"ChatTransferred":{const i=n.message;await this.callback.beginTransferToAnotherAgent();const l={nickname:i.name,id:i.userId};await this.callback.agentJoined(l);break}case"CustomEvent":break;case"NewVisitorBreadcrumb":break;case"QueueUpdate":{const l={position_in_queue:n.message.position+1};await this.callback.updateAgentAvailability(l);break}case"FileTransfer":{const i=n.message;if(i.type==="Requested"){this.callback.updateCapabilities({allowFileUploads:!0}),this.updatePersistedState({fileUploadRequest:n.message});const l=this.getIntlText("fileSharing_request"),d=H(l);d.output.generic[0].agent_message_type=z.SYSTEM,await this.callback.sendMessageToUser(d)}else i.type==="Canceled"&&(this.callback.updateCapabilities({allowFileUploads:!1}),this.callback.updatePersistedState({fileUploadRequest:null}));break}default:{_(`unhandled Salesforce message: ${n.type}`);break}}}}else if(s.status===x.SERVICE_UNAVAILABLE)await this.issueReconnect();else if(!s.ok)throw new Error(`Error polling for messages: ${s.status}`)}async issueReconnect(){this.isReconnecting=!0;const{lastOffset:e}=this.persistedState(),t=`${this.baseUrl}/System/ReconnectSession?ReconnectSession.offset=${e}`,s=await this.serviceManager.fetch(t,{method:"GET",credentials:"include",headers:this.getHeaders(!1)});if(f(`${u} Got response in issueReconnect`,await P(s)),!s||!s.ok)throw new Error(`Error reconnecting after 503 Salesforce error: ${s.status}`);const a=await s.json();if(!a.messages||a.messages.length<1)throw new Error(`Unexpected response when trying to reconnect: ${a}`);this.updatePersistedState({sessionData:{affinityToken:a.messages[0].message.affinityToken}}),this.updatePersistedState({fromAgentSequence:-1})}async sendToSalesforce(e,t,s,a){let o=0,r;do try{if(r=await this.serviceManager.fetch(t,{method:e,credentials:"include",body:s,headers:a||this.getHeaders(!0)}),f(`${u} Got response in sendToSalesforce`,await P(r)),r.status===x.CONFLICT){const n=await r.text(),i=Number(n.match(/\d+$/)[0])+1;this.updatePersistedState({toAgentSequence:i})}r.ok||o++}catch(n){if(console.error("Error occurred sending message to Salesforce",n),o++,o===K)throw n;await C(Q)}while(o!==K&&!r.ok);return r}async resyncState(){const e=`${this.baseUrl}/Chasitor/ChasitorResyncState`,t=await this.serviceManager.fetch(e,{method:"POST",credentials:"include",body:JSON.stringify({organizationId:this.routingInfoQueue[0].org_id}),headers:this.getHeaders(!1)});if(f(`${u} Got response in resyncState`,await P(t)),!t||!t.ok)throw new Error(`Failed to resync state: ${t.status}`);this.isReconnecting=!1}async startPolling(){const e={stop:!1};this.currentPoller=e;let t=0;do try{await this.getMessagesFromAgent(e),t=0}catch{++t===ae?(e.stop?this.callback.setErrorStatus({type:p.CONNECTING}):this.callback.setErrorStatus({type:p.DISCONNECTED,isDisconnected:!0}),e.stop=!0):await C(Q)}while(!e.stop)}getHeaders(e){const{sessionData:t,toAgentSequence:s}=this.persistedState(),a={"X-LIVEAGENT-AFFINITY":`${t.affinityToken}`,"X-LIVEAGENT-API-VERSION":O,"X-LIVEAGENT-SESSION-KEY":`${t.key}`,"X-WATSON-TARGET-DOMAIN":this.routingInfoQueue[0].deployment_url};return e&&(this.updatePersistedState({toAgentSequence:s+1}),a["X-LIVEAGENT-SEQUENCE"]=`${s+1}`),a}async reconnect(){const e=this.persistedState();return e.fromAgentSequence&&e.fromAgentSequence!==-1?(this.persistedState().fileUploadRequest&&this.callback.updateCapabilities({allowFileUploads:!0}),this.startPolling(),!0):!1}}export{le as SFServiceDesk};

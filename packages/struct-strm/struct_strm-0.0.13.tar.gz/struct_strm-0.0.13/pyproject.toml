[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "struct_strm"
description = "Stream partial json generated by LLMs into valid json responses"
readme = "readme.md"
requires-python = ">= 3.10"
dependencies = [
    "tree-sitter>=0.25",
    "tree-sitter-json"
]

dynamic = [
  "version"
]
keywords = ["llm", "json", "streaming", "htmx", "web components"]
authors = [
  { name="Preston Blackburn", email="prestonblckbrn@gmail.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Operating System :: OS Independent",
]
license = "MIT"
license-files = ["LICENSE"]

[project.urls]
Homepage = "https://prestonblackburn.github.io/structured_streamer/"
Documentation = "https://prestonblackburn.github.io/structured_streamer/"
Issues = "https://github.com/PrestonBlackburn/structured_streamer/issues"
Repository = "https://github.com/PrestonBlackburn/structured_streamer"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/struct_strm/_version.py"


[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.sdist]
include = [
  "src/struct_strm",
  "src/struct_strm/templates/**/*.html",
  "readme.md"
]

[tool.hatch.build.targets.wheel]
packages = ["src/struct_strm"]
include = [
  "src/struct_strm/templates/**/*.html"
]

[tool.pytest.ini_options]
asyncio_default_test_loop_scope = "module"

[project.optional-dependencies]
dev = [
    "pydantic",
    "Jinja2",
    "black",
    "pytest",
    "pytest-cov[all]",
    "pytest-playwright",
    "pytest-asyncio",
    "uvicorn",
    "fastapi",
    "sse-starlette",
    "python-multipart",
    "python-on-whales",
    "requests",
    "pyright",
    "openai"
]

pydantic = [
  "pydantic"
]

openai = [
  "openai"
]

hf = [
  "numpy",
  "torch[cpu]",
  "transformers",
  "xgrammar"
]

docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-techdocs-core"
]

benchmark = [
  "matplotlib",
  "pandas"
]

[tool.hatch.envs.test]
dependencies = [
    "pydantic",
    "Jinja2",
    "black",
    "pytest",
    "pytest-cov",
    "pytest-playwright",
    "pytest-asyncio",
    "uvicorn",
    "fastapi",
    "sse-starlette",
    "python-multipart",
    "python-on-whales",
    "requests",
    "pyright",
    "openai"
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-techdocs-core"
]

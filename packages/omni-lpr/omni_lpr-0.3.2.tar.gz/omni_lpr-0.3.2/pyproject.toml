[project]
name = "omni-lpr"
version = "0.3.2"
description = "A multi-interface (REST and MCP) server for automatic license plate recognition"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Hassan Abedi", email = "hassan.abedi.t+omnilpr@gmail.com" }
]
maintainers = [
    { name = "Hassan Abedi", email = "hassan.abedi.t+omnilpr@gmail.com" }
]

keywords = [
    "alpr",
    "license plate recognition",
    "automatic license plate recognition",
    "computer vision",
    "rest-api",
    "mcp",
    "microservice",
    "onnx",
    "cuda",
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

requires-python = ">=3.10,<4.0"
dependencies = [
    "python-dotenv (>=1.1.0,<2.0.0)",
    "mcp[cli] (>=1.12.3,<2.0.0)",
    "pydantic-settings (>=2.10.1,<3.0.0)",
    "click (>=8.2.1,<9.0.0)",
    "pillow (>=11.3.0,<12.0.0)",
    "gunicorn (>=23.0.0,<24.0.0)",
    "python-json-logger (>=3.3.0,<4.0.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "fast-alpr[onnx] (>=0.3.0,<0.4.0)",
    "pydantic (>=2.11.7,<3.0.0)",
    "spectree[starlette] (>=1.5.4,<2.0.0)",
    "async-lru (>=2.0.4,<3.0.0)",
    "opencv-python (>=4.12.0.88,<5.0.0.0)",
]

[project.optional-dependencies]
openvino = [
    "fast-alpr[onnx-openvino] (>=0.3.0,<0.4.0)",
]
cuda = [
    "fast-alpr[onnx-gpu] (>=0.3.0,<0.4.0)",
]
dev = [
    "pytest (>=8.0.1,<9.0.0)",
    "pytest-cov (>=6.0.0,<7.0.0)",
    "pytest-mock (>=3.14.0,<4.0.0)",
    "pytest-asyncio (>=1.1.0,<2.0.0)",
    "mypy (>=1.11.1,<2.0.0)",
    "ruff (>=0.9.3,<1.0.0)",
    "pre-commit (>=4.2.0,<5.0.0)",
    "asgi-lifespan[dev] (>=2.1.0,<3.0.0)",
]

[project.urls]
Repository = "https://github.com/habedi/omni-lpr"
Documentation = "https://github.com/habedi/omni-lpr/blob/main/README.md"

[project.scripts]
omni-lpr = "omni_lpr.__main__:main"

[tool.poetry]
include = ["README.md"]
packages = [{ include = "omni_lpr", from = "src" }]
package-mode = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
markers = [
    "e2e: marks tests as end-to-end tests",
]
addopts = [
    "--tb=short",
    #"--disable-warnings",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=xml",
    "-rs"
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"

[tool.coverage.run]
branch = true
parallel = true
source = ["."]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = false
skip_empty = true
precision = 2

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_return_any = true
strict_optional = true
warn_redundant_casts = true
exclude = "^(examples/|scripts/|tests/)"

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".mypy_cache",
    ".nox", ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv",
    "__pypackages__", "_build", "buck-out", "build", "dist", "node_modules",
    "venv", "tests"
]
line-length = 100
indent-width = 4
src = ["src"]
target-version = "py310"
unsafe-fixes = false

[tool.ruff.lint]
select = ["ANN", "E", "F", "I", "W", "B", "RUF", "SIM", "C90"]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107"]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = []

name: Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write
  id-token: write

jobs:

  tests:
    uses: ./.github/workflows/tests.yml

  release:
    needs: tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '^3.10'

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          uv --version

      - name: Determine release type and latest status
        id: release-info
        run: |
          TAG_NAME=${{ github.ref_name }}
          VERSION=${TAG_NAME#v}

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Determine if this should be marked as latest
          # Latest = stable releases (x.y.z) and post releases (x.y.z.postN)
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.(post)[0-9]+)?$ ]]; then
            echo "is_latest=true" >> $GITHUB_OUTPUT
            echo "release_type=release" >> $GITHUB_OUTPUT
            echo "📦 Stable release - will be marked as latest"
          elif [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[-\.]?(a|alpha|b|beta|rc)[0-9]*$ ]]; then
            echo "is_latest=false" >> $GITHUB_OUTPUT
            echo "release_type=prerelease" >> $GITHUB_OUTPUT
            echo "🧪 Pre-release - will NOT be marked as latest"
          elif [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[-\.]?(dev)[0-9]*$ ]]; then
            echo "is_latest=false" >> $GITHUB_OUTPUT
            echo "release_type=dev" >> $GITHUB_OUTPUT
            echo "🚧 Development release - will NOT be marked as latest"
          else
            echo "is_latest=false" >> $GITHUB_OUTPUT
            echo "release_type=draft" >> $GITHUB_OUTPUT
            echo "📝 Draft release - will NOT be marked as latest"
          fi

      - name: Extract release notes from tag
        id: release-notes
        run: |
          VERSION=${{ steps.release-info.outputs.version }}
          TAG_NAME=${{ steps.release-info.outputs.tag_name }}

          echo "Extracting message from tag $TAG_NAME..."
          git tag -l --format='%(contents)' "$TAG_NAME" > RELEASE_NOTES.md

          if [ ! -s RELEASE_NOTES.md ]; then
            echo "Warning: Could not extract tag message for $TAG_NAME"
            echo "Creating simple release notes..."
            echo "# Release $TAG_NAME" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            echo "See CHANGELOG.md for details." >> RELEASE_NOTES.md
          fi

          echo "Release notes content:"
          cat RELEASE_NOTES.md

      - name: Build package
        run: ./run.sh build

      # Always test on TestPyPI first
      - name: Test PyPI release
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        run: ./run.sh publish:test

      - name: Test installation from TestPyPI
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install --index-url https://test.pypi.org/simple/ \
              --extra-index-url https://pypi.org/simple \
              test_mcp_server_ap25092201
          SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
          export PYTHONPATH="${SITE_PACKAGES}:${PYTHONPATH:-}"
          python -c "import test_mcp_server_ap25092201; print('Installed version: ' + test_mcp_server_ap25092201.__version__)"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body_path: RELEASE_NOTES.md
          # Key improvement: Control latest tag assignment
          make_latest: ${{ steps.release-info.outputs.is_latest }}
          prerelease: ${{ steps.release-info.outputs.release_type == 'prerelease' || steps.release-info.outputs.release_type == 'dev' }}
          draft: ${{ steps.release-info.outputs.release_type == 'draft' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Only publish stable releases to PyPI
      - name: Publish to PyPI
        if: steps.release-info.outputs.release_type == 'release'
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: ./run.sh publish

      # Only update ReadTheDocs for stable releases
      - name: Update ReadTheDocs
        if: steps.release-info.outputs.release_type == 'release'
        run: |
          TAG_NAME=${{ steps.release-info.outputs.tag_name }}
          echo "Activating version $TAG_NAME via API..."
          curl -s -X PATCH \
            -H "Authorization: Token ${{ secrets.RTD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"active": true}' \
            "https://readthedocs.org/api/v3/projects/test-mcp-server-ap25092201/versions/$TAG_NAME/" || true
        continue-on-error: true

      - name: Release Summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.release-info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.release-info.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest**: ${{ steps.release-info.outputs.is_latest }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.release-info.outputs.release_type }}" == "release" ]]; then
            echo "- **PyPI**: ✅ Published" >> $GITHUB_STEP_SUMMARY
            echo "- **ReadTheDocs**: ✅ Updated" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **PyPI**: ⏭️ Skipped (not a stable release)" >> $GITHUB_STEP_SUMMARY
            echo "- **ReadTheDocs**: ⏭️ Skipped (not a stable release)" >> $GITHUB_STEP_SUMMARY
          fi

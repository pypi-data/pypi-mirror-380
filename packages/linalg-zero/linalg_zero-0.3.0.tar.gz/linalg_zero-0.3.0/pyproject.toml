[project]
name = "linalg-zero"
version = "v0.3.0"
description = "This repository provides tools to generate a linear algebra dataset and code to train an open-source pre-trained model. Our goal is to explore the model's potential for emergent reasoning, inspired by the Deepseek-R1 paper."
authors = [{ name = "Razvan Florian Vasile", email = "atomwalk@duck.com" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<3.13"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "anyio>=4.9.0",
    "distilabel[openai,outlines,instructor]>=1.5.3",
    "datasets>=4.0.0",
    "outlines>=0.1.0",
    "instructor>=1.9.2",
    # NOTE: these dependencies will be necessary, leaving here for convenience.
    #"ipykernel>=6.29.5",
    #"ipywidgets>=8.1.7",
    #"jupyter>=1.1.1",
    #"llama-cpp-python[server]>=0.3.0",
    #"pynvml>=12.0.0",
    #"ray>=2.47.1",
    "transformers>=4.53.1",
    "trl>=0.19.1",
    "fastapi>=0.116.1",
    "pydantic-settings>=2.10.1",
    "sse-starlette>=2.4.1",
    "starlette>=0.47.1",
    "starlette-context>=0.4.0",
    "uvicorn>=0.35.0",
    "ipykernel>=6.29.5",
    "bitsandbytes>=0.46.1",
    "llama-cpp-python==0.3.13",
    "vllm>=0.10.2",
    "bs4>=0.0.2",
    "verl>=0.5.0",
    "math-verify>=0.8.0",
    "argilla>=2.8.0",
    "pydantic>=2.11.7",
    "typing-extensions>=4.14.1",
    "liger-kernel>=0.6.1",
    "deepspeed>=0.17.3",
    "huggingface-hub>=0.33.4",
    "pytest>=7.2.0",
    "sympy==1.14.0",
    "pyyaml>=6.0.2",
    "numpy>=1.26.4",
    "matplotlib>=3.10.6",
    "flashinfer-python>=0.3.1",
]

# These are false positives, the libraries are actually used (i.e. see launch_server.py)
[tool.deptry]
exclude = ["linalg_zero/grpo/verl/", ".venv"]

[tool.deptry.per_rule_ignores]
DEP002 = [
    "starlette", "sse-starlette", "starlette-context", "pydantic-settings", "uvicorn", "llama-cpp-python", "vllm",
    "bs4", "verl", "ipykernel", "bitsandbytes", "fastapi", "anyio", "instructor", "outlines", "pydantic",
    "liger-kernel", "deepspeed"
]
# There are some problems installing torch directly, however it is being made available as a transient dependency.
DEP003 = [
    "torch"
]

[tool.uv]
# Instead of using --no-build-isolation from the command line
no-build-isolation-package = ["xformers"]
constraint-dependencies = [
  "torch",
]

# PyTorch configuration - users can override by setting UV_TORCH_BACKEND
# Default: CPU builds for non-Linux, CUDA 12.8 for Linux
# See: https://docs.astral.sh/uv/guides/integration/pytorch/
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu129", marker = "sys_platform == 'linux'" },
]
torchvision = [
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
  { index = "pytorch-cu129", marker = "sys_platform == 'linux'" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu129"
url = "https://download.pytorch.org/whl/cu129"
explicit = true

[project.urls]
Homepage = "https://atomwalk12.github.io/linalg-zero/"
Repository = "https://github.com/atomwalk12/linalg-zero"
Documentation = "https://atomwalk12.github.io/linalg-zero/"

[dependency-groups]
dev = [
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.23.0",
    "mypy>=1.16.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.11.5",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
    "python-semantic-release>=10.1.0",
    "types-pyyaml>=6.0.12.20250516",
    "types-tqdm>=4.67.0.20250516",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.setuptools]
py-modules = ["linalg_zero"]

[tool.mypy]
files = ["linalg_zero"]
exclude = ["linalg_zero/grpo/verl/"]
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

# Module-specific ignores
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*",
    "deepspeed.*",
    "datasets.*",
    "trl.*",
    "sympy.*",
    "distilabel.*",
    "math_verify.*",
    "verl.*",
    "argilla.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["linalg_zero.distillation.utils", "linalg_zero.distillation.scripts.push_debug_dataset", "linalg_zero.sft.model_utils", "linalg_zero.grpo.datagen", "linalg_zero.grpo.process_dataset", "linalg_zero.distillation.run", "linalg_zero.sft.utils", "linalg_zero.sft.tool_calling_accuracy"]
disable_error_code = ["attr-defined"]

[[tool.mypy.overrides]]
module = ["linalg_zero.grpo.verify", "linalg_zero.grpo.linalg_zero_interaction"]
disable_error_code = ["no-any-return", "unused-ignore"]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py311"
line-length = 119
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    "UP038",
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Allow random module usage
    "S311",
    # Allow raise with long message usage
    "TRY003",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"linalg_zero/distillation/components/multi_turn_generation.py" = ["A002"]
"linalg_zero/distillation/components/multi_turn_generation_base.py" = ["A001", "PGH003", "S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["linalg_zero"]
omit = [
    # This file is a thin wrapper around the launch script, it is intended to be very simple.
    # It is excluded from the coverage report.
    "*/run_training.py",
    "*/metrics/accuracy.py",
    "*/trainers/zero_trainer.py",
    "*/models/simple_cnn.py",
    "*/distil.py",
    "*/generate.py",
    "*/sft.py",
]

# Generated with: semantic-release generate-config --pyproject >> pyproject.toml
[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "chore(release): ðŸ“¦ v{version} [skip ci]"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = ["^chore.*"]
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = false

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = false
ignore_merge_commits = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.pyright]
reportArgumentType = false
reportAny = false
reportExplicitAny = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportMissingTypeStubs = false
reportAttributeAccessIssue = false
reportUnusedExpression = false
reportAssignmentType = false

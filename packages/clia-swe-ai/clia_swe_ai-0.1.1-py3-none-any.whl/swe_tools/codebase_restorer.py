import os
from swe_tools.instance import mcp
from swe_tools.utils import parse_multiline_commands

@mcp.tool(name="write_files_from_snapshot", description="This tool is designed to reconstruct or update files and directories within the project's filesystem based on a provided 'snapshot' string. This snapshot string is a structured representation of file paths and their corresponding line-numbered content, typically generated by the `generate_codebase_snapshot` tool. When executed, this tool will parse the input snapshot, create any necessary parent directories if they do not already exist, and then write or completely overwrite the specified files with the provided content. This operation is powerful and can significantly alter the project's state. It is crucial to understand that existing files with matching paths in the snapshot will be entirely replaced by the content in the snapshot, and new files will be created if their paths do not exist. Therefore, this tool should be used with extreme caution, ideally after reviewing the snapshot content and confirming the intended changes. The tool provides a report detailing the success or failure of writing each file, including any errors encountered during directory creation or file writing.")
def write_files_from_snapshot(input_snapshot_content: str, output_directory: str = ".") -> str:
    """
    Reconstructs files and directories from a provided snapshot string. This tool is used to create new files or overwrite existing ones based on the snapshot's content. The snapshot format includes '$filepath' followed by line-numbered code.

    Args:
        input_snapshot_content: The snapshot string with '$filepath' and line-numbered code.
        output_directory: The target directory to write files to. Defaults to '.'.
    """
    commands = parse_multiline_commands(input_snapshot_content)
    if not commands: return "Error: Input snapshot content is empty or invalid."
    os.makedirs(output_directory, exist_ok=True)
    report = []
    files_created = 0
    for file_path, contents in commands.items():
        full_path = os.path.join(output_directory, file_path)
        try:
            parent_dir = os.path.dirname(full_path)
            if parent_dir: os.makedirs(parent_dir, exist_ok=True)
            file_lines = [c for _, c in contents]
            with open(full_path, 'w', encoding='utf-8') as f:
                f.writelines([line + '\n' for line in file_lines])
            files_created += 1
            report.append(f"Successfully wrote {file_path}")
        except Exception as e:
            report.append(f"Error writing file {file_path}: {e}")
    return f"Restorer finished. Created/modified {files_created} files.\n" + "\n".join(report)


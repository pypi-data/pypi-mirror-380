import pytest
import pytest_asyncio
from datetime import datetime

test_configs = [
    {
        "method_name": "serie_chuva",
        "codigo": "2549075",
        "start_datetime": datetime(2014, 1, 1),
        "end_datetime": datetime(2014, 1, 2),
        "ignore_time": True,
        "required_fields": [
            "Chuva_01",
            "Chuva_01_Status",
            "Chuva_02",
            "Chuva_02_Status",
            "Chuva_03",
            "Chuva_03_Status",
            "Chuva_04",
            "Chuva_04_Status",
            "Chuva_05",
            "Chuva_05_Status",
            "Chuva_06",
            "Chuva_06_Status",
            "Chuva_07",
            "Chuva_07_Status",
            "Chuva_08",
            "Chuva_08_Status",
            "Chuva_09",
            "Chuva_09_Status",
            "Chuva_10",
            "Chuva_10_Status",
            "Chuva_11",
            "Chuva_11_Status",
            "Chuva_12",
            "Chuva_12_Status",
            "Chuva_13",
            "Chuva_13_Status",
            "Chuva_14",
            "Chuva_14_Status",
            "Chuva_15",
            "Chuva_15_Status",
            "Chuva_16",
            "Chuva_16_Status",
            "Chuva_17",
            "Chuva_17_Status",
            "Chuva_18",
            "Chuva_18_Status",
            "Chuva_19",
            "Chuva_19_Status",
            "Chuva_20",
            "Chuva_20_Status",
            "Chuva_21",
            "Chuva_21_Status",
            "Chuva_22",
            "Chuva_22_Status",
            "Chuva_23",
            "Chuva_23_Status",
            "Chuva_24",
            "Chuva_24_Status",
            "Chuva_25",
            "Chuva_25_Status",
            "Chuva_26",
            "Chuva_26_Status",
            "Chuva_27",
            "Chuva_27_Status",
            "Chuva_28",
            "Chuva_28_Status",
            "Chuva_29",
            "Chuva_29_Status",
            "Chuva_30",
            "Chuva_30_Status",
            "Chuva_31",
            "Chuva_31_Status",
            "Data_Hora_Dado",
            "Data_Ultima_Alteracao",
            "Dia_Maxima",
            "Maxima",
            "Maxima_Status",
            "Nivel_Consistencia",
            "Numero_Dias_de_Chuva",
            "Numero_Dias_de_Chuva_Status",
            "Tipo_Medicao_Chuvas",
            "Total",
            "Total_Anual",
            "Total_Anual_Status",
            "Total_Status",
            "codigoestacao",
        ],
    },
    {
        "method_name": "serie_cotas",
        "codigo": 65011400,
        "start_datetime": datetime(2014, 1, 1, 0, 0, 0),
        "end_datetime": datetime(2014, 1, 1, 2, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Cota_01",
            "Cota_01_Status",
            "Cota_02",
            "Cota_02_Status",
            "Cota_03",
            "Cota_03_Status",
            "Cota_04",
            "Cota_04_Status",
            "Cota_05",
            "Cota_05_Status",
            "Cota_06",
            "Cota_06_Status",
            "Cota_07",
            "Cota_07_Status",
            "Cota_08",
            "Cota_08_Status",
            "Cota_09",
            "Cota_09_Status",
            "Cota_10",
            "Cota_10_Status",
            "Cota_11",
            "Cota_11_Status",
            "Cota_12",
            "Cota_12_Status",
            "Cota_13",
            "Cota_13_Status",
            "Cota_14",
            "Cota_14_Status",
            "Cota_15",
            "Cota_15_Status",
            "Cota_16",
            "Cota_16_Status",
            "Cota_17",
            "Cota_17_Status",
            "Cota_18",
            "Cota_18_Status",
            "Cota_19",
            "Cota_19_Status",
            "Cota_20",
            "Cota_20_Status",
            "Cota_21",
            "Cota_21_Status",
            "Cota_22",
            "Cota_22_Status",
            "Cota_23",
            "Cota_23_Status",
            "Cota_24",
            "Cota_24_Status",
            "Cota_25",
            "Cota_25_Status",
            "Cota_26",
            "Cota_26_Status",
            "Cota_27",
            "Cota_27_Status",
            "Cota_28",
            "Cota_28_Status",
            "Cota_29",
            "Cota_29_Status",
            "Cota_30",
            "Cota_30_Status",
            "Cota_31",
            "Cota_31_Status",
            "Data_Hora_Dado",
            "Data_Ultima_Alteracao",
            "Dia_Maxima",
            "Dia_Minima",
            "Maxima",
            "Maxima_Status",
            "Media",
            "Media_Anual",
            "Media_Anual_Status",
            "Media_Status",
            "Mediadiaria",
            "Minima",
            "Minima_Status",
            "Tipo_Medicao_Cotas",
            "codigoestacao",
            "nivelconsistencia",
        ],
    },
    {
        "method_name": "serie_vazao",
        "codigo": 65011400,
        "start_datetime": datetime(2014, 1, 1, 0, 0, 0),
        "end_datetime": datetime(2014, 1, 1, 2, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Data_Hora_Dado",
            "Data_Ultima_Alteracao",
            "Dia_Maxima",
            "Dia_Minima",
            "Maxima",
            "Maxima_Status",
            "Media",
            "Media_Anual",
            "Media_Anual_Status",
            "Media_Status",
            "Mediadiaria",
            "Metodo_Obtencao_Vazoes",
            "Minima",
            "Minima_Status",
            "Nivel_Consistencia",
            "Vazao_01",
            "Vazao_01_Status",
            "Vazao_02",
            "Vazao_02_Status",
            "Vazao_03",
            "Vazao_03_Status",
            "Vazao_04",
            "Vazao_04_Status",
            "Vazao_05",
            "Vazao_05_Status",
            "Vazao_06",
            "Vazao_06_Status",
            "Vazao_07",
            "Vazao_07_Status",
            "Vazao_08",
            "Vazao_08_Status",
            "Vazao_09",
            "Vazao_09_Status",
            "Vazao_10",
            "Vazao_10_Status",
            "Vazao_11",
            "Vazao_11_Status",
            "Vazao_12",
            "Vazao_12_Status",
            "Vazao_13",
            "Vazao_13_Status",
            "Vazao_14",
            "Vazao_14_Status",
            "Vazao_15",
            "Vazao_15_Status",
            "Vazao_16",
            "Vazao_16_Status",
            "Vazao_17",
            "Vazao_17_Status",
            "Vazao_18",
            "Vazao_18_Status",
            "Vazao_19",
            "Vazao_19_Status",
            "Vazao_20",
            "Vazao_20_Status",
            "Vazao_21",
            "Vazao_21_Status",
            "Vazao_22",
            "Vazao_22_Status",
            "Vazao_23",
            "Vazao_23_Status",
            "Vazao_24",
            "Vazao_24_Status",
            "Vazao_25",
            "Vazao_25_Status",
            "Vazao_26",
            "Vazao_26_Status",
            "Vazao_27",
            "Vazao_27_Status",
            "Vazao_28",
            "Vazao_28_Status",
            "Vazao_29",
            "Vazao_29_Status",
            "Vazao_30",
            "Vazao_30_Status",
            "Vazao_31",
            "Vazao_31_Status",
            "codigoestacao",
        ],
    },
    {
        "method_name": "serie_curva_descarga",
        "codigo": 12360000,
        "start_datetime": datetime(2024, 1, 1, 0, 0, 0),
        "end_datetime": datetime(2024, 12, 31, 0, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Coef_a",
            "Coef_h0",
            "Coef_n",
            "Coefa_0",
            "Coefa_1",
            "Coefa_2",
            "Coefa_3",
            "Cota_Maxima",
            "Cota_Minima",
            "Data_Ultima_Alteracao",
            "Nivel_Consistencia",
            "Numero_Curva",
            "Periodo_Validade_Fim",
            "Periodo_Validade_Inicio",
            "Tabela_Passo_Cota",
            "Tipo_Curva",
            "Tipo_Equacao",
            "codigoestacao",
        ],
    },
    {
        "method_name": "serie_perfil_transversal",
        "codigo": 12360000,
        "start_datetime": datetime(2024, 9, 4, 0, 0, 0),
        "end_datetime": datetime(2024, 9, 5, 0, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Cota",
            "Data_Hora_Medicao",
            "Data_Ultima_Alteracao",
            "Distancia",
            "Distancia_pipf",
            "Eixo_X_Dist_Maxima",
            "Eixo_X_Dist_Minima",
            "Eixo_Y_Cota_Maxima",
            "Eixo_Y_Cota_Minima",
            "Elm_Geom_Passo_Cota",
            "Nivel_Consistencia",
            "Num_Levantamento",
            "Num_Verticais",
            "Observacoes",
            "Registro_ID",
            "Tipo_Secao",
            "codigoestacao",
            "verticais",
        ],
    },
    {
        "method_name": "serie_resumo_descarga",
        "codigo": 12360000,
        "start_datetime": datetime(2025, 5, 1, 0, 0, 0),
        "end_datetime": datetime(2025, 5, 2, 0, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Area_Molhada (m2)",
            "Cota (cm)",
            "Data_Hora_Dado",
            "Data_Ultima_Alteracao",
            "Largura (m)",
            "Nivel_Consistencia",
            "Profundidade (m)",
            "Vazao (m3/s)",
            "Vel_Media (m/s)",
            "codigoestacao",
        ],
    },
    {
        "method_name": "serie_sedimentos",
        "codigo": 24200000,
        "start_datetime": datetime(2005, 11, 11, 0, 0, 0),
        "end_datetime": datetime(2005, 11, 12, 0, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "Area_Molhada",
            "Concentracao_PPM",
            "Concentracao_da_Amostra_Extra",
            "Condutividade_Eletrica",
            "Cota_cm",
            "Cota_de_Mediacao",
            "Data_Hora_Dado",
            "Data_Hora_Medicao_Liquida",
            "Data_Ultima_Alteracao",
            "Largura",
            "Nivel_Consistencia",
            "Numero_Medicao",
            "Numero_Medicao_Liquida",
            "Observacoes",
            "Temperatura_da_Agua",
            "Vazao_m3_s",
            "Vel_Media",
            "codigoestacao",
        ],
    },
    {
        "method_name": "serie_qualidade_agua",
        "codigo": 12360000,
        "start_datetime": datetime(2017, 10, 24, 0, 0, 0),
        "end_datetime": datetime(2017, 10, 25, 0, 0, 0),
        "ignore_time": False,
        "required_fields": [
            "100_2_4_5_t_mgl",
            "100_Status",
            "101_2_4_5_tp_mgl",
            "101_Status",
            "102_2_4_6_Triclorofenol_mgl",
            "102_Status",
            "103_Acido_2_4_Diclorofenoxiacetico_mgl",
            "103_Status",
            "104_Aldrin_mgl",
            "104_Status",
            "105_Azinfosetil_mgl",
            "105_Status",
            "106_Benzeno_mgl",
            "106_Status",
            "107_Benzoapireno_mgl",
            "107_Status",
            "108_BHC_mgl",
            "108_Status",
            "109_Bifenilaspolicloradas_mgl",
            "109_Status",
            "10_Escherichiacoli_ufc_100ml",
            "10_Status",
            "110_Carbaril_mgl",
            "110_Status",
            "111_Clordano_mgl",
            "111_Status",
            "112_DDEPP_mgl",
            "112_Status",
            "113_DDT_mgl",
            "113_Status",
            "114_Demeton_mgl",
            "114_Status",
            "115_Diazinon_mgl",
            "115_Status",
            "116_Dieldrin_mgl",
            "116_Status",
            "117_Dodecaclorononacloro_mgl",
            "117_Status",
            "118_Dysystondisulfton_mgl",
            "118_Status",
            "119_Endossulfan_mgl",
            "119_Status",
            "11_Fitoplancton_Quantitativo_celulas_100ml",
            "11_Status",
            "120_Endrin_mgl",
            "120_Status",
            "121_Epoxidoheptacloro_mgl",
            "121_Status",
            "122_Ethion_mgl",
            "122_Status",
            "123_Gution_mgl",
            "123_Status",
            "124_Heptacloro_mgl",
            "124_Status",
            "125_Lindano_mgl",
            "125_Status",
            "126_Malation_mgl",
            "126_Status",
            "127_Metilparation_mgl",
            "127_Status",
            "128_Metoxicloro_mgl",
            "128_Status",
            "129_Paration_mgl",
            "129_Status",
            "12_Fosforo_Total_mgl)",
            "12_Status",
            "130_Pentaclorofenol_mgl",
            "130_Status",
            "131_Phosdrin_mgl",
            "131_Status",
            "132_Status",
            "132_Tetra_Cloreto_Carbono_mgl",
            "133_Status",
            "133_Tetra_Cloro_Eteno_mgl",
            "134_Status",
            "134_Toxafeno_mgl",
            "135_Status",
            "135_Tricloro_Eteno_mgl",
            "136_Algas_n_upa_ml",
            "136_Status",
            "137_Amoniaco_mgl",
            "137_Status",
            "138_Bacterias_Heterotroficas_ufc_ml",
            "138_Status",
            "139_Cloro_Residual_mgl",
            "139_Status",
            "13_Nitratos_mgl_n)",
            "13_Status",
            "140_Colifagos_nmp_100ml",
            "140_Status",
            "141_Contagem_Bacterias_Placa_ufc_ml",
            "141_Status",
            "142_Entero_Bacterias_Patogenicas_n_org_ml",
            "142_Status",
            "143_Fungos_ufc_ml",
            "143_Status",
            "144_Nitrogenio_Albuminoide_mgl",
            "144_Status",
            "145_Protozoarios_n_org_ml",
            "145_Status",
            "146_Salmonelas_nmp_ml",
            "146_Status",
            "147_Status",
            "147_Zooplanctontotal_n_org_ml",
            "14_Nitrogenio_Amoniacal_mgl",
            "14_Status",
            "15_Nitrogenio_Total_mgl_n",
            "15_Status",
            "16_Ortofosfato_Total_mgl_po4",
            "16_Status",
            "17_OD_mgl_02",
            "17_Status",
            "18_PH",
            "18_Status",
            "19_Soldissolvidos_Totais_mgl",
            "19_Status",
            "1_Alcalinidade_Total_mgl_caco3",
            "1_Status",
            "20_Solsuspensao_Totais_mgl",
            "20_Status",
            "21_Status",
            "21_Temperatura_Amostra_c",
            "22_Status",
            "22_Tempar_c",
            "23_Status",
            "23_Transparencia_m",
            "24_Status",
            "24_Turbidez_ntu",
            "25_Acidez_mgl_caco3",
            "25_Status",
            "26_Alcalinidade_CO3_mgl",
            "26_Status",
            "27_Alcalinidade_HCO3_mgl",
            "27_Status",
            "28_Alcalinidade_OH_mgl",
            "28_Status",
            "29_Aluminio_Dissolvido_mgl",
            "29_Status",
            "2_Carbono_Organico_Total_mgl",
            "2_Status",
            "30_Aluminio_mgl_al",
            "30_Status",
            "31_Amonia_Nao_Ionizavel_mgl_nh3",
            "31_Status",
            "32_Arsenio_mgl",
            "32_Status",
            "33_Bario_mgl_ba",
            "33_Status",
            "34_Berilio_mgl",
            "34_Status",
            "35_Bismuto_Total_mgl",
            "35_Status",
            "36_Borodissolvido_mgl",
            "36_Status",
            "37_Boro_mgl_b",
            "37_Status",
            "38_Cadmio_mgl_cd",
            "38_Status",
            "39_Calcio_Total_mgl",
            "39_Status",
            "3_Cloretos_mgl_cl",
            "3_Status",
            "40_Chumbo_mgl",
            "40_Status",
            "41_Cianeto_Livre_mgl",
            "41_Status",
            "42_Cianetos_mgl_cn",
            "42_Status",
            "43_Cobalto_mgl_co",
            "43_Status",
            "44_Cobre_Dissolvido_mgl",
            "44_Status",
            "45_Cobre_mgl_cu",
            "45_Status",
            "46_Coliformes_Fecais_nmp_100ml",
            "46_Status",
            "47_Coliformes_Totais_nmp_100ml",
            "47_Status",
            "48_Compostos_Organo_Clorados_mgl",
            "48_Status",
            "49_Compostos_Organo_Fosforados_mgl",
            "49_Status",
            "4_Clorofila_ugl",
            "4_Status",
            "50_Condutivida_de_Eletrica_us_cm_a_20c",
            "50_Status",
            "51_COR_mg_pt_col",
            "51_Status",
            "52_Cromo_Hexavalente_mgl",
            "52_Status",
            "53_Cromo_Total_mgl_cr",
            "53_Status",
            "54_Cromo_Trivalente_mgl",
            "54_Status",
            "55_Densidade_Ciano_Bacterias_cel_ml",
            "55_Status",
            "56_Detergentes_mgl_las",
            "56_Status",
            "57_Dureza_mgl_caco3",
            "57_Status",
            "58_Dureza_Magnesio_mgl_mgco3",
            "58_Status",
            "59_Dureza_Total_mgl",
            "59_Status",
            "5_Coliformes_Termo_Tolerantes_ufc_100ml",
            "5_Status",
            "60_Estanho_mgl",
            "60_Status",
            "61_Estreptococos_Fecais_nmp_100ml",
            "61_Status",
            "62_Ferro_Dissolvido_mgl",
            "62_Status",
            "63_Ferro_Total_mgl",
            "63_Status",
            "64_Fluoretos_mgl",
            "64_Status",
            "65_Fosfato_Total_mgl",
            "65_Status",
            "66_Hidrocarbonetos_mgl",
            "66_Status",
            "67_Indicefenois_mgl_c6h5oh",
            "67_Status",
            "68_IQA",
            "68_Status",
            "69_Litio_mgl",
            "69_Status",
            "6_Condutividade_Especifica_25oc_us_cm_a_25c",
            "6_Status",
            "70_Magnesio_Total_mgl",
            "70_Status",
            "71_Manganes_mgl",
            "71_Status",
            "72_Mercurio_mgl",
            "72_Status",
            "73_Niquel_mgl",
            "73_Status",
            "74_Nitritos_mgl",
            "74_Status",
            "75_Nitrogenio_Organico_mgl",
            "75_Status",
            "76_Nitrogenio_Total_kjeldahl_mgl",
            "76_Status",
            "77_Oleos_graxas_mgl",
            "77_Status",
            "78_OD_perc_saturacao",
            "78_Status",
            "79_Potassio_Total_mgl",
            "79_Status",
            "7_DBO_mgl_02)",
            "7_Status",
            "80_Prata_mgl",
            "80_Status",
            "81_Parametro_Profundidade_m",
            "81_Status",
            "82_Selenio_mgl",
            "82_Status",
            "83_Silicadissolvida_mgl",
            "83_Status",
            "84_Sodiototal_mgl",
            "84_Status",
            "85_Soldissolvidos_Fixos_mgl_a_180c)",
            "85_Status",
            "86_Soldissolvidos_Volateis_mgl",
            "86_Status",
            "87_Sol_Suspensao_Fixos_mgl",
            "87_Status",
            "88_Sol_Suspensao_Volateis_mgl",
            "88_Status",
            "89_Solfixos_mgl",
            "89_Status",
            "8_Descarga_Liquida_m3s",
            "8_Status",
            "90_Sol_sedimentaveis_mgl",
            "90_Status",
            "91_Sol_totais_mgl",
            "91_Status",
            "92_Sol_Volateis_mgl",
            "92_Status",
            "93_Status",
            "93_Sulfatos_mgl",
            "94_Status",
            "94_Sulfetos_mgl",
            "95_Status",
            "95_Uranio_Total_mgl",
            "96_Status",
            "96_Vanadio_mgl",
            "97_Status",
            "97_Zinco_mgl",
            "98_1_1_Dicloroeteno_mgl",
            "98_Status",
            "99_1_2_Dicloroetano_mgl",
            "99_Status",
            "9_DQO_mgl_02)",
            "9_Status",
            "Choveu",
            "Data_Hora_Dado",
            "Data_Ultima_Alteracao",
            "Nilvel_ConsistÃªncia",
            "Num_Medicao",
            "Posicao_Horizontal_Coleta",
            "Posicao_Vertical_Coleta",
            "Profundidade_m",
            "codigoestacao",
        ],
    },
]


@pytest_asyncio.fixture(
    scope="module", params=test_configs, ids=[c["method_name"] for c in test_configs]
)
async def series_data(request, client):
    config = request.param
    df = await getattr(client, config["method_name"])(
        codigo=config["codigo"],
        start_datetime=config["start_datetime"],
        end_datetime=config["end_datetime"],
        ignore_time=config["ignore_time"],
    )
    return config, df


@pytest.mark.asyncio
async def test_not_empty(series_data):
    config, df = series_data
    assert not df.empty, (
        f"No data found for {config['method_name']} with codigo {config['codigo']}"
    )


@pytest.mark.asyncio
async def test_code_filter(series_data):
    config, df = series_data
    assert all(df["codigoestacao"] == str(config["codigo"])), (
        f"Some rows do not match codigo {config['codigo']}"
    )


@pytest.mark.asyncio
async def test_date_range(series_data):
    config, df = series_data
    if config["method_name"] == "serie_curva_descarga":
        field_name = "Periodo_Validade_Inicio"
    elif config["method_name"] == "serie_perfil_transversal":
        field_name = "Data_Hora_Medicao"
    else:
        field_name = "Data_Hora_Dado"

    for date_str in df[field_name]:
        date = datetime.strptime(date_str[:19], "%Y-%m-%d %H:%M:%S")
        if config["ignore_time"]:
            assert (
                config["start_datetime"].date()
                <= date.date()
                <= config["end_datetime"].date()
            ), f"Date {date} is out of range"
        else:
            assert config["start_datetime"] <= date <= config["end_datetime"], (
                f"Date {date} is out of range"
            )


@pytest.mark.asyncio
async def test_required_fields(series_data):
    config, df = series_data
    for field in config["required_fields"]:
        assert field in df.columns, f"Field {field} is missing"

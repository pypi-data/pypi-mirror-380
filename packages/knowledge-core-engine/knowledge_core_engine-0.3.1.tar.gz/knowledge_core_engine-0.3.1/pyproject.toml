[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "knowledge-core-engine"
version = "0.3.1"
description = "Next-generation knowledge base engine with advanced RAG capabilities"
readme = "README.md"
authors = [
    {name = "Zephyr Sailor", email = "zephyrsailor0715@gmail.com"}
]
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "llama-index>=0.10.0",
    "llama-index-llms-openai>=0.1.0",
    "llama-index-embeddings-dashscope>=0.1.0",
    "llama-index-vector-stores-chroma>=0.1.0",
    "llama-parse>=0.4.0",
    
    # API framework
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Vector database
    "chromadb>=0.4.22",
    
    # Document processing
    "pymupdf>=1.23.0",
    "python-docx>=1.1.0",
    "beautifulsoup4>=4.12.0",
    "markdownify>=0.11.0",
    
    # Text processing
    "bm25s>=0.1.0",  # Fast and lightweight BM25 implementation
    "mineru[core]>=0.2.0",
    
    # LLM providers
    "dashscope>=1.14.0",
    "openai>=1.12.0",  # For DeepSeek API compatibility
    
    # Utilities
    "python-dotenv>=1.0.0",
    "httpx>=0.26.0",
    "tenacity>=8.2.0",
    "loguru>=0.7.0",
    "tqdm>=4.66.0",
    
    # Evaluation
    "ragas>=0.1.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "reportlab>=4.4.3",

]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

huggingface = [
    # For local model deployment
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.3.0",
]

reranker-hf = [
    # For HuggingFace reranker models
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "FlagEmbedding>=1.2.0",  # For BGE models (recommended)
    "sentence-transformers>=2.2.0",  # Alternative for BGE models
]

elasticsearch = [
    # For Elasticsearch BM25 support
    "elasticsearch>=8.0.0",
]

[project.urls]
"Homepage" = "https://github.com/zephyrsailor/knowledge-core-engine"
"Bug Reports" = "https://github.com/zephyrsailor/knowledge-core-engine/issues"
"Source" = "https://github.com/zephyrsailor/knowledge-core-engine"

[project.scripts]
k-engine = "knowledge_core_engine.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
knowledge_core_engine = ["py.typed"]

[tool.ruff]
target-version = "py39"
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["knowledge_core_engine"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = [
    "--verbose",
    "--cov=knowledge_core_engine",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--asyncio-mode=auto",
]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/knowledge_core_engine"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
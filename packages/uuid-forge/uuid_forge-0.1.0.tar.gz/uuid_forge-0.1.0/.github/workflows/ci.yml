name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for hatch-vcs versioning

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --all-groups

      - name: Run tests with coverage
        run: |
          uv run pytest --cov=uuid_forge --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run ruff
        run: |
          uv run ruff check src tests

      - name: Run mypy
        run: |
          uv run mypy src

      - name: Check formatting
        run: |
          uv run ruff format --check src tests

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --group docs

      - name: Build documentation
        run: |
          uv run mkdocs build --strict

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: site/

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: [test, lint, docs]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'release' && github.event.action == 'published')
    permissions:
      contents: write # Needed to push to gh-pages branch

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --group docs

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Deploy documentation with mike
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, use the tag version
            VERSION="${GITHUB_REF#refs/tags/}"
            uv run mike deploy --push --update-aliases $VERSION latest
            uv run mike set-default --push latest
          else
            # For main branch pushes, deploy as dev version
            uv run mike deploy --push dev
          fi

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, lint]
    # Only publish to PyPI on actual releases (tags), not on main branch pushes
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/uuid-forge
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.11

      - name: Build and publish to PyPI
        run: |
          uv build
          uv publish

  publish-test-pypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [test, lint]
    # Publish development versions to TestPyPI (allows local version identifiers)
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feat')
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/uuid-forge
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python
        run: uv python install 3.11

      - name: Build and publish to TestPyPI
        run: |
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/
          echo "TestPyPI publish completed"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'release' && github.event.action == 'published' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: darth-veitcher/uuid-forge
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

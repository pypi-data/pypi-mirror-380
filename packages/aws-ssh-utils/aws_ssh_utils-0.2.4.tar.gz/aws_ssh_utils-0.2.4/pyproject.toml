[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aws-ssh-utils"
description = "Easy AWS SSHing"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "Michiel Vanderlee", email = "jmt.vanderlee@gmail.com" },
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
  "boto3",
  "click",
  "click_spinner",
  "coloredlogs",
  "environs",
  "loguru",
  "paramiko",
  "questionary",
  "typing_extensions",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/mvanderlee/aws-ssh-utils"

[project.scripts]
aws_ssh = "aws_ssh_utils.ssh:cli"

[project.optional-dependencies]

dev = [
  "boto3-stubs[ec2,emr]",
]
test = [
]
publish = [
  "hatch >= 1.7.0",
]

[tool.hatch.build]
include = [
  "aws_ssh_utils",
]

[tool.hatch.version]
path = "aws_ssh_utils/__init__.py"


[tool.coverage.run]
parallel = true
source = [
  "aws_ssh_utils"
]

[tool.autopep8]
max_line_length = 130

[tool.ruff]
exclude = [
    "*.ipynb",
    "**/_version.py",
]
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "S",  # flake8-bandit
    "COM",  # flake8-commas
    "ISC",  # flake8-implicit-str-concat
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
]
lint.ignore = [
    "B008",  # do not perform function calls in argument defaults
    "B028",  # No explicit stacklevel argument found.
    "C408",  # unnecessary-collection-call - Rewrite as a literal
    "C901",  # too complex
    "PT003",  # pytest-extraneous-scope-function

    # TODO: remove
    "A002",  # builtin-argument-shadowing
    "PT011",  # pytest-raises-too-broad
    "N818",  # error-suffix-on-exception-name

    # Unsure, need more data
    "SIM117",  # multiple-with-statements - In general good, but sometimes becomes harder to read, i.e.: aiohttp?
]
# The formatter wraps lines at a length of 88.
line-length = 130  # Enforce 130. But ~100 is recommended.

[tool.ruff.lint.pycodestyle]
max-line-length = 150  # E501 reports lines that exceed the length of 150.

[tool.ruff.format]
quote-style = "preserve"  # Don't change quotes - https://docs.astral.sh/ruff/settings/#format_quote-style

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = []

[tool.pytest.ini_options]
# https://pytest-asyncio.readthedocs.io/en/latest/reference/configuration.html
asyncio_mode = "auto"
asyncio_default_test_loop_scope = "session"
asyncio_default_fixture_loop_scope = "session"

[tool.pyright]
venvPath = "."
venv = ".venv"

include = [
    "aws_ssh_utils/",
]

pythonVersion = "3.11"

# basedpyright exclusions
reportAny = "none"
reportUnreachable = "none"
reportExplicitAny = "none"
reportUnusedCallResult = "none"
reportUnknownMemberType = "none"
reportUnusedParameter = "none"
reportUntypedFunctionDecorator = "none"
reportMissingTypeStubs = "none"
reportUnknownVariableType = "none"
reportImplicitStringConcatenation = "none"

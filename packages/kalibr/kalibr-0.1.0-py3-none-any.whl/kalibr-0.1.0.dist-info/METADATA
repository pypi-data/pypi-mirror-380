Metadata-Version: 2.4
Name: kalibr
Version: 0.1.0
Summary: Connect any API to AI platforms in 10 lines of code
Home-page: https://github.com/yourusername/kalibr-sdk
Author: Your Name
Author-email: your.email@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.28.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn>=0.20.0
Requires-Dist: httpx>=0.24.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary


# Kalibr SDK Docs

Kalibr makes your SaaS agent-ready.  
Define your API once and Kalibr compiles connectors for ChatGPT, Claude, and more.  
Our MVP works today with GPT and Claude. The universal proxy makes your API callable in minutes.

---

## Quickstart (MVP)

### Install
```bash
pip install kalibr-sdk

Your First Integration

from kalibr_sdk import Kalibr

# Connect your backend
k = Kalibr()
k.connect("https://api.airtable.com", api_key="key123")

# Register actions
k.register_tool("create_record", "/v0/base123/Table", "POST")
k.register_tool("search_records", "/v0/base123/Table", "GET")

# Deploy
k.deploy()

What Happens
	‚Ä¢	Kalibr spins up the universal proxy
	‚Ä¢	Exposes your API at public URLs via ngrok
	‚Ä¢	Generates platform configs (OpenAPI for GPT, MCP for Claude)
	‚Ä¢	You copy the configs into ChatGPT or Claude ‚Üí your API works

‚∏ª

Demo Experience

With 5‚Äì7 lines of code:
	‚Ä¢	Your API works with ChatGPT and Claude
	‚Ä¢	No platform-specific code
	‚Ä¢	Real requests hit your production backend

Example:
	‚Ä¢	ChatGPT ‚Üí ‚ÄúAdd a contact to my CRM‚Äù
	‚Ä¢	Claude ‚Üí ‚ÄúSearch for customers from Microsoft‚Äù

Both hit your Airtable API through Kalibr.

‚∏ª

Current Status (MVP)

GPT Actions (OpenAPI) working
Claude MCP working
Universal proxy live (local + ngrok)
Register actions once, run on multiple models

‚∏ª

What‚Äôs Next

With funding + partners, we‚Äôll expand:
	‚Ä¢	Hosted proxy (multi-tenant, secure, SOC2)
	‚Ä¢	More platforms (Gemini, Azure Copilot, Assistants)
	‚Ä¢	Normalization layer (auth, error codes, schema drift)
	‚Ä¢	Drift detection (auto-patch when providers change)
	‚Ä¢	Auto-registration (where platforms support it)

‚∏ª

Roadmap

MVP (today)
	‚Ä¢	Local proxy + SDK
	‚Ä¢	GPT + Claude connectors
	‚Ä¢	Design partner pilots

Phase 2 (3‚Äì6 months)
	‚Ä¢	Hosted proxy (AWS/GCP/Azure)
	‚Ä¢	Multi-tenant infra
	‚Ä¢	OAuth + advanced auth handling
	‚Ä¢	Gemini + Azure Copilot support

Phase 3 (12‚Äì18 months)
	‚Ä¢	Auto-registration
	‚Ä¢	Normalization at scale
	‚Ä¢	Drift detection + monitoring
	‚Ä¢	Compliance, reliability, uptime SLAs

‚∏ª

Design Partner Program

We‚Äôre onboarding a small group of SaaS design partners to shape Kalibr.

Design partners get:
	‚Ä¢	Early SDK access
	‚Ä¢	Forward-deployed engineering support
	‚Ä¢	Roadmap influence
	‚Ä¢	Preferred pricing

üì© Contact: hello@kalibr.systems

This is clean, Markdown-friendly, and looks normal to a developer.  

Want me to also scaffold an **`examples/` folder with one Airtable example** so it looks even more real on GitHub, or do you want to keep it super minimal for now?

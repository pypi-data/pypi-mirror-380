Metadata-Version: 2.4
Name: mcp-server-jira
Version: 0.1.1
Summary: A Model Context Protocol server providing Jira integration tools for LLMs
Project-URL: Homepage, https://github.com/your-username/mcp-jira-v3
Project-URL: Repository, https://github.com/your-username/mcp-jira-v3
Project-URL: Issues, https://github.com/your-username/mcp-jira-v3/issues
Project-URL: Documentation, https://github.com/your-username/mcp-jira-v3#readme
Project-URL: Changelog, https://github.com/your-username/mcp-jira-v3/releases
Author-email: Your Name <your-email@example.com>
License: MIT
License-File: LICENSE
Keywords: atlassian,automation,issues,jira,jql,llm,mcp,model-context-protocol,transitions,worklog
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Office/Business
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Systems Administration
Requires-Python: >=3.10
Requires-Dist: httpx>=0.25.0
Requires-Dist: mcp>=1.0.0
Requires-Dist: pydantic>=2.0.0
Description-Content-Type: text/markdown

# Jira Um servidor Model Context Protocol (MCP) que fornece integra√ß√£o com Jira, permitindo que LLMs interajam com issues, executem transi√ß√µes, adicionem worklogs e realizem buscas usando a API REST do Jira.

## üì¶ Instala√ß√£o

### Via PyPI (Recomendado)
```bash
pip install mcp-server-jira
```

### Via GitHub
```bash
pip install git+https://github.com/your-username/mcp-jira-v3.git
```

### Desenvolvimento
```bash
git clone https://github.com/your-username/mcp-jira-v3.git
cd mcp-jira-v3
pip install -e .
```

## üöÄ Uso R√°pido

```bash
# Executar com token padr√£o
mcp-server-jira --jira-token "SEU_TOKEN_AQUI"

# Executar com URL customizada
mcp-server-jira --jira-base-url "https://jira.sua-empresa.com" --jira-token "SEU_TOKEN"

# Ajuda
mcp-server-jira --help
```

## üìã O que √© o Projeto Server

[![PyPI version](https://badge.fury.io/py/mcp-server-jira.svg)](https://badge.fury.io/py/mcp-server-jira)
[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Downloads](https://pepy.tech/badge/mcp-server-jira)](https://pepy.tech/project/mcp-server-jira)

Um servidor Model Context Protocol (MCP) que fornece integra√ß√£o com Jira, permitindo que LLMs interajam com issues, executem transi√ß√µes, adicionem worklogs e realizem buscas usando a API REST do Jira.

## ÔøΩ O que √© o Projeto

Este √© um servidor MCP que atua como ponte entre Large Language Models (LLMs) e o Jira, oferecendo automa√ß√£o de tarefas e consultas atrav√©s de comandos em linguagem natural.

## ‚ö° Funcionalidades

O servidor oferece 5 ferramentas principais:

### 1. `get_issue` - Consultar Issue
- **A√ß√£o**: Obt√©m informa√ß√µes detalhadas de uma issue do Jira
- **Par√¢metros**: `issue_key` (ex: "PROJ-123"), `token` (opcional)

### 2. `get_transitions` - Listar Transi√ß√µes
- **A√ß√£o**: Lista transi√ß√µes dispon√≠veis para uma issue
- **Par√¢metros**: `issue_key`, `token` (opcional)

### 3. `transition_issue` - Executar Transi√ß√£o
- **A√ß√£o**: Executa uma transi√ß√£o na issue (muda status)
- **Par√¢metros**: `issue_key`, `transition_id`, `token` (opcional)

### 4. `add_worklog` - Adicionar Worklog
- **A√ß√£o**: Adiciona registro de trabalho √† issue
- **Par√¢metros**: `issue_key`, `time_spent` (ex: "2h 30m"), `description`, `token` (opcional)

### 5. `search_issues` - Buscar Issues
- **A√ß√£o**: Busca issues usando JQL (Jira Query Language)
- **Par√¢metros**: `jql` (ex: "assignee = currentUser()"), `token` (opcional)

## üèóÔ∏è Arquitetura do Programa

```
mcp-jira-v3/
‚îú‚îÄ‚îÄ src/mcp_server_jira/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py          # Entry point com fun√ß√£o main()
‚îÇ   ‚îî‚îÄ‚îÄ server.py            # JiraServer class com 5 ferramentas MCP
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îî‚îÄ‚îÄ jira_server_test.py  # Testes unit√°rios completos
‚îú‚îÄ‚îÄ pyproject.toml           # Configura√ß√£o do projeto e depend√™ncias
‚îî‚îÄ‚îÄ dist/
    ‚îî‚îÄ‚îÄ mcp_server_jira-0.1.0.tar.gz  # Pacote de distribui√ß√£o (12.9 KB)
```

**Arquitetura Interna:**
- **JiraServer**: Classe principal que implementa o servidor MCP
- **Modelos Pydantic**: JiraIssue, JiraTransition, WorklogResult, etc.
- **Cliente HTTP**: httpx com SSL bypass para ambientes corporativos
- **Autentica√ß√£o Flex√≠vel**: Token padr√£o configur√°vel + token por requisi√ß√£o

## üõ†Ô∏è Bibliotecas e Frameworks

### Depend√™ncias Principais
- **`mcp>=1.0.0`** - Model Context Protocol framework
- **`pydantic>=2.0.0`** - Valida√ß√£o de dados e modelos
- **`httpx>=0.25.0`** - Cliente HTTP ass√≠ncrono

### Depend√™ncias de Desenvolvimento
- **`pytest>=8.3.3`** - Framework de testes

### Caracter√≠sticas T√©cnicas
- **Python 3.10+** - Vers√£o m√≠nima suportada
- **Async/Await** - Programa√ß√£o ass√≠ncrona
- **Type Hints** - Tipagem completa
- **SSL Bypass** - Para ambientes corporativos

## üîß Como Configurar Ambiente de DEV

### 1. Preparar Ambiente
```bash
# Clone o reposit√≥rio
git clone <repo-url>
cd mcp-jira-v3

# Instalar Python 3.10+
# Verificar vers√£o
python --version
```

### 2. Instalar Depend√™ncias
```bash
# Instalar em modo de desenvolvimento
pip install -e .

# Instalar depend√™ncias de teste
pip install pytest
```

### 3. Obter Token Jira
1. Acesse sua conta Jira
2. V√° em **Configura√ß√µes** ‚Üí **Seguran√ßa** ‚Üí **Tokens de API**
3. Crie um novo token
4. Copie o token gerado

## üì¶ Como Instalar a Aplica√ß√£o

### Instala√ß√£o via Pacote Distribu√≠do
```bash
# Instalar do arquivo .tar.gz
pip install mcp_server_jira-0.1.0.tar.gz

# Verificar instala√ß√£o
mcp-server-jira --help
```

### Verificar Instala√ß√£o
```bash
# Testar comando b√°sico
mcp-server-jira --jira-base-url "https://jira.exemplo.com" --jira-token "SEU_TOKEN"
```

## ‚ñ∂Ô∏è Como Executar a Aplica√ß√£o

### Execu√ß√£o B√°sica
```bash
# Com URL padr√£o (https://jira.telefonica.com.br)
mcp-server-jira --jira-token "SEU_TOKEN_AQUI"

# Com URL customizada
mcp-server-jira --jira-base-url "https://jira.sua-empresa.com" --jira-token "SEU_TOKEN"

# Sem token padr√£o (fornecido por requisi√ß√£o)
mcp-server-jira --jira-base-url "https://jira.sua-empresa.com"
```

### Par√¢metros Dispon√≠veis
- `--jira-base-url`: URL base do Jira (padr√£o: https://jira.telefonica.com.br)
- `--jira-token`: Token de autentica√ß√£o (opcional, pode ser fornecido por requisi√ß√£o)

## üß™ Como Testar a Aplica√ß√£o

### Executar Testes Unit√°rios
```bash
# Rodar todos os testes
pytest test/ -v

# Rodar testes espec√≠ficos
pytest test/jira_server_test.py::TestValidationFunctions -v
```

### Testar Funcionalidade Manualmente
```bash
# Testar ajuda
mcp-server-jira --help

# Testar conex√£o (substitua pelo seu token)
mcp-server-jira --jira-token "SEU_TOKEN_REAL"
```

## ‚öôÔ∏è Configura√ß√£o MCP no VS Code

### Configura√ß√£o Local (Projeto Espec√≠fico)

1. **Criar arquivo de configura√ß√£o local:**
```bash
mkdir .vscode
nano .vscode/mcp.json
```

2. **Adicionar configura√ß√£o no `.vscode/settings.json`:**
```json
{
	"servers": {
		"mcp-jira-dev":  {
           "command": "py",
             "args": ["-m", "mcp_server_jira", "--jira-token", "SEU TOKEN"]

    }
	},
	"inputs": []
}
```

### Configura√ß√£o Global (Todos os Projetos)

1. **Abrir configura√ß√µes globais do VS Code:**
   - Pressione `Ctrl+Shift+P` (Windows/Linux) ou `Cmd+Shift+P` (Mac)
   - Digite "Preferences: Open User Settings (JSON)"
   - Selecione para abrir o `settings.json` ou `mcp.json` global

2. **Adicionar configura√ß√£o no settings.json global:**
```json
{
	"servers": {
		"mcp-jira-dev":  {
           "command": "py",
             "args": ["-m", "mcp_server_jira", "--jira-token", "SEU TOKEN"]

    }
	},
	"inputs": []
}
```

### Configura√ß√£o Sem Token Padr√£o (Mais Seguro)
```json
{
	"servers": {
		"mcp-jira-dev":  {
           "command": "py",
             "args": ["-m", "mcp_server_jira"]

    }
	},
	"inputs": []
}
```
*Com esta configura√ß√£o, voc√™ fornecer√° o token a cada uso das ferramentas.*

## üìã Informa√ß√µes do Projeto

- **Vers√£o**: 0.1.0
- **Tamanho**: 12.9 KB
- **Licen√ßa**: MIT
- **Python**: 3.10+
Metadata-Version: 2.4
Name: hypofuzz
Version: 25.9.2
Summary: Adaptive fuzzing for property-based tests
Author-email: Zac Hatfield-Dodds <zac@hypofuzz.com>
Project-URL: homepage, https://hypofuzz.com/
Project-URL: source, https://github.com/Zac-HD/hypofuzz
Project-URL: documentation, https://hypofuzz.com/docs/
Project-URL: changelog, https://hypofuzz.com/docs/changelog.html
Keywords: python,testing,fuzzing,property-based-testing
Classifier: Development Status :: 5 - Production/Stable
Classifier: Framework :: Hypothesis
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: License :: Free for non-commercial use
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development :: Testing
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: CONTRIBUTING.md
Requires-Dist: black>=23.3.0
Requires-Dist: coverage>=5.2.1
Requires-Dist: hypothesis[cli,watchdog]>=6.140.2
Requires-Dist: libcst>=1.0.0
Requires-Dist: psutil>=3.0.0
Requires-Dist: pytest>=7.0.0
Requires-Dist: starlette
Requires-Dist: trio
Requires-Dist: hypercorn
Dynamic: license-file

# [HypoFuzz](https://hypofuzz.com/)

*Adaptive fuzzing of [Hypothesis](https://hypothesis.readthedocs.io) tests.*


Property-based approaches help you to write better tests which find more bugs,
but don't have great ways to exchange much more CPU time for more bugs.
The goal of this project is to bring togther the best parts of fuzzing and PBT.


## Motivation

You can [run a traditional fuzzer](https://hypothesis.readthedocs.io/en/latest/details.html#use-with-external-fuzzers)
like AFL on Hypothesis tests to get basic coverage guidance.  This works OK, but there's
a lot of performance overhead.  Installing, configuring, and connecting all the parts is
a pain, and because it assumes one fuzz target per core you probably can't scale up far
enough to fuzz your whole test suite.

Alternatively, you can just run Hypothesis with a large `max_examples` setting.
This also works pretty well, but doesn't get the benefits of coverage guidance and
you have to guess how long it'll take to run the tests - each gets the same budget.

HypoFuzz solves all of these problems, and more!


## Features

- Interleave execution of many test functions
- Prioritise functions where we expect to make progress
- Coverage-guided exploration of your system-under-test
- Seamless python-native and CLI integrations (replaces the `pytest` command)

Read more about HypoFuzz at https://hypofuzz.com/docs/, including
[the changelog](https://hypofuzz.com/docs/changelog.html).

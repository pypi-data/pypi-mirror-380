Metadata-Version: 2.4
Name: py-pmp-manip
Version: 1.1.0
Summary: Python tool for creating, editing and inspecting Penguinmod(.pmp) and Scratch(.sb3) files.
Author-email: GermanCodeEngineer <germancodeengineer@proton.me>
License: GPL-3.0-or-later
Project-URL: Homepage, https://github.com/GermanCodeEngineer/py-pmp-manip/
Project-URL: Repository, https://github.com/GermanCodeEngineer/py-pmp-manip/
Project-URL: Issues, https://github.com/GermanCodeEngineer/py-pmp-manip/issues/
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Pillow==11.3.0
Requires-Dist: Requests==2.32.5
Requires-Dist: aenum==3.1.16
Requires-Dist: colorama==0.4.6
Requires-Dist: lxml==6.0.0
Requires-Dist: pydub_ng==0.2.0
Requires-Dist: tree_sitter==0.25.0
Requires-Dist: tree_sitter_javascript==0.23.1
Requires-Dist: validators==0.35.0
Provides-Extra: dev
Requires-Dist: graphviz==0.21; extra == "dev"
Requires-Dist: pytest==8.3.4; extra == "dev"
Requires-Dist: tomlkit==0.13.3; extra == "dev"
Dynamic: license-file

# 🐧 py-pmp-manip

> A modular python tool for creating, editing and inspecting Penguinmod(.pmp) and Scratch(.sb3) project files.

---

## 🚀 Features

- Loading and Creating Projects
- Editing Projects
- Inspecting Projects
--- 
For a **documentation overview** and a **broader usage tutorial**, see [docs/index.md](docs/index.md) 

---

## 📦 Installation

```bash
pip install py-pmp-manip
```
**Or clone** directly. Do not forget to **include submodules**:
```bash
git clone --recurse-submodules https://github.com/GermanCodeEngineer/py-pmp-manip.git
cd py-pmp-manip
pip install -e .
```

## 🧰 Basic Usage

Before using most parts of pmp_manip, you must initialize the configuration once:

```python
from pmp_manip import init_config, get_default_config

# Start from defaults and override what you need
cfg = get_default_config()
cfg.ext_info_gen.gen_opcode_info_dir = "output/gen_opcode_info"
init_config(cfg)
```
### References
* For more **config details**, see [docs/config.md](docs/config.md)
* For a **documentation overview** and a **broader usage tutorial**, see [docs/index.md](docs/index.md)

---

## 📁 Project Structure
```
py-pmp-manip/
├── pmp_manip/              # Source Code
│   ├── config/             # Configuration schema and lifecycle
│   ├── core/               # Core functionality
│   ├── ext_info_gen/       # Information generator for custom extensions
│   ├── opcode_info/        # Contains an API for and the information about all the blocks
│   │   ├── api/                 # Theoretical structure of the API
│   │   ├── data/                # Actual data for the API
│   │   └── doc_api/             # A seperate API, which gives information about blocks and monitors in a human-readable way 
│   ├── utility/            # Utilities for other modules
│   └── important_consts.py # Common important constants
├── docs/              # Documentation
├── scripts/           # Independent project-related scripts for developers
│   ├── check_for_updates.py     # Checks for updates in foreign code files, from which e.g. constants are derived
│   ├── make_uml.py              # Generates a UML-Diagram for Second Representation
│   └── update_pyproject_toml.py # Updates pyproject.toml with version and dependencies
└── tests/             # Unit tests
```

## 🧪 Running Tests

Just run:
```bash
pytest tests/
```

---

## 📄 License

GPLv3

---

## 🤝 Contributing

Pull requests, issues, and feedback are welcome!
Please read the [CONTRIBUTING.md](CONTRIBUTING.md) guide before submitting code. 

---

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Weekly security audit (Monday 6 AM UTC)
    - cron: '0 6 * * 1'

env:
  UV_VERSION: '0.4.0'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run Ruff linting
      run: |
        uv run ruff check --output-format=github .
    
    - name: Run Ruff formatting check
      run: |
        uv run ruff format --check --diff .
    
    - name: Run Pyright type checking
      run: |
        uv run pyright
    
    - name: Run Bandit security scan
      run: |
        uv run bandit -r src -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report-quality-${{ matrix.python-version }}
        path: bandit-report.json
      if: always()

  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    needs: quality-checks
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        test-type: ['unit', 'integration']
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Start Redis (integration tests only)
      if: matrix.test-type == 'integration' && matrix.os == 'ubuntu-latest'
      uses: supercharge/redis-github-action@1.2.0
      with:
        redis-version: '7'
    
    - name: Run unit tests with coverage
      if: matrix.test-type == 'unit'
      run: |
        uv run pytest tests/unit/ -v --cov=src/aiogram_sentinel --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      if: matrix.test-type == 'integration' && matrix.os == 'ubuntu-latest'
      env:
        TEST_REDIS_URL: redis://localhost:6379/0
      run: |
        uv run pytest tests/integration/ -v -m "integration"
    
    - name: Skip integration tests on non-Ubuntu
      if: matrix.test-type == 'integration' && matrix.os != 'ubuntu-latest'
      run: |
        echo "Integration tests skipped on ${{ matrix.os }} (Redis not available)"
    
    - name: Upload coverage reports
      if: matrix.test-type == 'unit'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule' || github.event_name == 'push'
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run pip-audit
      run: |
        uv run pip-audit --format json --output pip-audit-report-${{ matrix.python-version }}.json
      continue-on-error: true
    
    - name: Upload vulnerability report
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-report-security-${{ matrix.python-version }}
        path: pip-audit-report-${{ matrix.python-version }}.json
      if: always()

  pypy-tests:
    name: PyPy Tests
    runs-on: ${{ matrix.os }}
    needs: tests
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["pypy3.9", "pypy3.10"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: tests
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      uses: astral-sh/setup-uv@v2
      with:
        version: ${{ env.UV_VERSION }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run performance benchmarks
      run: |
        uv run pytest tests/perf/ -v --benchmark-only --benchmark-json=benchmark-results-${{ matrix.python-version }}.json
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-perf-${{ matrix.python-version }}
        path: benchmark-results-${{ matrix.python-version }}.json
      if: always()

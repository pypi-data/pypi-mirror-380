name: Python Build Wheels

on:
  push:
    branches: ["master"]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        #os: [ubuntu-latest, macos-13, macos-14]
        os: [ubuntu-latest, macos-13] # For now build for ubuntu and mac-os x64
        #os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran g++ cmake make

      # - name: Install build tools (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install mingw -y
      #     echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $env:GITHUB_PATH

      - name: Install conda (macOS)
        if: runner.os == 'macOS'
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-version: "latest"
          activate-environment: buildenv
          environment-file: ""
          auto-activate-base: false

      - name: Install buildtools (macOS)
        if: runner.os == 'macOS'
        run: |
          conda install -n buildenv -c conda-forge gfortran=11 libgfortran=5 cmake clang libgcc libgfortran5 libcxx
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          echo "$CONDA_PREFIX/bin" >> $GITHUB_PATH
          echo "DYLD_FALLBACK_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
        shell: bash -l {0}

      - name: Check build tools
        run: |
          which cmake
          cmake --version
          which gfortran
          gfortran --version
          which clang++
          clang++ --version
          which make
          make --version
          echo $PATH
          echo $PWD
          git rev-parse HEAD

      - name: Build wheels (macOS)
        if: runner.os == 'macOS'
        uses: pypa/cibuildwheel@v3.0.1
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          # LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
          #SDKROOT: $(xcrun --sdk macosx --show-sdk-path)
          CIBW_BEFORE_BUILD: |
            SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
            echo "SDKROOT=$SDKROOT"
            export SDKROOT
            echo "Adjusting PATH"
            export PATH="/usr/bin:/usr/local/bin:$PATH"
            which make
            which clang++
            which gfortran
            clang++ --version
            gfortran --version
            DYLD_FALLBACK_LIBRARY_PATH=${{ env.DYLD_FALLBACK_LIBRARY_PATH }}
            export DYLD_FALLBACK_LIBRARY_PATH
            echo "DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH"
          CIBW_ENVIRONMENT: >
            PATH="/usr/bin:/usr/local/bin:$PATH"
            MACOSX_DEPLOYMENT_TARGET=10.15
            SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      - name: Build wheels (Linux)
        if: runner.os == 'Linux'
        uses: pypa/cibuildwheel@v3.0.1
        with:
          package-dir: .
          output-dir: wheelhouse
          config-file: "{package}/pyproject.toml"

      # - name: Re-tag wheels for Python3.x
      #   run: |
      #     pip install wheel-fix
      #     for whl in wheelhouse/*.whl; do
      #       wheel-fix --python-tag py3 --abi-tag none "$whl"
      #     done

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  make_sdist:
    name: Make Python sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_to_index:
    name: Upload to PyPI index
    needs: [build_wheels, make_sdist]
    environment: pypi

    permissions:
      id-token: write
      attestations: write
      contents: read

    runs-on: ubuntu-latest
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Generate attestations
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "dist/*"

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # password: ${{ secrets.pypi_password }}
          # repository-url: "https://pypi.org/legacy"
          verbose: true
          skip-existing: true
          # attestations: false


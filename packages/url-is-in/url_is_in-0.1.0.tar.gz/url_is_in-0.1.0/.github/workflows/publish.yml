name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to publish to'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - testpypi
          - pypi

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'release' && 'pypi' || github.event.inputs.environment }}
      url: ${{ github.event_name == 'release' && 'https://pypi.org/p/url-is-in' || 'https://test.pypi.org/p/url-is-in' }}
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Run tests
        run: |
          uv run pytest

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Build package
        run: |
          uv build

      - name: Verify package
        run: |
          uv run python -m twine check dist/*

      - name: Publish to Test PyPI
        if: github.event.inputs.environment == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'testpypi')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Publish to PyPI
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  create-github-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'pypi'
    needs: publish
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changes

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.

            ## Installation

            ```bash
            pip install url-is-in==${{ steps.get_version.outputs.version }}
            ```
          draft: false
          prerelease: false
# -*- encoding: utf-8 -*-
"""
@文件        :func.py
@说明        :{{ description }}
@时间        :{{ date }}
@作者        :{{ author }}
@邮箱        :{{ email }}
@版本        :{{ version }}
"""

from functools import partial


class lazy_property:
    """
    A decorator that allows a property to be evaluated only once and then replaces itself with the computed value.
    This is useful for expensive computations that are only needed on-demand.
    """

    def __init__(self, func):
        """
        Initialize the lazy_property with the provided function (`func`) that represents the property's computation.
        """
        self.func = func

    def __get__(self, instance, cls):
        """
        Get the value of the property; if it doesn't exist, compute it using the provided function and set it for the instance.
        """
        if instance is None:
            return self
        else:
            value = self.func(instance)
            setattr(instance, self.func.__name__, value)
            return value


def lazy_read_property(func):
    """
    A decorator that creates a lazy read-only property for a class. It caches the value upon first access.
    This is similar to `@property` but only evaluates the value once and then saves it for reuse.
    """
    name = "_lazy_" + func.__name__

    @property
    def lazy(self):
        """
        The lazy property which checks if the value exists, if not, computes the value using the provided function (`func`) and saves it for future use.
        """
        if hasattr(self, name):
            return getattr(self, name)
        else:
            value = func(self)
            setattr(self, name, value)
            return value

    return lazy


def wrapper_method(fn=None, hook_cls=None):
    """ """
    if fn is None:
        return partial(wrapper_method, hook_cls=hook_cls)

    def inner(self, *args, **kwargs):
        """ """
        if not hook_cls:
            return fn(*args, **kwargs)
        vd = hook_cls(fn, self)
        return vd(self, *args, **kwargs)

    return inner

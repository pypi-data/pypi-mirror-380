# -*- encoding: utf-8 -*-
"""
@文件        :wrapper.py
@说明        :{{ description }}
@时间        :{{ date }}
@作者        :{{ author }}
@邮箱        :{{ email }}
@版本        :{{ version }}
"""

import functools
from functools import wraps
from inspect import isawaitable, isclass
from abc import abstractmethod
from typing import TypeVar, Optional, cast
from typing import Callable, Optional, Type, TypeVar, Union, Any

from sanic.log import logger
from sanic import Request
from sanic_ext.exceptions import InitError
from sanic_ext.utils.extraction import extract_request

from .exceptions import ValidationError

T = TypeVar("T")
Self = TypeVar("Self")


class _Model:
    """ """

    def raise_valid(self, *args, **kwargs): ...


ModelT = TypeVar("ModelT", bound=_Model)


async def do_validation(
    *,
    model,
    data,
    schema,
    request,
    kwargs,
    body_argument,
    allow_multiple,
    allow_coerce,
):
    model = cast(Union[Callable[[Any], Self], ModelT], model)
    try:
        logger.debug(f"Validating {request.path} using {model}")
        if model is not None:
            if isclass(model):
                validation = model(**data)
                validation = cast(_Model, validation)
                if isawaitable(validation):
                    await validation.raise_valid()
                else:
                    validation.raise_valid()
            else:
                validation = model(**data)
                if isawaitable(validation):
                    await validation
        kwargs[body_argument] = validation
    except TypeError as e:
        raise ValidationError(e)


def validate(
    json: Optional[Union[Callable[[Request], bool], Type[object]]] = None,
    form: Optional[Union[Callable[[Request], bool], Type[object]]] = None,
    query: Optional[Union[Callable[[Request], bool], Type[object]]] = None,
    body_argument: str = "body",
    query_argument: str = "query",
) -> Callable[[T], T]:
    schemas = {
        key: param
        for key, param in (
            ("json", json),
            ("form", form),
            ("query", query),
        )
    }
    if json and form:
        raise InitError("Cannot define both a form and json route validator")

    def decorator(f):
        @wraps(f)
        async def decorated_function(*args, **kwargs):
            request = extract_request(*args)

            if schemas["json"]:
                await do_validation(
                    model=json,
                    data=request.json,
                    schema=schemas["json"],
                    request=request,
                    kwargs=kwargs,
                    body_argument=body_argument,
                    allow_multiple=False,
                    allow_coerce=False,
                )
            if schemas["form"]:
                await do_validation(
                    model=form,
                    data=request.form,
                    schema=schemas["form"],
                    request=request,
                    kwargs=kwargs,
                    body_argument=body_argument,
                    allow_multiple=True,
                    allow_coerce=True,
                )
            if schemas["query"]:
                await do_validation(
                    model=query,
                    data=request.args,
                    schema=schemas["query"],
                    request=request,
                    kwargs=kwargs,
                    body_argument=query_argument,
                    allow_multiple=True,
                    allow_coerce=True,
                )
            retval = f(*args, **kwargs)
            if isawaitable(retval):
                retval = await retval
            return retval

        return decorated_function

    return decorator


class Validator:
    """ """

    @abstractmethod
    def raise_all_errors(self, *args, **kwargs): ...


ValidatorT = TypeVar("ValidatorT", bound=Validator)


# +----------------------------
#  Form
# +----------------------------
def form_validator(fn=None, /, validator: Optional[ValidatorT] = None):
    """ """
    if fn is None:
        return functools.partial(form_validator, validator=validator)

    def inner(self, data: dict):
        """ """
        validator(**data).raise_all_errors() if validator else None
        res = fn(self, data)
        return res

    return inner

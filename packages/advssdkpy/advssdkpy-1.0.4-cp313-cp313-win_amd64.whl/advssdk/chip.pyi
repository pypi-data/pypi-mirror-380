from enum import Enum
from typing import NamedTuple, List, Optional


class DacLimits(NamedTuple):
    min: int
    max: int


class RawThresholdRange(NamedTuple):
    min: int
    max: int


class ThresholdRange(NamedTuple):
    min: float
    max: float
    noise: float


class ChipPolarity(Enum):
    positive: int
    negative: int


class BinningParams(NamedTuple):
    width: int
    height: int
    dwellTime: int


class __Chip:
    def getChipIds(self) -> List[str]: ...
    def getDacIds(self) -> List[str]: ...
    def getDacLimits(self, dacId: str) -> DacLimits: ...
    def getDacValue(self, dacId: str) -> int: ...
    def getModeIds(self) -> List[str]: ...
    def getRawThreshold(self, thresholdId: str) -> int: ...
    def getRawThresholdRange(self, thresholdId: str) -> RawThresholdRange: ...
    def getSenseDacIds(self) -> List[str]: ...
    def getThresholdIds(self) -> List[str]: ...
    def getThreshold(self, thresholdId: str) -> float: ...
    def getThresholdRange(self, thresholdId: str) -> ThresholdRange: ...
    def getPolarity(self, chipIdx: int) -> ChipPolarity: ...
    def isThresholdCalibrated(self, thresholdId: str) -> bool: ...
    def refresh(self) -> None: ...
    def selectMode(self, modeId: str, modeParams: Optional[BinningParams]) -> None: ...
    def selectSenseDac(self, senseDacId: str) -> None: ...
    def setDacValue(self, dacId: str, dacValue: int) -> None: ...
    def setRawThreshold(self, thresholdId: str, value: int) -> None: ...
    def setThreshold(self, thresholdId: str, value: float) -> None: ...
    def setPolarity(self, chipIdx: int, chipPolarity: ChipPolarity) -> None: ...

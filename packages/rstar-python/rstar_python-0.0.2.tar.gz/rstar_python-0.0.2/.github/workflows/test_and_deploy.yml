name: CI

on:
  push:
    branches: [ main ]
    tags: ["v*"]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: wheel-${{ github.ref }}
  cancel-in-progress: true

env:
  MACOSX_DEPLOYMENT_TARGET: "10.12"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Create virtual environment
      run: |
        python -m venv .venv
        
    - name: Install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install maturin pytest numpy
        
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        python -m pip install --upgrade pip
        pip install maturin pytest numpy
        
    - name: Build and install (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        maturin develop --release
        
    - name: Build and install (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        maturin develop --release
        
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        pytest python/tests -v
        
    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        pytest python/tests -v

  cargo-test:
    name: Run cargo tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run tests
        run: cargo test --all-features --workspace

  make_sdist:
      needs: [test, cargo-test]
      name: Make SDist
      runs-on: ubuntu-latest
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            submodules: true

        - name: Build sdist
          uses: PyO3/maturin-action@v1
          with:
            command: sdist
            args: --out dist

        - name: Check sdist
          run: |
            ls -la dist/
            # Make twine check non-fatal for now
            pip install twine
            twine check dist/* || echo "Twine check failed but continuing"

        - uses: actions/upload-artifact@v4
          with:
            name: pypi-sdist
            path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [test, cargo-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Build wheels - Linux
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist
          sccache: 'true'
          manylinux: auto
          
      - name: Build wheels - Windows
        if: runner.os == 'Windows'
        uses: PyO3/maturin-action@v1
        with:
          target: x64
          args: --release --out dist
          sccache: 'true'
          
      - name: Build wheels - macOS (Intel)
        if: matrix.os == 'macos-13'
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist
          sccache: 'true'
          
      - name: Build wheels - macOS (Apple Silicon)
        if: matrix.os == 'macos-14'
        uses: PyO3/maturin-action@v1
        with:
          target: aarch64
          args: --release --out dist
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: pypi-wheels-${{ matrix.os }}
          path: dist/*.whl

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, make_sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/rstar-python
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: pypi-*
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: |
          ls -la dist/
          echo "Found $(ls dist/*.whl | wc -l) wheel files"
          echo "Found $(ls dist/*.tar.gz | wc -l) source distributions"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verify-metadata: true
          skip-existing: false
          verbose: true
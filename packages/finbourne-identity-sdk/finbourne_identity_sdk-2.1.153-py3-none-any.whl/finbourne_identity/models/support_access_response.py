# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator 

class SupportAccessResponse(BaseModel):
    """
    Timestamped successful response to grant access to your account  # noqa: E501
    """
    id:  StrictStr = Field(...,alias="id", description="ID of the support access request") 
    duration:  StrictStr = Field(...,alias="duration", description="The duration for which access is requested (in any ISO-8601 format)") 
    description:  Optional[StrictStr] = Field(None,alias="description", description="The description of why the support access has been granted (i.e. support ticket numbers)") 
    created_at: datetime = Field(..., alias="createdAt", description="DateTimeOffset at which the access was granted")
    expiry: datetime = Field(..., description="DateTimeOffset at which the access will be revoked")
    created_by:  StrictStr = Field(...,alias="createdBy", description="Obfuscated UserId of the user who granted the support access") 
    terminated: Optional[StrictBool] = Field(None, description="Whether or not that access has been invalidated")
    terminated_at: Optional[datetime] = Field(None, alias="terminatedAt", description="DateTimeOffset at which the access was invalidated")
    terminated_by:  Optional[StrictStr] = Field(None,alias="terminatedBy", description="Obfuscated UserId of the user who revoked the access") 
    permitted_roles: Optional[conlist(StrictStr)] = Field(None, alias="permittedRoles", description="A list of permitted roles, valid for support staff to assume, for the duration of the access request")
    __properties = ["id", "duration", "description", "createdAt", "expiry", "createdBy", "terminated", "terminatedAt", "terminatedBy", "permittedRoles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SupportAccessResponse:
        """Create an instance of SupportAccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if terminated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.terminated_at is None and "terminated_at" in self.__fields_set__:
            _dict['terminatedAt'] = None

        # set to None if terminated_by (nullable) is None
        # and __fields_set__ contains the field
        if self.terminated_by is None and "terminated_by" in self.__fields_set__:
            _dict['terminatedBy'] = None

        # set to None if permitted_roles (nullable) is None
        # and __fields_set__ contains the field
        if self.permitted_roles is None and "permitted_roles" in self.__fields_set__:
            _dict['permittedRoles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SupportAccessResponse:
        """Create an instance of SupportAccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SupportAccessResponse.parse_obj(obj)

        _obj = SupportAccessResponse.parse_obj({
            "id": obj.get("id"),
            "duration": obj.get("duration"),
            "description": obj.get("description"),
            "created_at": obj.get("createdAt"),
            "expiry": obj.get("expiry"),
            "created_by": obj.get("createdBy"),
            "terminated": obj.get("terminated"),
            "terminated_at": obj.get("terminatedAt"),
            "terminated_by": obj.get("terminatedBy"),
            "permitted_roles": obj.get("permittedRoles")
        })
        return _obj

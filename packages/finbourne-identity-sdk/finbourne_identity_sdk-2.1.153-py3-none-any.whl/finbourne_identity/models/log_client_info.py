# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr 
from finbourne_identity.models.log_geographical_context import LogGeographicalContext
from finbourne_identity.models.log_user_agent import LogUserAgent

class LogClientInfo(BaseModel):
    """
    Represents a LogClientInfo resource in the Okta API  # noqa: E501
    """
    user_agent: Optional[LogUserAgent] = Field(None, alias="userAgent")
    zone:  Optional[StrictStr] = Field(None,alias="zone") 
    device:  Optional[StrictStr] = Field(None,alias="device") 
    id:  Optional[StrictStr] = Field(None,alias="id") 
    ip_address:  Optional[StrictStr] = Field(None,alias="ipAddress") 
    geographical_context: Optional[LogGeographicalContext] = Field(None, alias="geographicalContext")
    __properties = ["userAgent", "zone", "device", "id", "ipAddress", "geographicalContext"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogClientInfo:
        """Create an instance of LogClientInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_agent
        if self.user_agent:
            _dict['userAgent'] = self.user_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geographical_context
        if self.geographical_context:
            _dict['geographicalContext'] = self.geographical_context.to_dict()
        # set to None if zone (nullable) is None
        # and __fields_set__ contains the field
        if self.zone is None and "zone" in self.__fields_set__:
            _dict['zone'] = None

        # set to None if device (nullable) is None
        # and __fields_set__ contains the field
        if self.device is None and "device" in self.__fields_set__:
            _dict['device'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if ip_address (nullable) is None
        # and __fields_set__ contains the field
        if self.ip_address is None and "ip_address" in self.__fields_set__:
            _dict['ipAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogClientInfo:
        """Create an instance of LogClientInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogClientInfo.parse_obj(obj)

        _obj = LogClientInfo.parse_obj({
            "user_agent": LogUserAgent.from_dict(obj.get("userAgent")) if obj.get("userAgent") is not None else None,
            "zone": obj.get("zone"),
            "device": obj.get("device"),
            "id": obj.get("id"),
            "ip_address": obj.get("ipAddress"),
            "geographical_context": LogGeographicalContext.from_dict(obj.get("geographicalContext")) if obj.get("geographicalContext") is not None else None
        })
        return _obj

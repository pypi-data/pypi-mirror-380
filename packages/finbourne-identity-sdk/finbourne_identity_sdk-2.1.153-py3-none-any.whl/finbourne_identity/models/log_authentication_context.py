# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictInt, StrictStr, conlist 
from finbourne_identity.models.log_issuer import LogIssuer

class LogAuthenticationContext(BaseModel):
    """
    Represents a LogAuthenticationContext resource in the Okta API  # noqa: E501
    """
    authentication_provider:  Optional[StrictStr] = Field(None,alias="authenticationProvider") 
    credential_provider: Optional[conlist(StrictStr)] = Field(None, alias="credentialProvider")
    credential_type: Optional[conlist(StrictStr)] = Field(None, alias="credentialType")
    issuer: Optional[LogIssuer] = None
    interface:  Optional[StrictStr] = Field(None,alias="interface") 
    authentication_step: Optional[StrictInt] = Field(None, alias="authenticationStep")
    external_session_id:  Optional[StrictStr] = Field(None,alias="externalSessionId") 
    __properties = ["authenticationProvider", "credentialProvider", "credentialType", "issuer", "interface", "authenticationStep", "externalSessionId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LogAuthenticationContext:
        """Create an instance of LogAuthenticationContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # set to None if authentication_provider (nullable) is None
        # and __fields_set__ contains the field
        if self.authentication_provider is None and "authentication_provider" in self.__fields_set__:
            _dict['authenticationProvider'] = None

        # set to None if credential_provider (nullable) is None
        # and __fields_set__ contains the field
        if self.credential_provider is None and "credential_provider" in self.__fields_set__:
            _dict['credentialProvider'] = None

        # set to None if credential_type (nullable) is None
        # and __fields_set__ contains the field
        if self.credential_type is None and "credential_type" in self.__fields_set__:
            _dict['credentialType'] = None

        # set to None if interface (nullable) is None
        # and __fields_set__ contains the field
        if self.interface is None and "interface" in self.__fields_set__:
            _dict['interface'] = None

        # set to None if authentication_step (nullable) is None
        # and __fields_set__ contains the field
        if self.authentication_step is None and "authentication_step" in self.__fields_set__:
            _dict['authenticationStep'] = None

        # set to None if external_session_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_session_id is None and "external_session_id" in self.__fields_set__:
            _dict['externalSessionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LogAuthenticationContext:
        """Create an instance of LogAuthenticationContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LogAuthenticationContext.parse_obj(obj)

        _obj = LogAuthenticationContext.parse_obj({
            "authentication_provider": obj.get("authenticationProvider"),
            "credential_provider": obj.get("credentialProvider"),
            "credential_type": obj.get("credentialType"),
            "issuer": LogIssuer.from_dict(obj.get("issuer")) if obj.get("issuer") is not None else None,
            "interface": obj.get("interface"),
            "authentication_step": obj.get("authenticationStep"),
            "external_session_id": obj.get("externalSessionId")
        })
        return _obj

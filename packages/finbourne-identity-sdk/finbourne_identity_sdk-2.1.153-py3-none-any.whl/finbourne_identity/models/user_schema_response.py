# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, conlist 
from finbourne_identity.models.user_schema_property import UserSchemaProperty

class UserSchemaResponse(BaseModel):
    """
    UserSchemaResponse
    """
    alternative_user_ids: Optional[conlist(UserSchemaProperty)] = Field(None, alias="alternativeUserIds")
    __properties = ["alternativeUserIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSchemaResponse:
        """Create an instance of UserSchemaResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in alternative_user_ids (list)
        _items = []
        if self.alternative_user_ids:
            for _item in self.alternative_user_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['alternativeUserIds'] = _items
        # set to None if alternative_user_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.alternative_user_ids is None and "alternative_user_ids" in self.__fields_set__:
            _dict['alternativeUserIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSchemaResponse:
        """Create an instance of UserSchemaResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSchemaResponse.parse_obj(obj)

        _obj = UserSchemaResponse.parse_obj({
            "alternative_user_ids": [UserSchemaProperty.from_dict(_item) for _item in obj.get("alternativeUserIds")] if obj.get("alternativeUserIds") is not None else None
        })
        return _obj

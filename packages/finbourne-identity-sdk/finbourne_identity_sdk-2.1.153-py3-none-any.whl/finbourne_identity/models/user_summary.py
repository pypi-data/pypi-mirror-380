# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 
from finbourne_identity.models.link import Link

class UserSummary(BaseModel):
    """
    Lightweight view of an user details  # noqa: E501
    """
    id:  Optional[StrictStr] = Field(None,alias="id", description="The user id") 
    login:  Optional[StrictStr] = Field(None,alias="login", description="The user login") 
    email:  Optional[StrictStr] = Field(None,alias="email", description="The email address registered for that user") 
    second_email:  Optional[StrictStr] = Field(None,alias="secondEmail") 
    first_name:  Optional[StrictStr] = Field(None,alias="firstName", description="User's first name") 
    last_name:  Optional[StrictStr] = Field(None,alias="lastName", description="User's last name") 
    type:  Optional[StrictStr] = Field(None,alias="type", description="User's type (Personal, Service...)") 
    alternative_user_ids: Optional[Dict[str, StrictStr]] = Field(None, alias="alternativeUserIds", description="User's alternative user IDs. Only returned for the current user")
    links: Optional[conlist(Link)] = None
    __properties = ["id", "login", "email", "secondEmail", "firstName", "lastName", "type", "alternativeUserIds", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserSummary:
        """Create an instance of UserSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if login (nullable) is None
        # and __fields_set__ contains the field
        if self.login is None and "login" in self.__fields_set__:
            _dict['login'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if second_email (nullable) is None
        # and __fields_set__ contains the field
        if self.second_email is None and "second_email" in self.__fields_set__:
            _dict['secondEmail'] = None

        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict['lastName'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if alternative_user_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.alternative_user_ids is None and "alternative_user_ids" in self.__fields_set__:
            _dict['alternativeUserIds'] = None

        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserSummary:
        """Create an instance of UserSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserSummary.parse_obj(obj)

        _obj = UserSummary.parse_obj({
            "id": obj.get("id"),
            "login": obj.get("login"),
            "email": obj.get("email"),
            "second_email": obj.get("secondEmail"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "type": obj.get("type"),
            "alternative_user_ids": obj.get("alternativeUserIds"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj

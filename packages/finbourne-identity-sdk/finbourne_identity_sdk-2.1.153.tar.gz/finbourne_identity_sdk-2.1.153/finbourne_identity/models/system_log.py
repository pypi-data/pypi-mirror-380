# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist 
from finbourne_identity.models.log_actor import LogActor
from finbourne_identity.models.log_authentication_context import LogAuthenticationContext
from finbourne_identity.models.log_client_info import LogClientInfo
from finbourne_identity.models.log_debug_context import LogDebugContext
from finbourne_identity.models.log_outcome import LogOutcome
from finbourne_identity.models.log_request import LogRequest
from finbourne_identity.models.log_security_context import LogSecurityContext
from finbourne_identity.models.log_severity import LogSeverity
from finbourne_identity.models.log_target import LogTarget
from finbourne_identity.models.log_transaction import LogTransaction

class SystemLog(BaseModel):
    """
    A system log event  # noqa: E501
    """
    actor: Optional[LogActor] = None
    authentication_context: Optional[LogAuthenticationContext] = Field(None, alias="authenticationContext")
    client_info: Optional[LogClientInfo] = Field(None, alias="clientInfo")
    debug_context: Optional[LogDebugContext] = Field(None, alias="debugContext")
    display_message:  Optional[StrictStr] = Field(None,alias="displayMessage", description="Represents a DisplayMessage resource in the Okta API") 
    event_type:  Optional[StrictStr] = Field(None,alias="eventType", description="Represents a EventType resource in the Okta API") 
    legacy_event_type:  Optional[StrictStr] = Field(None,alias="legacyEventType", description="Represents a LegacyEventType resource in the Okta API") 
    outcome: Optional[LogOutcome] = None
    published: Optional[datetime] = Field(None, description="Represents when Published in the Okta API")
    request: Optional[LogRequest] = None
    security_context: Optional[LogSecurityContext] = Field(None, alias="securityContext")
    severity: Optional[LogSeverity] = None
    target: Optional[conlist(LogTarget)] = Field(None, description="Represents a LogTarget resource in the Okta API")
    transaction: Optional[LogTransaction] = None
    uuid:  Optional[StrictStr] = Field(None,alias="uuid", description="Represents Uuid in the Okta API") 
    version:  Optional[StrictStr] = Field(None,alias="version", description="Represents a Version in the Okta API") 
    __properties = ["actor", "authenticationContext", "clientInfo", "debugContext", "displayMessage", "eventType", "legacyEventType", "outcome", "published", "request", "securityContext", "severity", "target", "transaction", "uuid", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemLog:
        """Create an instance of SystemLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authentication_context
        if self.authentication_context:
            _dict['authenticationContext'] = self.authentication_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_info
        if self.client_info:
            _dict['clientInfo'] = self.client_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debug_context
        if self.debug_context:
            _dict['debugContext'] = self.debug_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcome
        if self.outcome:
            _dict['outcome'] = self.outcome.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_context
        if self.security_context:
            _dict['securityContext'] = self.security_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of severity
        if self.severity:
            _dict['severity'] = self.severity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in target (list)
        _items = []
        if self.target:
            for _item in self.target:
                if _item:
                    _items.append(_item.to_dict())
            _dict['target'] = _items
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        # set to None if display_message (nullable) is None
        # and __fields_set__ contains the field
        if self.display_message is None and "display_message" in self.__fields_set__:
            _dict['displayMessage'] = None

        # set to None if event_type (nullable) is None
        # and __fields_set__ contains the field
        if self.event_type is None and "event_type" in self.__fields_set__:
            _dict['eventType'] = None

        # set to None if legacy_event_type (nullable) is None
        # and __fields_set__ contains the field
        if self.legacy_event_type is None and "legacy_event_type" in self.__fields_set__:
            _dict['legacyEventType'] = None

        # set to None if published (nullable) is None
        # and __fields_set__ contains the field
        if self.published is None and "published" in self.__fields_set__:
            _dict['published'] = None

        # set to None if target (nullable) is None
        # and __fields_set__ contains the field
        if self.target is None and "target" in self.__fields_set__:
            _dict['target'] = None

        # set to None if uuid (nullable) is None
        # and __fields_set__ contains the field
        if self.uuid is None and "uuid" in self.__fields_set__:
            _dict['uuid'] = None

        # set to None if version (nullable) is None
        # and __fields_set__ contains the field
        if self.version is None and "version" in self.__fields_set__:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemLog:
        """Create an instance of SystemLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemLog.parse_obj(obj)

        _obj = SystemLog.parse_obj({
            "actor": LogActor.from_dict(obj.get("actor")) if obj.get("actor") is not None else None,
            "authentication_context": LogAuthenticationContext.from_dict(obj.get("authenticationContext")) if obj.get("authenticationContext") is not None else None,
            "client_info": LogClientInfo.from_dict(obj.get("clientInfo")) if obj.get("clientInfo") is not None else None,
            "debug_context": LogDebugContext.from_dict(obj.get("debugContext")) if obj.get("debugContext") is not None else None,
            "display_message": obj.get("displayMessage"),
            "event_type": obj.get("eventType"),
            "legacy_event_type": obj.get("legacyEventType"),
            "outcome": LogOutcome.from_dict(obj.get("outcome")) if obj.get("outcome") is not None else None,
            "published": obj.get("published"),
            "request": LogRequest.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "security_context": LogSecurityContext.from_dict(obj.get("securityContext")) if obj.get("securityContext") is not None else None,
            "severity": LogSeverity.from_dict(obj.get("severity")) if obj.get("severity") is not None else None,
            "target": [LogTarget.from_dict(_item) for _item in obj.get("target")] if obj.get("target") is not None else None,
            "transaction": LogTransaction.from_dict(obj.get("transaction")) if obj.get("transaction") is not None else None,
            "uuid": obj.get("uuid"),
            "version": obj.get("version")
        })
        return _obj

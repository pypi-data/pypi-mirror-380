# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictStr, conlist, constr 
from finbourne_identity.models.link import Link
from finbourne_identity.models.role_response import RoleResponse

class UserResponse(BaseModel):
    """
    UserResponse
    """
    id:  StrictStr = Field(...,alias="id", description="The user's system supplied unique identifier") 
    alternative_user_ids: Optional[Dict[str, StrictStr]] = Field(None, alias="alternativeUserIds", description="The user's alternative IDs")
    email_address:  StrictStr = Field(...,alias="emailAddress", description="The user's emailAddress address, which must be unique within the system") 
    second_email_address:  Optional[StrictStr] = Field(None,alias="secondEmailAddress", description="The user's second email address. Only allowed for service users.") 
    login:  StrictStr = Field(...,alias="login") 
    first_name:  StrictStr = Field(...,alias="firstName", description="The user's first name") 
    last_name:  StrictStr = Field(...,alias="lastName", description="The user's last name") 
    roles: Optional[conlist(RoleResponse)] = Field(None, description="The roles that the user has.")
    type:  StrictStr = Field(...,alias="type", description="The type of user (e.g. Personal or Service)") 
    status:  StrictStr = Field(...,alias="status", description="The status of the user") 
    external: StrictBool = Field(..., description="Whether or not the user originates from an external identity system")
    last_login: Optional[datetime] = Field(None, alias="lastLogin", description="Last time the user logged in")
    last_updated: Optional[datetime] = Field(None, alias="lastUpdated", description="Last time the user was updated")
    created: Optional[datetime] = Field(None, description="Date the user was created")
    password_changed: Optional[datetime] = Field(None, alias="passwordChanged", description="Last time the password was changed for this user")
    links: Optional[conlist(Link)] = None
    __properties = ["id", "alternativeUserIds", "emailAddress", "secondEmailAddress", "login", "firstName", "lastName", "roles", "type", "status", "external", "lastLogin", "lastUpdated", "created", "passwordChanged", "links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserResponse:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # set to None if alternative_user_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.alternative_user_ids is None and "alternative_user_ids" in self.__fields_set__:
            _dict['alternativeUserIds'] = None

        # set to None if second_email_address (nullable) is None
        # and __fields_set__ contains the field
        if self.second_email_address is None and "second_email_address" in self.__fields_set__:
            _dict['secondEmailAddress'] = None

        # set to None if roles (nullable) is None
        # and __fields_set__ contains the field
        if self.roles is None and "roles" in self.__fields_set__:
            _dict['roles'] = None

        # set to None if last_login (nullable) is None
        # and __fields_set__ contains the field
        if self.last_login is None and "last_login" in self.__fields_set__:
            _dict['lastLogin'] = None

        # set to None if last_updated (nullable) is None
        # and __fields_set__ contains the field
        if self.last_updated is None and "last_updated" in self.__fields_set__:
            _dict['lastUpdated'] = None

        # set to None if created (nullable) is None
        # and __fields_set__ contains the field
        if self.created is None and "created" in self.__fields_set__:
            _dict['created'] = None

        # set to None if password_changed (nullable) is None
        # and __fields_set__ contains the field
        if self.password_changed is None and "password_changed" in self.__fields_set__:
            _dict['passwordChanged'] = None

        # set to None if links (nullable) is None
        # and __fields_set__ contains the field
        if self.links is None and "links" in self.__fields_set__:
            _dict['links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserResponse:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserResponse.parse_obj(obj)

        _obj = UserResponse.parse_obj({
            "id": obj.get("id"),
            "alternative_user_ids": obj.get("alternativeUserIds"),
            "email_address": obj.get("emailAddress"),
            "second_email_address": obj.get("secondEmailAddress"),
            "login": obj.get("login"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "roles": [RoleResponse.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "type": obj.get("type"),
            "status": obj.get("status"),
            "external": obj.get("external"),
            "last_login": obj.get("lastLogin"),
            "last_updated": obj.get("lastUpdated"),
            "created": obj.get("created"),
            "password_changed": obj.get("passwordChanged"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj

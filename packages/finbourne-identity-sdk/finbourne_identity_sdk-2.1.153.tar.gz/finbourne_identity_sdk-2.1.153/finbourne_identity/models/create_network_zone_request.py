# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, conlist, constr, validator 
from finbourne_identity.models.ip_address_definition import IpAddressDefinition
from finbourne_identity.models.network_zones_apply_rules import NetworkZonesApplyRules

class CreateNetworkZoneRequest(BaseModel):
    """
    The Create Network Zone Request information  # noqa: E501
    """
    code:  StrictStr = Field(...,alias="code") 
    description:  Optional[StrictStr] = Field(None,alias="description") 
    network_zone_ips: conlist(IpAddressDefinition) = Field(..., alias="networkZoneIPs")
    action:  Optional[StrictStr] = Field(None,alias="action") 
    apply_rules: NetworkZonesApplyRules = Field(..., alias="applyRules")
    __properties = ["code", "description", "networkZoneIPs", "action", "applyRules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateNetworkZoneRequest:
        """Create an instance of CreateNetworkZoneRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in network_zone_ips (list)
        _items = []
        if self.network_zone_ips:
            for _item in self.network_zone_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['networkZoneIPs'] = _items
        # override the default output from pydantic by calling `to_dict()` of apply_rules
        if self.apply_rules:
            _dict['applyRules'] = self.apply_rules.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if action (nullable) is None
        # and __fields_set__ contains the field
        if self.action is None and "action" in self.__fields_set__:
            _dict['action'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateNetworkZoneRequest:
        """Create an instance of CreateNetworkZoneRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateNetworkZoneRequest.parse_obj(obj)

        _obj = CreateNetworkZoneRequest.parse_obj({
            "code": obj.get("code"),
            "description": obj.get("description"),
            "network_zone_ips": [IpAddressDefinition.from_dict(_item) for _item in obj.get("networkZoneIPs")] if obj.get("networkZoneIPs") is not None else None,
            "action": obj.get("action"),
            "apply_rules": NetworkZonesApplyRules.from_dict(obj.get("applyRules")) if obj.get("applyRules") is not None else None
        })
        return _obj

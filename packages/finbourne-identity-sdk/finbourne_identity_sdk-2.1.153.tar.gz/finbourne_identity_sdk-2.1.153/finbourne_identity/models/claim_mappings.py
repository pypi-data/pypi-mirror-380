# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, constr 

class ClaimMappings(BaseModel):
    """
    ClaimMappings
    """
    user_id:  StrictStr = Field(...,alias="userId") 
    login:  StrictStr = Field(...,alias="login") 
    email:  StrictStr = Field(...,alias="email") 
    first_name:  StrictStr = Field(...,alias="firstName") 
    last_name:  StrictStr = Field(...,alias="lastName") 
    user_type:  StrictStr = Field(...,alias="userType") 
    groups:  Optional[StrictStr] = Field(None,alias="groups") 
    __properties = ["userId", "login", "email", "firstName", "lastName", "userType", "groups"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClaimMappings:
        """Create an instance of ClaimMappings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if groups (nullable) is None
        # and __fields_set__ contains the field
        if self.groups is None and "groups" in self.__fields_set__:
            _dict['groups'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClaimMappings:
        """Create an instance of ClaimMappings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClaimMappings.parse_obj(obj)

        _obj = ClaimMappings.parse_obj({
            "user_id": obj.get("userId"),
            "login": obj.get("login"),
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "user_type": obj.get("userType"),
            "groups": obj.get("groups")
        })
        return _obj

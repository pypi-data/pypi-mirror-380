# coding: utf-8

"""
    FINBOURNE Identity Service API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictStr, constr, validator 
from finbourne_identity.models.claim_mappings import ClaimMappings

class CreateExternalTokenIssuerRequest(BaseModel):
    """
    Client input for creating an external token issuer.  # noqa: E501
    """
    code:  StrictStr = Field(...,alias="code") 
    issuer:  StrictStr = Field(...,alias="issuer") 
    audience:  StrictStr = Field(...,alias="audience") 
    description:  Optional[StrictStr] = Field(None,alias="description") 
    claim_mappings: Optional[ClaimMappings] = Field(None, alias="claimMappings")
    logout_url:  StrictStr = Field(...,alias="logoutUrl") 
    __properties = ["code", "issuer", "audience", "description", "claimMappings", "logoutUrl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateExternalTokenIssuerRequest:
        """Create an instance of CreateExternalTokenIssuerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of claim_mappings
        if self.claim_mappings:
            _dict['claimMappings'] = self.claim_mappings.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateExternalTokenIssuerRequest:
        """Create an instance of CreateExternalTokenIssuerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateExternalTokenIssuerRequest.parse_obj(obj)

        _obj = CreateExternalTokenIssuerRequest.parse_obj({
            "code": obj.get("code"),
            "issuer": obj.get("issuer"),
            "audience": obj.get("audience"),
            "description": obj.get("description"),
            "claim_mappings": ClaimMappings.from_dict(obj.get("claimMappings")) if obj.get("claimMappings") is not None else None,
            "logout_url": obj.get("logoutUrl")
        })
        return _obj

# .github/workflows/workflow.yml
name: MEMG Core â€“ Main

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]    # release on tags
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Install toolchain
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[dev]"
          pip install ruff bandit mypy pylint pytest pytest-cov types-PyYAML fastapi fastembed
      - name: Bandit
        run: bandit -r src/ -f json -o bandit-report.json
      - name: Ruff
        run: |
          ruff format --check src/
          ruff check src/
      - name: Pylint
        run: pylint src/ --fail-under=7.0 --score=yes
      - name: MyPy
        run: mypy src/ --ignore-missing-imports
        continue-on-error: ${{ startsWith(github.ref,'refs/tags/v') }}
      - name: Setup for unit tests
        run: echo "Running unit tests only - no database setup required"
      - name: Tests (CI-Safe Only)
        # Only run unit tests marked with @pytest.mark.unit - skips database-dependent tests
        run: python -m pytest -m "unit" -v --cov=src --cov-report=xml --cov-report=term-missing

  build:
    needs: quality
    # Build wheel for download and PyPI publishing
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11', cache: 'pip' }
      - name: Build wheel and sdist
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 30
      - name: Show build info
        run: |
          echo "Build completed successfully!"
          echo "Wheel files:"
          ls -la dist/
          echo ""
          echo "To download: Go to Actions > This workflow run > Artifacts section"

  pypi:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true

  summary:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "MEMG Core ${{ github.ref_name }} released successfully!"
            echo "Package published to PyPI: pip install memg-core"
            echo "Wheel artifact also available for download from Actions > Artifacts"
          else
            echo "MEMG Core build completed successfully!"
            echo "Wheel artifact available for download from Actions > Artifacts"
            echo "PyPI publishing skipped (only on version tags)"
          fi

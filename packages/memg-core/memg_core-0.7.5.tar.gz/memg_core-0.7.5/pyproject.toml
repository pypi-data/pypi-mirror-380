[build-system]
requires = ["setuptools>=77", "wheel", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "memg-core"
dynamic = ["version"]
description = "Lightweight memory system for AI agents with vector search and graph storage"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
license-files = ["LICENSE"]
authors = [
 {name = "Genovo AI", email = "dev@genovo.ai"},
]
classifiers = [
 "Development Status :: 4 - Beta",
 "Intended Audience :: Developers",
 "Programming Language :: Python :: 3",
 "Programming Language :: Python :: 3 :: Only",
 "Programming Language :: Python :: 3.11",
 "Programming Language :: Python :: 3.12",
 "Operating System :: OS Independent",
 "Topic :: Scientific/Engineering :: Artificial Intelligence",
 "Topic :: Software Development :: Libraries :: Python Modules",
 "Topic :: Database",
]
keywords = ["ai", "memory", "vector-search", "graph-database", "mcp", "agents"]
dependencies = [
 # Core memory system dependencies (no MCP server)
 "qdrant-client>=1.14.0",
 "kuzu==0.11.1",
 "pydantic>=2.11.7,<3.0.0",
 "pydantic-core>=2.33.0,<3.0.0",
 "python-dotenv>=1.0.1",
 "fastembed>=0.4.0",  # Local embeddings - no API keys needed
  "pyyaml>=6.0.0",
 "typing-extensions>=4.12.0",
 "httpx>=0.28.0",
 "numpy>=1.24.0",
]

[project.optional-dependencies]
# Essential testing dependencies
test = [
 "pytest>=8.4.1",
 "pytest-asyncio>=0.25.0",
 "pytest-cov>=6.0.0",
]

# Development tools (for contributors)
dev = [
 "ruff>=0.12.0",
 "mypy>=1.17.0",
 "pytest>=8.4.1",
 "pytest-asyncio>=0.25.0",
 "pytest-cov>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/genovo-ai/memg-core"
Documentation = "https://genovo-ai.github.io/memg-core/"
Repository = "https://github.com/genovo-ai/memg-core"
Issues = "https://github.com/genovo-ai/memg-core/issues"
Changelog = "https://genovo-ai.github.io/memg-core/changelog/"

[tool.setuptools_scm]
write_to = "src/memg_core/version.py"   # generates version at sdist
fallback_version = "0.0.0"                  # avoids failures when git is missing
local_scheme = "no-local-version"           # clean wheels for PyPI

# PACKAGING CONFIGURATION - Lightweight library build
[tool.setuptools]
# Only include the core library, exclude dev tools and configs
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["memg_core*"]
exclude = [
    "tests*",
    "integration*",
    "*.tests*",
    "*.tests.*",
    "tests.*",
    "test_*"
]

[tool.setuptools.package-data]
# Only include essential data files
"*" = ["*.md", "*.txt", "*.json"]

[tool.setuptools.exclude-package-data]
# Exclude development and config files from package
"*" = [
    "*.pyc",
    "*.pyo",
    "*.pyd",
    "__pycache__",
    "*.so",
    "*.egg-info",
    ".git*",
    "pyrightconfig.json",
    "*.log",
]



# MYPY CONFIGURATION
[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false  # Too strict for current codebase
ignore_missing_imports = true # Ignore missing stubs for some packages
no_implicit_optional = false  # Allow implicit Optional for now





# PYTEST CONFIGURATION
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing"



# RUFF CONFIGURATION
[tool.ruff]
# Target Python 3.11+
target-version = "py311"

# Include source directories
include = ["src/**/*.py", "tests/**/*.py"]

# Exclude common directories and auto-generated files
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "node_modules",
    "src/memg_core/version.py",  # Auto-generated by setuptools-scm
]

# Line length to match pylint
line-length = 100

# Enable specific rule sets
[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "RET",  # flake8-return
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
]

# Ignore specific rules that conflict with our codebase or are too strict
ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "B904",   # Within except clause, raise exceptions with raise ... from err
    "N805",   # First argument of a method should be named `self` (conflicts with Pydantic validators)
    "N806",   # Variable in function should be lowercase
    "UP007",  # Use X | Y for type annotations (keep Union for compatibility)
    "UP038",  # Use X | Y in isinstance call instead of (X, Y) - keep for readability
    "RET504", # Unnecessary variable assignment before return
    "SIM102", # Use a single if statement instead of nested if
    "SIM103", # Return the condition directly
    "SIM108", # Use ternary operator instead of if-else
    "SIM118", # Use key in dict instead of key in dict.keys()
    "PIE790", # Unnecessary pass statement
    "PTH103", # os.makedirs() should be replaced by Path.mkdir()
    "PTH118", # os.path.join() should be replaced by Path with / operator
    "PTH120", # os.path.dirname() should be replaced by Path.parent
    "PTH123", # open() should be replaced by Path.open()
    "TC001",  # Move application import into TYPE_CHECKING block
    "TC002",  # Move third-party import into TYPE_CHECKING block
    "TC003",  # Move standard library import into TYPE_CHECKING block
    "C401",   # Unnecessary generator (rewrite as set comprehension)
    "C403",   # Unnecessary list comprehension (rewrite as set comprehension)
]

# Allow unused variables when they start with underscore
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Per-file ignores for specific directories
[tool.ruff.lint.per-file-ignores]
# Tests can use assert statements, have longer lines, imports after pytestmark, and nested with statements for clarity
"tests/**/*.py" = ["S101", "E501", "E402", "SIM117"]
# Init files can have unused imports
"**/__init__.py" = ["F401"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use trailing commas in multi-line structures
skip-magic-trailing-comma = false
# Respect existing line endings
line-ending = "auto"

[tool.ruff.lint.isort]
# Organize imports
known-first-party = ["memg_core"]
known-third-party = ["qdrant_client", "kuzu", "fastembed", "pydantic"]
force-single-line = false
force-sort-within-sections = true

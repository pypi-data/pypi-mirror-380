[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "pentesttools"
version = "0.1.5"
description = "Pentest-Tools.com Vulnerability Scanners Library"
readme = "README.md"
authors = [
    { name = "The Pentest-Tools Team", email = "contact@pentest-tools.com" },
]
dependencies = ["requests>=2.31.0"]
requires-python = ">=3.10"

[project.optional-dependencies]
dev = ["coverage"]
mcp = ["mcp>=1.4.1", "pydantic>=2.11.7", "fastmcp>=2.12.4"]

[project.scripts]
ptt = "pentesttools.cli:entrypoint"
ptt-mcp = "pentesttools.mcp:entrypoint"

[tool.pylint.MAIN]
fail-under = 9

[tool.pylint.FORMAT]
# Maximum number of characters on a single line.
max-line-length = 120

[tool.pylint.BASIC]
good-names = "i"

[tool.pylint.REPORTS]
output-format = "colorized"

# Python expression which should return a score less than 10 (10 is the highest score). You have access to the variables
# errors warning, statement which respectively contain the number of errors / warnings messages and the total number
# of statements analyzed. This is used by the global evaluation report (RP0004).
# Default: 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
#
# we increased the value of a error in order to considerably lower the score
evaluation = "10.0 - ((float(100 * error + warning + refactor + convention) / statement) * 10)"

[tool.coverage.run]
source = ["src/pentesttools"]

[project]
name = "bash2gitlab"
version = "0.9.9"
description = "Compile bash to gitlab pipeline yaml"
readme = "README.md"
authors = [{ name = "Matthew Martin", email = "matthewdeanmartin@gmail.com" }]
keywords = ["bash", "gitlab"]
license = "MIT"
requires-python = ">=3.8"
dependencies = [
    # Core enables compile, decompile, validate, best effort runner
    "ruamel.yaml", # required to compile
    "jsonschema", # required to compile
    "importlib_resources", # Used by validator
    "toml", # backwards compat, required to compile
    # native libs to speed things up
    "rtoml",
    "urllib3",
    "orjson",
    "certifi",
    # "rapidyaml==0.9.0", # API too radically different to use yet.

    # Extensibility
    "pluggy", # required to compile

    # gitlab API
    "python-gitlab",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]

[project.urls]
Repository = "https://github.com/matthewdeanmartin/bash2gitlab"
Documentation = "https://bash2gitlab.readthedocs.io/en/latest/"
Changelog = "https://github.com/matthewdeanmartin/bash2gitlab/blob/main/CHANGELOG.md"

homepage = "https://github.com/matthewdeanmartin/bash2gitlab"
issues = "https://github.com/matthewdeanmartin/bash2gitlab/issues/"
# support â€“ e.g. chat or forum - TODO

[project.optional-dependencies]
# "all" pulls in everything that isn't strictly core
# This is to defend against supply chain risks on the build server.
# The assumption is untrusted code is a bigger problem on a build server
# This is not a substitute for being vigilant with your package scanning.
all = [
    # CLI
    "argcomplete", # could be optional
    "rich_argparse", # could be optional

    # UI
    "textual", # could be optional
    "colorlog", # could be optional
    "rich", # could be optional - interative/init/tui
    "watchdog>=3.0.0", # optional
    # graphing
    "pyvis", # could be optional
    "graphviz", # could be optional
    "matplotlib", # could be optional
    # update checker
    "packaging", # could be optional
    # Config
    "tomlkit", # right now only used by init
    "tomli; python_version < '3.11'",
]

#[project.optional-dependencies]
#chat = ["bash2gitlab-chat"]
#all = [
#    "bash2gitlab-chat",
#]

[dependency-groups]
dev = [
    "troml-dev-status>=0.4.1; python_version >= '3.9'",
    "git2md; python_version >= '3.10'",
    "pyclean; python_version >= '3.12'",
    "strip-docs>=1.0; python_version >= '3.12'",
    "gha-update; python_version >= '3.12'",
    "mkdocstrings[python]",
    "mkdocs; python_version >= '3.12'",
    "mdformat",
    # plugin finder
    "packaging; python_version >= '3.8'",
    # mpy
    "mypy; python_version >= '3.8'",
    "types-toml; python_version >= '3.8'",
    "types-jsonschema; python_version >= '3.8'",
    # reports

    # build
    "vermin; python_version >= '3.8'",
    "metametameta>=0.1.3; python_version >= '3.9'",
    "hatchling; python_version >= '3.8'",
    "ruff>=0.12.0; python_version >= '3.8'",
    "pylint; python_version >= '3.8'",
    "bandit; python_version >= '3.8'",
    "pre-commit; python_version >= '3.8'",
    # testing tools
    "pytest; python_version >= '3.8'",
    "pytest-cov; python_version >= '3.8'",
    "pytest-xdist>=3.5.0; python_version >= '3.8'",
    "pytest-randomly>=3.15.0; python_version >= '3.8'",
    "pytest-sugar>=0.9.7; python_version >= '3.8'",
    "pytest-mock; python_version >= '3.8'",
    "pytest-unused-fixtures; python_version >= '3.10'",
    "hypothesis[cli]; python_version >= '3.8'",
    "detect-test-pollution",
    "pytest-timeout>=2.4.0",
    # docs
    "interrogate>=1.5.0; python_version >= '3.8'",
    "pydoctest==0.2.1; python_version >= '3.8'",
    "pdoc3>=0.5.0; python_version >= '3.8'",
    "mdformat>=0.5.0; python_version >= '3.8'",
    "linkcheckmd>=1.4.0; python_version >= '3.8'",
    "codespell>=2.2.6; python_version >= '3.8'",
    "pyenchant>=3.2.2; python_version >= '3.8'",
]

[tool.uv]
default-groups = "all"

[tool.uv.sources]
bash2gitlab = { workspace = true }

[tool.uv.workspace]
members = ["./",
    # App plugins
    "plugins/bash2gitlab_chat",
    "plugins/bash2gitlab_issue_tracker",
    "plugins/bash2gitlab_issue_tracker_gh_sync",
    # data tags plugins
    "plugins/bash2gitlab_universal",
    "plugins/bash2gitlab_to_sqlite"
]

[project.scripts]
bash2gitlab = "bash2gitlab.__main__:main"
b2gl = "bash2gitlab.__main__:main"

bash2gitlab-tui = "bash2gitlab.tui:main"
b2gl-tui = "bash2gitlab.tui:main"

bash2gitlab-gui = "bash2gitlab.gui:main"
b2gl-gui = "bash2gitlab.gui:main"

bash2gitlab-interactive = "bash2gitlab.interactive:main"
b2gl-interactive = "bash2gitlab.interactive:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.wheel.sources]
"schemas" = "bash2gitlab/schemas"

[tool.hatch.build.targets.wheel]
packages = ["bash2gitlab"]
include = [
    "bash2gitlab/**/*.py",
    "bash2gitlab/schemas/**/*.json",
    "bash2gitlab/py.typed",
    "/README.md", "LICENSE",
]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "LICENSE", "/bash2gitlab", "/tests"]


[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "test",
    "tests"
]
junit_family = "xunit1"
norecursedirs = ["vendor", "scripts"]
# don't know how to do this in toml
#addopts = "--strict-markers"
#markers =
#	slow: marks tests as slow (deselect with '-m "not slow"')
#	fast: marks tests as fast (deselect with '-m "not fast"')

[tool.isort]
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = ["dedlin"]
line_length = 120
multi_line_output = 3
use_parentheses = true

[tool.ruff]
line-length = 1000
# Assume Python 3.10.
target-version = "py39"

# Enable Pyflakes `E` and `F` codes by default.
[tool.ruff.lint]
select = ["E", "F",
    "D", # docs
    "UP", # pyupgrade
    "B", # bugbear
]
ignore = [
    "D402",
    "D301", # messes with doctests
    "E722",
    # only track structural problems with docstrings, not whitespace, nor missing
    "D200", "D212", "D415", "D411", "D205", "D102", "D103", "D100", "D107", "D101", "D104", "D105",
    "UP007", "UP038", # Not sure if | is well supported in lowever versions of python
]
per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude a variety of commonly ignored directories.
exclude = [
    "dead_code",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]



[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.scriv]
version = "literal: pyproject.toml: tool.poetry.version"
format = "md"
main_branches = "master, main, develop, dev"


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    "except ImportError",
    "except ModuleNotFoundError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.cli-tools]
python = { name = "python", version = ">=3.11.1", schema = "semver", tags = ["build"] }
mypy = { name = "mypy", version = ">=1.0.0", schema = "semver", tags = ["build", "work"], install_command = "pipx install mypy", install_docs = "https://mypy.readthedocs.io/en/stable/getting_started.html" }
pylint = { name = "pylint", version = ">=1.0.0", schema = "semver", tags = ["build", "work", "user"] }
black = { name = "black", version = ">=1.0.0", schema = "semver" }
ruff = { name = "ruff", version = ">=0.6.2", schema = "semver" }
vulture = { name = "vulture", version = "*", schema = "semver" }




[tool.bug_trail]
app_name = "bash2gitlab"
app_author = "matth"
source_folder = "bash2gitlab"
# ctags_file = "code_tags.tags"

# [tool.bash2gitlab]
# nothing yet
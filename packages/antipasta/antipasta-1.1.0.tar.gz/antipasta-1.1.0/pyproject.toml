[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "antipasta"
version = "1.1.0"
description = "A code quality monitoring and enforcement tool that analyzes a variety of code complexity metrics"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Really Him", email = "hesreallyhim@proton.me" }]
keywords = [
    "code-quality",
    "complexity",
    "metrics",
    "linting",
    "static-analysis",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "radon>=6.0.0",
    "complexipy>=3.3.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0",
    "pathspec>=0.12.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",
    "types-PyYAML>=6.0",
]

[project.scripts]
antipasta = "antipasta.cli.main:main"

[project.urls]
Homepage = "https://github.com/hesreallyhim/antipasta"
Issues = "https://github.com/hesreallyhim/antipasta/issues"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/antipasta"]

[tool.ruff]
target-version = "py311"
preview = true
line-length = 100
fix = true
extend-exclude = ["DEMOS", "__INTERNAL__"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PT",   # flake8-pytest-style
    "PIE",  # flake8-pie tidy-ups; many auto-fixes
    "FURB", # refurb refactors; many auto-fixes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    # "TCH", # flake8-type-checking
]
ignore = []
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["antipasta"]
combine-as-imports = true
force-sort-within-sections = true

[tool.black]
line-length = 100
target-version = ["py311"]
extend-exclude = "__INTERNAL__"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
pretty = true
show_error_codes = true
show_error_context = true
exclude = ["__INTERNAL__"]

[[tool.mypy.overrides]]
module = ["radon.*", "complexipy.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--no-cov-on-fail",
]

[tool.coverage.run]
branch = true
source = ["src/antipasta"]
parallel = false
concurrency = []
disable_warnings = ["module-not-measured"]
omit = ["*/__INTERNAL__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


"""Auto-generated schema validators for the JSON used by the main CLI."""
# DO NOT EDIT THIS FILE - IT IS AUTO-GENERATED BY build.py
# TO CHANGE A SCHEMA, EDIT THE CORRESPONDING .schema FILE
# AND RUN make schemas OR make all IN THE src DIRECTORY.
# pylint: disable=line-too-long
import json
from jsonschema import Draft7Validator
from referencing import Registry
from referencing.jsonschema import DRAFT7
from jsonschema import validators


def _isColorMap(checker, instance):
    import matplotlib.colors as mplcolors
    return isinstance(instance, mplcolors.Colormap)


def _isNumpyArray(checker, instance):
    import numpy as np
    return isinstance(instance, np.ndarray)


def _isArray(checker, instance):
    return isinstance(instance, list) or isinstance(instance, tuple)


_typeChecker = Draft7Validator.TYPE_CHECKER.redefine_many(
    {
        "ndarray": _isNumpyArray,
        "colormap": _isColorMap,
        "array": _isArray
    })


CustomValidator = validators.extend(Draft7Validator,
    type_checker=_typeChecker)


_prepareBedSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "prepareBed", "description": "Schema for prepareBed.py", "type": "object", "properties": { "heads": { "type": "array", "items": { "type": "object", "properties": { "bigwig-names": { "type": "array", "items": {"type": "string"} }, "max-counts":{ "type": "number" }, "min-counts":{ "type": "number" }, "max-quantile":{ "$ref": "/schema/base#/definitions/fraction" }, "min-quantile":{ "$ref": "/schema/base#/definitions/fraction" }, "negative-set-include-fraction":{ "$ref": "/schema/base#/definitions/fraction" }, "negative-set-quantile":{ "$ref": "/schema/base#/definitions/fraction" } }, "required": ["bigwig-names"], "allOf": [ {"oneOf": [ {"required": ["max-counts"]}, {"required": ["max-quantile"]}]}, {"oneOf": [ {"required": ["min-counts"]}, {"required": ["min-quantile"]}]} ] } }, "splits":{ "oneOf":[ { "type": "object", "properties": { "train-chroms": {"type": "array", "items": {"type": "string"}}, "val-chroms":   {"type": "array", "items": {"type": "string"}}, "test-chroms":  {"type": "array", "items": {"type": "string"}}, "regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-chroms", "val-chroms", "test-chroms", "regions"] }, { "type": "object", "properties": { "train-regions": {"type": "array", "items": {"type": "string"}}, "val-regions":   {"type": "array", "items": {"type": "string"}}, "test-regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-regions", "val-regions", "test-regions"] }, { "type": "object", "properties": { "train-regex": {"type": "string"}, "val-regex":   {"type": "string"}, "test-regex":  {"type": "string"}, "regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-regex", "val-regex", "test-regex", "regions"] }]}, "genome": {"type": "string"}, "output-length": {"type": "integer"}, "input-length": {"type": "integer"}, "max-jitter": {"type": "integer"}, "output-prefix": {"type": "string"}, "output-train": {"type": "string"}, "output-val": {"type": "string"}, "output-test": {"type": "string"}, "resize-mode": {"type": "string", "enum": ["none", "center", "start"]}, "remove-overlaps": {"type": "boolean"}, "overlap-max-distance": {"type": "integer"}, "blacklist": {"type": "string"}, "num-threads" : {"type" : "integer"}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["heads", "splits", "genome", "output-length", "input-length", "max-jitter", "remove-overlaps",  "verbosity"], "allOf": [ { "if": { "properties": { "remove-overlaps": {"const": true}}}, "then":{ "required": ["overlap-max-distance"] }, "else":{ "not": {"required": ["overlap-max-distance"]} } }, { "oneOf": [ {"required": ["output-prefix"]}, {"required": ["output-train", "output-val", "output-test"]}] } ] } """)  # noqa
_prepareBedSchema['$id'] = 'https://example.com/schema/prepareBed'
_prepareBed_oldSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "prepareBed", "description": "Schema for prepareBed.py", "type": "object", "properties": { "bigwigs": { "type": "array", "items": { "type": "object", "properties": { "file-name": { "type": "string" }, "max-counts":{ "type": "number" }, "min-counts":{ "type": "number" }, "max-quantile":{ "type": "number" }, "min-quantile":{ "type": "number" } }, "required": ["file-name"], "allOf": [ {"oneOf": [ {"required": ["max-counts"]}, {"required": ["max-quantile"]}]}, {"oneOf": [ {"required": ["min-counts"]}, {"required": ["min-quantile"]}]}] } }, "splits":{ "oneOf":[ { "type": "object", "properties": { "train-chroms": {"type": "array", "items": {"type": "string"}}, "val-chroms":   {"type": "array", "items": {"type": "string"}}, "test-chroms":  {"type": "array", "items": {"type": "string"}}, "regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-chroms", "val-chroms", "test-chroms", "regions"] }, { "type": "object", "properties": { "train-regions": {"type": "array", "items": {"type": "string"}}, "val-regions":   {"type": "array", "items": {"type": "string"}}, "test-regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-regions", "val-regions", "test-regions"] }, { "type": "object", "properties": { "train-regex": {"type": "string"}, "val-regex":   {"type": "string"}, "test-regex":  {"type": "string"}, "regions":  {"type": "array", "items": {"type": "string"}} }, "required": ["train-regex", "val-regex", "test-regex", "regions"] }]}, "genome": {"type": "string"}, "output-length": {"type": "integer"}, "input-length": {"type": "integer"}, "max-jitter": {"type": "integer"}, "output-prefix": {"type": "string"}, "output-train": {"type": "string"}, "output-val": {"type": "string"}, "output-test": {"type": "string"}, "resize-mode": {"type": "string", "enum": ["none", "center", "start"]}, "remove-overlaps": {"type": "boolean"}, "overlap-max-distance": {"type": "integer"}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["bigwigs", "splits", "genome", "output-length", "input-length", "max-jitter", "remove-overlaps",  "verbosity"], "allOf": [ { "if": { "properties": { "remove-overlaps": {"const": true}}}, "then":{ "required": ["overlap-max-distance"] }, "else":{ "not": {"required": ["overlap-max-distance"]} } }, { "oneOf": [ {"required": ["output-prefix"]}, {"required": ["output-train", "output-val", "output-test"]}] } ] } """)  # noqa
_prepareBed_oldSchema['$id'] = 'https://example.com/schema/prepareBed_old'
_prepareTrainingDataSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "prepareTrainingData", "description": "Schema for prepareTrainingData.py", "type": "object", "properties": { "genome": {"type": "string"}, "output-length": {"type": "integer"}, "input-length": {"type": "integer"}, "max-jitter": {"type": "integer"}, "regions": {"type": "string"}, "output-h5": {"type": "string"}, "reverse-complement": {"type": "boolean"}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"}, "heads": { "type": "array", "items": { "type": "object", "properties": { "bigwig-files": { "type": "array", "items": {"type": "string"} }, "revcomp-task-order":{ "oneOf": [ {"enum": ["auto"]}, {"type": "array", "items": {"type": "integer"}}] } }, "required": ["bigwig-files"] } } }, "required": ["heads", "genome", "output-length", "input-length", "max-jitter", "regions", "output-h5", "reverse-complement",  "verbosity"] } """)  # noqa
_prepareTrainingDataSchema['$id'] = 'https://example.com/schema/prepareTrainingData'
_trainSoloModelSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "trainSoloModel", "description": "Schema for trainSoloModel.py", "type": "object", "properties": { "train-data": {"type": "string"}, "val-data": {"type": "string"}, "settings": { "type": "object", "properties": { "output-prefix": {"type": "string"}, "epochs": {"type": "integer"}, "max-jitter": {"type": "integer"}, "early-stopping-patience": {"type": "integer"}, "batch-size": {"type": "integer"}, "learning-rate": {"$ref": "/schema/base#/definitions/fraction"}, "learning-rate-plateau-patience": {"type": "integer"}, "architecture": { "type": "object", "properties": { "architecture-name": {"type": "string", "enum": ["bpnet"]}, "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "model-name": {"type": "string"}, "model-args": {"type": "string"}, "filters": {"type": "integer"}, "layers": {"type": "integer"}, "input-filter-width": {"type": "integer"}, "output-filter-width": {"type": "integer"}}, "required": ["architecture-name", "input-length", "output-length", "model-name", "filters", "layers", "input-filter-width", "output-filter-width"]} }, "required": ["output-prefix", "epochs", "max-jitter", "early-stopping-patience", "batch-size", "learning-rate", "learning-rate-plateau-patience", "architecture"], "not": {"required": ["transformation-model"]} }, "heads": { "type": "array", "items": { "type": "object", "properties": { "num-tasks": {"type": "integer"}, "profile-loss-weight": {"type": "number"}, "head-name": {"type": "string"}, "counts-loss-weight": {"type": "number"}, "counts-loss-frac-target": {"$ref": "/schema/base#/definitions/fraction"} }, "anyOf": [ {"required": ["counts-loss-weight"]}, {"required": ["counts-loss-frac-target"]} ], "required": ["num-tasks", "profile-loss-weight", "head-name"], "not": {"required": ["use-bias-counts"]} } }, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["heads", "train-data", "val-data", "settings",  "verbosity"] } """)  # noqa
_trainSoloModelSchema['$id'] = 'https://example.com/schema/trainSoloModel'
_trainTransformationModelSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "trainTransformationModel", "description": "Schema for trainTransformationModel.py", "type": "object", "properties": { "train-data": {"type": "string"}, "val-data": {"type": "string"}, "settings": { "type": "object", "properties": { "output-prefix": {"type": "string"}, "epochs": {"type": "integer"}, "max-jitter": {"type": "integer"}, "early-stopping-patience": {"type": "integer"}, "batch-size": {"type": "integer"}, "learning-rate": {"$ref": "/schema/base#/definitions/fraction"}, "learning-rate-plateau-patience": {"type": "integer"}, "solo-model-file": {"type": "string"}, "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "profile-architecture": { "$ref": "#/definitions/transformation-architecture-specification" }, "counts-architecture": { "$ref": "#/definitions/transformation-architecture-specification" } }, "required": ["output-prefix", "epochs", "max-jitter", "early-stopping-patience", "batch-size", "learning-rate", "learning-rate-plateau-patience", "solo-model-file", "input-length", "output-length", "profile-architecture", "counts-architecture"], "not": {"required": ["architecture", "transformation-model"]} }, "heads": { "type": "array", "items": { "type": "object", "properties": { "num-tasks": {"type": "integer"}, "profile-loss-weight": {"type": "number"}, "head-name": {"type": "string"}, "counts-loss-weight": {"type": "number"}, "counts-loss-frac-target": {"$ref": "/schema/base#/definitions/fraction"} }, "anyOf": [ {"required": ["counts-loss-weight"]}, {"required": ["counts-loss-frac-target"]} ], "required": ["num-tasks", "profile-loss-weight", "head-name"], "not": {"required": ["use-bias-counts"]} } }, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["heads", "train-data", "val-data", "settings",  "verbosity"], "definitions": { "transformation-architecture-specification": { "oneOf": [ { "type": "object", "properties": { "name": {"type": "string", "enum": ["passthrough"]} }, "required": ["name"] }, { "type": "object", "properties": { "name": {"type": "string", "enum": ["simple"]}, "types": { "type": "array", "items": { "type": "string", "enum": ["linear", "sigmoid", "relu"] } } }, "required": ["name", "types"] } ] } } }""")  # noqa
_trainTransformationModelSchema['$id'] = 'https://example.com/schema/trainTransformationModel'
_trainCombinedModelSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "trainCombinedModel", "description": "Schema for trainCombinedModel.py", "type": "object", "properties": { "train-data": {"type": "string"}, "val-data": {"type": "string"}, "settings": { "type": "object", "properties": { "output-prefix": {"type": "string"}, "epochs": {"type": "integer"}, "max-jitter": {"type": "integer"}, "early-stopping-patience": {"type": "integer"}, "batch-size": {"type": "integer"}, "learning-rate": {"$ref": "/schema/base#/definitions/fraction"}, "learning-rate-plateau-patience": {"type": "integer"}, "transformation-model": { "type": "object", "properties": { "transformation-model-file": {"type": "string"} }, "required": ["transformation-model-file"] }, "architecture": { "type": "object", "properties": { "architecture-name": {"type": "string", "enum": ["bpnet"]}, "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "model-name": {"type": "string"}, "model-args": {"type": "string"}, "filters": {"type": "integer"}, "layers": {"type": "integer"}, "input-filter-width": {"type": "integer"}, "output-filter-width": {"type": "integer"}}, "required": ["architecture-name", "input-length", "output-length", "model-name", "filters", "layers", "input-filter-width", "output-filter-width"]} }, "required": ["output-prefix", "epochs", "max-jitter", "early-stopping-patience", "batch-size", "learning-rate", "learning-rate-plateau-patience", "transformation-model", "architecture"], "not": {"required": ["profile-architecture", "counts-architecture"]} }, "heads": { "type": "array", "items": { "type": "object", "properties": { "num-tasks": {"type": "integer"}, "profile-loss-weight": {"type": "number"}, "head-name": {"type": "string"}, "counts-loss-weight": {"type": "number"}, "counts-loss-frac-target": {"$ref": "/schema/base#/definitions/fraction"}, "use-bias-counts": {"type": "boolean"} }, "anyOf": [ {"required": ["counts-loss-weight"]}, {"required": ["counts-loss-frac-target"]} ], "required": ["num-tasks", "profile-loss-weight", "head-name", "use-bias-counts"] } }, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["heads", "train-data", "val-data", "settings",  "verbosity"] } """)  # noqa
_trainCombinedModelSchema['$id'] = 'https://example.com/schema/trainCombinedModel'
_makePredictionsSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "makePredictions", "description": "Schema for makePredictions.py", "type": "object", "properties": { "settings": { "type": "object", "properties": { "output-h5": {"type": "string"}, "batch-size": {"type": "integer"}, "genome": {"type": "string"}, "heads": {"type": "integer"}, "architecture": { "type": "object", "properties": { "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "model-file": {"type": "string"} }, "required": ["input-length", "output-length", "model-file"] } }, "required": ["output-h5", "batch-size", "heads", "architecture"] }, "fasta-file": {"type": "string"}, "bed-file": {"type": "string"}, "num-threads": {"type": "integer", "minimum" : 1}, "coordinates": { "type": "object", "properties": { "bed-file" : {"type": "string"}, "genome" : {"type": "string"} }, "required" : ["bed-file", "genome"] }, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["settings", "verbosity"], "oneOf": [ { "required": ["fasta-file"], "not": {"required": ["bed-file"]} }, { "required": ["bed-file"], "oneOf": [ {"properties": {"settings": { "required": ["genome"]}}}, {"required": ["genome"]}], "not": {"anyOf": [ {"required": ["fasta-file"]}, {"required": ["coordinates"]}]} }]  } """)  # noqa
_makePredictionsSchema['$id'] = 'https://example.com/schema/makePredictions'
_interpretFlatSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "interpretFlat", "description": "Schema for interpretFlat.py", "type": "object", "properties": { "genome": {"type": "string"}, "bed-file": {"type": "string"}, "fasta-file": {"type": "string"}, "coordinates" : { "type" : "object", "properties" : { "genome": {"type": "string"}, "bed-file": {"type": "string"} }, "required" : ["genome", "bed-file"] }, "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "heads": {"type": "integer", "minimum": 1}, "head-id": {"type": "integer"}, "profile-task-ids": { "type": "array", "items": { "type": "integer"} }, "profile-h5": {"type": "string"}, "counts-h5": {"type": "string"}, "num-shuffles": {"type": "integer", "minimum" : 1}, "kmer-size": {"type": "integer", "minimum" : 1}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["input-length", "output-length", "heads", "head-id", "num-shuffles", "verbosity"], "anyOf": [ { "required": ["profile-h5", "profile-task-ids"] }, { "required": ["counts-h5"] }], "oneOf": [ { "required": ["genome", "bed-file"], "not": { "anyOf" : [ {"required": ["coordinates"]}, {"required": ["fasta-file"]} ] } }, { "not": { "anyOf" : [ {"required": ["genome"]}, {"required": ["bed-file"]} ] }, "required": ["fasta-file"] } ] } """)  # noqa
_interpretFlatSchema['$id'] = 'https://example.com/schema/interpretFlat'
_interpretPisaSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "interpretPisa", "description": "Schema for interpretPisa.py", "type": "object", "properties": { "genome": {"type": "string"}, "bed-file": {"type": "string"}, "fasta-file": {"type": "string"}, "sequence-fasta": {"type": "string"}, "input-length": {"type": "integer"}, "output-length": {"type": "integer"}, "head-id": {"type": "integer"}, "task-id": {"type": "integer"}, "output-h5": {"type": "string"}, "correct-receptive-field": {"type": "boolean"}, "num-shuffles": {"type": "integer", "minimum" : 1}, "kmer-size": {"type": "integer", "minimum" : 1}, "num-threads": {"type": "integer", "minimum" : 1}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "required": ["input-length", "output-length", "head-id", "task-id", "output-h5", "num-shuffles", "verbosity"], "oneOf": [ { "required": ["genome", "bed-file"], "not": {"anyOf": [{"required": ["fasta-file"]}, {"required": ["sequence-fasta"]}]} }, { "oneOf": [{"required": ["fasta-file"]}, {"required": ["sequence-fasta"]}], "not": {"required": ["genome", "bed-file"]} } ] } """)  # noqa
_interpretPisaSchema['$id'] = 'https://example.com/schema/interpretPisa'
_motifSeqletCutoffsSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "motifSeqletCutoffs", "description": "Schema for motifSeqletCutoffs.py", "definitions": { "seqlet-scanning-settings": { "type": "object", "properties": { "seqlets-tsv": {"type": "string"}, "modisco-h5": {"type": "string"}, "modisco-contrib-h5": {"type": "string"}, "modisco-window": {"type": "integer"}, "seq-match-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "contrib-match-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "contrib-magnitude-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "trim-threshold": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "trim-padding": {"type": "integer"}, "background-probs": { "oneOf": [ {"type": "array", "minItems": 4, "maxItems": 4, "items": {"$ref": "/schema/base#/definitions/fraction"}}, {"type": "ndarray"}, {"type": "string", "enum": ["danRer11", "hg38", "mm10", "dm6", "sacCer3"]} ] }, "quantile-json": {"type": "string"}, "patterns": { "oneOf":[ { "type": "array", "items": {"$ref": "#/definitions/pattern-spec-section"} }, {"type": "string", "enum": ["all"]} ] } }, "required": ["modisco-h5", "seq-match-quantile", "contrib-match-quantile", "contrib-magnitude-quantile", "trim-threshold", "trim-padding", "background-probs", "patterns"] }, "pattern-spec-section": { "type": "object", "properties": { "metacluster-name": {"type": "string"}, "pattern-name": {"type": "string"}, "pattern-names": {"type": "array", "items": {"type": "string"}}, "short-name": {"type": "string"}, "short-names": {"type": "array", "items": {"type": "string"}}, "seq-match-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "contrib-match-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"}, "contrib-magnitude-quantile": {"$ref": "/schema/base#/definitions/fraction-or-null"} }, "required": ["metacluster-name"], "oneOf":[ {"allOf": [ {"required": ["pattern-name"]}, {"not": {"anyOf": [{"required": ["pattern-names"]}, {"required": ["short-names"]}]}}]}, {"allOf": [ {"required": ["pattern-names"]}, {"not": {"anyOf": [{"required": ["pattern-name"]}, {"required": ["short-name"]}]}}]}] } },  "type": "object", "properties": { "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "allOf": [ {"$ref": "#/definitions/seqlet-scanning-settings"}, {"required": ["verbosity"]} ] } """)  # noqa
_motifSeqletCutoffsSchema['$id'] = 'https://example.com/schema/motifSeqletCutoffs'
_motifScanSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "motifScan", "description": "Schema for motifScan.py", "type": "object", "properties": { "seqlet-cutoff-json": { "type": "string" }, "seqlet-cutoff-settings": { "$ref": "/schema/motifSeqletCutoffs#/definitions/seqlet-scanning-settings" }, "scan-settings": { "type": "object", "properties": { "scan-contrib-h5": { "type": "string" }, "hits-tsv": { "type": "string" }, "num-threads": { "type": "integer", "minimum" : 3 } }, "required": [ "scan-contrib-h5", "hits-tsv", "num-threads" ] }, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "oneOf": [ { "required": [ "seqlet-cutoff-json" ] }, { "required": [ "seqlet-cutoff-settings" ] } ], "required": [ "verbosity", "scan-settings" ] }""")  # noqa
_motifScanSchema['$id'] = 'https://example.com/schema/motifScan'
_addNoiseSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "addNoise", "description": "Schema for :py:mod:addNoise<bpreveal.tools.addNoise>", "definitions": { "add-mutation-type": { "type": "object", "properties": { "type": { "const": "add" }, "maximum-reads": { "oneOf": [ { "type": "number", "minimum": 0 }, { "const": null } ] }, "minimum-reads": { "type": "integer", "minimum": 0 }, "max-change": { "type": "integer" }, "fraction-mutated": { "$ref": "/schema/base#/definitions/fraction"}, "output-distribution-fraction":  { "$ref": "/schema/base#/definitions/fraction"} }, "additionalProperties": false, "required": [ "type", "maximum-reads", "minimum-reads", "max-change", "fraction-mutated", "output-distribution-fraction" ] }, "subtract-mutation-type": { "type": "object", "properties": { "type": { "const": "subtract" }, "maximum-reads": { "oneOf": [ { "type": "number", "minimum": 1 }, { "const": null } ] }, "minimum-reads": { "type": "integer", "minimum": 1 }, "max-change": { "type": "integer" }, "fraction-mutated":  { "$ref": "/schema/base#/definitions/fraction"}, "output-distribution-fraction":  { "$ref": "/schema/base#/definitions/fraction"} }, "additionalProperties": false, "required": [ "type", "maximum-reads", "minimum-reads", "max-change", "fraction-mutated", "output-distribution-fraction" ] }, "shift-mutation-type": { "type": "object", "properties": { "type": { "const": "shift" }, "shift-max-distance": { "type": "integer", "minimum": 1 }, "shift-reads-independently": { "type": "boolean" }, "fraction-mutated":  { "$ref": "/schema/base#/definitions/fraction"}, "output-distribution-fraction":  { "$ref": "/schema/base#/definitions/fraction"} }, "additionalProperties": false, "required": [ "type", "shift-max-distance", "shift-reads-independently", "fraction-mutated", "output-distribution-fraction" ] } }, "type": "object", "properties": { "input-h5": { "type": "string" }, "output-h5": { "type": "string" }, "num-output-samples": { "type": "integer" }, "output-size-ratio": { "type": "number" }, "keep-original-data": { "type": "boolean" }, "sequence-fraction-mutated": { "type": "number", "minimum": 0, "maximum": 1 }, "sequence-distribution-fraction": { "type": "number", "minimum": 0, "maximum": 1 }, "profile-mutation-types": { "type": "array", "items": { "anyOf": [ { "$ref": "#/definitions/add-mutation-type" }, { "$ref": "#/definitions/subtract-mutation-type" }, { "$ref": "#/definitions/shift-mutation-type" } ] } }, "num-threads": { "type": "integer" }, "verbosity": { "$ref": "/schema/base#/definitions/verbosity" } }, "required": [ "input-h5", "output-h5", "keep-original-data", "sequence-fraction-mutated", "sequence-distribution-fraction", "profile-mutation-types", "num-threads", "verbosity" ], "oneOf": [ { "required": [ "num-output-samples" ], "not": { "required": [ "output-size-ratio" ] } }, { "required": [ "output-size-ratio" ], "not": { "required": [ "num-output-samples" ] } } ] }""")  # noqa
_addNoiseSchema['$id'] = 'https://example.com/schema/addNoise'
_pisaPlotSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "pisaPlot", "description": "Schema for pisa plots", "definitions": { "plot-config": { "type": "object", "properties": { "pisa": {"$ref": "/schema/base#/definitions/pisa-section"}, "coordinates": {"$ref": "/schema/base#/definitions/coordinates-section"}, "importance": {"$ref": "/schema/base#/definitions/profile-section"}, "predictions": {"$ref": "/schema/base#/definitions/profile-section"}, "annotations": {"$ref": "/schema/base#/definitions/annotation-section"}, "figure": { "type": "object", "properties": { "bottom": {"type": "number"}, "left": {"type": "number"}, "width": {"type": "number"}, "height": {"type": "number"}, "annotation-height": {"type": "number"}, "tick-font-size": {"type": "integer"}, "label-font-size": {"type": "integer"}, "color-span": {"type": "number"}, "grid-mode": { "type": "string", "enum": ["on", "off"] }, "diagonal-mode": { "type": "string", "enum": ["on", "off", "edge"] }, "miniature": {"type": "boolean"} }, "required": ["bottom", "left", "width", "height", "color-span"], "additionalProperties": false } },  "required": ["pisa", "coordinates", "importance", "predictions", "annotations", "figure"], "additionalProperties": false } }, "type": "object", "allOf": [{"$ref": "#/definitions/plot-config"}] } """)  # noqa
_pisaPlotSchema['$id'] = 'https://example.com/schema/pisaPlot'
_pisaGraphSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "pisaGraph", "description": "Schema for pisa graphs", "definitions": { "graph-config": { "type": "object", "properties": { "pisa": {"$ref": "/schema/base#/definitions/pisa-section"}, "coordinates": {"$ref": "/schema/base#/definitions/coordinates-section"}, "importance": {"$ref": "/schema/base#/definitions/profile-section"}, "predictions": {"$ref": "/schema/base#/definitions/profile-section"}, "annotations": {"$ref": "/schema/base#/definitions/annotation-section"}, "figure": { "type": "object", "properties": { "bottom": {"type": "number"}, "left": {"type": "number"}, "width": {"type": "number"}, "height": {"type": "number"}, "annotation-height": {"type": "number"}, "tick-font-size": {"type": "integer"}, "label-font-size": {"type": "integer"}, "color-span": {"type": "number"}, "miniature": {"type": "boolean"}, "line-width": {"type": "integer"} }, "required": ["bottom", "left", "width", "height"], "additionalProperties": false }, "min-value": {"type": "number"}, "use-annotation-colors": {"type": "boolean"} },  "required": ["pisa", "coordinates", "importance", "predictions", "annotations", "figure", "min-value"], "additionalProperties": false } }, "type": "object", "allOf":[{"$ref": "#/definitions/graph-config"}] }""")  # noqa
_pisaGraphSchema['$id'] = 'https://example.com/schema/pisaGraph'
_makePisaFigureSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "makePisaFigure", "description": "Schema for making PISA figures", "type": "object", "properties": { "graph-configs": { "type": "array", "items": {"$ref": "/schema/pisaGraph#/definitions/graph-config"} }, "plot-configs": { "type": "array", "items": {"$ref": "/schema/pisaPlot#/definitions/plot-config"} }, "width": {"type": "integer"}, "height": {"type": "integer"}, "dpi": {"type": "integer"}, "transparent": {"type": "boolean"}, "output-png": {"type": "string"}, "output-pdf": {"type": "string"}, "output-gui": {"type": "boolean"}, "verbosity": {"$ref": "/schema/base#/definitions/verbosity"} }, "allOf": [ {"anyOf": [ {"required": ["graph-configs"]}, {"required": ["plot-configs"]} ]}, {"anyOf": [ {"required": ["output-png"]}, {"required": ["output-pdf"]}, {"required": ["output-gui"]} ]} ], "additionalProperties": false }""")  # noqa
_makePisaFigureSchema['$id'] = 'https://example.com/schema/makePisaFigure'
_baseSchema = json.loads("""{ "$schema": "http://json-schema.org/draft-07/schema#", "title": "base", "description": "Useful definitions", "definitions": { "fraction": { "type": "number", "maximum" : 1, "minimum" : 0 }, "number-or-null": { "oneOf": [ {"type" : "null"}, {"type" : "number"} ] }, "fraction-or-null": { "oneOf": [ {"type" : "null"}, {"$ref": "#/definitions/fraction"} ] }, "verbosity": { "type": "string", "enum": ["DEBUG", "WARNING", "INFO", "ERROR", "CRITICAL"] }, "pisa-section": { "type": "object", "properties": { "h5-name" : {"type": "string"}, "values": {"oneOf": [ { "type": "ndarray" }, { "type": "array", "items": {"type": "array", "items": {"type": "number"}} } ]}, "color-map": { "oneOf": [{"type": "string", "enum": ["clip", "noclip"]}, {"type": "colormap"}] }, "rasterize": {"type": "boolean"} }, "oneOf": [ { "required": ["h5-name"], "not": {"required": ["values"]} }, { "required": ["values"], "not": {"required": ["h5-name"]} } ], "additionalProperties": false  }, "coordinates-section":{ "type": "object", "properties": { "midpoint-offset": {"type": "integer"}, "input-slice-width": {"type": "integer"}, "output-slice-width": {"type": "integer"}, "genome-window-start": {"type": "integer"}, "genome-window-chrom": {"type": "string"}, "genome-fasta": {"type": "string"}, "sequence": {"type": "string"} }, "required": ["midpoint-offset", "input-slice-width", "output-slice-width", "genome-window-start", "genome-window-chrom"], "additionalProperties": false }, "profile-section": { "type": "object", "properties": { "bigwig-name": {"type": "string"}, "values": {"oneOf": [ {"type": "ndarray"}, {"type": "array", "items": {"type": "number"}} ]}, "show-sequence": {"type": "boolean"}, "color": {"oneOf": [ {"$ref": "#/definitions/color-spec"}, {"$ref": "#/definitions/sequence-color-spec"}, {"type": "array", "items": {"$ref": "#/definitions/color-spec"}}, {"type": "array", "items": {"$ref": "#/definitions/sequence-color-spec"}}] }, "label": {"type": "string"}, "data-range": {"oneOf": [ {"type" : "null"}, { "type": "array", "minItems": 2, "maxItems": 2, "items": {"type": "number"} } ]} }, "oneOf": [ {"required": ["bigwig-name"]}, {"required": ["values"]}], "additionalProperties": false },  "color-spec": { "oneOf": [ { "type": "array", "minItems": 3, "maxItems": 4, "items": {"type": "number"} }, { "type": "object", "properties": { "rgb": { "type": "array", "minItems": 3, "maxItems": 3, "items": {"type": "number"} }, "rgba": { "type": "array", "minItems": 4, "maxItems": 4, "items": {"type": "number"} }, "tol": {"type": "integer"}, "tol-light": {"type": "integer"}, "ibm": {"type": "integer"}, "wong": {"type": "integer"} }, "oneOf": [ {"required": ["rgb"]}, {"required": ["rgba"]}, {"required": ["tol"]}, {"required": ["tol-light"]}, {"required": ["ibm"]}, {"required": ["wong"]} ], "additionalProperties": false} ] }, "sequence-color-spec": { "type": "object", "properties": { "A": {"$ref": "#/definitions/color-spec"}, "C": {"$ref": "#/definitions/color-spec"}, "G": {"$ref": "#/definitions/color-spec"}, "T": {"$ref": "#/definitions/color-spec"}, "r": {"$ref": "#/definitions/color-spec"}, "ř": {"$ref": "#/definitions/color-spec"}, "Ǎ": {"$ref": "#/definitions/color-spec"}, "Č": {"$ref": "#/definitions/color-spec"}, "Ǧ": {"$ref": "#/definitions/color-spec"}, "Ť": {"$ref": "#/definitions/color-spec"}, "d": {"$ref": "#/definitions/color-spec"}  }, "required": ["A", "C", "G", "T"], "additionalProperties": false }, "annotation-section": { "type": "object", "properties": { "bed-name": {"type": "string"}, "name-colors": { "type": "object", "patternProperties": { "^.*$": {"$ref": "#/definitions/color-spec"} } }, "custom": { "type": "array", "items": { "type": "object", "properties": { "start": {"type": "integer"}, "end": {"type": "integer"}, "name": {"type": "string"}, "color": {"$ref": "#/definitions/color-spec"}, "bottom": {"$ref": "#/definitions/fraction"}, "top": {"$ref": "#/definitions/fraction"}, "shape": { "type": "string", "anyOf": [ {"enum": ["diamond", "wedge", "box", "indel", "snp", "A", "C", "G", "T", "d", "Ǎ", "Č", "Ǧ", "Ť", "r", "ř", "ORFLeft", "ORFRight", "PromoterLeft", "PromoterRight"]}, {"pattern": "trapezoid,(up|down),[0-9]+"} ] }, "force-color-positive": {"$ref": "#/definitions/color-spec"}, "force-color-negative": {"$ref": "#/definitions/color-spec"} }, "required": ["start", "end", "name", "color"], "not": { "oneOf": [ {"required": ["force-color-positive"]}, {"required": ["force-color-negative"]} ]}, "additionalProperties": false } } }, "additionalProperties": false } }, "not": {} }""")  # noqa
_baseSchema['$id'] = 'https://example.com/schema/base'
_schemaStore = {_prepareBedSchema['$id']: _prepareBedSchema, _prepareBed_oldSchema['$id']: _prepareBed_oldSchema, _prepareTrainingDataSchema['$id']: _prepareTrainingDataSchema, _trainSoloModelSchema['$id']: _trainSoloModelSchema, _trainTransformationModelSchema['$id']: _trainTransformationModelSchema, _trainCombinedModelSchema['$id']: _trainCombinedModelSchema, _makePredictionsSchema['$id']: _makePredictionsSchema, _interpretFlatSchema['$id']: _interpretFlatSchema, _interpretPisaSchema['$id']: _interpretPisaSchema, _motifSeqletCutoffsSchema['$id']: _motifSeqletCutoffsSchema, _motifScanSchema['$id']: _motifScanSchema, _addNoiseSchema['$id']: _addNoiseSchema, _pisaPlotSchema['$id']: _pisaPlotSchema, _pisaGraphSchema['$id']: _pisaGraphSchema, _makePisaFigureSchema['$id']: _makePisaFigureSchema, _baseSchema['$id']: _baseSchema, }
_storeList = [(x, DRAFT7.create_resource(_schemaStore[x])) for x in _schemaStore.keys()]
_registry = Registry().with_resources(_storeList)


prepareBed: CustomValidator = CustomValidator(_prepareBedSchema, registry=_registry)
"""Validator for :py:mod:`prepareBed<bpreveal.prepareBed>`

:meta hide-value:
"""
prepareBed_old: CustomValidator = CustomValidator(_prepareBed_oldSchema, registry=_registry)
prepareTrainingData: CustomValidator = CustomValidator(_prepareTrainingDataSchema, registry=_registry)
"""Validator for :py:mod:`prepareTrainingData<bpreveal.prepareTrainingData>`

:meta hide-value:
"""
trainSoloModel: CustomValidator = CustomValidator(_trainSoloModelSchema, registry=_registry)
"""Validator for :py:mod:`trainSoloModel<bpreveal.trainSoloModel>`

:meta hide-value:
"""
trainTransformationModel: CustomValidator = CustomValidator(_trainTransformationModelSchema, registry=_registry)
"""Validator for :py:mod:`trainTransformationModel<bpreveal.trainTransformationModel>`

:meta hide-value:
"""
trainCombinedModel: CustomValidator = CustomValidator(_trainCombinedModelSchema, registry=_registry)
"""Validator for :py:mod:`trainCombinedModel<bpreveal.trainCombinedModel>`

:meta hide-value:
"""
makePredictions: CustomValidator = CustomValidator(_makePredictionsSchema, registry=_registry)
"""Validator for :py:mod:`makePredictions<bpreveal.makePredictions>`

:meta hide-value:
"""
interpretFlat: CustomValidator = CustomValidator(_interpretFlatSchema, registry=_registry)
"""Validator for :py:mod:`interpretFlat<bpreveal.interpretFlat>`

:meta hide-value:
"""
interpretPisa: CustomValidator = CustomValidator(_interpretPisaSchema, registry=_registry)
"""Validator for :py:mod:`interpretPisa<bpreveal.interpretPisa>`

:meta hide-value:
"""
motifSeqletCutoffs: CustomValidator = CustomValidator(_motifSeqletCutoffsSchema, registry=_registry)
"""Validator for :py:mod:`motifSeqletCutoffs<bpreveal.motifSeqletCutoffs>`

:meta hide-value:
"""
motifScan: CustomValidator = CustomValidator(_motifScanSchema, registry=_registry)
"""Validator for :py:mod:`motifScan<bpreveal.motifScan>`

:meta hide-value:
"""
addNoise: CustomValidator = CustomValidator(_addNoiseSchema, registry=_registry)
"""Validator for :py:mod:`addNoise<bpreveal.tools.addNoise>`

:meta hide-value:
"""
pisaPlot: CustomValidator = CustomValidator(_pisaPlotSchema, registry=_registry)
"""Validator for :py:func:`plotPisa<bpreveal.plotting.plotPisa>`

:meta hide-value:
"""
pisaGraph: CustomValidator = CustomValidator(_pisaGraphSchema, registry=_registry)
"""Validator for :py:func:`plotPisaGraph<bpreveal.plotting.plotPisaGraph>`

:meta hide-value:
"""
makePisaFigure: CustomValidator = CustomValidator(_makePisaFigureSchema, registry=_registry)
"""Validator for :py:mod:`makePisaFigure<bpreveal.makePisaFigure>`

:meta hide-value:
"""
base: CustomValidator = CustomValidator(_baseSchema, registry=_registry)
schemaMap = {"prepareBed": prepareBed,"prepareBed_old": prepareBed_old,"prepareTrainingData": prepareTrainingData,"trainSoloModel": trainSoloModel,"trainTransformationModel": trainTransformationModel,"trainCombinedModel": trainCombinedModel,"makePredictions": makePredictions,"interpretFlat": interpretFlat,"interpretPisa": interpretPisa,"motifSeqletCutoffs": motifSeqletCutoffs,"motifScan": motifScan,"addNoise": addNoise,"pisaPlot": pisaPlot,"pisaGraph": pisaGraph,"makePisaFigure": makePisaFigure,"base": base,}
"""A mapping from a string naming a BPReveal program to the corresponding schema.

Usage::

    schemaMap["prepareBed"](configJson)

:meta hide-value:"""

<expression> ::=
    (<expression>)
  | "<list-of-character>"
  | [<list-of-expression>]
  | {<list-of-dict-elems>}
  | [<expression> <comprehension-suite>]
  | {<dict-elem> <comprehension-suite>}
  | <expression>[<expression>]
  | <expression>.format(<list-of-expression>)
  | <unary-op-expr>
  | <bin-op-expr>
  | <expression> <compare-suite>
  | <bool-op-expr>
  | <number>
  | <python-literal>
  | lambda <formals>: <expression>
  | <expression>(<list-of-expression>)
  | <list-of-character>

<comprehension-suite> ::=
    for <list-of-character> in <expression> « if <expression>»
  | <comprehension-suite> <comprehension-suite>

<list-of-dict-elems> ::=
    <empty>
  | <dict-elem>«, <list-of-dict-elems>»

<dict-elem> ::=
    <expression>: <expression>

<formals> ::=
    <empty>
  | <list-of-character>«, <formals>»
  | <formals-with-defaults>

<formals-with-defaults> ::=
    <empty>
  | <list-of-character>=<expression>«, <formals-with-defaults>»

<list-of-expression> ::=
    <empty>
  | <expression>«, <list-of-expression>»

<bool-op-expr> ::=
    <expression> and <expression>
  | <expression> or <expression>

<bin-op-expr> ::=
    <expression> ** <expression>
    <expression> * <expression>
    <expression> / <expression>
    <expression> + <expression>
    <expression> - <expression>

<unary-op-expr> ::=
    - <expression>
  | not <expression>

<compare-suite> ::=
    <compare-op> <expression> «<compare-suite>»

<compare-op> ::=
    < | > | <= | >= | == | != | in | not in

<python-literal> ::=
    (Anything that is a literal in Python)

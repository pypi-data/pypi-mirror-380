[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fastmcp-langchain-adaptor"
version = "0.1.1"
description = "Seamless integration between FastMCP and LangChain - convert MCP tools to LangChain StructuredTools"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Daniel Shea", email = "daniel.shea@example.com"}
]
maintainers = [
    {name = "Daniel Shea", email = "daniel.shea@example.com"}
]
keywords = ["mcp", "langchain", "ai", "tools", "model-context-protocol", "llm", "agents"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Typing :: Typed",
]
dependencies = [
    "fastmcp>=2.12.4",
    "langchain-core>=0.3.27",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/username/fastmcp-langchain-adaptor"
Repository = "https://github.com/username/fastmcp-langchain-adaptor"
Documentation = "https://username.github.io/fastmcp-langchain-adaptor"
Issues = "https://github.com/username/fastmcp-langchain-adaptor/issues"
Changelog = "https://github.com/username/fastmcp-langchain-adaptor/blob/main/CHANGELOG.md"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
]
ignore = [
    "S101",  # assert used
    "B008",  # function call in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
"scripts/*" = ["S602", "S603"]  # Allow subprocess calls in dev scripts

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["fastmcp_langchain_adaptor"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "safety>=3.6.2",
    "twine>=6.2.0",
]

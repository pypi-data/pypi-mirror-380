"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Checksums import Checksums
from .Blobs import Blobs

# Unused import over optimization prevention
str(repr(Checksums))
str(repr(Blobs))


if sys.version_info > (3,):
    long = int
    unicode = str

class BlobPointer(object):
    """Checksum and path of a blob"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.blobs = (
            None if not fromDict or propDict.get(
                "blobs"
            ) is None
            else propDict["blobs"])
        self.checksums = (
            None if not fromDict or propDict.get(
                "checksums"
            ) is None
            else propDict["checksums"])
        self.schemaVersion = (
            None if not fromDict or propDict.get(
                "schemaVersion"
            ) is None
            else propDict["schemaVersion"])

    @property
    def blobs(self):
        """Blobs: Metadata of the raw file object"""
        return self._blobs

    @blobs.setter
    def blobs(self, value):
        if value is not None and not isinstance(value, Blobs):
            value = Blobs(value)
        if (value is None) or isinstance(value, Blobs):
            self._blobs = value
        else:
            raise TypeError(
                'Property "blobs" of type "list<Blobs>" set to wrong type'
            )

    @property
    def checksums(self):
        """Checksums: Checksum of the file object"""
        return self._checksums

    @checksums.setter
    def checksums(self, value):
        if value is not None and not isinstance(value, Checksums):
            value = Checksums(value)
        if (value is None) or isinstance(value, Checksums):
            self._checksums = value
        else:
            raise TypeError(
                'Property "checksums" of type "list<Checksums>" set to wrong '
                'type'
            )

    @property
    def schemaVersion(self):
        """str: Schema version"""
        return self._schemaVersion

    @schemaVersion.setter
    def schemaVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._schemaVersion = value
        else:
            raise TypeError(
                'Property "schemaVersion" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._blobs:
            result["blobs"] = \
                self._blobs.toDict() if self._blobs is not None else None
        if self._checksums:
            result["checksums"] = \
                self._checksums.toDict() if self._checksums is not None else None
        if self._schemaVersion is not None:
            result["schemaVersion"] = \
                self._schemaVersion
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._checksums is not None): self._checksums.isValid()
        if (self._blobs is not None): self._blobs.isValid()
        return True
    


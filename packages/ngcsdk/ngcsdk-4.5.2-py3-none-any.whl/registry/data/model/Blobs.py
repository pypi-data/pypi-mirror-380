"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Sha256 import Sha256

# Unused import over optimization prevention
str(repr(Sha256))


if sys.version_info > (3,):
    long = int
    unicode = str

class Blobs(object):
    """Metadata of the raw file object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.blobSize = (
            None if not fromDict or propDict.get(
                "blobSize"
            ) is None
            else propDict["blobSize"])
        self.sha256 = (
            None if not fromDict or propDict.get(
                "sha256"
            ) is None
            else propDict["sha256"])

    @property
    def blobSize(self):
        """long: Size of the raw file object"""
        return self._blobSize

    @blobSize.setter
    def blobSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._blobSize = value
        else:
            raise TypeError(
                'Property "blobSize" of type "list<long>" set to wrong type'
            )

    @property
    def sha256(self):
        """Sha256: Checksum metadata of the raw file object"""
        return self._sha256

    @sha256.setter
    def sha256(self, value):
        if value is not None and not isinstance(value, Sha256):
            value = Sha256(value)
        if (value is None) or isinstance(value, Sha256):
            self._sha256 = value
        else:
            raise TypeError(
                'Property "sha256" of type "list<Sha256>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._blobSize is not None:
            result["blobSize"] = \
                self._blobSize
        if self._sha256:
            result["sha256"] = \
                self._sha256.toDict() if self._sha256 is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._sha256 is not None): self._sha256.isValid()
        return True
    


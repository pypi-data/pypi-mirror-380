{"spec": "From a reasoning trace that contains multiple 'Answer:' and 'Final Answer:' markers return only the final 'Final Answer:' content (case-insensitive), trimmed and without trailing punctuation.", "inputs": ["Step 1: compute\nAnswer: 40\nI adjust\nAnswer: 41\nFinal Answer: 42.", "Thought: check capitals\nAnswer: London\nAnswer: Berlin\nfinal answer: The capital is Paris!\nExtra note: done.", "Answer: try A\nFinal Answer: First attempt.\n... more thinking ...\nFINAL ANSWER: Use red paint.", "Answer: choose fruits\nAnswer: consider shelf life\nFinal Answer: List: apples, oranges, bananas;", "Process\nAnswer: unknown\nfinal answer: Maybe, maybe not?", "Work through the math\nAnswer: pi approx\nFinal Answer:   3.14159   .", "Chain of thought:\nAnswer: choose time\nAnswer: check timezone\nFinal Answer: 10:30 AM!", "Reasoning:\nAnswer: step 1\nAnswer: step 2\nFinal Answer: The recommended steps are:\n1) Update\n2) Restart."], "outputs": ["42", "The capital is Paris", "Use red paint", "List: apples, oranges, bananas", "Maybe, maybe not", "3.14159", "10:30 AM", "The recommended steps are:\n1) Update\n2) Restart"]}
{"spec": "Extract balanced parentheses expressions including nested ones from text and return them as an array in order of appearance.", "inputs": ["This is a test (simple) end.", "Compute f(x) = (a*(b+c)) and (d) outside.", "Options: (one)(two) (three)", "Example (first (second (third))) end.", "Broken ) start, then (valid (inner)) end, and (not closed.", "Call me (at 555-1234) or (office (suite #5))!", "Empty () and nested (a(())b) end.", "Compute sum = func(arg1, nested(arg2, arg3), tail) and also g((a),b)."], "outputs": ["[\"(simple)\"]", "[\"(x)\", \"(a*(b+c))\", \"(b+c)\", \"(d)\"]", "[\"(one)\", \"(two)\", \"(three)\"]", "[\"(first (second (third)))\", \"(second (third))\", \"(third)\"]", "[\"(valid (inner))\", \"(inner)\"]", "[\"(at 555-1234)\", \"(office (suite #5))\", \"(suite #5)\"]", "[\"()\", \"(a(())b)\", \"(())\", \"()\"]", "[\"(arg1, nested(arg2, arg3), tail)\", \"(arg2, arg3)\", \"((a),b)\", \"(a)\"]"]}
{"spec": "Normalize a CSV-like input that uses inconsistent delimiters and quoting (commas, semicolons, stray double quotes) into valid RFC4180 CSV with comma delimiters and properly quoted fields.", "inputs": ["Name; Age; City\n\"John Doe\"; 29; \"New York\"\nJane, Smith;30;Los Angeles", "id; name; notes\n1, \"Widget A, red; 10cm\"; \"Top seller\"\n2; Gadget B, blue; On sale", "Product;Description;Weight\n\"1001\";\"High-quality \"metal\" frame\";5kg\n1002;Lightweight, plastic;3kg", "Name;Comment;Status\nAlice;\"Line1\nLine2\";Active\nBob;No issues;Inactive", "\"email\";\"signup_date\";\"notes\"\n\"jane.doe@example.com\";\"2020-01-15\";\"\"\njohn.smith@example.com;2021/02/20;Subscribed", "id;name;address\n1;O'Connor, Sean;\"123 Main St., Apt \"5B\"\"\n2;Lee;456 Oak St., Apt 2", "sku;stock;location\nA100;10;\nB200;;\"Warehouse; B\"\nC300;5;Main Warehouse", "Amount;Description\n\"1,234.56\";\"Payment for, services\"\n2000;Refund, processed\n\"3;000\";\"Adjustment\""], "outputs": ["Name,Age,City\r\nJohn Doe,29,New York\r\n\"Jane, Smith\",30,Los Angeles", "id,name,notes\r\n1,\"Widget A, red; 10cm\",Top seller\r\n2,\"Gadget B, blue\",On sale", "Product,Description,Weight\r\n1001,\"High-quality \"\"metal\"\" frame\",5kg\r\n1002,\"Lightweight, plastic\",3kg", "Name,Comment,Status\r\nAlice,\"Line1\r\nLine2\",Active\r\nBob,No issues,Inactive", "email,signup_date,notes\r\njane.doe@example.com,2020-01-15,\r\njohn.smith@example.com,2021/02/20,Subscribed", "id,name,address\r\n1,\"O'Connor, Sean\",\"123 Main St., Apt \"\"5B\"\"\"\r\n2,Lee,\"456 Oak St., Apt 2\"", "sku,stock,location\r\nA100,10,\r\nB200,,\"Warehouse; B\"\r\nC300,5,Main Warehouse", "Amount,Description\r\n\"1,234.56\",\"Payment for, services\"\r\n2000,\"Refund, processed\"\r\n3;000,Adjustment"]}
{"spec": "Find all Unicode emoji grapheme clusters in text (including skin-tone modifiers and ZWJ sequences) and return an array of objects with the emoji string and its start and end byte indices.", "inputs": ["Hello 😊 world", "Thumbs up: 👍🏽 and 👍", "Family: 👨‍👩‍👧‍👦 in the park", "Flags: 🇺🇸🇨🇦!", "Press 1️⃣ or 2️⃣", "Red heart: ❤️", "Team: 🧑‍🚀👩🏿‍⚕️", "Meet me 👋🏽 at 10:00 🇯🇵. Happy 🙂"], "outputs": ["[{\"emoji\":\"😊\",\"start\":6,\"end\":10}]", "[{\"emoji\":\"👍🏽\",\"start\":11,\"end\":19},{\"emoji\":\"👍\",\"start\":24,\"end\":28}]", "[{\"emoji\":\"👨‍👩‍👧‍👦\",\"start\":8,\"end\":33}]", "[{\"emoji\":\"🇺🇸\",\"start\":7,\"end\":15},{\"emoji\":\"🇨🇦\",\"start\":15,\"end\":23}]", "[{\"emoji\":\"1️⃣\",\"start\":6,\"end\":13},{\"emoji\":\"2️⃣\",\"start\":17,\"end\":24}]", "[{\"emoji\":\"❤️\",\"start\":11,\"end\":17}]", "[{\"emoji\":\"🧑‍🚀\",\"start\":6,\"end\":17},{\"emoji\":\"👩🏿‍⚕️\",\"start\":17,\"end\":34}]", "[{\"emoji\":\"👋🏽\",\"start\":8,\"end\":16},{\"emoji\":\"🇯🇵\",\"start\":26,\"end\":34},{\"emoji\":\"🙂\",\"start\":42,\"end\":46}]"]}
{"spec": "Convert mixed-unit human height strings like '5 ft 7 in', '5'7\"', or '170 cm' into meters rounded to three decimal places and return the numeric string (e.g., '1.701').", "inputs": ["5 ft 7 in", "5'7\"", "170 cm", "6 ft", "5ft11in", "72 inches", "5'8.5\"", "1.82 m"], "outputs": ["1.702", "1.702", "1.700", "1.829", "1.803", "1.829", "1.740", "1.820"]}

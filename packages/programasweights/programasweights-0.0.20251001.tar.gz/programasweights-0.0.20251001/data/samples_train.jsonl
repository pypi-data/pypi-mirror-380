{"spec": "Extract all quoted substrings (both single and double quotes) preserving escaped quotes and return them as an array in original order.", "inputs": ["He said \"Hello\" and then 'Goodbye'.", "The file contains 'Don\\'t stop' as a note.", "Received payload: \"{\\\"key\\\": \\\"value\\\"}\" at 10:00.", "CSV row: \"alpha\",\"beta\",\"gamma\"", "Examples: \"\" '' and \"a \\\"b\\\" c\".", "Bob wrote 'It\\'s OK' and then \"Done\".", "No quoted substrings here.", "She said, \"Yes!\" 'No.'"], "outputs": ["[\"Hello\",\"Goodbye\"]", "[\"Don\\'t stop\"]", "[\"{\\\"key\\\": \\\"value\\\"}\"]", "[\"alpha\",\"beta\",\"gamma\"]", "[\"\",\"\",\"a \\\"b\\\" c\"]", "[\"It\\'s OK\",\"Done\"]", "[]", "[\"Yes!\",\"No.\"]"]}
{"spec": "Repair malformed JSON that may contain single quotes, trailing commas, unquoted keys, and C/JS-style comments and return a valid JSON string or an explicit error if ambiguous changes are required.", "inputs": ["{\n  // user info\n  name: 'Alice',\n  age: 30, // years\n}", "[ 'apple', 'banana', // favorite\n 'cherry', ]", "{ // inventory info\n  total-items: 100,\n  in_stock: true,\n  supplier: 'ACME Corp'\n}", "{user: {id: 1, name: 'O\\'Reilly', roles: ['admin',],},}", "{callback: function() { return 42; }, valid: true}", "{id:123, created: 2021-05-10T12:00:00Z, active: yes}", "/* list */\n[ {id:1, name:'Item1',}, {id:2, name:'Item2' /* second */ }, ]", "{value: NaN}"], "outputs": ["{\"name\":\"Alice\",\"age\":30}", "[\"apple\",\"banana\",\"cherry\"]", "{\"total-items\":100,\"in_stock\":true,\"supplier\":\"ACME Corp\"}", "{\"user\":{\"id\":1,\"name\":\"O'Reilly\",\"roles\":[\"admin\"]}}", "ERROR: Ambiguous content — contains executable code (function expression)", "{\"id\":123,\"created\":\"2021-05-10T12:00:00Z\",\"active\":\"yes\"}", "[{\"id\":1,\"name\":\"Item1\"},{\"id\":2,\"name\":\"Item2\"}]", "ERROR: Ambiguous content — contains non-JSON numeric value (NaN)"]}
{"spec": "Parse ASCII-art tables using '+', '-', and '|' borders into an array of rows where each row is an array of trimmed cell strings, preserving empty cells and original column order.", "inputs": ["+---+---+\n| a | b |\n+---+---+\n| c | d |\n+---+---+", "+-------+-----+----------+\n| Name  | Age | City     |\n+-------+-----+----------+\n| Alice | 30  | New York |\n+-------+-----+----------+\n| Bob   | 25  |  LA      |\n+-------+-----+----------+", "+---+---+---+\n| 1 |   | 3 |\n+---+---+---+\n|   |   |   |\n+---+---+---+", "+---------+\n| OnlyCell |\n+---------+", "+------------+------------------------------+\n| Identifier | Description                  |\n+------------+------------------------------+\n| ID_001     | First entry.                 |\n+------------+------------------------------+\n| ID_002     | Second entry: includes colon |\n+------------+------------------------------+", "+----+-----+------+\n| A  | B   | C    |\n+----+-----+------+\n|  a |b    |      |\n+----+-----+------+", "+------+-----+------+\n| Val1 | Val2 | Val3 |\n+------+-----+------+\n| 0    | -5  | 3.14 |\n+------+-----+------+\n| 42   |     | -0.1 |\n+------+-----+------+", "+---+\n| X |\n+---+\n|   |\n+---+"], "outputs": ["[[\"a\",\"b\"],[\"c\",\"d\"]]", "[[\"Name\",\"Age\",\"City\"],[\"Alice\",\"30\",\"New York\"],[\"Bob\",\"25\",\"LA\"]]", "[[\"1\",\"\",\"3\"],[\"\",\"\",\"\"]]", "[[\"OnlyCell\"]]", "[[\"Identifier\",\"Description\"],[\"ID_001\",\"First entry.\"],[\"ID_002\",\"Second entry: includes colon\"]]", "[[\"A\",\"B\",\"C\"],[\"a\",\"b\",\"\"]]", "[[\"Val1\",\"Val2\",\"Val3\"],[\"0\",\"-5\",\"3.14\"],[\"42\",\"\",\"-0.1\"]]", "[[\"X\"],[\"\"]]"]}
{"spec": "Given a reference date in ISO form, resolve relative date expressions such as 'next Friday', 'in 3 business days', 'last month', and return the resulting ISO date or date range when appropriate.", "inputs": ["Reference date: 2025-03-18, Expression: next Friday", "Reference date: 2024-02-27, Expression: in 3 business days", "Reference date: 2025-01-15, Expression: last month", "Reference date: 2025-12-31, Expression: tomorrow", "Reference date: 2025-05-30, Expression: in 3 business days", "Reference date: 2025-11-10, Expression: next Monday", "Reference date: 2024-12-15, Expression: this week", "Reference date: 2025-08-20, Expression: in 2 weeks"], "outputs": ["2025-03-21", "2024-03-01", "2024-12-01/2024-12-31", "2026-01-01", "2025-06-04", "2025-11-17", "2024-12-09/2024-12-15", "2025-09-03"]}
{"spec": "Given a chat transcript that ends with a marker such as 'Answer:' or 'Final answer:', extract and return the substring immediately following the last such marker trimmed of surrounding whitespace.", "inputs": ["User: How many planets are in the solar system?\nAssistant: Most sources say eight.\nAnswer: There are 8 planets.", "User: What's the best route?\nAssistant: We considered two options.\nAnswer: Take highway A.\nAssistant: Actually, after re-evaluation,\nFinal answer: Take highway B via exit 12.", "System: Begin transcript\nUser: Compute value\nAssistant: Step1...\nAnswer:   \n   3.14159", "User: Should I merge the branches?\nAssistant: Pros and cons listed.\nAnswer:\nPlease merge feature/login into develop and run tests.", "Chat log:\nAnswer: First attempt\nAnswer: Second attempt\nFinal answer:   Final decision: proceed with Plan C", "User: Quick math\nAssistant: Let me calculate.\nAnswer:42", "User: Plan options\nAssistant: Drafts\nFinal answer: \nHere's the plan:\n- Prepare data\n- Train model\n- Evaluate", "Note: This is internal.\nAssistant: After review,\nAnswer:"], "outputs": ["There are 8 planets.", "Take highway B via exit 12.", "3.14159", "Please merge feature/login into develop and run tests.", "Final decision: proceed with Plan C", "42", "Here's the plan:\n- Prepare data\n- Train model\n- Evaluate", ""]}
{"spec": "Parse irregular space-aligned text tables where rows may omit explicit separators by inferring column boundaries from the header and output CSV rows preserving empty cells.", "inputs": ["Name      Age  City\nAlice     30   New York\nBob       25   San Francisco\nCharlie   22", "Product        Qty Price  Note\nWidget A       12  3.50  In stock\nGadget B       5       Backordered\nThingamajig    100 1.00", "Start      End       Label\n08:00      12:00     Morning\n13:00      17:00Afternoon\n18:00      20:30     Evening Shift", "ID  Name                Score\n1   Alice Johnson       95\n2                       78\n3   Catherine Zeta-Jones   100", "Country    Capital          Population\n-------    -------          ----------\nUSA        Washington, D.C.  331002651\nCanada     Ottawa           37742154\nMexico     Mexico City      128932753", "Street Address        City         ZIP\n123 Maple Street       Smalltown    12345\n45B Oak Rd             Big Village  67890\nPO Box 9               Old Port", "Account    Balance  Overdraft\nAcct001    1234.56  0\nAcct002   -50.00   -50.00\nAcct003     0.00", "Date       Open  Close  Volume\n2025-01-01 100   110    1500\n2025-01-02 111   115\n2025-01-03      120    1750\n2025-01-04 118         1600"], "outputs": ["Name,Age,City\nAlice,30,New York\nBob,25,San Francisco\nCharlie,22,", "Product,Qty,Price,Note\nWidget A,12,3.50,In stock\nGadget B,5,,Backordered\nThingamajig,100,1.00,", "Start,End,Label\n08:00,12:00,Morning\n13:00,17:00,Afternoon\n18:00,20:30,Evening Shift", "ID,Name,Score\n1,Alice Johnson,95\n2,,78\n3,Catherine Zeta-Jones,100", "Country,Capital,Population\nUSA,\"Washington, D.C.\",331002651\nCanada,Ottawa,37742154\nMexico,Mexico City,128932753", "Street Address,City,ZIP\n123 Maple Street,Smalltown,12345\n45B Oak Rd,Big Village,67890\nPO Box 9,Old Port,", "Account,Balance,Overdraft\nAcct001,1234.56,0\nAcct002,-50.00,-50.00\nAcct003,0.00,", "Date,Open,Close,Volume\n2025-01-01,100,110,1500\n2025-01-02,111,115,\n2025-01-03,,120,1750\n2025-01-04,118,,1600"]}
{"spec": "Split text into sentences while preventing common English abbreviations (e.g., Mr., Dr., U.S.) from causing sentence breaks and return an array of trimmed sentences.", "inputs": ["Dr. Smith went to Washington. He visited the U.S. Capitol.", "I met Mr. and Mrs. Johnson yesterday. They retired in 2019.", "She hesitated... Then she said, 'I can't go.'", "The meeting is at 10 A.M. Please be on time.", "Prof. Carter earned his Ph.D. in 2005. His GPA was 3.9.", "They live on St. Patrick's Street. It's a busy road.", "The U.K. voted to leave the EU, i.e., it held a referendum. The results were close.", "Contact info: john.doe@example.com. We'll respond within 2 business days."], "outputs": ["[\"Dr. Smith went to Washington.\", \"He visited the U.S. Capitol.\"]", "[\"I met Mr. and Mrs. Johnson yesterday.\", \"They retired in 2019.\"]", "[\"She hesitated...\", \"Then she said, 'I can't go.'\"]", "[\"The meeting is at 10 A.M.\", \"Please be on time.\"]", "[\"Prof. Carter earned his Ph.D. in 2005.\", \"His GPA was 3.9.\"]", "[\"They live on St. Patrick's Street.\", \"It's a busy road.\"]", "[\"The U.K. voted to leave the EU, i.e., it held a referendum.\", \"The results were close.\"]", "[\"Contact info: john.doe@example.com.\", \"We'll respond within 2 business days.\"]"]}
{"spec": "Extract domain names from a list of email addresses and URLs, excluding common mailbox subdomains like 'mail.' and return a unique sorted list of domains.", "inputs": ["alice@example.com, bob@mail.example.com, https://blog.example.com/article, http://mail.sales.example.co.uk, sales@example.co.uk", "https://www.google.com/search?q=test, admin@mail.google.com, ftp://files.server.example.org:21/download, user@sub.mail.yahoo.co.uk", "support@my-company.io, webmaster@mail.my-company.io, info@my-company.io, postmaster@support.my-company.io", "http://192.168.0.1/admin, https://mail.example.org, sales@shop.example.org, https://shop.example.org/products, user@192.0.2.5", "INFO@EXAMPLE.NET, http://Mail.EXAMPLE.net., marketing@mailing.example.net, dev@mail.example.net", "user@dept.mail.company.co.jp, https://company.co.jp/about, contact@mail.company.co.jp, https://hr.company.co.jp/jobs", "https://mail2.partner.example.com:8080/home#section, partner@partner.example.com, admin@mail.partner.example.com, sales@shop.partner.example.com", "mailto:ceo@startup.io, https://mail.startup.io/inbox, http://blog.startup.io, sales@promo.startup.io"], "outputs": ["[\"blog.example.com\",\"example.co.uk\",\"example.com\",\"sales.example.co.uk\"]", "[\"files.server.example.org\",\"google.com\",\"sub.mail.yahoo.co.uk\",\"www.google.com\"]", "[\"my-company.io\",\"support.my-company.io\"]", "[\"example.org\",\"shop.example.org\"]", "[\"example.net\",\"mailing.example.net\"]", "[\"company.co.jp\",\"dept.mail.company.co.jp\",\"hr.company.co.jp\"]", "[\"mail2.partner.example.com\",\"partner.example.com\",\"shop.partner.example.com\"]", "[\"blog.startup.io\",\"promo.startup.io\",\"startup.io\"]"]}
{"spec": "From text containing multiple 'Final Answer:' markers, return the text after the last 'Final Answer:' marker trimmed; return an empty string if none found.", "inputs": ["Conversation:\nUser: What's 6 * 7?\nAssistant: Let me think.\nFinal Answer: 42", "Document with no final marker.\nIt contains conclusions but not the magic phrase.", "Notes:\nFinal Answer: First attempt.\nInterim notes.\nFinal Answer: Ultimately, choose option B.  \nEnd of doc.", "Report summary\nFinal Answer:", "Summary\nFinal answer: this is lowercase and should NOT match.\nFinal ANSWER: nor this.\nEnd.", "Section 1\nFinal Answer: Alpha\nSection 2\nSome commentary mentioning Final Answer without colon.", "Lead\nFinal Answer:    \n   Result after spaces should be here.", "Transcript:\nFinal Answer: Old conclusion.\nDiscussion continues.\nFinal Answer: \n\n   The final summary:\n   - item one\n   - item two\n\nRegards."], "outputs": ["42", "", "Ultimately, choose option B.", "", "", "Alpha\nSection 2\nSome commentary mentioning Final Answer without colon.", "Result after spaces should be here.", "The final summary:\n   - item one\n   - item two\n\nRegards."]}
{"spec": "From lines of 'Key: Value' or 'Key - Value' possibly containing duplicate keys, produce JSON where each key maps to an array of values in the original order, trimming whitespace.", "inputs": ["Name: Alice\nEmail: alice@example.com\nPhone: 555-1234\nEmail: alice.work@example.com", "Title - Senior Engineer\nDepartment:  R&D  \nLocation - Remote\nTitle - Lead Developer", "Note: Meeting at 12:00\nAttendee - Bob\nNote: Bring slides\nAttendee - Carol", "Product :  Widget A  \nQuantity -  10\nProduct:Widget B\n  Quantity :20", "Username: jdoe", "姓名: 李雷\n地址 - 北京市朝阳区\n姓名: 韩梅梅", "Notes:   \nStatus: Open\nNotes:Needs follow-up", "Set-Cookie: a=1; Path=/\nContent-Type: text/html; charset=UTF-8\nSet-Cookie: b=2; Path=/\nX-Rate-Limit - 100"], "outputs": ["{\"Name\":[\"Alice\"],\"Email\":[\"alice@example.com\",\"alice.work@example.com\"],\"Phone\":[\"555-1234\"]}", "{\"Title\":[\"Senior Engineer\",\"Lead Developer\"],\"Department\":[\"R&D\"],\"Location\":[\"Remote\"]}", "{\"Note\":[\"Meeting at 12:00\",\"Bring slides\"],\"Attendee\":[\"Bob\",\"Carol\"]}", "{\"Product\":[\"Widget A\",\"Widget B\"],\"Quantity\":[\"10\",\"20\"]}", "{\"Username\":[\"jdoe\"]}", "{\"姓名\":[\"李雷\",\"韩梅梅\"],\"地址\":[\"北京市朝阳区\"]}", "{\"Notes\":[\"\",\"Needs follow-up\"],\"Status\":[\"Open\"]}", "{\"Set-Cookie\":[\"a=1; Path=/\",\"b=2; Path=/\"],\"Content-Type\":[\"text/html; charset=UTF-8\"],\"X-Rate-Limit\":[\"100\"]}"]}
{"spec": "Convert CSV text to a compact JSON array of objects using the header row; handle quoted fields containing commas and return valid JSON text.", "inputs": ["name,age\nAlice,30\nBob,25", "id,description\n1,\"Widget, large\"\n2,\"Gadget, small, blue\"", "quote,author\n\"She said \"\"Hello\"\"\",Alice\n\"Be \"\"bold\"\"\",Bob", "a,b,c\n1,,3\n4,5,\n,,", "name,address\n1,\"123 Main St\nCity, State\"\n2,\"456 Oak St, Suite 5\nOther City, State\"", "Product Code, Price (USD), In Stock\nA-100,9.99,TRUE\nB-200,0,FALSE", "username", "date,notes,amount\n2021-01-01,\"Payment, invoice #123\",100.00\n2021-01-02,Refund,-50"], "outputs": ["[{\"name\":\"Alice\",\"age\":\"30\"},{\"name\":\"Bob\",\"age\":\"25\"}]", "[{\"id\":\"1\",\"description\":\"Widget, large\"},{\"id\":\"2\",\"description\":\"Gadget, small, blue\"}]", "[{\"quote\":\"She said \\\"Hello\\\"\",\"author\":\"Alice\"},{\"quote\":\"Be \\\"bold\\\"\",\"author\":\"Bob\"}]", "[{\"a\":\"1\",\"b\":\"\",\"c\":\"3\"},{\"a\":\"4\",\"b\":\"5\",\"c\":\"\"},{\"a\":\"\",\"b\":\"\",\"c\":\"\"}]", "[{\"name\":\"1\",\"address\":\"123 Main St\\nCity, State\"},{\"name\":\"2\",\"address\":\"456 Oak St, Suite 5\\nOther City, State\"}]", "[{\"Product Code\":\"A-100\",\" Price (USD)\":\"9.99\",\" In Stock\":\"TRUE\"},{\"Product Code\":\"B-200\",\" Price (USD)\":\"0\",\" In Stock\":\"FALSE\"}]", "[]", "[{\"date\":\"2021-01-01\",\"notes\":\"Payment, invoice #123\",\"amount\":\"100.00\"},{\"date\":\"2021-01-02\",\"notes\":\"Refund\",\"amount\":\"-50\"}]"]}
{"spec": "Parse a URL and return its query parameters as a JSON object mapping each percent-decoded parameter name to an array of percent-decoded values in original order.", "inputs": ["https://example.com/path?name=Alice", "https://example.com/search?q=hello%20world&q=foo+bar&lang=en", "https://example.com/path", "https://example.com/?flag&=val&empty=", "https://example.com/?%73tatus=ok&%73tatus=fail&user=Bob%2BSmith", "https://example.com/?a=1&b=2#section?c=3", "http://example.org/?greeting=%E4%BD%A0%E5%A5%BD&greeting=Hi+there", "https://example.com/path?%3D=%26%3D&x=1&x=&%3D=%25"], "outputs": ["{\"name\":[\"Alice\"]}", "{\"q\":[\"hello world\",\"foo bar\"],\"lang\":[\"en\"]}", "{}", "{\"flag\":[\"\"],\"\": [\"val\"],\"empty\":[\"\"]}", "{\"status\":[\"ok\",\"fail\"],\"user\":[\"Bob+Smith\"]}", "{\"a\":[\"1\"],\"b\":[\"2\"]}", "{\"greeting\":[\"你好\",\"Hi there\"]}", "{\"=\": [\"&=\",\"%\"],\"x\":[\"1\",\"\"]}"]}
{"spec": "Convert localized numeric strings using commas or spaces as thousands separators and commas as decimals (e.g., '1.234,56', '1 234.56') into canonical dot-decimal numeric strings without grouping (e.g., '1234.56').", "inputs": ["1.234,56", "1 234.56", "12.345.678,90", "1 234,5", "-2.500,00", "+3,500.75", "(1 234,56)", "1234567"], "outputs": ["1234.56", "1234.56", "12345678.90", "1234.5", "-2500.00", "+3500.75", "-1234.56", "1234567"]}
{"spec": "Parse options from inline or mixed-format text like 'a) apple b) banana\\nc) cherry' and reliably split into [{label:'A',text:'apple'}, ...] handling missing separators and lowercase labels.", "inputs": ["a) apple b) banana\\nc) cherry", "a. apple; b. banana; c. cherry", "a apple b banana c cherry", "a) apple\\nb) banana c) cherry", "a)   apple  b)banana   c)  cherry", "A- Apple; B- Banana; C- Cherry", "a) apple b) banana d) date", "a) red, green and blue; b) 'single-quoted'; c) (parentheses) value"], "outputs": ["[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"C\",\"text\":\"cherry\"}]", "[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"C\",\"text\":\"cherry\"}]", "[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"C\",\"text\":\"cherry\"}]", "[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"C\",\"text\":\"cherry\"}]", "[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"C\",\"text\":\"cherry\"}]", "[{\"label\":\"A\",\"text\":\"Apple\"},{\"label\":\"B\",\"text\":\"Banana\"},{\"label\":\"C\",\"text\":\"Cherry\"}]", "[{\"label\":\"A\",\"text\":\"apple\"},{\"label\":\"B\",\"text\":\"banana\"},{\"label\":\"D\",\"text\":\"date\"}]", "[{\"label\":\"A\",\"text\":\"red, green and blue\"},{\"label\":\"B\",\"text\":\"'single-quoted'\"},{\"label\":\"C\",\"text\":\"(parentheses) value\"}]"]}
{"spec": "Normalize numeric ranges and lists expressed in words or digits (e.g., 'one to three', '5-7', 'two, four and six') into a sorted unique JSON array of integers.", "inputs": ["one to three", "5-7", "two, four and six", "Ten - 12, fourteen", "3 to five, seven", "1, 2, 2, three", "between 8 and 6", "fourteen–sixteen and 15, 18"], "outputs": ["[1,2,3]", "[5,6,7]", "[2,4,6]", "[10,11,12,14]", "[3,4,5,7]", "[1,2,3]", "[6,7,8]", "[14,15,16,18]"]}
{"spec": "Convert written English integers up to 'one million' (e.g., 'two thousand thirty-five', 'one hundred and five') into digits and return the numeric string.", "inputs": ["two thousand thirty-five", "one hundred and five", "seven hundred and eighty-six", "nineteen", "forty", "eighty-two thousand and six", "twenty-one", "one million"], "outputs": ["2035", "105", "786", "19", "40", "82006", "21", "1000000"]}
{"spec": "Normalize dates expressed in various formats (e.g., 'Jan 2nd, 2020', '02/01/20', '2020-01-02') into ISO 8601 (YYYY-MM-DD), resolving ambiguous numeric dates by assuming MM/DD/YY when ambiguous.", "inputs": ["Jan 2nd, 2020", "02/01/20", "2020-01-02", "1/2/20", "31/12/1999", "07-04-03", "March 10, '85", "12th Sept 2010"], "outputs": ["2020-01-02", "2020-02-01", "2020-01-02", "2020-01-02", "1999-12-31", "2003-07-04", "1985-03-10", "2010-09-12"]}
{"spec": "Convert plain text with section headings marked by '##', '###', or 'Section 1:' into a nested JSON outline where each node has 'title' and 'content' and child sections are nested under the nearest higher-level heading.", "inputs": ["## Overview\nThis document provides an overview of the API.\n## Details\nDetailed specifications and examples.", "## Features\nA list of features:\n- Fast\n- Reliable\n### Feature A\nFeature A is fast and optimized.\n### Feature B\nFeature B is reliable under load.\n## Usage\nTo use the library, call initialize() and pass a config object.", "Section 1: Introduction\nWelcome to the guide.\n## Background\nThis project started in 2020 and has grown since.\n### Deep Dive\nTechnical details and architecture notes go here.", "## A\n### A.1\n### A.2\n## B\nContent for B.", "## Summary\nFirst paragraph.\n\nSecond paragraph with additional context.\n### Notes\nNote one.\n\nNote two.\n## Conclusion\nFinal thoughts and next steps.", "Section 1: Getting Started\nInstall prerequisites and set up your environment.\nSection 2: Installation\nRun the installer and follow prompts.\n## Post-Install\nConfigure settings and verify the service is running.", "### Orphan Subsection\nThis appears before any main heading and has no parent.\n## Main\nMain content goes here.\n### Sub\nChild of Main with more details.", "Section 1: Overview\nOverview text describing goals and scope.\n### Details\nDetailed bullet: a) one, b) two.\n## Additional Info\nMore information, references, and links."], "outputs": ["[{\"title\":\"Overview\",\"content\":\"This document provides an overview of the API.\",\"children\":[]},{\"title\":\"Details\",\"content\":\"Detailed specifications and examples.\",\"children\":[]}]", "[{\"title\":\"Features\",\"content\":\"A list of features:\\n- Fast\\n- Reliable\",\"children\":[{\"title\":\"Feature A\",\"content\":\"Feature A is fast and optimized.\",\"children\":[]},{\"title\":\"Feature B\",\"content\":\"Feature B is reliable under load.\",\"children\":[]}]},{\"title\":\"Usage\",\"content\":\"To use the library, call initialize() and pass a config object.\",\"children\":[]}]", "[{\"title\":\"Introduction\",\"content\":\"Welcome to the guide.\",\"children\":[{\"title\":\"Background\",\"content\":\"This project started in 2020 and has grown since.\",\"children\":[{\"title\":\"Deep Dive\",\"content\":\"Technical details and architecture notes go here.\",\"children\":[]}]}]}]", "[{\"title\":\"A\",\"content\":\"\",\"children\":[{\"title\":\"A.1\",\"content\":\"\",\"children\":[]},{\"title\":\"A.2\",\"content\":\"\",\"children\":[]}]},{\"title\":\"B\",\"content\":\"Content for B.\",\"children\":[]}]", "[{\"title\":\"Summary\",\"content\":\"First paragraph.\\n\\nSecond paragraph with additional context.\",\"children\":[{\"title\":\"Notes\",\"content\":\"Note one.\\n\\nNote two.\",\"children\":[]}]},{\"title\":\"Conclusion\",\"content\":\"Final thoughts and next steps.\",\"children\":[]}]", "[{\"title\":\"Getting Started\",\"content\":\"Install prerequisites and set up your environment.\",\"children\":[]},{\"title\":\"Installation\",\"content\":\"Run the installer and follow prompts.\",\"children\":[{\"title\":\"Post-Install\",\"content\":\"Configure settings and verify the service is running.\",\"children\":[]}]}]", "[{\"title\":\"Orphan Subsection\",\"content\":\"This appears before any main heading and has no parent.\",\"children\":[]},{\"title\":\"Main\",\"content\":\"Main content goes here.\",\"children\":[{\"title\":\"Sub\",\"content\":\"Child of Main with more details.\",\"children\":[]}]}]", "[{\"title\":\"Overview\",\"content\":\"Overview text describing goals and scope.\",\"children\":[{\"title\":\"Details\",\"content\":\"Detailed bullet: a) one, b) two.\",\"children\":[]},{\"title\":\"Additional Info\",\"content\":\"More information, references, and links.\",\"children\":[]}]}]"]}
{"spec": "Validate and extract all IPv6 addresses (including compressed forms and IPv4-embedded) from text and return them as an array of matched strings.", "inputs": ["Connecting to 2001:0db8:85a3:0000:0000:8a2e:0370:7334 succeeded.", "Servers at 2001:db8::1 and 2001:db8:0:0:0:0:2:1 are up.", "Ping ::1 and ::ffff:192.0.2.128 were tested.", "Interface fe80::1%eth0 failed, but fe80::2%3 succeeded.", "Addresses: FE80::A:1, 2001:DB8:0:0:8:800:200C:417A; and :: are present.", "Contact admin at 192.168.0.1 or example.com. Also note address 2001:db8:85a3::8a2e:370:7334e is invalid.", "List: 2001:db8:1234:ffff:ffff:ffff:ffff:ffff, ::ffff:127.0.0.1, 0:0:0:0:0:0:0:1.", "Services reachable at [2001:db8::1]:443 and [fe80::dead:beef%wlan0]:22."], "outputs": ["[\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"]", "[\"2001:db8::1\",\"2001:db8:0:0:0:0:2:1\"]", "[\"::1\",\"::ffff:192.0.2.128\"]", "[\"fe80::1%eth0\",\"fe80::2%3\"]", "[\"FE80::A:1\",\"2001:DB8:0:0:8:800:200C:417A\",\"::\"]", "[]", "[\"2001:db8:1234:ffff:ffff:ffff:ffff:ffff\",\"::ffff:127.0.0.1\",\"0:0:0:0:0:0:0:1\"]", "[\"2001:db8::1\",\"fe80::dead:beef%wlan0\"]"]}
{"spec": "From a paragraph containing bullet-like lines prefixed by '-', '+', or '*' extract each trimmed bullet text in original order and return as a JSON array of strings.", "inputs": ["Shopping list:\n- apples\n- bananas\n-  milk  \nNotes: remember coupons.", "Tasks:\n  + Write report\n\t-  Review code\n*Prepare slides\n-    \nEnd of day.", "- [x] Submit invoice\n+ (priority) Call client\nNormal line here\n*Finalize contract*", "Meeting notes:\n- Agenda: project - timeline\nDiscussion points\n+ Action: assign tasks\n-Outcome: TBD", "Notes:\r\n\t*第一项\r\n - 第二项 \r\nNot a bullet.", "- lone-bullet", "This paragraph has no list items.\nJust plain text and dashes - inside lines.", "Checklist:\n -  \"Install\" dependencies  \n+ Configure: PATH=/usr/local/bin\n*Test — run unit tests\nSome other text\n-Fix minor bugs"], "outputs": ["[\"apples\",\"bananas\",\"milk\"]", "[\"Write report\",\"Review code\",\"Prepare slides\",\"\"]", "[\"[x] Submit invoice\",\"(priority) Call client\",\"Finalize contract*\"]", "[\"Agenda: project - timeline\",\"Action: assign tasks\",\"Outcome: TBD\"]", "[\"第一项\",\"第二项\"]", "[\"lone-bullet\"]", "[]", "[\"\\\"Install\\\" dependencies\",\"Configure: PATH=/usr/local/bin\",\"Test — run unit tests\",\"Fix minor bugs\"]"]}
{"spec": "From mixed inline and line-separated attribute text (e.g., 'Name=John; Age:30, Location- NYC') extract key-value pairs handling separators '=', ':', '-', ';' and ','; on duplicate keys keep the last value and return a JSON map.", "inputs": ["Name=John; Age:30, Location- NYC", "first=Alice, last:Smith; first:Bob; city-Newark", "Email: jane.doe@example.com , Phone= 555-1234; Email = j.doe@work.org", "First Name: Alice, First Name=Bob, Role - Manager", "Country=, State: CA; ZIP - 94105, Country:USA", "key1=val1;; key2:val2,,key1:final", "Just some random text without separators", "note: contains:colon, date=2020-01-01, note=overridden"], "outputs": ["{\"Name\":\"John\",\"Age\":\"30\",\"Location\":\"NYC\"}", "{\"first\":\"Bob\",\"last\":\"Smith\",\"city\":\"Newark\"}", "{\"Email\":\"j.doe@work.org\",\"Phone\":\"555-1234\"}", "{\"First Name\":\"Bob\",\"Role\":\"Manager\"}", "{\"Country\":\"USA\",\"State\":\"CA\",\"ZIP\":\"94105\"}", "{\"key1\":\"final\",\"key2\":\"val2\"}", "{}", "{\"note\":\"overridden\",\"date\":\"2020-01-01\"}"]}
{"spec": "Infer and extract key/value pairs from mixed YAML/INI-like blocks that may omit separators (e.g., 'timeout 30\\nuser: admin\\nlog_dir /var/log') and output a canonical JSON object with guessed value types (strings, numbers, booleans) when unambiguous.", "inputs": ["timeout 30\nuser: admin\nlog_dir /var/log", "enabled: true\nmax_retries=5\nverbose on\n; last line is a comment", "server:\n  host: example.com\n  port 443", "path=/usr/local/bin\nsize 2048\ndebug=false", "dsn: postgres://user:pass@localhost:5432/dbname\npool 10", "auto_start yes\nretry=0\nmode production", "name \"John Doe\"\nemail: \"john@example.com\"\nage: \"30\"", "# global config\nport: 8080 ; main port\nworkers 4 # threads\nlog_level=info\nuse_ssl: off"], "outputs": ["{\"timeout\":30,\"user\":\"admin\",\"log_dir\":\"/var/log\"}", "{\"enabled\":true,\"max_retries\":5,\"verbose\":true}", "{\"server\":{\"host\":\"example.com\",\"port\":443}}", "{\"path\":\"/usr/local/bin\",\"size\":2048,\"debug\":false}", "{\"dsn\":\"postgres://user:pass@localhost:5432/dbname\",\"pool\":10}", "{\"auto_start\":true,\"retry\":0,\"mode\":\"production\"}", "{\"name\":\"John Doe\",\"email\":\"john@example.com\",\"age\":\"30\"}", "{\"port\":8080,\"workers\":4,\"log_level\":\"info\",\"use_ssl\":false}"]}
{"spec": "Convert a fixed-width column text table (no delimiters) into CSV by inferring column boundaries from the header line and aligning subsequent rows to those columns while trimming whitespace.", "inputs": ["Name     Age  City\nAlice    30   New York\nBob      25   Los Angeles\nCharlie  40   San Francisco", "Product    Price  Qty\nWidget A     12.50100\nGadget B    199.995\nThingamajig    3.5250", "Description\n  Leading trim example  \nOne-word\nMulti part text with spaces", "Start  End    Label\nS1     S2     First\nA            Second\nLonger Middle  Third", "ID   Name           Comment\n01   Smith John      Frequent buyer\n02   Emily           \n03   Carlos M.       On hold", "Code  Description       Qty  Location\nA1    Small widget         10  Warehouse 1\nB234  Large assembly       2  Dock\nC9    Tiny part", "First Name   Last Name  DOB\nJohn A.      Smith      1990-05-12\nAlice        Lee        1985-11-07\nBob          O'Connor   1970-01-01", "Account   Amount($)  Status\n40001         -125.50  Closed\n40002       2500.00   Open\n40003                Pending"], "outputs": ["Name,Age,City\nAlice,30,New York\nBob,25,Los Angeles\nCharlie,40,San Francisco", "Product,Price,Qty\nWidget A,12.50,100\nGadget B,199.99,5\nThingamajig,3.5,250", "Description\nLeading trim example\nOne-word\nMulti part text with spaces", "Start,End,Label\nS1,S2,First\nA,,Second\nLonger,Middle,Third", "ID,Name,Comment\n01,Smith John,Frequent buyer\n02,Emily,\n03,Carlos M.,On hold", "Code,Description,Qty,Location\nA1,Small widget,10,Warehouse 1\nB234,Large assembly,2,Dock\nC9,Tiny part,,", "First Name,Last Name,DOB\nJohn A.,Smith,1990-05-12\nAlice,Lee,1985-11-07\nBob,O'Connor,1970-01-01", "Account,Amount($),Status\n40001,-125.50,Closed\n40002,2500.00,Open\n40003,,Pending"]}
{"spec": "Strip all HTML tags but preserve line breaks for block elements (p, div, br, li, h1-h6) and decode common HTML entities to plain characters.", "inputs": ["<p>Hello <strong>World</strong> &amp; everyone!</p>", "<h1>Title &mdash; Intro</h1><div>First line<br>Second &lt;line&gt;</div>", "<ul><li>Item 1 &bull; details</li><li>Item 2 <a href='#'>link &raquo;</a></li></ul>", "<p>Price: &euro; <span class=\"price\"><strong>12.50</strong></span></p>", "<div>Note: 5 &gt; 3.<br/>Use &quot;quotes&quot; and emoji: &#128512;</div>", "<h2>Section</h2><p>First paragraph.<br>Still first.</p><p>Second paragraph &ndash; more text.</p>", "<p>Item&nbsp;&nbsp;A&nbsp;&amp;&nbsp;B</p>", "<div><!-- comment --><h3>O'Reilly &amp; Associates</h3><p>Use &#39;single&#39; and &quot;double&quot; quotes.</p></div>"], "outputs": ["Hello World & everyone!", "Title — Intro\nFirst line\nSecond <line>", "Item 1 • details\nItem 2 link »", "Price: € 12.50", "Note: 5 > 3.\nUse \"quotes\" and emoji: 😀", "Section\nFirst paragraph.\nStill first.\nSecond paragraph – more text.", "Item  A & B", "O'Reilly & Associates\nUse 'single' and \"double\" quotes."]}
{"spec": "Parse compound measurements like '5 ft 7 in' or '3 lb 4 oz' and convert each into a single metric value with unit (e.g., '1.70 m', '1.49 kg') with sensible rounding.", "inputs": ["5 ft 7 in", "6 ft 2 in", "5'11\\\"", "4 ft 0 in", "3 lb 4 oz", "10lb 8oz", "5 ft 11.5 in", "0 lb 12 oz"], "outputs": ["1.70 m", "1.88 m", "1.80 m", "1.22 m", "1.47 kg", "4.76 kg", "1.82 m", "0.34 kg"]}
{"spec": "From a multi-turn assistant transcript, extract the last paragraph that is not prefixed by 'Thought:' or 'Reasoning:' and contains at least one sentence-ending punctuation, returning it as the final answer string.", "inputs": ["User: How can I fetch a web page in Python?\nAssistant: Thought: requests is standard.\nAssistant: You can use the requests library: import requests; response = requests.get(url). Print response.text to see content.", "User: What's the answer to life?\nAssistant: Final answer: 42 is the correct result.\nAssistant: Reasoning: We added the clues and matched patterns.\nAssistant: Thought: double-checking edge cases.", "User: I tried the script but it fails.\nAssistant: Can you paste the error?\nUser: It prints 'IndexError: list index out of range.' What could cause that?", "Assistant: First, initialize the device\nAssistant: Then pair it with the app\nAssistant: Reasoning: pairing requires BLE handshake.\nAssistant: Finally, reboot the device and try again.", "User: Can you summarize the policy?\nAssistant: Thought: need to be concise.\nAssistant: Sure. The policy requires users to consent before data collection. It also mandates encryption in transit.", "Assistant: The diagnosis is most likely viral.\nAssistant: Thought: consider bacterial causes too.\nAssistant: Reasoning: check white blood cell count.", "User: Steps?\nAssistant: Step 1: Open the app\nAssistant: Step 2: Tap settings.\nAssistant: Thought: confirm this works", "User: Thanks for the help!\nAssistant: You're welcome. Let me know if you need anything else!\nAssistant: Thought: satisfied."], "outputs": ["You can use the requests library: import requests; response = requests.get(url). Print response.text to see content.", "Final answer: 42 is the correct result.", "It prints 'IndexError: list index out of range.' What could cause that?", "Finally, reboot the device and try again.", "Sure. The policy requires users to consent before data collection. It also mandates encryption in transit.", "The diagnosis is most likely viral.", "Step 2: Tap settings.", "You're welcome. Let me know if you need anything else!"]}
{"spec": "Given a free-form choices line mixing ranges and lists (e.g., 'Select: a-c, e, g-i'), expand ranges and commas into an explicit ordered list of option labels and validate labels against an allowed set if provided.", "inputs": ["{\"choices_line\":\"Select: a-c\"}", "{\"choices_line\":\"Options: A-C, E, G-I\", \"allowed\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"]}", "{\"choices_line\":\"1-3,5,7-8\", \"allowed\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]}", "{\"choices_line\":\"a-c, b, c-e\"}", "{\"choices_line\":\"Choose: opt1-opt3, opt5\"}", "{\"choices_line\":\"Select: a-d, f\", \"allowed\":[\"a\",\"b\",\"c\",\"d\",\"e\"]}", "{\"choices_line\":\"Items (1-2,4);7\"}", "{\"choices_line\":\"a, b, A-C\", \"allowed\":[\"a\",\"b\",\"c\",\"A\",\"B\",\"C\"]}"], "outputs": ["{\"expanded\": [\"a\", \"b\", \"c\"]}", "{\"expanded\": [\"A\", \"B\", \"C\", \"E\", \"G\", \"H\", \"I\"], \"invalid\": []}", "{\"expanded\": [\"1\", \"2\", \"3\", \"5\", \"7\", \"8\"], \"invalid\": []}", "{\"expanded\": [\"a\", \"b\", \"c\", \"d\", \"e\"]}", "{\"expanded\": [\"opt1\", \"opt2\", \"opt3\", \"opt5\"]}", "{\"expanded\": [\"a\", \"b\", \"c\", \"d\", \"f\"], \"invalid\": [\"f\"]}", "{\"expanded\": [\"1\", \"2\", \"4\", \"7\"]}", "{\"expanded\": [\"a\", \"b\", \"A\", \"B\", \"C\"], \"invalid\": []}"]}
{"spec": "Parse a Markdown table that may contain escaped pipes, inline code with pipes, and multiline cells; return rows as arrays and represent internal newlines in cells as '\\n'.", "inputs": ["| a | b |\n|---|---|\n| 1 | 2 |", "| A\\|B | Col2 |\n|---|---|\n| C \\| D | 42 |", "| Command | Output |\n|---|---|\n| `ls | grep` | matches |", "| Expr | Notes |\n|---|---|\n| x \\| y and `z | w` | ok |", "| Title | Body |\n|---|---|\n| Multi | line1\nline2 |", "| ID | Notes |\n|---|---|\n| 1 | First line with `a | b`\nsecond line |", "| A | B | C |\n|---|---|---|\n|  | 3 |  |", "| Name | Notes |\n|---|---|\n| Z | para1\n\npara2 and a \\| escaped pipe and `x | y` |"], "outputs": ["[[\"a\",\"b\"],[\"1\",\"2\"]]", "[[\"A|B\",\"Col2\"],[\"C | D\",\"42\"]]", "[[\"Command\",\"Output\"],[\"`ls | grep`\",\"matches\"]]", "[[\"Expr\",\"Notes\"],[\"x | y and `z | w`\",\"ok\"]]", "[[\"Title\",\"Body\"],[\"Multi\",\"line1\\nline2\"]]", "[[\"ID\",\"Notes\"],[\"1\",\"First line with `a | b`\\nsecond line\"]]", "[[\"A\",\"B\",\"C\"],[\"\",\"3\",\"\"]]", "[[\"Name\",\"Notes\"],[\"Z\",\"para1\\n\\npara2 and a | escaped pipe and `x | y`\"]]"]}
{"spec": "Extract all URLs from a text blob, canonicalize them by lowercasing the host, removing default ports, sorting query parameters alphabetically, and return a deduplicated list of normalized URLs.", "inputs": ["Check https://Example.COM:443/search?q=test&lang=en and http://example.com:80/search?lang=en&q=test. Also visit https://example.com/search?lang=en&q=test#frag", "Service at http://API.Example.Org:8080/api?b=2&a=1&a=0 called. Another copy: http://api.example.org:8080/api?a=1&a=0&b=2.", "Download from FTP: ftp://FILES.Example.com:21/downloads?file=readme.txt. Note also https://files.example.com/downloads?file=readme.txt#section1!", "Access at http://192.168.0.1:80/status?verbose=true&token=abc and http://192.168.0.1/status?token=abc&verbose=true.", "See https://Example.com/Path/To/Page?z=1&y=2&a=3 and https://example.com/Path/To/Page?a=3&y=2&z=1#top", "Markdown link: [site](http://WWW.EXAMPLE.COM:80/home?page=2&sort=asc). Also raw: <http://www.example.com/home?sort=asc&page=2#bottom>", "Visit https://shop.example.com/product?id=10&color=red and https://SHOP.example.com:443/product?color=red&id=10. Also stray https://shop.example.com/product?id=10&color=red.", "Credentials in URL: https://User:Pass@Secure.Example.COM:8443/secure?b=beta&a=alpha#login and https://user:pass@secure.example.com:8443/secure?a=alpha&b=beta"], "outputs": ["[\"https://example.com/search?lang=en&q=test\",\"http://example.com/search?lang=en&q=test\",\"https://example.com/search?lang=en&q=test#frag\"]", "[\"http://api.example.org:8080/api?a=0&a=1&b=2\"]", "[\"ftp://files.example.com/downloads?file=readme.txt\",\"https://files.example.com/downloads?file=readme.txt#section1\"]", "[\"http://192.168.0.1/status?token=abc&verbose=true\"]", "[\"https://example.com/Path/To/Page?a=3&y=2&z=1\",\"https://example.com/Path/To/Page?a=3&y=2&z=1#top\"]", "[\"http://www.example.com/home?page=2&sort=asc\",\"http://www.example.com/home?page=2&sort=asc#bottom\"]", "[\"https://shop.example.com/product?id=10&color=red\"]", "[\"https://User:Pass@secure.example.com:8443/secure?a=alpha&b=beta#login\",\"https://user:pass@secure.example.com:8443/secure?a=alpha&b=beta\"]"]}
{"spec": "Extract simple 'key: value' pairs from text where each pair is on its own line, trimming whitespace, and return a JSON object mapping keys to values.", "inputs": ["name: Alice\nage: 30\ncity: Seattle", "name  :  Bob Smith   \nemail: bob@example.com\n  occupation:  Engineer", "Product: Lamp\nThis line is a header\nPrice: 29.99\nStock: 58", "Event: Meeting\nTime: 08:30\nLocation: Conference Room B", "ID: 1001\nStatus: Active\nNotes:", "first_name:   Dana\nlast_name: O'Neil\nwebsite: https://example.com/profile?id=42", "Task: Backup\nSchedule: 2025-09-26T09:00:00+01:00\nEnabled: true", "Full Name:   John Doe\nEmail : john.doe@example.com\nPhone: +1 (555) 123-4567\n\nAddress: 123 Main St, Apt 4B"], "outputs": ["{\"name\":\"Alice\",\"age\":\"30\",\"city\":\"Seattle\"}", "{\"name\":\"Bob Smith\",\"email\":\"bob@example.com\",\"occupation\":\"Engineer\"}", "{\"Product\":\"Lamp\",\"Price\":\"29.99\",\"Stock\":\"58\"}", "{\"Event\":\"Meeting\",\"Time\":\"08:30\",\"Location\":\"Conference Room B\"}", "{\"ID\":\"1001\",\"Status\":\"Active\",\"Notes\":\"\"}", "{\"first_name\":\"Dana\",\"last_name\":\"O'Neil\",\"website\":\"https://example.com/profile?id=42\"}", "{\"Task\":\"Backup\",\"Schedule\":\"2025-09-26T09:00:00+01:00\",\"Enabled\":\"true\"}", "{\"Full Name\":\"John Doe\",\"Email\":\"john.doe@example.com\",\"Phone\":\"+1 (555) 123-4567\",\"Address\":\"123 Main St, Apt 4B\"}"]}
{"spec": "Parse a URL query string into a JSON mapping where keys and values are percent-decoded; if a key appears multiple times return an array of values for that key.", "inputs": ["name=John", "message=Hello%20World%21", "id=1&id=2&id=3", "empty=&present=yes&flag", "emoji=%F0%9F%98%81&check=%E2%9C%93", "q=foo+bar&tag=C%2B%2B", "a=1&a=&a=3&b=%26%3D"], "outputs": ["{\"name\":\"John\"}", "{\"message\":\"Hello World!\"}", "{\"id\":[\"1\",\"2\",\"3\"]}", "{\"empty\":\"\",\"present\":\"yes\",\"flag\":\"\"}", "{\"emoji\":\"😁\",\"check\":\"✓\"}", "{\"q\":\"foo+bar\",\"tag\":\"C++\"}", "{\"a\":[\"1\",\"\",\"3\"],\"b\":\"&=\"}"]}
{"spec": "Normalize dates in common formats (MM/DD/YYYY, DD-MM-YYYY, 'January 2, 2003', '2 Jan 2003') to ISO 8601 dates 'YYYY-MM-DD'; ignore time components and invalid dates.", "inputs": ["01/22/2003", "22-01-2003", "January 2, 2003", "2 Jan 2003", "03/04/2005 13:45:00", "31-04-2010", "7/4/2020", "29 Feb 2020"], "outputs": ["2003-01-22", "2003-01-22", "2003-01-02", "2003-01-02", "2005-03-04", "", "2020-07-04", "2020-02-29"]}
{"spec": "Convert a Markdown bullet list with nesting via spaces or tabs into a JSON nested array preserving order and item content; support '-' and '*' bullets and multiple nesting levels.", "inputs": ["- Apple\n- Banana\n- Cherry", "- Fruits\n  - Apple\n  - Banana\n- Vegetables\n  - Carrot\n  - Lettuce", "* Root\n\t- Child 1\n\t\t* Grandchild A\n\t- Child 2\n* Another root item", "- Level 1\n    - Level 2a\n      - Level 3\n    - Level 2b\n- Sibling", "* Parent\n\t* Child-with-dash\n\t\t- Grand-child\n  * Another Parent", "- One\n\n- Two\n  - Two.A\n\n- Three", "- A\n  - B *em*\n    - C #notheading\n      - D\n- E", "- Root\n\t- Child 1\n\t\t- Grand 1\n\t\t- Grand 2\n\t- Child 2"], "outputs": ["[\"Apple\",\"Banana\",\"Cherry\"]", "[[\"Fruits\",[\"Apple\",\"Banana\"]],[\"Vegetables\",[\"Carrot\",\"Lettuce\"]]]", "[[\"Root\",[[\"Child 1\",[\"Grandchild A\"]],\"Child 2\"]],\"Another root item\"]", "[[\"Level 1\",[[\"Level 2a\",[\"Level 3\"]],\"Level 2b\"]],\"Sibling\"]", "[[\"Parent\",[[\"Child-with-dash\",[\"Grand-child\"]]]],\"Another Parent\"]", "[\"One\",[\"Two\",[\"Two.A\"]],\"Three\"]", "[[\"A\",[[\"B *em*\",[[\"C #notheading\",[\"D\"]]]]]],\"E\"]", "[[\"Root\",[[\"Child 1\",[\"Grand 1\",\"Grand 2\"]],\"Child 2\"]]]"]}
{"spec": "Parse an ASCII/Markdown table with a header and separator line (e.g., pipes and '---') into a JSON array of row objects keyed by header names, trimming cell whitespace.", "inputs": ["| Name | Age | City |\n| --- | --- | --- |\n| Alice | 30 | New York |\n| Bob | 25 | Los Angeles |", "Name | Occupation | Country\n--- | --- | ---\nCharlie | Engineer | Canada\nDana | Designer | United Kingdom", "| Product | Price | In Stock |\n|:-------|------:|:------:|\n| Widget A | $9.99 | yes |\n| Gadget B | $15.50 | no |", "| ID | Description | Notes |\n|----|-------------|-------|\n| 1 | Short text | |\n| 2 |  Another with spaces  | Needs review |", "| Column 1 (units) | % Complete | Owner |\n|------------------|-----------:|-------|\n| length m | 85% | Team A |\n| width m | 100% | Team B |", "| Key |\n| --- |\n| value with trailing spaces   |\n| \ttrimmed\t |", "| Date | Open | Close |\n|------|------:|------:|\n| 2021-01-01 | 132.45 | 133.00 |\n| 2021-01-02 | 133.10 | 131.50 |", "| Fruit | Count |\n|---|---|\n| Apple | 10 |\n| Banana | 5 |"], "outputs": ["[{\"Name\":\"Alice\",\"Age\":\"30\",\"City\":\"New York\"},{\"Name\":\"Bob\",\"Age\":\"25\",\"City\":\"Los Angeles\"}]", "[{\"Name\":\"Charlie\",\"Occupation\":\"Engineer\",\"Country\":\"Canada\"},{\"Name\":\"Dana\",\"Occupation\":\"Designer\",\"Country\":\"United Kingdom\"}]", "[{\"Product\":\"Widget A\",\"Price\":\"$9.99\",\"In Stock\":\"yes\"},{\"Product\":\"Gadget B\",\"Price\":\"$15.50\",\"In Stock\":\"no\"}]", "[{\"ID\":\"1\",\"Description\":\"Short text\",\"Notes\":\"\"},{\"ID\":\"2\",\"Description\":\"Another with spaces\",\"Notes\":\"Needs review\"}]", "[{\"Column 1 (units)\":\"length m\",\"% Complete\":\"85%\",\"Owner\":\"Team A\"},{\"Column 1 (units)\":\"width m\",\"% Complete\":\"100%\",\"Owner\":\"Team B\"}]", "[{\"Key\":\"value with trailing spaces\"},{\"Key\":\"trimmed\"}]", "[{\"Date\":\"2021-01-01\",\"Open\":\"132.45\",\"Close\":\"133.00\"},{\"Date\":\"2021-01-02\",\"Open\":\"133.10\",\"Close\":\"131.50\"}]", "[{\"Fruit\":\"Apple\",\"Count\":\"10\"},{\"Fruit\":\"Banana\",\"Count\":\"5\"}]"]}
{"spec": "Parse unstructured application logs that use varying timestamp formats, levels (INFO/WARN/ERROR), thread ids, and inline key=value contexts and output structured JSON events with ISO timestamps, level, message, and a dictionary of extracted keys and numeric metrics.", "inputs": ["2025-09-26 14:23:01,123 [thread-7] INFO User login succeeded userId=123 action=login elapsed=245ms ip=192.0.2.1", "26/Sep/2025:15:45:07 +0100 WARN [worker-2] Disk usage high path=/var logs=10240KB threshold=90%", "Sep 26 2025 16:00:00 ERROR main-thread Exception processing request error_code=500 userId=789 msg='NullPointer at Service.process' duration=0.05s", "2025-09-26T17:30:00.500Z INFO [th-99] Processed items count=250 total=12500 size=1.5MB", "2025-09-26 05:12:01 PM, ERROR [pool-3] Failed to send email to=alice@example.com attempts=3 backoff=1500ms", "2025/09/26 18:00:00 - INFO - auth: token validated user=jsmith session=abc123 duration=120ms success=true", "26-09-2025 19:01:01, WARN Thread-5 Connection slow host=db.prod port=5432 rtt=250.75ms load=0.92", "2025-09-26T20:15:30+02:00 ERROR [scheduler] Job failed id=42 retries=5 reason='Timeout' elapsed=00:02:15"], "outputs": ["{\"timestamp\":\"2025-09-26T14:23:01.123Z\",\"level\":\"INFO\",\"message\":\"User login succeeded\",\"context\":{\"thread\":\"thread-7\",\"userId\":123,\"action\":\"login\",\"elapsed_ms\":245,\"ip\":\"192.0.2.1\"}}", "{\"timestamp\":\"2025-09-26T14:45:07Z\",\"level\":\"WARN\",\"message\":\"Disk usage high\",\"context\":{\"thread\":\"worker-2\",\"path\":\"/var\",\"logs_kb\":10240,\"threshold_percent\":90}}", "{\"timestamp\":\"2025-09-26T16:00:00Z\",\"level\":\"ERROR\",\"message\":\"Exception processing request\",\"context\":{\"thread\":\"main-thread\",\"error_code\":500,\"userId\":789,\"msg\":\"NullPointer at Service.process\",\"duration_s\":0.05}}", "{\"timestamp\":\"2025-09-26T17:30:00.500Z\",\"level\":\"INFO\",\"message\":\"Processed items\",\"context\":{\"thread\":\"th-99\",\"count\":250,\"total\":12500,\"size_mb\":1.5}}", "{\"timestamp\":\"2025-09-26T17:12:01Z\",\"level\":\"ERROR\",\"message\":\"Failed to send email\",\"context\":{\"thread\":\"pool-3\",\"to\":\"alice@example.com\",\"attempts\":3,\"backoff_ms\":1500}}", "{\"timestamp\":\"2025-09-26T18:00:00Z\",\"level\":\"INFO\",\"message\":\"auth: token validated\",\"context\":{\"user\":\"jsmith\",\"session\":\"abc123\",\"duration_ms\":120,\"success\":true}}", "{\"timestamp\":\"2025-09-26T19:01:01Z\",\"level\":\"WARN\",\"message\":\"Connection slow\",\"context\":{\"thread\":\"Thread-5\",\"host\":\"db.prod\",\"port\":5432,\"rtt_ms\":250.75,\"load\":0.92}}", "{\"timestamp\":\"2025-09-26T18:15:30Z\",\"level\":\"ERROR\",\"message\":\"Job failed\",\"context\":{\"thread\":\"scheduler\",\"id\":42,\"retries\":5,\"reason\":\"Timeout\",\"elapsed_seconds\":135}}"]}
{"spec": "Parse a multiline Java stack trace into JSON with fields {exception: \"Class: message\", frames: [{class, method, file, line}], caused_by: nested} capturing nested 'Caused by' chains and frame order.", "inputs": ["java.lang.NullPointerException: Cannot read field name because user is null\n\tat com.example.service.UserService.getUserName(UserService.java:45)\n\tat com.example.app.Main.main(Main.java:14)", "java.io.IOException: Failed to read configuration\n\tat com.example.config.ConfigLoader.load(ConfigLoader.java:88)\n\tat com.example.app.Main.main(Main.java:22)\nCaused by: java.io.FileNotFoundException: config.yml (No such file or directory)\n\tat java.io.FileInputStream.open0(Native Method)\n\tat java.io.FileInputStream.open(FileInputStream.java:195)\n\tat java.io.FileInputStream.<init>(FileInputStream.java:138)\n\tat com.example.config.ConfigLoader.openConfig(ConfigLoader.java:54)", "java.lang.IllegalStateException\n\tat com.example.util.Parser.parse(Parser.java:123)\n\tat com.example.app.Main.start(Main.java)\n\tat com.example.app.Main.main(Main.java:10)", "java.lang.RuntimeException: Operation failed\n\tat com.example.app.Controller.handle(Controller.java:58)\n\tat com.example.app.Main.main(Main.java:12)\nCaused by: com.example.service.ServiceException: Unable to process request\n\tat com.example.service.Business.process(Business.java:102)\n\tat com.example.service.Service.handle(Service.java:47)\nCaused by: java.sql.SQLException: Syntax error near 'FROM'\n\tat org.postgresql.Driver.parseError(Driver.java:300)\n\tat org.postgresql.Driver.connect(Driver.java:120)\n\tat com.example.db.DB.connect(DB.java:34)", "java.lang.RuntimeException: Failure in async task\n\tat com.example.async.TaskRunner$1.run(TaskRunner.java:40)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)", "Exception in thread \"main\" java.lang.RuntimeException: Fatal", "java.lang.OutOfMemoryError: Java heap space\n\tat com.example.cache.Cache.put(Cache.java:58)\n\tat com.example.app.Main.process(Main.java:30)\nCaused by: java.lang.NullPointerException\n\tat com.example.cache.Cache$Entry.compute(Cache.java)\n\tat com.example.cache.Cache.put(Cache.java:56)", "javax.naming.NamingException: Cannot find resource\n\tat com.example.naming.Context.lookup(Context.java:85)\n\tat com.example.app.Main.init(Main.java:27)\nCaused by: org.apache.naming.NamingSecurityException: Security violation\n\tat org.apache.naming.factory.ResourceFactory.getObjectInstance(ResourceFactory.java:210)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.apache.naming.Context.lookup(Context.java:80)"], "outputs": ["{\"exception\":\"java.lang.NullPointerException: Cannot read field name because user is null\",\"frames\":[{\"class\":\"com.example.service.UserService\",\"method\":\"getUserName\",\"file\":\"UserService.java\",\"line\":45},{\"class\":\"com.example.app.Main\",\"method\":\"main\",\"file\":\"Main.java\",\"line\":14}],\"caused_by\":null}", "{\"exception\":\"java.io.IOException: Failed to read configuration\",\"frames\":[{\"class\":\"com.example.config.ConfigLoader\",\"method\":\"load\",\"file\":\"ConfigLoader.java\",\"line\":88},{\"class\":\"com.example.app.Main\",\"method\":\"main\",\"file\":\"Main.java\",\"line\":22}],\"caused_by\":{\"exception\":\"java.io.FileNotFoundException: config.yml (No such file or directory)\",\"frames\":[{\"class\":\"java.io.FileInputStream\",\"method\":\"open0\",\"file\":\"Native Method\",\"line\":null},{\"class\":\"java.io.FileInputStream\",\"method\":\"open\",\"file\":\"FileInputStream.java\",\"line\":195},{\"class\":\"java.io.FileInputStream\",\"method\":\"<init>\",\"file\":\"FileInputStream.java\",\"line\":138},{\"class\":\"com.example.config.ConfigLoader\",\"method\":\"openConfig\",\"file\":\"ConfigLoader.java\",\"line\":54}],\"caused_by\":null}}", "{\"exception\":\"java.lang.IllegalStateException\",\"frames\":[{\"class\":\"com.example.util.Parser\",\"method\":\"parse\",\"file\":\"Parser.java\",\"line\":123},{\"class\":\"com.example.app.Main\",\"method\":\"start\",\"file\":\"Main.java\",\"line\":null},{\"class\":\"com.example.app.Main\",\"method\":\"main\",\"file\":\"Main.java\",\"line\":10}],\"caused_by\":null}", "{\"exception\":\"java.lang.RuntimeException: Operation failed\",\"frames\":[{\"class\":\"com.example.app.Controller\",\"method\":\"handle\",\"file\":\"Controller.java\",\"line\":58},{\"class\":\"com.example.app.Main\",\"method\":\"main\",\"file\":\"Main.java\",\"line\":12}],\"caused_by\":{\"exception\":\"com.example.service.ServiceException: Unable to process request\",\"frames\":[{\"class\":\"com.example.service.Business\",\"method\":\"process\",\"file\":\"Business.java\",\"line\":102},{\"class\":\"com.example.service.Service\",\"method\":\"handle\",\"file\":\"Service.java\",\"line\":47}],\"caused_by\":{\"exception\":\"java.sql.SQLException: Syntax error near 'FROM'\",\"frames\":[{\"class\":\"org.postgresql.Driver\",\"method\":\"parseError\",\"file\":\"Driver.java\",\"line\":300},{\"class\":\"org.postgresql.Driver\",\"method\":\"connect\",\"file\":\"Driver.java\",\"line\":120},{\"class\":\"com.example.db.DB\",\"method\":\"connect\",\"file\":\"DB.java\",\"line\":34}],\"caused_by\":null}}}", "{\"exception\":\"java.lang.RuntimeException: Failure in async task\",\"frames\":[{\"class\":\"com.example.async.TaskRunner$1\",\"method\":\"run\",\"file\":\"TaskRunner.java\",\"line\":40},{\"class\":\"java.util.concurrent.ThreadPoolExecutor\",\"method\":\"runWorker\",\"file\":\"ThreadPoolExecutor.java\",\"line\":1149},{\"class\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"method\":\"run\",\"file\":\"ThreadPoolExecutor.java\",\"line\":624},{\"class\":\"java.lang.Thread\",\"method\":\"run\",\"file\":\"Thread.java\",\"line\":748}],\"caused_by\":null}", "{\"exception\":\"java.lang.RuntimeException: Fatal\",\"frames\":[],\"caused_by\":null}", "{\"exception\":\"java.lang.OutOfMemoryError: Java heap space\",\"frames\":[{\"class\":\"com.example.cache.Cache\",\"method\":\"put\",\"file\":\"Cache.java\",\"line\":58},{\"class\":\"com.example.app.Main\",\"method\":\"process\",\"file\":\"Main.java\",\"line\":30}],\"caused_by\":{\"exception\":\"java.lang.NullPointerException\",\"frames\":[{\"class\":\"com.example.cache.Cache$Entry\",\"method\":\"compute\",\"file\":\"Cache.java\",\"line\":null},{\"class\":\"com.example.cache.Cache\",\"method\":\"put\",\"file\":\"Cache.java\",\"line\":56}],\"caused_by\":null}}", "{\"exception\":\"javax.naming.NamingException: Cannot find resource\",\"frames\":[{\"class\":\"com.example.naming.Context\",\"method\":\"lookup\",\"file\":\"Context.java\",\"line\":85},{\"class\":\"com.example.app.Main\",\"method\":\"init\",\"file\":\"Main.java\",\"line\":27}],\"caused_by\":{\"exception\":\"org.apache.naming.NamingSecurityException: Security violation\",\"frames\":[{\"class\":\"org.apache.naming.factory.ResourceFactory\",\"method\":\"getObjectInstance\",\"file\":\"ResourceFactory.java\",\"line\":210},{\"class\":\"java.security.AccessController\",\"method\":\"doPrivileged\",\"file\":\"Native Method\",\"line\":null},{\"class\":\"org.apache.naming.Context\",\"method\":\"lookup\",\"file\":\"Context.java\",\"line\":80}],\"caused_by\":null}}"]}
{"spec": "Extract Markdown headings up to level 3 and output a JSON table of contents array with objects {level, text, line} where line is the 1-based source line number of the heading.", "inputs": ["# Title\nSome intro text.", "Overview\n========\n\nDetails\n-------\n\n### Deep Dive\nText", "```markdown\n# Not a heading\n\nafter code\n```\n# Real Heading\nFinal", "### Heading with *emphasis* and `code` ###\nParagraph", "#### Ignored level 4\n## Included level 2", "## Indented Heading\nSome text\n    # Not a heading (four-space code)\n# Top-level", "Project\n=======\n\n> ## Quoted Heading\n\n### Feature A\n## Feature B\n#### Subdetail", "## Title with [link](http://example.com) ##\nContent\n### Another Title ###\nFooter"], "outputs": ["[{\"level\":1,\"text\":\"Title\",\"line\":1}]", "[{\"level\":1,\"text\":\"Overview\",\"line\":1},{\"level\":2,\"text\":\"Details\",\"line\":4},{\"level\":3,\"text\":\"Deep Dive\",\"line\":7}]", "[{\"level\":1,\"text\":\"Real Heading\",\"line\":6}]", "[{\"level\":3,\"text\":\"Heading with *emphasis* and `code`\",\"line\":1}]", "[{\"level\":2,\"text\":\"Included level 2\",\"line\":2}]", "[{\"level\":2,\"text\":\"Indented Heading\",\"line\":1},{\"level\":1,\"text\":\"Top-level\",\"line\":4}]", "[{\"level\":1,\"text\":\"Project\",\"line\":1},{\"level\":2,\"text\":\"Quoted Heading\",\"line\":4},{\"level\":3,\"text\":\"Feature A\",\"line\":6},{\"level\":2,\"text\":\"Feature B\",\"line\":7}]", "[{\"level\":2,\"text\":\"Title with [link](http://example.com)\",\"line\":1},{\"level\":3,\"text\":\"Another Title\",\"line\":3}]"]}
{"spec": "Parse a block of multiple-choice options labeled inconsistently (e.g., 'A)', 'B.', 'C -', 'D:') and return a list of objects {\"label\": uppercase single letter, \"text\": trimmed option text} in appearance order.", "inputs": ["A) Apple\nB. Banana\nC - Cherry\nD: Date", "a) First choice\nB) Second choice\nc. Third choice\nD - Fourth choice", "Choose one:\nA - Red\nB: Blue\nC) Green\nD. Yellow", "- A)   Increase speed\n- b. Decrease speed\n- C - Maintain\n- d: Auto", "A) True; B) False; C) Not Given; D) Both A and B", "(A) Go North\n( b ) Go South\n(C ) Go East\n( d) Go West", "Option set\nA. \"Start\" the machine\nB) 'Stop' the machine\nC - 'Pause'\nD: Resume", "a - This is the first option: it contains a colon\nB)Second option with no space\nc)   Third option with leading spaces\nD.Fourth option"], "outputs": ["[{\"label\":\"A\",\"text\":\"Apple\"},{\"label\":\"B\",\"text\":\"Banana\"},{\"label\":\"C\",\"text\":\"Cherry\"},{\"label\":\"D\",\"text\":\"Date\"}]", "[{\"label\":\"A\",\"text\":\"First choice\"},{\"label\":\"B\",\"text\":\"Second choice\"},{\"label\":\"C\",\"text\":\"Third choice\"},{\"label\":\"D\",\"text\":\"Fourth choice\"}]", "[{\"label\":\"A\",\"text\":\"Red\"},{\"label\":\"B\",\"text\":\"Blue\"},{\"label\":\"C\",\"text\":\"Green\"},{\"label\":\"D\",\"text\":\"Yellow\"}]", "[{\"label\":\"A\",\"text\":\"Increase speed\"},{\"label\":\"B\",\"text\":\"Decrease speed\"},{\"label\":\"C\",\"text\":\"Maintain\"},{\"label\":\"D\",\"text\":\"Auto\"}]", "[{\"label\":\"A\",\"text\":\"True\"},{\"label\":\"B\",\"text\":\"False\"},{\"label\":\"C\",\"text\":\"Not Given\"},{\"label\":\"D\",\"text\":\"Both A and B\"}]", "[{\"label\":\"A\",\"text\":\"Go North\"},{\"label\":\"B\",\"text\":\"Go South\"},{\"label\":\"C\",\"text\":\"Go East\"},{\"label\":\"D\",\"text\":\"Go West\"}]", "[{\"label\":\"A\",\"text\":\"\\\"Start\\\" the machine\"},{\"label\":\"B\",\"text\":\"'Stop' the machine\"},{\"label\":\"C\",\"text\":\"'Pause'\"},{\"label\":\"D\",\"text\":\"Resume\"}]", "[{\"label\":\"A\",\"text\":\"This is the first option: it contains a colon\"},{\"label\":\"B\",\"text\":\"Second option with no space\"},{\"label\":\"C\",\"text\":\"Third option with leading spaces\"},{\"label\":\"D\",\"text\":\"Fourth option\"}]"]}
{"spec": "Parse an option block where lines start with labels like 'a)', '1.', 'A.' possibly with indented nested suboptions and output a nested JSON array of option objects {key, text, children}.", "inputs": ["a) Option one\nb) Option two\nc) Option three", "1. Fruits\n  a) Apple\n  b) Banana\n2. Vegetables\n  a) Carrot", "A. Choose an action\n  i. Start\n  ii. Stop\nB. Another action", "a) This option has a description that\nspans two lines and includes commas,\ncolons: and other punctuation.\nb) Second option", "1. Parent\n   a) Child A\n      i. Grandchild 1\n      ii. Grandchild 2\n   b) Child B", "a) Top\n\t1. Sub-one\n\t2. Sub-two\nb) Bottom", "A. Option (with parenthesis)\n  a) Suboption (note: important)", "a) First\n\n    i. Subfirst\n  b) Second\n\nc) Third"], "outputs": ["[{\"key\":\"a\",\"text\":\"Option one\",\"children\":[]},{\"key\":\"b\",\"text\":\"Option two\",\"children\":[]},{\"key\":\"c\",\"text\":\"Option three\",\"children\":[]}]", "[{\"key\":\"1\",\"text\":\"Fruits\",\"children\":[{\"key\":\"a\",\"text\":\"Apple\",\"children\":[]},{\"key\":\"b\",\"text\":\"Banana\",\"children\":[]}]},{\"key\":\"2\",\"text\":\"Vegetables\",\"children\":[{\"key\":\"a\",\"text\":\"Carrot\",\"children\":[]}]}]", "[{\"key\":\"A\",\"text\":\"Choose an action\",\"children\":[{\"key\":\"i\",\"text\":\"Start\",\"children\":[]},{\"key\":\"ii\",\"text\":\"Stop\",\"children\":[]}]},{\"key\":\"B\",\"text\":\"Another action\",\"children\":[]}]", "[{\"key\":\"a\",\"text\":\"This option has a description that spans two lines and includes commas, colons: and other punctuation.\",\"children\":[]},{\"key\":\"b\",\"text\":\"Second option\",\"children\":[]}]", "[{\"key\":\"1\",\"text\":\"Parent\",\"children\":[{\"key\":\"a\",\"text\":\"Child A\",\"children\":[{\"key\":\"i\",\"text\":\"Grandchild 1\",\"children\":[]},{\"key\":\"ii\",\"text\":\"Grandchild 2\",\"children\":[]}]},{\"key\":\"b\",\"text\":\"Child B\",\"children\":[]}]}]", "[{\"key\":\"a\",\"text\":\"Top\",\"children\":[{\"key\":\"1\",\"text\":\"Sub-one\",\"children\":[]},{\"key\":\"2\",\"text\":\"Sub-two\",\"children\":[]}]},{\"key\":\"b\",\"text\":\"Bottom\",\"children\":[]}]", "[{\"key\":\"A\",\"text\":\"Option (with parenthesis)\",\"children\":[{\"key\":\"a\",\"text\":\"Suboption (note: important)\",\"children\":[]}]}]", "[{\"key\":\"a\",\"text\":\"First\",\"children\":[{\"key\":\"i\",\"text\":\"Subfirst\",\"children\":[]}]},{\"key\":\"b\",\"text\":\"Second\",\"children\":[]},{\"key\":\"c\",\"text\":\"Third\",\"children\":[]}]"]}
{"spec": "Parse timestamps with textual time zones (e.g., '2021-07-04 5pm PST', '04 Jul 2021 17:00 UTC+2') and output ISO 8601 datetimes with numeric offset, using a standard mapping for timezone abbreviations.", "inputs": ["2021-07-04 5pm PST", "04 Jul 2021 17:00 UTC+2", "March 1, 2020 12:30 AM EST", "2022-11-06 02:15 MDT", "15-08-2019 23:45 GMT+01", "2020/12/31 11:59pm JST", "1 Jan 2021 00:00 IST", "Sep 10 2018 14:00 AEST"], "outputs": ["2021-07-04T17:00:00-08:00", "2021-07-04T17:00:00+02:00", "2020-03-01T00:30:00-05:00", "2022-11-06T02:15:00-06:00", "2019-08-15T23:45:00+01:00", "2020-12-31T23:59:00+09:00", "2021-01-01T00:00:00+05:30", "2018-09-10T14:00:00+10:00"]}

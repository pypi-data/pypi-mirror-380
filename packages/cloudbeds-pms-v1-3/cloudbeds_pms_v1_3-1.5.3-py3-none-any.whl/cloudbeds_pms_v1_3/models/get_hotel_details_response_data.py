# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_hotel_details_response_data_property_address import GetHotelDetailsResponseDataPropertyAddress
from cloudbeds_pms_v1_3.models.get_hotel_details_response_data_property_currency import GetHotelDetailsResponseDataPropertyCurrency
from cloudbeds_pms_v1_3.models.get_hotel_details_response_data_property_image_inner import GetHotelDetailsResponseDataPropertyImageInner
from cloudbeds_pms_v1_3.models.get_hotel_details_response_data_property_policy import GetHotelDetailsResponseDataPropertyPolicy
from typing import Optional, Set
from typing_extensions import Self

class GetHotelDetailsResponseData(BaseModel):
    """
    Information about the hotel
    """ # noqa: E501
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID", alias="propertyID")
    organization_id: Optional[StrictStr] = Field(default=None, description="Organization ID", alias="organizationID")
    property_name: Optional[StrictStr] = Field(default=None, description="Property name", alias="propertyName")
    property_type: Optional[StrictStr] = Field(default=None, description="The type of property", alias="propertyType")
    property_image: Optional[List[GetHotelDetailsResponseDataPropertyImageInner]] = Field(default=None, description="Property images details", alias="propertyImage")
    property_description: Optional[StrictStr] = Field(default=None, description="Property description", alias="propertyDescription")
    property_currency: Optional[GetHotelDetailsResponseDataPropertyCurrency] = Field(default=None, alias="propertyCurrency")
    property_primary_language: Optional[StrictStr] = Field(default=None, description="Property primary language", alias="propertyPrimaryLanguage")
    property_additional_photos: Optional[List[GetHotelDetailsResponseDataPropertyImageInner]] = Field(default=None, description="Property additional photos", alias="propertyAdditionalPhotos")
    property_phone: Optional[StrictStr] = Field(default=None, description="Property phone number", alias="propertyPhone")
    property_email: Optional[StrictStr] = Field(default=None, description="Property main email address", alias="propertyEmail")
    property_address: Optional[GetHotelDetailsResponseDataPropertyAddress] = Field(default=None, alias="propertyAddress")
    property_policy: Optional[GetHotelDetailsResponseDataPropertyPolicy] = Field(default=None, alias="propertyPolicy")
    property_amenities: Optional[List[StrictStr]] = Field(default=None, description="List of property amenities", alias="propertyAmenities")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID number", alias="taxID")
    tax_id2: Optional[StrictStr] = Field(default=None, description="Second Tax ID number", alias="taxID2")
    company_legal_name: Optional[StrictStr] = Field(default=None, description="Legal company name", alias="companyLegalName")
    __properties: ClassVar[List[str]] = ["propertyID", "organizationID", "propertyName", "propertyType", "propertyImage", "propertyDescription", "propertyCurrency", "propertyPrimaryLanguage", "propertyAdditionalPhotos", "propertyPhone", "propertyEmail", "propertyAddress", "propertyPolicy", "propertyAmenities", "taxID", "taxID2", "companyLegalName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetHotelDetailsResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in property_image (list)
        _items = []
        if self.property_image:
            for _item_property_image in self.property_image:
                if _item_property_image:
                    _items.append(_item_property_image.to_dict())
            _dict['propertyImage'] = _items
        # override the default output from pydantic by calling `to_dict()` of property_currency
        if self.property_currency:
            _dict['propertyCurrency'] = self.property_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in property_additional_photos (list)
        _items = []
        if self.property_additional_photos:
            for _item_property_additional_photos in self.property_additional_photos:
                if _item_property_additional_photos:
                    _items.append(_item_property_additional_photos.to_dict())
            _dict['propertyAdditionalPhotos'] = _items
        # override the default output from pydantic by calling `to_dict()` of property_address
        if self.property_address:
            _dict['propertyAddress'] = self.property_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of property_policy
        if self.property_policy:
            _dict['propertyPolicy'] = self.property_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetHotelDetailsResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyID": obj.get("propertyID"),
            "organizationID": obj.get("organizationID"),
            "propertyName": obj.get("propertyName"),
            "propertyType": obj.get("propertyType"),
            "propertyImage": [GetHotelDetailsResponseDataPropertyImageInner.from_dict(_item) for _item in obj["propertyImage"]] if obj.get("propertyImage") is not None else None,
            "propertyDescription": obj.get("propertyDescription"),
            "propertyCurrency": GetHotelDetailsResponseDataPropertyCurrency.from_dict(obj["propertyCurrency"]) if obj.get("propertyCurrency") is not None else None,
            "propertyPrimaryLanguage": obj.get("propertyPrimaryLanguage"),
            "propertyAdditionalPhotos": [GetHotelDetailsResponseDataPropertyImageInner.from_dict(_item) for _item in obj["propertyAdditionalPhotos"]] if obj.get("propertyAdditionalPhotos") is not None else None,
            "propertyPhone": obj.get("propertyPhone"),
            "propertyEmail": obj.get("propertyEmail"),
            "propertyAddress": GetHotelDetailsResponseDataPropertyAddress.from_dict(obj["propertyAddress"]) if obj.get("propertyAddress") is not None else None,
            "propertyPolicy": GetHotelDetailsResponseDataPropertyPolicy.from_dict(obj["propertyPolicy"]) if obj.get("propertyPolicy") is not None else None,
            "propertyAmenities": obj.get("propertyAmenities"),
            "taxID": obj.get("taxID"),
            "taxID2": obj.get("taxID2"),
            "companyLegalName": obj.get("companyLegalName")
        })
        return _obj



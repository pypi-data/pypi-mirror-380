# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_groups_response_data_inner_contacts_inner import GetGroupsResponseDataInnerContactsInner
from typing import Optional, Set
from typing_extensions import Self

class GetGroupsResponseDataInner(BaseModel):
    """
    GetGroupsResponseDataInner
    """ # noqa: E501
    group_code: Optional[StrictStr] = Field(default=None, description="Unique ID for a group", alias="groupCode")
    name: Optional[StrictStr] = Field(default=None, description="The name of the group")
    type: Optional[StrictStr] = Field(default=None, description="The type of the group")
    status: Optional[StrictStr] = Field(default=None, description="Group status")
    created: Optional[datetime] = Field(default=None, description="Group created time")
    source_id: Optional[StrictStr] = Field(default=None, description="The third-party source ID for this group, can be empty", alias="sourceID")
    source_name: Optional[StrictStr] = Field(default=None, description="The third-party source name for this group, can be empty", alias="sourceName")
    address1: Optional[StrictStr] = Field(default=None, description="Address")
    address2: Optional[StrictStr] = Field(default=None, description="Address2")
    city: Optional[StrictStr] = Field(default=None, description="City")
    zip: Optional[StrictStr] = Field(default=None, description="Zip")
    state: Optional[StrictStr] = Field(default=None, description="State")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code", alias="countryCode")
    commission_type: Optional[StrictStr] = Field(default=None, description="Commission type", alias="commissionType")
    tax_document_type: Optional[StrictStr] = Field(default=None, description="Tax document type", alias="taxDocumentType")
    tax_id_number: Optional[StrictStr] = Field(default=None, description="Tax ID number", alias="taxIdNumber")
    legal_name: Optional[StrictStr] = Field(default=None, description="Legal name", alias="legalName")
    contacts: Optional[List[GetGroupsResponseDataInnerContactsInner]] = Field(default=None, description="Group contacts")
    __properties: ClassVar[List[str]] = ["groupCode", "name", "type", "status", "created", "sourceID", "sourceName", "address1", "address2", "city", "zip", "state", "countryCode", "commissionType", "taxDocumentType", "taxIdNumber", "legalName", "contacts"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['group', 'company', 'travel_agent', 'wholesaler']):
            raise ValueError("must be one of enum values ('group', 'company', 'travel_agent', 'wholesaler')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'closed']):
            raise ValueError("must be one of enum values ('open', 'closed')")
        return value

    @field_validator('commission_type')
    def commission_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fixed', 'percent']):
            raise ValueError("must be one of enum values ('fixed', 'percent')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGroupsResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        # set to None if address1 (nullable) is None
        # and model_fields_set contains the field
        if self.address1 is None and "address1" in self.model_fields_set:
            _dict['address1'] = None

        # set to None if address2 (nullable) is None
        # and model_fields_set contains the field
        if self.address2 is None and "address2" in self.model_fields_set:
            _dict['address2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['countryCode'] = None

        # set to None if commission_type (nullable) is None
        # and model_fields_set contains the field
        if self.commission_type is None and "commission_type" in self.model_fields_set:
            _dict['commissionType'] = None

        # set to None if tax_document_type (nullable) is None
        # and model_fields_set contains the field
        if self.tax_document_type is None and "tax_document_type" in self.model_fields_set:
            _dict['taxDocumentType'] = None

        # set to None if tax_id_number (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id_number is None and "tax_id_number" in self.model_fields_set:
            _dict['taxIdNumber'] = None

        # set to None if legal_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_name is None and "legal_name" in self.model_fields_set:
            _dict['legalName'] = None

        # set to None if contacts (nullable) is None
        # and model_fields_set contains the field
        if self.contacts is None and "contacts" in self.model_fields_set:
            _dict['contacts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGroupsResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupCode": obj.get("groupCode"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "created": obj.get("created"),
            "sourceID": obj.get("sourceID"),
            "sourceName": obj.get("sourceName"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "state": obj.get("state"),
            "countryCode": obj.get("countryCode"),
            "commissionType": obj.get("commissionType"),
            "taxDocumentType": obj.get("taxDocumentType"),
            "taxIdNumber": obj.get("taxIdNumber"),
            "legalName": obj.get("legalName"),
            "contacts": [GetGroupsResponseDataInnerContactsInner.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None
        })
        return _obj



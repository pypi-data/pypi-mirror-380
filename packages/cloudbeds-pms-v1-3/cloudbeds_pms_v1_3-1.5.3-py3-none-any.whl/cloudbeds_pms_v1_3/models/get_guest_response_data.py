# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_guest_response_data_birth_date import GetGuestResponseDataBirthDate
from cloudbeds_pms_v1_3.models.get_guest_response_data_custom_fields_inner import GetGuestResponseDataCustomFieldsInner
from cloudbeds_pms_v1_3.models.get_guest_response_data_document_expiration_date import GetGuestResponseDataDocumentExpirationDate
from cloudbeds_pms_v1_3.models.get_guest_response_data_document_issue_date import GetGuestResponseDataDocumentIssueDate
from typing import Optional, Set
from typing_extensions import Self

class GetGuestResponseData(BaseModel):
    """
    Details for the guest queried
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, description="First Name", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Last Name", alias="lastName")
    gender: Optional[StrictStr] = Field(default=None, description="Gender")
    email: Optional[StrictStr] = Field(default=None, description="Email")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number")
    cell_phone: Optional[StrictStr] = Field(default=None, description="Cell phone number", alias="cellPhone")
    country: Optional[StrictStr] = Field(default=None, description="Country (2 digit code)")
    address: Optional[StrictStr] = Field(default=None, description="Address")
    address2: Optional[StrictStr] = Field(default=None, description="Address 2")
    city: Optional[StrictStr] = Field(default=None, description="City")
    zip: Optional[StrictStr] = Field(default=None, description="Zip")
    state: Optional[StrictStr] = Field(default=None, description="State")
    birth_date: Optional[GetGuestResponseDataBirthDate] = Field(default=None, alias="birthDate")
    document_type: Optional[StrictStr] = Field(default=None, description="Document Type", alias="documentType")
    document_number: Optional[StrictStr] = Field(default=None, description="Document number", alias="documentNumber")
    document_issue_date: Optional[GetGuestResponseDataDocumentIssueDate] = Field(default=None, alias="documentIssueDate")
    document_issuing_country: Optional[StrictStr] = Field(default=None, description="Document Issuing Country (2-digits code)", alias="documentIssuingCountry")
    document_expiration_date: Optional[GetGuestResponseDataDocumentExpirationDate] = Field(default=None, alias="documentExpirationDate")
    custom_fields: Optional[List[GetGuestResponseDataCustomFieldsInner]] = Field(default=None, alias="customFields")
    guest_requirements: Optional[List[Dict[str, Any]]] = Field(default=None, description="Guest requirements data. Only included if `includeGuestRequirements=true`.", alias="guestRequirements")
    special_requests: Optional[StrictStr] = Field(default=None, description="Special requests made by the guest at the time of the booking", alias="specialRequests")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID", alias="taxID")
    company_tax_id: Optional[StrictStr] = Field(default=None, description="Company tax ID", alias="companyTaxID")
    company_name: Optional[StrictStr] = Field(default=None, description="Company name", alias="companyName")
    is_anonymized: Optional[StrictBool] = Field(default=None, description="Flag indicating the guest data was removed upon request", alias="isAnonymized")
    guest_opt_in: Optional[StrictBool] = Field(default=None, description="If guest has opted-in to marketing communication or not", alias="guestOptIn")
    is_merged: Optional[StrictBool] = Field(default=None, description="Flag indicating that guest was merged", alias="isMerged")
    new_guest_id: Optional[StrictStr] = Field(default=None, description="Merged guest ID", alias="newGuestID")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "gender", "email", "phone", "cellPhone", "country", "address", "address2", "city", "zip", "state", "birthDate", "documentType", "documentNumber", "documentIssueDate", "documentIssuingCountry", "documentExpirationDate", "customFields", "guestRequirements", "specialRequests", "taxID", "companyTaxID", "companyName", "isAnonymized", "guestOptIn", "isMerged", "newGuestID"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['M', 'F', 'N/A']):
            raise ValueError("must be one of enum values ('M', 'F', 'N/A')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGuestResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of birth_date
        if self.birth_date:
            _dict['birthDate'] = self.birth_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_issue_date
        if self.document_issue_date:
            _dict['documentIssueDate'] = self.document_issue_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_expiration_date
        if self.document_expiration_date:
            _dict['documentExpirationDate'] = self.document_expiration_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        # set to None if guest_requirements (nullable) is None
        # and model_fields_set contains the field
        if self.guest_requirements is None and "guest_requirements" in self.model_fields_set:
            _dict['guestRequirements'] = None

        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['taxID'] = None

        # set to None if company_tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_tax_id is None and "company_tax_id" in self.model_fields_set:
            _dict['companyTaxID'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGuestResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "gender": obj.get("gender"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "cellPhone": obj.get("cellPhone"),
            "country": obj.get("country"),
            "address": obj.get("address"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "state": obj.get("state"),
            "birthDate": GetGuestResponseDataBirthDate.from_dict(obj["birthDate"]) if obj.get("birthDate") is not None else None,
            "documentType": obj.get("documentType"),
            "documentNumber": obj.get("documentNumber"),
            "documentIssueDate": GetGuestResponseDataDocumentIssueDate.from_dict(obj["documentIssueDate"]) if obj.get("documentIssueDate") is not None else None,
            "documentIssuingCountry": obj.get("documentIssuingCountry"),
            "documentExpirationDate": GetGuestResponseDataDocumentExpirationDate.from_dict(obj["documentExpirationDate"]) if obj.get("documentExpirationDate") is not None else None,
            "customFields": [GetGuestResponseDataCustomFieldsInner.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "guestRequirements": obj.get("guestRequirements"),
            "specialRequests": obj.get("specialRequests"),
            "taxID": obj.get("taxID"),
            "companyTaxID": obj.get("companyTaxID"),
            "companyName": obj.get("companyName"),
            "isAnonymized": obj.get("isAnonymized"),
            "guestOptIn": obj.get("guestOptIn"),
            "isMerged": obj.get("isMerged"),
            "newGuestID": obj.get("newGuestID")
        })
        return _obj



# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date, datetime
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from cloudbeds_pms_v1_3.models.delete_guest_note_response import DeleteGuestNoteResponse
from cloudbeds_pms_v1_3.models.get_guest_list_response import GetGuestListResponse
from cloudbeds_pms_v1_3.models.get_guest_notes_response import GetGuestNotesResponse
from cloudbeds_pms_v1_3.models.get_guest_response import GetGuestResponse
from cloudbeds_pms_v1_3.models.get_guests_by_filter_response import GetGuestsByFilterResponse
from cloudbeds_pms_v1_3.models.get_guests_by_status_response import GetGuestsByStatusResponse
from cloudbeds_pms_v1_3.models.get_guests_modified_response import GetGuestsModifiedResponse
from cloudbeds_pms_v1_3.models.post_guest_document_response import PostGuestDocumentResponse
from cloudbeds_pms_v1_3.models.post_guest_note_response import PostGuestNoteResponse
from cloudbeds_pms_v1_3.models.post_guest_photo_response import PostGuestPhotoResponse
from cloudbeds_pms_v1_3.models.post_guest_request_custom_fields_inner import PostGuestRequestCustomFieldsInner
from cloudbeds_pms_v1_3.models.post_guest_response import PostGuestResponse
from cloudbeds_pms_v1_3.models.post_guests_to_room_response import PostGuestsToRoomResponse
from cloudbeds_pms_v1_3.models.put_guest_note_response import PutGuestNoteResponse
from cloudbeds_pms_v1_3.models.put_guest_request_guest_custom_fields_inner import PutGuestRequestGuestCustomFieldsInner
from cloudbeds_pms_v1_3.models.put_guest_response import PutGuestResponse

from cloudbeds_pms_v1_3.api_client import ApiClient, RequestSerialized
from cloudbeds_pms_v1_3.api_response import ApiResponse
from cloudbeds_pms_v1_3.rest import RESTResponseType


class GuestApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_guest_note_delete(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        note_id: Annotated[StrictStr, Field(description="Note ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteGuestNoteResponse:
        """deleteGuestNote

        Archives an existing guest note.

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param note_id: Note ID (required)
        :type note_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_guest_note_delete_serialize(
            guest_id=guest_id,
            note_id=note_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_guest_note_delete_with_http_info(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        note_id: Annotated[StrictStr, Field(description="Note ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteGuestNoteResponse]:
        """deleteGuestNote

        Archives an existing guest note.

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param note_id: Note ID (required)
        :type note_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_guest_note_delete_serialize(
            guest_id=guest_id,
            note_id=note_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_guest_note_delete_without_preload_content(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        note_id: Annotated[StrictStr, Field(description="Note ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteGuestNote

        Archives an existing guest note.

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param note_id: Note ID (required)
        :type note_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_guest_note_delete_serialize(
            guest_id=guest_id,
            note_id=note_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_guest_note_delete_serialize(
        self,
        guest_id,
        note_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if guest_id is not None:
            
            _query_params.append(('guestID', guest_id))
            
        if note_id is not None:
            
            _query_params.append(('noteID', note_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/deleteGuestNote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guest_get(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation Unique Identifier. Required if no guestID is provided.")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID. Required if no reservationID is provided.")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestResponse:
        """getGuest

        Returns information on a guest specified by the Reservation ID parameter

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation Unique Identifier. Required if no guestID is provided.
        :type reservation_id: str
        :param guest_id: Guest ID. Required if no reservationID is provided.
        :type guest_id: str
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_get_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_id=guest_id,
            include_guest_requirements=include_guest_requirements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guest_get_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation Unique Identifier. Required if no guestID is provided.")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID. Required if no reservationID is provided.")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestResponse]:
        """getGuest

        Returns information on a guest specified by the Reservation ID parameter

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation Unique Identifier. Required if no guestID is provided.
        :type reservation_id: str
        :param guest_id: Guest ID. Required if no reservationID is provided.
        :type guest_id: str
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_get_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_id=guest_id,
            include_guest_requirements=include_guest_requirements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guest_get_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation Unique Identifier. Required if no guestID is provided.")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID. Required if no reservationID is provided.")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuest

        Returns information on a guest specified by the Reservation ID parameter

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation Unique Identifier. Required if no guestID is provided.
        :type reservation_id: str
        :param guest_id: Guest ID. Required if no reservationID is provided.
        :type guest_id: str
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_get_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_id=guest_id,
            include_guest_requirements=include_guest_requirements,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guest_get_serialize(
        self,
        property_id,
        reservation_id,
        guest_id,
        include_guest_requirements,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if reservation_id is not None:
            
            _query_params.append(('reservationID', reservation_id))
            
        if guest_id is not None:
            
            _query_params.append(('guestID', guest_id))
            
        if include_guest_requirements is not None:
            
            _query_params.append(('includeGuestRequirements', include_guest_requirements))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guest_list_get(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        guest_first_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest First Name")] = None,
        guest_last_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Last Name")] = None,
        guest_email: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Email")] = None,
        guest_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Phone Number")] = None,
        guest_cell_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Cell Phone Number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort By parameter")] = None,
        include_guest_info: Annotated[Optional[StrictBool], Field(description="If API response should return with more of Guest's information")] = None,
        exclude_secondary_guests: Annotated[Optional[StrictBool], Field(description="If true, response only returns main guest's")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestListResponse:
        """getGuestList

        Returns a list of guests, ordered by modification date ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param guest_first_name: Filters guests result based on Guest First Name
        :type guest_first_name: str
        :param guest_last_name: Filters guests result based on Guest Last Name
        :type guest_last_name: str
        :param guest_email: Filters guests result based on Guest Email
        :type guest_email: str
        :param guest_phone: Filters guests result based on Guest Phone Number
        :type guest_phone: str
        :param guest_cell_phone: Filters guests result based on Guest Cell Phone Number
        :type guest_cell_phone: str
        :param status: Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed
        :type status: str
        :param sort_by: Sort By parameter
        :type sort_by: str
        :param include_guest_info: If API response should return with more of Guest's information
        :type include_guest_info: bool
        :param exclude_secondary_guests: If true, response only returns main guest's
        :type exclude_secondary_guests: bool
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_list_get_serialize(
            property_ids=property_ids,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            status=status,
            sort_by=sort_by,
            include_guest_info=include_guest_info,
            exclude_secondary_guests=exclude_secondary_guests,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guest_list_get_with_http_info(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        guest_first_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest First Name")] = None,
        guest_last_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Last Name")] = None,
        guest_email: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Email")] = None,
        guest_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Phone Number")] = None,
        guest_cell_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Cell Phone Number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort By parameter")] = None,
        include_guest_info: Annotated[Optional[StrictBool], Field(description="If API response should return with more of Guest's information")] = None,
        exclude_secondary_guests: Annotated[Optional[StrictBool], Field(description="If true, response only returns main guest's")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestListResponse]:
        """getGuestList

        Returns a list of guests, ordered by modification date ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param guest_first_name: Filters guests result based on Guest First Name
        :type guest_first_name: str
        :param guest_last_name: Filters guests result based on Guest Last Name
        :type guest_last_name: str
        :param guest_email: Filters guests result based on Guest Email
        :type guest_email: str
        :param guest_phone: Filters guests result based on Guest Phone Number
        :type guest_phone: str
        :param guest_cell_phone: Filters guests result based on Guest Cell Phone Number
        :type guest_cell_phone: str
        :param status: Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed
        :type status: str
        :param sort_by: Sort By parameter
        :type sort_by: str
        :param include_guest_info: If API response should return with more of Guest's information
        :type include_guest_info: bool
        :param exclude_secondary_guests: If true, response only returns main guest's
        :type exclude_secondary_guests: bool
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_list_get_serialize(
            property_ids=property_ids,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            status=status,
            sort_by=sort_by,
            include_guest_info=include_guest_info,
            exclude_secondary_guests=exclude_secondary_guests,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guest_list_get_without_preload_content(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        guest_first_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest First Name")] = None,
        guest_last_name: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Last Name")] = None,
        guest_email: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Email")] = None,
        guest_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Phone Number")] = None,
        guest_cell_phone: Annotated[Optional[StrictStr], Field(description="Filters guests result based on Guest Cell Phone Number")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort By parameter")] = None,
        include_guest_info: Annotated[Optional[StrictBool], Field(description="If API response should return with more of Guest's information")] = None,
        exclude_secondary_guests: Annotated[Optional[StrictBool], Field(description="If true, response only returns main guest's")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuestList

        Returns a list of guests, ordered by modification date ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param guest_first_name: Filters guests result based on Guest First Name
        :type guest_first_name: str
        :param guest_last_name: Filters guests result based on Guest Last Name
        :type guest_last_name: str
        :param guest_email: Filters guests result based on Guest Email
        :type guest_email: str
        :param guest_phone: Filters guests result based on Guest Phone Number
        :type guest_phone: str
        :param guest_cell_phone: Filters guests result based on Guest Cell Phone Number
        :type guest_cell_phone: str
        :param status: Reservation status <br /> If more than one, send as comma-separated values. i.e. in_progress,confirmed
        :type status: str
        :param sort_by: Sort By parameter
        :type sort_by: str
        :param include_guest_info: If API response should return with more of Guest's information
        :type include_guest_info: bool
        :param exclude_secondary_guests: If true, response only returns main guest's
        :type exclude_secondary_guests: bool
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_list_get_serialize(
            property_ids=property_ids,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            status=status,
            sort_by=sort_by,
            include_guest_info=include_guest_info,
            exclude_secondary_guests=exclude_secondary_guests,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestListResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guest_list_get_serialize(
        self,
        property_ids,
        results_from,
        results_to,
        check_in_from,
        check_in_to,
        check_out_from,
        check_out_to,
        guest_first_name,
        guest_last_name,
        guest_email,
        guest_phone,
        guest_cell_phone,
        status,
        sort_by,
        include_guest_info,
        exclude_secondary_guests,
        include_guest_requirements,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if results_from is not None:
            if isinstance(results_from, datetime):
                _query_params.append(
                    (
                        'resultsFrom',
                        results_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsFrom', results_from))
            
        if results_to is not None:
            if isinstance(results_to, datetime):
                _query_params.append(
                    (
                        'resultsTo',
                        results_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsTo', results_to))
            
        if check_in_from is not None:
            if isinstance(check_in_from, date):
                _query_params.append(
                    (
                        'checkInFrom',
                        check_in_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInFrom', check_in_from))
            
        if check_in_to is not None:
            if isinstance(check_in_to, date):
                _query_params.append(
                    (
                        'checkInTo',
                        check_in_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInTo', check_in_to))
            
        if check_out_from is not None:
            if isinstance(check_out_from, date):
                _query_params.append(
                    (
                        'checkOutFrom',
                        check_out_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutFrom', check_out_from))
            
        if check_out_to is not None:
            if isinstance(check_out_to, date):
                _query_params.append(
                    (
                        'checkOutTo',
                        check_out_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutTo', check_out_to))
            
        if guest_first_name is not None:
            
            _query_params.append(('guestFirstName', guest_first_name))
            
        if guest_last_name is not None:
            
            _query_params.append(('guestLastName', guest_last_name))
            
        if guest_email is not None:
            
            _query_params.append(('guestEmail', guest_email))
            
        if guest_phone is not None:
            
            _query_params.append(('guestPhone', guest_phone))
            
        if guest_cell_phone is not None:
            
            _query_params.append(('guestCellPhone', guest_cell_phone))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if sort_by is not None:
            
            _query_params.append(('sortBy', sort_by))
            
        if include_guest_info is not None:
            
            _query_params.append(('includeGuestInfo', include_guest_info))
            
        if exclude_secondary_guests is not None:
            
            _query_params.append(('excludeSecondaryGuests', exclude_secondary_guests))
            
        if include_guest_requirements is not None:
            
            _query_params.append(('includeGuestRequirements', include_guest_requirements))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuestList',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guest_notes_get(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestNotesResponse:
        """getGuestNotes

        Retrieves a guest notes

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_notes_get_serialize(
            guest_id=guest_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guest_notes_get_with_http_info(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestNotesResponse]:
        """getGuestNotes

        Retrieves a guest notes

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_notes_get_serialize(
            guest_id=guest_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guest_notes_get_without_preload_content(
        self,
        guest_id: Annotated[StrictStr, Field(description="Guest ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuestNotes

        Retrieves a guest notes

        :param guest_id: Guest ID (required)
        :type guest_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guest_notes_get_serialize(
            guest_id=guest_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guest_notes_get_serialize(
        self,
        guest_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if guest_id is not None:
            
            _query_params.append(('guestID', guest_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuestNotes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guests_by_filter_get(
        self,
        status: Annotated[StrictStr, Field(description="Current guest status")],
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        reservation_id: Optional[StrictStr] = None,
        room_id: Optional[StrictStr] = None,
        guest_name: Optional[StrictStr] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestsByFilterResponse:
        """getGuestsByFilter

        Returns a list of guests matching the selected parameters ### Group account support

        :param status: Current guest status (required)
        :type status: str
        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param reservation_id: 
        :type reservation_id: str
        :param room_id: 
        :type room_id: str
        :param guest_name: 
        :type guest_name: str
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_filter_get_serialize(
            status=status,
            property_ids=property_ids,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_name=guest_name,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByFilterResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guests_by_filter_get_with_http_info(
        self,
        status: Annotated[StrictStr, Field(description="Current guest status")],
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        reservation_id: Optional[StrictStr] = None,
        room_id: Optional[StrictStr] = None,
        guest_name: Optional[StrictStr] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestsByFilterResponse]:
        """getGuestsByFilter

        Returns a list of guests matching the selected parameters ### Group account support

        :param status: Current guest status (required)
        :type status: str
        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param reservation_id: 
        :type reservation_id: str
        :param room_id: 
        :type room_id: str
        :param guest_name: 
        :type guest_name: str
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_filter_get_serialize(
            status=status,
            property_ids=property_ids,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_name=guest_name,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByFilterResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guests_by_filter_get_without_preload_content(
        self,
        status: Annotated[StrictStr, Field(description="Current guest status")],
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        reservation_id: Optional[StrictStr] = None,
        room_id: Optional[StrictStr] = None,
        guest_name: Optional[StrictStr] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuestsByFilter

        Returns a list of guests matching the selected parameters ### Group account support

        :param status: Current guest status (required)
        :type status: str
        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param reservation_id: 
        :type reservation_id: str
        :param room_id: 
        :type room_id: str
        :param guest_name: 
        :type guest_name: str
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_filter_get_serialize(
            status=status,
            property_ids=property_ids,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_name=guest_name,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByFilterResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guests_by_filter_get_serialize(
        self,
        status,
        property_ids,
        reservation_id,
        room_id,
        guest_name,
        check_in_from,
        check_in_to,
        check_out_from,
        check_out_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if reservation_id is not None:
            
            _query_params.append(('reservationID', reservation_id))
            
        if room_id is not None:
            
            _query_params.append(('roomID', room_id))
            
        if guest_name is not None:
            
            _query_params.append(('guestName', guest_name))
            
        if check_in_from is not None:
            if isinstance(check_in_from, date):
                _query_params.append(
                    (
                        'checkInFrom',
                        check_in_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInFrom', check_in_from))
            
        if check_in_to is not None:
            if isinstance(check_in_to, date):
                _query_params.append(
                    (
                        'checkInTo',
                        check_in_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInTo', check_in_to))
            
        if check_out_from is not None:
            if isinstance(check_out_from, date):
                _query_params.append(
                    (
                        'checkOutFrom',
                        check_out_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutFrom', check_out_from))
            
        if check_out_to is not None:
            if isinstance(check_out_to, date):
                _query_params.append(
                    (
                        'checkOutTo',
                        check_out_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutTo', check_out_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuestsByFilter',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guests_by_status_get(
        self,
        status: Annotated[StrictStr, Field(description="Guest status during the period")],
        property_id: Annotated[Optional[StrictStr], Field(description="ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestsByStatusResponse:
        """getGuestsByStatus

        Returns a list of guests in the current status (Not Checked In, In House, Checked Out or Cancelled), sorted by modification date. If no date range is passed, it returns all guests with the selected status. ### Group account support

        :param status: Guest status during the period (required)
        :type status: str
        :param property_id: ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.
        :type property_id: str
        :param results_from: Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value
        :type results_from: datetime
        :param results_to: Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value
        :type results_to: datetime
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_status_get_serialize(
            status=status,
            property_id=property_id,
            results_from=results_from,
            results_to=results_to,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guests_by_status_get_with_http_info(
        self,
        status: Annotated[StrictStr, Field(description="Guest status during the period")],
        property_id: Annotated[Optional[StrictStr], Field(description="ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestsByStatusResponse]:
        """getGuestsByStatus

        Returns a list of guests in the current status (Not Checked In, In House, Checked Out or Cancelled), sorted by modification date. If no date range is passed, it returns all guests with the selected status. ### Group account support

        :param status: Guest status during the period (required)
        :type status: str
        :param property_id: ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.
        :type property_id: str
        :param results_from: Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value
        :type results_from: datetime
        :param results_to: Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value
        :type results_to: datetime
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_status_get_serialize(
            status=status,
            property_id=property_id,
            results_from=results_from,
            results_to=results_to,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guests_by_status_get_without_preload_content(
        self,
        status: Annotated[StrictStr, Field(description="Guest status during the period")],
        property_id: Annotated[Optional[StrictStr], Field(description="ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuestsByStatus

        Returns a list of guests in the current status (Not Checked In, In House, Checked Out or Cancelled), sorted by modification date. If no date range is passed, it returns all guests with the selected status. ### Group account support

        :param status: Guest status during the period (required)
        :type status: str
        :param property_id: ID for the properties to be queried (comma-separated, i.e. 37,345,89).<br /> It can be omitted if the API key is single-property, or to get results from all properties on an association.
        :type property_id: str
        :param results_from: Used to filter guests result, and returns only the guests that were last modified starting on \"resultsFrom\" value
        :type results_from: datetime
        :param results_to: Used to filter guests result, and returns only the guests that were last modified ending on \"resultsTo\" value
        :type results_to: datetime
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_by_status_get_serialize(
            status=status,
            property_id=property_id,
            results_from=results_from,
            results_to=results_to,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsByStatusResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guests_by_status_get_serialize(
        self,
        status,
        property_id,
        results_from,
        results_to,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if results_from is not None:
            if isinstance(results_from, datetime):
                _query_params.append(
                    (
                        'resultsFrom',
                        results_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsFrom', results_from))
            
        if results_to is not None:
            if isinstance(results_to, datetime):
                _query_params.append(
                    (
                        'resultsTo',
                        results_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsTo', results_to))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuestsByStatus',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_guests_modified_get(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        in_house: Annotated[Optional[StrictBool], Field(description="When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGuestsModifiedResponse:
        """getGuestsModified

        Returns a list of guests based on their modification date. Note that when a guest checks in or checks out of a room, their record is modified at that time. If no date range is passed, only the records for the current day are returned. Also note that if the guest is assigned to multiple rooms, it will result in multiple records. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param in_house: When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.
        :type in_house: bool
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_modified_get_serialize(
            property_ids=property_ids,
            in_house=in_house,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsModifiedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_guests_modified_get_with_http_info(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        in_house: Annotated[Optional[StrictBool], Field(description="When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGuestsModifiedResponse]:
        """getGuestsModified

        Returns a list of guests based on their modification date. Note that when a guest checks in or checks out of a room, their record is modified at that time. If no date range is passed, only the records for the current day are returned. Also note that if the guest is assigned to multiple rooms, it will result in multiple records. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param in_house: When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.
        :type in_house: bool
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_modified_get_serialize(
            property_ids=property_ids,
            in_house=in_house,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsModifiedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_guests_modified_get_without_preload_content(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        in_house: Annotated[Optional[StrictBool], Field(description="When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.")] = None,
        results_from: Annotated[Optional[datetime], Field(description="Inferior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        results_to: Annotated[Optional[datetime], Field(description="Superior limit datetime, used to filter guests result, based on latest creation/modification date")] = None,
        check_in_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range starting on this date")] = None,
        check_in_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-in date range ending on this date")] = None,
        check_out_from: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range starting on this date")] = None,
        check_out_to: Annotated[Optional[date], Field(description="Filters guests result to return only guests with check-out date range ending on this date")] = None,
        include_guest_requirements: Annotated[Optional[StrictBool], Field(description="Includes guest requirements data in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Results page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Results page size. Max = 100")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGuestsModified

        Returns a list of guests based on their modification date. Note that when a guest checks in or checks out of a room, their record is modified at that time. If no date range is passed, only the records for the current day are returned. Also note that if the guest is assigned to multiple rooms, it will result in multiple records. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param in_house: When used, and true, will return guests only currently in-house. If the guest checks-out, it will not appear on the results.
        :type in_house: bool
        :param results_from: Inferior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_from: datetime
        :param results_to: Superior limit datetime, used to filter guests result, based on latest creation/modification date
        :type results_to: datetime
        :param check_in_from: Filters guests result to return only guests with check-in date range starting on this date
        :type check_in_from: date
        :param check_in_to: Filters guests result to return only guests with check-in date range ending on this date
        :type check_in_to: date
        :param check_out_from: Filters guests result to return only guests with check-out date range starting on this date
        :type check_out_from: date
        :param check_out_to: Filters guests result to return only guests with check-out date range ending on this date
        :type check_out_to: date
        :param include_guest_requirements: Includes guest requirements data in the response
        :type include_guest_requirements: bool
        :param page_number: Results page number
        :type page_number: int
        :param page_size: Results page size. Max = 100
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_guests_modified_get_serialize(
            property_ids=property_ids,
            in_house=in_house,
            results_from=results_from,
            results_to=results_to,
            check_in_from=check_in_from,
            check_in_to=check_in_to,
            check_out_from=check_out_from,
            check_out_to=check_out_to,
            include_guest_requirements=include_guest_requirements,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGuestsModifiedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_guests_modified_get_serialize(
        self,
        property_ids,
        in_house,
        results_from,
        results_to,
        check_in_from,
        check_in_to,
        check_out_from,
        check_out_to,
        include_guest_requirements,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if in_house is not None:
            
            _query_params.append(('inHouse', in_house))
            
        if results_from is not None:
            if isinstance(results_from, datetime):
                _query_params.append(
                    (
                        'resultsFrom',
                        results_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsFrom', results_from))
            
        if results_to is not None:
            if isinstance(results_to, datetime):
                _query_params.append(
                    (
                        'resultsTo',
                        results_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resultsTo', results_to))
            
        if check_in_from is not None:
            if isinstance(check_in_from, date):
                _query_params.append(
                    (
                        'checkInFrom',
                        check_in_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInFrom', check_in_from))
            
        if check_in_to is not None:
            if isinstance(check_in_to, date):
                _query_params.append(
                    (
                        'checkInTo',
                        check_in_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkInTo', check_in_to))
            
        if check_out_from is not None:
            if isinstance(check_out_from, date):
                _query_params.append(
                    (
                        'checkOutFrom',
                        check_out_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutFrom', check_out_from))
            
        if check_out_to is not None:
            if isinstance(check_out_to, date):
                _query_params.append(
                    (
                        'checkOutTo',
                        check_out_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('checkOutTo', check_out_to))
            
        if include_guest_requirements is not None:
            
            _query_params.append(('includeGuestRequirements', include_guest_requirements))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGuestsModified',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_guest_document_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGuestDocumentResponse:
        """postGuestDocument

        Attaches a document to a guest

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_document_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestDocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_guest_document_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGuestDocumentResponse]:
        """postGuestDocument

        Attaches a document to a guest

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_document_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestDocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_guest_document_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGuestDocument

        Attaches a document to a guest

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.pdf, *.rtf, *.doc, *.docx, *.txt, *.jpg, *.jpeg, *.png, *.gif, *.csv, *.xls, *.xlsx, *.xml</code><br/> Allowed max file size: 100MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_document_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestDocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_guest_document_post_serialize(
        self,
        property_id,
        guest_id,
        file,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if guest_id is not None:
            _form_params.append(('guestID', guest_id))
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGuestDocument',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_guest_note_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User ID Identify the actual user that is posting the note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGuestNoteResponse:
        """postGuestNote

        Adds a guest note

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param user_id: User ID Identify the actual user that is posting the note
        :type user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_note_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_note=guest_note,
            user_id=user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_guest_note_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User ID Identify the actual user that is posting the note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGuestNoteResponse]:
        """postGuestNote

        Adds a guest note

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param user_id: User ID Identify the actual user that is posting the note
        :type user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_note_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_note=guest_note,
            user_id=user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_guest_note_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="User ID Identify the actual user that is posting the note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGuestNote

        Adds a guest note

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param user_id: User ID Identify the actual user that is posting the note
        :type user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_note_post_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_note=guest_note,
            user_id=user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_guest_note_post_serialize(
        self,
        property_id,
        guest_id,
        guest_note,
        user_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if guest_id is not None:
            _form_params.append(('guestID', guest_id))
        if guest_note is not None:
            _form_params.append(('guestNote', guest_note))
        if user_id is not None:
            _form_params.append(('userID', user_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGuestNote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_guest_photo_post(
        self,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGuestPhotoResponse:
        """postGuestPhoto

        Attaches a photo to a guest

        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_photo_post_serialize(
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestPhotoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_guest_photo_post_with_http_info(
        self,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGuestPhotoResponse]:
        """postGuestPhoto

        Attaches a photo to a guest

        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_photo_post_serialize(
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestPhotoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_guest_photo_post_without_preload_content(
        self,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest Unique Identifier")] = None,
        file: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGuestPhoto

        Attaches a photo to a guest

        :param guest_id: Guest Unique Identifier
        :type guest_id: str
        :param file: Form-based File Upload<br/> Allowed file types: <code>*.jpg, *.jpeg, *.png, *.gif</code><br/> Allowed max file size: 15MB
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_photo_post_serialize(
            guest_id=guest_id,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestPhotoResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_guest_photo_post_serialize(
        self,
        guest_id,
        file,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if guest_id is not None:
            _form_params.append(('guestID', guest_id))
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGuestPhoto',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_guest_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        custom_fields: Annotated[Optional[List[PostGuestRequestCustomFieldsInner]], Field(description="Only guest custom fields are allowed.")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to the Guest")] = None,
        reservation_note: Annotated[Optional[StrictStr], Field(description="Note to be added only to the Reservation.")] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGuestResponse:
        """postGuest

        Adds a guest to reservation as an additional guest.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param custom_fields: Only guest custom fields are allowed.
        :type custom_fields: List[PostGuestRequestCustomFieldsInner]
        :param guest_note: Note to be added to the Guest
        :type guest_note: str
        :param reservation_note: Note to be added only to the Reservation.
        :type reservation_note: str
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            custom_fields=custom_fields,
            guest_note=guest_note,
            reservation_note=reservation_note,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_guest_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        custom_fields: Annotated[Optional[List[PostGuestRequestCustomFieldsInner]], Field(description="Only guest custom fields are allowed.")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to the Guest")] = None,
        reservation_note: Annotated[Optional[StrictStr], Field(description="Note to be added only to the Reservation.")] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGuestResponse]:
        """postGuest

        Adds a guest to reservation as an additional guest.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param custom_fields: Only guest custom fields are allowed.
        :type custom_fields: List[PostGuestRequestCustomFieldsInner]
        :param guest_note: Note to be added to the Guest
        :type guest_note: str
        :param reservation_note: Note to be added only to the Reservation.
        :type reservation_note: str
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            custom_fields=custom_fields,
            guest_note=guest_note,
            reservation_note=reservation_note,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_guest_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        custom_fields: Annotated[Optional[List[PostGuestRequestCustomFieldsInner]], Field(description="Only guest custom fields are allowed.")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to the Guest")] = None,
        reservation_note: Annotated[Optional[StrictStr], Field(description="Note to be added only to the Reservation.")] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGuest

        Adds a guest to reservation as an additional guest.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: Document Type<br /> dni - Identity card<br /> nie - Residence permit<br /> na - non selection<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: Valid ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param custom_fields: Only guest custom fields are allowed.
        :type custom_fields: List[PostGuestRequestCustomFieldsInner]
        :param guest_note: Note to be added to the Guest
        :type guest_note: str
        :param reservation_note: Note to be added only to the Reservation.
        :type reservation_note: str
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guest_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            custom_fields=custom_fields,
            guest_note=guest_note,
            reservation_note=reservation_note,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_guest_post_serialize(
        self,
        property_id,
        reservation_id,
        guest_first_name,
        guest_last_name,
        guest_gender,
        guest_email,
        guest_phone,
        guest_cell_phone,
        guest_address1,
        guest_address2,
        guest_city,
        guest_country,
        guest_state,
        guest_zip,
        guest_birth_date,
        guest_document_type,
        guest_document_number,
        guest_document_issue_date,
        guest_document_issuing_country,
        guest_document_expiration_date,
        guest_requirements,
        custom_fields,
        guest_note,
        reservation_note,
        guest_company_name,
        guest_company_tax_id,
        guest_tax_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'guestRequirements': 'csv',
            'customFields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if reservation_id is not None:
            _form_params.append(('reservationID', reservation_id))
        if guest_first_name is not None:
            _form_params.append(('guestFirstName', guest_first_name))
        if guest_last_name is not None:
            _form_params.append(('guestLastName', guest_last_name))
        if guest_gender is not None:
            _form_params.append(('guestGender', guest_gender))
        if guest_email is not None:
            _form_params.append(('guestEmail', guest_email))
        if guest_phone is not None:
            _form_params.append(('guestPhone', guest_phone))
        if guest_cell_phone is not None:
            _form_params.append(('guestCellPhone', guest_cell_phone))
        if guest_address1 is not None:
            _form_params.append(('guestAddress1', guest_address1))
        if guest_address2 is not None:
            _form_params.append(('guestAddress2', guest_address2))
        if guest_city is not None:
            _form_params.append(('guestCity', guest_city))
        if guest_country is not None:
            _form_params.append(('guestCountry', guest_country))
        if guest_state is not None:
            _form_params.append(('guestState', guest_state))
        if guest_zip is not None:
            _form_params.append(('guestZip', guest_zip))
        if guest_birth_date is not None:
            _form_params.append(('guestBirthDate', guest_birth_date))
        if guest_document_type is not None:
            _form_params.append(('guestDocumentType', guest_document_type))
        if guest_document_number is not None:
            _form_params.append(('guestDocumentNumber', guest_document_number))
        if guest_document_issue_date is not None:
            _form_params.append(('guestDocumentIssueDate', guest_document_issue_date))
        if guest_document_issuing_country is not None:
            _form_params.append(('guestDocumentIssuingCountry', guest_document_issuing_country))
        if guest_document_expiration_date is not None:
            _form_params.append(('guestDocumentExpirationDate', guest_document_expiration_date))
        if guest_requirements is not None:
            _form_params.append(('guestRequirements', guest_requirements))
        if custom_fields is not None:
            _form_params.append(('customFields', custom_fields))
        if guest_note is not None:
            _form_params.append(('guestNote', guest_note))
        if reservation_note is not None:
            _form_params.append(('reservationNote', reservation_note))
        if guest_company_name is not None:
            _form_params.append(('guestCompanyName', guest_company_name))
        if guest_company_tax_id is not None:
            _form_params.append(('guestCompanyTaxId', guest_company_tax_id))
        if guest_tax_id is not None:
            _form_params.append(('guestTaxId', guest_tax_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGuest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_guests_to_room_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        room_id: Annotated[Optional[StrictInt], Field(description="Room ID already assigned to Reservation")] = None,
        guest_ids: Annotated[Optional[StrictStr], Field(description="Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        remove_guest_ids: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.")] = None,
        remove_guest_ids_from_room: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.")] = None,
        remove_all: Annotated[Optional[StrictBool], Field(description="If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGuestsToRoomResponse:
        """postGuestsToRoom

        Assigns guest(s) to a room in a reservation and adds these guests as additional guests.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param room_id: Room ID already assigned to Reservation
        :type room_id: int
        :param guest_ids: Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89
        :type guest_ids: str
        :param remove_guest_ids: If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.
        :type remove_guest_ids: str
        :param remove_guest_ids_from_room: If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.
        :type remove_guest_ids_from_room: str
        :param remove_all: If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.
        :type remove_all: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guests_to_room_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_ids=guest_ids,
            remove_guest_ids=remove_guest_ids,
            remove_guest_ids_from_room=remove_guest_ids_from_room,
            remove_all=remove_all,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestsToRoomResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_guests_to_room_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        room_id: Annotated[Optional[StrictInt], Field(description="Room ID already assigned to Reservation")] = None,
        guest_ids: Annotated[Optional[StrictStr], Field(description="Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        remove_guest_ids: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.")] = None,
        remove_guest_ids_from_room: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.")] = None,
        remove_all: Annotated[Optional[StrictBool], Field(description="If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGuestsToRoomResponse]:
        """postGuestsToRoom

        Assigns guest(s) to a room in a reservation and adds these guests as additional guests.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param room_id: Room ID already assigned to Reservation
        :type room_id: int
        :param guest_ids: Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89
        :type guest_ids: str
        :param remove_guest_ids: If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.
        :type remove_guest_ids: str
        :param remove_guest_ids_from_room: If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.
        :type remove_guest_ids_from_room: str
        :param remove_all: If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.
        :type remove_all: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guests_to_room_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_ids=guest_ids,
            remove_guest_ids=remove_guest_ids,
            remove_guest_ids_from_room=remove_guest_ids_from_room,
            remove_all=remove_all,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestsToRoomResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_guests_to_room_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation ID")] = None,
        room_id: Annotated[Optional[StrictInt], Field(description="Room ID already assigned to Reservation")] = None,
        guest_ids: Annotated[Optional[StrictStr], Field(description="Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        remove_guest_ids: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.")] = None,
        remove_guest_ids_from_room: Annotated[Optional[StrictStr], Field(description="If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.")] = None,
        remove_all: Annotated[Optional[StrictBool], Field(description="If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGuestsToRoom

        Assigns guest(s) to a room in a reservation and adds these guests as additional guests.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation ID
        :type reservation_id: str
        :param room_id: Room ID already assigned to Reservation
        :type room_id: int
        :param guest_ids: Guest ID(s) to be assigned to room. If more than one, send as comma-separated, i.e. 37,345,89
        :type guest_ids: str
        :param remove_guest_ids: If sent, will remove guest ID(s) before adding guests sent in guestIDs parameter. If more than one, send as comma-separated, i.e. 37,345,89. Main Guest is never removed.
        :type remove_guest_ids: str
        :param remove_guest_ids_from_room: If sent, will remove guest ID(s) only from the specified Room ID(s). If more than one, send as comma-separated, i.e. 37,345,89. Incompatible with removeAll parameter.
        :type remove_guest_ids_from_room: str
        :param remove_all: If set true, will remove all guests assigned to roomID before assigning guests sent in guestIDs parameter. Main Guest is never removed.
        :type remove_all: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_guests_to_room_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            room_id=room_id,
            guest_ids=guest_ids,
            remove_guest_ids=remove_guest_ids,
            remove_guest_ids_from_room=remove_guest_ids_from_room,
            remove_all=remove_all,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGuestsToRoomResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_guests_to_room_post_serialize(
        self,
        property_id,
        reservation_id,
        room_id,
        guest_ids,
        remove_guest_ids,
        remove_guest_ids_from_room,
        remove_all,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if reservation_id is not None:
            _form_params.append(('reservationID', reservation_id))
        if room_id is not None:
            _form_params.append(('roomID', room_id))
        if guest_ids is not None:
            _form_params.append(('guestIDs', guest_ids))
        if remove_guest_ids is not None:
            _form_params.append(('removeGuestIDs', remove_guest_ids))
        if remove_guest_ids_from_room is not None:
            _form_params.append(('removeGuestIDsFromRoom', remove_guest_ids_from_room))
        if remove_all is not None:
            _form_params.append(('removeAll', remove_all))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGuestsToRoom',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_guest_note_put(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PutGuestNoteResponse:
        """putGuestNote

        Updates an existing guest note.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param note_id: Note ID
        :type note_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_note_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            note_id=note_id,
            guest_note=guest_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_guest_note_put_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PutGuestNoteResponse]:
        """putGuestNote

        Updates an existing guest note.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param note_id: Note ID
        :type note_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_note_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            note_id=note_id,
            guest_note=guest_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_guest_note_put_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Guest ID")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note ID")] = None,
        guest_note: Annotated[Optional[StrictStr], Field(description="Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """putGuestNote

        Updates an existing guest note.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Guest ID
        :type guest_id: str
        :param note_id: Note ID
        :type note_id: str
        :param guest_note: Note to be added to guest profile. It's strictly forbidden to send unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_note_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            note_id=note_id,
            guest_note=guest_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_guest_note_put_serialize(
        self,
        property_id,
        guest_id,
        note_id,
        guest_note,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if guest_id is not None:
            _form_params.append(('guestID', guest_id))
        if note_id is not None:
            _form_params.append(('noteID', note_id))
        if guest_note is not None:
            _form_params.append(('guestNote', guest_note))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/putGuestNote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_guest_put(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Valid Guest ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        guest_custom_fields: Optional[List[PutGuestRequestGuestCustomFieldsInner]] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PutGuestResponse:
        """putGuest

        Updates an existing guest with information provided. At least one information field is required for this call.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Valid Guest ID
        :type guest_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param guest_custom_fields: 
        :type guest_custom_fields: List[PutGuestRequestGuestCustomFieldsInner]
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            guest_custom_fields=guest_custom_fields,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_guest_put_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Valid Guest ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        guest_custom_fields: Optional[List[PutGuestRequestGuestCustomFieldsInner]] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PutGuestResponse]:
        """putGuest

        Updates an existing guest with information provided. At least one information field is required for this call.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Valid Guest ID
        :type guest_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param guest_custom_fields: 
        :type guest_custom_fields: List[PutGuestRequestGuestCustomFieldsInner]
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            guest_custom_fields=guest_custom_fields,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_guest_put_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        guest_id: Annotated[Optional[StrictStr], Field(description="Valid Guest ID")] = None,
        guest_first_name: Optional[StrictStr] = None,
        guest_last_name: Optional[StrictStr] = None,
        guest_gender: Optional[StrictStr] = None,
        guest_email: Optional[StrictStr] = None,
        guest_phone: Optional[StrictStr] = None,
        guest_cell_phone: Optional[StrictStr] = None,
        guest_address1: Optional[StrictStr] = None,
        guest_address2: Optional[StrictStr] = None,
        guest_city: Optional[StrictStr] = None,
        guest_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters)")] = None,
        guest_state: Optional[StrictStr] = None,
        guest_zip: Optional[StrictStr] = None,
        guest_birth_date: Optional[date] = None,
        guest_document_type: Annotated[Optional[StrictStr], Field(description="It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />")] = None,
        guest_document_number: Annotated[Optional[StrictStr], Field(description="(mandatory when guestDocumentType is sent)")] = None,
        guest_document_issue_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI)")] = None,
        guest_document_issuing_country: Annotated[Optional[StrictStr], Field(description="ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)")] = None,
        guest_document_expiration_date: Annotated[Optional[date], Field(description="(mandatory when guestDocumentType is sent and is not DNI or NIE)")] = None,
        guest_requirements: Annotated[Optional[List[Dict[str, Any]]], Field(description="Object with guest requirements information.")] = None,
        guest_custom_fields: Optional[List[PutGuestRequestGuestCustomFieldsInner]] = None,
        guest_company_name: Annotated[Optional[StrictStr], Field(description="Guest company name")] = None,
        guest_company_tax_id: Annotated[Optional[StrictStr], Field(description="Guest company tax ID")] = None,
        guest_tax_id: Annotated[Optional[StrictStr], Field(description="Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """putGuest

        Updates an existing guest with information provided. At least one information field is required for this call.

        :param property_id: Property ID
        :type property_id: str
        :param guest_id: Valid Guest ID
        :type guest_id: str
        :param guest_first_name: 
        :type guest_first_name: str
        :param guest_last_name: 
        :type guest_last_name: str
        :param guest_gender: 
        :type guest_gender: str
        :param guest_email: 
        :type guest_email: str
        :param guest_phone: 
        :type guest_phone: str
        :param guest_cell_phone: 
        :type guest_cell_phone: str
        :param guest_address1: 
        :type guest_address1: str
        :param guest_address2: 
        :type guest_address2: str
        :param guest_city: 
        :type guest_city: str
        :param guest_country: ISO-Code for Country (2 characters)
        :type guest_country: str
        :param guest_state: 
        :type guest_state: str
        :param guest_zip: 
        :type guest_zip: str
        :param guest_birth_date: 
        :type guest_birth_date: date
        :param guest_document_type: It is mandatory to send all document information<br /> na - non selection<br /> dni - Identity card<br /> nie - Residence permit<br />
        :type guest_document_type: str
        :param guest_document_number: (mandatory when guestDocumentType is sent)
        :type guest_document_number: str
        :param guest_document_issue_date: (mandatory when guestDocumentType is sent and is not DNI)
        :type guest_document_issue_date: date
        :param guest_document_issuing_country: ISO-Code for Country (2 characters) (mandatory when guestDocumentType is sent)
        :type guest_document_issuing_country: str
        :param guest_document_expiration_date: (mandatory when guestDocumentType is sent and is not DNI or NIE)
        :type guest_document_expiration_date: date
        :param guest_requirements: Object with guest requirements information.
        :type guest_requirements: List[object]
        :param guest_custom_fields: 
        :type guest_custom_fields: List[PutGuestRequestGuestCustomFieldsInner]
        :param guest_company_name: Guest company name
        :type guest_company_name: str
        :param guest_company_tax_id: Guest company tax ID
        :type guest_company_tax_id: str
        :param guest_tax_id: Guest tax ID unencrypted payment data through the API. Numeric values longer than 12 characters and considered valid by Luhn's algorithm will be rejected.
        :type guest_tax_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_guest_put_serialize(
            property_id=property_id,
            guest_id=guest_id,
            guest_first_name=guest_first_name,
            guest_last_name=guest_last_name,
            guest_gender=guest_gender,
            guest_email=guest_email,
            guest_phone=guest_phone,
            guest_cell_phone=guest_cell_phone,
            guest_address1=guest_address1,
            guest_address2=guest_address2,
            guest_city=guest_city,
            guest_country=guest_country,
            guest_state=guest_state,
            guest_zip=guest_zip,
            guest_birth_date=guest_birth_date,
            guest_document_type=guest_document_type,
            guest_document_number=guest_document_number,
            guest_document_issue_date=guest_document_issue_date,
            guest_document_issuing_country=guest_document_issuing_country,
            guest_document_expiration_date=guest_document_expiration_date,
            guest_requirements=guest_requirements,
            guest_custom_fields=guest_custom_fields,
            guest_company_name=guest_company_name,
            guest_company_tax_id=guest_company_tax_id,
            guest_tax_id=guest_tax_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutGuestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_guest_put_serialize(
        self,
        property_id,
        guest_id,
        guest_first_name,
        guest_last_name,
        guest_gender,
        guest_email,
        guest_phone,
        guest_cell_phone,
        guest_address1,
        guest_address2,
        guest_city,
        guest_country,
        guest_state,
        guest_zip,
        guest_birth_date,
        guest_document_type,
        guest_document_number,
        guest_document_issue_date,
        guest_document_issuing_country,
        guest_document_expiration_date,
        guest_requirements,
        guest_custom_fields,
        guest_company_name,
        guest_company_tax_id,
        guest_tax_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'guestRequirements': 'csv',
            'guestCustomFields': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if guest_id is not None:
            _form_params.append(('guestID', guest_id))
        if guest_first_name is not None:
            _form_params.append(('guestFirstName', guest_first_name))
        if guest_last_name is not None:
            _form_params.append(('guestLastName', guest_last_name))
        if guest_gender is not None:
            _form_params.append(('guestGender', guest_gender))
        if guest_email is not None:
            _form_params.append(('guestEmail', guest_email))
        if guest_phone is not None:
            _form_params.append(('guestPhone', guest_phone))
        if guest_cell_phone is not None:
            _form_params.append(('guestCellPhone', guest_cell_phone))
        if guest_address1 is not None:
            _form_params.append(('guestAddress1', guest_address1))
        if guest_address2 is not None:
            _form_params.append(('guestAddress2', guest_address2))
        if guest_city is not None:
            _form_params.append(('guestCity', guest_city))
        if guest_country is not None:
            _form_params.append(('guestCountry', guest_country))
        if guest_state is not None:
            _form_params.append(('guestState', guest_state))
        if guest_zip is not None:
            _form_params.append(('guestZip', guest_zip))
        if guest_birth_date is not None:
            _form_params.append(('guestBirthDate', guest_birth_date))
        if guest_document_type is not None:
            _form_params.append(('guestDocumentType', guest_document_type))
        if guest_document_number is not None:
            _form_params.append(('guestDocumentNumber', guest_document_number))
        if guest_document_issue_date is not None:
            _form_params.append(('guestDocumentIssueDate', guest_document_issue_date))
        if guest_document_issuing_country is not None:
            _form_params.append(('guestDocumentIssuingCountry', guest_document_issuing_country))
        if guest_document_expiration_date is not None:
            _form_params.append(('guestDocumentExpirationDate', guest_document_expiration_date))
        if guest_requirements is not None:
            _form_params.append(('guestRequirements', guest_requirements))
        if guest_custom_fields is not None:
            _form_params.append(('guestCustomFields', guest_custom_fields))
        if guest_company_name is not None:
            _form_params.append(('guestCompanyName', guest_company_name))
        if guest_company_tax_id is not None:
            _form_params.append(('guestCompanyTaxId', guest_company_tax_id))
        if guest_tax_id is not None:
            _form_params.append(('guestTaxId', guest_tax_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/putGuest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



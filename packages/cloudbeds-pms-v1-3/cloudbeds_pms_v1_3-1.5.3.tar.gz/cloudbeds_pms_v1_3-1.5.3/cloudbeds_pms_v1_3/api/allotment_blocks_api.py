# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from cloudbeds_pms_v1_3.models.get_allotment_blocks_response import GetAllotmentBlocksResponse
from cloudbeds_pms_v1_3.models.get_list_allotment_block_notes_response import GetListAllotmentBlockNotesResponse
from cloudbeds_pms_v1_3.models.post_create_allotment_block_notes_response import PostCreateAllotmentBlockNotesResponse
from cloudbeds_pms_v1_3.models.post_create_allotment_block_request_allotment_intervals_inner import PostCreateAllotmentBlockRequestAllotmentIntervalsInner
from cloudbeds_pms_v1_3.models.post_create_allotment_block_request_auto_release import PostCreateAllotmentBlockRequestAutoRelease
from cloudbeds_pms_v1_3.models.post_create_allotment_block_response import PostCreateAllotmentBlockResponse
from cloudbeds_pms_v1_3.models.post_delete_allotment_block_response import PostDeleteAllotmentBlockResponse
from cloudbeds_pms_v1_3.models.post_update_allotment_block_notes_response import PostUpdateAllotmentBlockNotesResponse
from cloudbeds_pms_v1_3.models.post_update_allotment_block_request_allotment_intervals_inner import PostUpdateAllotmentBlockRequestAllotmentIntervalsInner
from cloudbeds_pms_v1_3.models.post_update_allotment_block_request_auto_release import PostUpdateAllotmentBlockRequestAutoRelease
from cloudbeds_pms_v1_3.models.post_update_allotment_block_response import PostUpdateAllotmentBlockResponse

from cloudbeds_pms_v1_3.api_client import ApiClient, RequestSerialized
from cloudbeds_pms_v1_3.api_response import ApiResponse
from cloudbeds_pms_v1_3.rest import RESTResponseType


class AllotmentBlocksApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_allotment_block_notes_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostCreateAllotmentBlockNotesResponse:
        """createAllotmentBlockNotes

        Add a note to an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param text: Note's text
        :type text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            text=text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_allotment_block_notes_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostCreateAllotmentBlockNotesResponse]:
        """createAllotmentBlockNotes

        Add a note to an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param text: Note's text
        :type text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            text=text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_allotment_block_notes_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """createAllotmentBlockNotes

        Add a note to an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param text: Note's text
        :type text: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            text=text,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_allotment_block_notes_post_serialize(
        self,
        property_id,
        allotment_block_code,
        text,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if allotment_block_code is not None:
            _form_params.append(('allotmentBlockCode', allotment_block_code))
        if text is not None:
            _form_params.append(('text', text))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/createAllotmentBlockNotes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_allotment_block_post(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="The unique identifier of the group profile the allotment block should be created")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="The rate type for the associated intervals")] = None,
        rate_plan_id: Annotated[Optional[StrictStr], Field(description="The rate plan ID. Required if rateType is \\\"rate_plan\\\".")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        auto_release: Optional[PostCreateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostCreateAllotmentBlockResponse:
        """createAllotmentBlock

        Retreive allotment blocks @apiQuery {Integer} propertyID Property ID

        :param group_code: The unique identifier of the group profile the allotment block should be created
        :type group_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param rate_type: The rate type for the associated intervals
        :type rate_type: str
        :param rate_plan_id: The rate plan ID. Required if rateType is \\\"rate_plan\\\".
        :type rate_plan_id: str
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param allow_overbooking: If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param auto_release:
        :type auto_release: PostCreateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_post_serialize(
            group_code=group_code,
            allotment_block_name=allotment_block_name,
            rate_type=rate_type,
            rate_plan_id=rate_plan_id,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            allow_overbooking=allow_overbooking,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_allotment_block_post_with_http_info(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="The unique identifier of the group profile the allotment block should be created")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="The rate type for the associated intervals")] = None,
        rate_plan_id: Annotated[Optional[StrictStr], Field(description="The rate plan ID. Required if rateType is \\\"rate_plan\\\".")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        auto_release: Optional[PostCreateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostCreateAllotmentBlockResponse]:
        """createAllotmentBlock

        Retreive allotment blocks @apiQuery {Integer} propertyID Property ID

        :param group_code: The unique identifier of the group profile the allotment block should be created
        :type group_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param rate_type: The rate type for the associated intervals
        :type rate_type: str
        :param rate_plan_id: The rate plan ID. Required if rateType is \\\"rate_plan\\\".
        :type rate_plan_id: str
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param allow_overbooking: If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param auto_release:
        :type auto_release: PostCreateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_post_serialize(
            group_code=group_code,
            allotment_block_name=allotment_block_name,
            rate_type=rate_type,
            rate_plan_id=rate_plan_id,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            allow_overbooking=allow_overbooking,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_allotment_block_post_without_preload_content(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="The unique identifier of the group profile the allotment block should be created")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        rate_type: Annotated[Optional[StrictStr], Field(description="The rate type for the associated intervals")] = None,
        rate_plan_id: Annotated[Optional[StrictStr], Field(description="The rate plan ID. Required if rateType is \\\"rate_plan\\\".")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        auto_release: Optional[PostCreateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """createAllotmentBlock

        Retreive allotment blocks @apiQuery {Integer} propertyID Property ID

        :param group_code: The unique identifier of the group profile the allotment block should be created
        :type group_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param rate_type: The rate type for the associated intervals
        :type rate_type: str
        :param rate_plan_id: The rate plan ID. Required if rateType is \\\"rate_plan\\\".
        :type rate_plan_id: str
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param allow_overbooking: If false, or omitted, then this command will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param auto_release:
        :type auto_release: PostCreateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostCreateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_allotment_block_post_serialize(
            group_code=group_code,
            allotment_block_name=allotment_block_name,
            rate_type=rate_type,
            rate_plan_id=rate_plan_id,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            allow_overbooking=allow_overbooking,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCreateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_allotment_block_post_serialize(
        self,
        group_code,
        allotment_block_name,
        rate_type,
        rate_plan_id,
        allotment_type,
        allotment_block_status,
        allow_overbooking,
        auto_release,
        allotment_intervals,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'allotmentIntervals': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if group_code is not None:
            _form_params.append(('groupCode', group_code))
        if allotment_block_name is not None:
            _form_params.append(('allotmentBlockName', allotment_block_name))
        if rate_type is not None:
            _form_params.append(('rateType', rate_type))
        if rate_plan_id is not None:
            _form_params.append(('ratePlanId', rate_plan_id))
        if allotment_type is not None:
            _form_params.append(('allotmentType', allotment_type))
        if allotment_block_status is not None:
            _form_params.append(('allotmentBlockStatus', allotment_block_status))
        if allow_overbooking is not None:
            _form_params.append(('allowOverbooking', allow_overbooking))
        if auto_release is not None:
            _form_params.append(('autoRelease', auto_release))
        if allotment_intervals is not None:
            _form_params.append(('allotmentIntervals', allotment_intervals))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/createAllotmentBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_allotment_block_post(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The unique code of the allotment Block")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostDeleteAllotmentBlockResponse:
        """deleteAllotmentBlock

        Delete allotment blocks

        :param allotment_block_code: The unique code of the allotment Block
        :type allotment_block_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDeleteAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_allotment_block_post_with_http_info(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The unique code of the allotment Block")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostDeleteAllotmentBlockResponse]:
        """deleteAllotmentBlock

        Delete allotment blocks

        :param allotment_block_code: The unique code of the allotment Block
        :type allotment_block_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDeleteAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_allotment_block_post_without_preload_content(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The unique code of the allotment Block")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteAllotmentBlock

        Delete allotment blocks

        :param allotment_block_code: The unique code of the allotment Block
        :type allotment_block_code: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostDeleteAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_allotment_block_post_serialize(
        self,
        allotment_block_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if allotment_block_code is not None:
            _form_params.append(('allotmentBlockCode', allotment_block_code))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/deleteAllotmentBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_allotment_blocks_get(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID (optional, by default all authorized properties will be included)")],
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment block code")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="Allotment block name")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="A group profile code")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="Allotment block status(es)")] = None,
        allotment_block_type: Annotated[Optional[StrictStr], Field(description="The type of allotment block")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Filters allotment blocks with the supplied Room Type ID.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of allotment blocks to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        start_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAllotmentBlocksResponse:
        """getAllotmentBlocks

        Retrieve allotment blocks

        :param property_id: Property ID (optional, by default all authorized properties will be included) (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code
        :type allotment_block_code: str
        :param allotment_block_name: Allotment block name
        :type allotment_block_name: str
        :param group_code: A group profile code
        :type group_code: str
        :param allotment_block_status: Allotment block status(es)
        :type allotment_block_status: str
        :param allotment_block_type: The type of allotment block
        :type allotment_block_type: str
        :param room_type_id: Filters allotment blocks with the supplied Room Type ID.
        :type room_type_id: str
        :param page_size: Number of allotment blocks to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param start_date: Interval start date
        :type start_date: date
        :param end_date: Interval start date
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_allotment_blocks_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            group_code=group_code,
            allotment_block_status=allotment_block_status,
            allotment_block_type=allotment_block_type,
            room_type_id=room_type_id,
            page_size=page_size,
            page_number=page_number,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllotmentBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_allotment_blocks_get_with_http_info(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID (optional, by default all authorized properties will be included)")],
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment block code")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="Allotment block name")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="A group profile code")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="Allotment block status(es)")] = None,
        allotment_block_type: Annotated[Optional[StrictStr], Field(description="The type of allotment block")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Filters allotment blocks with the supplied Room Type ID.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of allotment blocks to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        start_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAllotmentBlocksResponse]:
        """getAllotmentBlocks

        Retrieve allotment blocks

        :param property_id: Property ID (optional, by default all authorized properties will be included) (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code
        :type allotment_block_code: str
        :param allotment_block_name: Allotment block name
        :type allotment_block_name: str
        :param group_code: A group profile code
        :type group_code: str
        :param allotment_block_status: Allotment block status(es)
        :type allotment_block_status: str
        :param allotment_block_type: The type of allotment block
        :type allotment_block_type: str
        :param room_type_id: Filters allotment blocks with the supplied Room Type ID.
        :type room_type_id: str
        :param page_size: Number of allotment blocks to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param start_date: Interval start date
        :type start_date: date
        :param end_date: Interval start date
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_allotment_blocks_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            group_code=group_code,
            allotment_block_status=allotment_block_status,
            allotment_block_type=allotment_block_type,
            room_type_id=room_type_id,
            page_size=page_size,
            page_number=page_number,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllotmentBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_allotment_blocks_get_without_preload_content(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID (optional, by default all authorized properties will be included)")],
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment block code")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="Allotment block name")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="A group profile code")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="Allotment block status(es)")] = None,
        allotment_block_type: Annotated[Optional[StrictStr], Field(description="The type of allotment block")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Filters allotment blocks with the supplied Room Type ID.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of allotment blocks to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        start_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Interval start date")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getAllotmentBlocks

        Retrieve allotment blocks

        :param property_id: Property ID (optional, by default all authorized properties will be included) (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code
        :type allotment_block_code: str
        :param allotment_block_name: Allotment block name
        :type allotment_block_name: str
        :param group_code: A group profile code
        :type group_code: str
        :param allotment_block_status: Allotment block status(es)
        :type allotment_block_status: str
        :param allotment_block_type: The type of allotment block
        :type allotment_block_type: str
        :param room_type_id: Filters allotment blocks with the supplied Room Type ID.
        :type room_type_id: str
        :param page_size: Number of allotment blocks to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param start_date: Interval start date
        :type start_date: date
        :param end_date: Interval start date
        :type end_date: date
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_allotment_blocks_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            group_code=group_code,
            allotment_block_status=allotment_block_status,
            allotment_block_type=allotment_block_type,
            room_type_id=room_type_id,
            page_size=page_size,
            page_number=page_number,
            start_date=start_date,
            end_date=end_date,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAllotmentBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_allotment_blocks_get_serialize(
        self,
        property_id,
        allotment_block_code,
        allotment_block_name,
        group_code,
        allotment_block_status,
        allotment_block_type,
        room_type_id,
        page_size,
        page_number,
        start_date,
        end_date,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if allotment_block_code is not None:
            
            _query_params.append(('allotmentBlockCode', allotment_block_code))
            
        if allotment_block_name is not None:
            
            _query_params.append(('allotmentBlockName', allotment_block_name))
            
        if group_code is not None:
            
            _query_params.append(('groupCode', group_code))
            
        if allotment_block_status is not None:
            
            _query_params.append(('allotmentBlockStatus', allotment_block_status))
            
        if allotment_block_type is not None:
            
            _query_params.append(('allotmentBlockType', allotment_block_type))
            
        if room_type_id is not None:
            
            _query_params.append(('roomTypeID', room_type_id))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getAllotmentBlocks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_allotment_block_notes_get(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        allotment_block_code: Annotated[StrictStr, Field(description="Allotment block code")],
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of Items per Page (min 1, max 100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetListAllotmentBlockNotesResponse:
        """listAllotmentBlockNotes

        List notes added to an allotment block

        :param property_id: Property ID (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code (required)
        :type allotment_block_code: str
        :param status: Note status
        :type status: str
        :param page_number: Page
        :type page_number: int
        :param page_size: Number of Items per Page (min 1, max 100)
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_allotment_block_notes_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            status=status,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_allotment_block_notes_get_with_http_info(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        allotment_block_code: Annotated[StrictStr, Field(description="Allotment block code")],
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of Items per Page (min 1, max 100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetListAllotmentBlockNotesResponse]:
        """listAllotmentBlockNotes

        List notes added to an allotment block

        :param property_id: Property ID (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code (required)
        :type allotment_block_code: str
        :param status: Note status
        :type status: str
        :param page_number: Page
        :type page_number: int
        :param page_size: Number of Items per Page (min 1, max 100)
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_allotment_block_notes_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            status=status,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_allotment_block_notes_get_without_preload_content(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        allotment_block_code: Annotated[StrictStr, Field(description="Allotment block code")],
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of Items per Page (min 1, max 100)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """listAllotmentBlockNotes

        List notes added to an allotment block

        :param property_id: Property ID (required)
        :type property_id: str
        :param allotment_block_code: Allotment block code (required)
        :type allotment_block_code: str
        :param status: Note status
        :type status: str
        :param page_number: Page
        :type page_number: int
        :param page_size: Number of Items per Page (min 1, max 100)
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_allotment_block_notes_get_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            status=status,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetListAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_allotment_block_notes_get_serialize(
        self,
        property_id,
        allotment_block_code,
        status,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if allotment_block_code is not None:
            
            _query_params.append(('allotmentBlockCode', allotment_block_code))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/listAllotmentBlockNotes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_allotment_block_notes_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note's ID")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text (null for no change)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostUpdateAllotmentBlockNotesResponse:
        """updateAllotmentBlockNotes

        Update a note on an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param note_id: Note's ID
        :type note_id: str
        :param text: Note's text (null for no change)
        :type text: str
        :param status: Note status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            note_id=note_id,
            text=text,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_allotment_block_notes_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note's ID")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text (null for no change)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostUpdateAllotmentBlockNotesResponse]:
        """updateAllotmentBlockNotes

        Update a note on an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param note_id: Note's ID
        :type note_id: str
        :param text: Note's text (null for no change)
        :type text: str
        :param status: Note status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            note_id=note_id,
            text=text,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_allotment_block_notes_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="Allotment Block Code")] = None,
        note_id: Annotated[Optional[StrictStr], Field(description="Note's ID")] = None,
        text: Annotated[Optional[StrictStr], Field(description="Note's text (null for no change)")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Note status")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateAllotmentBlockNotes

        Update a note on an allotment block

        :param property_id: Property ID
        :type property_id: str
        :param allotment_block_code: Allotment Block Code
        :type allotment_block_code: str
        :param note_id: Note's ID
        :type note_id: str
        :param text: Note's text (null for no change)
        :type text: str
        :param status: Note status
        :type status: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_notes_post_serialize(
            property_id=property_id,
            allotment_block_code=allotment_block_code,
            note_id=note_id,
            text=text,
            status=status,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_allotment_block_notes_post_serialize(
        self,
        property_id,
        allotment_block_code,
        note_id,
        text,
        status,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if allotment_block_code is not None:
            _form_params.append(('allotmentBlockCode', allotment_block_code))
        if note_id is not None:
            _form_params.append(('noteID', note_id))
        if text is not None:
            _form_params.append(('text', text))
        if status is not None:
            _form_params.append(('status', status))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/updateAllotmentBlockNotes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_allotment_block_post(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The allotment block code identifying the allotment block to update")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        auto_release: Optional[PostUpdateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostUpdateAllotmentBlockResponse:
        """updateAllotmentBlock

        Update an allotment block @apiQuery {Integer} propertyID Property ID

        :param allotment_block_code: The allotment block code identifying the allotment block to update
        :type allotment_block_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param allow_overbooking: If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param auto_release:
        :type auto_release: PostUpdateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            allow_overbooking=allow_overbooking,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_allotment_block_post_with_http_info(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The allotment block code identifying the allotment block to update")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        auto_release: Optional[PostUpdateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostUpdateAllotmentBlockResponse]:
        """updateAllotmentBlock

        Update an allotment block @apiQuery {Integer} propertyID Property ID

        :param allotment_block_code: The allotment block code identifying the allotment block to update
        :type allotment_block_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param allow_overbooking: If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param auto_release:
        :type auto_release: PostUpdateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            allow_overbooking=allow_overbooking,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_allotment_block_post_without_preload_content(
        self,
        allotment_block_code: Annotated[Optional[StrictStr], Field(description="The allotment block code identifying the allotment block to update")] = None,
        allotment_block_name: Annotated[Optional[StrictStr], Field(description="The name for the allotment block")] = None,
        allow_overbooking: Annotated[Optional[StrictBool], Field(description="If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.")] = None,
        allotment_type: Annotated[Optional[StrictStr], Field(description="The allotment type")] = None,
        allotment_block_status: Annotated[Optional[StrictStr], Field(description="The status for the allotment block under")] = None,
        auto_release: Optional[PostUpdateAllotmentBlockRequestAutoRelease] = None,
        allotment_intervals: Annotated[Optional[List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]], Field(description="The day-based data for the allotment block.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """updateAllotmentBlock

        Update an allotment block @apiQuery {Integer} propertyID Property ID

        :param allotment_block_code: The allotment block code identifying the allotment block to update
        :type allotment_block_code: str
        :param allotment_block_name: The name for the allotment block
        :type allotment_block_name: str
        :param allow_overbooking: If false, or omitted, then this update will fail if it would result in an overbooking.  If true, then the update will succeed even if it results in an overbooking.
        :type allow_overbooking: bool
        :param allotment_type: The allotment type
        :type allotment_type: str
        :param allotment_block_status: The status for the allotment block under
        :type allotment_block_status: str
        :param auto_release:
        :type auto_release: PostUpdateAllotmentBlockRequestAutoRelease
        :param allotment_intervals: The day-based data for the allotment block.
        :type allotment_intervals: List[PostUpdateAllotmentBlockRequestAllotmentIntervalsInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_allotment_block_post_serialize(
            allotment_block_code=allotment_block_code,
            allotment_block_name=allotment_block_name,
            allow_overbooking=allow_overbooking,
            allotment_type=allotment_type,
            allotment_block_status=allotment_block_status,
            auto_release=auto_release,
            allotment_intervals=allotment_intervals,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostUpdateAllotmentBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_allotment_block_post_serialize(
        self,
        allotment_block_code,
        allotment_block_name,
        allow_overbooking,
        allotment_type,
        allotment_block_status,
        auto_release,
        allotment_intervals,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'allotmentIntervals': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if allotment_block_code is not None:
            _form_params.append(('allotmentBlockCode', allotment_block_code))
        if allotment_block_name is not None:
            _form_params.append(('allotmentBlockName', allotment_block_name))
        if allow_overbooking is not None:
            _form_params.append(('allowOverbooking', allow_overbooking))
        if allotment_type is not None:
            _form_params.append(('allotmentType', allotment_type))
        if allotment_block_status is not None:
            _form_params.append(('allotmentBlockStatus', allotment_block_status))
        if auto_release is not None:
            _form_params.append(('autoRelease', auto_release))
        if allotment_intervals is not None:
            _form_params.append(('allotmentIntervals', allotment_intervals))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/updateAllotmentBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



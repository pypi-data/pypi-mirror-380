# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PostItemsToInventoryRequestItem(BaseModel):
    """
    Items
    """ # noqa: E501
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID", alias="propertyID")
    item_name: Optional[StrictStr] = Field(default=None, description="Item name", alias="itemName")
    category_id: Optional[StrictStr] = Field(default=None, description="Item category identifier", alias="categoryID")
    item_type: Optional[StrictStr] = Field(default=None, description="Item type", alias="itemType")
    item_sku: Optional[StrictStr] = Field(default=None, description="Item SKU. Will be generated if not set", alias="itemSKU")
    item_code: Optional[StrictStr] = Field(default=None, description="Item code", alias="itemCode")
    item_description: Optional[StrictStr] = Field(default=None, description="Item description", alias="itemDescription")
    item_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Item price<br />When ItemPrice is blank the item will be created as Free / Complimentaty item without price", alias="itemPrice")
    stock_inventory: Optional[StrictBool] = Field(default=False, description="Track stock inventory for this item", alias="stockInventory")
    item_quantity: Optional[StrictInt] = Field(default=None, description="ยน Current amount of item available", alias="itemQuantity")
    reorder_threshold: Optional[StrictInt] = Field(default=None, description="ยน Quantity at which to reorder item", alias="reorderThreshold")
    stop_sell_met: Optional[StrictBool] = Field(default=False, description="ยน true - Whether item is at or below value set for stop-sell threshold.", alias="stopSellMet")
    stop_sell: Optional[StrictInt] = Field(default=None, description="ยน Quantity at which to stop selling product.", alias="stopSell")
    __properties: ClassVar[List[str]] = ["propertyID", "itemName", "categoryID", "itemType", "itemSKU", "itemCode", "itemDescription", "itemPrice", "stockInventory", "itemQuantity", "reorderThreshold", "stopSellMet", "stopSell"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['product', 'service']):
            raise ValueError("must be one of enum values ('product', 'service')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostItemsToInventoryRequestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if property_id (nullable) is None
        # and model_fields_set contains the field
        if self.property_id is None and "property_id" in self.model_fields_set:
            _dict['propertyID'] = None

        # set to None if item_name (nullable) is None
        # and model_fields_set contains the field
        if self.item_name is None and "item_name" in self.model_fields_set:
            _dict['itemName'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['categoryID'] = None

        # set to None if item_type (nullable) is None
        # and model_fields_set contains the field
        if self.item_type is None and "item_type" in self.model_fields_set:
            _dict['itemType'] = None

        # set to None if item_sku (nullable) is None
        # and model_fields_set contains the field
        if self.item_sku is None and "item_sku" in self.model_fields_set:
            _dict['itemSKU'] = None

        # set to None if item_code (nullable) is None
        # and model_fields_set contains the field
        if self.item_code is None and "item_code" in self.model_fields_set:
            _dict['itemCode'] = None

        # set to None if item_description (nullable) is None
        # and model_fields_set contains the field
        if self.item_description is None and "item_description" in self.model_fields_set:
            _dict['itemDescription'] = None

        # set to None if item_price (nullable) is None
        # and model_fields_set contains the field
        if self.item_price is None and "item_price" in self.model_fields_set:
            _dict['itemPrice'] = None

        # set to None if stock_inventory (nullable) is None
        # and model_fields_set contains the field
        if self.stock_inventory is None and "stock_inventory" in self.model_fields_set:
            _dict['stockInventory'] = None

        # set to None if item_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.item_quantity is None and "item_quantity" in self.model_fields_set:
            _dict['itemQuantity'] = None

        # set to None if reorder_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.reorder_threshold is None and "reorder_threshold" in self.model_fields_set:
            _dict['reorderThreshold'] = None

        # set to None if stop_sell_met (nullable) is None
        # and model_fields_set contains the field
        if self.stop_sell_met is None and "stop_sell_met" in self.model_fields_set:
            _dict['stopSellMet'] = None

        # set to None if stop_sell (nullable) is None
        # and model_fields_set contains the field
        if self.stop_sell is None and "stop_sell" in self.model_fields_set:
            _dict['stopSell'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostItemsToInventoryRequestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyID": obj.get("propertyID"),
            "itemName": obj.get("itemName"),
            "categoryID": obj.get("categoryID"),
            "itemType": obj.get("itemType"),
            "itemSKU": obj.get("itemSKU"),
            "itemCode": obj.get("itemCode"),
            "itemDescription": obj.get("itemDescription"),
            "itemPrice": obj.get("itemPrice"),
            "stockInventory": obj.get("stockInventory") if obj.get("stockInventory") is not None else False,
            "itemQuantity": obj.get("itemQuantity"),
            "reorderThreshold": obj.get("reorderThreshold"),
            "stopSellMet": obj.get("stopSellMet") if obj.get("stopSellMet") is not None else False,
            "stopSell": obj.get("stopSell")
        })
        return _obj



# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_taxes_and_fees_response_data_inner_amount_rate_based_inner import GetTaxesAndFeesResponseDataInnerAmountRateBasedInner
from cloudbeds_pms_v1_3.models.get_taxes_and_fees_response_data_inner_date_ranges_inner import GetTaxesAndFeesResponseDataInnerDateRangesInner
from cloudbeds_pms_v1_3.models.get_taxes_and_fees_response_data_inner_room_types_inner import GetTaxesAndFeesResponseDataInnerRoomTypesInner
from typing import Optional, Set
from typing_extensions import Self

class GetTaxesAndFeesResponseDataInner(BaseModel):
    """
    GetTaxesAndFeesResponseDataInner
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="Type. Fee or tax.")
    fee_id: Optional[StrictStr] = Field(default=None, description="Fee's unique identifier. Only exists if type = fee.", alias="feeID")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax's unique identifier. Only exists if type = tax.", alias="taxID")
    name: Optional[StrictStr] = Field(default=None, description="Name")
    code: Optional[StrictStr] = Field(default=None, description="Code")
    kind: Optional[StrictStr] = Field(default=None, description="Tax kind. Currently supports \"vat\" or null. Only exists if type = tax.")
    amount: Optional[StrictStr] = Field(default=None, description="Amount")
    amount_adult: Optional[StrictStr] = Field(default=None, description="Amount charged per adult. Only applicable if amountType = fixed_per_person (Per Person Per Night)", alias="amountAdult")
    amount_child: Optional[StrictStr] = Field(default=None, description="Amount charged per children. Only applicable if amountType = fixed_per_person (Per Person Per Night)", alias="amountChild")
    amount_rate_based: Optional[List[GetTaxesAndFeesResponseDataInnerAmountRateBasedInner]] = Field(default=None, description="Rules defined for Rate-Based taxes/fees. Only applicable if amountType = percentage_rate_based (Rate-based)", alias="amountRateBased")
    amount_type: Optional[StrictStr] = Field(default=None, description="Amount type. They mean:<br/> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td>percentage</td><td>Percentage of Total Amount</td></tr> <tr><td>fixed</td><td>Fixed per Room Night / Item</td></tr> <tr><td>fixed_per_person</td><td>Fixed per Person per Night</td></tr> <tr><td>fixed_per_accomodation</td><td>Fixed per Accomodation</td></tr> <tr><td>fixed_per_reservation</td><td>Fixed per Reservation</td></tr> <tr><td>percentage_rate_based</td><td>Rate-based</td></tr> </table>", alias="amountType")
    available_for: Optional[List[StrictStr]] = Field(default=None, description="Where this tax/fee is available?<br/>They mean:<br/> <table> <tr><th>Value</th><th>Meaning</th></tr> <tr><td>product</td><td>Items</td></tr> <tr><td>rate</td><td>Reservations</td></tr> <tr><td>fee</td><td>Fees -- this tax is charged on top of some fees</td></tr> </table>", alias="availableFor")
    fees_charged: Optional[List[StrictStr]] = Field(default=None, description="List of Fee IDs charged by the current tax. Only exists if type = tax.", alias="feesCharged")
    inclusive_or_exclusive: Optional[StrictStr] = Field(default=None, description="If this tax/fee is inclusive or exclusive", alias="inclusiveOrExclusive")
    is_deleted: Optional[StrictBool] = Field(default=None, description="Flag indicating if tax was deleted from the system", alias="isDeleted")
    child_id: Optional[StrictStr] = Field(default=None, description="ID of the tax or fee that replaced current one", alias="childId")
    created_at: Optional[StrictStr] = Field(default=None, description="Date when tax or fee was created in the system", alias="createdAt")
    expired_at: Optional[StrictStr] = Field(default=None, description="Date when tax or fee was expired", alias="expiredAt")
    room_types: Optional[List[GetTaxesAndFeesResponseDataInnerRoomTypesInner]] = Field(default=None, description="Room types this tax/fee applies to", alias="roomTypes")
    date_ranges: Optional[List[GetTaxesAndFeesResponseDataInnerDateRangesInner]] = Field(default=None, description="Date ranges when this tax/fee is applicable", alias="dateRanges")
    __properties: ClassVar[List[str]] = ["type", "feeID", "taxID", "name", "code", "kind", "amount", "amountAdult", "amountChild", "amountRateBased", "amountType", "availableFor", "feesCharged", "inclusiveOrExclusive", "isDeleted", "childId", "createdAt", "expiredAt", "roomTypes", "dateRanges"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fee', 'tax']):
            raise ValueError("must be one of enum values ('fee', 'tax')")
        return value

    @field_validator('amount_type')
    def amount_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['percentage', 'fixed', 'fixed_per_person', 'fixed_per_accomodation', 'fixed_per_reservation', 'percentage_rate_based']):
            raise ValueError("must be one of enum values ('percentage', 'fixed', 'fixed_per_person', 'fixed_per_accomodation', 'fixed_per_reservation', 'percentage_rate_based')")
        return value

    @field_validator('available_for')
    def available_for_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['product', 'rate', 'fee']):
                raise ValueError("each list item must be one of ('product', 'rate', 'fee')")
        return value

    @field_validator('inclusive_or_exclusive')
    def inclusive_or_exclusive_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['inclusive', 'exclusive']):
            raise ValueError("must be one of enum values ('inclusive', 'exclusive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTaxesAndFeesResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in amount_rate_based (list)
        _items = []
        if self.amount_rate_based:
            for _item_amount_rate_based in self.amount_rate_based:
                if _item_amount_rate_based:
                    _items.append(_item_amount_rate_based.to_dict())
            _dict['amountRateBased'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in room_types (list)
        _items = []
        if self.room_types:
            for _item_room_types in self.room_types:
                if _item_room_types:
                    _items.append(_item_room_types.to_dict())
            _dict['roomTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in date_ranges (list)
        _items = []
        if self.date_ranges:
            for _item_date_ranges in self.date_ranges:
                if _item_date_ranges:
                    _items.append(_item_date_ranges.to_dict())
            _dict['dateRanges'] = _items
        # set to None if fee_id (nullable) is None
        # and model_fields_set contains the field
        if self.fee_id is None and "fee_id" in self.model_fields_set:
            _dict['feeID'] = None

        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['taxID'] = None

        # set to None if kind (nullable) is None
        # and model_fields_set contains the field
        if self.kind is None and "kind" in self.model_fields_set:
            _dict['kind'] = None

        # set to None if amount_rate_based (nullable) is None
        # and model_fields_set contains the field
        if self.amount_rate_based is None and "amount_rate_based" in self.model_fields_set:
            _dict['amountRateBased'] = None

        # set to None if fees_charged (nullable) is None
        # and model_fields_set contains the field
        if self.fees_charged is None and "fees_charged" in self.model_fields_set:
            _dict['feesCharged'] = None

        # set to None if room_types (nullable) is None
        # and model_fields_set contains the field
        if self.room_types is None and "room_types" in self.model_fields_set:
            _dict['roomTypes'] = None

        # set to None if date_ranges (nullable) is None
        # and model_fields_set contains the field
        if self.date_ranges is None and "date_ranges" in self.model_fields_set:
            _dict['dateRanges'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTaxesAndFeesResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "feeID": obj.get("feeID"),
            "taxID": obj.get("taxID"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "kind": obj.get("kind"),
            "amount": obj.get("amount"),
            "amountAdult": obj.get("amountAdult"),
            "amountChild": obj.get("amountChild"),
            "amountRateBased": [GetTaxesAndFeesResponseDataInnerAmountRateBasedInner.from_dict(_item) for _item in obj["amountRateBased"]] if obj.get("amountRateBased") is not None else None,
            "amountType": obj.get("amountType"),
            "availableFor": obj.get("availableFor"),
            "feesCharged": obj.get("feesCharged"),
            "inclusiveOrExclusive": obj.get("inclusiveOrExclusive"),
            "isDeleted": obj.get("isDeleted"),
            "childId": obj.get("childId"),
            "createdAt": obj.get("createdAt"),
            "expiredAt": obj.get("expiredAt"),
            "roomTypes": [GetTaxesAndFeesResponseDataInnerRoomTypesInner.from_dict(_item) for _item in obj["roomTypes"]] if obj.get("roomTypes") is not None else None,
            "dateRanges": [GetTaxesAndFeesResponseDataInnerDateRangesInner.from_dict(_item) for _item in obj["dateRanges"]] if obj.get("dateRanges") is not None else None
        })
        return _obj



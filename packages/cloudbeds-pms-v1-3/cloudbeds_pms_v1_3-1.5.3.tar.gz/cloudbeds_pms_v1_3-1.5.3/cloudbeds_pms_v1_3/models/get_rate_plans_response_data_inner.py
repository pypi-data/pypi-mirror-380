# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_rate_plans_response_data_inner_add_ons_inner import GetRatePlansResponseDataInnerAddOnsInner
from cloudbeds_pms_v1_3.models.get_rate_plans_response_data_inner_room_rate_detailed_inner import GetRatePlansResponseDataInnerRoomRateDetailedInner
from typing import Optional, Set
from typing_extensions import Self

class GetRatePlansResponseDataInner(BaseModel):
    """
    GetRatePlansResponseDataInner
    """ # noqa: E501
    rate_id: Optional[StrictStr] = Field(default=None, description="Rate ID", alias="rateID")
    is_derived: Optional[StrictBool] = Field(default=None, description="True if this rate is derived from another rate", alias="isDerived")
    room_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate for the room, based on the parameters provided", alias="roomRate")
    total_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total rate for the room, based on the parameters provided. Calculated using base rates and additional costs from extra guests.", alias="totalRate")
    rooms_available: Optional[StrictInt] = Field(default=None, description="Number of rooms available for the selected date", alias="roomsAvailable")
    room_type_id: Optional[StrictStr] = Field(default=None, description="] room type ID (if not specified in request)", alias="roomTypeID")
    room_type_name: Optional[StrictInt] = Field(default=None, description="] room type name (if not specified in request)", alias="roomTypeName")
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID, used if multiple properties are included in request", alias="propertyID")
    rate_plan_id: Optional[StrictStr] = Field(default=None, description="ratePlanID (If rate depends on plan)", alias="ratePlanID")
    rate_plan_name_public: Optional[StrictStr] = Field(default=None, description="ratePlanNamePublic", alias="ratePlanNamePublic")
    rate_plan_name_private: Optional[StrictStr] = Field(default=None, description="ratePlanNamePrivate", alias="ratePlanNamePrivate")
    promo_code: Optional[StrictStr] = Field(default=None, description="Promotional code when rate plan has has it", alias="promoCode")
    derived_type: Optional[StrictStr] = Field(default=None, description="type of deriving (only if current rate was derived from other one).", alias="derivedType")
    derived_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Can be positive or negative (only if current rate was derived from other one).", alias="derivedValue")
    base_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Base rate on given period", alias="baseRate")
    days_of_week: Optional[List[StrictStr]] = Field(default=None, description="Returns when there is a difference between range given with startDate/endDate and days of week which rate plan applies.", alias="daysOfWeek")
    add_ons: Optional[List[GetRatePlansResponseDataInnerAddOnsInner]] = Field(default=None, description="addOns information on the rates", alias="addOns")
    room_rate_detailed: Optional[List[GetRatePlansResponseDataInnerRoomRateDetailedInner]] = Field(default=None, description="Detailed information on the rates, if requested", alias="roomRateDetailed")
    __properties: ClassVar[List[str]] = ["rateID", "isDerived", "roomRate", "totalRate", "roomsAvailable", "roomTypeID", "roomTypeName", "propertyID", "ratePlanID", "ratePlanNamePublic", "ratePlanNamePrivate", "promoCode", "derivedType", "derivedValue", "baseRate", "daysOfWeek", "addOns", "roomRateDetailed"]

    @field_validator('derived_type')
    def derived_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fixed', 'percentage']):
            raise ValueError("must be one of enum values ('fixed', 'percentage')")
        return value

    @field_validator('days_of_week')
    def days_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']):
                raise ValueError("each list item must be one of ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRatePlansResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_ons (list)
        _items = []
        if self.add_ons:
            for _item_add_ons in self.add_ons:
                if _item_add_ons:
                    _items.append(_item_add_ons.to_dict())
            _dict['addOns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in room_rate_detailed (list)
        _items = []
        if self.room_rate_detailed:
            for _item_room_rate_detailed in self.room_rate_detailed:
                if _item_room_rate_detailed:
                    _items.append(_item_room_rate_detailed.to_dict())
            _dict['roomRateDetailed'] = _items
        # set to None if room_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.room_type_id is None and "room_type_id" in self.model_fields_set:
            _dict['roomTypeID'] = None

        # set to None if room_type_name (nullable) is None
        # and model_fields_set contains the field
        if self.room_type_name is None and "room_type_name" in self.model_fields_set:
            _dict['roomTypeName'] = None

        # set to None if property_id (nullable) is None
        # and model_fields_set contains the field
        if self.property_id is None and "property_id" in self.model_fields_set:
            _dict['propertyID'] = None

        # set to None if rate_plan_id (nullable) is None
        # and model_fields_set contains the field
        if self.rate_plan_id is None and "rate_plan_id" in self.model_fields_set:
            _dict['ratePlanID'] = None

        # set to None if rate_plan_name_public (nullable) is None
        # and model_fields_set contains the field
        if self.rate_plan_name_public is None and "rate_plan_name_public" in self.model_fields_set:
            _dict['ratePlanNamePublic'] = None

        # set to None if rate_plan_name_private (nullable) is None
        # and model_fields_set contains the field
        if self.rate_plan_name_private is None and "rate_plan_name_private" in self.model_fields_set:
            _dict['ratePlanNamePrivate'] = None

        # set to None if promo_code (nullable) is None
        # and model_fields_set contains the field
        if self.promo_code is None and "promo_code" in self.model_fields_set:
            _dict['promoCode'] = None

        # set to None if derived_type (nullable) is None
        # and model_fields_set contains the field
        if self.derived_type is None and "derived_type" in self.model_fields_set:
            _dict['derivedType'] = None

        # set to None if derived_value (nullable) is None
        # and model_fields_set contains the field
        if self.derived_value is None and "derived_value" in self.model_fields_set:
            _dict['derivedValue'] = None

        # set to None if base_rate (nullable) is None
        # and model_fields_set contains the field
        if self.base_rate is None and "base_rate" in self.model_fields_set:
            _dict['baseRate'] = None

        # set to None if days_of_week (nullable) is None
        # and model_fields_set contains the field
        if self.days_of_week is None and "days_of_week" in self.model_fields_set:
            _dict['daysOfWeek'] = None

        # set to None if room_rate_detailed (nullable) is None
        # and model_fields_set contains the field
        if self.room_rate_detailed is None and "room_rate_detailed" in self.model_fields_set:
            _dict['roomRateDetailed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRatePlansResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rateID": obj.get("rateID"),
            "isDerived": obj.get("isDerived"),
            "roomRate": obj.get("roomRate"),
            "totalRate": obj.get("totalRate"),
            "roomsAvailable": obj.get("roomsAvailable"),
            "roomTypeID": obj.get("roomTypeID"),
            "roomTypeName": obj.get("roomTypeName"),
            "propertyID": obj.get("propertyID"),
            "ratePlanID": obj.get("ratePlanID"),
            "ratePlanNamePublic": obj.get("ratePlanNamePublic"),
            "ratePlanNamePrivate": obj.get("ratePlanNamePrivate"),
            "promoCode": obj.get("promoCode"),
            "derivedType": obj.get("derivedType"),
            "derivedValue": obj.get("derivedValue"),
            "baseRate": obj.get("baseRate"),
            "daysOfWeek": obj.get("daysOfWeek"),
            "addOns": [GetRatePlansResponseDataInnerAddOnsInner.from_dict(_item) for _item in obj["addOns"]] if obj.get("addOns") is not None else None,
            "roomRateDetailed": [GetRatePlansResponseDataInnerRoomRateDetailedInner.from_dict(_item) for _item in obj["roomRateDetailed"]] if obj.get("roomRateDetailed") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_guests_modified_response_data_inner_custom_fields_inner import GetGuestsModifiedResponseDataInnerCustomFieldsInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_balance_detailed_one_of import GetReservationResponseDataBalanceDetailedOneOf
from cloudbeds_pms_v1_3.models.get_reservations_response_data_inner_guest_list_value import GetReservationsResponseDataInnerGuestListValue
from cloudbeds_pms_v1_3.models.get_reservations_with_rate_details_response_data_inner_rooms_inner import GetReservationsWithRateDetailsResponseDataInnerRoomsInner
from cloudbeds_pms_v1_3.models.get_reservations_with_rate_details_response_data_inner_source_inner import GetReservationsWithRateDetailsResponseDataInnerSourceInner
from typing import Optional, Set
from typing_extensions import Self

class GetReservationsWithRateDetailsResponseDataInner(BaseModel):
    """
    GetReservationsWithRateDetailsResponseDataInner
    """ # noqa: E501
    property_id: Optional[StrictStr] = Field(default=None, description="Properties identifier", alias="propertyID")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation's unique identifier", alias="reservationID")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    date_created: Optional[datetime] = Field(default=None, alias="dateCreated")
    date_created_utc: Optional[datetime] = Field(default=None, alias="dateCreatedUTC")
    date_modified: Optional[datetime] = Field(default=None, alias="dateModified")
    date_modified_utc: Optional[datetime] = Field(default=None, alias="dateModifiedUTC")
    date_cancelled: Optional[datetime] = Field(default=None, description="Will be displayed only if \"status = 'canceled'\"", alias="dateCancelled")
    date_cancelled_utc: Optional[datetime] = Field(default=None, description="Will be displayed only if \"status = 'canceled'\"", alias="dateCancelledUTC")
    status: Optional[StrictStr] = Field(default=None, description="Reservation status<br /> 'not_confirmed' - Reservation is pending confirmation<br /> 'confirmed' - Reservation is confirmed<br /> 'canceled' - Reservation is canceled<br /> 'checked_in' - Guest is in hotel<br /> 'checked_out' - Guest already left hotel<br /> 'no_show' - Guest didn't showed up on check-in date")
    reservation_check_in: Optional[datetime] = Field(default=None, alias="reservationCheckIn")
    reservation_check_out: Optional[datetime] = Field(default=None, alias="reservationCheckOut")
    guest_id: Optional[StrictStr] = Field(default=None, description="Main guest ID", alias="guestID")
    profile_id: Optional[StrictStr] = Field(default=None, description="Main guest profile ID", alias="profileID")
    guest_country: Optional[StrictInt] = Field(default=None, description="Main guest Country", alias="guestCountry")
    source_name: Optional[StrictStr] = Field(default=None, description="Reservation source", alias="sourceName")
    source: Optional[List[GetReservationsWithRateDetailsResponseDataInnerSourceInner]] = None
    source_category: Optional[StrictInt] = Field(default=None, description="Reservation source category", alias="sourceCategory")
    source_reservation_id: Optional[StrictInt] = Field(default=None, description="Reservation ID on the source", alias="sourceReservationID")
    property_currency: Optional[StrictInt] = Field(default=None, description="Property currency ISO-formatted (3 characters)", alias="propertyCurrency")
    balance_detailed: Optional[List[GetReservationResponseDataBalanceDetailedOneOf]] = Field(default=None, description="Reservation balance detailed with the information available on MyFrontdesk, describing the financial items calculated", alias="balanceDetailed")
    detailed_rates: Optional[List[Dict[str, Any]]] = Field(default=None, description="Associative object, where key is the date, and value is the total rate for that date.", alias="detailedRates")
    rooms: Optional[List[GetReservationsWithRateDetailsResponseDataInnerRoomsInner]] = Field(default=None, description="Array with rooms information")
    origin: Optional[StrictStr] = Field(default=None, description="Reservation origin")
    meal_plans: Optional[StrictStr] = Field(default=None, description="Reservation meal plans", alias="mealPlans")
    guest_list: Optional[Dict[str, GetReservationsResponseDataInnerGuestListValue]] = Field(default=None, description="A map of guest IDs to guest objects (key is the Guest ID). It contains an entry for each guest included on the reservation. Only returned if \"includeGuestsDetails\" is true", alias="guestList")
    third_party_identifier: Optional[StrictStr] = Field(default=None, alias="thirdPartyIdentifier")
    custom_fields: Optional[List[GetGuestsModifiedResponseDataInnerCustomFieldsInner]] = Field(default=None, description="List of reservation custom fields. Only returned if \"includeCustomFields\" is true", alias="customFields")
    estimated_arrival_time: Optional[StrictStr] = Field(default=None, description="Estimated arrival time, 24-hour format.", alias="estimatedArrivalTime")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total price of the booking")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance currently owed")
    date_imported: Optional[StrictStr] = Field(default=None, description="Date when the reservation was imported", alias="dateImported")
    __properties: ClassVar[List[str]] = ["propertyID", "reservationID", "isDeleted", "dateCreated", "dateCreatedUTC", "dateModified", "dateModifiedUTC", "dateCancelled", "dateCancelledUTC", "status", "reservationCheckIn", "reservationCheckOut", "guestID", "profileID", "guestCountry", "sourceName", "source", "sourceCategory", "sourceReservationID", "propertyCurrency", "balanceDetailed", "detailedRates", "rooms", "origin", "mealPlans", "guestList", "thirdPartyIdentifier", "customFields", "estimatedArrivalTime", "total", "balance", "dateImported"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show']):
            raise ValueError("must be one of enum values ('confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReservationsWithRateDetailsResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in source (list)
        _items = []
        if self.source:
            for _item_source in self.source:
                if _item_source:
                    _items.append(_item_source.to_dict())
            _dict['source'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in balance_detailed (list)
        _items = []
        if self.balance_detailed:
            for _item_balance_detailed in self.balance_detailed:
                if _item_balance_detailed:
                    _items.append(_item_balance_detailed.to_dict())
            _dict['balanceDetailed'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rooms (list)
        _items = []
        if self.rooms:
            for _item_rooms in self.rooms:
                if _item_rooms:
                    _items.append(_item_rooms.to_dict())
            _dict['rooms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in guest_list (dict)
        _field_dict = {}
        if self.guest_list:
            for _key_guest_list in self.guest_list:
                if self.guest_list[_key_guest_list]:
                    _field_dict[_key_guest_list] = self.guest_list[_key_guest_list].to_dict()
            _dict['guestList'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        # set to None if date_cancelled (nullable) is None
        # and model_fields_set contains the field
        if self.date_cancelled is None and "date_cancelled" in self.model_fields_set:
            _dict['dateCancelled'] = None

        # set to None if date_cancelled_utc (nullable) is None
        # and model_fields_set contains the field
        if self.date_cancelled_utc is None and "date_cancelled_utc" in self.model_fields_set:
            _dict['dateCancelledUTC'] = None

        # set to None if source_category (nullable) is None
        # and model_fields_set contains the field
        if self.source_category is None and "source_category" in self.model_fields_set:
            _dict['sourceCategory'] = None

        # set to None if source_reservation_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_reservation_id is None and "source_reservation_id" in self.model_fields_set:
            _dict['sourceReservationID'] = None

        # set to None if property_currency (nullable) is None
        # and model_fields_set contains the field
        if self.property_currency is None and "property_currency" in self.model_fields_set:
            _dict['propertyCurrency'] = None

        # set to None if guest_list (nullable) is None
        # and model_fields_set contains the field
        if self.guest_list is None and "guest_list" in self.model_fields_set:
            _dict['guestList'] = None

        # set to None if custom_fields (nullable) is None
        # and model_fields_set contains the field
        if self.custom_fields is None and "custom_fields" in self.model_fields_set:
            _dict['customFields'] = None

        # set to None if estimated_arrival_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_arrival_time is None and "estimated_arrival_time" in self.model_fields_set:
            _dict['estimatedArrivalTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReservationsWithRateDetailsResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyID": obj.get("propertyID"),
            "reservationID": obj.get("reservationID"),
            "isDeleted": obj.get("isDeleted"),
            "dateCreated": obj.get("dateCreated"),
            "dateCreatedUTC": obj.get("dateCreatedUTC"),
            "dateModified": obj.get("dateModified"),
            "dateModifiedUTC": obj.get("dateModifiedUTC"),
            "dateCancelled": obj.get("dateCancelled"),
            "dateCancelledUTC": obj.get("dateCancelledUTC"),
            "status": obj.get("status"),
            "reservationCheckIn": obj.get("reservationCheckIn"),
            "reservationCheckOut": obj.get("reservationCheckOut"),
            "guestID": obj.get("guestID"),
            "profileID": obj.get("profileID"),
            "guestCountry": obj.get("guestCountry"),
            "sourceName": obj.get("sourceName"),
            "source": [GetReservationsWithRateDetailsResponseDataInnerSourceInner.from_dict(_item) for _item in obj["source"]] if obj.get("source") is not None else None,
            "sourceCategory": obj.get("sourceCategory"),
            "sourceReservationID": obj.get("sourceReservationID"),
            "propertyCurrency": obj.get("propertyCurrency"),
            "balanceDetailed": [GetReservationResponseDataBalanceDetailedOneOf.from_dict(_item) for _item in obj["balanceDetailed"]] if obj.get("balanceDetailed") is not None else None,
            "detailedRates": obj.get("detailedRates"),
            "rooms": [GetReservationsWithRateDetailsResponseDataInnerRoomsInner.from_dict(_item) for _item in obj["rooms"]] if obj.get("rooms") is not None else None,
            "origin": obj.get("origin"),
            "mealPlans": obj.get("mealPlans"),
            "guestList": dict(
                (_k, GetReservationsResponseDataInnerGuestListValue.from_dict(_v))
                for _k, _v in obj["guestList"].items()
            )
            if obj.get("guestList") is not None
            else None,
            "thirdPartyIdentifier": obj.get("thirdPartyIdentifier"),
            "customFields": [GetGuestsModifiedResponseDataInnerCustomFieldsInner.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "estimatedArrivalTime": obj.get("estimatedArrivalTime"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "dateImported": obj.get("dateImported")
        })
        return _obj



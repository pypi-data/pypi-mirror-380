# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from cloudbeds_pms_v1_3.models.get_group_notes_response import GetGroupNotesResponse
from cloudbeds_pms_v1_3.models.get_groups_response import GetGroupsResponse
from cloudbeds_pms_v1_3.models.post_group_note_response import PostGroupNoteResponse
from cloudbeds_pms_v1_3.models.post_patch_group_response import PostPatchGroupResponse
from cloudbeds_pms_v1_3.models.post_put_group_response import PostPutGroupResponse

from cloudbeds_pms_v1_3.api_client import ApiClient, RequestSerialized
from cloudbeds_pms_v1_3.api_response import ApiResponse
from cloudbeds_pms_v1_3.rest import RESTResponseType


class GroupsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_group_notes_get(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[StrictStr, Field(description="Group code")],
        page_size: Annotated[StrictInt, Field(description="Number of groups notes to return per page (min: 1, max: 100)")],
        page_number: Annotated[StrictInt, Field(description="Which page in the results to access")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGroupNotesResponse:
        """getGroupNotes

        Returns group notes

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Group code (required)
        :type group_code: str
        :param page_size: Number of groups notes to return per page (min: 1, max: 100) (required)
        :type page_size: int
        :param page_number: Which page in the results to access (required)
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_group_notes_get_serialize(
            property_id=property_id,
            group_code=group_code,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_group_notes_get_with_http_info(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[StrictStr, Field(description="Group code")],
        page_size: Annotated[StrictInt, Field(description="Number of groups notes to return per page (min: 1, max: 100)")],
        page_number: Annotated[StrictInt, Field(description="Which page in the results to access")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGroupNotesResponse]:
        """getGroupNotes

        Returns group notes

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Group code (required)
        :type group_code: str
        :param page_size: Number of groups notes to return per page (min: 1, max: 100) (required)
        :type page_size: int
        :param page_number: Which page in the results to access (required)
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_group_notes_get_serialize(
            property_id=property_id,
            group_code=group_code,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_group_notes_get_without_preload_content(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[StrictStr, Field(description="Group code")],
        page_size: Annotated[StrictInt, Field(description="Number of groups notes to return per page (min: 1, max: 100)")],
        page_number: Annotated[StrictInt, Field(description="Which page in the results to access")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGroupNotes

        Returns group notes

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Group code (required)
        :type group_code: str
        :param page_size: Number of groups notes to return per page (min: 1, max: 100) (required)
        :type page_size: int
        :param page_number: Which page in the results to access (required)
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_group_notes_get_serialize(
            property_id=property_id,
            group_code=group_code,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupNotesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_group_notes_get_serialize(
        self,
        property_id,
        group_code,
        page_size,
        page_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if group_code is not None:
            
            _query_params.append(('groupCode', group_code))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGroupNotes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_groups_get(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[Optional[StrictStr], Field(description="Unique ID for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        created_from: Annotated[Optional[datetime], Field(description="Datetime (lower limit) to be queried")] = None,
        created_to: Annotated[Optional[datetime], Field(description="Datetime (upper limit) to be queried")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of groups to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGroupsResponse:
        """getGroups

        Returns the groups for a property

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Unique ID for a group
        :type group_code: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param created_from: Datetime (lower limit) to be queried
        :type created_from: datetime
        :param created_to: Datetime (upper limit) to be queried
        :type created_to: datetime
        :param page_size: Number of groups to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_groups_get_serialize(
            property_id=property_id,
            group_code=group_code,
            type=type,
            status=status,
            created_from=created_from,
            created_to=created_to,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_groups_get_with_http_info(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[Optional[StrictStr], Field(description="Unique ID for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        created_from: Annotated[Optional[datetime], Field(description="Datetime (lower limit) to be queried")] = None,
        created_to: Annotated[Optional[datetime], Field(description="Datetime (upper limit) to be queried")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of groups to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGroupsResponse]:
        """getGroups

        Returns the groups for a property

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Unique ID for a group
        :type group_code: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param created_from: Datetime (lower limit) to be queried
        :type created_from: datetime
        :param created_to: Datetime (upper limit) to be queried
        :type created_to: datetime
        :param page_size: Number of groups to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_groups_get_serialize(
            property_id=property_id,
            group_code=group_code,
            type=type,
            status=status,
            created_from=created_from,
            created_to=created_to,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_groups_get_without_preload_content(
        self,
        property_id: Annotated[StrictStr, Field(description="Property ID")],
        group_code: Annotated[Optional[StrictStr], Field(description="Unique ID for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        created_from: Annotated[Optional[datetime], Field(description="Datetime (lower limit) to be queried")] = None,
        created_to: Annotated[Optional[datetime], Field(description="Datetime (upper limit) to be queried")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Number of groups to return per page (min: 1, max: 100)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Which page in the results to access")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getGroups

        Returns the groups for a property

        :param property_id: Property ID (required)
        :type property_id: str
        :param group_code: Unique ID for a group
        :type group_code: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param created_from: Datetime (lower limit) to be queried
        :type created_from: datetime
        :param created_to: Datetime (upper limit) to be queried
        :type created_to: datetime
        :param page_size: Number of groups to return per page (min: 1, max: 100)
        :type page_size: int
        :param page_number: Which page in the results to access
        :type page_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_groups_get_serialize(
            property_id=property_id,
            group_code=group_code,
            type=type,
            status=status,
            created_from=created_from,
            created_to=created_to,
            page_size=page_size,
            page_number=page_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGroupsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_groups_get_serialize(
        self,
        property_id,
        group_code,
        type,
        status,
        created_from,
        created_to,
        page_size,
        page_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if group_code is not None:
            
            _query_params.append(('groupCode', group_code))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if created_from is not None:
            if isinstance(created_from, datetime):
                _query_params.append(
                    (
                        'createdFrom',
                        created_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdFrom', created_from))
            
        if created_to is not None:
            if isinstance(created_to, datetime):
                _query_params.append(
                    (
                        'createdTo',
                        created_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdTo', created_to))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getGroups',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_group_post(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="code for a group")] = None,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostPatchGroupResponse:
        """patchGroup

        Updates an existing group with information provided. At least one information field is required for this call.

        :param group_code: code for a group
        :type group_code: str
        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_group_post_serialize(
            group_code=group_code,
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPatchGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_group_post_with_http_info(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="code for a group")] = None,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostPatchGroupResponse]:
        """patchGroup

        Updates an existing group with information provided. At least one information field is required for this call.

        :param group_code: code for a group
        :type group_code: str
        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_group_post_serialize(
            group_code=group_code,
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPatchGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_group_post_without_preload_content(
        self,
        group_code: Annotated[Optional[StrictStr], Field(description="code for a group")] = None,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patchGroup

        Updates an existing group with information provided. At least one information field is required for this call.

        :param group_code: code for a group
        :type group_code: str
        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_group_post_serialize(
            group_code=group_code,
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPatchGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_group_post_serialize(
        self,
        group_code,
        property_id,
        name,
        type,
        status,
        source_id,
        address1,
        address2,
        city,
        zip,
        state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if group_code is not None:
            _form_params.append(('groupCode', group_code))
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if name is not None:
            _form_params.append(('name', name))
        if type is not None:
            _form_params.append(('type', type))
        if status is not None:
            _form_params.append(('status', status))
        if source_id is not None:
            _form_params.append(('sourceID', source_id))
        if address1 is not None:
            _form_params.append(('address1', address1))
        if address2 is not None:
            _form_params.append(('address2', address2))
        if city is not None:
            _form_params.append(('city', city))
        if zip is not None:
            _form_params.append(('zip', zip))
        if state is not None:
            _form_params.append(('state', state))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/patchGroup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_group_note_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="Group code")] = None,
        group_note: Annotated[Optional[StrictStr], Field(description="Group note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostGroupNoteResponse:
        """postGroupNote

        Adds a group note

        :param property_id: Property ID
        :type property_id: str
        :param group_code: Group code
        :type group_code: str
        :param group_note: Group note
        :type group_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_group_note_post_serialize(
            property_id=property_id,
            group_code=group_code,
            group_note=group_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGroupNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_group_note_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="Group code")] = None,
        group_note: Annotated[Optional[StrictStr], Field(description="Group note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostGroupNoteResponse]:
        """postGroupNote

        Adds a group note

        :param property_id: Property ID
        :type property_id: str
        :param group_code: Group code
        :type group_code: str
        :param group_note: Group note
        :type group_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_group_note_post_serialize(
            property_id=property_id,
            group_code=group_code,
            group_note=group_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGroupNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_group_note_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        group_code: Annotated[Optional[StrictStr], Field(description="Group code")] = None,
        group_note: Annotated[Optional[StrictStr], Field(description="Group note")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postGroupNote

        Adds a group note

        :param property_id: Property ID
        :type property_id: str
        :param group_code: Group code
        :type group_code: str
        :param group_note: Group note
        :type group_note: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_group_note_post_serialize(
            property_id=property_id,
            group_code=group_code,
            group_note=group_note,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostGroupNoteResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_group_note_post_serialize(
        self,
        property_id,
        group_code,
        group_note,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if group_code is not None:
            _form_params.append(('groupCode', group_code))
        if group_note is not None:
            _form_params.append(('groupNote', group_note))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postGroupNote',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_group_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        commission_type: Annotated[Optional[StrictStr], Field(description="Commission Type")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostPutGroupResponse:
        """putGroup

        Adds a group to the property. Please note that the default setting for 'Route to Group Folio' will be 'No,' and the 'Reservation Folio Configuration' will be set as the default folio configuration. You can edit these settings through the user interface (UI).

        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param commission_type: Commission Type
        :type commission_type: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_group_post_serialize(
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            commission_type=commission_type,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPutGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_group_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        commission_type: Annotated[Optional[StrictStr], Field(description="Commission Type")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostPutGroupResponse]:
        """putGroup

        Adds a group to the property. Please note that the default setting for 'Route to Group Folio' will be 'No,' and the 'Reservation Folio Configuration' will be set as the default folio configuration. You can edit these settings through the user interface (UI).

        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param commission_type: Commission Type
        :type commission_type: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_group_post_serialize(
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            commission_type=commission_type,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPutGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_group_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Name for a group")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of group")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Group status")] = None,
        commission_type: Annotated[Optional[StrictStr], Field(description="Commission Type")] = None,
        source_id: Annotated[Optional[StrictStr], Field(description="Source ID for a group")] = None,
        address1: Annotated[Optional[StrictStr], Field(description="Address line 1 for a group")] = None,
        address2: Annotated[Optional[StrictStr], Field(description="Address line 2 for a group")] = None,
        city: Annotated[Optional[StrictStr], Field(description="City for a group")] = None,
        zip: Annotated[Optional[StrictStr], Field(description="Zip for a group")] = None,
        state: Annotated[Optional[StrictStr], Field(description="State for a group")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """putGroup

        Adds a group to the property. Please note that the default setting for 'Route to Group Folio' will be 'No,' and the 'Reservation Folio Configuration' will be set as the default folio configuration. You can edit these settings through the user interface (UI).

        :param property_id: Property ID
        :type property_id: str
        :param name: Name for a group
        :type name: str
        :param type: The type of group
        :type type: str
        :param status: Group status
        :type status: str
        :param commission_type: Commission Type
        :type commission_type: str
        :param source_id: Source ID for a group
        :type source_id: str
        :param address1: Address line 1 for a group
        :type address1: str
        :param address2: Address line 2 for a group
        :type address2: str
        :param city: City for a group
        :type city: str
        :param zip: Zip for a group
        :type zip: str
        :param state: State for a group
        :type state: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_group_post_serialize(
            property_id=property_id,
            name=name,
            type=type,
            status=status,
            commission_type=commission_type,
            source_id=source_id,
            address1=address1,
            address2=address2,
            city=city,
            zip=zip,
            state=state,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostPutGroupResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_group_post_serialize(
        self,
        property_id,
        name,
        type,
        status,
        commission_type,
        source_id,
        address1,
        address2,
        city,
        zip,
        state,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if name is not None:
            _form_params.append(('name', name))
        if type is not None:
            _form_params.append(('type', type))
        if status is not None:
            _form_params.append(('status', status))
        if commission_type is not None:
            _form_params.append(('commissionType', commission_type))
        if source_id is not None:
            _form_params.append(('sourceID', source_id))
        if address1 is not None:
            _form_params.append(('address1', address1))
        if address2 is not None:
            _form_params.append(('address2', address2))
        if city is not None:
            _form_params.append(('city', city))
        if zip is not None:
            _form_params.append(('zip', zip))
        if state is not None:
            _form_params.append(('state', state))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/putGroup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



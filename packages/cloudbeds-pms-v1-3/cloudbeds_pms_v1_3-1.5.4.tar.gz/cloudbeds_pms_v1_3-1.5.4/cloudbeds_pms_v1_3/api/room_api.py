# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from cloudbeds_pms_v1_3.models.delete_room_block_response import DeleteRoomBlockResponse
from cloudbeds_pms_v1_3.models.get_available_room_types_response import GetAvailableRoomTypesResponse
from cloudbeds_pms_v1_3.models.get_reservation_room_details_response import GetReservationRoomDetailsResponse
from cloudbeds_pms_v1_3.models.get_room_blocks_response import GetRoomBlocksResponse
from cloudbeds_pms_v1_3.models.get_room_types_response import GetRoomTypesResponse
from cloudbeds_pms_v1_3.models.get_rooms_fees_and_taxes_response import GetRoomsFeesAndTaxesResponse
from cloudbeds_pms_v1_3.models.get_rooms_response import GetRoomsResponse
from cloudbeds_pms_v1_3.models.get_rooms_unassigned_response import GetRoomsUnassignedResponse
from cloudbeds_pms_v1_3.models.post_room_assign_response import PostRoomAssignResponse
from cloudbeds_pms_v1_3.models.post_room_block_request_rooms_inner import PostRoomBlockRequestRoomsInner
from cloudbeds_pms_v1_3.models.post_room_block_response import PostRoomBlockResponse
from cloudbeds_pms_v1_3.models.post_room_check_in_response import PostRoomCheckInResponse
from cloudbeds_pms_v1_3.models.post_room_check_out_response import PostRoomCheckOutResponse
from cloudbeds_pms_v1_3.models.put_room_block_request_rooms_inner import PutRoomBlockRequestRoomsInner
from cloudbeds_pms_v1_3.models.put_room_block_response import PutRoomBlockResponse

from cloudbeds_pms_v1_3.api_client import ApiClient, RequestSerialized
from cloudbeds_pms_v1_3.api_response import ApiResponse
from cloudbeds_pms_v1_3.rest import RESTResponseType


class RoomApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_room_block_delete(
        self,
        room_block_id: Annotated[StrictStr, Field(description="Room block ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteRoomBlockResponse:
        """deleteRoomBlock

        Deletes a room block

        :param room_block_id: Room block ID (required)
        :type room_block_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_room_block_delete_serialize(
            room_block_id=room_block_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_room_block_delete_with_http_info(
        self,
        room_block_id: Annotated[StrictStr, Field(description="Room block ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteRoomBlockResponse]:
        """deleteRoomBlock

        Deletes a room block

        :param room_block_id: Room block ID (required)
        :type room_block_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_room_block_delete_serialize(
            room_block_id=room_block_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_room_block_delete_without_preload_content(
        self,
        room_block_id: Annotated[StrictStr, Field(description="Room block ID")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """deleteRoomBlock

        Deletes a room block

        :param room_block_id: Room block ID (required)
        :type room_block_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_room_block_delete_serialize(
            room_block_id=room_block_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_room_block_delete_serialize(
        self,
        room_block_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if room_block_id is not None:
            
            _query_params.append(('roomBlockID', room_block_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/deleteRoomBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_available_room_types_get(
        self,
        start_date: Annotated[date, Field(description="Check-In date.")],
        end_date: Annotated[date, Field(description="Check-Out date.")],
        rooms: Annotated[StrictInt, Field(description="Number of rooms.")],
        adults: Annotated[StrictInt, Field(description="Number of adults.")],
        children: Annotated[StrictInt, Field(description="Number of children.")],
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        promo_code: Annotated[Optional[StrictStr], Field(description="Promotional code")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort parameter")] = None,
        order: Optional[StrictStr] = None,
        min_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimum daily rate. Used to filter results")] = None,
        max_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum daily rate. Used to filter results")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAvailableRoomTypesResponse:
        """getAvailableRoomTypes

        Returns a list of room types with availability considering the informed parameters ### Group account support

        :param start_date: Check-In date. (required)
        :type start_date: date
        :param end_date: Check-Out date. (required)
        :type end_date: date
        :param rooms: Number of rooms. (required)
        :type rooms: int
        :param adults: Number of adults. (required)
        :type adults: int
        :param children: Number of children. (required)
        :type children: int
        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param promo_code: Promotional code
        :type promo_code: str
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param sort: Sort parameter
        :type sort: str
        :param order: 
        :type order: str
        :param min_rate: Minimum daily rate. Used to filter results
        :type min_rate: float
        :param max_rate: Maximum daily rate. Used to filter results
        :type max_rate: float
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_room_types_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            adults=adults,
            children=children,
            property_ids=property_ids,
            promo_code=promo_code,
            detailed_rates=detailed_rates,
            sort=sort,
            order=order,
            min_rate=min_rate,
            max_rate=max_rate,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_available_room_types_get_with_http_info(
        self,
        start_date: Annotated[date, Field(description="Check-In date.")],
        end_date: Annotated[date, Field(description="Check-Out date.")],
        rooms: Annotated[StrictInt, Field(description="Number of rooms.")],
        adults: Annotated[StrictInt, Field(description="Number of adults.")],
        children: Annotated[StrictInt, Field(description="Number of children.")],
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        promo_code: Annotated[Optional[StrictStr], Field(description="Promotional code")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort parameter")] = None,
        order: Optional[StrictStr] = None,
        min_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimum daily rate. Used to filter results")] = None,
        max_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum daily rate. Used to filter results")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAvailableRoomTypesResponse]:
        """getAvailableRoomTypes

        Returns a list of room types with availability considering the informed parameters ### Group account support

        :param start_date: Check-In date. (required)
        :type start_date: date
        :param end_date: Check-Out date. (required)
        :type end_date: date
        :param rooms: Number of rooms. (required)
        :type rooms: int
        :param adults: Number of adults. (required)
        :type adults: int
        :param children: Number of children. (required)
        :type children: int
        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param promo_code: Promotional code
        :type promo_code: str
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param sort: Sort parameter
        :type sort: str
        :param order: 
        :type order: str
        :param min_rate: Minimum daily rate. Used to filter results
        :type min_rate: float
        :param max_rate: Maximum daily rate. Used to filter results
        :type max_rate: float
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_room_types_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            adults=adults,
            children=children,
            property_ids=property_ids,
            promo_code=promo_code,
            detailed_rates=detailed_rates,
            sort=sort,
            order=order,
            min_rate=min_rate,
            max_rate=max_rate,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_available_room_types_get_without_preload_content(
        self,
        start_date: Annotated[date, Field(description="Check-In date.")],
        end_date: Annotated[date, Field(description="Check-Out date.")],
        rooms: Annotated[StrictInt, Field(description="Number of rooms.")],
        adults: Annotated[StrictInt, Field(description="Number of adults.")],
        children: Annotated[StrictInt, Field(description="Number of children.")],
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        promo_code: Annotated[Optional[StrictStr], Field(description="Promotional code")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sort parameter")] = None,
        order: Optional[StrictStr] = None,
        min_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Minimum daily rate. Used to filter results")] = None,
        max_rate: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Maximum daily rate. Used to filter results")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getAvailableRoomTypes

        Returns a list of room types with availability considering the informed parameters ### Group account support

        :param start_date: Check-In date. (required)
        :type start_date: date
        :param end_date: Check-Out date. (required)
        :type end_date: date
        :param rooms: Number of rooms. (required)
        :type rooms: int
        :param adults: Number of adults. (required)
        :type adults: int
        :param children: Number of children. (required)
        :type children: int
        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param promo_code: Promotional code
        :type promo_code: str
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param sort: Sort parameter
        :type sort: str
        :param order: 
        :type order: str
        :param min_rate: Minimum daily rate. Used to filter results
        :type min_rate: float
        :param max_rate: Maximum daily rate. Used to filter results
        :type max_rate: float
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_room_types_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            adults=adults,
            children=children,
            property_ids=property_ids,
            promo_code=promo_code,
            detailed_rates=detailed_rates,
            sort=sort,
            order=order,
            min_rate=min_rate,
            max_rate=max_rate,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAvailableRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_available_room_types_get_serialize(
        self,
        start_date,
        end_date,
        rooms,
        adults,
        children,
        property_ids,
        promo_code,
        detailed_rates,
        sort,
        order,
        min_rate,
        max_rate,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if rooms is not None:
            
            _query_params.append(('rooms', rooms))
            
        if adults is not None:
            
            _query_params.append(('adults', adults))
            
        if children is not None:
            
            _query_params.append(('children', children))
            
        if promo_code is not None:
            
            _query_params.append(('promoCode', promo_code))
            
        if detailed_rates is not None:
            
            _query_params.append(('detailedRates', detailed_rates))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if order is not None:
            
            _query_params.append(('order', order))
            
        if min_rate is not None:
            
            _query_params.append(('minRate', min_rate))
            
        if max_rate is not None:
            
            _query_params.append(('maxRate', max_rate))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getAvailableRoomTypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_reservation_room_details_get(
        self,
        sub_reservation_id: Annotated[StrictStr, Field(description="Sub Reservation ID of the specific assigned room")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetReservationRoomDetailsResponse:
        """getReservationRoomDetails

        Returns information about particular room in reservation by its subReservationID

        :param sub_reservation_id: Sub Reservation ID of the specific assigned room (required)
        :type sub_reservation_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reservation_room_details_get_serialize(
            sub_reservation_id=sub_reservation_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetReservationRoomDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_reservation_room_details_get_with_http_info(
        self,
        sub_reservation_id: Annotated[StrictStr, Field(description="Sub Reservation ID of the specific assigned room")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetReservationRoomDetailsResponse]:
        """getReservationRoomDetails

        Returns information about particular room in reservation by its subReservationID

        :param sub_reservation_id: Sub Reservation ID of the specific assigned room (required)
        :type sub_reservation_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reservation_room_details_get_serialize(
            sub_reservation_id=sub_reservation_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetReservationRoomDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_reservation_room_details_get_without_preload_content(
        self,
        sub_reservation_id: Annotated[StrictStr, Field(description="Sub Reservation ID of the specific assigned room")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getReservationRoomDetails

        Returns information about particular room in reservation by its subReservationID

        :param sub_reservation_id: Sub Reservation ID of the specific assigned room (required)
        :type sub_reservation_id: str
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_reservation_room_details_get_serialize(
            sub_reservation_id=sub_reservation_id,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetReservationRoomDetailsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_reservation_room_details_get_serialize(
        self,
        sub_reservation_id,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if sub_reservation_id is not None:
            
            _query_params.append(('subReservationID', sub_reservation_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getReservationRoomDetails',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_room_blocks_get(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID")] = None,
        start_date: Annotated[Optional[date], Field(description="date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        end_date: Annotated[Optional[date], Field(description="date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRoomBlocksResponse:
        """getRoomBlocks

        Returns a list of all room blocks considering the informed parameters.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_type_id: Room type ID
        :type room_type_id: str
        :param room_id: Room ID
        :type room_id: str
        :param start_date: date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type start_date: date
        :param end_date: date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type end_date: date
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_blocks_get_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_type_id=room_type_id,
            room_id=room_id,
            start_date=start_date,
            end_date=end_date,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_room_blocks_get_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID")] = None,
        start_date: Annotated[Optional[date], Field(description="date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        end_date: Annotated[Optional[date], Field(description="date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRoomBlocksResponse]:
        """getRoomBlocks

        Returns a list of all room blocks considering the informed parameters.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_type_id: Room type ID
        :type room_type_id: str
        :param room_id: Room ID
        :type room_id: str
        :param start_date: date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type start_date: date
        :param end_date: date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type end_date: date
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_blocks_get_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_type_id=room_type_id,
            room_id=room_id,
            start_date=start_date,
            end_date=end_date,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_room_blocks_get_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID")] = None,
        start_date: Annotated[Optional[date], Field(description="date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        end_date: Annotated[Optional[date], Field(description="date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getRoomBlocks

        Returns a list of all room blocks considering the informed parameters.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_type_id: Room type ID
        :type room_type_id: str
        :param room_id: Room ID
        :type room_id: str
        :param start_date: date\"] Start date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type start_date: date
        :param end_date: date\"] End date - will filter for any room blocks that include this date (Date range must be one month or less)
        :type end_date: date
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_blocks_get_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_type_id=room_type_id,
            room_id=room_id,
            start_date=start_date,
            end_date=end_date,
            page_number=page_number,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomBlocksResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_room_blocks_get_serialize(
        self,
        property_id,
        room_block_id,
        room_type_id,
        room_id,
        start_date,
        end_date,
        page_number,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if room_block_id is not None:
            
            _query_params.append(('roomBlockID', room_block_id))
            
        if room_type_id is not None:
            
            _query_params.append(('roomTypeID', room_type_id))
            
        if room_id is not None:
            
            _query_params.append(('roomID', room_id))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getRoomBlocks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_room_types_get(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_ids: Annotated[Optional[StrictStr], Field(description="Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        start_date: Annotated[Optional[date], Field(description="Check-in date. Required for the rates to be returned.")] = None,
        end_date: Annotated[Optional[date], Field(description="Check-out date. Required for the rates to be returned.")] = None,
        adults: Annotated[Optional[StrictInt], Field(description="Number of adults. Required for the rates to be returned.")] = None,
        children: Annotated[Optional[StrictInt], Field(description="Number of children. Required for the rates to be returned.")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        room_type_name: Annotated[Optional[StrictStr], Field(description="Room type name, used to filter")] = None,
        property_city: Annotated[Optional[StrictStr], Field(description="Hotel city, used to filter")] = None,
        property_name: Annotated[Optional[StrictStr], Field(description="Hotel name, used to filter")] = None,
        max_guests: Annotated[Optional[StrictStr], Field(description="Max number of guests, used to filter")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRoomTypesResponse:
        """getRoomTypes

        Returns a list of room types filtered by the selected parameters ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_ids: Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89
        :type room_type_ids: str
        :param start_date: Check-in date. Required for the rates to be returned.
        :type start_date: date
        :param end_date: Check-out date. Required for the rates to be returned.
        :type end_date: date
        :param adults: Number of adults. Required for the rates to be returned.
        :type adults: int
        :param children: Number of children. Required for the rates to be returned.
        :type children: int
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param room_type_name: Room type name, used to filter
        :type room_type_name: str
        :param property_city: Hotel city, used to filter
        :type property_city: str
        :param property_name: Hotel name, used to filter
        :type property_name: str
        :param max_guests: Max number of guests, used to filter
        :type max_guests: str
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_types_get_serialize(
            property_ids=property_ids,
            room_type_ids=room_type_ids,
            start_date=start_date,
            end_date=end_date,
            adults=adults,
            children=children,
            detailed_rates=detailed_rates,
            room_type_name=room_type_name,
            property_city=property_city,
            property_name=property_name,
            max_guests=max_guests,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_room_types_get_with_http_info(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_ids: Annotated[Optional[StrictStr], Field(description="Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        start_date: Annotated[Optional[date], Field(description="Check-in date. Required for the rates to be returned.")] = None,
        end_date: Annotated[Optional[date], Field(description="Check-out date. Required for the rates to be returned.")] = None,
        adults: Annotated[Optional[StrictInt], Field(description="Number of adults. Required for the rates to be returned.")] = None,
        children: Annotated[Optional[StrictInt], Field(description="Number of children. Required for the rates to be returned.")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        room_type_name: Annotated[Optional[StrictStr], Field(description="Room type name, used to filter")] = None,
        property_city: Annotated[Optional[StrictStr], Field(description="Hotel city, used to filter")] = None,
        property_name: Annotated[Optional[StrictStr], Field(description="Hotel name, used to filter")] = None,
        max_guests: Annotated[Optional[StrictStr], Field(description="Max number of guests, used to filter")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRoomTypesResponse]:
        """getRoomTypes

        Returns a list of room types filtered by the selected parameters ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_ids: Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89
        :type room_type_ids: str
        :param start_date: Check-in date. Required for the rates to be returned.
        :type start_date: date
        :param end_date: Check-out date. Required for the rates to be returned.
        :type end_date: date
        :param adults: Number of adults. Required for the rates to be returned.
        :type adults: int
        :param children: Number of children. Required for the rates to be returned.
        :type children: int
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param room_type_name: Room type name, used to filter
        :type room_type_name: str
        :param property_city: Hotel city, used to filter
        :type property_city: str
        :param property_name: Hotel name, used to filter
        :type property_name: str
        :param max_guests: Max number of guests, used to filter
        :type max_guests: str
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_types_get_serialize(
            property_ids=property_ids,
            room_type_ids=room_type_ids,
            start_date=start_date,
            end_date=end_date,
            adults=adults,
            children=children,
            detailed_rates=detailed_rates,
            room_type_name=room_type_name,
            property_city=property_city,
            property_name=property_name,
            max_guests=max_guests,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_room_types_get_without_preload_content(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_ids: Annotated[Optional[StrictStr], Field(description="Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89")] = None,
        start_date: Annotated[Optional[date], Field(description="Check-in date. Required for the rates to be returned.")] = None,
        end_date: Annotated[Optional[date], Field(description="Check-out date. Required for the rates to be returned.")] = None,
        adults: Annotated[Optional[StrictInt], Field(description="Number of adults. Required for the rates to be returned.")] = None,
        children: Annotated[Optional[StrictInt], Field(description="Number of children. Required for the rates to be returned.")] = None,
        detailed_rates: Annotated[Optional[StrictBool], Field(description="If detailed rates are expected")] = None,
        room_type_name: Annotated[Optional[StrictStr], Field(description="Room type name, used to filter")] = None,
        property_city: Annotated[Optional[StrictStr], Field(description="Hotel city, used to filter")] = None,
        property_name: Annotated[Optional[StrictStr], Field(description="Hotel name, used to filter")] = None,
        max_guests: Annotated[Optional[StrictStr], Field(description="Max number of guests, used to filter")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getRoomTypes

        Returns a list of room types filtered by the selected parameters ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_ids: Room Type ID list, If more than one, send as comma-separated, i.e. 37,345,89
        :type room_type_ids: str
        :param start_date: Check-in date. Required for the rates to be returned.
        :type start_date: date
        :param end_date: Check-out date. Required for the rates to be returned.
        :type end_date: date
        :param adults: Number of adults. Required for the rates to be returned.
        :type adults: int
        :param children: Number of children. Required for the rates to be returned.
        :type children: int
        :param detailed_rates: If detailed rates are expected
        :type detailed_rates: bool
        :param room_type_name: Room type name, used to filter
        :type room_type_name: str
        :param property_city: Hotel city, used to filter
        :type property_city: str
        :param property_name: Hotel name, used to filter
        :type property_name: str
        :param max_guests: Max number of guests, used to filter
        :type max_guests: str
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `sorting_position`. Examples: - `sort=sorting_position` - `sort=sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_room_types_get_serialize(
            property_ids=property_ids,
            room_type_ids=room_type_ids,
            start_date=start_date,
            end_date=end_date,
            adults=adults,
            children=children,
            detailed_rates=detailed_rates,
            room_type_name=room_type_name,
            property_city=property_city,
            property_name=property_name,
            max_guests=max_guests,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomTypesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_room_types_get_serialize(
        self,
        property_ids,
        room_type_ids,
        start_date,
        end_date,
        adults,
        children,
        detailed_rates,
        room_type_name,
        property_city,
        property_name,
        max_guests,
        page_number,
        page_size,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if room_type_ids is not None:
            
            _query_params.append(('roomTypeIDs', room_type_ids))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if adults is not None:
            
            _query_params.append(('adults', adults))
            
        if children is not None:
            
            _query_params.append(('children', children))
            
        if detailed_rates is not None:
            
            _query_params.append(('detailedRates', detailed_rates))
            
        if room_type_name is not None:
            
            _query_params.append(('roomTypeName', room_type_name))
            
        if property_city is not None:
            
            _query_params.append(('propertyCity', property_city))
            
        if property_name is not None:
            
            _query_params.append(('propertyName', property_name))
            
        if max_guests is not None:
            
            _query_params.append(('maxGuests', max_guests))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getRoomTypes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_rooms_fees_and_taxes_get(
        self,
        start_date: Annotated[date, Field(description="Check-in date")],
        end_date: Annotated[date, Field(description="Check-out date")],
        rooms_total: Annotated[Union[StrictFloat, StrictInt], Field(description="Total value of the rooms to be booked, with included taxes")],
        rooms_count: Annotated[StrictInt, Field(description="Number of rooms to be booked")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRoomsFeesAndTaxesResponse:
        """getRoomsFeesAndTaxes

        Get applicable fees and tax to a booking. This is meant to be used on checkout to display to the guest.

        :param start_date: Check-in date (required)
        :type start_date: date
        :param end_date: Check-out date (required)
        :type end_date: date
        :param rooms_total: Total value of the rooms to be booked, with included taxes (required)
        :type rooms_total: float
        :param rooms_count: Number of rooms to be booked (required)
        :type rooms_count: int
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_fees_and_taxes_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms_total=rooms_total,
            rooms_count=rooms_count,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsFeesAndTaxesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_rooms_fees_and_taxes_get_with_http_info(
        self,
        start_date: Annotated[date, Field(description="Check-in date")],
        end_date: Annotated[date, Field(description="Check-out date")],
        rooms_total: Annotated[Union[StrictFloat, StrictInt], Field(description="Total value of the rooms to be booked, with included taxes")],
        rooms_count: Annotated[StrictInt, Field(description="Number of rooms to be booked")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRoomsFeesAndTaxesResponse]:
        """getRoomsFeesAndTaxes

        Get applicable fees and tax to a booking. This is meant to be used on checkout to display to the guest.

        :param start_date: Check-in date (required)
        :type start_date: date
        :param end_date: Check-out date (required)
        :type end_date: date
        :param rooms_total: Total value of the rooms to be booked, with included taxes (required)
        :type rooms_total: float
        :param rooms_count: Number of rooms to be booked (required)
        :type rooms_count: int
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_fees_and_taxes_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms_total=rooms_total,
            rooms_count=rooms_count,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsFeesAndTaxesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_rooms_fees_and_taxes_get_without_preload_content(
        self,
        start_date: Annotated[date, Field(description="Check-in date")],
        end_date: Annotated[date, Field(description="Check-out date")],
        rooms_total: Annotated[Union[StrictFloat, StrictInt], Field(description="Total value of the rooms to be booked, with included taxes")],
        rooms_count: Annotated[StrictInt, Field(description="Number of rooms to be booked")],
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getRoomsFeesAndTaxes

        Get applicable fees and tax to a booking. This is meant to be used on checkout to display to the guest.

        :param start_date: Check-in date (required)
        :type start_date: date
        :param end_date: Check-out date (required)
        :type end_date: date
        :param rooms_total: Total value of the rooms to be booked, with included taxes (required)
        :type rooms_total: float
        :param rooms_count: Number of rooms to be booked (required)
        :type rooms_count: int
        :param property_id: Property ID
        :type property_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_fees_and_taxes_get_serialize(
            start_date=start_date,
            end_date=end_date,
            rooms_total=rooms_total,
            rooms_count=rooms_count,
            property_id=property_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsFeesAndTaxesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_rooms_fees_and_taxes_get_serialize(
        self,
        start_date,
        end_date,
        rooms_total,
        rooms_count,
        property_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if rooms_total is not None:
            
            _query_params.append(('roomsTotal', rooms_total))
            
        if rooms_count is not None:
            
            _query_params.append(('roomsCount', rooms_count))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getRoomsFeesAndTaxes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_rooms_get(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID, comma-separated, i.e. 37,345,89")] = None,
        room_type_name_short: Annotated[Optional[StrictStr], Field(description="Room Type (short-version)")] = None,
        start_date: Annotated[Optional[date], Field(description="Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.")] = None,
        end_date: Annotated[Optional[date], Field(description="Final stay date. Necessary if startDate is sent.")] = None,
        include_room_relations: Annotated[Optional[StrictInt], Field(description="Determines whether room relations info should be included in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRoomsResponse:
        """getRooms

        Returns a list of all rooms considering the informed parameters. If Check-in/out dates are sent, only unassigned rooms are returned. ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_id: Room type ID, comma-separated, i.e. 37,345,89
        :type room_type_id: str
        :param room_type_name_short: Room Type (short-version)
        :type room_type_name_short: str
        :param start_date: Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.
        :type start_date: date
        :param end_date: Final stay date. Necessary if startDate is sent.
        :type end_date: date
        :param include_room_relations: Determines whether room relations info should be included in the response
        :type include_room_relations: int
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_get_serialize(
            property_ids=property_ids,
            room_type_id=room_type_id,
            room_type_name_short=room_type_name_short,
            start_date=start_date,
            end_date=end_date,
            include_room_relations=include_room_relations,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_rooms_get_with_http_info(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID, comma-separated, i.e. 37,345,89")] = None,
        room_type_name_short: Annotated[Optional[StrictStr], Field(description="Room Type (short-version)")] = None,
        start_date: Annotated[Optional[date], Field(description="Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.")] = None,
        end_date: Annotated[Optional[date], Field(description="Final stay date. Necessary if startDate is sent.")] = None,
        include_room_relations: Annotated[Optional[StrictInt], Field(description="Determines whether room relations info should be included in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRoomsResponse]:
        """getRooms

        Returns a list of all rooms considering the informed parameters. If Check-in/out dates are sent, only unassigned rooms are returned. ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_id: Room type ID, comma-separated, i.e. 37,345,89
        :type room_type_id: str
        :param room_type_name_short: Room Type (short-version)
        :type room_type_name_short: str
        :param start_date: Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.
        :type start_date: date
        :param end_date: Final stay date. Necessary if startDate is sent.
        :type end_date: date
        :param include_room_relations: Determines whether room relations info should be included in the response
        :type include_room_relations: int
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_get_serialize(
            property_ids=property_ids,
            room_type_id=room_type_id,
            room_type_name_short=room_type_name_short,
            start_date=start_date,
            end_date=end_date,
            include_room_relations=include_room_relations,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_rooms_get_without_preload_content(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="Property ID list, comma-separated, i.e. 37,345,89")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room type ID, comma-separated, i.e. 37,345,89")] = None,
        room_type_name_short: Annotated[Optional[StrictStr], Field(description="Room Type (short-version)")] = None,
        start_date: Annotated[Optional[date], Field(description="Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.")] = None,
        end_date: Annotated[Optional[date], Field(description="Final stay date. Necessary if startDate is sent.")] = None,
        include_room_relations: Annotated[Optional[StrictInt], Field(description="Determines whether room relations info should be included in the response")] = None,
        page_number: Annotated[Optional[StrictInt], Field(description="Page number")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Page size")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getRooms

        Returns a list of all rooms considering the informed parameters. If Check-in/out dates are sent, only unassigned rooms are returned. ### Group account support

        :param property_ids: Property ID list, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param room_type_id: Room type ID, comma-separated, i.e. 37,345,89
        :type room_type_id: str
        :param room_type_name_short: Room Type (short-version)
        :type room_type_name_short: str
        :param start_date: Initial stay date. If sent, only returns unassigned rooms in this period. If not sent, will return all rooms available in property. Necessary if endDate is sent.
        :type start_date: date
        :param end_date: Final stay date. Necessary if startDate is sent.
        :type end_date: date
        :param include_room_relations: Determines whether room relations info should be included in the response
        :type include_room_relations: int
        :param page_number: Page number
        :type page_number: int
        :param page_size: Page size
        :type page_size: int
        :param sort: Sorting rules, semicolon-separated. Format: `field[:direction]`, where `direction` is `asc` or `desc`, defaults to `asc` if not provided. Valid fields: `room_position`, `sorting_position`. Examples: - `sort=room_position;sorting_position` - `sort=room_position:asc;sorting_position:desc`
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_get_serialize(
            property_ids=property_ids,
            room_type_id=room_type_id,
            room_type_name_short=room_type_name_short,
            start_date=start_date,
            end_date=end_date,
            include_room_relations=include_room_relations,
            page_number=page_number,
            page_size=page_size,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_rooms_get_serialize(
        self,
        property_ids,
        room_type_id,
        room_type_name_short,
        start_date,
        end_date,
        include_room_relations,
        page_number,
        page_size,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        if room_type_id is not None:
            
            _query_params.append(('roomTypeID', room_type_id))
            
        if room_type_name_short is not None:
            
            _query_params.append(('roomTypeNameShort', room_type_name_short))
            
        if start_date is not None:
            if isinstance(start_date, date):
                _query_params.append(
                    (
                        'startDate',
                        start_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('startDate', start_date))
            
        if end_date is not None:
            if isinstance(end_date, date):
                _query_params.append(
                    (
                        'endDate',
                        end_date.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('endDate', end_date))
            
        if include_room_relations is not None:
            
            _query_params.append(('includeRoomRelations', include_room_relations))
            
        if page_number is not None:
            
            _query_params.append(('pageNumber', page_number))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getRooms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_rooms_unassigned_get(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRoomsUnassignedResponse:
        """getRoomsUnassigned

        Returns a list of unassigned rooms in the property. Call is alias of [getRooms](#api-Room-getRooms). Please check its documentation for parameters, response and example. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_unassigned_get_serialize(
            property_ids=property_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsUnassignedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_rooms_unassigned_get_with_http_info(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRoomsUnassignedResponse]:
        """getRoomsUnassigned

        Returns a list of unassigned rooms in the property. Call is alias of [getRooms](#api-Room-getRooms). Please check its documentation for parameters, response and example. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_unassigned_get_serialize(
            property_ids=property_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsUnassignedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_rooms_unassigned_get_without_preload_content(
        self,
        property_ids: Annotated[Optional[StrictStr], Field(description="List of property IDs, comma-separated, i.e. 37,345,89")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getRoomsUnassigned

        Returns a list of unassigned rooms in the property. Call is alias of [getRooms](#api-Room-getRooms). Please check its documentation for parameters, response and example. ### Group account support

        :param property_ids: List of property IDs, comma-separated, i.e. 37,345,89
        :type property_ids: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_rooms_unassigned_get_serialize(
            property_ids=property_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRoomsUnassignedResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_rooms_unassigned_get_serialize(
        self,
        property_ids,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_ids is not None:
            
            _query_params.append(('propertyIDs', property_ids))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getRoomsUnassigned',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_room_assign_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier")] = None,
        reservation_room_id: Annotated[Optional[StrictStr], Field(description="Reservation room ID. Must be set if you want to unassign a room.")] = None,
        new_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room Type ID of the room that will be assigned. Need to be provided in case of assignment.")] = None,
        old_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that was assigned. Need to be provided in case of reassignment.")] = None,
        override_rates: Annotated[Optional[StrictBool], Field(description="Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.")] = None,
        adjust_price: Annotated[Optional[StrictBool], Field(description="If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostRoomAssignResponse:
        """postRoomAssign

        Assign/Reassign a room on a guest reservation

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier
        :type sub_reservation_id: str
        :param reservation_room_id: Reservation room ID. Must be set if you want to unassign a room.
        :type reservation_room_id: str
        :param new_room_id: Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.
        :type new_room_id: str
        :param room_type_id: Room Type ID of the room that will be assigned. Need to be provided in case of assignment.
        :type room_type_id: str
        :param old_room_id: Room ID of the room that was assigned. Need to be provided in case of reassignment.
        :type old_room_id: str
        :param override_rates: Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.
        :type override_rates: bool
        :param adjust_price: If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.
        :type adjust_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_assign_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            reservation_room_id=reservation_room_id,
            new_room_id=new_room_id,
            room_type_id=room_type_id,
            old_room_id=old_room_id,
            override_rates=override_rates,
            adjust_price=adjust_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomAssignResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_room_assign_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier")] = None,
        reservation_room_id: Annotated[Optional[StrictStr], Field(description="Reservation room ID. Must be set if you want to unassign a room.")] = None,
        new_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room Type ID of the room that will be assigned. Need to be provided in case of assignment.")] = None,
        old_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that was assigned. Need to be provided in case of reassignment.")] = None,
        override_rates: Annotated[Optional[StrictBool], Field(description="Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.")] = None,
        adjust_price: Annotated[Optional[StrictBool], Field(description="If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostRoomAssignResponse]:
        """postRoomAssign

        Assign/Reassign a room on a guest reservation

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier
        :type sub_reservation_id: str
        :param reservation_room_id: Reservation room ID. Must be set if you want to unassign a room.
        :type reservation_room_id: str
        :param new_room_id: Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.
        :type new_room_id: str
        :param room_type_id: Room Type ID of the room that will be assigned. Need to be provided in case of assignment.
        :type room_type_id: str
        :param old_room_id: Room ID of the room that was assigned. Need to be provided in case of reassignment.
        :type old_room_id: str
        :param override_rates: Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.
        :type override_rates: bool
        :param adjust_price: If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.
        :type adjust_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_assign_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            reservation_room_id=reservation_room_id,
            new_room_id=new_room_id,
            room_type_id=room_type_id,
            old_room_id=old_room_id,
            override_rates=override_rates,
            adjust_price=adjust_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomAssignResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_room_assign_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier")] = None,
        reservation_room_id: Annotated[Optional[StrictStr], Field(description="Reservation room ID. Must be set if you want to unassign a room.")] = None,
        new_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.")] = None,
        room_type_id: Annotated[Optional[StrictStr], Field(description="Room Type ID of the room that will be assigned. Need to be provided in case of assignment.")] = None,
        old_room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that was assigned. Need to be provided in case of reassignment.")] = None,
        override_rates: Annotated[Optional[StrictBool], Field(description="Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.")] = None,
        adjust_price: Annotated[Optional[StrictBool], Field(description="If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postRoomAssign

        Assign/Reassign a room on a guest reservation

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier
        :type sub_reservation_id: str
        :param reservation_room_id: Reservation room ID. Must be set if you want to unassign a room.
        :type reservation_room_id: str
        :param new_room_id: Room ID of the room that will be assigned. Empty field must be sent if you want to unassign a room.
        :type new_room_id: str
        :param room_type_id: Room Type ID of the room that will be assigned. Need to be provided in case of assignment.
        :type room_type_id: str
        :param old_room_id: Room ID of the room that was assigned. Need to be provided in case of reassignment.
        :type old_room_id: str
        :param override_rates: Deprecated. Please use adjustPrice instead. Setting overrideRates=true will have the opposite of the effect that the name implies. It will cause the rates to NOT be overridden, but instead to be recalculated based on the new room assignment.
        :type override_rates: bool
        :param adjust_price: If room assignment would result in an upcharge or discount, this parameter needs to be set to true to approve the charges. If not set, the rate will retain its original value.
        :type adjust_price: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_assign_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            reservation_room_id=reservation_room_id,
            new_room_id=new_room_id,
            room_type_id=room_type_id,
            old_room_id=old_room_id,
            override_rates=override_rates,
            adjust_price=adjust_price,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomAssignResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_room_assign_post_serialize(
        self,
        property_id,
        reservation_id,
        sub_reservation_id,
        reservation_room_id,
        new_room_id,
        room_type_id,
        old_room_id,
        override_rates,
        adjust_price,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if reservation_id is not None:
            _form_params.append(('reservationID', reservation_id))
        if sub_reservation_id is not None:
            _form_params.append(('subReservationID', sub_reservation_id))
        if reservation_room_id is not None:
            _form_params.append(('reservationRoomID', reservation_room_id))
        if new_room_id is not None:
            _form_params.append(('newRoomID', new_room_id))
        if room_type_id is not None:
            _form_params.append(('roomTypeID', room_type_id))
        if old_room_id is not None:
            _form_params.append(('oldRoomID', old_room_id))
        if override_rates is not None:
            _form_params.append(('overrideRates', override_rates))
        if adjust_price is not None:
            _form_params.append(('adjustPrice', adjust_price))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postRoomAssign',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_room_block_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_type: Annotated[Optional[StrictStr], Field(description="Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PostRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostRoomBlockResponse:
        """postRoomBlock

        Adds a room block to the selected property.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_type: Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.
        :type room_block_type: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PostRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_block_post_serialize(
            property_id=property_id,
            room_block_type=room_block_type,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_room_block_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_type: Annotated[Optional[StrictStr], Field(description="Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PostRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostRoomBlockResponse]:
        """postRoomBlock

        Adds a room block to the selected property.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_type: Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.
        :type room_block_type: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PostRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_block_post_serialize(
            property_id=property_id,
            room_block_type=room_block_type,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_room_block_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_type: Annotated[Optional[StrictStr], Field(description="Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PostRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postRoomBlock

        Adds a room block to the selected property.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_type: Room block type. ‘blocked’ - Room block. ‘out_of_service’ - Out of service block. 'courtesy_hold' - Courtesy hold block.
        :type room_block_type: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PostRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_block_post_serialize(
            property_id=property_id,
            room_block_type=room_block_type,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_room_block_post_serialize(
        self,
        property_id,
        room_block_type,
        room_block_reason,
        start_date,
        end_date,
        rooms,
        first_name,
        last_name,
        length_of_hold_in_hours,
        email,
        phone,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'rooms': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if room_block_type is not None:
            _form_params.append(('roomBlockType', room_block_type))
        if room_block_reason is not None:
            _form_params.append(('roomBlockReason', room_block_reason))
        if start_date is not None:
            _form_params.append(('startDate', start_date))
        if end_date is not None:
            _form_params.append(('endDate', end_date))
        if rooms is not None:
            _form_params.append(('rooms', rooms))
        if first_name is not None:
            _form_params.append(('firstName', first_name))
        if last_name is not None:
            _form_params.append(('lastName', last_name))
        if length_of_hold_in_hours is not None:
            _form_params.append(('lengthOfHoldInHours', length_of_hold_in_hours))
        if email is not None:
            _form_params.append(('email', email))
        if phone is not None:
            _form_params.append(('phone', phone))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postRoomBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_room_check_in_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked-in.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostRoomCheckInResponse:
        """postRoomCheckIn

        Check-in a room already assigned for a guest

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked-in.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_in_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckInResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_room_check_in_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked-in.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostRoomCheckInResponse]:
        """postRoomCheckIn

        Check-in a room already assigned for a guest

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked-in.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_in_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckInResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_room_check_in_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked-in.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postRoomCheckIn

        Check-in a room already assigned for a guest

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked-in. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked-in.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_in_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckInResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_room_check_in_post_serialize(
        self,
        property_id,
        reservation_id,
        sub_reservation_id,
        room_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if reservation_id is not None:
            _form_params.append(('reservationID', reservation_id))
        if sub_reservation_id is not None:
            _form_params.append(('subReservationID', sub_reservation_id))
        if room_id is not None:
            _form_params.append(('roomID', room_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postRoomCheckIn',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_room_check_out_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostRoomCheckOutResponse:
        """postRoomCheckOut

        Check-out a room already assigned for a guest. If all rooms are checked out, the reservation status will update accordingly to \"Checked Out\" as well.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked out.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_out_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckOutResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_room_check_out_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostRoomCheckOutResponse]:
        """postRoomCheckOut

        Check-out a room already assigned for a guest. If all rooms are checked out, the reservation status will update accordingly to \"Checked Out\" as well.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked out.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_out_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckOutResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_room_check_out_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        reservation_id: Annotated[Optional[StrictStr], Field(description="Reservation identifier")] = None,
        sub_reservation_id: Annotated[Optional[StrictStr], Field(description="Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.")] = None,
        room_id: Annotated[Optional[StrictStr], Field(description="Room ID of the room that will be checked out.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postRoomCheckOut

        Check-out a room already assigned for a guest. If all rooms are checked out, the reservation status will update accordingly to \"Checked Out\" as well.

        :param property_id: Property ID
        :type property_id: str
        :param reservation_id: Reservation identifier
        :type reservation_id: str
        :param sub_reservation_id: Sub Reservation identifier, allows for granular control over what room is being checked out. If sent, roomID is ignored.
        :type sub_reservation_id: str
        :param room_id: Room ID of the room that will be checked out.
        :type room_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_room_check_out_post_serialize(
            property_id=property_id,
            reservation_id=reservation_id,
            sub_reservation_id=sub_reservation_id,
            room_id=room_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostRoomCheckOutResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_room_check_out_post_serialize(
        self,
        property_id,
        reservation_id,
        sub_reservation_id,
        room_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if reservation_id is not None:
            _form_params.append(('reservationID', reservation_id))
        if sub_reservation_id is not None:
            _form_params.append(('subReservationID', sub_reservation_id))
        if room_id is not None:
            _form_params.append(('roomID', room_id))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postRoomCheckOut',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_room_block_put(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PutRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PutRoomBlockResponse:
        """putRoomBlock

        Updates a room block.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PutRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_room_block_put_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_room_block_put_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PutRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PutRoomBlockResponse]:
        """putRoomBlock

        Updates a room block.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PutRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_room_block_put_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_room_block_put_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        room_block_id: Annotated[Optional[StrictStr], Field(description="Room block ID")] = None,
        room_block_reason: Annotated[Optional[StrictStr], Field(description="Room block reason")] = None,
        start_date: Annotated[Optional[date], Field(description="Room block start date")] = None,
        end_date: Annotated[Optional[date], Field(description="Room block end date")] = None,
        rooms: Annotated[Optional[List[PutRoomBlockRequestRoomsInner]], Field(description="All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.")] = None,
        first_name: Annotated[Optional[StrictStr], Field(description="First name - for courtesy hold updates")] = None,
        last_name: Annotated[Optional[StrictStr], Field(description="Last name - for courtesy hold updates")] = None,
        length_of_hold_in_hours: Annotated[Optional[StrictInt], Field(description="Length of hold in hours - for courtesy hold updates")] = None,
        email: Annotated[Optional[StrictStr], Field(description="Email address - for courtesy hold updates")] = None,
        phone: Annotated[Optional[StrictStr], Field(description="Phone number - for courtesy hold updates")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """putRoomBlock

        Updates a room block.

        :param property_id: Property ID
        :type property_id: str
        :param room_block_id: Room block ID
        :type room_block_id: str
        :param room_block_reason: Room block reason
        :type room_block_reason: str
        :param start_date: Room block start date
        :type start_date: date
        :param end_date: Room block end date
        :type end_date: date
        :param rooms: All rooms for room block. When multiple rooms are submitted they will be created under the same roomBlockID.
        :type rooms: List[PutRoomBlockRequestRoomsInner]
        :param first_name: First name - for courtesy hold updates
        :type first_name: str
        :param last_name: Last name - for courtesy hold updates
        :type last_name: str
        :param length_of_hold_in_hours: Length of hold in hours - for courtesy hold updates
        :type length_of_hold_in_hours: int
        :param email: Email address - for courtesy hold updates
        :type email: str
        :param phone: Phone number - for courtesy hold updates
        :type phone: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_room_block_put_serialize(
            property_id=property_id,
            room_block_id=room_block_id,
            room_block_reason=room_block_reason,
            start_date=start_date,
            end_date=end_date,
            rooms=rooms,
            first_name=first_name,
            last_name=last_name,
            length_of_hold_in_hours=length_of_hold_in_hours,
            email=email,
            phone=phone,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutRoomBlockResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_room_block_put_serialize(
        self,
        property_id,
        room_block_id,
        room_block_reason,
        start_date,
        end_date,
        rooms,
        first_name,
        last_name,
        length_of_hold_in_hours,
        email,
        phone,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'rooms': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if room_block_id is not None:
            _form_params.append(('roomBlockID', room_block_id))
        if room_block_reason is not None:
            _form_params.append(('roomBlockReason', room_block_reason))
        if start_date is not None:
            _form_params.append(('startDate', start_date))
        if end_date is not None:
            _form_params.append(('endDate', end_date))
        if rooms is not None:
            _form_params.append(('rooms', rooms))
        if first_name is not None:
            _form_params.append(('firstName', first_name))
        if last_name is not None:
            _form_params.append(('lastName', last_name))
        if length_of_hold_in_hours is not None:
            _form_params.append(('lengthOfHoldInHours', length_of_hold_in_hours))
        if email is not None:
            _form_params.append(('email', email))
        if phone is not None:
            _form_params.append(('phone', phone))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/putRoomBlock',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



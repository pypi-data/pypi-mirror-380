# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_reservation_response_data_assigned_inner import GetReservationResponseDataAssignedInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_balance_detailed import GetReservationResponseDataBalanceDetailed
from cloudbeds_pms_v1_3.models.get_reservation_response_data_cards_on_file_inner import GetReservationResponseDataCardsOnFileInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_group_inventory_inner import GetReservationResponseDataGroupInventoryInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_guest_list_value import GetReservationResponseDataGuestListValue
from cloudbeds_pms_v1_3.models.get_reservation_response_data_guest_list_value_custom_fields_inner import GetReservationResponseDataGuestListValueCustomFieldsInner
from cloudbeds_pms_v1_3.models.get_reservation_response_data_unassigned_inner import GetReservationResponseDataUnassignedInner
from typing import Optional, Set
from typing_extensions import Self

class GetReservationResponseData(BaseModel):
    """
    Details for the reservation queried
    """ # noqa: E501
    property_id: Optional[StrictStr] = Field(default=None, description="Property ID", alias="propertyID")
    guest_name: Optional[StrictStr] = Field(default=None, description="Main Guest Name", alias="guestName")
    guest_email: Optional[StrictStr] = Field(default=None, description="Main Guest Email", alias="guestEmail")
    is_anonymized: Optional[StrictBool] = Field(default=None, description="Flag indicating the main guest data was removed upon request", alias="isAnonymized")
    guest_list: Optional[Dict[str, GetReservationResponseDataGuestListValue]] = Field(default=None, description="A map of guest IDs to guest objects (key is the Guest ID). It contains an entry for each guest included on the reservation.", alias="guestList")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation identifier", alias="reservationID")
    date_created: Optional[datetime] = Field(default=None, alias="dateCreated")
    date_modified: Optional[datetime] = Field(default=None, alias="dateModified")
    estimated_arrival_time: Optional[StrictStr] = Field(default=None, description="Estimated arrival time, 24-hour format.", alias="estimatedArrivalTime")
    source: Optional[StrictStr] = Field(default=None, description="Booking source (e.g. Website, Facebook Widget, Booking.com, etc)")
    source_id: Optional[StrictStr] = Field(default=None, description="Booking source unique id", alias="sourceID")
    third_party_identifier: Optional[StrictStr] = Field(default=None, description="If it was received from a booking channel, it displays its identifier. If not, it will be empty", alias="thirdPartyIdentifier")
    status: Optional[StrictStr] = Field(default=None, description="Reservation status<br /> 'not_confirmed' - Reservation is pending confirmation<br /> 'confirmed' - Reservation is confirmed<br /> 'canceled' - Reservation is canceled<br /> 'checked_in' - Guest is in hotel<br /> 'checked_out' - Guest already left hotel<br /> 'no_show' - Guest didn't showed up on check-in date")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total price of the booking")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Balance currently owed")
    balance_detailed: Optional[GetReservationResponseDataBalanceDetailed] = Field(default=None, alias="balanceDetailed")
    assigned: Optional[List[GetReservationResponseDataAssignedInner]] = Field(default=None, description="Assigned Rooms information")
    unassigned: Optional[List[GetReservationResponseDataUnassignedInner]] = Field(default=None, description="Unassigned Rooms information")
    cards_on_file: Optional[List[GetReservationResponseDataCardsOnFileInner]] = Field(default=None, description="Credit Cards stored for the reservation", alias="cardsOnFile")
    custom_fields: Optional[List[GetReservationResponseDataGuestListValueCustomFieldsInner]] = Field(default=None, description="Custom Fields related to the reservation", alias="customFields")
    start_date: Optional[date] = Field(default=None, description="First reservation check-in date", alias="startDate")
    end_date: Optional[date] = Field(default=None, description="Last reservation check-out date", alias="endDate")
    allotment_block_code: Optional[StrictStr] = Field(default=None, description="Allotment block code", alias="allotmentBlockCode")
    channel_provided_credit_card: Optional[StrictBool] = Field(default=None, description="Whether a credit card was provided by the channel. Only included for reservations originating from OTAs.", alias="channelProvidedCreditCard")
    group_inventory: Optional[List[GetReservationResponseDataGroupInventoryInner]] = Field(default=None, description="Aggregate allotment block information", alias="groupInventory")
    origin: Optional[StrictStr] = Field(default=None, description="Reservation origin")
    meal_plans: Optional[StrictStr] = Field(default=None, description="Reservation Meal Plans", alias="mealPlans")
    __properties: ClassVar[List[str]] = ["propertyID", "guestName", "guestEmail", "isAnonymized", "guestList", "reservationID", "dateCreated", "dateModified", "estimatedArrivalTime", "source", "sourceID", "thirdPartyIdentifier", "status", "total", "balance", "balanceDetailed", "assigned", "unassigned", "cardsOnFile", "customFields", "startDate", "endDate", "allotmentBlockCode", "channelProvidedCreditCard", "groupInventory", "origin", "mealPlans"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show']):
            raise ValueError("must be one of enum values ('confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetReservationResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in guest_list (dict)
        _field_dict = {}
        if self.guest_list:
            for _key_guest_list in self.guest_list:
                if self.guest_list[_key_guest_list]:
                    _field_dict[_key_guest_list] = self.guest_list[_key_guest_list].to_dict()
            _dict['guestList'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of balance_detailed
        if self.balance_detailed:
            _dict['balanceDetailed'] = self.balance_detailed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assigned (list)
        _items = []
        if self.assigned:
            for _item_assigned in self.assigned:
                if _item_assigned:
                    _items.append(_item_assigned.to_dict())
            _dict['assigned'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unassigned (list)
        _items = []
        if self.unassigned:
            for _item_unassigned in self.unassigned:
                if _item_unassigned:
                    _items.append(_item_unassigned.to_dict())
            _dict['unassigned'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cards_on_file (list)
        _items = []
        if self.cards_on_file:
            for _item_cards_on_file in self.cards_on_file:
                if _item_cards_on_file:
                    _items.append(_item_cards_on_file.to_dict())
            _dict['cardsOnFile'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_inventory (list)
        _items = []
        if self.group_inventory:
            for _item_group_inventory in self.group_inventory:
                if _item_group_inventory:
                    _items.append(_item_group_inventory.to_dict())
            _dict['groupInventory'] = _items
        # set to None if estimated_arrival_time (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_arrival_time is None and "estimated_arrival_time" in self.model_fields_set:
            _dict['estimatedArrivalTime'] = None

        # set to None if third_party_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.third_party_identifier is None and "third_party_identifier" in self.model_fields_set:
            _dict['thirdPartyIdentifier'] = None

        # set to None if allotment_block_code (nullable) is None
        # and model_fields_set contains the field
        if self.allotment_block_code is None and "allotment_block_code" in self.model_fields_set:
            _dict['allotmentBlockCode'] = None

        # set to None if group_inventory (nullable) is None
        # and model_fields_set contains the field
        if self.group_inventory is None and "group_inventory" in self.model_fields_set:
            _dict['groupInventory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetReservationResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyID": obj.get("propertyID"),
            "guestName": obj.get("guestName"),
            "guestEmail": obj.get("guestEmail"),
            "isAnonymized": obj.get("isAnonymized"),
            "guestList": dict(
                (_k, GetReservationResponseDataGuestListValue.from_dict(_v))
                for _k, _v in obj["guestList"].items()
            )
            if obj.get("guestList") is not None
            else None,
            "reservationID": obj.get("reservationID"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "estimatedArrivalTime": obj.get("estimatedArrivalTime"),
            "source": obj.get("source"),
            "sourceID": obj.get("sourceID"),
            "thirdPartyIdentifier": obj.get("thirdPartyIdentifier"),
            "status": obj.get("status"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "balanceDetailed": GetReservationResponseDataBalanceDetailed.from_dict(obj["balanceDetailed"]) if obj.get("balanceDetailed") is not None else None,
            "assigned": [GetReservationResponseDataAssignedInner.from_dict(_item) for _item in obj["assigned"]] if obj.get("assigned") is not None else None,
            "unassigned": [GetReservationResponseDataUnassignedInner.from_dict(_item) for _item in obj["unassigned"]] if obj.get("unassigned") is not None else None,
            "cardsOnFile": [GetReservationResponseDataCardsOnFileInner.from_dict(_item) for _item in obj["cardsOnFile"]] if obj.get("cardsOnFile") is not None else None,
            "customFields": [GetReservationResponseDataGuestListValueCustomFieldsInner.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None,
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "allotmentBlockCode": obj.get("allotmentBlockCode"),
            "channelProvidedCreditCard": obj.get("channelProvidedCreditCard"),
            "groupInventory": [GetReservationResponseDataGroupInventoryInner.from_dict(_item) for _item in obj["groupInventory"]] if obj.get("groupInventory") is not None else None,
            "origin": obj.get("origin"),
            "mealPlans": obj.get("mealPlans")
        })
        return _obj



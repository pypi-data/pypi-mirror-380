# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.post_reservation_response_unassigned_inner import PostReservationResponseUnassignedInner
from typing import Optional, Set
from typing_extensions import Self

class PostReservationResponse(BaseModel):
    """
    PostReservationResponse
    """ # noqa: E501
    success: Optional[StrictBool] = Field(default=None, description="Returns if the request could be completed")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation identifier", alias="reservationID")
    status: Optional[StrictStr] = Field(default=None, description="Reservation status<br /> 'not_confirmed' - Reservation is pending confirmation<br /> 'confirmed' - Reservation is confirmed<br />")
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest ID", alias="guestID")
    guest_first_name: Optional[StrictStr] = Field(default=None, description="Guest First Name", alias="guestFirstName")
    guest_last_name: Optional[StrictStr] = Field(default=None, description="Guest Last Name", alias="guestLastName")
    guest_gender: Optional[StrictStr] = Field(default=None, description="Guest Gender", alias="guestGender")
    guest_email: Optional[StrictStr] = Field(default=None, description="Guest Email", alias="guestEmail")
    start_date: Optional[date] = Field(default=None, description="Reservation CheckIn date", alias="startDate")
    end_date: Optional[date] = Field(default=None, description="Reservation CheckOut date", alias="endDate")
    date_created: Optional[datetime] = Field(default=None, description="Reservation creation datetime", alias="dateCreated")
    grand_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Grand Total", alias="grandTotal")
    unassigned: Optional[List[PostReservationResponseUnassignedInner]] = Field(default=None, description="unassigned rooms array")
    message: Optional[StrictStr] = Field(default=None, description="To be used in case any error occurs (if success = false). If success = true, it does not exist.")
    __properties: ClassVar[List[str]] = ["success", "reservationID", "status", "guestID", "guestFirstName", "guestLastName", "guestGender", "guestEmail", "startDate", "endDate", "dateCreated", "grandTotal", "unassigned", "message"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['not_confirmed', 'confirmed']):
            raise ValueError("must be one of enum values ('not_confirmed', 'confirmed')")
        return value

    @field_validator('guest_gender')
    def guest_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['M', 'F', 'N/A']):
            raise ValueError("must be one of enum values ('M', 'F', 'N/A')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostReservationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in unassigned (list)
        _items = []
        if self.unassigned:
            for _item_unassigned in self.unassigned:
                if _item_unassigned:
                    _items.append(_item_unassigned.to_dict())
            _dict['unassigned'] = _items
        # set to None if guest_gender (nullable) is None
        # and model_fields_set contains the field
        if self.guest_gender is None and "guest_gender" in self.model_fields_set:
            _dict['guestGender'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostReservationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "reservationID": obj.get("reservationID"),
            "status": obj.get("status"),
            "guestID": obj.get("guestID"),
            "guestFirstName": obj.get("guestFirstName"),
            "guestLastName": obj.get("guestLastName"),
            "guestGender": obj.get("guestGender"),
            "guestEmail": obj.get("guestEmail"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "dateCreated": obj.get("dateCreated"),
            "grandTotal": obj.get("grandTotal"),
            "unassigned": [PostReservationResponseUnassignedInner.from_dict(_item) for _item in obj["unassigned"]] if obj.get("unassigned") is not None else None,
            "message": obj.get("message")
        })
        return _obj



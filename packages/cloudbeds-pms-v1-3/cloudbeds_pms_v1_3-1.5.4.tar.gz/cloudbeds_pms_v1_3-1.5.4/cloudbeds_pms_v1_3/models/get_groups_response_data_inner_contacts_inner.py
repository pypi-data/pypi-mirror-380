# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_groups_response_data_inner_contacts_inner_emails_inner import GetGroupsResponseDataInnerContactsInnerEmailsInner
from cloudbeds_pms_v1_3.models.get_groups_response_data_inner_contacts_inner_phones_inner import GetGroupsResponseDataInnerContactsInnerPhonesInner
from typing import Optional, Set
from typing_extensions import Self

class GetGroupsResponseDataInnerContactsInner(BaseModel):
    """
    GetGroupsResponseDataInnerContactsInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique ID for a contact")
    group_profile_id: Optional[StrictStr] = Field(default=None, description="The group profile ID this contact belongs to")
    primary: Optional[StrictBool] = Field(default=None, description="Whether this is the primary contact")
    anonymized: Optional[StrictBool] = Field(default=None, description="Whether the contact is anonymized")
    first_name: Optional[StrictStr] = Field(default=None, description="Contact first name")
    last_name: Optional[StrictStr] = Field(default=None, description="Contact last name")
    role: Optional[StrictStr] = Field(default=None, description="Contact role")
    status: Optional[StrictStr] = Field(default=None, description="Contact status")
    created_at: Optional[datetime] = Field(default=None, description="Contact creation time")
    updated_at: Optional[datetime] = Field(default=None, description="Contact last update time")
    emails: Optional[List[GetGroupsResponseDataInnerContactsInnerEmailsInner]] = Field(default=None, description="Contact email addresses")
    phones: Optional[List[GetGroupsResponseDataInnerContactsInnerPhonesInner]] = Field(default=None, description="Contact phone numbers")
    is_billing_recipient: Optional[StrictBool] = Field(default=None, description="Whether this contact is a billing recipient")
    tax_id_number: Optional[StrictStr] = Field(default=None, description="Contact tax ID number")
    tax_document_type: Optional[StrictStr] = Field(default=None, description="Contact tax document type")
    legal_name: Optional[StrictStr] = Field(default=None, description="Contact legal name")
    address_1: Optional[StrictStr] = Field(default=None, description="Contact address line 1")
    address_2: Optional[StrictStr] = Field(default=None, description="Contact address line 2")
    city: Optional[StrictStr] = Field(default=None, description="Contact city")
    state: Optional[StrictStr] = Field(default=None, description="Contact state")
    country_code: Optional[StrictStr] = Field(default=None, description="Contact country code")
    zip: Optional[StrictStr] = Field(default=None, description="Contact zip code")
    __properties: ClassVar[List[str]] = ["id", "group_profile_id", "primary", "anonymized", "first_name", "last_name", "role", "status", "created_at", "updated_at", "emails", "phones", "is_billing_recipient", "tax_id_number", "tax_document_type", "legal_name", "address_1", "address_2", "city", "state", "country_code", "zip"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active']):
            raise ValueError("must be one of enum values ('active')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGroupsResponseDataInnerContactsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item_emails in self.emails:
                if _item_emails:
                    _items.append(_item_emails.to_dict())
            _dict['emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phones (list)
        _items = []
        if self.phones:
            for _item_phones in self.phones:
                if _item_phones:
                    _items.append(_item_phones.to_dict())
            _dict['phones'] = _items
        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if phones (nullable) is None
        # and model_fields_set contains the field
        if self.phones is None and "phones" in self.model_fields_set:
            _dict['phones'] = None

        # set to None if tax_id_number (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id_number is None and "tax_id_number" in self.model_fields_set:
            _dict['tax_id_number'] = None

        # set to None if tax_document_type (nullable) is None
        # and model_fields_set contains the field
        if self.tax_document_type is None and "tax_document_type" in self.model_fields_set:
            _dict['tax_document_type'] = None

        # set to None if legal_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_name is None and "legal_name" in self.model_fields_set:
            _dict['legal_name'] = None

        # set to None if address_1 (nullable) is None
        # and model_fields_set contains the field
        if self.address_1 is None and "address_1" in self.model_fields_set:
            _dict['address_1'] = None

        # set to None if address_2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_2 is None and "address_2" in self.model_fields_set:
            _dict['address_2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if country_code (nullable) is None
        # and model_fields_set contains the field
        if self.country_code is None and "country_code" in self.model_fields_set:
            _dict['country_code'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGroupsResponseDataInnerContactsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "group_profile_id": obj.get("group_profile_id"),
            "primary": obj.get("primary"),
            "anonymized": obj.get("anonymized"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "role": obj.get("role"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "emails": [GetGroupsResponseDataInnerContactsInnerEmailsInner.from_dict(_item) for _item in obj["emails"]] if obj.get("emails") is not None else None,
            "phones": [GetGroupsResponseDataInnerContactsInnerPhonesInner.from_dict(_item) for _item in obj["phones"]] if obj.get("phones") is not None else None,
            "is_billing_recipient": obj.get("is_billing_recipient"),
            "tax_id_number": obj.get("tax_id_number"),
            "tax_document_type": obj.get("tax_document_type"),
            "legal_name": obj.get("legal_name"),
            "address_1": obj.get("address_1"),
            "address_2": obj.get("address_2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country_code": obj.get("country_code"),
            "zip": obj.get("zip")
        })
        return _obj



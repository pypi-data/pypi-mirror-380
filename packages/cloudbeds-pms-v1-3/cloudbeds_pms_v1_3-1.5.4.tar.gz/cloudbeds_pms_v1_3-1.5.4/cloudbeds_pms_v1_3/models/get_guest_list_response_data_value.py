# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cloudbeds_pms_v1_3.models.get_guest_list_response_data_value_guest_notes_inner import GetGuestListResponseDataValueGuestNotesInner
from typing import Optional, Set
from typing_extensions import Self

class GetGuestListResponseDataValue(BaseModel):
    """
    GetGuestListResponseDataValue
    """ # noqa: E501
    reservation_id: Optional[StrictStr] = Field(default=None, description="Reservation's unique identifier", alias="reservationID")
    guest_name: Optional[StrictStr] = Field(default=None, description="Guest Name", alias="guestName")
    guest_email: Optional[StrictStr] = Field(default=None, description="Guest Email", alias="guestEmail")
    guest_id: Optional[StrictStr] = Field(default=None, description="Guest ID", alias="guestID")
    date_created: Optional[datetime] = Field(default=None, description="Reservation creation date", alias="dateCreated")
    date_modified: Optional[datetime] = Field(default=None, description="Reservation modification date", alias="dateModified")
    is_main_guest: Optional[StrictBool] = Field(default=None, description="If the guest is the main guest of its reservation", alias="isMainGuest")
    is_anonymized: Optional[StrictBool] = Field(default=None, description="Flag indicating the guest data was removed upon request", alias="isAnonymized")
    guest_first_name: Optional[StrictStr] = Field(default=None, description="Guest First Name", alias="guestFirstName")
    guest_last_name: Optional[StrictStr] = Field(default=None, description="Guest Last Name", alias="guestLastName")
    guest_gender: Optional[StrictStr] = Field(default=None, description="Guest Gender", alias="guestGender")
    guest_phone: Optional[StrictStr] = Field(default=None, description="Guest Phone", alias="guestPhone")
    guest_cell_phone: Optional[StrictStr] = Field(default=None, description="Guest Cell Phone", alias="guestCellPhone")
    guest_address1: Optional[StrictStr] = Field(default=None, description="Guest Address (line 1)", alias="guestAddress1")
    guest_address2: Optional[StrictStr] = Field(default=None, description="Guest Address (line 2)", alias="guestAddress2")
    guest_city: Optional[StrictStr] = Field(default=None, description="Guest City", alias="guestCity")
    guest_state: Optional[StrictStr] = Field(default=None, description="Guest State", alias="guestState")
    guest_country: Optional[StrictStr] = Field(default=None, description="Guest Country", alias="guestCountry")
    guest_zip: Optional[StrictStr] = Field(default=None, description="Guest Zip code", alias="guestZip")
    guest_birth_date: Optional[date] = Field(default=None, description="Guest Birth Date", alias="guestBirthDate")
    guest_document_type: Optional[StrictStr] = Field(default=None, description="Guest Document Type", alias="guestDocumentType")
    guest_document_number: Optional[StrictStr] = Field(default=None, description="Guest Document Number", alias="guestDocumentNumber")
    guest_document_issue_date: Optional[date] = Field(default=None, description="Guest Document Issue Date", alias="guestDocumentIssueDate")
    guest_document_issuing_country: Optional[StrictStr] = Field(default=None, description="Guest Document Issuing Country", alias="guestDocumentIssuingCountry")
    guest_document_expiration_date: Optional[date] = Field(default=None, description="Guest Document Expiration Date", alias="guestDocumentExpirationDate")
    tax_id: Optional[StrictStr] = Field(default=None, description="Tax ID", alias="taxID")
    company_tax_id: Optional[StrictStr] = Field(default=None, description="Company tax ID", alias="companyTaxID")
    company_name: Optional[StrictStr] = Field(default=None, description="Company name", alias="companyName")
    guest_opt_in: Optional[StrictBool] = Field(default=None, description="If guest has opted-in to marketing communication or not", alias="guestOptIn")
    guest_requirements: Optional[List[Dict[str, Any]]] = Field(default=None, description="Guest requirements data. Only included if `includeGuestRequirements=true`.", alias="guestRequirements")
    guest_notes: Optional[List[GetGuestListResponseDataValueGuestNotesInner]] = Field(default=None, description="Guest Notes", alias="guestNotes")
    status: Optional[StrictStr] = Field(default=None, description="Reservation status<br /> in_progress - Reservation is pending confirmation<br /> confirmed - Reservation is confirmed<br /> not_confirmed - Reservation not passed confirmation<br /> canceled - Reservation is canceled<br /> checked_in - Guest is in hotel<br /> checked_out - Guest already left hotel<br /> no_show - Guest didn't showed up on check-in date")
    is_merged: Optional[StrictBool] = Field(default=None, description="Flag indicating that guest was merged", alias="isMerged")
    new_guest_id: Optional[StrictStr] = Field(default=None, description="Merged guest ID", alias="newGuestID")
    __properties: ClassVar[List[str]] = ["reservationID", "guestName", "guestEmail", "guestID", "dateCreated", "dateModified", "isMainGuest", "isAnonymized", "guestFirstName", "guestLastName", "guestGender", "guestPhone", "guestCellPhone", "guestAddress1", "guestAddress2", "guestCity", "guestState", "guestCountry", "guestZip", "guestBirthDate", "guestDocumentType", "guestDocumentNumber", "guestDocumentIssueDate", "guestDocumentIssuingCountry", "guestDocumentExpirationDate", "taxID", "companyTaxID", "companyName", "guestOptIn", "guestRequirements", "guestNotes", "status", "isMerged", "newGuestID"]

    @field_validator('guest_gender')
    def guest_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['M', 'F', 'N/A']):
            raise ValueError("must be one of enum values ('M', 'F', 'N/A')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['in_progress', 'confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show']):
            raise ValueError("must be one of enum values ('in_progress', 'confirmed', 'not_confirmed', 'canceled', 'checked_in', 'checked_out', 'no_show')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGuestListResponseDataValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in guest_notes (list)
        _items = []
        if self.guest_notes:
            for _item_guest_notes in self.guest_notes:
                if _item_guest_notes:
                    _items.append(_item_guest_notes.to_dict())
            _dict['guestNotes'] = _items
        # set to None if guest_first_name (nullable) is None
        # and model_fields_set contains the field
        if self.guest_first_name is None and "guest_first_name" in self.model_fields_set:
            _dict['guestFirstName'] = None

        # set to None if guest_last_name (nullable) is None
        # and model_fields_set contains the field
        if self.guest_last_name is None and "guest_last_name" in self.model_fields_set:
            _dict['guestLastName'] = None

        # set to None if guest_gender (nullable) is None
        # and model_fields_set contains the field
        if self.guest_gender is None and "guest_gender" in self.model_fields_set:
            _dict['guestGender'] = None

        # set to None if guest_phone (nullable) is None
        # and model_fields_set contains the field
        if self.guest_phone is None and "guest_phone" in self.model_fields_set:
            _dict['guestPhone'] = None

        # set to None if guest_cell_phone (nullable) is None
        # and model_fields_set contains the field
        if self.guest_cell_phone is None and "guest_cell_phone" in self.model_fields_set:
            _dict['guestCellPhone'] = None

        # set to None if guest_address1 (nullable) is None
        # and model_fields_set contains the field
        if self.guest_address1 is None and "guest_address1" in self.model_fields_set:
            _dict['guestAddress1'] = None

        # set to None if guest_address2 (nullable) is None
        # and model_fields_set contains the field
        if self.guest_address2 is None and "guest_address2" in self.model_fields_set:
            _dict['guestAddress2'] = None

        # set to None if guest_city (nullable) is None
        # and model_fields_set contains the field
        if self.guest_city is None and "guest_city" in self.model_fields_set:
            _dict['guestCity'] = None

        # set to None if guest_state (nullable) is None
        # and model_fields_set contains the field
        if self.guest_state is None and "guest_state" in self.model_fields_set:
            _dict['guestState'] = None

        # set to None if guest_country (nullable) is None
        # and model_fields_set contains the field
        if self.guest_country is None and "guest_country" in self.model_fields_set:
            _dict['guestCountry'] = None

        # set to None if guest_zip (nullable) is None
        # and model_fields_set contains the field
        if self.guest_zip is None and "guest_zip" in self.model_fields_set:
            _dict['guestZip'] = None

        # set to None if guest_birth_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_birth_date is None and "guest_birth_date" in self.model_fields_set:
            _dict['guestBirthDate'] = None

        # set to None if guest_document_type (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_type is None and "guest_document_type" in self.model_fields_set:
            _dict['guestDocumentType'] = None

        # set to None if guest_document_number (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_number is None and "guest_document_number" in self.model_fields_set:
            _dict['guestDocumentNumber'] = None

        # set to None if guest_document_issue_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_issue_date is None and "guest_document_issue_date" in self.model_fields_set:
            _dict['guestDocumentIssueDate'] = None

        # set to None if guest_document_issuing_country (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_issuing_country is None and "guest_document_issuing_country" in self.model_fields_set:
            _dict['guestDocumentIssuingCountry'] = None

        # set to None if guest_document_expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.guest_document_expiration_date is None and "guest_document_expiration_date" in self.model_fields_set:
            _dict['guestDocumentExpirationDate'] = None

        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['taxID'] = None

        # set to None if company_tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.company_tax_id is None and "company_tax_id" in self.model_fields_set:
            _dict['companyTaxID'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if guest_opt_in (nullable) is None
        # and model_fields_set contains the field
        if self.guest_opt_in is None and "guest_opt_in" in self.model_fields_set:
            _dict['guestOptIn'] = None

        # set to None if guest_requirements (nullable) is None
        # and model_fields_set contains the field
        if self.guest_requirements is None and "guest_requirements" in self.model_fields_set:
            _dict['guestRequirements'] = None

        # set to None if guest_notes (nullable) is None
        # and model_fields_set contains the field
        if self.guest_notes is None and "guest_notes" in self.model_fields_set:
            _dict['guestNotes'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGuestListResponseDataValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reservationID": obj.get("reservationID"),
            "guestName": obj.get("guestName"),
            "guestEmail": obj.get("guestEmail"),
            "guestID": obj.get("guestID"),
            "dateCreated": obj.get("dateCreated"),
            "dateModified": obj.get("dateModified"),
            "isMainGuest": obj.get("isMainGuest"),
            "isAnonymized": obj.get("isAnonymized"),
            "guestFirstName": obj.get("guestFirstName"),
            "guestLastName": obj.get("guestLastName"),
            "guestGender": obj.get("guestGender"),
            "guestPhone": obj.get("guestPhone"),
            "guestCellPhone": obj.get("guestCellPhone"),
            "guestAddress1": obj.get("guestAddress1"),
            "guestAddress2": obj.get("guestAddress2"),
            "guestCity": obj.get("guestCity"),
            "guestState": obj.get("guestState"),
            "guestCountry": obj.get("guestCountry"),
            "guestZip": obj.get("guestZip"),
            "guestBirthDate": obj.get("guestBirthDate"),
            "guestDocumentType": obj.get("guestDocumentType"),
            "guestDocumentNumber": obj.get("guestDocumentNumber"),
            "guestDocumentIssueDate": obj.get("guestDocumentIssueDate"),
            "guestDocumentIssuingCountry": obj.get("guestDocumentIssuingCountry"),
            "guestDocumentExpirationDate": obj.get("guestDocumentExpirationDate"),
            "taxID": obj.get("taxID"),
            "companyTaxID": obj.get("companyTaxID"),
            "companyName": obj.get("companyName"),
            "guestOptIn": obj.get("guestOptIn"),
            "guestRequirements": obj.get("guestRequirements"),
            "guestNotes": [GetGuestListResponseDataValueGuestNotesInner.from_dict(_item) for _item in obj["guestNotes"]] if obj.get("guestNotes") is not None else None,
            "status": obj.get("status"),
            "isMerged": obj.get("isMerged"),
            "newGuestID": obj.get("newGuestID")
        })
        return _obj



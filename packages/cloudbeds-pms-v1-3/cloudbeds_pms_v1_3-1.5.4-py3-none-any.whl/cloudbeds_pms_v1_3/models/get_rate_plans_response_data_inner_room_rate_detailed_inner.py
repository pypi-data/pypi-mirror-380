# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GetRatePlansResponseDataInnerRoomRateDetailedInner(BaseModel):
    """
    GetRatePlansResponseDataInnerRoomRateDetailedInner
    """ # noqa: E501
    var_date: Optional[date] = Field(default=None, alias="date")
    rate_base: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="rate for the selected date", alias="rateBase")
    total_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total rate for the selected date", alias="totalRate")
    rooms_available: Optional[StrictInt] = Field(default=None, description="Number of rooms available for the selected date", alias="roomsAvailable")
    closed_to_arrival: Optional[StrictBool] = Field(default=None, description="true if day closed to arrival", alias="closedToArrival")
    closed_to_departure: Optional[StrictBool] = Field(default=None, description="true if day closed to departure", alias="closedToDeparture")
    min_los: Optional[StrictInt] = Field(default=None, description="Minimum Length Of Stay", alias="minLos")
    max_los: Optional[StrictInt] = Field(default=None, description="Maximum Length Of Stay", alias="maxLos")
    cut_off: Optional[StrictInt] = Field(default=None, alias="cutOff")
    last_minute_booking: Optional[StrictInt] = Field(default=None, alias="lastMinuteBooking")
    __properties: ClassVar[List[str]] = ["date", "rateBase", "totalRate", "roomsAvailable", "closedToArrival", "closedToDeparture", "minLos", "maxLos", "cutOff", "lastMinuteBooking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetRatePlansResponseDataInnerRoomRateDetailedInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rate_base (nullable) is None
        # and model_fields_set contains the field
        if self.rate_base is None and "rate_base" in self.model_fields_set:
            _dict['rateBase'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetRatePlansResponseDataInnerRoomRateDetailedInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "rateBase": obj.get("rateBase"),
            "totalRate": obj.get("totalRate"),
            "roomsAvailable": obj.get("roomsAvailable"),
            "closedToArrival": obj.get("closedToArrival"),
            "closedToDeparture": obj.get("closedToDeparture"),
            "minLos": obj.get("minLos"),
            "maxLos": obj.get("maxLos"),
            "cutOff": obj.get("cutOff"),
            "lastMinuteBooking": obj.get("lastMinuteBooking")
        })
        return _obj



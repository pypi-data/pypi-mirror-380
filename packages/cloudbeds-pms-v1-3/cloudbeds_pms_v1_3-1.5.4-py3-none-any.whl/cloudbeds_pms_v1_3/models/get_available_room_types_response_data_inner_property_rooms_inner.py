# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from cloudbeds_pms_v1_3.models.get_available_room_types_response_data_inner_property_rooms_inner_individual_rooms_inner import GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerIndividualRoomsInner
from cloudbeds_pms_v1_3.models.get_available_room_types_response_data_inner_property_rooms_inner_room_rate_detailed_inner import GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerRoomRateDetailedInner
from cloudbeds_pms_v1_3.models.get_hotel_details_response_data_property_image_inner import GetHotelDetailsResponseDataPropertyImageInner
from typing import Optional, Set
from typing_extensions import Self

class GetAvailableRoomTypesResponseDataInnerPropertyRoomsInner(BaseModel):
    """
    GetAvailableRoomTypesResponseDataInnerPropertyRoomsInner
    """ # noqa: E501
    room_type_id: Optional[StrictStr] = Field(default=None, description="Room type ID", alias="roomTypeID")
    room_type_name: Optional[StrictStr] = Field(default=None, description="Room type name", alias="roomTypeName")
    room_type_name_short: Optional[StrictStr] = Field(default=None, description="Room type short name", alias="roomTypeNameShort")
    room_type_description: Optional[StrictStr] = Field(default=None, description="Room Type Description", alias="roomTypeDescription")
    max_guests: Optional[StrictInt] = Field(default=None, description="Max number of guests allowed in the room type", alias="maxGuests")
    adults_included: Optional[StrictInt] = Field(default=None, description="Number of adults included on the basic room rate", alias="adultsIncluded")
    children_included: Optional[StrictInt] = Field(default=None, description="Number of children included on the basic room rate", alias="childrenIncluded")
    room_type_photos: Optional[List[GetHotelDetailsResponseDataPropertyImageInner]] = Field(default=None, description="List of photos for the room type", alias="roomTypePhotos")
    room_type_features: Optional[List[StrictStr]] = Field(default=None, description="List of features for the room type", alias="roomTypeFeatures")
    room_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Basic rate for the room, based on the parameters provided", alias="roomRate")
    room_rate_id: Optional[StrictStr] = Field(default=None, description="Specific Rate ID used for the room type ID", alias="roomRateID")
    rate_plan_name_public: Optional[StrictStr] = Field(default=None, description="Rate plan public name", alias="ratePlanNamePublic")
    rate_plan_name_private: Optional[StrictStr] = Field(default=None, description="Rate plan private name", alias="ratePlanNamePrivate")
    rooms_available: Optional[StrictInt] = Field(default=None, description="Number of rooms available, based on the parameters provided", alias="roomsAvailable")
    adults_extra_charge: Optional[List[Dict[str, Any]]] = Field(default=None, description="Total extra charge for number of adults, depending on room settings (see \"adultsIncluded\" field). It is an associative array, where the key is the number of adults, and the value is the total extra charge when the number of adults is selected.", alias="adultsExtraCharge")
    children_extra_charge: Optional[List[Dict[str, Any]]] = Field(default=None, description="Total extra charge for number of children, depending on room settings (see \"childrenIncluded\" field). It is an associative array, where the key is the number of children, and the value is the total extra charge when the number of children is selected.", alias="childrenExtraCharge")
    room_rate_detailed: Optional[List[GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerRoomRateDetailedInner]] = Field(default=None, description="Detailed information on the rates, if requested", alias="roomRateDetailed")
    derived_type: Optional[StrictStr] = Field(default=None, description="type of deriving (only if current rate was derived from other one).", alias="derivedType")
    derived_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Can be positive or negative (only if current rate was derived from other one).", alias="derivedValue")
    individual_rooms: Optional[List[GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerIndividualRoomsInner]] = Field(default=None, description="Individual rooms available to be booked (if set on backend)", alias="individualRooms")
    __properties: ClassVar[List[str]] = ["roomTypeID", "roomTypeName", "roomTypeNameShort", "roomTypeDescription", "maxGuests", "adultsIncluded", "childrenIncluded", "roomTypePhotos", "roomTypeFeatures", "roomRate", "roomRateID", "ratePlanNamePublic", "ratePlanNamePrivate", "roomsAvailable", "adultsExtraCharge", "childrenExtraCharge", "roomRateDetailed", "derivedType", "derivedValue", "individualRooms"]

    @field_validator('derived_type')
    def derived_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['fixed', 'percentage']):
            raise ValueError("must be one of enum values ('fixed', 'percentage')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAvailableRoomTypesResponseDataInnerPropertyRoomsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in room_type_photos (list)
        _items = []
        if self.room_type_photos:
            for _item_room_type_photos in self.room_type_photos:
                if _item_room_type_photos:
                    _items.append(_item_room_type_photos.to_dict())
            _dict['roomTypePhotos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in room_rate_detailed (list)
        _items = []
        if self.room_rate_detailed:
            for _item_room_rate_detailed in self.room_rate_detailed:
                if _item_room_rate_detailed:
                    _items.append(_item_room_rate_detailed.to_dict())
            _dict['roomRateDetailed'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in individual_rooms (list)
        _items = []
        if self.individual_rooms:
            for _item_individual_rooms in self.individual_rooms:
                if _item_individual_rooms:
                    _items.append(_item_individual_rooms.to_dict())
            _dict['individualRooms'] = _items
        # set to None if adults_extra_charge (nullable) is None
        # and model_fields_set contains the field
        if self.adults_extra_charge is None and "adults_extra_charge" in self.model_fields_set:
            _dict['adultsExtraCharge'] = None

        # set to None if children_extra_charge (nullable) is None
        # and model_fields_set contains the field
        if self.children_extra_charge is None and "children_extra_charge" in self.model_fields_set:
            _dict['childrenExtraCharge'] = None

        # set to None if room_rate_detailed (nullable) is None
        # and model_fields_set contains the field
        if self.room_rate_detailed is None and "room_rate_detailed" in self.model_fields_set:
            _dict['roomRateDetailed'] = None

        # set to None if derived_type (nullable) is None
        # and model_fields_set contains the field
        if self.derived_type is None and "derived_type" in self.model_fields_set:
            _dict['derivedType'] = None

        # set to None if derived_value (nullable) is None
        # and model_fields_set contains the field
        if self.derived_value is None and "derived_value" in self.model_fields_set:
            _dict['derivedValue'] = None

        # set to None if individual_rooms (nullable) is None
        # and model_fields_set contains the field
        if self.individual_rooms is None and "individual_rooms" in self.model_fields_set:
            _dict['individualRooms'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAvailableRoomTypesResponseDataInnerPropertyRoomsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "roomTypeID": obj.get("roomTypeID"),
            "roomTypeName": obj.get("roomTypeName"),
            "roomTypeNameShort": obj.get("roomTypeNameShort"),
            "roomTypeDescription": obj.get("roomTypeDescription"),
            "maxGuests": obj.get("maxGuests"),
            "adultsIncluded": obj.get("adultsIncluded"),
            "childrenIncluded": obj.get("childrenIncluded"),
            "roomTypePhotos": [GetHotelDetailsResponseDataPropertyImageInner.from_dict(_item) for _item in obj["roomTypePhotos"]] if obj.get("roomTypePhotos") is not None else None,
            "roomTypeFeatures": obj.get("roomTypeFeatures"),
            "roomRate": obj.get("roomRate"),
            "roomRateID": obj.get("roomRateID"),
            "ratePlanNamePublic": obj.get("ratePlanNamePublic"),
            "ratePlanNamePrivate": obj.get("ratePlanNamePrivate"),
            "roomsAvailable": obj.get("roomsAvailable"),
            "adultsExtraCharge": obj.get("adultsExtraCharge"),
            "childrenExtraCharge": obj.get("childrenExtraCharge"),
            "roomRateDetailed": [GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerRoomRateDetailedInner.from_dict(_item) for _item in obj["roomRateDetailed"]] if obj.get("roomRateDetailed") is not None else None,
            "derivedType": obj.get("derivedType"),
            "derivedValue": obj.get("derivedValue"),
            "individualRooms": [GetAvailableRoomTypesResponseDataInnerPropertyRoomsInnerIndividualRoomsInner.from_dict(_item) for _item in obj["individualRooms"]] if obj.get("individualRooms") is not None else None
        })
        return _obj



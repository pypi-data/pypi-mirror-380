# coding: utf-8

"""
    Cloudbeds API

    <p>     Welcome to the documentation for <strong>Cloudbeds API Version v1.3</strong>!     If you are looking to learn how to use the Cloudbeds API to access guest information, reservations, or similar data     for your Cloudbeds customers, then you've come to the right place. </p>  <p>     In this document you will find all the API methods we provide along with explanations for parameters and response     examples. </p>  <p>     If you have questions about different implementation steps (e.g. how to implement OAuth 2.0), please refer to our     <a href=\"https://integrations.cloudbeds.com/hc/en-us\">Integrations Portal</a>. </p>  <p>     Be sure to <a href=\"https://go.pardot.com/l/308041/2018-07-24/qb2lg\">subscribe</a> to the monthly     Cloudbeds API announcement mailing list to receive information on new additions and improvements to the     Cloudbeds API and related developer tools. </p>  <p>     <strong>Endpoint:</strong> https://api.cloudbeds.com/api/v1.3/{method} </p>  <p>     <strong>HTTPS:</strong> Our API requires HTTPS. We'll respond with an appropriate error if you're not using it. </p>  <p>     <strong>Request Format:</strong> HTTP GET, POST and PUT (Content-Type: application/x-www-form-urlencoded) </p>  <p>     <strong>Response Format:</strong> JSON </p>  <p>     <strong>Response Header:</strong> X-Request-ID is added to response headers in all calls to help accelerate support     and troubleshooting. </p>  <p>     <strong>         <a href=\"https://integrations.cloudbeds.com/hc/en-us/articles/14104678058267-API-Documentation#postman-collection\">             <img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\">         </a>     </strong> use this link to access our Public collection in Postman. </p>

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from cloudbeds_pms_v1_3.models.get_custom_fields_response import GetCustomFieldsResponse
from cloudbeds_pms_v1_3.models.post_custom_field_response import PostCustomFieldResponse

from cloudbeds_pms_v1_3.api_client import ApiClient, RequestSerialized
from cloudbeds_pms_v1_3.api_response import ApiResponse
from cloudbeds_pms_v1_3.rest import RESTResponseType


class CustomFieldsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_custom_fields_get(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        custom_field_id: Annotated[Optional[StrictStr], Field(description="Field identifier")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCustomFieldsResponse:
        """getCustomFields

        Gets custom fields list<br /> ¹ data.displayed = \"booking\" - Display this field to guests on the booking engine.<br /> ¹ data.displayed = \"reservation\" - Add this field to the reservation folio for use by staff.<br /> ¹ data.displayed = \"card\" - Make this field available for registration cards.<br />

        :param property_id: Property ID
        :type property_id: str
        :param custom_field_id: Field identifier
        :type custom_field_id: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_custom_fields_get_serialize(
            property_id=property_id,
            custom_field_id=custom_field_id,
            shortcode=shortcode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCustomFieldsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_custom_fields_get_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        custom_field_id: Annotated[Optional[StrictStr], Field(description="Field identifier")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCustomFieldsResponse]:
        """getCustomFields

        Gets custom fields list<br /> ¹ data.displayed = \"booking\" - Display this field to guests on the booking engine.<br /> ¹ data.displayed = \"reservation\" - Add this field to the reservation folio for use by staff.<br /> ¹ data.displayed = \"card\" - Make this field available for registration cards.<br />

        :param property_id: Property ID
        :type property_id: str
        :param custom_field_id: Field identifier
        :type custom_field_id: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_custom_fields_get_serialize(
            property_id=property_id,
            custom_field_id=custom_field_id,
            shortcode=shortcode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCustomFieldsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_custom_fields_get_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        custom_field_id: Annotated[Optional[StrictStr], Field(description="Field identifier")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """getCustomFields

        Gets custom fields list<br /> ¹ data.displayed = \"booking\" - Display this field to guests on the booking engine.<br /> ¹ data.displayed = \"reservation\" - Add this field to the reservation folio for use by staff.<br /> ¹ data.displayed = \"card\" - Make this field available for registration cards.<br />

        :param property_id: Property ID
        :type property_id: str
        :param custom_field_id: Field identifier
        :type custom_field_id: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_custom_fields_get_serialize(
            property_id=property_id,
            custom_field_id=custom_field_id,
            shortcode=shortcode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCustomFieldsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_custom_fields_get_serialize(
        self,
        property_id,
        custom_field_id,
        shortcode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if property_id is not None:
            
            _query_params.append(('propertyID', property_id))
            
        if custom_field_id is not None:
            
            _query_params.append(('customFieldID', custom_field_id))
            
        if shortcode is not None:
            
            _query_params.append(('shortcode', shortcode))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/getCustomFields',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_custom_field_post(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Field name")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        apply_to: Annotated[Optional[StrictStr], Field(description="Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Specify whether this field is required to be filled out.")] = None,
        max_characters: Annotated[Optional[StrictInt], Field(description="Maximum number of characters allowed to be entered in this field.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The field's input type.")] = None,
        displayed: Annotated[Optional[List[StrictStr]], Field(description="¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards")] = None,
        is_personal: Annotated[Optional[StrictBool], Field(description="Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostCustomFieldResponse:
        """postCustomField

        Sets custom fields. The call should only be made once to add the field to the system.

        :param property_id: Property ID
        :type property_id: str
        :param name: Field name
        :type name: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param apply_to: Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk
        :type apply_to: str
        :param required: Specify whether this field is required to be filled out.
        :type required: bool
        :param max_characters: Maximum number of characters allowed to be entered in this field.
        :type max_characters: int
        :param type: The field's input type.
        :type type: str
        :param displayed: ¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards
        :type displayed: List[str]
        :param is_personal: Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.
        :type is_personal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_custom_field_post_serialize(
            property_id=property_id,
            name=name,
            shortcode=shortcode,
            apply_to=apply_to,
            required=required,
            max_characters=max_characters,
            type=type,
            displayed=displayed,
            is_personal=is_personal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCustomFieldResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_custom_field_post_with_http_info(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Field name")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        apply_to: Annotated[Optional[StrictStr], Field(description="Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Specify whether this field is required to be filled out.")] = None,
        max_characters: Annotated[Optional[StrictInt], Field(description="Maximum number of characters allowed to be entered in this field.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The field's input type.")] = None,
        displayed: Annotated[Optional[List[StrictStr]], Field(description="¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards")] = None,
        is_personal: Annotated[Optional[StrictBool], Field(description="Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostCustomFieldResponse]:
        """postCustomField

        Sets custom fields. The call should only be made once to add the field to the system.

        :param property_id: Property ID
        :type property_id: str
        :param name: Field name
        :type name: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param apply_to: Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk
        :type apply_to: str
        :param required: Specify whether this field is required to be filled out.
        :type required: bool
        :param max_characters: Maximum number of characters allowed to be entered in this field.
        :type max_characters: int
        :param type: The field's input type.
        :type type: str
        :param displayed: ¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards
        :type displayed: List[str]
        :param is_personal: Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.
        :type is_personal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_custom_field_post_serialize(
            property_id=property_id,
            name=name,
            shortcode=shortcode,
            apply_to=apply_to,
            required=required,
            max_characters=max_characters,
            type=type,
            displayed=displayed,
            is_personal=is_personal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCustomFieldResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_custom_field_post_without_preload_content(
        self,
        property_id: Annotated[Optional[StrictStr], Field(description="Property ID")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Field name")] = None,
        shortcode: Annotated[Optional[StrictStr], Field(description="Internal reference and is used for integration purposes such as custom links and the API")] = None,
        apply_to: Annotated[Optional[StrictStr], Field(description="Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk")] = None,
        required: Annotated[Optional[StrictBool], Field(description="Specify whether this field is required to be filled out.")] = None,
        max_characters: Annotated[Optional[StrictInt], Field(description="Maximum number of characters allowed to be entered in this field.")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The field's input type.")] = None,
        displayed: Annotated[Optional[List[StrictStr]], Field(description="¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards")] = None,
        is_personal: Annotated[Optional[StrictBool], Field(description="Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """postCustomField

        Sets custom fields. The call should only be made once to add the field to the system.

        :param property_id: Property ID
        :type property_id: str
        :param name: Field name
        :type name: str
        :param shortcode: Internal reference and is used for integration purposes such as custom links and the API
        :type shortcode: str
        :param apply_to: Where put this field in reservation or guest section of the booking. reservation - applies the custom field to reservations in myfrontdesk guest - applies the custom field to guest interface in myfrontdesk
        :type apply_to: str
        :param required: Specify whether this field is required to be filled out.
        :type required: bool
        :param max_characters: Maximum number of characters allowed to be entered in this field.
        :type max_characters: int
        :param type: The field's input type.
        :type type: str
        :param displayed: ¹ Specify where this custom field to show up. reservation - applies the custom field to reservation interface in myfrontdesk booking - applies the custom field to the booking engine card - applies the custom field to Registration cards
        :type displayed: List[str]
        :param is_personal: Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.
        :type is_personal: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_custom_field_post_serialize(
            property_id=property_id,
            name=name,
            shortcode=shortcode,
            apply_to=apply_to,
            required=required,
            max_characters=max_characters,
            type=type,
            displayed=displayed,
            is_personal=is_personal,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PostCustomFieldResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_custom_field_post_serialize(
        self,
        property_id,
        name,
        shortcode,
        apply_to,
        required,
        max_characters,
        type,
        displayed,
        is_personal,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'displayed': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if property_id is not None:
            _form_params.append(('propertyID', property_id))
        if name is not None:
            _form_params.append(('name', name))
        if shortcode is not None:
            _form_params.append(('shortcode', shortcode))
        if apply_to is not None:
            _form_params.append(('applyTo', apply_to))
        if required is not None:
            _form_params.append(('required', required))
        if max_characters is not None:
            _form_params.append(('maxCharacters', max_characters))
        if type is not None:
            _form_params.append(('type', type))
        if displayed is not None:
            _form_params.append(('displayed', displayed))
        if is_personal is not None:
            _form_params.append(('isPersonal', is_personal))
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2', 
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/postCustomField',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



name: UpdateAndReboot
description: Update OS and Reboot
schemaVersion: 1.0

constants:
  - FailExitCode:
      type: string
      value: 1

phases:
  - name: build
    steps:
      # Check input base AMI OS and get OS information, the output should be like amzn.2 | ubuntu.20.04 | ubuntu.22.04 | rhel.8.7 | rocky.8.8
      - name: OperatingSystemRelease
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              FILE=/etc/os-release
              if [ -e ${!FILE} ]; then
                . ${!FILE}
                echo "${!ID}${!VERSION_ID:+.${!VERSION_ID}}"
              else
                echo "The file '${!FILE}' does not exist. Failing build."
                exit {{ FailExitCode }}
              fi

      # Get uniformed OS name
      - name: OperatingSystemName
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'

              if [ `echo "${!RELEASE}" | grep -w '^amzn\.2'` ]; then
                OS='alinux2'
              elif [ `echo "${!RELEASE}" | grep -w '^amzn\.2023'` ]; then
                OS='alinux2023'
              elif [ `echo "${!RELEASE}" | grep '^ubuntu\.22'` ]; then
                OS='ubuntu2204'
              elif [ `echo "${!RELEASE}" | grep '^ubuntu\.24'` ]; then
                OS='ubuntu2404'
              elif [ `echo "${!RELEASE}" | grep '^rhel\.8'` ]; then
                OS='rhel8'
              elif [ `echo "${!RELEASE}" | grep '^rocky\.8'` ]; then
                OS='rocky8'
              elif [ `echo "${!RELEASE}" | grep '^rhel\.9'` ]; then
                OS='rhel9'
              elif [ `echo "${!RELEASE}" | grep '^rocky\.9'` ]; then
                OS='rocky9'
              else
                echo "Operating System '${!RELEASE}' is not supported. Failing build."
                exit {{ FailExitCode }}
              fi

              echo ${!OS}

      # Get platform name
      - name: PlatformName
        action: ExecuteBash
        inputs:
          commands:
            - |
               set -x
               OS='{{ build.OperatingSystemName.outputs.stdout }}'

               if [ `echo "${!OS}" | grep -E '^(alinux|rhel|rocky)'` ]; then
                 PLATFORM='RHEL'
               elif [ `echo "${!OS}" | grep -E '^ubuntu'` ]; then
                 PLATFORM='DEBIAN'
               fi

               echo ${!PLATFORM}

      # Check if input base AMI has supported OS
      - name: IsOperatingSystemSupported
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              RELEASE='{{ build.OperatingSystemRelease.outputs.stdout }}'
              if [ `echo "${!RELEASE}" | grep -Ev '^(amzn|ubuntu|rhel|rocky)'` ]; then
                echo "This component does not support '${!RELEASE}'. Failing build."
                exit {{ FailExitCode }}
              fi

              # This component only supports aarch64 CPUs on Amazon Linux 2, Ubuntu2204, RHEL8, Rocky8, RHEL9 and Rocky9
              ARCH=$(uname -m)
              if [[ `echo ${!ARCH}` == 'aarch64' ]]; then
                if [ `echo "${!RELEASE}" | grep -Ev '^(amzn\.2|ubuntu\.20\.04|ubuntu\.22\.04|ubuntu\.24\.04|rhel\.8|rocky\.8|rhel\.9|rocky\.9)'` ]; then
                  echo "This component does not support '${!RELEASE}' on ARM64 CPUs. Failing build."
                  exit {{ FailExitCode }}
                fi
              fi

      - name: DisableUnattendedUpgrades
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'

              if [[ ${!PLATFORM} == DEBIAN ]]; then
                # wait for completion of os updates performed by cloud-init
                while [ ! -f /var/lib/cloud/instance/boot-finished ]; do echo 'Waiting for cloud-init...'; sleep 1; done
                # disable apt-daily.timer to avoid dpkg lock
                flock $(apt-config shell StateDir Dir::State/d | sed -r "s/.*'(.*)\/?'$/\1/")/daily_lock systemctl disable --now apt-daily.timer apt-daily.service apt-daily-upgrade.timer apt-daily-upgrade.service
                # disable unattended upgrades
                sed "/Update-Package-Lists/s/\"1\"/\"0\"/; /Unattended-Upgrade/s/\"1\"/\"0\"/;" /etc/apt/apt.conf.d/20auto-upgrades > "/etc/apt/apt.conf.d/51pcluster-unattended-upgrades"
                # update package index
                DEBIAN_FRONTEND=noninteractive apt-get -y update
              fi
      - name: InstallPrerequisites
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'

              if [[ ${!PLATFORM} == RHEL ]]; then
                yum -y install jq
              elif [[ ${!PLATFORM} == DEBIAN ]]; then
                apt-get -y install jq
              fi

      # Get AWS Region
      - name: AWSRegion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              echo ${AWS::Region}

      - name: CreatingJsonFile
        action: CreateFile
        inputs:
          - path: /etc/parallelcluster/image_dna.json
            content: |
              ${CfnParamChefDnaJson}
            overwrite: true

      - name: DisableKernelUpdate
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              DISABLE_KERNEL_UPDATE=$(cat /etc/parallelcluster/image_dna.json | jq -r '.cluster.disable_kernel_update')
              echo "${!DISABLE_KERNEL_UPDATE}"

      - name: PinKernelVersion
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'
              DISABLE_KERNEL_UPDATE='{{ build.DisableKernelUpdate.outputs.stdout }}'
              if [[ $OS == alinux2023 && $(uname -r) == 6.12.* ]]; then
                KERNEL_PACKAGES_PREFIX="kernel6.12"
              else
                KERNEL_PACKAGES_PREFIX="kernel"
              fi

              if [[ ${!DISABLE_KERNEL_UPDATE} == true ]]; then
                if [[ ${!PLATFORM} == RHEL ]]; then
                  yum install -y yum-plugin-versionlock
                  # listing all the packages because wildcard does not work as expected
                  yum versionlock ${!KERNEL_PACKAGES_PREFIX} ${!KERNEL_PACKAGES_PREFIX}-core ${!KERNEL_PACKAGES_PREFIX}-modules

                  if [[ ${!OS} == "rocky8" ]] || [[ ${!OS} == "rocky9" ]] ; then
                    yum versionlock rocky-release rocky-repos
                  elif [[ ${!OS} == "rhel8" ]] || [[ ${!OS} == "rhel9" ]] ; then
                    yum versionlock redhat-release
                  fi
                  echo "Kernel version locked"
                fi
              fi

      - name: UpdateOS
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'
              DISABLE_KERNEL_UPDATE='{{ build.DisableKernelUpdate.outputs.stdout }}'

              if [[ ${!PLATFORM} == RHEL ]]; then
                yum -y update

                if [[ ${!OS} == "rhel8" ]] || [[ ${!OS} == "rocky8" ]] || [[ ${!OS} == "rhel9" ]] || [[ ${!OS} == "rocky9" ]] || [[ ${!OS} == "alinux2023" ]] ; then
                  # package-cleanup has changed in RHEL8 and it works differently https://access.redhat.com/solutions/1227
                  yum remove -y $(yum repoquery --installonly --latest-limit=-2 -q)
                else
                  package-cleanup -y --oldkernels --count=1
                fi

              elif [[ ${!PLATFORM} == DEBIAN ]]; then
                DEBIAN_FRONTEND=noninteractive apt-get -y update
                if [[ ${!DISABLE_KERNEL_UPDATE} == true ]]; then
                  DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade
                else
                  DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" --with-new-pkgs upgrade
                fi
                apt-get --purge autoremove -y
              fi
      - name: RebootStep
        action: Reboot
        onFailure: Abort
        maxAttempts: 2
        inputs:
          delaySeconds: 10

      - name: RemoveKernelPin
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              OS='{{ build.OperatingSystemName.outputs.stdout }}'
              PLATFORM='{{ build.PlatformName.outputs.stdout }}'
              DISABLE_KERNEL_UPDATE='{{ build.DisableKernelUpdate.outputs.stdout }}'
              if [[ $OS == alinux2023 && $(uname -r) == 6.12.* ]]; then
                KERNEL_PACKAGES_PREFIX="kernel6.12"
              else
                KERNEL_PACKAGES_PREFIX="kernel"
              fi

              # Remove kernel version lock
              if [[ ${!DISABLE_KERNEL_UPDATE} == true ]] && [[ ${!PLATFORM} == RHEL ]]; then
                yum versionlock delete ${!KERNEL_PACKAGES_PREFIX} ${!KERNEL_PACKAGES_PREFIX}-core ${!KERNEL_PACKAGES_PREFIX}-modules

                if [[ ${!OS} == "rocky8" ]] || [[ ${!OS} == "rocky9" ]] ; then
                  yum versionlock delete rocky-release
                elif [[ ${!OS} == "rhel8" ]] || [[ ${!OS} == "rhel9" ]] ; then
                  yum versionlock delete redhat-release
                fi
                echo "Kernel version unlocked"
              fi

      - name: KeepSSM
        action: ExecuteBash
        inputs:
          commands:
            - |
              set -x
              if [[ -f /tmp/imagebuilder_service/ssm_installed ]]; then
                echo "Keeping SSM agent installed"
                rm -rf /tmp/imagebuilder_service/ssm_installed
              else
                 echo "SSM agent is installed by default"
              fi

      - name: RebootStep2
        action: Reboot
        onFailure: Abort
        maxAttempts: 2
        inputs:
            delaySeconds: 10

  - name: validate
    steps:
      - name: UpdateValidate
        action: ExecuteBash
        inputs:
          commands:
            - |
              echo "Check the OS has been updated"

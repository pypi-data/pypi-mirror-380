# coding: utf-8

"""
    DeviceServer

    DeviceServer API

    The version of the OpenAPI document: 1.2.2
    Contact: david@3adesign.co.uk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DbUploadFirmwareState(BaseModel):
    """
    Upload firmware state
    """ # noqa: E501
    device_id: Annotated[str, Field(min_length=36, strict=True, max_length=36)]
    device_serial: Annotated[str, Field(min_length=1, strict=True, max_length=32)]
    device_type: Annotated[str, Field(strict=True, max_length=32)]
    upload_state: Annotated[str, Field(strict=True, max_length=20)] = Field(description="Current state of the firmware upload process. States: - IDLE: Ready for a new upload. - IN_PROGRESS: Upload is currently in progress. - COMPLETED: Upload finished successfully. - FAILED: Upload failed. ")
    __properties: ClassVar[List[str]] = ["device_id", "device_serial", "device_type", "upload_state"]

    @field_validator('device_id')
    def device_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}", value):
            raise ValueError(r"must validate the regular expression /[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/")
        return value

    @field_validator('device_serial')
    def device_serial_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-F0-9]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[A-F0-9]{32}$/")
        return value

    @field_validator('upload_state')
    def upload_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['IDLE', 'IN_PROGRESS', 'COMPLETED', 'FAILED']):
            raise ValueError("must be one of enum values ('IDLE', 'IN_PROGRESS', 'COMPLETED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbUploadFirmwareState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbUploadFirmwareState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_id": obj.get("device_id"),
            "device_serial": obj.get("device_serial"),
            "device_type": obj.get("device_type"),
            "upload_state": obj.get("upload_state")
        })
        return _obj



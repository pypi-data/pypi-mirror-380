[project]
name = "gitlab-helper-mcp"
version = "0.1.3"
description = "A Model Context Protocol (MCP) server for GitLab integration"
readme = "README.md"
license = "MIT"
authors = [
    {name = "philo-veritas", email = "edison.gee.lan@gmail.com"}
]
maintainers = [
    {name = "philo-veritas", email = "edison.gee.lan@gmail.com"}
]
keywords = ["mcp", "gitlab", "claude", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "mcp[cli]>=1.13.1",
    "pydantic>=2.11.7",
    "python-gitlab>=6.3.0",
]

[dependency-groups]
dev = [
    "build>=1.3.0",
    "twine>=6.1.0",
]

[project.scripts]
gitlab-helper-mcp = "gitlab_helper_mcp.server:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"


[tool.ruff]
target-version = "py312"
line-length = 100
exclude = [
  ".git", ".venv", ".ruff_cache",  # 常见缓存/虚拟目录
  "dist", "build", "node_modules",
]
include = ["src/**/*.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "C4",  # comprehensions：推导式改进
    "ISC", # 隐式字符串拼接
    "UP",  # pyupgrade：自动语法升级
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
    "ISC001",  # 禁用与格式化器冲突的隐式字符串拼接规则
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

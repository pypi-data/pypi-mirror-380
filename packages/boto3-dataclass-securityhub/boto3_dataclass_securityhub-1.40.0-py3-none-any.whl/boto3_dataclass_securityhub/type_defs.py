# -*- coding: utf-8 -*-

import typing as T
import dataclasses
from functools import cached_property

if T.TYPE_CHECKING:  # pragma: no cover
    from mypy_boto3_securityhub import type_defs


def field(name: str):
    def getter(self):
        return self.boto3_raw_data[name]

    return cached_property(getter)


@dataclasses.dataclass(frozen=True)
class AcceptAdministratorInvitationRequest:
    boto3_raw_data: "type_defs.AcceptAdministratorInvitationRequestTypeDef" = (
        dataclasses.field()
    )

    AdministratorId = field("AdministratorId")
    InvitationId = field("InvitationId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AcceptAdministratorInvitationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptAdministratorInvitationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AcceptInvitationRequest:
    boto3_raw_data: "type_defs.AcceptInvitationRequestTypeDef" = dataclasses.field()

    MasterId = field("MasterId")
    InvitationId = field("InvitationId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AcceptInvitationRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AcceptInvitationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AccountDetails:
    boto3_raw_data: "type_defs.AccountDetailsTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    Email = field("Email")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AccountDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AccountDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionLocalIpDetails:
    boto3_raw_data: "type_defs.ActionLocalIpDetailsTypeDef" = dataclasses.field()

    IpAddressV4 = field("IpAddressV4")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActionLocalIpDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActionLocalIpDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionLocalPortDetails:
    boto3_raw_data: "type_defs.ActionLocalPortDetailsTypeDef" = dataclasses.field()

    Port = field("Port")
    PortName = field("PortName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActionLocalPortDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActionLocalPortDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DnsRequestAction:
    boto3_raw_data: "type_defs.DnsRequestActionTypeDef" = dataclasses.field()

    Domain = field("Domain")
    Protocol = field("Protocol")
    Blocked = field("Blocked")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DnsRequestActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DnsRequestActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class City:
    boto3_raw_data: "type_defs.CityTypeDef" = dataclasses.field()

    CityName = field("CityName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CityTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Country:
    boto3_raw_data: "type_defs.CountryTypeDef" = dataclasses.field()

    CountryCode = field("CountryCode")
    CountryName = field("CountryName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CountryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CountryTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeoLocation:
    boto3_raw_data: "type_defs.GeoLocationTypeDef" = dataclasses.field()

    Lon = field("Lon")
    Lat = field("Lat")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GeoLocationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GeoLocationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpOrganizationDetails:
    boto3_raw_data: "type_defs.IpOrganizationDetailsTypeDef" = dataclasses.field()

    Asn = field("Asn")
    AsnOrg = field("AsnOrg")
    Isp = field("Isp")
    Org = field("Org")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IpOrganizationDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IpOrganizationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionRemotePortDetails:
    boto3_raw_data: "type_defs.ActionRemotePortDetailsTypeDef" = dataclasses.field()

    Port = field("Port")
    PortName = field("PortName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActionRemotePortDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActionRemotePortDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionTarget:
    boto3_raw_data: "type_defs.ActionTargetTypeDef" = dataclasses.field()

    ActionTargetArn = field("ActionTargetArn")
    Name = field("Name")
    Description = field("Description")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActionTargetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActionTargetTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActorSession:
    boto3_raw_data: "type_defs.ActorSessionTypeDef" = dataclasses.field()

    Uid = field("Uid")
    MfaStatus = field("MfaStatus")
    CreatedTime = field("CreatedTime")
    Issuer = field("Issuer")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActorSessionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActorSessionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UserAccount:
    boto3_raw_data: "type_defs.UserAccountTypeDef" = dataclasses.field()

    Uid = field("Uid")
    Name = field("Name")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.UserAccountTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.UserAccountTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Adjustment:
    boto3_raw_data: "type_defs.AdjustmentTypeDef" = dataclasses.field()

    Metric = field("Metric")
    Reason = field("Reason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AdjustmentTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AdjustmentTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AdminAccount:
    boto3_raw_data: "type_defs.AdminAccountTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AdminAccountTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AdminAccountTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AggregatorV2:
    boto3_raw_data: "type_defs.AggregatorV2TypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AggregatorV2TypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AggregatorV2TypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociatedStandard:
    boto3_raw_data: "type_defs.AssociatedStandardTypeDef" = dataclasses.field()

    StandardsId = field("StandardsId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociatedStandardTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociatedStandardTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociationFilters:
    boto3_raw_data: "type_defs.AssociationFiltersTypeDef" = dataclasses.field()

    ConfigurationPolicyId = field("ConfigurationPolicyId")
    AssociationType = field("AssociationType")
    AssociationStatus = field("AssociationStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociationFiltersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociationFiltersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociationStateDetails:
    boto3_raw_data: "type_defs.AssociationStateDetailsTypeDef" = dataclasses.field()

    State = field("State")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociationStateDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociationStateDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesActionTypeObjectV2:
    boto3_raw_data: "type_defs.AutomationRulesActionTypeObjectV2TypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutomationRulesActionTypeObjectV2TypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesActionTypeObjectV2TypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesFindingFieldsUpdateV2:
    boto3_raw_data: "type_defs.AutomationRulesFindingFieldsUpdateV2TypeDef" = (
        dataclasses.field()
    )

    SeverityId = field("SeverityId")
    Comment = field("Comment")
    StatusId = field("StatusId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutomationRulesFindingFieldsUpdateV2TypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesFindingFieldsUpdateV2TypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ExternalIntegrationConfiguration:
    boto3_raw_data: "type_defs.ExternalIntegrationConfigurationTypeDef" = (
        dataclasses.field()
    )

    ConnectorArn = field("ConnectorArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ExternalIntegrationConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ExternalIntegrationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NoteUpdate:
    boto3_raw_data: "type_defs.NoteUpdateTypeDef" = dataclasses.field()

    Text = field("Text")
    UpdatedBy = field("UpdatedBy")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NoteUpdateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NoteUpdateTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RelatedFinding:
    boto3_raw_data: "type_defs.RelatedFindingTypeDef" = dataclasses.field()

    ProductArn = field("ProductArn")
    Id = field("Id")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RelatedFindingTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RelatedFindingTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SeverityUpdate:
    boto3_raw_data: "type_defs.SeverityUpdateTypeDef" = dataclasses.field()

    Normalized = field("Normalized")
    Product = field("Product")
    Label = field("Label")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SeverityUpdateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SeverityUpdateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WorkflowUpdate:
    boto3_raw_data: "type_defs.WorkflowUpdateTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WorkflowUpdateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WorkflowUpdateTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class MapFilter:
    boto3_raw_data: "type_defs.MapFilterTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")
    Comparison = field("Comparison")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MapFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MapFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NumberFilter:
    boto3_raw_data: "type_defs.NumberFilterTypeDef" = dataclasses.field()

    Gte = field("Gte")
    Lte = field("Lte")
    Eq = field("Eq")
    Gt = field("Gt")
    Lt = field("Lt")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NumberFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NumberFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringFilter:
    boto3_raw_data: "type_defs.StringFilterTypeDef" = dataclasses.field()

    Value = field("Value")
    Comparison = field("Comparison")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StringFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StringFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesMetadata:
    boto3_raw_data: "type_defs.AutomationRulesMetadataTypeDef" = dataclasses.field()

    RuleArn = field("RuleArn")
    RuleStatus = field("RuleStatus")
    RuleOrder = field("RuleOrder")
    RuleName = field("RuleName")
    Description = field("Description")
    IsTerminal = field("IsTerminal")
    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    CreatedBy = field("CreatedBy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesMetadataTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AvailabilityZone:
    boto3_raw_data: "type_defs.AvailabilityZoneTypeDef" = dataclasses.field()

    ZoneName = field("ZoneName")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AvailabilityZoneTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AvailabilityZoneTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerEncryptionOptionsDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerEncryptionOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    KmsKeyId = field("KmsKeyId")
    UseAwsOwnedKey = field("UseAwsOwnedKey")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAmazonMqBrokerEncryptionOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerEncryptionOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerLdapServerMetadataDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsOutputTypeDef"
    ) = dataclasses.field()

    Hosts = field("Hosts")
    RoleBase = field("RoleBase")
    RoleName = field("RoleName")
    RoleSearchMatching = field("RoleSearchMatching")
    RoleSearchSubtree = field("RoleSearchSubtree")
    ServiceAccountUsername = field("ServiceAccountUsername")
    UserBase = field("UserBase")
    UserRoleName = field("UserRoleName")
    UserSearchMatching = field("UserSearchMatching")
    UserSearchSubtree = field("UserSearchSubtree")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails:
    boto3_raw_data: (
        "type_defs.AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsTypeDef"
    ) = dataclasses.field()

    DayOfWeek = field("DayOfWeek")
    TimeOfDay = field("TimeOfDay")
    TimeZone = field("TimeZone")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAmazonMqBrokerMaintenanceWindowStartTimeDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerUsersDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerUsersDetailsTypeDef" = (
        dataclasses.field()
    )

    PendingChange = field("PendingChange")
    Username = field("Username")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsAmazonMqBrokerUsersDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerUsersDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerLdapServerMetadataDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsTypeDef" = (
        dataclasses.field()
    )

    Hosts = field("Hosts")
    RoleBase = field("RoleBase")
    RoleName = field("RoleName")
    RoleSearchMatching = field("RoleSearchMatching")
    RoleSearchSubtree = field("RoleSearchSubtree")
    ServiceAccountUsername = field("ServiceAccountUsername")
    UserBase = field("UserBase")
    UserRoleName = field("UserRoleName")
    UserSearchMatching = field("UserSearchMatching")
    UserSearchSubtree = field("UserSearchSubtree")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerLdapServerMetadataDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerLogsPendingDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerLogsPendingDetailsTypeDef" = (
        dataclasses.field()
    )

    Audit = field("Audit")
    General = field("General")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAmazonMqBrokerLogsPendingDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerLogsPendingDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiCallActionDomainDetails:
    boto3_raw_data: "type_defs.AwsApiCallActionDomainDetailsTypeDef" = (
        dataclasses.field()
    )

    Domain = field("Domain")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsApiCallActionDomainDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiCallActionDomainDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayAccessLogSettings:
    boto3_raw_data: "type_defs.AwsApiGatewayAccessLogSettingsTypeDef" = (
        dataclasses.field()
    )

    Format = field("Format")
    DestinationArn = field("DestinationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsApiGatewayAccessLogSettingsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayAccessLogSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayCanarySettingsOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayCanarySettingsOutputTypeDef" = (
        dataclasses.field()
    )

    PercentTraffic = field("PercentTraffic")
    DeploymentId = field("DeploymentId")
    StageVariableOverrides = field("StageVariableOverrides")
    UseStageCache = field("UseStageCache")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsApiGatewayCanarySettingsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayCanarySettingsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayCanarySettings:
    boto3_raw_data: "type_defs.AwsApiGatewayCanarySettingsTypeDef" = dataclasses.field()

    PercentTraffic = field("PercentTraffic")
    DeploymentId = field("DeploymentId")
    StageVariableOverrides = field("StageVariableOverrides")
    UseStageCache = field("UseStageCache")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayCanarySettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayCanarySettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayEndpointConfigurationOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayEndpointConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    Types = field("Types")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsApiGatewayEndpointConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayEndpointConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayEndpointConfiguration:
    boto3_raw_data: "type_defs.AwsApiGatewayEndpointConfigurationTypeDef" = (
        dataclasses.field()
    )

    Types = field("Types")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsApiGatewayEndpointConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayEndpointConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayMethodSettings:
    boto3_raw_data: "type_defs.AwsApiGatewayMethodSettingsTypeDef" = dataclasses.field()

    MetricsEnabled = field("MetricsEnabled")
    LoggingLevel = field("LoggingLevel")
    DataTraceEnabled = field("DataTraceEnabled")
    ThrottlingBurstLimit = field("ThrottlingBurstLimit")
    ThrottlingRateLimit = field("ThrottlingRateLimit")
    CachingEnabled = field("CachingEnabled")
    CacheTtlInSeconds = field("CacheTtlInSeconds")
    CacheDataEncrypted = field("CacheDataEncrypted")
    RequireAuthorizationForCacheControl = field("RequireAuthorizationForCacheControl")
    UnauthorizedCacheControlHeaderStrategy = field(
        "UnauthorizedCacheControlHeaderStrategy"
    )
    HttpMethod = field("HttpMethod")
    ResourcePath = field("ResourcePath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayMethodSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayMethodSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCorsConfigurationOutput:
    boto3_raw_data: "type_defs.AwsCorsConfigurationOutputTypeDef" = dataclasses.field()

    AllowOrigins = field("AllowOrigins")
    AllowCredentials = field("AllowCredentials")
    ExposeHeaders = field("ExposeHeaders")
    MaxAge = field("MaxAge")
    AllowMethods = field("AllowMethods")
    AllowHeaders = field("AllowHeaders")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCorsConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCorsConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayV2RouteSettings:
    boto3_raw_data: "type_defs.AwsApiGatewayV2RouteSettingsTypeDef" = (
        dataclasses.field()
    )

    DetailedMetricsEnabled = field("DetailedMetricsEnabled")
    LoggingLevel = field("LoggingLevel")
    DataTraceEnabled = field("DataTraceEnabled")
    ThrottlingBurstLimit = field("ThrottlingBurstLimit")
    ThrottlingRateLimit = field("ThrottlingRateLimit")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayV2RouteSettingsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayV2RouteSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails:
    boto3_raw_data: (
        "type_defs.AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsTypeDef"
    ) = dataclasses.field()

    AuthorizerResultTtlInSeconds = field("AuthorizerResultTtlInSeconds")
    AuthorizerUri = field("AuthorizerUri")
    IdentityValidationExpression = field("IdentityValidationExpression")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiOpenIdConnectConfigDetails:
    boto3_raw_data: (
        "type_defs.AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsTypeDef"
    ) = dataclasses.field()

    AuthTtL = field("AuthTtL")
    ClientId = field("ClientId")
    IatTtL = field("IatTtL")
    Issuer = field("Issuer")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAppSyncGraphQlApiOpenIdConnectConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiUserPoolConfigDetails:
    boto3_raw_data: "type_defs.AwsAppSyncGraphQlApiUserPoolConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    AppIdClientRegex = field("AppIdClientRegex")
    AwsRegion = field("AwsRegion")
    DefaultAction = field("DefaultAction")
    UserPoolId = field("UserPoolId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiUserPoolConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAppSyncGraphQlApiUserPoolConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiLogConfigDetails:
    boto3_raw_data: "type_defs.AwsAppSyncGraphQlApiLogConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    CloudWatchLogsRoleArn = field("CloudWatchLogsRoleArn")
    ExcludeVerboseContent = field("ExcludeVerboseContent")
    FieldLogLevel = field("FieldLogLevel")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiLogConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAppSyncGraphQlApiLogConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAthenaWorkGroupConfigurationResultConfigurationEncryptionConfigurationDetails:
    boto3_raw_data: "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationEncryptionConfigurationDetailsTypeDef" = (dataclasses.field())

    EncryptionOption = field("EncryptionOption")
    KmsKey = field("KmsKey")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationEncryptionConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationEncryptionConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetailsTypeDef"
    ) = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecificationTypeDef" = (dataclasses.field())

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecificationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetailsTypeDef" = (dataclasses.field())

    OnDemandAllocationStrategy = field("OnDemandAllocationStrategy")
    OnDemandBaseCapacity = field("OnDemandBaseCapacity")
    OnDemandPercentageAboveBaseCapacity = field("OnDemandPercentageAboveBaseCapacity")
    SpotAllocationStrategy = field("SpotAllocationStrategy")
    SpotInstancePools = field("SpotInstancePools")
    SpotMaxPrice = field("SpotMaxPrice")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationTypeDef" = (dataclasses.field())

    LaunchTemplateId = field("LaunchTemplateId")
    LaunchTemplateName = field("LaunchTemplateName")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetailsTypeDef" = (dataclasses.field())

    InstanceType = field("InstanceType")
    WeightedCapacity = field("WeightedCapacity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetailsTypeDef" = (dataclasses.field())

    DeleteOnTermination = field("DeleteOnTermination")
    Encrypted = field("Encrypted")
    Iops = field("Iops")
    SnapshotId = field("SnapshotId")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingLaunchConfigurationInstanceMonitoringDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationInstanceMonitoringDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingLaunchConfigurationInstanceMonitoringDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationMetadataOptions:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingLaunchConfigurationMetadataOptionsTypeDef"
    ) = dataclasses.field()

    HttpEndpoint = field("HttpEndpoint")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpTokens = field("HttpTokens")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationMetadataOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingLaunchConfigurationMetadataOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanAdvancedBackupSettingsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsOutputTypeDef"
    ) = dataclasses.field()

    BackupOptions = field("BackupOptions")
    ResourceType = field("ResourceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanAdvancedBackupSettingsDetails:
    boto3_raw_data: (
        "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsTypeDef"
    ) = dataclasses.field()

    BackupOptions = field("BackupOptions")
    ResourceType = field("ResourceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsBackupBackupPlanAdvancedBackupSettingsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanLifecycleDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanLifecycleDetailsTypeDef" = (
        dataclasses.field()
    )

    DeleteAfterDays = field("DeleteAfterDays")
    MoveToColdStorageAfterDays = field("MoveToColdStorageAfterDays")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanLifecycleDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanLifecycleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupVaultNotificationsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsBackupBackupVaultNotificationsDetailsOutputTypeDef"
    ) = dataclasses.field()

    BackupVaultEvents = field("BackupVaultEvents")
    SnsTopicArn = field("SnsTopicArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupVaultNotificationsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsBackupBackupVaultNotificationsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupVaultNotificationsDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupVaultNotificationsDetailsTypeDef" = (
        dataclasses.field()
    )

    BackupVaultEvents = field("BackupVaultEvents")
    SnsTopicArn = field("SnsTopicArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupVaultNotificationsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupVaultNotificationsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupRecoveryPointCalculatedLifecycleDetails:
    boto3_raw_data: (
        "type_defs.AwsBackupRecoveryPointCalculatedLifecycleDetailsTypeDef"
    ) = dataclasses.field()

    DeleteAt = field("DeleteAt")
    MoveToColdStorageAt = field("MoveToColdStorageAt")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupRecoveryPointCalculatedLifecycleDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsBackupRecoveryPointCalculatedLifecycleDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupRecoveryPointCreatedByDetails:
    boto3_raw_data: "type_defs.AwsBackupRecoveryPointCreatedByDetailsTypeDef" = (
        dataclasses.field()
    )

    BackupPlanArn = field("BackupPlanArn")
    BackupPlanId = field("BackupPlanId")
    BackupPlanVersion = field("BackupPlanVersion")
    BackupRuleId = field("BackupRuleId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupRecoveryPointCreatedByDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupRecoveryPointCreatedByDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupRecoveryPointLifecycleDetails:
    boto3_raw_data: "type_defs.AwsBackupRecoveryPointLifecycleDetailsTypeDef" = (
        dataclasses.field()
    )

    DeleteAfterDays = field("DeleteAfterDays")
    MoveToColdStorageAfterDays = field("MoveToColdStorageAfterDays")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupRecoveryPointLifecycleDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupRecoveryPointLifecycleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateExtendedKeyUsage:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateExtendedKeyUsageTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    OId = field("OId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateExtendedKeyUsageTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateExtendedKeyUsageTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateKeyUsage:
    boto3_raw_data: "type_defs.AwsCertificateManagerCertificateKeyUsageTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateKeyUsageTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCertificateManagerCertificateKeyUsageTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateOptions:
    boto3_raw_data: "type_defs.AwsCertificateManagerCertificateOptionsTypeDef" = (
        dataclasses.field()
    )

    CertificateTransparencyLoggingPreference = field(
        "CertificateTransparencyLoggingPreference"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCertificateManagerCertificateOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateResourceRecord:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateResourceRecordTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateResourceRecordTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateResourceRecordTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFormationStackDriftInformationDetails:
    boto3_raw_data: "type_defs.AwsCloudFormationStackDriftInformationDetailsTypeDef" = (
        dataclasses.field()
    )

    StackDriftStatus = field("StackDriftStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFormationStackDriftInformationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFormationStackDriftInformationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFormationStackOutputsDetails:
    boto3_raw_data: "type_defs.AwsCloudFormationStackOutputsDetailsTypeDef" = (
        dataclasses.field()
    )

    Description = field("Description")
    OutputKey = field("OutputKey")
    OutputValue = field("OutputValue")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFormationStackOutputsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFormationStackOutputsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionCacheBehavior:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionCacheBehaviorTypeDef" = (
        dataclasses.field()
    )

    ViewerProtocolPolicy = field("ViewerProtocolPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionCacheBehaviorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionCacheBehaviorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionDefaultCacheBehavior:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionDefaultCacheBehaviorTypeDef" = (
        dataclasses.field()
    )

    ViewerProtocolPolicy = field("ViewerProtocolPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionDefaultCacheBehaviorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionDefaultCacheBehaviorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionLogging:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionLoggingTypeDef" = (
        dataclasses.field()
    )

    Bucket = field("Bucket")
    Enabled = field("Enabled")
    IncludeCookies = field("IncludeCookies")
    Prefix = field("Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCloudFrontDistributionLoggingTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionLoggingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionViewerCertificate:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionViewerCertificateTypeDef" = (
        dataclasses.field()
    )

    AcmCertificateArn = field("AcmCertificateArn")
    Certificate = field("Certificate")
    CertificateSource = field("CertificateSource")
    CloudFrontDefaultCertificate = field("CloudFrontDefaultCertificate")
    IamCertificateId = field("IamCertificateId")
    MinimumProtocolVersion = field("MinimumProtocolVersion")
    SslSupportMethod = field("SslSupportMethod")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionViewerCertificateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionViewerCertificateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginSslProtocolsOutput:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginSslProtocolsOutputTypeDef"
    ) = dataclasses.field()

    Items = field("Items")
    Quantity = field("Quantity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginSslProtocolsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginSslProtocolsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupFailoverStatusCodesOutput:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesOutputTypeDef"
    ) = dataclasses.field()

    Items = field("Items")
    Quantity = field("Quantity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupFailoverStatusCodes:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesTypeDef"
    ) = dataclasses.field()

    Items = field("Items")
    Quantity = field("Quantity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginGroupFailoverStatusCodesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginS3OriginConfig:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginS3OriginConfigTypeDef" = (
        dataclasses.field()
    )

    OriginAccessIdentity = field("OriginAccessIdentity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginS3OriginConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginS3OriginConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginSslProtocols:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginSslProtocolsTypeDef" = (
        dataclasses.field()
    )

    Items = field("Items")
    Quantity = field("Quantity")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginSslProtocolsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginSslProtocolsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudTrailTrailDetails:
    boto3_raw_data: "type_defs.AwsCloudTrailTrailDetailsTypeDef" = dataclasses.field()

    CloudWatchLogsLogGroupArn = field("CloudWatchLogsLogGroupArn")
    CloudWatchLogsRoleArn = field("CloudWatchLogsRoleArn")
    HasCustomEventSelectors = field("HasCustomEventSelectors")
    HomeRegion = field("HomeRegion")
    IncludeGlobalServiceEvents = field("IncludeGlobalServiceEvents")
    IsMultiRegionTrail = field("IsMultiRegionTrail")
    IsOrganizationTrail = field("IsOrganizationTrail")
    KmsKeyId = field("KmsKeyId")
    LogFileValidationEnabled = field("LogFileValidationEnabled")
    Name = field("Name")
    S3BucketName = field("S3BucketName")
    S3KeyPrefix = field("S3KeyPrefix")
    SnsTopicArn = field("SnsTopicArn")
    SnsTopicName = field("SnsTopicName")
    TrailArn = field("TrailArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCloudTrailTrailDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudTrailTrailDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudWatchAlarmDimensionsDetails:
    boto3_raw_data: "type_defs.AwsCloudWatchAlarmDimensionsDetailsTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudWatchAlarmDimensionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudWatchAlarmDimensionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectArtifactsDetails:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectArtifactsDetailsTypeDef" = (
        dataclasses.field()
    )

    ArtifactIdentifier = field("ArtifactIdentifier")
    EncryptionDisabled = field("EncryptionDisabled")
    Location = field("Location")
    Name = field("Name")
    NamespaceType = field("NamespaceType")
    OverrideArtifactName = field("OverrideArtifactName")
    Packaging = field("Packaging")
    Path = field("Path")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectArtifactsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectArtifactsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectSource:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectSourceTypeDef" = dataclasses.field()

    Type = field("Type")
    Location = field("Location")
    GitCloneDepth = field("GitCloneDepth")
    InsecureSsl = field("InsecureSsl")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCodeBuildProjectSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectVpcConfigOutput:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectVpcConfigOutputTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    Subnets = field("Subnets")
    SecurityGroupIds = field("SecurityGroupIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectVpcConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectVpcConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails:
    boto3_raw_data: (
        "type_defs.AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetailsTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectEnvironmentRegistryCredential:
    boto3_raw_data: (
        "type_defs.AwsCodeBuildProjectEnvironmentRegistryCredentialTypeDef"
    ) = dataclasses.field()

    Credential = field("Credential")
    CredentialProvider = field("CredentialProvider")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectEnvironmentRegistryCredentialTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCodeBuildProjectEnvironmentRegistryCredentialTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails:
    boto3_raw_data: (
        "type_defs.AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsTypeDef"
    ) = dataclasses.field()

    GroupName = field("GroupName")
    Status = field("Status")
    StreamName = field("StreamName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCodeBuildProjectLogsConfigCloudWatchLogsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectLogsConfigS3LogsDetails:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectLogsConfigS3LogsDetailsTypeDef" = (
        dataclasses.field()
    )

    EncryptionDisabled = field("EncryptionDisabled")
    Location = field("Location")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectLogsConfigS3LogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectLogsConfigS3LogsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectVpcConfig:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectVpcConfigTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")
    Subnets = field("Subnets")
    SecurityGroupIds = field("SecurityGroupIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCodeBuildProjectVpcConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectVpcConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCorsConfiguration:
    boto3_raw_data: "type_defs.AwsCorsConfigurationTypeDef" = dataclasses.field()

    AllowOrigins = field("AllowOrigins")
    AllowCredentials = field("AllowCredentials")
    ExposeHeaders = field("ExposeHeaders")
    MaxAge = field("MaxAge")
    AllowMethods = field("AllowMethods")
    AllowHeaders = field("AllowHeaders")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCorsConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCorsConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsEndpointDetails:
    boto3_raw_data: "type_defs.AwsDmsEndpointDetailsTypeDef" = dataclasses.field()

    CertificateArn = field("CertificateArn")
    DatabaseName = field("DatabaseName")
    EndpointArn = field("EndpointArn")
    EndpointIdentifier = field("EndpointIdentifier")
    EndpointType = field("EndpointType")
    EngineName = field("EngineName")
    ExternalId = field("ExternalId")
    ExtraConnectionAttributes = field("ExtraConnectionAttributes")
    KmsKeyId = field("KmsKeyId")
    Port = field("Port")
    ServerName = field("ServerName")
    SslMode = field("SslMode")
    Username = field("Username")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDmsEndpointDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDmsEndpointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsReplicationInstanceReplicationSubnetGroupDetails:
    boto3_raw_data: (
        "type_defs.AwsDmsReplicationInstanceReplicationSubnetGroupDetailsTypeDef"
    ) = dataclasses.field()

    ReplicationSubnetGroupIdentifier = field("ReplicationSubnetGroupIdentifier")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDmsReplicationInstanceReplicationSubnetGroupDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsDmsReplicationInstanceReplicationSubnetGroupDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsReplicationInstanceVpcSecurityGroupsDetails:
    boto3_raw_data: (
        "type_defs.AwsDmsReplicationInstanceVpcSecurityGroupsDetailsTypeDef"
    ) = dataclasses.field()

    VpcSecurityGroupId = field("VpcSecurityGroupId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDmsReplicationInstanceVpcSecurityGroupsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsDmsReplicationInstanceVpcSecurityGroupsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsReplicationTaskDetails:
    boto3_raw_data: "type_defs.AwsDmsReplicationTaskDetailsTypeDef" = (
        dataclasses.field()
    )

    CdcStartPosition = field("CdcStartPosition")
    CdcStartTime = field("CdcStartTime")
    CdcStopPosition = field("CdcStopPosition")
    MigrationType = field("MigrationType")
    Id = field("Id")
    ResourceIdentifier = field("ResourceIdentifier")
    ReplicationInstanceArn = field("ReplicationInstanceArn")
    ReplicationTaskIdentifier = field("ReplicationTaskIdentifier")
    ReplicationTaskSettings = field("ReplicationTaskSettings")
    SourceEndpointArn = field("SourceEndpointArn")
    TableMappings = field("TableMappings")
    TargetEndpointArn = field("TargetEndpointArn")
    TaskData = field("TaskData")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDmsReplicationTaskDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDmsReplicationTaskDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableAttributeDefinition:
    boto3_raw_data: "type_defs.AwsDynamoDbTableAttributeDefinitionTypeDef" = (
        dataclasses.field()
    )

    AttributeName = field("AttributeName")
    AttributeType = field("AttributeType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableAttributeDefinitionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableAttributeDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableBillingModeSummary:
    boto3_raw_data: "type_defs.AwsDynamoDbTableBillingModeSummaryTypeDef" = (
        dataclasses.field()
    )

    BillingMode = field("BillingMode")
    LastUpdateToPayPerRequestDateTime = field("LastUpdateToPayPerRequestDateTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableBillingModeSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableBillingModeSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableKeySchema:
    boto3_raw_data: "type_defs.AwsDynamoDbTableKeySchemaTypeDef" = dataclasses.field()

    AttributeName = field("AttributeName")
    KeyType = field("KeyType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableKeySchemaTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableKeySchemaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableProvisionedThroughput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableProvisionedThroughputTypeDef" = (
        dataclasses.field()
    )

    LastDecreaseDateTime = field("LastDecreaseDateTime")
    LastIncreaseDateTime = field("LastIncreaseDateTime")
    NumberOfDecreasesToday = field("NumberOfDecreasesToday")
    ReadCapacityUnits = field("ReadCapacityUnits")
    WriteCapacityUnits = field("WriteCapacityUnits")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableProvisionedThroughputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableProvisionedThroughputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableRestoreSummary:
    boto3_raw_data: "type_defs.AwsDynamoDbTableRestoreSummaryTypeDef" = (
        dataclasses.field()
    )

    SourceBackupArn = field("SourceBackupArn")
    SourceTableArn = field("SourceTableArn")
    RestoreDateTime = field("RestoreDateTime")
    RestoreInProgress = field("RestoreInProgress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableRestoreSummaryTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableRestoreSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableSseDescription:
    boto3_raw_data: "type_defs.AwsDynamoDbTableSseDescriptionTypeDef" = (
        dataclasses.field()
    )

    InaccessibleEncryptionDateTime = field("InaccessibleEncryptionDateTime")
    Status = field("Status")
    SseType = field("SseType")
    KmsMasterKeyArn = field("KmsMasterKeyArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableSseDescriptionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableSseDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableStreamSpecification:
    boto3_raw_data: "type_defs.AwsDynamoDbTableStreamSpecificationTypeDef" = (
        dataclasses.field()
    )

    StreamEnabled = field("StreamEnabled")
    StreamViewType = field("StreamViewType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableStreamSpecificationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableStreamSpecificationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableProjectionOutput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableProjectionOutputTypeDef" = (
        dataclasses.field()
    )

    NonKeyAttributes = field("NonKeyAttributes")
    ProjectionType = field("ProjectionType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableProjectionOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableProjectionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableProjection:
    boto3_raw_data: "type_defs.AwsDynamoDbTableProjectionTypeDef" = dataclasses.field()

    NonKeyAttributes = field("NonKeyAttributes")
    ProjectionType = field("ProjectionType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableProjectionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableProjectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableProvisionedThroughputOverride:
    boto3_raw_data: "type_defs.AwsDynamoDbTableProvisionedThroughputOverrideTypeDef" = (
        dataclasses.field()
    )

    ReadCapacityUnits = field("ReadCapacityUnits")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableProvisionedThroughputOverrideTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableProvisionedThroughputOverrideTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointAuthenticationOptionsActiveDirectoryDetails:
    boto3_raw_data: "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsActiveDirectoryDetailsTypeDef" = (dataclasses.field())

    DirectoryId = field("DirectoryId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsActiveDirectoryDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsActiveDirectoryDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointAuthenticationOptionsFederatedAuthenticationDetails:
    boto3_raw_data: "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsFederatedAuthenticationDetailsTypeDef" = (dataclasses.field())

    SamlProviderArn = field("SamlProviderArn")
    SelfServiceSamlProviderArn = field("SelfServiceSamlProviderArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsFederatedAuthenticationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsFederatedAuthenticationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointAuthenticationOptionsMutualAuthenticationDetails:
    boto3_raw_data: "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsMutualAuthenticationDetailsTypeDef" = (dataclasses.field())

    ClientRootCertificateChain = field("ClientRootCertificateChain")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsMutualAuthenticationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsMutualAuthenticationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetailsTypeDef"
    ) = dataclasses.field()

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    BannerText = field("BannerText")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointConnectionLogOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    CloudwatchLogGroup = field("CloudwatchLogGroup")
    CloudwatchLogStream = field("CloudwatchLogStream")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointConnectionLogOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2EipDetails:
    boto3_raw_data: "type_defs.AwsEc2EipDetailsTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")
    PublicIp = field("PublicIp")
    AllocationId = field("AllocationId")
    AssociationId = field("AssociationId")
    Domain = field("Domain")
    PublicIpv4Pool = field("PublicIpv4Pool")
    NetworkBorderGroup = field("NetworkBorderGroup")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NetworkInterfaceOwnerId = field("NetworkInterfaceOwnerId")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsEc2EipDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2EipDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2InstanceMetadataOptions:
    boto3_raw_data: "type_defs.AwsEc2InstanceMetadataOptionsTypeDef" = (
        dataclasses.field()
    )

    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    HttpTokens = field("HttpTokens")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2InstanceMetadataOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2InstanceMetadataOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2InstanceMonitoringDetails:
    boto3_raw_data: "type_defs.AwsEc2InstanceMonitoringDetailsTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2InstanceMonitoringDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2InstanceMonitoringDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2InstanceNetworkInterfacesDetails:
    boto3_raw_data: "type_defs.AwsEc2InstanceNetworkInterfacesDetailsTypeDef" = (
        dataclasses.field()
    )

    NetworkInterfaceId = field("NetworkInterfaceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2InstanceNetworkInterfacesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2InstanceNetworkInterfacesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetailsTypeDef"
    ) = dataclasses.field()

    DeleteOnTermination = field("DeleteOnTermination")
    Encrypted = field("Encrypted")
    Iops = field("Iops")
    KmsKeyId = field("KmsKeyId")
    SnapshotId = field("SnapshotId")
    Throughput = field("Throughput")
    VolumeSize = field("VolumeSize")
    VolumeType = field("VolumeType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetDetailsTypeDef" = (dataclasses.field())

    CapacityReservationId = field("CapacityReservationId")
    CapacityReservationResourceGroupArn = field("CapacityReservationResourceGroupArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataCpuOptionsDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataCpuOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    CoreCount = field("CoreCount")
    ThreadsPerCore = field("ThreadsPerCore")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataCpuOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataCpuOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataCreditSpecificationDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataCreditSpecificationDetailsTypeDef"
    ) = dataclasses.field()

    CpuCredits = field("CpuCredits")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataCreditSpecificationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataCreditSpecificationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetailsTypeDef"
    ) = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetailsTypeDef"
    ) = dataclasses.field()

    Count = field("Count")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataEnclaveOptionsDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataEnclaveOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataEnclaveOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataEnclaveOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataHibernationOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataHibernationOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Configured = field("Configured")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataHibernationOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataHibernationOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataIamInstanceProfileDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataIamInstanceProfileDetailsTypeDef"
    ) = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataIamInstanceProfileDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataIamInstanceProfileDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataLicenseSetDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataLicenseSetDetailsTypeDef" = (
        dataclasses.field()
    )

    LicenseConfigurationArn = field("LicenseConfigurationArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataLicenseSetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataLicenseSetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataMaintenanceOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataMaintenanceOptionsDetailsTypeDef"
    ) = dataclasses.field()

    AutoRecovery = field("AutoRecovery")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataMaintenanceOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataMaintenanceOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataMetadataOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataMetadataOptionsDetailsTypeDef"
    ) = dataclasses.field()

    HttpEndpoint = field("HttpEndpoint")
    HttpProtocolIpv6 = field("HttpProtocolIpv6")
    HttpTokens = field("HttpTokens")
    HttpPutResponseHopLimit = field("HttpPutResponseHopLimit")
    InstanceMetadataTags = field("InstanceMetadataTags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataMetadataOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataMetadataOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataMonitoringDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataMonitoringDetailsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataMonitoringDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataMonitoringDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataPlacementDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataPlacementDetailsTypeDef" = (
        dataclasses.field()
    )

    Affinity = field("Affinity")
    AvailabilityZone = field("AvailabilityZone")
    GroupName = field("GroupName")
    HostId = field("HostId")
    HostResourceGroupArn = field("HostResourceGroupArn")
    PartitionNumber = field("PartitionNumber")
    SpreadDomain = field("SpreadDomain")
    Tenancy = field("Tenancy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataPlacementDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataPlacementDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetailsTypeDef"
    ) = dataclasses.field()

    EnableResourceNameDnsAAAARecord = field("EnableResourceNameDnsAAAARecord")
    EnableResourceNameDnsARecord = field("EnableResourceNameDnsARecord")
    HostnameType = field("HostnameType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceMarketOptionsSpotOptionsDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsSpotOptionsDetailsTypeDef" = (dataclasses.field())

    BlockDurationMinutes = field("BlockDurationMinutes")
    InstanceInterruptionBehavior = field("InstanceInterruptionBehavior")
    MaxPrice = field("MaxPrice")
    SpotInstanceType = field("SpotInstanceType")
    ValidUntil = field("ValidUntil")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsSpotOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsSpotOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetailsTypeDef"
    ) = dataclasses.field()

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetailsTypeDef" = (dataclasses.field())

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetailsTypeDef"
    ) = dataclasses.field()

    Max = field("Max")
    Min = field("Min")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetailsTypeDef" = (dataclasses.field())

    Ipv4Prefix = field("Ipv4Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetailsTypeDef" = (dataclasses.field())

    Ipv6Address = field("Ipv6Address")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetailsTypeDef" = (dataclasses.field())

    Ipv6Prefix = field("Ipv6Prefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsTypeDef" = (dataclasses.field())

    Primary = field("Primary")
    PrivateIpAddress = field("PrivateIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkAclAssociation:
    boto3_raw_data: "type_defs.AwsEc2NetworkAclAssociationTypeDef" = dataclasses.field()

    NetworkAclAssociationId = field("NetworkAclAssociationId")
    NetworkAclId = field("NetworkAclId")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkAclAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkAclAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IcmpTypeCode:
    boto3_raw_data: "type_defs.IcmpTypeCodeTypeDef" = dataclasses.field()

    Code = field("Code")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IcmpTypeCodeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IcmpTypeCodeTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortRangeFromTo:
    boto3_raw_data: "type_defs.PortRangeFromToTypeDef" = dataclasses.field()

    From = field("From")
    To = field("To")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PortRangeFromToTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PortRangeFromToTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfaceAttachment:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfaceAttachmentTypeDef" = (
        dataclasses.field()
    )

    AttachTime = field("AttachTime")
    AttachmentId = field("AttachmentId")
    DeleteOnTermination = field("DeleteOnTermination")
    DeviceIndex = field("DeviceIndex")
    InstanceId = field("InstanceId")
    InstanceOwnerId = field("InstanceOwnerId")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkInterfaceAttachmentTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfaceAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfaceIpV6AddressDetail:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfaceIpV6AddressDetailTypeDef" = (
        dataclasses.field()
    )

    IpV6Address = field("IpV6Address")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2NetworkInterfaceIpV6AddressDetailTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfaceIpV6AddressDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfacePrivateIpAddressDetail:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfacePrivateIpAddressDetailTypeDef" = (
        dataclasses.field()
    )

    PrivateIpAddress = field("PrivateIpAddress")
    PrivateDnsName = field("PrivateDnsName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2NetworkInterfacePrivateIpAddressDetailTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfacePrivateIpAddressDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfaceSecurityGroup:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfaceSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    GroupId = field("GroupId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2NetworkInterfaceSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfaceSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PropagatingVgwSetDetails:
    boto3_raw_data: "type_defs.PropagatingVgwSetDetailsTypeDef" = dataclasses.field()

    GatewayId = field("GatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PropagatingVgwSetDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PropagatingVgwSetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RouteSetDetails:
    boto3_raw_data: "type_defs.RouteSetDetailsTypeDef" = dataclasses.field()

    CarrierGatewayId = field("CarrierGatewayId")
    CoreNetworkArn = field("CoreNetworkArn")
    DestinationCidrBlock = field("DestinationCidrBlock")
    DestinationIpv6CidrBlock = field("DestinationIpv6CidrBlock")
    DestinationPrefixListId = field("DestinationPrefixListId")
    EgressOnlyInternetGatewayId = field("EgressOnlyInternetGatewayId")
    GatewayId = field("GatewayId")
    InstanceId = field("InstanceId")
    InstanceOwnerId = field("InstanceOwnerId")
    LocalGatewayId = field("LocalGatewayId")
    NatGatewayId = field("NatGatewayId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    Origin = field("Origin")
    State = field("State")
    TransitGatewayId = field("TransitGatewayId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RouteSetDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RouteSetDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupIpRange:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupIpRangeTypeDef" = dataclasses.field()

    CidrIp = field("CidrIp")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupIpRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupIpRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupIpv6Range:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupIpv6RangeTypeDef" = (
        dataclasses.field()
    )

    CidrIpv6 = field("CidrIpv6")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupIpv6RangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupIpv6RangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupPrefixListId:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupPrefixListIdTypeDef" = (
        dataclasses.field()
    )

    PrefixListId = field("PrefixListId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupPrefixListIdTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupPrefixListIdTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupUserIdGroupPair:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupUserIdGroupPairTypeDef" = (
        dataclasses.field()
    )

    GroupId = field("GroupId")
    GroupName = field("GroupName")
    PeeringStatus = field("PeeringStatus")
    UserId = field("UserId")
    VpcId = field("VpcId")
    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2SecurityGroupUserIdGroupPairTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupUserIdGroupPairTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Ipv6CidrBlockAssociation:
    boto3_raw_data: "type_defs.Ipv6CidrBlockAssociationTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    Ipv6CidrBlock = field("Ipv6CidrBlock")
    CidrBlockState = field("CidrBlockState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.Ipv6CidrBlockAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.Ipv6CidrBlockAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2TransitGatewayDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2TransitGatewayDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Description = field("Description")
    DefaultRouteTablePropagation = field("DefaultRouteTablePropagation")
    AutoAcceptSharedAttachments = field("AutoAcceptSharedAttachments")
    DefaultRouteTableAssociation = field("DefaultRouteTableAssociation")
    TransitGatewayCidrBlocks = field("TransitGatewayCidrBlocks")
    AssociationDefaultRouteTableId = field("AssociationDefaultRouteTableId")
    PropagationDefaultRouteTableId = field("PropagationDefaultRouteTableId")
    VpnEcmpSupport = field("VpnEcmpSupport")
    DnsSupport = field("DnsSupport")
    MulticastSupport = field("MulticastSupport")
    AmazonSideAsn = field("AmazonSideAsn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2TransitGatewayDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2TransitGatewayDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2TransitGatewayDetails:
    boto3_raw_data: "type_defs.AwsEc2TransitGatewayDetailsTypeDef" = dataclasses.field()

    Id = field("Id")
    Description = field("Description")
    DefaultRouteTablePropagation = field("DefaultRouteTablePropagation")
    AutoAcceptSharedAttachments = field("AutoAcceptSharedAttachments")
    DefaultRouteTableAssociation = field("DefaultRouteTableAssociation")
    TransitGatewayCidrBlocks = field("TransitGatewayCidrBlocks")
    AssociationDefaultRouteTableId = field("AssociationDefaultRouteTableId")
    PropagationDefaultRouteTableId = field("PropagationDefaultRouteTableId")
    VpnEcmpSupport = field("VpnEcmpSupport")
    DnsSupport = field("DnsSupport")
    MulticastSupport = field("MulticastSupport")
    AmazonSideAsn = field("AmazonSideAsn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2TransitGatewayDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2TransitGatewayDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VolumeAttachment:
    boto3_raw_data: "type_defs.AwsEc2VolumeAttachmentTypeDef" = dataclasses.field()

    AttachTime = field("AttachTime")
    DeleteOnTermination = field("DeleteOnTermination")
    InstanceId = field("InstanceId")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VolumeAttachmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VolumeAttachmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CidrBlockAssociation:
    boto3_raw_data: "type_defs.CidrBlockAssociationTypeDef" = dataclasses.field()

    AssociationId = field("AssociationId")
    CidrBlock = field("CidrBlock")
    CidrBlockState = field("CidrBlockState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CidrBlockAssociationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CidrBlockAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcEndpointServiceServiceTypeDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcEndpointServiceServiceTypeDetailsTypeDef" = (
        dataclasses.field()
    )

    ServiceType = field("ServiceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcEndpointServiceServiceTypeDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcEndpointServiceServiceTypeDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcPeeringConnectionStatusDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcPeeringConnectionStatusDetailsTypeDef" = (
        dataclasses.field()
    )

    Code = field("Code")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcPeeringConnectionStatusDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcPeeringConnectionStatusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcInfoCidrBlockSetDetails:
    boto3_raw_data: "type_defs.VpcInfoCidrBlockSetDetailsTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcInfoCidrBlockSetDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcInfoCidrBlockSetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcInfoIpv6CidrBlockSetDetails:
    boto3_raw_data: "type_defs.VpcInfoIpv6CidrBlockSetDetailsTypeDef" = (
        dataclasses.field()
    )

    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VpcInfoIpv6CidrBlockSetDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcInfoIpv6CidrBlockSetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VpcInfoPeeringOptionsDetails:
    boto3_raw_data: "type_defs.VpcInfoPeeringOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    AllowDnsResolutionFromRemoteVpc = field("AllowDnsResolutionFromRemoteVpc")
    AllowEgressFromLocalClassicLinkToRemoteVpc = field(
        "AllowEgressFromLocalClassicLinkToRemoteVpc"
    )
    AllowEgressFromLocalVpcToRemoteClassicLink = field(
        "AllowEgressFromLocalVpcToRemoteClassicLink"
    )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VpcInfoPeeringOptionsDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VpcInfoPeeringOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionRoutesDetails:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionRoutesDetailsTypeDef" = (
        dataclasses.field()
    )

    DestinationCidrBlock = field("DestinationCidrBlock")
    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2VpnConnectionRoutesDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionRoutesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionVgwTelemetryDetails:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionVgwTelemetryDetailsTypeDef" = (
        dataclasses.field()
    )

    AcceptedRouteCount = field("AcceptedRouteCount")
    CertificateArn = field("CertificateArn")
    LastStatusChange = field("LastStatusChange")
    OutsideIpAddress = field("OutsideIpAddress")
    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpnConnectionVgwTelemetryDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionVgwTelemetryDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionOptionsTunnelOptionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    DpdTimeoutSeconds = field("DpdTimeoutSeconds")
    IkeVersions = field("IkeVersions")
    OutsideIpAddress = field("OutsideIpAddress")
    Phase1DhGroupNumbers = field("Phase1DhGroupNumbers")
    Phase1EncryptionAlgorithms = field("Phase1EncryptionAlgorithms")
    Phase1IntegrityAlgorithms = field("Phase1IntegrityAlgorithms")
    Phase1LifetimeSeconds = field("Phase1LifetimeSeconds")
    Phase2DhGroupNumbers = field("Phase2DhGroupNumbers")
    Phase2EncryptionAlgorithms = field("Phase2EncryptionAlgorithms")
    Phase2IntegrityAlgorithms = field("Phase2IntegrityAlgorithms")
    Phase2LifetimeSeconds = field("Phase2LifetimeSeconds")
    PreSharedKey = field("PreSharedKey")
    RekeyFuzzPercentage = field("RekeyFuzzPercentage")
    RekeyMarginTimeSeconds = field("RekeyMarginTimeSeconds")
    ReplayWindowSize = field("ReplayWindowSize")
    TunnelInsideCidr = field("TunnelInsideCidr")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionOptionsTunnelOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsTypeDef"
    ) = dataclasses.field()

    DpdTimeoutSeconds = field("DpdTimeoutSeconds")
    IkeVersions = field("IkeVersions")
    OutsideIpAddress = field("OutsideIpAddress")
    Phase1DhGroupNumbers = field("Phase1DhGroupNumbers")
    Phase1EncryptionAlgorithms = field("Phase1EncryptionAlgorithms")
    Phase1IntegrityAlgorithms = field("Phase1IntegrityAlgorithms")
    Phase1LifetimeSeconds = field("Phase1LifetimeSeconds")
    Phase2DhGroupNumbers = field("Phase2DhGroupNumbers")
    Phase2EncryptionAlgorithms = field("Phase2EncryptionAlgorithms")
    Phase2IntegrityAlgorithms = field("Phase2IntegrityAlgorithms")
    Phase2LifetimeSeconds = field("Phase2LifetimeSeconds")
    PreSharedKey = field("PreSharedKey")
    RekeyFuzzPercentage = field("RekeyFuzzPercentage")
    RekeyMarginTimeSeconds = field("RekeyMarginTimeSeconds")
    ReplayWindowSize = field("ReplayWindowSize")
    TunnelInsideCidr = field("TunnelInsideCidr")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2VpnConnectionOptionsTunnelOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcrContainerImageDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcrContainerImageDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    RegistryId = field("RegistryId")
    RepositoryName = field("RepositoryName")
    Architecture = field("Architecture")
    ImageDigest = field("ImageDigest")
    ImageTags = field("ImageTags")
    ImagePublishedAt = field("ImagePublishedAt")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcrContainerImageDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcrContainerImageDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcrContainerImageDetails:
    boto3_raw_data: "type_defs.AwsEcrContainerImageDetailsTypeDef" = dataclasses.field()

    RegistryId = field("RegistryId")
    RepositoryName = field("RepositoryName")
    Architecture = field("Architecture")
    ImageDigest = field("ImageDigest")
    ImageTags = field("ImageTags")
    ImagePublishedAt = field("ImagePublishedAt")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcrContainerImageDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcrContainerImageDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcrRepositoryImageScanningConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsEcrRepositoryImageScanningConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    ScanOnPush = field("ScanOnPush")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcrRepositoryImageScanningConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcrRepositoryImageScanningConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcrRepositoryLifecyclePolicyDetails:
    boto3_raw_data: "type_defs.AwsEcrRepositoryLifecyclePolicyDetailsTypeDef" = (
        dataclasses.field()
    )

    LifecyclePolicyText = field("LifecyclePolicyText")
    RegistryId = field("RegistryId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcrRepositoryLifecyclePolicyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcrRepositoryLifecyclePolicyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterClusterSettingsDetails:
    boto3_raw_data: "type_defs.AwsEcsClusterClusterSettingsDetailsTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsClusterClusterSettingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsClusterClusterSettingsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetailsTypeDef" = (dataclasses.field())

    CloudWatchEncryptionEnabled = field("CloudWatchEncryptionEnabled")
    CloudWatchLogGroupName = field("CloudWatchLogGroupName")
    S3BucketName = field("S3BucketName")
    S3EncryptionEnabled = field("S3EncryptionEnabled")
    S3KeyPrefix = field("S3KeyPrefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterDefaultCapacityProviderStrategyDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsClusterDefaultCapacityProviderStrategyDetailsTypeDef"
    ) = dataclasses.field()

    Base = field("Base")
    CapacityProvider = field("CapacityProvider")
    Weight = field("Weight")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsClusterDefaultCapacityProviderStrategyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsClusterDefaultCapacityProviderStrategyDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMountPoint:
    boto3_raw_data: "type_defs.AwsMountPointTypeDef" = dataclasses.field()

    SourceVolume = field("SourceVolume")
    ContainerPath = field("ContainerPath")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsMountPointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AwsMountPointTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceCapacityProviderStrategyDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceCapacityProviderStrategyDetailsTypeDef" = (
        dataclasses.field()
    )

    Base = field("Base")
    CapacityProvider = field("CapacityProvider")
    Weight = field("Weight")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceCapacityProviderStrategyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceCapacityProviderStrategyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetailsTypeDef" = (dataclasses.field())

    Enable = field("Enable")
    Rollback = field("Rollback")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceDeploymentControllerDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceDeploymentControllerDetailsTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceDeploymentControllerDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceDeploymentControllerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceLoadBalancersDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceLoadBalancersDetailsTypeDef" = (
        dataclasses.field()
    )

    ContainerName = field("ContainerName")
    ContainerPort = field("ContainerPort")
    LoadBalancerName = field("LoadBalancerName")
    TargetGroupArn = field("TargetGroupArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceLoadBalancersDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceLoadBalancersDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServicePlacementConstraintsDetails:
    boto3_raw_data: "type_defs.AwsEcsServicePlacementConstraintsDetailsTypeDef" = (
        dataclasses.field()
    )

    Expression = field("Expression")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServicePlacementConstraintsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServicePlacementConstraintsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServicePlacementStrategiesDetails:
    boto3_raw_data: "type_defs.AwsEcsServicePlacementStrategiesDetailsTypeDef" = (
        dataclasses.field()
    )

    Field = field("Field")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServicePlacementStrategiesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServicePlacementStrategiesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceServiceRegistriesDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceServiceRegistriesDetailsTypeDef" = (
        dataclasses.field()
    )

    ContainerName = field("ContainerName")
    ContainerPort = field("ContainerPort")
    Port = field("Port")
    RegistryArn = field("RegistryArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceServiceRegistriesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceServiceRegistriesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsOutputTypeDef" = (dataclasses.field())

    AssignPublicIp = field("AssignPublicIp")
    SecurityGroups = field("SecurityGroups")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    AssignPublicIp = field("AssignPublicIp")
    SecurityGroups = field("SecurityGroups")
    Subnets = field("Subnets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsTypeDef"
    ) = dataclasses.field()

    Condition = field("Condition")
    ContainerName = field("ContainerName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetailsTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetailsTypeDef" = (dataclasses.field())

    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetailsTypeDef"
    ) = dataclasses.field()

    Hostname = field("Hostname")
    IpAddress = field("IpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsOutputTypeDef" = (dataclasses.field())

    Options = field("Options")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsOutputTypeDef" = (dataclasses.field())

    Command = field("Command")
    Interval = field("Interval")
    Retries = field("Retries")
    StartPeriod = field("StartPeriod")
    Timeout = field("Timeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsTypeDef"
    ) = dataclasses.field()

    ContainerPath = field("ContainerPath")
    ReadOnly = field("ReadOnly")
    SourceVolume = field("SourceVolume")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsTypeDef"
    ) = dataclasses.field()

    ContainerPort = field("ContainerPort")
    HostPort = field("HostPort")
    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetailsTypeDef" = (dataclasses.field())

    CredentialsParameter = field("CredentialsParameter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetailsTypeDef" = (dataclasses.field())

    Type = field("Type")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetailsTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    ValueFrom = field("ValueFrom")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSecretsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetailsTypeDef"
    ) = dataclasses.field()

    Namespace = field("Namespace")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetailsTypeDef"
    ) = dataclasses.field()

    HardLimit = field("HardLimit")
    Name = field("Name")
    SoftLimit = field("SoftLimit")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetailsTypeDef"
    ) = dataclasses.field()

    ReadOnly = field("ReadOnly")
    SourceContainer = field("SourceContainer")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsTypeDef" = (dataclasses.field())

    Options = field("Options")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsTypeDef"
    ) = dataclasses.field()

    Command = field("Command")
    Interval = field("Interval")
    Retries = field("Retries")
    StartPeriod = field("StartPeriod")
    Timeout = field("Timeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsOutputTypeDef" = (dataclasses.field())

    Add = field("Add")
    Drop = field("Drop")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsTypeDef" = (dataclasses.field())

    Add = field("Add")
    Drop = field("Drop")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsOutputTypeDef" = (dataclasses.field())

    ContainerPath = field("ContainerPath")
    HostPath = field("HostPath")
    Permissions = field("Permissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsOutputTypeDef" = (dataclasses.field())

    ContainerPath = field("ContainerPath")
    MountOptions = field("MountOptions")
    Size = field("Size")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsTypeDef" = (dataclasses.field())

    ContainerPath = field("ContainerPath")
    HostPath = field("HostPath")
    Permissions = field("Permissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsTypeDef" = (dataclasses.field())

    ContainerPath = field("ContainerPath")
    MountOptions = field("MountOptions")
    Size = field("Size")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetailsTypeDef" = (dataclasses.field())

    Name = field("Name")
    ValueFrom = field("ValueFrom")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionInferenceAcceleratorsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionInferenceAcceleratorsDetailsTypeDef"
    ) = dataclasses.field()

    DeviceName = field("DeviceName")
    DeviceType = field("DeviceType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionInferenceAcceleratorsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionInferenceAcceleratorsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionPlacementConstraintsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionPlacementConstraintsDetailsTypeDef"
    ) = dataclasses.field()

    Expression = field("Expression")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionPlacementConstraintsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionPlacementConstraintsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetailsTypeDef" = (dataclasses.field())

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsOutputTypeDef" = (dataclasses.field())

    Autoprovision = field("Autoprovision")
    Driver = field("Driver")
    DriverOpts = field("DriverOpts")
    Labels = field("Labels")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesHostDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionVolumesHostDetailsTypeDef" = (
        dataclasses.field()
    )

    SourcePath = field("SourcePath")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesHostDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionVolumesHostDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    Autoprovision = field("Autoprovision")
    Driver = field("Driver")
    DriverOpts = field("DriverOpts")
    Labels = field("Labels")
    Scope = field("Scope")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetailsTypeDef" = (dataclasses.field())

    AccessPointId = field("AccessPointId")
    Iam = field("Iam")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskVolumeHostDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskVolumeHostDetailsTypeDef" = dataclasses.field()

    SourcePath = field("SourcePath")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsTaskVolumeHostDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskVolumeHostDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointPosixUserDetailsOutput:
    boto3_raw_data: "type_defs.AwsEfsAccessPointPosixUserDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Gid = field("Gid")
    SecondaryGids = field("SecondaryGids")
    Uid = field("Uid")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEfsAccessPointPosixUserDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEfsAccessPointPosixUserDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointPosixUserDetails:
    boto3_raw_data: "type_defs.AwsEfsAccessPointPosixUserDetailsTypeDef" = (
        dataclasses.field()
    )

    Gid = field("Gid")
    SecondaryGids = field("SecondaryGids")
    Uid = field("Uid")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEfsAccessPointPosixUserDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEfsAccessPointPosixUserDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointRootDirectoryCreationInfoDetails:
    boto3_raw_data: (
        "type_defs.AwsEfsAccessPointRootDirectoryCreationInfoDetailsTypeDef"
    ) = dataclasses.field()

    OwnerGid = field("OwnerGid")
    OwnerUid = field("OwnerUid")
    Permissions = field("Permissions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEfsAccessPointRootDirectoryCreationInfoDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEfsAccessPointRootDirectoryCreationInfoDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterResourcesVpcConfigDetailsOutput:
    boto3_raw_data: "type_defs.AwsEksClusterResourcesVpcConfigDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    EndpointPublicAccess = field("EndpointPublicAccess")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEksClusterResourcesVpcConfigDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterResourcesVpcConfigDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterLoggingClusterLoggingDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEksClusterLoggingClusterLoggingDetailsOutputTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    Types = field("Types")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEksClusterLoggingClusterLoggingDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEksClusterLoggingClusterLoggingDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterLoggingClusterLoggingDetails:
    boto3_raw_data: "type_defs.AwsEksClusterLoggingClusterLoggingDetailsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    Types = field("Types")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEksClusterLoggingClusterLoggingDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterLoggingClusterLoggingDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterResourcesVpcConfigDetails:
    boto3_raw_data: "type_defs.AwsEksClusterResourcesVpcConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    EndpointPublicAccess = field("EndpointPublicAccess")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEksClusterResourcesVpcConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterResourcesVpcConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticBeanstalkEnvironmentEnvironmentLink:
    boto3_raw_data: "type_defs.AwsElasticBeanstalkEnvironmentEnvironmentLinkTypeDef" = (
        dataclasses.field()
    )

    EnvironmentName = field("EnvironmentName")
    LinkName = field("LinkName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticBeanstalkEnvironmentEnvironmentLinkTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticBeanstalkEnvironmentEnvironmentLinkTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticBeanstalkEnvironmentOptionSetting:
    boto3_raw_data: "type_defs.AwsElasticBeanstalkEnvironmentOptionSettingTypeDef" = (
        dataclasses.field()
    )

    Namespace = field("Namespace")
    OptionName = field("OptionName")
    ResourceName = field("ResourceName")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticBeanstalkEnvironmentOptionSettingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticBeanstalkEnvironmentOptionSettingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticBeanstalkEnvironmentTier:
    boto3_raw_data: "type_defs.AwsElasticBeanstalkEnvironmentTierTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Type = field("Type")
    Version = field("Version")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticBeanstalkEnvironmentTierTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticBeanstalkEnvironmentTierTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainDomainEndpointOptions:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainDomainEndpointOptionsTypeDef" = (
        dataclasses.field()
    )

    EnforceHTTPS = field("EnforceHTTPS")
    TLSSecurityPolicy = field("TLSSecurityPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainDomainEndpointOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainDomainEndpointOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainEncryptionAtRestOptions:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainEncryptionAtRestOptionsTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainEncryptionAtRestOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainEncryptionAtRestOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainNodeToNodeEncryptionOptions:
    boto3_raw_data: (
        "type_defs.AwsElasticsearchDomainNodeToNodeEncryptionOptionsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainNodeToNodeEncryptionOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsElasticsearchDomainNodeToNodeEncryptionOptionsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainServiceSoftwareOptions:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainServiceSoftwareOptionsTypeDef" = (
        dataclasses.field()
    )

    AutomatedUpdateDate = field("AutomatedUpdateDate")
    Cancellable = field("Cancellable")
    CurrentVersion = field("CurrentVersion")
    Description = field("Description")
    NewVersion = field("NewVersion")
    UpdateAvailable = field("UpdateAvailable")
    UpdateStatus = field("UpdateStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainServiceSoftwareOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainServiceSoftwareOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainVPCOptionsOutput:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainVPCOptionsOutputTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    VPCId = field("VPCId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainVPCOptionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainVPCOptionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetailsTypeDef" = (dataclasses.field())

    AvailabilityZoneCount = field("AvailabilityZoneCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainLogPublishingOptionsLogConfig:
    boto3_raw_data: (
        "type_defs.AwsElasticsearchDomainLogPublishingOptionsLogConfigTypeDef"
    ) = dataclasses.field()

    CloudWatchLogsLogGroupArn = field("CloudWatchLogsLogGroupArn")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainLogPublishingOptionsLogConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsElasticsearchDomainLogPublishingOptionsLogConfigTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainVPCOptions:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainVPCOptionsTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    VPCId = field("VPCId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElasticsearchDomainVPCOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainVPCOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbAppCookieStickinessPolicy:
    boto3_raw_data: "type_defs.AwsElbAppCookieStickinessPolicyTypeDef" = (
        dataclasses.field()
    )

    CookieName = field("CookieName")
    PolicyName = field("PolicyName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbAppCookieStickinessPolicyTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbAppCookieStickinessPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLbCookieStickinessPolicy:
    boto3_raw_data: "type_defs.AwsElbLbCookieStickinessPolicyTypeDef" = (
        dataclasses.field()
    )

    CookieExpirationPeriod = field("CookieExpirationPeriod")
    PolicyName = field("PolicyName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbLbCookieStickinessPolicyTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLbCookieStickinessPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerAccessLog:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerAccessLogTypeDef" = dataclasses.field()

    EmitInterval = field("EmitInterval")
    Enabled = field("Enabled")
    S3BucketName = field("S3BucketName")
    S3BucketPrefix = field("S3BucketPrefix")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerAccessLogTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerAccessLogTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerAdditionalAttribute:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerAdditionalAttributeTypeDef" = (
        dataclasses.field()
    )

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerAdditionalAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerAdditionalAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerConnectionDraining:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerConnectionDrainingTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")
    Timeout = field("Timeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerConnectionDrainingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerConnectionDrainingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerConnectionSettings:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerConnectionSettingsTypeDef" = (
        dataclasses.field()
    )

    IdleTimeout = field("IdleTimeout")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerConnectionSettingsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerConnectionSettingsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerCrossZoneLoadBalancing:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerCrossZoneLoadBalancingTypeDef" = (
        dataclasses.field()
    )

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerCrossZoneLoadBalancingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerCrossZoneLoadBalancingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerBackendServerDescriptionOutput:
    boto3_raw_data: (
        "type_defs.AwsElbLoadBalancerBackendServerDescriptionOutputTypeDef"
    ) = dataclasses.field()

    InstancePort = field("InstancePort")
    PolicyNames = field("PolicyNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerBackendServerDescriptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsElbLoadBalancerBackendServerDescriptionOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerBackendServerDescription:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerBackendServerDescriptionTypeDef" = (
        dataclasses.field()
    )

    InstancePort = field("InstancePort")
    PolicyNames = field("PolicyNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerBackendServerDescriptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerBackendServerDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerHealthCheck:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerHealthCheckTypeDef" = (
        dataclasses.field()
    )

    HealthyThreshold = field("HealthyThreshold")
    Interval = field("Interval")
    Target = field("Target")
    Timeout = field("Timeout")
    UnhealthyThreshold = field("UnhealthyThreshold")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerHealthCheckTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerHealthCheckTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerInstance:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerInstanceTypeDef" = dataclasses.field()

    InstanceId = field("InstanceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerInstanceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerInstanceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerSourceSecurityGroup:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerSourceSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    OwnerAlias = field("OwnerAlias")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerSourceSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerSourceSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerListener:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerListenerTypeDef" = dataclasses.field()

    InstancePort = field("InstancePort")
    InstanceProtocol = field("InstanceProtocol")
    LoadBalancerPort = field("LoadBalancerPort")
    Protocol = field("Protocol")
    SslCertificateId = field("SslCertificateId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerListenerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerListenerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbv2LoadBalancerAttribute:
    boto3_raw_data: "type_defs.AwsElbv2LoadBalancerAttributeTypeDef" = (
        dataclasses.field()
    )

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbv2LoadBalancerAttributeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbv2LoadBalancerAttributeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class LoadBalancerState:
    boto3_raw_data: "type_defs.LoadBalancerStateTypeDef" = dataclasses.field()

    Code = field("Code")
    Reason = field("Reason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.LoadBalancerStateTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.LoadBalancerStateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventSchemasRegistryDetails:
    boto3_raw_data: "type_defs.AwsEventSchemasRegistryDetailsTypeDef" = (
        dataclasses.field()
    )

    Description = field("Description")
    RegistryArn = field("RegistryArn")
    RegistryName = field("RegistryName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEventSchemasRegistryDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventSchemasRegistryDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointEventBusesDetails:
    boto3_raw_data: "type_defs.AwsEventsEndpointEventBusesDetailsTypeDef" = (
        dataclasses.field()
    )

    EventBusArn = field("EventBusArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointEventBusesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEndpointEventBusesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointReplicationConfigDetails:
    boto3_raw_data: "type_defs.AwsEventsEndpointReplicationConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    State = field("State")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointReplicationConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEndpointReplicationConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointRoutingConfigFailoverConfigPrimaryDetails:
    boto3_raw_data: (
        "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigPrimaryDetailsTypeDef"
    ) = dataclasses.field()

    HealthCheck = field("HealthCheck")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigPrimaryDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigPrimaryDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointRoutingConfigFailoverConfigSecondaryDetails:
    boto3_raw_data: (
        "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigSecondaryDetailsTypeDef"
    ) = dataclasses.field()

    Route = field("Route")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigSecondaryDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigSecondaryDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEventbusDetails:
    boto3_raw_data: "type_defs.AwsEventsEventbusDetailsTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Name = field("Name")
    Policy = field("Policy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEventsEventbusDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEventbusDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesCloudTrailDetails:
    boto3_raw_data: (
        "type_defs.AwsGuardDutyDetectorDataSourcesCloudTrailDetailsTypeDef"
    ) = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesCloudTrailDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesCloudTrailDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesDnsLogsDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDataSourcesDnsLogsDetailsTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesDnsLogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorDataSourcesDnsLogsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesFlowLogsDetails:
    boto3_raw_data: (
        "type_defs.AwsGuardDutyDetectorDataSourcesFlowLogsDetailsTypeDef"
    ) = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesFlowLogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesFlowLogsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesS3LogsDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDataSourcesS3LogsDetailsTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesS3LogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorDataSourcesS3LogsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesKubernetesAuditLogsDetails:
    boto3_raw_data: (
        "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesAuditLogsDetailsTypeDef"
    ) = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesAuditLogsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesAuditLogsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesDetailsTypeDef" = (dataclasses.field())

    Reason = field("Reason")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorFeaturesDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorFeaturesDetailsTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorFeaturesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorFeaturesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamAccessKeySessionContextAttributes:
    boto3_raw_data: "type_defs.AwsIamAccessKeySessionContextAttributesTypeDef" = (
        dataclasses.field()
    )

    MfaAuthenticated = field("MfaAuthenticated")
    CreationDate = field("CreationDate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsIamAccessKeySessionContextAttributesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamAccessKeySessionContextAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamAccessKeySessionContextSessionIssuer:
    boto3_raw_data: "type_defs.AwsIamAccessKeySessionContextSessionIssuerTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")
    PrincipalId = field("PrincipalId")
    Arn = field("Arn")
    AccountId = field("AccountId")
    UserName = field("UserName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsIamAccessKeySessionContextSessionIssuerTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamAccessKeySessionContextSessionIssuerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamAttachedManagedPolicy:
    boto3_raw_data: "type_defs.AwsIamAttachedManagedPolicyTypeDef" = dataclasses.field()

    PolicyName = field("PolicyName")
    PolicyArn = field("PolicyArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamAttachedManagedPolicyTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamAttachedManagedPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamGroupPolicy:
    boto3_raw_data: "type_defs.AwsIamGroupPolicyTypeDef" = dataclasses.field()

    PolicyName = field("PolicyName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsIamGroupPolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamGroupPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamInstanceProfileRole:
    boto3_raw_data: "type_defs.AwsIamInstanceProfileRoleTypeDef" = dataclasses.field()

    Arn = field("Arn")
    AssumeRolePolicyDocument = field("AssumeRolePolicyDocument")
    CreateDate = field("CreateDate")
    Path = field("Path")
    RoleId = field("RoleId")
    RoleName = field("RoleName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamInstanceProfileRoleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamInstanceProfileRoleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamPermissionsBoundary:
    boto3_raw_data: "type_defs.AwsIamPermissionsBoundaryTypeDef" = dataclasses.field()

    PermissionsBoundaryArn = field("PermissionsBoundaryArn")
    PermissionsBoundaryType = field("PermissionsBoundaryType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamPermissionsBoundaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamPermissionsBoundaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamPolicyVersion:
    boto3_raw_data: "type_defs.AwsIamPolicyVersionTypeDef" = dataclasses.field()

    VersionId = field("VersionId")
    IsDefaultVersion = field("IsDefaultVersion")
    CreateDate = field("CreateDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamPolicyVersionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamPolicyVersionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamRolePolicy:
    boto3_raw_data: "type_defs.AwsIamRolePolicyTypeDef" = dataclasses.field()

    PolicyName = field("PolicyName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsIamRolePolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamRolePolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamUserPolicy:
    boto3_raw_data: "type_defs.AwsIamUserPolicyTypeDef" = dataclasses.field()

    PolicyName = field("PolicyName")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsIamUserPolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamUserPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsKinesisStreamStreamEncryptionDetails:
    boto3_raw_data: "type_defs.AwsKinesisStreamStreamEncryptionDetailsTypeDef" = (
        dataclasses.field()
    )

    EncryptionType = field("EncryptionType")
    KeyId = field("KeyId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsKinesisStreamStreamEncryptionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsKinesisStreamStreamEncryptionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsKmsKeyDetails:
    boto3_raw_data: "type_defs.AwsKmsKeyDetailsTypeDef" = dataclasses.field()

    AWSAccountId = field("AWSAccountId")
    CreationDate = field("CreationDate")
    KeyId = field("KeyId")
    KeyManager = field("KeyManager")
    KeyState = field("KeyState")
    Origin = field("Origin")
    Description = field("Description")
    KeyRotationStatus = field("KeyRotationStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsKmsKeyDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsKmsKeyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionCode:
    boto3_raw_data: "type_defs.AwsLambdaFunctionCodeTypeDef" = dataclasses.field()

    S3Bucket = field("S3Bucket")
    S3Key = field("S3Key")
    S3ObjectVersion = field("S3ObjectVersion")
    ZipFile = field("ZipFile")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionCodeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionCodeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionDeadLetterConfig:
    boto3_raw_data: "type_defs.AwsLambdaFunctionDeadLetterConfigTypeDef" = (
        dataclasses.field()
    )

    TargetArn = field("TargetArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsLambdaFunctionDeadLetterConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionDeadLetterConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionLayer:
    boto3_raw_data: "type_defs.AwsLambdaFunctionLayerTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CodeSize = field("CodeSize")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionLayerTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionLayerTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionTracingConfig:
    boto3_raw_data: "type_defs.AwsLambdaFunctionTracingConfigTypeDef" = (
        dataclasses.field()
    )

    Mode = field("Mode")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionTracingConfigTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionTracingConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionVpcConfigOutput:
    boto3_raw_data: "type_defs.AwsLambdaFunctionVpcConfigOutputTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionVpcConfigOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionVpcConfigOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionEnvironmentError:
    boto3_raw_data: "type_defs.AwsLambdaFunctionEnvironmentErrorTypeDef" = (
        dataclasses.field()
    )

    ErrorCode = field("ErrorCode")
    Message = field("Message")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsLambdaFunctionEnvironmentErrorTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionEnvironmentErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionVpcConfig:
    boto3_raw_data: "type_defs.AwsLambdaFunctionVpcConfigTypeDef" = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionVpcConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionVpcConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaLayerVersionDetailsOutput:
    boto3_raw_data: "type_defs.AwsLambdaLayerVersionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Version = field("Version")
    CompatibleRuntimes = field("CompatibleRuntimes")
    CreatedDate = field("CreatedDate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsLambdaLayerVersionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaLayerVersionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaLayerVersionDetails:
    boto3_raw_data: "type_defs.AwsLambdaLayerVersionDetailsTypeDef" = (
        dataclasses.field()
    )

    Version = field("Version")
    CompatibleRuntimes = field("CompatibleRuntimes")
    CreatedDate = field("CreatedDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaLayerVersionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaLayerVersionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationTlsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsOutputTypeDef"
    ) = dataclasses.field()

    CertificateAuthorityArnList = field("CertificateAuthorityArnList")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetails:
    boto3_raw_data: "type_defs.AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetailsTypeDef" = (dataclasses.field())

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationSaslIamDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslIamDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslIamDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslIamDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationSaslScramDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslScramDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslScramDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslScramDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationTlsDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsTypeDef"
    ) = dataclasses.field()

    CertificateAuthorityArnList = field("CertificateAuthorityArnList")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationTlsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoEncryptionInfoEncryptionAtRestDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionAtRestDetailsTypeDef"
    ) = dataclasses.field()

    DataVolumeKMSKeyId = field("DataVolumeKMSKeyId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionAtRestDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionAtRestDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoEncryptionInfoEncryptionInTransitDetails:
    boto3_raw_data: "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionInTransitDetailsTypeDef" = (dataclasses.field())

    InCluster = field("InCluster")
    ClientBroker = field("ClientBroker")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionInTransitDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoEncryptionInfoEncryptionInTransitDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallFirewallSubnetMappingsDetails:
    boto3_raw_data: (
        "type_defs.AwsNetworkFirewallFirewallSubnetMappingsDetailsTypeDef"
    ) = dataclasses.field()

    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallFirewallSubnetMappingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsNetworkFirewallFirewallSubnetMappingsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainMasterUserOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainMasterUserOptionsDetailsTypeDef"
    ) = dataclasses.field()

    MasterUserArn = field("MasterUserArn")
    MasterUserName = field("MasterUserName")
    MasterUserPassword = field("MasterUserPassword")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainMasterUserOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainMasterUserOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails:
    boto3_raw_data: "type_defs.AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetailsTypeDef" = (dataclasses.field())

    AvailabilityZoneCount = field("AvailabilityZoneCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainDomainEndpointOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainDomainEndpointOptionsDetailsTypeDef"
    ) = dataclasses.field()

    CustomEndpointCertificateArn = field("CustomEndpointCertificateArn")
    CustomEndpointEnabled = field("CustomEndpointEnabled")
    EnforceHTTPS = field("EnforceHTTPS")
    CustomEndpoint = field("CustomEndpoint")
    TLSSecurityPolicy = field("TLSSecurityPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainDomainEndpointOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainDomainEndpointOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    KmsKeyId = field("KmsKeyId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainServiceSoftwareOptionsDetailsTypeDef"
    ) = dataclasses.field()

    AutomatedUpdateDate = field("AutomatedUpdateDate")
    Cancellable = field("Cancellable")
    CurrentVersion = field("CurrentVersion")
    Description = field("Description")
    NewVersion = field("NewVersion")
    UpdateAvailable = field("UpdateAvailable")
    UpdateStatus = field("UpdateStatus")
    OptionalDeployment = field("OptionalDeployment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainServiceSoftwareOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainServiceSoftwareOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainVpcOptionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainLogPublishingOption:
    boto3_raw_data: "type_defs.AwsOpenSearchServiceDomainLogPublishingOptionTypeDef" = (
        dataclasses.field()
    )

    CloudWatchLogsLogGroupArn = field("CloudWatchLogsLogGroupArn")
    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainLogPublishingOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsOpenSearchServiceDomainLogPublishingOptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainVpcOptionsDetails:
    boto3_raw_data: "type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    SecurityGroupIds = field("SecurityGroupIds")
    SubnetIds = field("SubnetIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsOpenSearchServiceDomainVpcOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterAssociatedRole:
    boto3_raw_data: "type_defs.AwsRdsDbClusterAssociatedRoleTypeDef" = (
        dataclasses.field()
    )

    RoleArn = field("RoleArn")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbClusterAssociatedRoleTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterAssociatedRoleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterMember:
    boto3_raw_data: "type_defs.AwsRdsDbClusterMemberTypeDef" = dataclasses.field()

    IsClusterWriter = field("IsClusterWriter")
    PromotionTier = field("PromotionTier")
    DbInstanceIdentifier = field("DbInstanceIdentifier")
    DbClusterParameterGroupStatus = field("DbClusterParameterGroupStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbClusterMemberTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterMemberTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterOptionGroupMembership:
    boto3_raw_data: "type_defs.AwsRdsDbClusterOptionGroupMembershipTypeDef" = (
        dataclasses.field()
    )

    DbClusterOptionGroupName = field("DbClusterOptionGroupName")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbClusterOptionGroupMembershipTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterOptionGroupMembershipTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbDomainMembership:
    boto3_raw_data: "type_defs.AwsRdsDbDomainMembershipTypeDef" = dataclasses.field()

    Domain = field("Domain")
    Status = field("Status")
    Fqdn = field("Fqdn")
    IamRoleName = field("IamRoleName")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbDomainMembershipTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbDomainMembershipTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbInstanceVpcSecurityGroup:
    boto3_raw_data: "type_defs.AwsRdsDbInstanceVpcSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    VpcSecurityGroupId = field("VpcSecurityGroupId")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbInstanceVpcSecurityGroupTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbInstanceVpcSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeOutput:
    boto3_raw_data: (
        "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeOutputTypeDef"
    ) = dataclasses.field()

    AttributeName = field("AttributeName")
    AttributeValues = field("AttributeValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterSnapshotDbClusterSnapshotAttribute:
    boto3_raw_data: (
        "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeTypeDef"
    ) = dataclasses.field()

    AttributeName = field("AttributeName")
    AttributeValues = field("AttributeValues")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbInstanceAssociatedRole:
    boto3_raw_data: "type_defs.AwsRdsDbInstanceAssociatedRoleTypeDef" = (
        dataclasses.field()
    )

    RoleArn = field("RoleArn")
    FeatureName = field("FeatureName")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbInstanceAssociatedRoleTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbInstanceAssociatedRoleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbInstanceEndpoint:
    boto3_raw_data: "type_defs.AwsRdsDbInstanceEndpointTypeDef" = dataclasses.field()

    Address = field("Address")
    Port = field("Port")
    HostedZoneId = field("HostedZoneId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbInstanceEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbInstanceEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbOptionGroupMembership:
    boto3_raw_data: "type_defs.AwsRdsDbOptionGroupMembershipTypeDef" = (
        dataclasses.field()
    )

    OptionGroupName = field("OptionGroupName")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbOptionGroupMembershipTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbOptionGroupMembershipTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbParameterGroup:
    boto3_raw_data: "type_defs.AwsRdsDbParameterGroupTypeDef" = dataclasses.field()

    DbParameterGroupName = field("DbParameterGroupName")
    ParameterApplyStatus = field("ParameterApplyStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbParameterGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbParameterGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbProcessorFeature:
    boto3_raw_data: "type_defs.AwsRdsDbProcessorFeatureTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbProcessorFeatureTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbProcessorFeatureTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbStatusInfo:
    boto3_raw_data: "type_defs.AwsRdsDbStatusInfoTypeDef" = dataclasses.field()

    StatusType = field("StatusType")
    Normal = field("Normal")
    Status = field("Status")
    Message = field("Message")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbStatusInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbStatusInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsPendingCloudWatchLogsExportsOutput:
    boto3_raw_data: "type_defs.AwsRdsPendingCloudWatchLogsExportsOutputTypeDef" = (
        dataclasses.field()
    )

    LogTypesToEnable = field("LogTypesToEnable")
    LogTypesToDisable = field("LogTypesToDisable")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsPendingCloudWatchLogsExportsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsPendingCloudWatchLogsExportsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSecurityGroupEc2SecurityGroup:
    boto3_raw_data: "type_defs.AwsRdsDbSecurityGroupEc2SecurityGroupTypeDef" = (
        dataclasses.field()
    )

    Ec2SecurityGroupId = field("Ec2SecurityGroupId")
    Ec2SecurityGroupName = field("Ec2SecurityGroupName")
    Ec2SecurityGroupOwnerId = field("Ec2SecurityGroupOwnerId")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbSecurityGroupEc2SecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSecurityGroupEc2SecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSecurityGroupIpRange:
    boto3_raw_data: "type_defs.AwsRdsDbSecurityGroupIpRangeTypeDef" = (
        dataclasses.field()
    )

    CidrIp = field("CidrIp")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSecurityGroupIpRangeTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSecurityGroupIpRangeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSubnetGroupSubnetAvailabilityZone:
    boto3_raw_data: "type_defs.AwsRdsDbSubnetGroupSubnetAvailabilityZoneTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbSubnetGroupSubnetAvailabilityZoneTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSubnetGroupSubnetAvailabilityZoneTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsEventSubscriptionDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsEventSubscriptionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    CustSubscriptionId = field("CustSubscriptionId")
    CustomerAwsId = field("CustomerAwsId")
    Enabled = field("Enabled")
    EventCategoriesList = field("EventCategoriesList")
    EventSubscriptionArn = field("EventSubscriptionArn")
    SnsTopicArn = field("SnsTopicArn")
    SourceIdsList = field("SourceIdsList")
    SourceType = field("SourceType")
    Status = field("Status")
    SubscriptionCreationTime = field("SubscriptionCreationTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsEventSubscriptionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsEventSubscriptionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsEventSubscriptionDetails:
    boto3_raw_data: "type_defs.AwsRdsEventSubscriptionDetailsTypeDef" = (
        dataclasses.field()
    )

    CustSubscriptionId = field("CustSubscriptionId")
    CustomerAwsId = field("CustomerAwsId")
    Enabled = field("Enabled")
    EventCategoriesList = field("EventCategoriesList")
    EventSubscriptionArn = field("EventSubscriptionArn")
    SnsTopicArn = field("SnsTopicArn")
    SourceIdsList = field("SourceIdsList")
    SourceType = field("SourceType")
    Status = field("Status")
    SubscriptionCreationTime = field("SubscriptionCreationTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsEventSubscriptionDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsEventSubscriptionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsPendingCloudWatchLogsExports:
    boto3_raw_data: "type_defs.AwsRdsPendingCloudWatchLogsExportsTypeDef" = (
        dataclasses.field()
    )

    LogTypesToEnable = field("LogTypesToEnable")
    LogTypesToDisable = field("LogTypesToDisable")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsPendingCloudWatchLogsExportsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsPendingCloudWatchLogsExportsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterNode:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterNodeTypeDef" = (
        dataclasses.field()
    )

    NodeRole = field("NodeRole")
    PrivateIpAddress = field("PrivateIpAddress")
    PublicIpAddress = field("PublicIpAddress")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterClusterNodeTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterNodeTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterParameterStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterParameterStatusTypeDef" = (
        dataclasses.field()
    )

    ParameterName = field("ParameterName")
    ParameterApplyStatus = field("ParameterApplyStatus")
    ParameterApplyErrorDescription = field("ParameterApplyErrorDescription")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterClusterParameterStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterParameterStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterSecurityGroup:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    ClusterSecurityGroupName = field("ClusterSecurityGroupName")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterClusterSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterSnapshotCopyStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterSnapshotCopyStatusTypeDef" = (
        dataclasses.field()
    )

    DestinationRegion = field("DestinationRegion")
    ManualSnapshotRetentionPeriod = field("ManualSnapshotRetentionPeriod")
    RetentionPeriod = field("RetentionPeriod")
    SnapshotCopyGrantName = field("SnapshotCopyGrantName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterClusterSnapshotCopyStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterSnapshotCopyStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterDeferredMaintenanceWindow:
    boto3_raw_data: "type_defs.AwsRedshiftClusterDeferredMaintenanceWindowTypeDef" = (
        dataclasses.field()
    )

    DeferMaintenanceEndTime = field("DeferMaintenanceEndTime")
    DeferMaintenanceIdentifier = field("DeferMaintenanceIdentifier")
    DeferMaintenanceStartTime = field("DeferMaintenanceStartTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterDeferredMaintenanceWindowTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterDeferredMaintenanceWindowTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterElasticIpStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterElasticIpStatusTypeDef" = (
        dataclasses.field()
    )

    ElasticIp = field("ElasticIp")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterElasticIpStatusTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterElasticIpStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterEndpoint:
    boto3_raw_data: "type_defs.AwsRedshiftClusterEndpointTypeDef" = dataclasses.field()

    Address = field("Address")
    Port = field("Port")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterEndpointTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterEndpointTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterHsmStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterHsmStatusTypeDef" = dataclasses.field()

    HsmClientCertificateIdentifier = field("HsmClientCertificateIdentifier")
    HsmConfigurationIdentifier = field("HsmConfigurationIdentifier")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterHsmStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterHsmStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterIamRole:
    boto3_raw_data: "type_defs.AwsRedshiftClusterIamRoleTypeDef" = dataclasses.field()

    ApplyStatus = field("ApplyStatus")
    IamRoleArn = field("IamRoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterIamRoleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterIamRoleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterLoggingStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterLoggingStatusTypeDef" = (
        dataclasses.field()
    )

    BucketName = field("BucketName")
    LastFailureMessage = field("LastFailureMessage")
    LastFailureTime = field("LastFailureTime")
    LastSuccessfulDeliveryTime = field("LastSuccessfulDeliveryTime")
    LoggingEnabled = field("LoggingEnabled")
    S3KeyPrefix = field("S3KeyPrefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterLoggingStatusTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterLoggingStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterPendingModifiedValues:
    boto3_raw_data: "type_defs.AwsRedshiftClusterPendingModifiedValuesTypeDef" = (
        dataclasses.field()
    )

    AutomatedSnapshotRetentionPeriod = field("AutomatedSnapshotRetentionPeriod")
    ClusterIdentifier = field("ClusterIdentifier")
    ClusterType = field("ClusterType")
    ClusterVersion = field("ClusterVersion")
    EncryptionType = field("EncryptionType")
    EnhancedVpcRouting = field("EnhancedVpcRouting")
    MaintenanceTrackName = field("MaintenanceTrackName")
    MasterUserPassword = field("MasterUserPassword")
    NodeType = field("NodeType")
    NumberOfNodes = field("NumberOfNodes")
    PubliclyAccessible = field("PubliclyAccessible")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterPendingModifiedValuesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterPendingModifiedValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterResizeInfo:
    boto3_raw_data: "type_defs.AwsRedshiftClusterResizeInfoTypeDef" = (
        dataclasses.field()
    )

    AllowCancelResize = field("AllowCancelResize")
    ResizeType = field("ResizeType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterResizeInfoTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterResizeInfoTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterRestoreStatus:
    boto3_raw_data: "type_defs.AwsRedshiftClusterRestoreStatusTypeDef" = (
        dataclasses.field()
    )

    CurrentRestoreRateInMegaBytesPerSecond = field(
        "CurrentRestoreRateInMegaBytesPerSecond"
    )
    ElapsedTimeInSeconds = field("ElapsedTimeInSeconds")
    EstimatedTimeToCompletionInSeconds = field("EstimatedTimeToCompletionInSeconds")
    ProgressInMegaBytes = field("ProgressInMegaBytes")
    SnapshotSizeInMegaBytes = field("SnapshotSizeInMegaBytes")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterRestoreStatusTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterRestoreStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterVpcSecurityGroup:
    boto3_raw_data: "type_defs.AwsRedshiftClusterVpcSecurityGroupTypeDef" = (
        dataclasses.field()
    )

    Status = field("Status")
    VpcSecurityGroupId = field("VpcSecurityGroupId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterVpcSecurityGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterVpcSecurityGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53HostedZoneConfigDetails:
    boto3_raw_data: "type_defs.AwsRoute53HostedZoneConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    Comment = field("Comment")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRoute53HostedZoneConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53HostedZoneConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53HostedZoneVpcDetails:
    boto3_raw_data: "type_defs.AwsRoute53HostedZoneVpcDetailsTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Region = field("Region")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRoute53HostedZoneVpcDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53HostedZoneVpcDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CloudWatchLogsLogGroupArnConfigDetails:
    boto3_raw_data: "type_defs.CloudWatchLogsLogGroupArnConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    CloudWatchLogsLogGroupArn = field("CloudWatchLogsLogGroupArn")
    HostedZoneId = field("HostedZoneId")
    Id = field("Id")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CloudWatchLogsLogGroupArnConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CloudWatchLogsLogGroupArnConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3AccessPointVpcConfigurationDetails:
    boto3_raw_data: "type_defs.AwsS3AccessPointVpcConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3AccessPointVpcConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3AccessPointVpcConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3AccountPublicAccessBlockDetails:
    boto3_raw_data: "type_defs.AwsS3AccountPublicAccessBlockDetailsTypeDef" = (
        dataclasses.field()
    )

    BlockPublicAcls = field("BlockPublicAcls")
    BlockPublicPolicy = field("BlockPublicPolicy")
    IgnorePublicAcls = field("IgnorePublicAcls")
    RestrictPublicBuckets = field("RestrictPublicBuckets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3AccountPublicAccessBlockDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3AccountPublicAccessBlockDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetailsTypeDef" = (dataclasses.field())

    DaysAfterInitiation = field("DaysAfterInitiation")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetailsTypeDef" = (dataclasses.field())

    Days = field("Days")
    StorageClass = field("StorageClass")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsTypeDef" = (dataclasses.field())

    Date = field("Date")
    Days = field("Days")
    StorageClass = field("StorageClass")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetailsTypeDef" = (dataclasses.field())

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetailsTypeDef" = (dataclasses.field())

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketVersioningConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketBucketVersioningConfigurationTypeDef" = (
        dataclasses.field()
    )

    IsMfaDeleteEnabled = field("IsMfaDeleteEnabled")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketVersioningConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketBucketVersioningConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketLoggingConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketLoggingConfigurationTypeDef" = (
        dataclasses.field()
    )

    DestinationBucketName = field("DestinationBucketName")
    LogFilePrefix = field("LogFilePrefix")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsS3BucketLoggingConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketLoggingConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationS3KeyFilterRule:
    boto3_raw_data: (
        "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterRuleTypeDef"
    ) = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterRuleTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterRuleTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketObjectLockConfigurationRuleDefaultRetentionDetails:
    boto3_raw_data: (
        "type_defs.AwsS3BucketObjectLockConfigurationRuleDefaultRetentionDetailsTypeDef"
    ) = dataclasses.field()

    Days = field("Days")
    Mode = field("Mode")
    Years = field("Years")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketObjectLockConfigurationRuleDefaultRetentionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketObjectLockConfigurationRuleDefaultRetentionDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketServerSideEncryptionByDefault:
    boto3_raw_data: "type_defs.AwsS3BucketServerSideEncryptionByDefaultTypeDef" = (
        dataclasses.field()
    )

    SSEAlgorithm = field("SSEAlgorithm")
    KMSMasterKeyID = field("KMSMasterKeyID")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketServerSideEncryptionByDefaultTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketServerSideEncryptionByDefaultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfigurationRedirectTo:
    boto3_raw_data: "type_defs.AwsS3BucketWebsiteConfigurationRedirectToTypeDef" = (
        dataclasses.field()
    )

    Hostname = field("Hostname")
    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketWebsiteConfigurationRedirectToTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketWebsiteConfigurationRedirectToTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfigurationRoutingRuleCondition:
    boto3_raw_data: (
        "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleConditionTypeDef"
    ) = dataclasses.field()

    HttpErrorCodeReturnedEquals = field("HttpErrorCodeReturnedEquals")
    KeyPrefixEquals = field("KeyPrefixEquals")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleConditionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleConditionTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfigurationRoutingRuleRedirect:
    boto3_raw_data: (
        "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleRedirectTypeDef"
    ) = dataclasses.field()

    Hostname = field("Hostname")
    HttpRedirectCode = field("HttpRedirectCode")
    Protocol = field("Protocol")
    ReplaceKeyPrefixWith = field("ReplaceKeyPrefixWith")
    ReplaceKeyWith = field("ReplaceKeyWith")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleRedirectTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleRedirectTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3ObjectDetails:
    boto3_raw_data: "type_defs.AwsS3ObjectDetailsTypeDef" = dataclasses.field()

    LastModified = field("LastModified")
    ETag = field("ETag")
    VersionId = field("VersionId")
    ContentType = field("ContentType")
    ServerSideEncryption = field("ServerSideEncryption")
    SSEKMSKeyId = field("SSEKMSKeyId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsS3ObjectDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3ObjectDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetails:
    boto3_raw_data: "type_defs.AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetailsTypeDef" = (dataclasses.field())

    MinimumInstanceMetadataServiceVersion = field(
        "MinimumInstanceMetadataServiceVersion"
    )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecretsManagerSecretRotationRules:
    boto3_raw_data: "type_defs.AwsSecretsManagerSecretRotationRulesTypeDef" = (
        dataclasses.field()
    )

    AutomaticallyAfterDays = field("AutomaticallyAfterDays")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsSecretsManagerSecretRotationRulesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecretsManagerSecretRotationRulesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BooleanFilter:
    boto3_raw_data: "type_defs.BooleanFilterTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.BooleanFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.BooleanFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IpFilter:
    boto3_raw_data: "type_defs.IpFilterTypeDef" = dataclasses.field()

    Cidr = field("Cidr")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IpFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IpFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class KeywordFilter:
    boto3_raw_data: "type_defs.KeywordFilterTypeDef" = dataclasses.field()

    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.KeywordFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.KeywordFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecurityFindingIdentifier:
    boto3_raw_data: "type_defs.AwsSecurityFindingIdentifierTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    ProductArn = field("ProductArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSecurityFindingIdentifierTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecurityFindingIdentifierTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeneratorDetailsOutput:
    boto3_raw_data: "type_defs.GeneratorDetailsOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    Labels = field("Labels")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GeneratorDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeneratorDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Malware:
    boto3_raw_data: "type_defs.MalwareTypeDef" = dataclasses.field()

    Name = field("Name")
    Type = field("Type")
    Path = field("Path")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MalwareTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MalwareTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Note:
    boto3_raw_data: "type_defs.NoteTypeDef" = dataclasses.field()

    Text = field("Text")
    UpdatedBy = field("UpdatedBy")
    UpdatedAt = field("UpdatedAt")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NoteTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NoteTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PatchSummary:
    boto3_raw_data: "type_defs.PatchSummaryTypeDef" = dataclasses.field()

    Id = field("Id")
    InstalledCount = field("InstalledCount")
    MissingCount = field("MissingCount")
    FailedCount = field("FailedCount")
    InstalledOtherCount = field("InstalledOtherCount")
    InstalledRejectedCount = field("InstalledRejectedCount")
    InstalledPendingReboot = field("InstalledPendingReboot")
    OperationStartTime = field("OperationStartTime")
    OperationEndTime = field("OperationEndTime")
    RebootOption = field("RebootOption")
    Operation = field("Operation")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PatchSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PatchSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProcessDetails:
    boto3_raw_data: "type_defs.ProcessDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Path = field("Path")
    Pid = field("Pid")
    ParentPid = field("ParentPid")
    LaunchedAt = field("LaunchedAt")
    TerminatedAt = field("TerminatedAt")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProcessDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProcessDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Severity:
    boto3_raw_data: "type_defs.SeverityTypeDef" = dataclasses.field()

    Product = field("Product")
    Label = field("Label")
    Normalized = field("Normalized")
    Original = field("Original")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SeverityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SeverityTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThreatIntelIndicator:
    boto3_raw_data: "type_defs.ThreatIntelIndicatorTypeDef" = dataclasses.field()

    Type = field("Type")
    Value = field("Value")
    Category = field("Category")
    LastObservedAt = field("LastObservedAt")
    Source = field("Source")
    SourceUrl = field("SourceUrl")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ThreatIntelIndicatorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ThreatIntelIndicatorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Workflow:
    boto3_raw_data: "type_defs.WorkflowTypeDef" = dataclasses.field()

    Status = field("Status")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WorkflowTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WorkflowTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSnsTopicSubscription:
    boto3_raw_data: "type_defs.AwsSnsTopicSubscriptionTypeDef" = dataclasses.field()

    Endpoint = field("Endpoint")
    Protocol = field("Protocol")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSnsTopicSubscriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSnsTopicSubscriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSqsQueueDetails:
    boto3_raw_data: "type_defs.AwsSqsQueueDetailsTypeDef" = dataclasses.field()

    KmsDataKeyReusePeriodSeconds = field("KmsDataKeyReusePeriodSeconds")
    KmsMasterKeyId = field("KmsMasterKeyId")
    QueueName = field("QueueName")
    DeadLetterTargetArn = field("DeadLetterTargetArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSqsQueueDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSqsQueueDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSsmComplianceSummary:
    boto3_raw_data: "type_defs.AwsSsmComplianceSummaryTypeDef" = dataclasses.field()

    Status = field("Status")
    CompliantCriticalCount = field("CompliantCriticalCount")
    CompliantHighCount = field("CompliantHighCount")
    CompliantMediumCount = field("CompliantMediumCount")
    ExecutionType = field("ExecutionType")
    NonCompliantCriticalCount = field("NonCompliantCriticalCount")
    CompliantInformationalCount = field("CompliantInformationalCount")
    NonCompliantInformationalCount = field("NonCompliantInformationalCount")
    CompliantUnspecifiedCount = field("CompliantUnspecifiedCount")
    NonCompliantLowCount = field("NonCompliantLowCount")
    NonCompliantHighCount = field("NonCompliantHighCount")
    CompliantLowCount = field("CompliantLowCount")
    ComplianceType = field("ComplianceType")
    PatchBaselineId = field("PatchBaselineId")
    OverallSeverity = field("OverallSeverity")
    NonCompliantMediumCount = field("NonCompliantMediumCount")
    NonCompliantUnspecifiedCount = field("NonCompliantUnspecifiedCount")
    PatchGroup = field("PatchGroup")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSsmComplianceSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSsmComplianceSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineTracingConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsStepFunctionStateMachineTracingConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineTracingConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsStepFunctionStateMachineTracingConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineLoggingConfigurationDestinationsCloudWatchLogsLogGroupDetails:
    boto3_raw_data: "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsCloudWatchLogsLogGroupDetailsTypeDef" = (dataclasses.field())

    LogGroupArn = field("LogGroupArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsCloudWatchLogsLogGroupDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsCloudWatchLogsLogGroupDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRateBasedRuleMatchPredicate:
    boto3_raw_data: "type_defs.AwsWafRateBasedRuleMatchPredicateTypeDef" = (
        dataclasses.field()
    )

    DataId = field("DataId")
    Negated = field("Negated")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRateBasedRuleMatchPredicateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRateBasedRuleMatchPredicateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRateBasedRuleMatchPredicate:
    boto3_raw_data: "type_defs.AwsWafRegionalRateBasedRuleMatchPredicateTypeDef" = (
        dataclasses.field()
    )

    DataId = field("DataId")
    Negated = field("Negated")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRateBasedRuleMatchPredicateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRateBasedRuleMatchPredicateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRulePredicateListDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRulePredicateListDetailsTypeDef" = (
        dataclasses.field()
    )

    DataId = field("DataId")
    Negated = field("Negated")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRulePredicateListDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRulePredicateListDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleGroupRulesActionDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleGroupRulesActionDetailsTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRuleGroupRulesActionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleGroupRulesActionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalWebAclRulesListActionDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalWebAclRulesListActionDetailsTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalWebAclRulesListActionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalWebAclRulesListActionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalWebAclRulesListOverrideActionDetails:
    boto3_raw_data: (
        "type_defs.AwsWafRegionalWebAclRulesListOverrideActionDetailsTypeDef"
    ) = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalWebAclRulesListOverrideActionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsWafRegionalWebAclRulesListOverrideActionDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRulePredicateListDetails:
    boto3_raw_data: "type_defs.AwsWafRulePredicateListDetailsTypeDef" = (
        dataclasses.field()
    )

    DataId = field("DataId")
    Negated = field("Negated")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafRulePredicateListDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRulePredicateListDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleGroupRulesActionDetails:
    boto3_raw_data: "type_defs.AwsWafRuleGroupRulesActionDetailsTypeDef" = (
        dataclasses.field()
    )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRuleGroupRulesActionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleGroupRulesActionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WafAction:
    boto3_raw_data: "type_defs.WafActionTypeDef" = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WafActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WafActionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WafExcludedRule:
    boto3_raw_data: "type_defs.WafExcludedRuleTypeDef" = dataclasses.field()

    RuleId = field("RuleId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WafExcludedRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.WafExcludedRuleTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class WafOverrideAction:
    boto3_raw_data: "type_defs.WafOverrideActionTypeDef" = dataclasses.field()

    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.WafOverrideActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.WafOverrideActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2CustomHttpHeader:
    boto3_raw_data: "type_defs.AwsWafv2CustomHttpHeaderTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2CustomHttpHeaderTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2CustomHttpHeaderTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2VisibilityConfigDetails:
    boto3_raw_data: "type_defs.AwsWafv2VisibilityConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    CloudWatchMetricsEnabled = field("CloudWatchMetricsEnabled")
    MetricName = field("MetricName")
    SampledRequestsEnabled = field("SampledRequestsEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2VisibilityConfigDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2VisibilityConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclCaptchaConfigImmunityTimePropertyDetails:
    boto3_raw_data: (
        "type_defs.AwsWafv2WebAclCaptchaConfigImmunityTimePropertyDetailsTypeDef"
    ) = dataclasses.field()

    ImmunityTime = field("ImmunityTime")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2WebAclCaptchaConfigImmunityTimePropertyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsWafv2WebAclCaptchaConfigImmunityTimePropertyDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsXrayEncryptionConfigDetails:
    boto3_raw_data: "type_defs.AwsXrayEncryptionConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    KeyId = field("KeyId")
    Status = field("Status")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsXrayEncryptionConfigDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsXrayEncryptionConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteAutomationRulesRequest:
    boto3_raw_data: "type_defs.BatchDeleteAutomationRulesRequestTypeDef" = (
        dataclasses.field()
    )

    AutomationRulesArns = field("AutomationRulesArns")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchDeleteAutomationRulesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteAutomationRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResponseMetadata:
    boto3_raw_data: "type_defs.ResponseMetadataTypeDef" = dataclasses.field()

    RequestId = field("RequestId")
    HTTPStatusCode = field("HTTPStatusCode")
    HTTPHeaders = field("HTTPHeaders")
    RetryAttempts = field("RetryAttempts")
    HostId = field("HostId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResponseMetadataTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResponseMetadataTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnprocessedAutomationRule:
    boto3_raw_data: "type_defs.UnprocessedAutomationRuleTypeDef" = dataclasses.field()

    RuleArn = field("RuleArn")
    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnprocessedAutomationRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnprocessedAutomationRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDisableStandardsRequest:
    boto3_raw_data: "type_defs.BatchDisableStandardsRequestTypeDef" = (
        dataclasses.field()
    )

    StandardsSubscriptionArns = field("StandardsSubscriptionArns")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchDisableStandardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDisableStandardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsSubscriptionRequest:
    boto3_raw_data: "type_defs.StandardsSubscriptionRequestTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")
    StandardsInput = field("StandardsInput")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StandardsSubscriptionRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsSubscriptionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetAutomationRulesRequest:
    boto3_raw_data: "type_defs.BatchGetAutomationRulesRequestTypeDef" = (
        dataclasses.field()
    )

    AutomationRulesArns = field("AutomationRulesArns")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchGetAutomationRulesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetAutomationRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfigurationPolicyAssociationSummary:
    boto3_raw_data: "type_defs.ConfigurationPolicyAssociationSummaryTypeDef" = (
        dataclasses.field()
    )

    ConfigurationPolicyId = field("ConfigurationPolicyId")
    TargetId = field("TargetId")
    TargetType = field("TargetType")
    AssociationType = field("AssociationType")
    UpdatedAt = field("UpdatedAt")
    AssociationStatus = field("AssociationStatus")
    AssociationStatusMessage = field("AssociationStatusMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ConfigurationPolicyAssociationSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfigurationPolicyAssociationSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetSecurityControlsRequest:
    boto3_raw_data: "type_defs.BatchGetSecurityControlsRequestTypeDef" = (
        dataclasses.field()
    )

    SecurityControlIds = field("SecurityControlIds")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchGetSecurityControlsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetSecurityControlsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnprocessedSecurityControl:
    boto3_raw_data: "type_defs.UnprocessedSecurityControlTypeDef" = dataclasses.field()

    SecurityControlId = field("SecurityControlId")
    ErrorCode = field("ErrorCode")
    ErrorReason = field("ErrorReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UnprocessedSecurityControlTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnprocessedSecurityControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsControlAssociationId:
    boto3_raw_data: "type_defs.StandardsControlAssociationIdTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")
    StandardsArn = field("StandardsArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StandardsControlAssociationIdTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsControlAssociationIdTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsControlAssociationDetail:
    boto3_raw_data: "type_defs.StandardsControlAssociationDetailTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")
    SecurityControlId = field("SecurityControlId")
    SecurityControlArn = field("SecurityControlArn")
    AssociationStatus = field("AssociationStatus")
    RelatedRequirements = field("RelatedRequirements")
    UpdatedAt = field("UpdatedAt")
    UpdatedReason = field("UpdatedReason")
    StandardsControlTitle = field("StandardsControlTitle")
    StandardsControlDescription = field("StandardsControlDescription")
    StandardsControlArns = field("StandardsControlArns")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StandardsControlAssociationDetailTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsControlAssociationDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ImportFindingsError:
    boto3_raw_data: "type_defs.ImportFindingsErrorTypeDef" = dataclasses.field()

    Id = field("Id")
    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ImportFindingsErrorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ImportFindingsErrorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfFindingIdentifier:
    boto3_raw_data: "type_defs.OcsfFindingIdentifierTypeDef" = dataclasses.field()

    CloudAccountUid = field("CloudAccountUid")
    FindingInfoUid = field("FindingInfoUid")
    MetadataProductUid = field("MetadataProductUid")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OcsfFindingIdentifierTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfFindingIdentifierTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsControlAssociationUpdate:
    boto3_raw_data: "type_defs.StandardsControlAssociationUpdateTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")
    SecurityControlId = field("SecurityControlId")
    AssociationStatus = field("AssociationStatus")
    UpdatedReason = field("UpdatedReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StandardsControlAssociationUpdateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsControlAssociationUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BooleanConfigurationOptions:
    boto3_raw_data: "type_defs.BooleanConfigurationOptionsTypeDef" = dataclasses.field()

    DefaultValue = field("DefaultValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BooleanConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BooleanConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Cell:
    boto3_raw_data: "type_defs.CellTypeDef" = dataclasses.field()

    Column = field("Column")
    Row = field("Row")
    ColumnName = field("ColumnName")
    CellReference = field("CellReference")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CellTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CellTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassificationStatus:
    boto3_raw_data: "type_defs.ClassificationStatusTypeDef" = dataclasses.field()

    Code = field("Code")
    Reason = field("Reason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassificationStatusTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassificationStatusTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeRepositoryDetails:
    boto3_raw_data: "type_defs.CodeRepositoryDetailsTypeDef" = dataclasses.field()

    ProviderType = field("ProviderType")
    ProjectName = field("ProjectName")
    CodeSecurityIntegrationArn = field("CodeSecurityIntegrationArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeRepositoryDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeRepositoryDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CodeVulnerabilitiesFilePath:
    boto3_raw_data: "type_defs.CodeVulnerabilitiesFilePathTypeDef" = dataclasses.field()

    EndLine = field("EndLine")
    FileName = field("FileName")
    FilePath = field("FilePath")
    StartLine = field("StartLine")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CodeVulnerabilitiesFilePathTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CodeVulnerabilitiesFilePathTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlParameterOutput:
    boto3_raw_data: "type_defs.SecurityControlParameterOutputTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SecurityControlParameterOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatusReason:
    boto3_raw_data: "type_defs.StatusReasonTypeDef" = dataclasses.field()

    ReasonCode = field("ReasonCode")
    Description = field("Description")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StatusReasonTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StatusReasonTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DoubleConfigurationOptions:
    boto3_raw_data: "type_defs.DoubleConfigurationOptionsTypeDef" = dataclasses.field()

    DefaultValue = field("DefaultValue")
    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DoubleConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DoubleConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnumConfigurationOptions:
    boto3_raw_data: "type_defs.EnumConfigurationOptionsTypeDef" = dataclasses.field()

    DefaultValue = field("DefaultValue")
    AllowedValues = field("AllowedValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnumConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnumConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnumListConfigurationOptions:
    boto3_raw_data: "type_defs.EnumListConfigurationOptionsTypeDef" = (
        dataclasses.field()
    )

    DefaultValue = field("DefaultValue")
    MaxItems = field("MaxItems")
    AllowedValues = field("AllowedValues")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnumListConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnumListConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerConfigurationOptions:
    boto3_raw_data: "type_defs.IntegerConfigurationOptionsTypeDef" = dataclasses.field()

    DefaultValue = field("DefaultValue")
    Min = field("Min")
    Max = field("Max")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.IntegerConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IntegerListConfigurationOptions:
    boto3_raw_data: "type_defs.IntegerListConfigurationOptionsTypeDef" = (
        dataclasses.field()
    )

    DefaultValue = field("DefaultValue")
    Min = field("Min")
    Max = field("Max")
    MaxItems = field("MaxItems")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.IntegerListConfigurationOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.IntegerListConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringConfigurationOptions:
    boto3_raw_data: "type_defs.StringConfigurationOptionsTypeDef" = dataclasses.field()

    DefaultValue = field("DefaultValue")
    Re2Expression = field("Re2Expression")
    ExpressionDescription = field("ExpressionDescription")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StringConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StringListConfigurationOptions:
    boto3_raw_data: "type_defs.StringListConfigurationOptionsTypeDef" = (
        dataclasses.field()
    )

    DefaultValue = field("DefaultValue")
    Re2Expression = field("Re2Expression")
    MaxItems = field("MaxItems")
    ExpressionDescription = field("ExpressionDescription")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StringListConfigurationOptionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StringListConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Target:
    boto3_raw_data: "type_defs.TargetTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    OrganizationalUnitId = field("OrganizationalUnitId")
    RootId = field("RootId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.TargetTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.TargetTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfigurationPolicySummary:
    boto3_raw_data: "type_defs.ConfigurationPolicySummaryTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    UpdatedAt = field("UpdatedAt")
    ServiceEnabled = field("ServiceEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConfigurationPolicySummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfigurationPolicySummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectorRegistrationsV2Request:
    boto3_raw_data: "type_defs.ConnectorRegistrationsV2RequestTypeDef" = (
        dataclasses.field()
    )

    AuthCode = field("AuthCode")
    AuthState = field("AuthState")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConnectorRegistrationsV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectorRegistrationsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProviderSummary:
    boto3_raw_data: "type_defs.ProviderSummaryTypeDef" = dataclasses.field()

    ProviderName = field("ProviderName")
    ConnectorStatus = field("ConnectorStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProviderSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProviderSummaryTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VolumeMount:
    boto3_raw_data: "type_defs.VolumeMountTypeDef" = dataclasses.field()

    Name = field("Name")
    MountPath = field("MountPath")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VolumeMountTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VolumeMountTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateActionTargetRequest:
    boto3_raw_data: "type_defs.CreateActionTargetRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    Id = field("Id")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateActionTargetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateActionTargetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAggregatorV2Request:
    boto3_raw_data: "type_defs.CreateAggregatorV2RequestTypeDef" = dataclasses.field()

    RegionLinkingMode = field("RegionLinkingMode")
    LinkedRegions = field("LinkedRegions")
    Tags = field("Tags")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAggregatorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAggregatorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFindingAggregatorRequest:
    boto3_raw_data: "type_defs.CreateFindingAggregatorRequestTypeDef" = (
        dataclasses.field()
    )

    RegionLinkingMode = field("RegionLinkingMode")
    Regions = field("Regions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateFindingAggregatorRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFindingAggregatorRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Result:
    boto3_raw_data: "type_defs.ResultTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    ProcessingResult = field("ProcessingResult")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResultTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTicketV2Request:
    boto3_raw_data: "type_defs.CreateTicketV2RequestTypeDef" = dataclasses.field()

    ConnectorId = field("ConnectorId")
    FindingMetadataUid = field("FindingMetadataUid")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTicketV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTicketV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateRange:
    boto3_raw_data: "type_defs.DateRangeTypeDef" = dataclasses.field()

    Value = field("Value")
    Unit = field("Unit")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DateRangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeclineInvitationsRequest:
    boto3_raw_data: "type_defs.DeclineInvitationsRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeclineInvitationsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeclineInvitationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteActionTargetRequest:
    boto3_raw_data: "type_defs.DeleteActionTargetRequestTypeDef" = dataclasses.field()

    ActionTargetArn = field("ActionTargetArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteActionTargetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteActionTargetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAggregatorV2Request:
    boto3_raw_data: "type_defs.DeleteAggregatorV2RequestTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteAggregatorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAggregatorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteAutomationRuleV2Request:
    boto3_raw_data: "type_defs.DeleteAutomationRuleV2RequestTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteAutomationRuleV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteAutomationRuleV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteConfigurationPolicyRequest:
    boto3_raw_data: "type_defs.DeleteConfigurationPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteConfigurationPolicyRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteConfigurationPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteConnectorV2Request:
    boto3_raw_data: "type_defs.DeleteConnectorV2RequestTypeDef" = dataclasses.field()

    ConnectorId = field("ConnectorId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteConnectorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteConnectorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteFindingAggregatorRequest:
    boto3_raw_data: "type_defs.DeleteFindingAggregatorRequestTypeDef" = (
        dataclasses.field()
    )

    FindingAggregatorArn = field("FindingAggregatorArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DeleteFindingAggregatorRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteFindingAggregatorRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInsightRequest:
    boto3_raw_data: "type_defs.DeleteInsightRequestTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteInsightRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInsightRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInvitationsRequest:
    boto3_raw_data: "type_defs.DeleteInvitationsRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteInvitationsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInvitationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteMembersRequest:
    boto3_raw_data: "type_defs.DeleteMembersRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PaginatorConfig:
    boto3_raw_data: "type_defs.PaginatorConfigTypeDef" = dataclasses.field()

    MaxItems = field("MaxItems")
    PageSize = field("PageSize")
    StartingToken = field("StartingToken")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PaginatorConfigTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PaginatorConfigTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeActionTargetsRequest:
    boto3_raw_data: "type_defs.DescribeActionTargetsRequestTypeDef" = (
        dataclasses.field()
    )

    ActionTargetArns = field("ActionTargetArns")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeActionTargetsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeActionTargetsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubRequest:
    boto3_raw_data: "type_defs.DescribeHubRequestTypeDef" = dataclasses.field()

    HubArn = field("HubArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OrganizationConfiguration:
    boto3_raw_data: "type_defs.OrganizationConfigurationTypeDef" = dataclasses.field()

    ConfigurationType = field("ConfigurationType")
    Status = field("Status")
    StatusMessage = field("StatusMessage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OrganizationConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OrganizationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsRequest:
    boto3_raw_data: "type_defs.DescribeProductsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ProductArn = field("ProductArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProductsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Product:
    boto3_raw_data: "type_defs.ProductTypeDef" = dataclasses.field()

    ProductArn = field("ProductArn")
    ProductName = field("ProductName")
    CompanyName = field("CompanyName")
    Description = field("Description")
    Categories = field("Categories")
    IntegrationTypes = field("IntegrationTypes")
    MarketplaceUrl = field("MarketplaceUrl")
    ActivationUrl = field("ActivationUrl")
    ProductSubscriptionResourcePolicy = field("ProductSubscriptionResourcePolicy")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProductTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProductTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsV2Request:
    boto3_raw_data: "type_defs.DescribeProductsV2RequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProductsV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProductV2:
    boto3_raw_data: "type_defs.ProductV2TypeDef" = dataclasses.field()

    ProductV2Name = field("ProductV2Name")
    CompanyName = field("CompanyName")
    Description = field("Description")
    Categories = field("Categories")
    IntegrationV2Types = field("IntegrationV2Types")
    MarketplaceUrl = field("MarketplaceUrl")
    ActivationUrl = field("ActivationUrl")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProductV2TypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProductV2TypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsControlsRequest:
    boto3_raw_data: "type_defs.DescribeStandardsControlsRequestTypeDef" = (
        dataclasses.field()
    )

    StandardsSubscriptionArn = field("StandardsSubscriptionArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeStandardsControlsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsControlsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsControl:
    boto3_raw_data: "type_defs.StandardsControlTypeDef" = dataclasses.field()

    StandardsControlArn = field("StandardsControlArn")
    ControlStatus = field("ControlStatus")
    DisabledReason = field("DisabledReason")
    ControlStatusUpdatedAt = field("ControlStatusUpdatedAt")
    ControlId = field("ControlId")
    Title = field("Title")
    Description = field("Description")
    RemediationUrl = field("RemediationUrl")
    SeverityRating = field("SeverityRating")
    RelatedRequirements = field("RelatedRequirements")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StandardsControlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsControlTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsRequest:
    boto3_raw_data: "type_defs.DescribeStandardsRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeStandardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableImportFindingsForProductRequest:
    boto3_raw_data: "type_defs.DisableImportFindingsForProductRequestTypeDef" = (
        dataclasses.field()
    )

    ProductSubscriptionArn = field("ProductSubscriptionArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableImportFindingsForProductRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableImportFindingsForProductRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisableOrganizationAdminAccountRequest:
    boto3_raw_data: "type_defs.DisableOrganizationAdminAccountRequestTypeDef" = (
        dataclasses.field()
    )

    AdminAccountId = field("AdminAccountId")
    Feature = field("Feature")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DisableOrganizationAdminAccountRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisableOrganizationAdminAccountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DisassociateMembersRequest:
    boto3_raw_data: "type_defs.DisassociateMembersRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DisassociateMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DisassociateMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImportFindingsForProductRequest:
    boto3_raw_data: "type_defs.EnableImportFindingsForProductRequestTypeDef" = (
        dataclasses.field()
    )

    ProductArn = field("ProductArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImportFindingsForProductRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImportFindingsForProductRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableOrganizationAdminAccountRequest:
    boto3_raw_data: "type_defs.EnableOrganizationAdminAccountRequestTypeDef" = (
        dataclasses.field()
    )

    AdminAccountId = field("AdminAccountId")
    Feature = field("Feature")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableOrganizationAdminAccountRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableOrganizationAdminAccountRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSecurityHubRequest:
    boto3_raw_data: "type_defs.EnableSecurityHubRequestTypeDef" = dataclasses.field()

    Tags = field("Tags")
    EnableDefaultStandards = field("EnableDefaultStandards")
    ControlFindingGenerator = field("ControlFindingGenerator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableSecurityHubRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSecurityHubRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSecurityHubV2Request:
    boto3_raw_data: "type_defs.EnableSecurityHubV2RequestTypeDef" = dataclasses.field()

    Tags = field("Tags")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableSecurityHubV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSecurityHubV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FilePaths:
    boto3_raw_data: "type_defs.FilePathsTypeDef" = dataclasses.field()

    FilePath = field("FilePath")
    FileName = field("FileName")
    ResourceId = field("ResourceId")
    Hash = field("Hash")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FilePathsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.FilePathsTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingAggregator:
    boto3_raw_data: "type_defs.FindingAggregatorTypeDef" = dataclasses.field()

    FindingAggregatorArn = field("FindingAggregatorArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.FindingAggregatorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingAggregatorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingHistoryUpdateSource:
    boto3_raw_data: "type_defs.FindingHistoryUpdateSourceTypeDef" = dataclasses.field()

    Type = field("Type")
    Identity = field("Identity")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingHistoryUpdateSourceTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingHistoryUpdateSourceTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingHistoryUpdate:
    boto3_raw_data: "type_defs.FindingHistoryUpdateTypeDef" = dataclasses.field()

    UpdatedField = field("UpdatedField")
    OldValue = field("OldValue")
    NewValue = field("NewValue")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingHistoryUpdateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingHistoryUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingProviderSeverity:
    boto3_raw_data: "type_defs.FindingProviderSeverityTypeDef" = dataclasses.field()

    Label = field("Label")
    Original = field("Original")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingProviderSeverityTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingProviderSeverityTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyStatefulRuleGroupReferencesDetails:
    boto3_raw_data: (
        "type_defs.FirewallPolicyStatefulRuleGroupReferencesDetailsTypeDef"
    ) = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FirewallPolicyStatefulRuleGroupReferencesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FirewallPolicyStatefulRuleGroupReferencesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyStatelessRuleGroupReferencesDetails:
    boto3_raw_data: (
        "type_defs.FirewallPolicyStatelessRuleGroupReferencesDetailsTypeDef"
    ) = dataclasses.field()

    Priority = field("Priority")
    ResourceArn = field("ResourceArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FirewallPolicyStatelessRuleGroupReferencesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FirewallPolicyStatelessRuleGroupReferencesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GeneratorDetails:
    boto3_raw_data: "type_defs.GeneratorDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    Labels = field("Labels")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GeneratorDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GeneratorDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Invitation:
    boto3_raw_data: "type_defs.InvitationTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    InvitationId = field("InvitationId")
    InvitedAt = field("InvitedAt")
    MemberStatus = field("MemberStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InvitationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InvitationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAggregatorV2Request:
    boto3_raw_data: "type_defs.GetAggregatorV2RequestTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetAggregatorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAggregatorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAutomationRuleV2Request:
    boto3_raw_data: "type_defs.GetAutomationRuleV2RequestTypeDef" = dataclasses.field()

    Identifier = field("Identifier")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetAutomationRuleV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAutomationRuleV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConfigurationPolicyRequest:
    boto3_raw_data: "type_defs.GetConfigurationPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetConfigurationPolicyRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConfigurationPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConnectorV2Request:
    boto3_raw_data: "type_defs.GetConnectorV2RequestTypeDef" = dataclasses.field()

    ConnectorId = field("ConnectorId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConnectorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConnectorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class HealthCheck:
    boto3_raw_data: "type_defs.HealthCheckTypeDef" = dataclasses.field()

    ConnectorStatus = field("ConnectorStatus")
    LastCheckedAt = field("LastCheckedAt")
    Message = field("Message")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.HealthCheckTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.HealthCheckTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEnabledStandardsRequest:
    boto3_raw_data: "type_defs.GetEnabledStandardsRequestTypeDef" = dataclasses.field()

    StandardsSubscriptionArns = field("StandardsSubscriptionArns")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetEnabledStandardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEnabledStandardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingAggregatorRequest:
    boto3_raw_data: "type_defs.GetFindingAggregatorRequestTypeDef" = dataclasses.field()

    FindingAggregatorArn = field("FindingAggregatorArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingAggregatorRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingAggregatorRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SortCriterion:
    boto3_raw_data: "type_defs.SortCriterionTypeDef" = dataclasses.field()

    Field = field("Field")
    SortOrder = field("SortOrder")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SortCriterionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SortCriterionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInsightResultsRequest:
    boto3_raw_data: "type_defs.GetInsightResultsRequestTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInsightResultsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInsightResultsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInsightsRequest:
    boto3_raw_data: "type_defs.GetInsightsRequestTypeDef" = dataclasses.field()

    InsightArns = field("InsightArns")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInsightsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInsightsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetMembersRequest:
    boto3_raw_data: "type_defs.GetMembersRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GetMembersRequestTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Member:
    boto3_raw_data: "type_defs.MemberTypeDef" = dataclasses.field()

    AccountId = field("AccountId")
    Email = field("Email")
    MasterId = field("MasterId")
    AdministratorId = field("AdministratorId")
    MemberStatus = field("MemberStatus")
    InvitedAt = field("InvitedAt")
    UpdatedAt = field("UpdatedAt")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.MemberTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.MemberTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSecurityControlDefinitionRequest:
    boto3_raw_data: "type_defs.GetSecurityControlDefinitionRequestTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSecurityControlDefinitionRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSecurityControlDefinitionRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupByValue:
    boto3_raw_data: "type_defs.GroupByValueTypeDef" = dataclasses.field()

    FieldValue = field("FieldValue")
    Count = field("Count")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupByValueTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupByValueTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class IndicatorOutput:
    boto3_raw_data: "type_defs.IndicatorOutputTypeDef" = dataclasses.field()

    Key = field("Key")
    Values = field("Values")
    Title = field("Title")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IndicatorOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IndicatorOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Indicator:
    boto3_raw_data: "type_defs.IndicatorTypeDef" = dataclasses.field()

    Key = field("Key")
    Values = field("Values")
    Title = field("Title")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.IndicatorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.IndicatorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightResultValue:
    boto3_raw_data: "type_defs.InsightResultValueTypeDef" = dataclasses.field()

    GroupByAttributeValue = field("GroupByAttributeValue")
    Count = field("Count")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InsightResultValueTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InsightResultValueTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InviteMembersRequest:
    boto3_raw_data: "type_defs.InviteMembersRequestTypeDef" = dataclasses.field()

    AccountIds = field("AccountIds")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InviteMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InviteMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JiraCloudDetail:
    boto3_raw_data: "type_defs.JiraCloudDetailTypeDef" = dataclasses.field()

    CloudId = field("CloudId")
    ProjectKey = field("ProjectKey")
    Domain = field("Domain")
    AuthUrl = field("AuthUrl")
    AuthStatus = field("AuthStatus")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.JiraCloudDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.JiraCloudDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JiraCloudProviderConfiguration:
    boto3_raw_data: "type_defs.JiraCloudProviderConfigurationTypeDef" = (
        dataclasses.field()
    )

    ProjectKey = field("ProjectKey")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.JiraCloudProviderConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JiraCloudProviderConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class JiraCloudUpdateConfiguration:
    boto3_raw_data: "type_defs.JiraCloudUpdateConfigurationTypeDef" = (
        dataclasses.field()
    )

    ProjectKey = field("ProjectKey")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.JiraCloudUpdateConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.JiraCloudUpdateConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAggregatorsV2Request:
    boto3_raw_data: "type_defs.ListAggregatorsV2RequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAggregatorsV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAggregatorsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutomationRulesRequest:
    boto3_raw_data: "type_defs.ListAutomationRulesRequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAutomationRulesRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutomationRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutomationRulesV2Request:
    boto3_raw_data: "type_defs.ListAutomationRulesV2RequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAutomationRulesV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutomationRulesV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPoliciesRequest:
    boto3_raw_data: "type_defs.ListConfigurationPoliciesRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListConfigurationPoliciesRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConfigurationPoliciesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConnectorsV2Request:
    boto3_raw_data: "type_defs.ListConnectorsV2RequestTypeDef" = dataclasses.field()

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")
    ProviderName = field("ProviderName")
    ConnectorStatus = field("ConnectorStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListConnectorsV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConnectorsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEnabledProductsForImportRequest:
    boto3_raw_data: "type_defs.ListEnabledProductsForImportRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListEnabledProductsForImportRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEnabledProductsForImportRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFindingAggregatorsRequest:
    boto3_raw_data: "type_defs.ListFindingAggregatorsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFindingAggregatorsRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFindingAggregatorsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInvitationsRequest:
    boto3_raw_data: "type_defs.ListInvitationsRequestTypeDef" = dataclasses.field()

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListInvitationsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInvitationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMembersRequest:
    boto3_raw_data: "type_defs.ListMembersRequestTypeDef" = dataclasses.field()

    OnlyAssociated = field("OnlyAssociated")
    MaxResults = field("MaxResults")
    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOrganizationAdminAccountsRequest:
    boto3_raw_data: "type_defs.ListOrganizationAdminAccountsRequestTypeDef" = (
        dataclasses.field()
    )

    MaxResults = field("MaxResults")
    NextToken = field("NextToken")
    Feature = field("Feature")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListOrganizationAdminAccountsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOrganizationAdminAccountsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSecurityControlDefinitionsRequest:
    boto3_raw_data: "type_defs.ListSecurityControlDefinitionsRequestTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListSecurityControlDefinitionsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSecurityControlDefinitionsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStandardsControlAssociationsRequest:
    boto3_raw_data: "type_defs.ListStandardsControlAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStandardsControlAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStandardsControlAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsControlAssociationSummary:
    boto3_raw_data: "type_defs.StandardsControlAssociationSummaryTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")
    SecurityControlId = field("SecurityControlId")
    SecurityControlArn = field("SecurityControlArn")
    AssociationStatus = field("AssociationStatus")
    RelatedRequirements = field("RelatedRequirements")
    UpdatedAt = field("UpdatedAt")
    UpdatedReason = field("UpdatedReason")
    StandardsControlTitle = field("StandardsControlTitle")
    StandardsControlDescription = field("StandardsControlDescription")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StandardsControlAssociationSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsControlAssociationSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsForResourceRequest:
    boto3_raw_data: "type_defs.ListTagsForResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTagsForResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTagsForResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkAutonomousSystem:
    boto3_raw_data: "type_defs.NetworkAutonomousSystemTypeDef" = dataclasses.field()

    Name = field("Name")
    Number = field("Number")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkAutonomousSystemTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkAutonomousSystemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkConnection:
    boto3_raw_data: "type_defs.NetworkConnectionTypeDef" = dataclasses.field()

    Direction = field("Direction")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkConnectionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkConnectionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkGeoLocation:
    boto3_raw_data: "type_defs.NetworkGeoLocationTypeDef" = dataclasses.field()

    City = field("City")
    Country = field("Country")
    Lat = field("Lat")
    Lon = field("Lon")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkGeoLocationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkGeoLocationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortRange:
    boto3_raw_data: "type_defs.PortRangeTypeDef" = dataclasses.field()

    Begin = field("Begin")
    End = field("End")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PortRangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PortRangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Range:
    boto3_raw_data: "type_defs.RangeTypeDef" = dataclasses.field()

    Start = field("Start")
    End = field("End")
    StartColumn = field("StartColumn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RangeTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RangeTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Record:
    boto3_raw_data: "type_defs.RecordTypeDef" = dataclasses.field()

    JsonPath = field("JsonPath")
    RecordIndex = field("RecordIndex")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RecordTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RecordTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterValueOutput:
    boto3_raw_data: "type_defs.ParameterValueOutputTypeDef" = dataclasses.field()

    Integer = field("Integer")
    IntegerList = field("IntegerList")
    Double = field("Double")
    String = field("String")
    StringList = field("StringList")
    Boolean = field("Boolean")
    Enum = field("Enum")
    EnumList = field("EnumList")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterValueOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterValueOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterValue:
    boto3_raw_data: "type_defs.ParameterValueTypeDef" = dataclasses.field()

    Integer = field("Integer")
    IntegerList = field("IntegerList")
    Double = field("Double")
    String = field("String")
    StringList = field("StringList")
    Boolean = field("Boolean")
    Enum = field("Enum")
    EnumList = field("EnumList")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ParameterValueTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ParameterValueTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceNowProviderConfiguration:
    boto3_raw_data: "type_defs.ServiceNowProviderConfigurationTypeDef" = (
        dataclasses.field()
    )

    InstanceName = field("InstanceName")
    ClientId = field("ClientId")
    ClientSecret = field("ClientSecret")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ServiceNowProviderConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceNowProviderConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ServiceNowDetail:
    boto3_raw_data: "type_defs.ServiceNowDetailTypeDef" = dataclasses.field()

    AuthStatus = field("AuthStatus")
    InstanceName = field("InstanceName")
    ClientId = field("ClientId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ServiceNowDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ServiceNowDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Recommendation:
    boto3_raw_data: "type_defs.RecommendationTypeDef" = dataclasses.field()

    Text = field("Text")
    Url = field("Url")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RecommendationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RecommendationTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceSeverityBreakdown:
    boto3_raw_data: "type_defs.ResourceSeverityBreakdownTypeDef" = dataclasses.field()

    Other = field("Other")
    Fatal = field("Fatal")
    Critical = field("Critical")
    High = field("High")
    Medium = field("Medium")
    Low = field("Low")
    Informational = field("Informational")
    Unknown = field("Unknown")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceSeverityBreakdownTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceSeverityBreakdownTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceTag:
    boto3_raw_data: "type_defs.ResourceTagTypeDef" = dataclasses.field()

    Key = field("Key")
    Value = field("Value")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceTagTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceTagTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceListDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceListDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    GeneratedRulesType = field("GeneratedRulesType")
    TargetTypes = field("TargetTypes")
    Targets = field("Targets")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RuleGroupSourceListDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceListDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceListDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceListDetailsTypeDef" = dataclasses.field()

    GeneratedRulesType = field("GeneratedRulesType")
    TargetTypes = field("TargetTypes")
    Targets = field("Targets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupSourceListDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceListDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatefulRulesHeaderDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceStatefulRulesHeaderDetailsTypeDef" = (
        dataclasses.field()
    )

    Destination = field("Destination")
    DestinationPort = field("DestinationPort")
    Direction = field("Direction")
    Protocol = field("Protocol")
    Source = field("Source")
    SourcePort = field("SourcePort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatefulRulesHeaderDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatefulRulesHeaderDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatefulRulesOptionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatefulRulesOptionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    Keyword = field("Keyword")
    Settings = field("Settings")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatefulRulesOptionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatefulRulesOptionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatefulRulesOptionsDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceStatefulRulesOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    Keyword = field("Keyword")
    Settings = field("Settings")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatefulRulesOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatefulRulesOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationPortsTypeDef"
    ) = dataclasses.field()

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationPortsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationPortsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesDestinations:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationsTypeDef"
    ) = dataclasses.field()

    AddressDefinition = field("AddressDefinition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesDestinationsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesSourcePorts:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcePortsTypeDef"
    ) = dataclasses.field()

    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcePortsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcePortsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesSources:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcesTypeDef"
    ) = dataclasses.field()

    AddressDefinition = field("AddressDefinition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesSourcesTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsOutput:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsOutputTypeDef"
    ) = dataclasses.field()

    Flags = field("Flags")
    Masks = field("Masks")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesTcpFlags:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsTypeDef"
    ) = dataclasses.field()

    Flags = field("Flags")
    Masks = field("Masks")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariablesIpSetsDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupVariablesIpSetsDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Definition = field("Definition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupVariablesIpSetsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesIpSetsDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariablesIpSetsDetails:
    boto3_raw_data: "type_defs.RuleGroupVariablesIpSetsDetailsTypeDef" = (
        dataclasses.field()
    )

    Definition = field("Definition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.RuleGroupVariablesIpSetsDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesIpSetsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariablesPortSetsDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupVariablesPortSetsDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Definition = field("Definition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupVariablesPortSetsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesPortSetsDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariablesPortSetsDetails:
    boto3_raw_data: "type_defs.RuleGroupVariablesPortSetsDetailsTypeDef" = (
        dataclasses.field()
    )

    Definition = field("Definition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupVariablesPortSetsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesPortSetsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlParameter:
    boto3_raw_data: "type_defs.SecurityControlParameterTypeDef" = dataclasses.field()

    Name = field("Name")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityControlParameterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SoftwarePackage:
    boto3_raw_data: "type_defs.SoftwarePackageTypeDef" = dataclasses.field()

    Name = field("Name")
    Version = field("Version")
    Epoch = field("Epoch")
    Release = field("Release")
    Architecture = field("Architecture")
    PackageManager = field("PackageManager")
    FilePath = field("FilePath")
    FixedInVersion = field("FixedInVersion")
    Remediation = field("Remediation")
    SourceLayerHash = field("SourceLayerHash")
    SourceLayerArn = field("SourceLayerArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SoftwarePackageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SoftwarePackageTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsManagedBy:
    boto3_raw_data: "type_defs.StandardsManagedByTypeDef" = dataclasses.field()

    Company = field("Company")
    Product = field("Product")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StandardsManagedByTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsManagedByTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsStatusReason:
    boto3_raw_data: "type_defs.StandardsStatusReasonTypeDef" = dataclasses.field()

    StatusReasonCode = field("StatusReasonCode")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StandardsStatusReasonTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsStatusReasonTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatelessCustomPublishMetricActionDimension:
    boto3_raw_data: "type_defs.StatelessCustomPublishMetricActionDimensionTypeDef" = (
        dataclasses.field()
    )

    Value = field("Value")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StatelessCustomPublishMetricActionDimensionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatelessCustomPublishMetricActionDimensionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class TagResourceRequest:
    boto3_raw_data: "type_defs.TagResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")
    Tags = field("Tags")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.TagResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.TagResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UntagResourceRequest:
    boto3_raw_data: "type_defs.UntagResourceRequestTypeDef" = dataclasses.field()

    ResourceArn = field("ResourceArn")
    TagKeys = field("TagKeys")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UntagResourceRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UntagResourceRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateActionTargetRequest:
    boto3_raw_data: "type_defs.UpdateActionTargetRequestTypeDef" = dataclasses.field()

    ActionTargetArn = field("ActionTargetArn")
    Name = field("Name")
    Description = field("Description")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateActionTargetRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateActionTargetRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAggregatorV2Request:
    boto3_raw_data: "type_defs.UpdateAggregatorV2RequestTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")
    RegionLinkingMode = field("RegionLinkingMode")
    LinkedRegions = field("LinkedRegions")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAggregatorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAggregatorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFindingAggregatorRequest:
    boto3_raw_data: "type_defs.UpdateFindingAggregatorRequestTypeDef" = (
        dataclasses.field()
    )

    FindingAggregatorArn = field("FindingAggregatorArn")
    RegionLinkingMode = field("RegionLinkingMode")
    Regions = field("Regions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateFindingAggregatorRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFindingAggregatorRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityHubConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateSecurityHubConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AutoEnableControls = field("AutoEnableControls")
    ControlFindingGenerator = field("ControlFindingGenerator")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateSecurityHubConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSecurityHubConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateStandardsControlRequest:
    boto3_raw_data: "type_defs.UpdateStandardsControlRequestTypeDef" = (
        dataclasses.field()
    )

    StandardsControlArn = field("StandardsControlArn")
    ControlStatus = field("ControlStatus")
    DisabledReason = field("DisabledReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateStandardsControlRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateStandardsControlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VulnerabilityVendor:
    boto3_raw_data: "type_defs.VulnerabilityVendorTypeDef" = dataclasses.field()

    Name = field("Name")
    Url = field("Url")
    VendorSeverity = field("VendorSeverity")
    VendorCreatedAt = field("VendorCreatedAt")
    VendorUpdatedAt = field("VendorUpdatedAt")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VulnerabilityVendorTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VulnerabilityVendorTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMembersRequest:
    boto3_raw_data: "type_defs.CreateMembersRequestTypeDef" = dataclasses.field()

    @cached_property
    def AccountDetails(self):  # pragma: no cover
        return AccountDetails.make_many(self.boto3_raw_data["AccountDetails"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateMembersRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMembersRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionRemoteIpDetails:
    boto3_raw_data: "type_defs.ActionRemoteIpDetailsTypeDef" = dataclasses.field()

    IpAddressV4 = field("IpAddressV4")

    @cached_property
    def Organization(self):  # pragma: no cover
        return IpOrganizationDetails.make_one(self.boto3_raw_data["Organization"])

    @cached_property
    def Country(self):  # pragma: no cover
        return Country.make_one(self.boto3_raw_data["Country"])

    @cached_property
    def City(self):  # pragma: no cover
        return City.make_one(self.boto3_raw_data["City"])

    @cached_property
    def GeoLocation(self):  # pragma: no cover
        return GeoLocation.make_one(self.boto3_raw_data["GeoLocation"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ActionRemoteIpDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ActionRemoteIpDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActorUser:
    boto3_raw_data: "type_defs.ActorUserTypeDef" = dataclasses.field()

    Name = field("Name")
    Uid = field("Uid")
    Type = field("Type")
    CredentialUid = field("CredentialUid")

    @cached_property
    def Account(self):  # pragma: no cover
        return UserAccount.make_one(self.boto3_raw_data["Account"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActorUserTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActorUserTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CvssOutput:
    boto3_raw_data: "type_defs.CvssOutputTypeDef" = dataclasses.field()

    Version = field("Version")
    BaseScore = field("BaseScore")
    BaseVector = field("BaseVector")
    Source = field("Source")

    @cached_property
    def Adjustments(self):  # pragma: no cover
        return Adjustment.make_many(self.boto3_raw_data["Adjustments"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CvssOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CvssOutputTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Cvss:
    boto3_raw_data: "type_defs.CvssTypeDef" = dataclasses.field()

    Version = field("Version")
    BaseScore = field("BaseScore")
    BaseVector = field("BaseVector")
    Source = field("Source")

    @cached_property
    def Adjustments(self):  # pragma: no cover
        return Adjustment.make_many(self.boto3_raw_data["Adjustments"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CvssTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CvssTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPolicyAssociationsRequest:
    boto3_raw_data: "type_defs.ListConfigurationPolicyAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @cached_property
    def Filters(self):  # pragma: no cover
        return AssociationFilters.make_one(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListConfigurationPolicyAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConfigurationPolicyAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AssociationSetDetails:
    boto3_raw_data: "type_defs.AssociationSetDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AssociationState(self):  # pragma: no cover
        return AssociationStateDetails.make_one(self.boto3_raw_data["AssociationState"])

    GatewayId = field("GatewayId")
    Main = field("Main")
    RouteTableAssociationId = field("RouteTableAssociationId")
    RouteTableId = field("RouteTableId")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AssociationSetDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AssociationSetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesMetadataV2:
    boto3_raw_data: "type_defs.AutomationRulesMetadataV2TypeDef" = dataclasses.field()

    RuleArn = field("RuleArn")
    RuleId = field("RuleId")
    RuleOrder = field("RuleOrder")
    RuleName = field("RuleName")
    RuleStatus = field("RuleStatus")
    Description = field("Description")

    @cached_property
    def Actions(self):  # pragma: no cover
        return AutomationRulesActionTypeObjectV2.make_many(
            self.boto3_raw_data["Actions"]
        )

    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesMetadataV2TypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesMetadataV2TypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesActionV2:
    boto3_raw_data: "type_defs.AutomationRulesActionV2TypeDef" = dataclasses.field()

    Type = field("Type")

    @cached_property
    def FindingFieldsUpdate(self):  # pragma: no cover
        return AutomationRulesFindingFieldsUpdateV2.make_one(
            self.boto3_raw_data["FindingFieldsUpdate"]
        )

    @cached_property
    def ExternalIntegrationConfiguration(self):  # pragma: no cover
        return ExternalIntegrationConfiguration.make_one(
            self.boto3_raw_data["ExternalIntegrationConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesActionV2TypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesActionV2TypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesFindingFieldsUpdateOutput:
    boto3_raw_data: "type_defs.AutomationRulesFindingFieldsUpdateOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Note(self):  # pragma: no cover
        return NoteUpdate.make_one(self.boto3_raw_data["Note"])

    @cached_property
    def Severity(self):  # pragma: no cover
        return SeverityUpdate.make_one(self.boto3_raw_data["Severity"])

    VerificationState = field("VerificationState")
    Confidence = field("Confidence")
    Criticality = field("Criticality")
    Types = field("Types")
    UserDefinedFields = field("UserDefinedFields")

    @cached_property
    def Workflow(self):  # pragma: no cover
        return WorkflowUpdate.make_one(self.boto3_raw_data["Workflow"])

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutomationRulesFindingFieldsUpdateOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesFindingFieldsUpdateOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesFindingFieldsUpdate:
    boto3_raw_data: "type_defs.AutomationRulesFindingFieldsUpdateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Note(self):  # pragma: no cover
        return NoteUpdate.make_one(self.boto3_raw_data["Note"])

    @cached_property
    def Severity(self):  # pragma: no cover
        return SeverityUpdate.make_one(self.boto3_raw_data["Severity"])

    VerificationState = field("VerificationState")
    Confidence = field("Confidence")
    Criticality = field("Criticality")
    Types = field("Types")
    UserDefinedFields = field("UserDefinedFields")

    @cached_property
    def Workflow(self):  # pragma: no cover
        return WorkflowUpdate.make_one(self.boto3_raw_data["Workflow"])

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutomationRulesFindingFieldsUpdateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesFindingFieldsUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfMapFilter:
    boto3_raw_data: "type_defs.OcsfMapFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return MapFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OcsfMapFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OcsfMapFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesMapFilter:
    boto3_raw_data: "type_defs.ResourcesMapFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return MapFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcesMapFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesMapFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfNumberFilter:
    boto3_raw_data: "type_defs.OcsfNumberFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return NumberFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OcsfNumberFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfNumberFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesNumberFilter:
    boto3_raw_data: "type_defs.ResourcesNumberFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return NumberFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcesNumberFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesNumberFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfStringFilter:
    boto3_raw_data: "type_defs.OcsfStringFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return StringFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OcsfStringFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfStringFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesStringFilter:
    boto3_raw_data: "type_defs.ResourcesStringFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return StringFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcesStringFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesStringFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerLogsDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerLogsDetailsTypeDef" = (
        dataclasses.field()
    )

    Audit = field("Audit")
    General = field("General")
    AuditLogGroup = field("AuditLogGroup")
    GeneralLogGroup = field("GeneralLogGroup")

    @cached_property
    def Pending(self):  # pragma: no cover
        return AwsAmazonMqBrokerLogsPendingDetails.make_one(
            self.boto3_raw_data["Pending"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsAmazonMqBrokerLogsDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerLogsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayRestApiDetailsOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayRestApiDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    CreatedDate = field("CreatedDate")
    Version = field("Version")
    BinaryMediaTypes = field("BinaryMediaTypes")
    MinimumCompressionSize = field("MinimumCompressionSize")
    ApiKeySource = field("ApiKeySource")

    @cached_property
    def EndpointConfiguration(self):  # pragma: no cover
        return AwsApiGatewayEndpointConfigurationOutput.make_one(
            self.boto3_raw_data["EndpointConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsApiGatewayRestApiDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayRestApiDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayStageDetailsOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayStageDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DeploymentId = field("DeploymentId")
    ClientCertificateId = field("ClientCertificateId")
    StageName = field("StageName")
    Description = field("Description")
    CacheClusterEnabled = field("CacheClusterEnabled")
    CacheClusterSize = field("CacheClusterSize")
    CacheClusterStatus = field("CacheClusterStatus")

    @cached_property
    def MethodSettings(self):  # pragma: no cover
        return AwsApiGatewayMethodSettings.make_many(
            self.boto3_raw_data["MethodSettings"]
        )

    Variables = field("Variables")
    DocumentationVersion = field("DocumentationVersion")

    @cached_property
    def AccessLogSettings(self):  # pragma: no cover
        return AwsApiGatewayAccessLogSettings.make_one(
            self.boto3_raw_data["AccessLogSettings"]
        )

    @cached_property
    def CanarySettings(self):  # pragma: no cover
        return AwsApiGatewayCanarySettingsOutput.make_one(
            self.boto3_raw_data["CanarySettings"]
        )

    TracingEnabled = field("TracingEnabled")
    CreatedDate = field("CreatedDate")
    LastUpdatedDate = field("LastUpdatedDate")
    WebAclArn = field("WebAclArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsApiGatewayStageDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayStageDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayV2ApiDetailsOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayV2ApiDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ApiEndpoint = field("ApiEndpoint")
    ApiId = field("ApiId")
    ApiKeySelectionExpression = field("ApiKeySelectionExpression")
    CreatedDate = field("CreatedDate")
    Description = field("Description")
    Version = field("Version")
    Name = field("Name")
    ProtocolType = field("ProtocolType")
    RouteSelectionExpression = field("RouteSelectionExpression")

    @cached_property
    def CorsConfiguration(self):  # pragma: no cover
        return AwsCorsConfigurationOutput.make_one(
            self.boto3_raw_data["CorsConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsApiGatewayV2ApiDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayV2ApiDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayV2StageDetailsOutput:
    boto3_raw_data: "type_defs.AwsApiGatewayV2StageDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ClientCertificateId = field("ClientCertificateId")
    CreatedDate = field("CreatedDate")
    Description = field("Description")

    @cached_property
    def DefaultRouteSettings(self):  # pragma: no cover
        return AwsApiGatewayV2RouteSettings.make_one(
            self.boto3_raw_data["DefaultRouteSettings"]
        )

    DeploymentId = field("DeploymentId")
    LastUpdatedDate = field("LastUpdatedDate")

    @cached_property
    def RouteSettings(self):  # pragma: no cover
        return AwsApiGatewayV2RouteSettings.make_one(
            self.boto3_raw_data["RouteSettings"]
        )

    StageName = field("StageName")
    StageVariables = field("StageVariables")

    @cached_property
    def AccessLogSettings(self):  # pragma: no cover
        return AwsApiGatewayAccessLogSettings.make_one(
            self.boto3_raw_data["AccessLogSettings"]
        )

    AutoDeploy = field("AutoDeploy")
    LastDeploymentStatusMessage = field("LastDeploymentStatusMessage")
    ApiGatewayManaged = field("ApiGatewayManaged")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsApiGatewayV2StageDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayV2StageDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayV2StageDetails:
    boto3_raw_data: "type_defs.AwsApiGatewayV2StageDetailsTypeDef" = dataclasses.field()

    ClientCertificateId = field("ClientCertificateId")
    CreatedDate = field("CreatedDate")
    Description = field("Description")

    @cached_property
    def DefaultRouteSettings(self):  # pragma: no cover
        return AwsApiGatewayV2RouteSettings.make_one(
            self.boto3_raw_data["DefaultRouteSettings"]
        )

    DeploymentId = field("DeploymentId")
    LastUpdatedDate = field("LastUpdatedDate")

    @cached_property
    def RouteSettings(self):  # pragma: no cover
        return AwsApiGatewayV2RouteSettings.make_one(
            self.boto3_raw_data["RouteSettings"]
        )

    StageName = field("StageName")
    StageVariables = field("StageVariables")

    @cached_property
    def AccessLogSettings(self):  # pragma: no cover
        return AwsApiGatewayAccessLogSettings.make_one(
            self.boto3_raw_data["AccessLogSettings"]
        )

    AutoDeploy = field("AutoDeploy")
    LastDeploymentStatusMessage = field("LastDeploymentStatusMessage")
    ApiGatewayManaged = field("ApiGatewayManaged")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayV2StageDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayV2StageDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetails:
    boto3_raw_data: (
        "type_defs.AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetailsTypeDef"
    ) = dataclasses.field()

    AuthenticationType = field("AuthenticationType")

    @cached_property
    def LambdaAuthorizerConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails.make_one(
            self.boto3_raw_data["LambdaAuthorizerConfig"]
        )

    @cached_property
    def OpenIdConnectConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiOpenIdConnectConfigDetails.make_one(
            self.boto3_raw_data["OpenIdConnectConfig"]
        )

    @cached_property
    def UserPoolConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiUserPoolConfigDetails.make_one(
            self.boto3_raw_data["UserPoolConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAthenaWorkGroupConfigurationResultConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def EncryptionConfiguration(self):  # pragma: no cover
        return AwsAthenaWorkGroupConfigurationResultConfigurationEncryptionConfigurationDetails.make_one(
            self.boto3_raw_data["EncryptionConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAthenaWorkGroupConfigurationResultConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsOutput:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsOutputTypeDef" = (dataclasses.field())

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails.make_many(
            self.boto3_raw_data["Overrides"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsTypeDef" = (dataclasses.field())

    @cached_property
    def LaunchTemplateSpecification(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplateSpecification"]
        )

    @cached_property
    def Overrides(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails.make_many(
            self.boto3_raw_data["Overrides"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsTypeDef"
    ) = dataclasses.field()

    DeviceName = field("DeviceName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails.make_one(
            self.boto3_raw_data["Ebs"]
        )

    NoDevice = field("NoDevice")
    VirtualName = field("VirtualName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanRuleCopyActionsDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanRuleCopyActionsDetailsTypeDef" = (
        dataclasses.field()
    )

    DestinationBackupVaultArn = field("DestinationBackupVaultArn")

    @cached_property
    def Lifecycle(self):  # pragma: no cover
        return AwsBackupBackupPlanLifecycleDetails.make_one(
            self.boto3_raw_data["Lifecycle"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanRuleCopyActionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanRuleCopyActionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupVaultDetailsOutput:
    boto3_raw_data: "type_defs.AwsBackupBackupVaultDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    BackupVaultArn = field("BackupVaultArn")
    BackupVaultName = field("BackupVaultName")
    EncryptionKeyArn = field("EncryptionKeyArn")

    @cached_property
    def Notifications(self):  # pragma: no cover
        return AwsBackupBackupVaultNotificationsDetailsOutput.make_one(
            self.boto3_raw_data["Notifications"]
        )

    AccessPolicy = field("AccessPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupVaultDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupVaultDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupRecoveryPointDetails:
    boto3_raw_data: "type_defs.AwsBackupRecoveryPointDetailsTypeDef" = (
        dataclasses.field()
    )

    BackupSizeInBytes = field("BackupSizeInBytes")
    BackupVaultArn = field("BackupVaultArn")
    BackupVaultName = field("BackupVaultName")

    @cached_property
    def CalculatedLifecycle(self):  # pragma: no cover
        return AwsBackupRecoveryPointCalculatedLifecycleDetails.make_one(
            self.boto3_raw_data["CalculatedLifecycle"]
        )

    CompletionDate = field("CompletionDate")

    @cached_property
    def CreatedBy(self):  # pragma: no cover
        return AwsBackupRecoveryPointCreatedByDetails.make_one(
            self.boto3_raw_data["CreatedBy"]
        )

    CreationDate = field("CreationDate")
    EncryptionKeyArn = field("EncryptionKeyArn")
    IamRoleArn = field("IamRoleArn")
    IsEncrypted = field("IsEncrypted")
    LastRestoreTime = field("LastRestoreTime")

    @cached_property
    def Lifecycle(self):  # pragma: no cover
        return AwsBackupRecoveryPointLifecycleDetails.make_one(
            self.boto3_raw_data["Lifecycle"]
        )

    RecoveryPointArn = field("RecoveryPointArn")
    ResourceArn = field("ResourceArn")
    ResourceType = field("ResourceType")
    SourceBackupVaultArn = field("SourceBackupVaultArn")
    Status = field("Status")
    StatusMessage = field("StatusMessage")
    StorageClass = field("StorageClass")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsBackupRecoveryPointDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupRecoveryPointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateDomainValidationOptionOutput:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateDomainValidationOptionOutputTypeDef"
    ) = dataclasses.field()

    DomainName = field("DomainName")

    @cached_property
    def ResourceRecord(self):  # pragma: no cover
        return AwsCertificateManagerCertificateResourceRecord.make_one(
            self.boto3_raw_data["ResourceRecord"]
        )

    ValidationDomain = field("ValidationDomain")
    ValidationEmails = field("ValidationEmails")
    ValidationMethod = field("ValidationMethod")
    ValidationStatus = field("ValidationStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateDomainValidationOptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateDomainValidationOptionOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateDomainValidationOption:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateDomainValidationOptionTypeDef"
    ) = dataclasses.field()

    DomainName = field("DomainName")

    @cached_property
    def ResourceRecord(self):  # pragma: no cover
        return AwsCertificateManagerCertificateResourceRecord.make_one(
            self.boto3_raw_data["ResourceRecord"]
        )

    ValidationDomain = field("ValidationDomain")
    ValidationEmails = field("ValidationEmails")
    ValidationMethod = field("ValidationMethod")
    ValidationStatus = field("ValidationStatus")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateDomainValidationOptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateDomainValidationOptionTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFormationStackDetailsOutput:
    boto3_raw_data: "type_defs.AwsCloudFormationStackDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Capabilities = field("Capabilities")
    CreationTime = field("CreationTime")
    Description = field("Description")
    DisableRollback = field("DisableRollback")

    @cached_property
    def DriftInformation(self):  # pragma: no cover
        return AwsCloudFormationStackDriftInformationDetails.make_one(
            self.boto3_raw_data["DriftInformation"]
        )

    EnableTerminationProtection = field("EnableTerminationProtection")
    LastUpdatedTime = field("LastUpdatedTime")
    NotificationArns = field("NotificationArns")

    @cached_property
    def Outputs(self):  # pragma: no cover
        return AwsCloudFormationStackOutputsDetails.make_many(
            self.boto3_raw_data["Outputs"]
        )

    RoleArn = field("RoleArn")
    StackId = field("StackId")
    StackName = field("StackName")
    StackStatus = field("StackStatus")
    StackStatusReason = field("StackStatusReason")
    TimeoutInMinutes = field("TimeoutInMinutes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFormationStackDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFormationStackDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFormationStackDetails:
    boto3_raw_data: "type_defs.AwsCloudFormationStackDetailsTypeDef" = (
        dataclasses.field()
    )

    Capabilities = field("Capabilities")
    CreationTime = field("CreationTime")
    Description = field("Description")
    DisableRollback = field("DisableRollback")

    @cached_property
    def DriftInformation(self):  # pragma: no cover
        return AwsCloudFormationStackDriftInformationDetails.make_one(
            self.boto3_raw_data["DriftInformation"]
        )

    EnableTerminationProtection = field("EnableTerminationProtection")
    LastUpdatedTime = field("LastUpdatedTime")
    NotificationArns = field("NotificationArns")

    @cached_property
    def Outputs(self):  # pragma: no cover
        return AwsCloudFormationStackOutputsDetails.make_many(
            self.boto3_raw_data["Outputs"]
        )

    RoleArn = field("RoleArn")
    StackId = field("StackId")
    StackName = field("StackName")
    StackStatus = field("StackStatus")
    StackStatusReason = field("StackStatusReason")
    TimeoutInMinutes = field("TimeoutInMinutes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCloudFormationStackDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFormationStackDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionCacheBehaviorsOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionCacheBehaviorsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Items(self):  # pragma: no cover
        return AwsCloudFrontDistributionCacheBehavior.make_many(
            self.boto3_raw_data["Items"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionCacheBehaviorsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionCacheBehaviorsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionCacheBehaviors:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionCacheBehaviorsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Items(self):  # pragma: no cover
        return AwsCloudFrontDistributionCacheBehavior.make_many(
            self.boto3_raw_data["Items"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionCacheBehaviorsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionCacheBehaviorsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginCustomOriginConfigOutput:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigOutputTypeDef"
    ) = dataclasses.field()

    HttpPort = field("HttpPort")
    HttpsPort = field("HttpsPort")
    OriginKeepaliveTimeout = field("OriginKeepaliveTimeout")
    OriginProtocolPolicy = field("OriginProtocolPolicy")
    OriginReadTimeout = field("OriginReadTimeout")

    @cached_property
    def OriginSslProtocols(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginSslProtocolsOutput.make_one(
            self.boto3_raw_data["OriginSslProtocols"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupFailoverOutput:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginGroupFailoverOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def StatusCodes(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginGroupFailoverStatusCodesOutput.make_one(
            self.boto3_raw_data["StatusCodes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupFailoverOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginGroupFailoverOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudWatchAlarmDetailsOutput:
    boto3_raw_data: "type_defs.AwsCloudWatchAlarmDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ActionsEnabled = field("ActionsEnabled")
    AlarmActions = field("AlarmActions")
    AlarmArn = field("AlarmArn")
    AlarmConfigurationUpdatedTimestamp = field("AlarmConfigurationUpdatedTimestamp")
    AlarmDescription = field("AlarmDescription")
    AlarmName = field("AlarmName")
    ComparisonOperator = field("ComparisonOperator")
    DatapointsToAlarm = field("DatapointsToAlarm")

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return AwsCloudWatchAlarmDimensionsDetails.make_many(
            self.boto3_raw_data["Dimensions"]
        )

    EvaluateLowSampleCountPercentile = field("EvaluateLowSampleCountPercentile")
    EvaluationPeriods = field("EvaluationPeriods")
    ExtendedStatistic = field("ExtendedStatistic")
    InsufficientDataActions = field("InsufficientDataActions")
    MetricName = field("MetricName")
    Namespace = field("Namespace")
    OkActions = field("OkActions")
    Period = field("Period")
    Statistic = field("Statistic")
    Threshold = field("Threshold")
    ThresholdMetricId = field("ThresholdMetricId")
    TreatMissingData = field("TreatMissingData")
    Unit = field("Unit")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCloudWatchAlarmDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudWatchAlarmDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudWatchAlarmDetails:
    boto3_raw_data: "type_defs.AwsCloudWatchAlarmDetailsTypeDef" = dataclasses.field()

    ActionsEnabled = field("ActionsEnabled")
    AlarmActions = field("AlarmActions")
    AlarmArn = field("AlarmArn")
    AlarmConfigurationUpdatedTimestamp = field("AlarmConfigurationUpdatedTimestamp")
    AlarmDescription = field("AlarmDescription")
    AlarmName = field("AlarmName")
    ComparisonOperator = field("ComparisonOperator")
    DatapointsToAlarm = field("DatapointsToAlarm")

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return AwsCloudWatchAlarmDimensionsDetails.make_many(
            self.boto3_raw_data["Dimensions"]
        )

    EvaluateLowSampleCountPercentile = field("EvaluateLowSampleCountPercentile")
    EvaluationPeriods = field("EvaluationPeriods")
    ExtendedStatistic = field("ExtendedStatistic")
    InsufficientDataActions = field("InsufficientDataActions")
    MetricName = field("MetricName")
    Namespace = field("Namespace")
    OkActions = field("OkActions")
    Period = field("Period")
    Statistic = field("Statistic")
    Threshold = field("Threshold")
    ThresholdMetricId = field("ThresholdMetricId")
    TreatMissingData = field("TreatMissingData")
    Unit = field("Unit")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCloudWatchAlarmDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudWatchAlarmDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectEnvironmentOutput:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectEnvironmentOutputTypeDef" = (
        dataclasses.field()
    )

    Certificate = field("Certificate")

    @cached_property
    def EnvironmentVariables(self):  # pragma: no cover
        return AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails.make_many(
            self.boto3_raw_data["EnvironmentVariables"]
        )

    PrivilegedMode = field("PrivilegedMode")
    ImagePullCredentialsType = field("ImagePullCredentialsType")

    @cached_property
    def RegistryCredential(self):  # pragma: no cover
        return AwsCodeBuildProjectEnvironmentRegistryCredential.make_one(
            self.boto3_raw_data["RegistryCredential"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectEnvironmentOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectEnvironmentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectEnvironment:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectEnvironmentTypeDef" = (
        dataclasses.field()
    )

    Certificate = field("Certificate")

    @cached_property
    def EnvironmentVariables(self):  # pragma: no cover
        return AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails.make_many(
            self.boto3_raw_data["EnvironmentVariables"]
        )

    PrivilegedMode = field("PrivilegedMode")
    ImagePullCredentialsType = field("ImagePullCredentialsType")

    @cached_property
    def RegistryCredential(self):  # pragma: no cover
        return AwsCodeBuildProjectEnvironmentRegistryCredential.make_one(
            self.boto3_raw_data["RegistryCredential"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCodeBuildProjectEnvironmentTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectEnvironmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectLogsConfigDetails:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectLogsConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CloudWatchLogs(self):  # pragma: no cover
        return AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails.make_one(
            self.boto3_raw_data["CloudWatchLogs"]
        )

    @cached_property
    def S3Logs(self):  # pragma: no cover
        return AwsCodeBuildProjectLogsConfigS3LogsDetails.make_one(
            self.boto3_raw_data["S3Logs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCodeBuildProjectLogsConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectLogsConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsReplicationInstanceDetailsOutput:
    boto3_raw_data: "type_defs.AwsDmsReplicationInstanceDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AllocatedStorage = field("AllocatedStorage")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    AvailabilityZone = field("AvailabilityZone")
    EngineVersion = field("EngineVersion")
    KmsKeyId = field("KmsKeyId")
    MultiAZ = field("MultiAZ")
    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    PubliclyAccessible = field("PubliclyAccessible")
    ReplicationInstanceClass = field("ReplicationInstanceClass")
    ReplicationInstanceIdentifier = field("ReplicationInstanceIdentifier")

    @cached_property
    def ReplicationSubnetGroup(self):  # pragma: no cover
        return AwsDmsReplicationInstanceReplicationSubnetGroupDetails.make_one(
            self.boto3_raw_data["ReplicationSubnetGroup"]
        )

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsDmsReplicationInstanceVpcSecurityGroupsDetails.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDmsReplicationInstanceDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDmsReplicationInstanceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDmsReplicationInstanceDetails:
    boto3_raw_data: "type_defs.AwsDmsReplicationInstanceDetailsTypeDef" = (
        dataclasses.field()
    )

    AllocatedStorage = field("AllocatedStorage")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    AvailabilityZone = field("AvailabilityZone")
    EngineVersion = field("EngineVersion")
    KmsKeyId = field("KmsKeyId")
    MultiAZ = field("MultiAZ")
    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    PubliclyAccessible = field("PubliclyAccessible")
    ReplicationInstanceClass = field("ReplicationInstanceClass")
    ReplicationInstanceIdentifier = field("ReplicationInstanceIdentifier")

    @cached_property
    def ReplicationSubnetGroup(self):  # pragma: no cover
        return AwsDmsReplicationInstanceReplicationSubnetGroupDetails.make_one(
            self.boto3_raw_data["ReplicationSubnetGroup"]
        )

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsDmsReplicationInstanceVpcSecurityGroupsDetails.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDmsReplicationInstanceDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDmsReplicationInstanceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableGlobalSecondaryIndexOutput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableGlobalSecondaryIndexOutputTypeDef" = (
        dataclasses.field()
    )

    Backfilling = field("Backfilling")
    IndexArn = field("IndexArn")
    IndexName = field("IndexName")
    IndexSizeBytes = field("IndexSizeBytes")
    IndexStatus = field("IndexStatus")
    ItemCount = field("ItemCount")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    @cached_property
    def Projection(self):  # pragma: no cover
        return AwsDynamoDbTableProjectionOutput.make_one(
            self.boto3_raw_data["Projection"]
        )

    @cached_property
    def ProvisionedThroughput(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughput.make_one(
            self.boto3_raw_data["ProvisionedThroughput"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableGlobalSecondaryIndexOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableGlobalSecondaryIndexOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableLocalSecondaryIndexOutput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableLocalSecondaryIndexOutputTypeDef" = (
        dataclasses.field()
    )

    IndexArn = field("IndexArn")
    IndexName = field("IndexName")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    @cached_property
    def Projection(self):  # pragma: no cover
        return AwsDynamoDbTableProjectionOutput.make_one(
            self.boto3_raw_data["Projection"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableLocalSecondaryIndexOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableLocalSecondaryIndexOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableReplicaGlobalSecondaryIndex:
    boto3_raw_data: "type_defs.AwsDynamoDbTableReplicaGlobalSecondaryIndexTypeDef" = (
        dataclasses.field()
    )

    IndexName = field("IndexName")

    @cached_property
    def ProvisionedThroughputOverride(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughputOverride.make_one(
            self.boto3_raw_data["ProvisionedThroughputOverride"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableReplicaGlobalSecondaryIndexTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableReplicaGlobalSecondaryIndexTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointAuthenticationOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Type = field("Type")

    @cached_property
    def ActiveDirectory(self):  # pragma: no cover
        return (
            AwsEc2ClientVpnEndpointAuthenticationOptionsActiveDirectoryDetails.make_one(
                self.boto3_raw_data["ActiveDirectory"]
            )
        )

    @cached_property
    def MutualAuthentication(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointAuthenticationOptionsMutualAuthenticationDetails.make_one(
            self.boto3_raw_data["MutualAuthentication"]
        )

    @cached_property
    def FederatedAuthentication(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointAuthenticationOptionsFederatedAuthenticationDetails.make_one(
            self.boto3_raw_data["FederatedAuthentication"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointAuthenticationOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointClientConnectOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    LambdaFunctionArn = field("LambdaFunctionArn")

    @cached_property
    def Status(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointClientConnectOptionsStatusDetails.make_one(
            self.boto3_raw_data["Status"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2ClientVpnEndpointClientConnectOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2InstanceDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2InstanceDetailsOutputTypeDef" = dataclasses.field()

    Type = field("Type")
    ImageId = field("ImageId")
    IpV4Addresses = field("IpV4Addresses")
    IpV6Addresses = field("IpV6Addresses")
    KeyName = field("KeyName")
    IamInstanceProfileArn = field("IamInstanceProfileArn")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    LaunchedAt = field("LaunchedAt")

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return AwsEc2InstanceNetworkInterfacesDetails.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    VirtualizationType = field("VirtualizationType")

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsEc2InstanceMetadataOptions.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return AwsEc2InstanceMonitoringDetails.make_one(
            self.boto3_raw_data["Monitoring"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2InstanceDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2InstanceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2InstanceDetails:
    boto3_raw_data: "type_defs.AwsEc2InstanceDetailsTypeDef" = dataclasses.field()

    Type = field("Type")
    ImageId = field("ImageId")
    IpV4Addresses = field("IpV4Addresses")
    IpV6Addresses = field("IpV6Addresses")
    KeyName = field("KeyName")
    IamInstanceProfileArn = field("IamInstanceProfileArn")
    VpcId = field("VpcId")
    SubnetId = field("SubnetId")
    LaunchedAt = field("LaunchedAt")

    @cached_property
    def NetworkInterfaces(self):  # pragma: no cover
        return AwsEc2InstanceNetworkInterfacesDetails.make_many(
            self.boto3_raw_data["NetworkInterfaces"]
        )

    VirtualizationType = field("VirtualizationType")

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsEc2InstanceMetadataOptions.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return AwsEc2InstanceMonitoringDetails.make_one(
            self.boto3_raw_data["Monitoring"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2InstanceDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2InstanceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsTypeDef"
    ) = dataclasses.field()

    DeviceName = field("DeviceName")

    @cached_property
    def Ebs(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataBlockDeviceMappingSetEbsDetails.make_one(
            self.boto3_raw_data["Ebs"]
        )

    NoDevice = field("NoDevice")
    VirtualName = field("VirtualName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetailsTypeDef" = (dataclasses.field())

    CapacityReservationPreference = field("CapacityReservationPreference")

    @cached_property
    def CapacityReservationTarget(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCapacityReservationSpecificationCapacityReservationTargetDetails.make_one(
            self.boto3_raw_data["CapacityReservationTarget"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceMarketOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsDetailsTypeDef"
    ) = dataclasses.field()

    MarketType = field("MarketType")

    @cached_property
    def SpotOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceMarketOptionsSpotOptionsDetails.make_one(
            self.boto3_raw_data["SpotOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceMarketOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AcceleratorCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetails.make_one(
            self.boto3_raw_data["AcceleratorCount"]
        )

    AcceleratorManufacturers = field("AcceleratorManufacturers")
    AcceleratorNames = field("AcceleratorNames")

    @cached_property
    def AcceleratorTotalMemoryMiB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetails.make_one(
            self.boto3_raw_data["AcceleratorTotalMemoryMiB"]
        )

    AcceleratorTypes = field("AcceleratorTypes")
    BareMetal = field("BareMetal")

    @cached_property
    def BaselineEbsBandwidthMbps(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetails.make_one(
            self.boto3_raw_data["BaselineEbsBandwidthMbps"]
        )

    BurstablePerformance = field("BurstablePerformance")
    CpuManufacturers = field("CpuManufacturers")
    ExcludedInstanceTypes = field("ExcludedInstanceTypes")
    InstanceGenerations = field("InstanceGenerations")
    LocalStorage = field("LocalStorage")
    LocalStorageTypes = field("LocalStorageTypes")

    @cached_property
    def MemoryGiBPerVCpu(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails.make_one(
            self.boto3_raw_data["MemoryGiBPerVCpu"]
        )

    @cached_property
    def MemoryMiB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetails.make_one(
            self.boto3_raw_data["MemoryMiB"]
        )

    @cached_property
    def NetworkInterfaceCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetails.make_one(
            self.boto3_raw_data["NetworkInterfaceCount"]
        )

    OnDemandMaxPricePercentageOverLowestPrice = field(
        "OnDemandMaxPricePercentageOverLowestPrice"
    )
    RequireHibernateSupport = field("RequireHibernateSupport")
    SpotMaxPricePercentageOverLowestPrice = field(
        "SpotMaxPricePercentageOverLowestPrice"
    )

    @cached_property
    def TotalLocalStorageGB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails.make_one(
            self.boto3_raw_data["TotalLocalStorageGB"]
        )

    @cached_property
    def VCpuCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetails.make_one(
            self.boto3_raw_data["VCpuCount"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataInstanceRequirementsDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AcceleratorCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorCountDetails.make_one(
            self.boto3_raw_data["AcceleratorCount"]
        )

    AcceleratorManufacturers = field("AcceleratorManufacturers")
    AcceleratorNames = field("AcceleratorNames")

    @cached_property
    def AcceleratorTotalMemoryMiB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsAcceleratorTotalMemoryMiBDetails.make_one(
            self.boto3_raw_data["AcceleratorTotalMemoryMiB"]
        )

    AcceleratorTypes = field("AcceleratorTypes")
    BareMetal = field("BareMetal")

    @cached_property
    def BaselineEbsBandwidthMbps(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsBaselineEbsBandwidthMbpsDetails.make_one(
            self.boto3_raw_data["BaselineEbsBandwidthMbps"]
        )

    BurstablePerformance = field("BurstablePerformance")
    CpuManufacturers = field("CpuManufacturers")
    ExcludedInstanceTypes = field("ExcludedInstanceTypes")
    InstanceGenerations = field("InstanceGenerations")
    LocalStorage = field("LocalStorage")
    LocalStorageTypes = field("LocalStorageTypes")

    @cached_property
    def MemoryGiBPerVCpu(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsMemoryGiBPerVCpuDetails.make_one(
            self.boto3_raw_data["MemoryGiBPerVCpu"]
        )

    @cached_property
    def MemoryMiB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsMemoryMiBDetails.make_one(
            self.boto3_raw_data["MemoryMiB"]
        )

    @cached_property
    def NetworkInterfaceCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsNetworkInterfaceCountDetails.make_one(
            self.boto3_raw_data["NetworkInterfaceCount"]
        )

    OnDemandMaxPricePercentageOverLowestPrice = field(
        "OnDemandMaxPricePercentageOverLowestPrice"
    )
    RequireHibernateSupport = field("RequireHibernateSupport")
    SpotMaxPricePercentageOverLowestPrice = field(
        "SpotMaxPricePercentageOverLowestPrice"
    )

    @cached_property
    def TotalLocalStorageGB(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsTotalLocalStorageGBDetails.make_one(
            self.boto3_raw_data["TotalLocalStorageGB"]
        )

    @cached_property
    def VCpuCount(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsVCpuCountDetails.make_one(
            self.boto3_raw_data["VCpuCount"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataInstanceRequirementsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsOutputTypeDef"
    ) = dataclasses.field()

    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    InterfaceType = field("InterfaceType")
    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetails.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return (
            AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetails.make_many(
                self.boto3_raw_data["Ipv6Addresses"]
            )
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetails.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    NetworkCardIndex = field("NetworkCardIndex")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails:
    boto3_raw_data: (
        "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsTypeDef"
    ) = dataclasses.field()

    AssociateCarrierIpAddress = field("AssociateCarrierIpAddress")
    AssociatePublicIpAddress = field("AssociatePublicIpAddress")
    DeleteOnTermination = field("DeleteOnTermination")
    Description = field("Description")
    DeviceIndex = field("DeviceIndex")
    Groups = field("Groups")
    InterfaceType = field("InterfaceType")
    Ipv4PrefixCount = field("Ipv4PrefixCount")

    @cached_property
    def Ipv4Prefixes(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv4PrefixesDetails.make_many(
            self.boto3_raw_data["Ipv4Prefixes"]
        )

    Ipv6AddressCount = field("Ipv6AddressCount")

    @cached_property
    def Ipv6Addresses(self):  # pragma: no cover
        return (
            AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6AddressesDetails.make_many(
                self.boto3_raw_data["Ipv6Addresses"]
            )
        )

    Ipv6PrefixCount = field("Ipv6PrefixCount")

    @cached_property
    def Ipv6Prefixes(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetIpv6PrefixesDetails.make_many(
            self.boto3_raw_data["Ipv6Prefixes"]
        )

    NetworkCardIndex = field("NetworkCardIndex")
    NetworkInterfaceId = field("NetworkInterfaceId")
    PrivateIpAddress = field("PrivateIpAddress")

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetPrivateIpAddressesDetails.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    SecondaryPrivateIpAddressCount = field("SecondaryPrivateIpAddressCount")
    SubnetId = field("SubnetId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkAclEntry:
    boto3_raw_data: "type_defs.AwsEc2NetworkAclEntryTypeDef" = dataclasses.field()

    CidrBlock = field("CidrBlock")
    Egress = field("Egress")

    @cached_property
    def IcmpTypeCode(self):  # pragma: no cover
        return IcmpTypeCode.make_one(self.boto3_raw_data["IcmpTypeCode"])

    Ipv6CidrBlock = field("Ipv6CidrBlock")

    @cached_property
    def PortRange(self):  # pragma: no cover
        return PortRangeFromTo.make_one(self.boto3_raw_data["PortRange"])

    Protocol = field("Protocol")
    RuleAction = field("RuleAction")
    RuleNumber = field("RuleNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkAclEntryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkAclEntryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfaceDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfaceDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Attachment(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceAttachment.make_one(
            self.boto3_raw_data["Attachment"]
        )

    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceSecurityGroup.make_many(
            self.boto3_raw_data["SecurityGroups"]
        )

    SourceDestCheck = field("SourceDestCheck")

    @cached_property
    def IpV6Addresses(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceIpV6AddressDetail.make_many(
            self.boto3_raw_data["IpV6Addresses"]
        )

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return AwsEc2NetworkInterfacePrivateIpAddressDetail.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    PublicDnsName = field("PublicDnsName")
    PublicIp = field("PublicIp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2NetworkInterfaceDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfaceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkInterfaceDetails:
    boto3_raw_data: "type_defs.AwsEc2NetworkInterfaceDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Attachment(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceAttachment.make_one(
            self.boto3_raw_data["Attachment"]
        )

    NetworkInterfaceId = field("NetworkInterfaceId")

    @cached_property
    def SecurityGroups(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceSecurityGroup.make_many(
            self.boto3_raw_data["SecurityGroups"]
        )

    SourceDestCheck = field("SourceDestCheck")

    @cached_property
    def IpV6Addresses(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceIpV6AddressDetail.make_many(
            self.boto3_raw_data["IpV6Addresses"]
        )

    @cached_property
    def PrivateIpAddresses(self):  # pragma: no cover
        return AwsEc2NetworkInterfacePrivateIpAddressDetail.make_many(
            self.boto3_raw_data["PrivateIpAddresses"]
        )

    PublicDnsName = field("PublicDnsName")
    PublicIp = field("PublicIp")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkInterfaceDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkInterfaceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupIpPermissionOutput:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupIpPermissionOutputTypeDef" = (
        dataclasses.field()
    )

    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @cached_property
    def UserIdGroupPairs(self):  # pragma: no cover
        return AwsEc2SecurityGroupUserIdGroupPair.make_many(
            self.boto3_raw_data["UserIdGroupPairs"]
        )

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpRange.make_many(self.boto3_raw_data["IpRanges"])

    @cached_property
    def Ipv6Ranges(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpv6Range.make_many(self.boto3_raw_data["Ipv6Ranges"])

    @cached_property
    def PrefixListIds(self):  # pragma: no cover
        return AwsEc2SecurityGroupPrefixListId.make_many(
            self.boto3_raw_data["PrefixListIds"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2SecurityGroupIpPermissionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupIpPermissionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupIpPermission:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupIpPermissionTypeDef" = (
        dataclasses.field()
    )

    IpProtocol = field("IpProtocol")
    FromPort = field("FromPort")
    ToPort = field("ToPort")

    @cached_property
    def UserIdGroupPairs(self):  # pragma: no cover
        return AwsEc2SecurityGroupUserIdGroupPair.make_many(
            self.boto3_raw_data["UserIdGroupPairs"]
        )

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpRange.make_many(self.boto3_raw_data["IpRanges"])

    @cached_property
    def Ipv6Ranges(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpv6Range.make_many(self.boto3_raw_data["Ipv6Ranges"])

    @cached_property
    def PrefixListIds(self):  # pragma: no cover
        return AwsEc2SecurityGroupPrefixListId.make_many(
            self.boto3_raw_data["PrefixListIds"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupIpPermissionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupIpPermissionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SubnetDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2SubnetDetailsOutputTypeDef" = dataclasses.field()

    AssignIpv6AddressOnCreation = field("AssignIpv6AddressOnCreation")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    AvailableIpAddressCount = field("AvailableIpAddressCount")
    CidrBlock = field("CidrBlock")
    DefaultForAz = field("DefaultForAz")
    MapPublicIpOnLaunch = field("MapPublicIpOnLaunch")
    OwnerId = field("OwnerId")
    State = field("State")
    SubnetArn = field("SubnetArn")
    SubnetId = field("SubnetId")
    VpcId = field("VpcId")

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return Ipv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2SubnetDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SubnetDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SubnetDetails:
    boto3_raw_data: "type_defs.AwsEc2SubnetDetailsTypeDef" = dataclasses.field()

    AssignIpv6AddressOnCreation = field("AssignIpv6AddressOnCreation")
    AvailabilityZone = field("AvailabilityZone")
    AvailabilityZoneId = field("AvailabilityZoneId")
    AvailableIpAddressCount = field("AvailableIpAddressCount")
    CidrBlock = field("CidrBlock")
    DefaultForAz = field("DefaultForAz")
    MapPublicIpOnLaunch = field("MapPublicIpOnLaunch")
    OwnerId = field("OwnerId")
    State = field("State")
    SubnetArn = field("SubnetArn")
    SubnetId = field("SubnetId")
    VpcId = field("VpcId")

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return Ipv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2SubnetDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SubnetDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VolumeDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VolumeDetailsOutputTypeDef" = dataclasses.field()

    CreateTime = field("CreateTime")
    DeviceName = field("DeviceName")
    Encrypted = field("Encrypted")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    Status = field("Status")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def Attachments(self):  # pragma: no cover
        return AwsEc2VolumeAttachment.make_many(self.boto3_raw_data["Attachments"])

    VolumeId = field("VolumeId")
    VolumeType = field("VolumeType")
    VolumeScanStatus = field("VolumeScanStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VolumeDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VolumeDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VolumeDetails:
    boto3_raw_data: "type_defs.AwsEc2VolumeDetailsTypeDef" = dataclasses.field()

    CreateTime = field("CreateTime")
    DeviceName = field("DeviceName")
    Encrypted = field("Encrypted")
    Size = field("Size")
    SnapshotId = field("SnapshotId")
    Status = field("Status")
    KmsKeyId = field("KmsKeyId")

    @cached_property
    def Attachments(self):  # pragma: no cover
        return AwsEc2VolumeAttachment.make_many(self.boto3_raw_data["Attachments"])

    VolumeId = field("VolumeId")
    VolumeType = field("VolumeType")
    VolumeScanStatus = field("VolumeScanStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VolumeDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VolumeDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VpcDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def CidrBlockAssociationSet(self):  # pragma: no cover
        return CidrBlockAssociation.make_many(
            self.boto3_raw_data["CidrBlockAssociationSet"]
        )

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return Ipv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    DhcpOptionsId = field("DhcpOptionsId")
    State = field("State")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VpcDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcDetailsTypeDef" = dataclasses.field()

    @cached_property
    def CidrBlockAssociationSet(self):  # pragma: no cover
        return CidrBlockAssociation.make_many(
            self.boto3_raw_data["CidrBlockAssociationSet"]
        )

    @cached_property
    def Ipv6CidrBlockAssociationSet(self):  # pragma: no cover
        return Ipv6CidrBlockAssociation.make_many(
            self.boto3_raw_data["Ipv6CidrBlockAssociationSet"]
        )

    DhcpOptionsId = field("DhcpOptionsId")
    State = field("State")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VpcDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcEndpointServiceDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VpcEndpointServiceDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AcceptanceRequired = field("AcceptanceRequired")
    AvailabilityZones = field("AvailabilityZones")
    BaseEndpointDnsNames = field("BaseEndpointDnsNames")
    ManagesVpcEndpoints = field("ManagesVpcEndpoints")
    GatewayLoadBalancerArns = field("GatewayLoadBalancerArns")
    NetworkLoadBalancerArns = field("NetworkLoadBalancerArns")
    PrivateDnsName = field("PrivateDnsName")
    ServiceId = field("ServiceId")
    ServiceName = field("ServiceName")
    ServiceState = field("ServiceState")

    @cached_property
    def ServiceType(self):  # pragma: no cover
        return AwsEc2VpcEndpointServiceServiceTypeDetails.make_many(
            self.boto3_raw_data["ServiceType"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcEndpointServiceDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcEndpointServiceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcEndpointServiceDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcEndpointServiceDetailsTypeDef" = (
        dataclasses.field()
    )

    AcceptanceRequired = field("AcceptanceRequired")
    AvailabilityZones = field("AvailabilityZones")
    BaseEndpointDnsNames = field("BaseEndpointDnsNames")
    ManagesVpcEndpoints = field("ManagesVpcEndpoints")
    GatewayLoadBalancerArns = field("GatewayLoadBalancerArns")
    NetworkLoadBalancerArns = field("NetworkLoadBalancerArns")
    PrivateDnsName = field("PrivateDnsName")
    ServiceId = field("ServiceId")
    ServiceName = field("ServiceName")
    ServiceState = field("ServiceState")

    @cached_property
    def ServiceType(self):  # pragma: no cover
        return AwsEc2VpcEndpointServiceServiceTypeDetails.make_many(
            self.boto3_raw_data["ServiceType"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2VpcEndpointServiceDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcEndpointServiceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcPeeringConnectionVpcInfoDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsOutputTypeDef"
    ) = dataclasses.field()

    CidrBlock = field("CidrBlock")

    @cached_property
    def CidrBlockSet(self):  # pragma: no cover
        return VpcInfoCidrBlockSetDetails.make_many(self.boto3_raw_data["CidrBlockSet"])

    @cached_property
    def Ipv6CidrBlockSet(self):  # pragma: no cover
        return VpcInfoIpv6CidrBlockSetDetails.make_many(
            self.boto3_raw_data["Ipv6CidrBlockSet"]
        )

    OwnerId = field("OwnerId")

    @cached_property
    def PeeringOptions(self):  # pragma: no cover
        return VpcInfoPeeringOptionsDetails.make_one(
            self.boto3_raw_data["PeeringOptions"]
        )

    Region = field("Region")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcPeeringConnectionVpcInfoDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsTypeDef" = (
        dataclasses.field()
    )

    CidrBlock = field("CidrBlock")

    @cached_property
    def CidrBlockSet(self):  # pragma: no cover
        return VpcInfoCidrBlockSetDetails.make_many(self.boto3_raw_data["CidrBlockSet"])

    @cached_property
    def Ipv6CidrBlockSet(self):  # pragma: no cover
        return VpcInfoIpv6CidrBlockSetDetails.make_many(
            self.boto3_raw_data["Ipv6CidrBlockSet"]
        )

    OwnerId = field("OwnerId")

    @cached_property
    def PeeringOptions(self):  # pragma: no cover
        return VpcInfoPeeringOptionsDetails.make_one(
            self.boto3_raw_data["PeeringOptions"]
        )

    Region = field("Region")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcPeeringConnectionVpcInfoDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionOptionsDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionOptionsDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    StaticRoutesOnly = field("StaticRoutesOnly")

    @cached_property
    def TunnelOptions(self):  # pragma: no cover
        return AwsEc2VpnConnectionOptionsTunnelOptionsDetailsOutput.make_many(
            self.boto3_raw_data["TunnelOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpnConnectionOptionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionOptionsDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcrRepositoryDetails:
    boto3_raw_data: "type_defs.AwsEcrRepositoryDetailsTypeDef" = dataclasses.field()

    Arn = field("Arn")

    @cached_property
    def ImageScanningConfiguration(self):  # pragma: no cover
        return AwsEcrRepositoryImageScanningConfigurationDetails.make_one(
            self.boto3_raw_data["ImageScanningConfiguration"]
        )

    ImageTagMutability = field("ImageTagMutability")

    @cached_property
    def LifecyclePolicy(self):  # pragma: no cover
        return AwsEcrRepositoryLifecyclePolicyDetails.make_one(
            self.boto3_raw_data["LifecyclePolicy"]
        )

    RepositoryName = field("RepositoryName")
    RepositoryPolicyText = field("RepositoryPolicyText")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcrRepositoryDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcrRepositoryDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterConfigurationExecuteCommandConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    KmsKeyId = field("KmsKeyId")

    @cached_property
    def LogConfiguration(self):  # pragma: no cover
        return AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails.make_one(
            self.boto3_raw_data["LogConfiguration"]
        )

    Logging = field("Logging")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsClusterConfigurationExecuteCommandConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsContainerDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsContainerDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    Image = field("Image")

    @cached_property
    def MountPoints(self):  # pragma: no cover
        return AwsMountPoint.make_many(self.boto3_raw_data["MountPoints"])

    Privileged = field("Privileged")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsContainerDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsContainerDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsContainerDetails:
    boto3_raw_data: "type_defs.AwsEcsContainerDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Image = field("Image")

    @cached_property
    def MountPoints(self):  # pragma: no cover
        return AwsMountPoint.make_many(self.boto3_raw_data["MountPoints"])

    Privileged = field("Privileged")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsContainerDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsContainerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceDeploymentConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceDeploymentConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DeploymentCircuitBreaker(self):  # pragma: no cover
        return AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails.make_one(
            self.boto3_raw_data["DeploymentCircuitBreaker"]
        )

    MaximumPercent = field("MaximumPercent")
    MinimumHealthyPercent = field("MinimumHealthyPercent")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceDeploymentConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceDeploymentConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceNetworkConfigurationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEcsServiceNetworkConfigurationDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AwsVpcConfiguration(self):  # pragma: no cover
        return (
            AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetailsOutput.make_one(
                self.boto3_raw_data["AwsVpcConfiguration"]
            )
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceNetworkConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsServiceNetworkConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsOutputTypeDef" = (dataclasses.field())

    @cached_property
    def Capabilities(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetailsOutput.make_one(
            self.boto3_raw_data["Capabilities"]
        )

    @cached_property
    def Devices(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetailsOutput.make_many(
            self.boto3_raw_data["Devices"]
        )

    InitProcessEnabled = field("InitProcessEnabled")
    MaxSwap = field("MaxSwap")
    SharedMemorySize = field("SharedMemorySize")
    Swappiness = field("Swappiness")

    @cached_property
    def Tmpfs(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetailsOutput.make_many(
            self.boto3_raw_data["Tmpfs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsOutputTypeDef" = (dataclasses.field())

    LogDriver = field("LogDriver")
    Options = field("Options")

    @cached_property
    def SecretOptions(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails.make_many(
            self.boto3_raw_data["SecretOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsTypeDef" = (dataclasses.field())

    LogDriver = field("LogDriver")
    Options = field("Options")

    @cached_property
    def SecretOptions(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails.make_many(
            self.boto3_raw_data["SecretOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionProxyConfigurationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsOutputTypeDef"
    ) = dataclasses.field()

    ContainerName = field("ContainerName")

    @cached_property
    def ProxyConfigurationProperties(self):  # pragma: no cover
        return AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails.make_many(
            self.boto3_raw_data["ProxyConfigurationProperties"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionProxyConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    ContainerName = field("ContainerName")

    @cached_property
    def ProxyConfigurationProperties(self):  # pragma: no cover
        return AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails.make_many(
            self.boto3_raw_data["ProxyConfigurationProperties"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionProxyConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AuthorizationConfig(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails.make_one(
            self.boto3_raw_data["AuthorizationConfig"]
        )

    FilesystemId = field("FilesystemId")
    RootDirectory = field("RootDirectory")
    TransitEncryption = field("TransitEncryption")
    TransitEncryptionPort = field("TransitEncryptionPort")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskVolumeDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskVolumeDetailsTypeDef" = dataclasses.field()

    Name = field("Name")

    @cached_property
    def Host(self):  # pragma: no cover
        return AwsEcsTaskVolumeHostDetails.make_one(self.boto3_raw_data["Host"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsTaskVolumeDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskVolumeDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointRootDirectoryDetails:
    boto3_raw_data: "type_defs.AwsEfsAccessPointRootDirectoryDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CreationInfo(self):  # pragma: no cover
        return AwsEfsAccessPointRootDirectoryCreationInfoDetails.make_one(
            self.boto3_raw_data["CreationInfo"]
        )

    Path = field("Path")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEfsAccessPointRootDirectoryDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEfsAccessPointRootDirectoryDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterLoggingDetailsOutput:
    boto3_raw_data: "type_defs.AwsEksClusterLoggingDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClusterLogging(self):  # pragma: no cover
        return AwsEksClusterLoggingClusterLoggingDetailsOutput.make_many(
            self.boto3_raw_data["ClusterLogging"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEksClusterLoggingDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterLoggingDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticBeanstalkEnvironmentDetailsOutput:
    boto3_raw_data: "type_defs.AwsElasticBeanstalkEnvironmentDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ApplicationName = field("ApplicationName")
    Cname = field("Cname")
    DateCreated = field("DateCreated")
    DateUpdated = field("DateUpdated")
    Description = field("Description")
    EndpointUrl = field("EndpointUrl")
    EnvironmentArn = field("EnvironmentArn")
    EnvironmentId = field("EnvironmentId")

    @cached_property
    def EnvironmentLinks(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentEnvironmentLink.make_many(
            self.boto3_raw_data["EnvironmentLinks"]
        )

    EnvironmentName = field("EnvironmentName")

    @cached_property
    def OptionSettings(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentOptionSetting.make_many(
            self.boto3_raw_data["OptionSettings"]
        )

    PlatformArn = field("PlatformArn")
    SolutionStackName = field("SolutionStackName")
    Status = field("Status")

    @cached_property
    def Tier(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentTier.make_one(self.boto3_raw_data["Tier"])

    VersionLabel = field("VersionLabel")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticBeanstalkEnvironmentDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticBeanstalkEnvironmentDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticBeanstalkEnvironmentDetails:
    boto3_raw_data: "type_defs.AwsElasticBeanstalkEnvironmentDetailsTypeDef" = (
        dataclasses.field()
    )

    ApplicationName = field("ApplicationName")
    Cname = field("Cname")
    DateCreated = field("DateCreated")
    DateUpdated = field("DateUpdated")
    Description = field("Description")
    EndpointUrl = field("EndpointUrl")
    EnvironmentArn = field("EnvironmentArn")
    EnvironmentId = field("EnvironmentId")

    @cached_property
    def EnvironmentLinks(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentEnvironmentLink.make_many(
            self.boto3_raw_data["EnvironmentLinks"]
        )

    EnvironmentName = field("EnvironmentName")

    @cached_property
    def OptionSettings(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentOptionSetting.make_many(
            self.boto3_raw_data["OptionSettings"]
        )

    PlatformArn = field("PlatformArn")
    SolutionStackName = field("SolutionStackName")
    Status = field("Status")

    @cached_property
    def Tier(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentTier.make_one(self.boto3_raw_data["Tier"])

    VersionLabel = field("VersionLabel")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticBeanstalkEnvironmentDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticBeanstalkEnvironmentDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainElasticsearchClusterConfigDetails:
    boto3_raw_data: (
        "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigDetailsTypeDef"
    ) = dataclasses.field()

    DedicatedMasterCount = field("DedicatedMasterCount")
    DedicatedMasterEnabled = field("DedicatedMasterEnabled")
    DedicatedMasterType = field("DedicatedMasterType")
    InstanceCount = field("InstanceCount")
    InstanceType = field("InstanceType")

    @cached_property
    def ZoneAwarenessConfig(self):  # pragma: no cover
        return AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails.make_one(
            self.boto3_raw_data["ZoneAwarenessConfig"]
        )

    ZoneAwarenessEnabled = field("ZoneAwarenessEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsElasticsearchDomainElasticsearchClusterConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainLogPublishingOptions:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainLogPublishingOptionsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def IndexSlowLogs(self):  # pragma: no cover
        return AwsElasticsearchDomainLogPublishingOptionsLogConfig.make_one(
            self.boto3_raw_data["IndexSlowLogs"]
        )

    @cached_property
    def SearchSlowLogs(self):  # pragma: no cover
        return AwsElasticsearchDomainLogPublishingOptionsLogConfig.make_one(
            self.boto3_raw_data["SearchSlowLogs"]
        )

    @cached_property
    def AuditLogs(self):  # pragma: no cover
        return AwsElasticsearchDomainLogPublishingOptionsLogConfig.make_one(
            self.boto3_raw_data["AuditLogs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainLogPublishingOptionsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainLogPublishingOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerPoliciesOutput:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerPoliciesOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AppCookieStickinessPolicies(self):  # pragma: no cover
        return AwsElbAppCookieStickinessPolicy.make_many(
            self.boto3_raw_data["AppCookieStickinessPolicies"]
        )

    @cached_property
    def LbCookieStickinessPolicies(self):  # pragma: no cover
        return AwsElbLbCookieStickinessPolicy.make_many(
            self.boto3_raw_data["LbCookieStickinessPolicies"]
        )

    OtherPolicies = field("OtherPolicies")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerPoliciesOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerPoliciesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerPolicies:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerPoliciesTypeDef" = dataclasses.field()

    @cached_property
    def AppCookieStickinessPolicies(self):  # pragma: no cover
        return AwsElbAppCookieStickinessPolicy.make_many(
            self.boto3_raw_data["AppCookieStickinessPolicies"]
        )

    @cached_property
    def LbCookieStickinessPolicies(self):  # pragma: no cover
        return AwsElbLbCookieStickinessPolicy.make_many(
            self.boto3_raw_data["LbCookieStickinessPolicies"]
        )

    OtherPolicies = field("OtherPolicies")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerPoliciesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerPoliciesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerAttributesOutput:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerAttributesOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccessLog(self):  # pragma: no cover
        return AwsElbLoadBalancerAccessLog.make_one(self.boto3_raw_data["AccessLog"])

    @cached_property
    def ConnectionDraining(self):  # pragma: no cover
        return AwsElbLoadBalancerConnectionDraining.make_one(
            self.boto3_raw_data["ConnectionDraining"]
        )

    @cached_property
    def ConnectionSettings(self):  # pragma: no cover
        return AwsElbLoadBalancerConnectionSettings.make_one(
            self.boto3_raw_data["ConnectionSettings"]
        )

    @cached_property
    def CrossZoneLoadBalancing(self):  # pragma: no cover
        return AwsElbLoadBalancerCrossZoneLoadBalancing.make_one(
            self.boto3_raw_data["CrossZoneLoadBalancing"]
        )

    @cached_property
    def AdditionalAttributes(self):  # pragma: no cover
        return AwsElbLoadBalancerAdditionalAttribute.make_many(
            self.boto3_raw_data["AdditionalAttributes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerAttributesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerAttributesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerAttributes:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerAttributesTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccessLog(self):  # pragma: no cover
        return AwsElbLoadBalancerAccessLog.make_one(self.boto3_raw_data["AccessLog"])

    @cached_property
    def ConnectionDraining(self):  # pragma: no cover
        return AwsElbLoadBalancerConnectionDraining.make_one(
            self.boto3_raw_data["ConnectionDraining"]
        )

    @cached_property
    def ConnectionSettings(self):  # pragma: no cover
        return AwsElbLoadBalancerConnectionSettings.make_one(
            self.boto3_raw_data["ConnectionSettings"]
        )

    @cached_property
    def CrossZoneLoadBalancing(self):  # pragma: no cover
        return AwsElbLoadBalancerCrossZoneLoadBalancing.make_one(
            self.boto3_raw_data["CrossZoneLoadBalancing"]
        )

    @cached_property
    def AdditionalAttributes(self):  # pragma: no cover
        return AwsElbLoadBalancerAdditionalAttribute.make_many(
            self.boto3_raw_data["AdditionalAttributes"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerAttributesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerListenerDescriptionOutput:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerListenerDescriptionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Listener(self):  # pragma: no cover
        return AwsElbLoadBalancerListener.make_one(self.boto3_raw_data["Listener"])

    PolicyNames = field("PolicyNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerListenerDescriptionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerListenerDescriptionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerListenerDescription:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerListenerDescriptionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Listener(self):  # pragma: no cover
        return AwsElbLoadBalancerListener.make_one(self.boto3_raw_data["Listener"])

    PolicyNames = field("PolicyNames")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbLoadBalancerListenerDescriptionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerListenerDescriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbv2LoadBalancerDetailsOutput:
    boto3_raw_data: "type_defs.AwsElbv2LoadBalancerDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AvailabilityZones(self):  # pragma: no cover
        return AvailabilityZone.make_many(self.boto3_raw_data["AvailabilityZones"])

    CanonicalHostedZoneId = field("CanonicalHostedZoneId")
    CreatedTime = field("CreatedTime")
    DNSName = field("DNSName")
    IpAddressType = field("IpAddressType")
    Scheme = field("Scheme")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def State(self):  # pragma: no cover
        return LoadBalancerState.make_one(self.boto3_raw_data["State"])

    Type = field("Type")
    VpcId = field("VpcId")

    @cached_property
    def LoadBalancerAttributes(self):  # pragma: no cover
        return AwsElbv2LoadBalancerAttribute.make_many(
            self.boto3_raw_data["LoadBalancerAttributes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElbv2LoadBalancerDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbv2LoadBalancerDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbv2LoadBalancerDetails:
    boto3_raw_data: "type_defs.AwsElbv2LoadBalancerDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AvailabilityZones(self):  # pragma: no cover
        return AvailabilityZone.make_many(self.boto3_raw_data["AvailabilityZones"])

    CanonicalHostedZoneId = field("CanonicalHostedZoneId")
    CreatedTime = field("CreatedTime")
    DNSName = field("DNSName")
    IpAddressType = field("IpAddressType")
    Scheme = field("Scheme")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def State(self):  # pragma: no cover
        return LoadBalancerState.make_one(self.boto3_raw_data["State"])

    Type = field("Type")
    VpcId = field("VpcId")

    @cached_property
    def LoadBalancerAttributes(self):  # pragma: no cover
        return AwsElbv2LoadBalancerAttribute.make_many(
            self.boto3_raw_data["LoadBalancerAttributes"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbv2LoadBalancerDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbv2LoadBalancerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointRoutingConfigFailoverConfigDetails:
    boto3_raw_data: (
        "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Primary(self):  # pragma: no cover
        return AwsEventsEndpointRoutingConfigFailoverConfigPrimaryDetails.make_one(
            self.boto3_raw_data["Primary"]
        )

    @cached_property
    def Secondary(self):  # pragma: no cover
        return AwsEventsEndpointRoutingConfigFailoverConfigSecondaryDetails.make_one(
            self.boto3_raw_data["Secondary"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEventsEndpointRoutingConfigFailoverConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesKubernetesDetails:
    boto3_raw_data: (
        "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AuditLogs(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesKubernetesAuditLogsDetails.make_one(
            self.boto3_raw_data["AuditLogs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesKubernetesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsDetailsTypeDef" = (dataclasses.field())

    @cached_property
    def EbsVolumes(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesDetails.make_one(
            self.boto3_raw_data["EbsVolumes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamAccessKeySessionContext:
    boto3_raw_data: "type_defs.AwsIamAccessKeySessionContextTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Attributes(self):  # pragma: no cover
        return AwsIamAccessKeySessionContextAttributes.make_one(
            self.boto3_raw_data["Attributes"]
        )

    @cached_property
    def SessionIssuer(self):  # pragma: no cover
        return AwsIamAccessKeySessionContextSessionIssuer.make_one(
            self.boto3_raw_data["SessionIssuer"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsIamAccessKeySessionContextTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamAccessKeySessionContextTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsIamGroupDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")
    GroupId = field("GroupId")
    GroupName = field("GroupName")

    @cached_property
    def GroupPolicyList(self):  # pragma: no cover
        return AwsIamGroupPolicy.make_many(self.boto3_raw_data["GroupPolicyList"])

    Path = field("Path")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamGroupDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamGroupDetails:
    boto3_raw_data: "type_defs.AwsIamGroupDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")
    GroupId = field("GroupId")
    GroupName = field("GroupName")

    @cached_property
    def GroupPolicyList(self):  # pragma: no cover
        return AwsIamGroupPolicy.make_many(self.boto3_raw_data["GroupPolicyList"])

    Path = field("Path")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamInstanceProfileOutput:
    boto3_raw_data: "type_defs.AwsIamInstanceProfileOutputTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CreateDate = field("CreateDate")
    InstanceProfileId = field("InstanceProfileId")
    InstanceProfileName = field("InstanceProfileName")
    Path = field("Path")

    @cached_property
    def Roles(self):  # pragma: no cover
        return AwsIamInstanceProfileRole.make_many(self.boto3_raw_data["Roles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamInstanceProfileOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamInstanceProfileOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamInstanceProfile:
    boto3_raw_data: "type_defs.AwsIamInstanceProfileTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CreateDate = field("CreateDate")
    InstanceProfileId = field("InstanceProfileId")
    InstanceProfileName = field("InstanceProfileName")
    Path = field("Path")

    @cached_property
    def Roles(self):  # pragma: no cover
        return AwsIamInstanceProfileRole.make_many(self.boto3_raw_data["Roles"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamInstanceProfileTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamInstanceProfileTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamPolicyDetailsOutput:
    boto3_raw_data: "type_defs.AwsIamPolicyDetailsOutputTypeDef" = dataclasses.field()

    AttachmentCount = field("AttachmentCount")
    CreateDate = field("CreateDate")
    DefaultVersionId = field("DefaultVersionId")
    Description = field("Description")
    IsAttachable = field("IsAttachable")
    Path = field("Path")
    PermissionsBoundaryUsageCount = field("PermissionsBoundaryUsageCount")
    PolicyId = field("PolicyId")
    PolicyName = field("PolicyName")

    @cached_property
    def PolicyVersionList(self):  # pragma: no cover
        return AwsIamPolicyVersion.make_many(self.boto3_raw_data["PolicyVersionList"])

    UpdateDate = field("UpdateDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamPolicyDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamPolicyDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamPolicyDetails:
    boto3_raw_data: "type_defs.AwsIamPolicyDetailsTypeDef" = dataclasses.field()

    AttachmentCount = field("AttachmentCount")
    CreateDate = field("CreateDate")
    DefaultVersionId = field("DefaultVersionId")
    Description = field("Description")
    IsAttachable = field("IsAttachable")
    Path = field("Path")
    PermissionsBoundaryUsageCount = field("PermissionsBoundaryUsageCount")
    PolicyId = field("PolicyId")
    PolicyName = field("PolicyName")

    @cached_property
    def PolicyVersionList(self):  # pragma: no cover
        return AwsIamPolicyVersion.make_many(self.boto3_raw_data["PolicyVersionList"])

    UpdateDate = field("UpdateDate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamPolicyDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamPolicyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamUserDetailsOutput:
    boto3_raw_data: "type_defs.AwsIamUserDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")
    GroupList = field("GroupList")
    Path = field("Path")

    @cached_property
    def PermissionsBoundary(self):  # pragma: no cover
        return AwsIamPermissionsBoundary.make_one(
            self.boto3_raw_data["PermissionsBoundary"]
        )

    UserId = field("UserId")
    UserName = field("UserName")

    @cached_property
    def UserPolicyList(self):  # pragma: no cover
        return AwsIamUserPolicy.make_many(self.boto3_raw_data["UserPolicyList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamUserDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamUserDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamUserDetails:
    boto3_raw_data: "type_defs.AwsIamUserDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")
    GroupList = field("GroupList")
    Path = field("Path")

    @cached_property
    def PermissionsBoundary(self):  # pragma: no cover
        return AwsIamPermissionsBoundary.make_one(
            self.boto3_raw_data["PermissionsBoundary"]
        )

    UserId = field("UserId")
    UserName = field("UserName")

    @cached_property
    def UserPolicyList(self):  # pragma: no cover
        return AwsIamUserPolicy.make_many(self.boto3_raw_data["UserPolicyList"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsIamUserDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamUserDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsKinesisStreamDetails:
    boto3_raw_data: "type_defs.AwsKinesisStreamDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Arn = field("Arn")

    @cached_property
    def StreamEncryption(self):  # pragma: no cover
        return AwsKinesisStreamStreamEncryptionDetails.make_one(
            self.boto3_raw_data["StreamEncryption"]
        )

    ShardCount = field("ShardCount")
    RetentionPeriodHours = field("RetentionPeriodHours")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsKinesisStreamDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsKinesisStreamDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionEnvironmentOutput:
    boto3_raw_data: "type_defs.AwsLambdaFunctionEnvironmentOutputTypeDef" = (
        dataclasses.field()
    )

    Variables = field("Variables")

    @cached_property
    def Error(self):  # pragma: no cover
        return AwsLambdaFunctionEnvironmentError.make_one(self.boto3_raw_data["Error"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsLambdaFunctionEnvironmentOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionEnvironmentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionEnvironment:
    boto3_raw_data: "type_defs.AwsLambdaFunctionEnvironmentTypeDef" = (
        dataclasses.field()
    )

    Variables = field("Variables")

    @cached_property
    def Error(self):  # pragma: no cover
        return AwsLambdaFunctionEnvironmentError.make_one(self.boto3_raw_data["Error"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionEnvironmentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionEnvironmentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationSaslDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Iam(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationSaslIamDetails.make_one(
            self.boto3_raw_data["Iam"]
        )

    @cached_property
    def Scram(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationSaslScramDetails.make_one(
            self.boto3_raw_data["Scram"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationSaslDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoEncryptionInfoDetails:
    boto3_raw_data: "type_defs.AwsMskClusterClusterInfoEncryptionInfoDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EncryptionInTransit(self):  # pragma: no cover
        return (
            AwsMskClusterClusterInfoEncryptionInfoEncryptionInTransitDetails.make_one(
                self.boto3_raw_data["EncryptionInTransit"]
            )
        )

    @cached_property
    def EncryptionAtRest(self):  # pragma: no cover
        return AwsMskClusterClusterInfoEncryptionInfoEncryptionAtRestDetails.make_one(
            self.boto3_raw_data["EncryptionAtRest"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoEncryptionInfoDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsMskClusterClusterInfoEncryptionInfoDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallFirewallDetailsOutput:
    boto3_raw_data: "type_defs.AwsNetworkFirewallFirewallDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DeleteProtection = field("DeleteProtection")
    Description = field("Description")
    FirewallArn = field("FirewallArn")
    FirewallId = field("FirewallId")
    FirewallName = field("FirewallName")
    FirewallPolicyArn = field("FirewallPolicyArn")
    FirewallPolicyChangeProtection = field("FirewallPolicyChangeProtection")
    SubnetChangeProtection = field("SubnetChangeProtection")

    @cached_property
    def SubnetMappings(self):  # pragma: no cover
        return AwsNetworkFirewallFirewallSubnetMappingsDetails.make_many(
            self.boto3_raw_data["SubnetMappings"]
        )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallFirewallDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallFirewallDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallFirewallDetails:
    boto3_raw_data: "type_defs.AwsNetworkFirewallFirewallDetailsTypeDef" = (
        dataclasses.field()
    )

    DeleteProtection = field("DeleteProtection")
    Description = field("Description")
    FirewallArn = field("FirewallArn")
    FirewallId = field("FirewallId")
    FirewallName = field("FirewallName")
    FirewallPolicyArn = field("FirewallPolicyArn")
    FirewallPolicyChangeProtection = field("FirewallPolicyChangeProtection")
    SubnetChangeProtection = field("SubnetChangeProtection")

    @cached_property
    def SubnetMappings(self):  # pragma: no cover
        return AwsNetworkFirewallFirewallSubnetMappingsDetails.make_many(
            self.boto3_raw_data["SubnetMappings"]
        )

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallFirewallDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallFirewallDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetailsTypeDef"
    ) = dataclasses.field()

    Enabled = field("Enabled")
    InternalUserDatabaseEnabled = field("InternalUserDatabaseEnabled")

    @cached_property
    def MasterUserOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainMasterUserOptionsDetails.make_one(
            self.boto3_raw_data["MasterUserOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainClusterConfigDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainClusterConfigDetailsTypeDef"
    ) = dataclasses.field()

    InstanceCount = field("InstanceCount")
    WarmEnabled = field("WarmEnabled")
    WarmCount = field("WarmCount")
    DedicatedMasterEnabled = field("DedicatedMasterEnabled")

    @cached_property
    def ZoneAwarenessConfig(self):  # pragma: no cover
        return (
            AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails.make_one(
                self.boto3_raw_data["ZoneAwarenessConfig"]
            )
        )

    DedicatedMasterCount = field("DedicatedMasterCount")
    InstanceType = field("InstanceType")
    WarmType = field("WarmType")
    ZoneAwarenessEnabled = field("ZoneAwarenessEnabled")
    DedicatedMasterType = field("DedicatedMasterType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainClusterConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainClusterConfigDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainLogPublishingOptionsDetails:
    boto3_raw_data: (
        "type_defs.AwsOpenSearchServiceDomainLogPublishingOptionsDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def IndexSlowLogs(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainLogPublishingOption.make_one(
            self.boto3_raw_data["IndexSlowLogs"]
        )

    @cached_property
    def SearchSlowLogs(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainLogPublishingOption.make_one(
            self.boto3_raw_data["SearchSlowLogs"]
        )

    @cached_property
    def AuditLogs(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainLogPublishingOption.make_one(
            self.boto3_raw_data["AuditLogs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainLogPublishingOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsOpenSearchServiceDomainLogPublishingOptionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsDbClusterDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AllocatedStorage = field("AllocatedStorage")
    AvailabilityZones = field("AvailabilityZones")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    DatabaseName = field("DatabaseName")
    Status = field("Status")
    Endpoint = field("Endpoint")
    ReaderEndpoint = field("ReaderEndpoint")
    CustomEndpoints = field("CustomEndpoints")
    MultiAz = field("MultiAz")
    Engine = field("Engine")
    EngineVersion = field("EngineVersion")
    Port = field("Port")
    MasterUsername = field("MasterUsername")
    PreferredBackupWindow = field("PreferredBackupWindow")
    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    ReadReplicaIdentifiers = field("ReadReplicaIdentifiers")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRdsDbInstanceVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    HostedZoneId = field("HostedZoneId")
    StorageEncrypted = field("StorageEncrypted")
    KmsKeyId = field("KmsKeyId")
    DbClusterResourceId = field("DbClusterResourceId")

    @cached_property
    def AssociatedRoles(self):  # pragma: no cover
        return AwsRdsDbClusterAssociatedRole.make_many(
            self.boto3_raw_data["AssociatedRoles"]
        )

    ClusterCreateTime = field("ClusterCreateTime")
    EnabledCloudWatchLogsExports = field("EnabledCloudWatchLogsExports")
    EngineMode = field("EngineMode")
    DeletionProtection = field("DeletionProtection")
    HttpEndpointEnabled = field("HttpEndpointEnabled")
    ActivityStreamStatus = field("ActivityStreamStatus")
    CopyTagsToSnapshot = field("CopyTagsToSnapshot")
    CrossAccountClone = field("CrossAccountClone")

    @cached_property
    def DomainMemberships(self):  # pragma: no cover
        return AwsRdsDbDomainMembership.make_many(
            self.boto3_raw_data["DomainMemberships"]
        )

    DbClusterParameterGroup = field("DbClusterParameterGroup")
    DbSubnetGroup = field("DbSubnetGroup")

    @cached_property
    def DbClusterOptionGroupMemberships(self):  # pragma: no cover
        return AwsRdsDbClusterOptionGroupMembership.make_many(
            self.boto3_raw_data["DbClusterOptionGroupMemberships"]
        )

    DbClusterIdentifier = field("DbClusterIdentifier")

    @cached_property
    def DbClusterMembers(self):  # pragma: no cover
        return AwsRdsDbClusterMember.make_many(self.boto3_raw_data["DbClusterMembers"])

    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbClusterDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterDetails:
    boto3_raw_data: "type_defs.AwsRdsDbClusterDetailsTypeDef" = dataclasses.field()

    AllocatedStorage = field("AllocatedStorage")
    AvailabilityZones = field("AvailabilityZones")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    DatabaseName = field("DatabaseName")
    Status = field("Status")
    Endpoint = field("Endpoint")
    ReaderEndpoint = field("ReaderEndpoint")
    CustomEndpoints = field("CustomEndpoints")
    MultiAz = field("MultiAz")
    Engine = field("Engine")
    EngineVersion = field("EngineVersion")
    Port = field("Port")
    MasterUsername = field("MasterUsername")
    PreferredBackupWindow = field("PreferredBackupWindow")
    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    ReadReplicaIdentifiers = field("ReadReplicaIdentifiers")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRdsDbInstanceVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    HostedZoneId = field("HostedZoneId")
    StorageEncrypted = field("StorageEncrypted")
    KmsKeyId = field("KmsKeyId")
    DbClusterResourceId = field("DbClusterResourceId")

    @cached_property
    def AssociatedRoles(self):  # pragma: no cover
        return AwsRdsDbClusterAssociatedRole.make_many(
            self.boto3_raw_data["AssociatedRoles"]
        )

    ClusterCreateTime = field("ClusterCreateTime")
    EnabledCloudWatchLogsExports = field("EnabledCloudWatchLogsExports")
    EngineMode = field("EngineMode")
    DeletionProtection = field("DeletionProtection")
    HttpEndpointEnabled = field("HttpEndpointEnabled")
    ActivityStreamStatus = field("ActivityStreamStatus")
    CopyTagsToSnapshot = field("CopyTagsToSnapshot")
    CrossAccountClone = field("CrossAccountClone")

    @cached_property
    def DomainMemberships(self):  # pragma: no cover
        return AwsRdsDbDomainMembership.make_many(
            self.boto3_raw_data["DomainMemberships"]
        )

    DbClusterParameterGroup = field("DbClusterParameterGroup")
    DbSubnetGroup = field("DbSubnetGroup")

    @cached_property
    def DbClusterOptionGroupMemberships(self):  # pragma: no cover
        return AwsRdsDbClusterOptionGroupMembership.make_many(
            self.boto3_raw_data["DbClusterOptionGroupMemberships"]
        )

    DbClusterIdentifier = field("DbClusterIdentifier")

    @cached_property
    def DbClusterMembers(self):  # pragma: no cover
        return AwsRdsDbClusterMember.make_many(self.boto3_raw_data["DbClusterMembers"])

    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbClusterDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterSnapshotDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsDbClusterSnapshotDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SnapshotCreateTime = field("SnapshotCreateTime")
    Engine = field("Engine")
    AllocatedStorage = field("AllocatedStorage")
    Status = field("Status")
    Port = field("Port")
    VpcId = field("VpcId")
    ClusterCreateTime = field("ClusterCreateTime")
    MasterUsername = field("MasterUsername")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    SnapshotType = field("SnapshotType")
    PercentProgress = field("PercentProgress")
    StorageEncrypted = field("StorageEncrypted")
    KmsKeyId = field("KmsKeyId")
    DbClusterIdentifier = field("DbClusterIdentifier")
    DbClusterSnapshotIdentifier = field("DbClusterSnapshotIdentifier")
    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")

    @cached_property
    def DbClusterSnapshotAttributes(self):  # pragma: no cover
        return AwsRdsDbClusterSnapshotDbClusterSnapshotAttributeOutput.make_many(
            self.boto3_raw_data["DbClusterSnapshotAttributes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbClusterSnapshotDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterSnapshotDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSnapshotDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsDbSnapshotDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DbSnapshotIdentifier = field("DbSnapshotIdentifier")
    DbInstanceIdentifier = field("DbInstanceIdentifier")
    SnapshotCreateTime = field("SnapshotCreateTime")
    Engine = field("Engine")
    AllocatedStorage = field("AllocatedStorage")
    Status = field("Status")
    Port = field("Port")
    AvailabilityZone = field("AvailabilityZone")
    VpcId = field("VpcId")
    InstanceCreateTime = field("InstanceCreateTime")
    MasterUsername = field("MasterUsername")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    SnapshotType = field("SnapshotType")
    Iops = field("Iops")
    OptionGroupName = field("OptionGroupName")
    PercentProgress = field("PercentProgress")
    SourceRegion = field("SourceRegion")
    SourceDbSnapshotIdentifier = field("SourceDbSnapshotIdentifier")
    StorageType = field("StorageType")
    TdeCredentialArn = field("TdeCredentialArn")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    Timezone = field("Timezone")
    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    DbiResourceId = field("DbiResourceId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbSnapshotDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSnapshotDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSnapshotDetails:
    boto3_raw_data: "type_defs.AwsRdsDbSnapshotDetailsTypeDef" = dataclasses.field()

    DbSnapshotIdentifier = field("DbSnapshotIdentifier")
    DbInstanceIdentifier = field("DbInstanceIdentifier")
    SnapshotCreateTime = field("SnapshotCreateTime")
    Engine = field("Engine")
    AllocatedStorage = field("AllocatedStorage")
    Status = field("Status")
    Port = field("Port")
    AvailabilityZone = field("AvailabilityZone")
    VpcId = field("VpcId")
    InstanceCreateTime = field("InstanceCreateTime")
    MasterUsername = field("MasterUsername")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    SnapshotType = field("SnapshotType")
    Iops = field("Iops")
    OptionGroupName = field("OptionGroupName")
    PercentProgress = field("PercentProgress")
    SourceRegion = field("SourceRegion")
    SourceDbSnapshotIdentifier = field("SourceDbSnapshotIdentifier")
    StorageType = field("StorageType")
    TdeCredentialArn = field("TdeCredentialArn")
    Encrypted = field("Encrypted")
    KmsKeyId = field("KmsKeyId")
    Timezone = field("Timezone")
    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    DbiResourceId = field("DbiResourceId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSnapshotDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSnapshotDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbPendingModifiedValuesOutput:
    boto3_raw_data: "type_defs.AwsRdsDbPendingModifiedValuesOutputTypeDef" = (
        dataclasses.field()
    )

    DbInstanceClass = field("DbInstanceClass")
    AllocatedStorage = field("AllocatedStorage")
    MasterUserPassword = field("MasterUserPassword")
    Port = field("Port")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    MultiAZ = field("MultiAZ")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    Iops = field("Iops")
    DbInstanceIdentifier = field("DbInstanceIdentifier")
    StorageType = field("StorageType")
    CaCertificateIdentifier = field("CaCertificateIdentifier")
    DbSubnetGroupName = field("DbSubnetGroupName")

    @cached_property
    def PendingCloudWatchLogsExports(self):  # pragma: no cover
        return AwsRdsPendingCloudWatchLogsExportsOutput.make_one(
            self.boto3_raw_data["PendingCloudWatchLogsExports"]
        )

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbPendingModifiedValuesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbPendingModifiedValuesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSecurityGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsDbSecurityGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DbSecurityGroupArn = field("DbSecurityGroupArn")
    DbSecurityGroupDescription = field("DbSecurityGroupDescription")
    DbSecurityGroupName = field("DbSecurityGroupName")

    @cached_property
    def Ec2SecurityGroups(self):  # pragma: no cover
        return AwsRdsDbSecurityGroupEc2SecurityGroup.make_many(
            self.boto3_raw_data["Ec2SecurityGroups"]
        )

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return AwsRdsDbSecurityGroupIpRange.make_many(self.boto3_raw_data["IpRanges"])

    OwnerId = field("OwnerId")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRdsDbSecurityGroupDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSecurityGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSecurityGroupDetails:
    boto3_raw_data: "type_defs.AwsRdsDbSecurityGroupDetailsTypeDef" = (
        dataclasses.field()
    )

    DbSecurityGroupArn = field("DbSecurityGroupArn")
    DbSecurityGroupDescription = field("DbSecurityGroupDescription")
    DbSecurityGroupName = field("DbSecurityGroupName")

    @cached_property
    def Ec2SecurityGroups(self):  # pragma: no cover
        return AwsRdsDbSecurityGroupEc2SecurityGroup.make_many(
            self.boto3_raw_data["Ec2SecurityGroups"]
        )

    @cached_property
    def IpRanges(self):  # pragma: no cover
        return AwsRdsDbSecurityGroupIpRange.make_many(self.boto3_raw_data["IpRanges"])

    OwnerId = field("OwnerId")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSecurityGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSecurityGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSubnetGroupSubnet:
    boto3_raw_data: "type_defs.AwsRdsDbSubnetGroupSubnetTypeDef" = dataclasses.field()

    SubnetIdentifier = field("SubnetIdentifier")

    @cached_property
    def SubnetAvailabilityZone(self):  # pragma: no cover
        return AwsRdsDbSubnetGroupSubnetAvailabilityZone.make_one(
            self.boto3_raw_data["SubnetAvailabilityZone"]
        )

    SubnetStatus = field("SubnetStatus")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSubnetGroupSubnetTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSubnetGroupSubnetTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterParameterGroupOutput:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterParameterGroupOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClusterParameterStatusList(self):  # pragma: no cover
        return AwsRedshiftClusterClusterParameterStatus.make_many(
            self.boto3_raw_data["ClusterParameterStatusList"]
        )

    ParameterApplyStatus = field("ParameterApplyStatus")
    ParameterGroupName = field("ParameterGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterClusterParameterGroupOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterParameterGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterClusterParameterGroup:
    boto3_raw_data: "type_defs.AwsRedshiftClusterClusterParameterGroupTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ClusterParameterStatusList(self):  # pragma: no cover
        return AwsRedshiftClusterClusterParameterStatus.make_many(
            self.boto3_raw_data["ClusterParameterStatusList"]
        )

    ParameterApplyStatus = field("ParameterApplyStatus")
    ParameterGroupName = field("ParameterGroupName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRedshiftClusterClusterParameterGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterClusterParameterGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53HostedZoneObjectDetails:
    boto3_raw_data: "type_defs.AwsRoute53HostedZoneObjectDetailsTypeDef" = (
        dataclasses.field()
    )

    Id = field("Id")
    Name = field("Name")

    @cached_property
    def Config(self):  # pragma: no cover
        return AwsRoute53HostedZoneConfigDetails.make_one(self.boto3_raw_data["Config"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRoute53HostedZoneObjectDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53HostedZoneObjectDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53QueryLoggingConfigDetails:
    boto3_raw_data: "type_defs.AwsRoute53QueryLoggingConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CloudWatchLogsLogGroupArn(self):  # pragma: no cover
        return CloudWatchLogsLogGroupArnConfigDetails.make_one(
            self.boto3_raw_data["CloudWatchLogsLogGroupArn"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRoute53QueryLoggingConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53QueryLoggingConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3AccessPointDetails:
    boto3_raw_data: "type_defs.AwsS3AccessPointDetailsTypeDef" = dataclasses.field()

    AccessPointArn = field("AccessPointArn")
    Alias = field("Alias")
    Bucket = field("Bucket")
    BucketAccountId = field("BucketAccountId")
    Name = field("Name")
    NetworkOrigin = field("NetworkOrigin")

    @cached_property
    def PublicAccessBlockConfiguration(self):  # pragma: no cover
        return AwsS3AccountPublicAccessBlockDetails.make_one(
            self.boto3_raw_data["PublicAccessBlockConfiguration"]
        )

    @cached_property
    def VpcConfiguration(self):  # pragma: no cover
        return AwsS3AccessPointVpcConfigurationDetails.make_one(
            self.boto3_raw_data["VpcConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsS3AccessPointDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3AccessPointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetailsTypeDef" = (dataclasses.field())

    Prefix = field("Prefix")

    @cached_property
    def Tag(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails.make_one(
            self.boto3_raw_data["Tag"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationS3KeyFilterOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def FilterRules(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationS3KeyFilterRule.make_many(
            self.boto3_raw_data["FilterRules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationS3KeyFilter:
    boto3_raw_data: (
        "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterTypeDef"
    ) = dataclasses.field()

    @cached_property
    def FilterRules(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationS3KeyFilterRule.make_many(
            self.boto3_raw_data["FilterRules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketNotificationConfigurationS3KeyFilterTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketObjectLockConfigurationRuleDetails:
    boto3_raw_data: "type_defs.AwsS3BucketObjectLockConfigurationRuleDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DefaultRetention(self):  # pragma: no cover
        return AwsS3BucketObjectLockConfigurationRuleDefaultRetentionDetails.make_one(
            self.boto3_raw_data["DefaultRetention"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketObjectLockConfigurationRuleDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketObjectLockConfigurationRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketServerSideEncryptionRule:
    boto3_raw_data: "type_defs.AwsS3BucketServerSideEncryptionRuleTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ApplyServerSideEncryptionByDefault(self):  # pragma: no cover
        return AwsS3BucketServerSideEncryptionByDefault.make_one(
            self.boto3_raw_data["ApplyServerSideEncryptionByDefault"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketServerSideEncryptionRuleTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketServerSideEncryptionRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfigurationRoutingRule:
    boto3_raw_data: "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Condition(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRoutingRuleCondition.make_one(
            self.boto3_raw_data["Condition"]
        )

    @cached_property
    def Redirect(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRoutingRuleRedirect.make_one(
            self.boto3_raw_data["Redirect"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketWebsiteConfigurationRoutingRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSageMakerNotebookInstanceDetailsOutput:
    boto3_raw_data: "type_defs.AwsSageMakerNotebookInstanceDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AcceleratorTypes = field("AcceleratorTypes")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")
    DefaultCodeRepository = field("DefaultCodeRepository")
    DirectInternetAccess = field("DirectInternetAccess")
    FailureReason = field("FailureReason")

    @cached_property
    def InstanceMetadataServiceConfiguration(self):  # pragma: no cover
        return AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetails.make_one(
            self.boto3_raw_data["InstanceMetadataServiceConfiguration"]
        )

    InstanceType = field("InstanceType")
    KmsKeyId = field("KmsKeyId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NotebookInstanceArn = field("NotebookInstanceArn")
    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")
    NotebookInstanceName = field("NotebookInstanceName")
    NotebookInstanceStatus = field("NotebookInstanceStatus")
    PlatformIdentifier = field("PlatformIdentifier")
    RoleArn = field("RoleArn")
    RootAccess = field("RootAccess")
    SecurityGroups = field("SecurityGroups")
    SubnetId = field("SubnetId")
    Url = field("Url")
    VolumeSizeInGB = field("VolumeSizeInGB")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsSageMakerNotebookInstanceDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSageMakerNotebookInstanceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSageMakerNotebookInstanceDetails:
    boto3_raw_data: "type_defs.AwsSageMakerNotebookInstanceDetailsTypeDef" = (
        dataclasses.field()
    )

    AcceleratorTypes = field("AcceleratorTypes")
    AdditionalCodeRepositories = field("AdditionalCodeRepositories")
    DefaultCodeRepository = field("DefaultCodeRepository")
    DirectInternetAccess = field("DirectInternetAccess")
    FailureReason = field("FailureReason")

    @cached_property
    def InstanceMetadataServiceConfiguration(self):  # pragma: no cover
        return AwsSageMakerNotebookInstanceMetadataServiceConfigurationDetails.make_one(
            self.boto3_raw_data["InstanceMetadataServiceConfiguration"]
        )

    InstanceType = field("InstanceType")
    KmsKeyId = field("KmsKeyId")
    NetworkInterfaceId = field("NetworkInterfaceId")
    NotebookInstanceArn = field("NotebookInstanceArn")
    NotebookInstanceLifecycleConfigName = field("NotebookInstanceLifecycleConfigName")
    NotebookInstanceName = field("NotebookInstanceName")
    NotebookInstanceStatus = field("NotebookInstanceStatus")
    PlatformIdentifier = field("PlatformIdentifier")
    RoleArn = field("RoleArn")
    RootAccess = field("RootAccess")
    SecurityGroups = field("SecurityGroups")
    SubnetId = field("SubnetId")
    Url = field("Url")
    VolumeSizeInGB = field("VolumeSizeInGB")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsSageMakerNotebookInstanceDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSageMakerNotebookInstanceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecretsManagerSecretDetails:
    boto3_raw_data: "type_defs.AwsSecretsManagerSecretDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def RotationRules(self):  # pragma: no cover
        return AwsSecretsManagerSecretRotationRules.make_one(
            self.boto3_raw_data["RotationRules"]
        )

    RotationOccurredWithinFrequency = field("RotationOccurredWithinFrequency")
    KmsKeyId = field("KmsKeyId")
    RotationEnabled = field("RotationEnabled")
    RotationLambdaArn = field("RotationLambdaArn")
    Deleted = field("Deleted")
    Name = field("Name")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsSecretsManagerSecretDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecretsManagerSecretDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfBooleanFilter:
    boto3_raw_data: "type_defs.OcsfBooleanFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return BooleanFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OcsfBooleanFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfBooleanFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsRequest:
    boto3_raw_data: "type_defs.BatchUpdateFindingsRequestTypeDef" = dataclasses.field()

    @cached_property
    def FindingIdentifiers(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_many(
            self.boto3_raw_data["FindingIdentifiers"]
        )

    @cached_property
    def Note(self):  # pragma: no cover
        return NoteUpdate.make_one(self.boto3_raw_data["Note"])

    @cached_property
    def Severity(self):  # pragma: no cover
        return SeverityUpdate.make_one(self.boto3_raw_data["Severity"])

    VerificationState = field("VerificationState")
    Confidence = field("Confidence")
    Criticality = field("Criticality")
    Types = field("Types")
    UserDefinedFields = field("UserDefinedFields")

    @cached_property
    def Workflow(self):  # pragma: no cover
        return WorkflowUpdate.make_one(self.boto3_raw_data["Workflow"])

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchUpdateFindingsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsUnprocessedFinding:
    boto3_raw_data: "type_defs.BatchUpdateFindingsUnprocessedFindingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_one(
            self.boto3_raw_data["FindingIdentifier"]
        )

    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateFindingsUnprocessedFindingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsUnprocessedFindingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSnsTopicDetailsOutput:
    boto3_raw_data: "type_defs.AwsSnsTopicDetailsOutputTypeDef" = dataclasses.field()

    KmsMasterKeyId = field("KmsMasterKeyId")

    @cached_property
    def Subscription(self):  # pragma: no cover
        return AwsSnsTopicSubscription.make_many(self.boto3_raw_data["Subscription"])

    TopicName = field("TopicName")
    Owner = field("Owner")
    SqsSuccessFeedbackRoleArn = field("SqsSuccessFeedbackRoleArn")
    SqsFailureFeedbackRoleArn = field("SqsFailureFeedbackRoleArn")
    ApplicationSuccessFeedbackRoleArn = field("ApplicationSuccessFeedbackRoleArn")
    FirehoseSuccessFeedbackRoleArn = field("FirehoseSuccessFeedbackRoleArn")
    FirehoseFailureFeedbackRoleArn = field("FirehoseFailureFeedbackRoleArn")
    HttpSuccessFeedbackRoleArn = field("HttpSuccessFeedbackRoleArn")
    HttpFailureFeedbackRoleArn = field("HttpFailureFeedbackRoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSnsTopicDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSnsTopicDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSnsTopicDetails:
    boto3_raw_data: "type_defs.AwsSnsTopicDetailsTypeDef" = dataclasses.field()

    KmsMasterKeyId = field("KmsMasterKeyId")

    @cached_property
    def Subscription(self):  # pragma: no cover
        return AwsSnsTopicSubscription.make_many(self.boto3_raw_data["Subscription"])

    TopicName = field("TopicName")
    Owner = field("Owner")
    SqsSuccessFeedbackRoleArn = field("SqsSuccessFeedbackRoleArn")
    SqsFailureFeedbackRoleArn = field("SqsFailureFeedbackRoleArn")
    ApplicationSuccessFeedbackRoleArn = field("ApplicationSuccessFeedbackRoleArn")
    FirehoseSuccessFeedbackRoleArn = field("FirehoseSuccessFeedbackRoleArn")
    FirehoseFailureFeedbackRoleArn = field("FirehoseFailureFeedbackRoleArn")
    HttpSuccessFeedbackRoleArn = field("HttpSuccessFeedbackRoleArn")
    HttpFailureFeedbackRoleArn = field("HttpFailureFeedbackRoleArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSnsTopicDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSnsTopicDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSsmPatch:
    boto3_raw_data: "type_defs.AwsSsmPatchTypeDef" = dataclasses.field()

    @cached_property
    def ComplianceSummary(self):  # pragma: no cover
        return AwsSsmComplianceSummary.make_one(
            self.boto3_raw_data["ComplianceSummary"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsSsmPatchTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.AwsSsmPatchTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetails:
    boto3_raw_data: "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetailsTypeDef" = (dataclasses.field())

    @cached_property
    def CloudWatchLogsLogGroup(self):  # pragma: no cover
        return AwsStepFunctionStateMachineLoggingConfigurationDestinationsCloudWatchLogsLogGroupDetails.make_one(
            self.boto3_raw_data["CloudWatchLogsLogGroup"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRateBasedRuleDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRateBasedRuleDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RateKey = field("RateKey")
    RateLimit = field("RateLimit")
    RuleId = field("RuleId")

    @cached_property
    def MatchPredicates(self):  # pragma: no cover
        return AwsWafRateBasedRuleMatchPredicate.make_many(
            self.boto3_raw_data["MatchPredicates"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafRateBasedRuleDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRateBasedRuleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRateBasedRuleDetails:
    boto3_raw_data: "type_defs.AwsWafRateBasedRuleDetailsTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Name = field("Name")
    RateKey = field("RateKey")
    RateLimit = field("RateLimit")
    RuleId = field("RuleId")

    @cached_property
    def MatchPredicates(self):  # pragma: no cover
        return AwsWafRateBasedRuleMatchPredicate.make_many(
            self.boto3_raw_data["MatchPredicates"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRateBasedRuleDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRateBasedRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRateBasedRuleDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRegionalRateBasedRuleDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RateKey = field("RateKey")
    RateLimit = field("RateLimit")
    RuleId = field("RuleId")

    @cached_property
    def MatchPredicates(self):  # pragma: no cover
        return AwsWafRegionalRateBasedRuleMatchPredicate.make_many(
            self.boto3_raw_data["MatchPredicates"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRateBasedRuleDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRateBasedRuleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRateBasedRuleDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRateBasedRuleDetailsTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RateKey = field("RateKey")
    RateLimit = field("RateLimit")
    RuleId = field("RuleId")

    @cached_property
    def MatchPredicates(self):  # pragma: no cover
        return AwsWafRegionalRateBasedRuleMatchPredicate.make_many(
            self.boto3_raw_data["MatchPredicates"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRateBasedRuleDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRateBasedRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def PredicateList(self):  # pragma: no cover
        return AwsWafRegionalRulePredicateListDetails.make_many(
            self.boto3_raw_data["PredicateList"]
        )

    RuleId = field("RuleId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafRegionalRuleDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleDetailsTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def PredicateList(self):  # pragma: no cover
        return AwsWafRegionalRulePredicateListDetails.make_many(
            self.boto3_raw_data["PredicateList"]
        )

    RuleId = field("RuleId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRegionalRuleDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleGroupRulesDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleGroupRulesDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Action(self):  # pragma: no cover
        return AwsWafRegionalRuleGroupRulesActionDetails.make_one(
            self.boto3_raw_data["Action"]
        )

    Priority = field("Priority")
    RuleId = field("RuleId")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRuleGroupRulesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleGroupRulesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalWebAclRulesListDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalWebAclRulesListDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Action(self):  # pragma: no cover
        return AwsWafRegionalWebAclRulesListActionDetails.make_one(
            self.boto3_raw_data["Action"]
        )

    @cached_property
    def OverrideAction(self):  # pragma: no cover
        return AwsWafRegionalWebAclRulesListOverrideActionDetails.make_one(
            self.boto3_raw_data["OverrideAction"]
        )

    Priority = field("Priority")
    RuleId = field("RuleId")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalWebAclRulesListDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalWebAclRulesListDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRuleDetailsOutputTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def PredicateList(self):  # pragma: no cover
        return AwsWafRulePredicateListDetails.make_many(
            self.boto3_raw_data["PredicateList"]
        )

    RuleId = field("RuleId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRuleDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleDetails:
    boto3_raw_data: "type_defs.AwsWafRuleDetailsTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def PredicateList(self):  # pragma: no cover
        return AwsWafRulePredicateListDetails.make_many(
            self.boto3_raw_data["PredicateList"]
        )

    RuleId = field("RuleId")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsWafRuleDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleGroupRulesDetails:
    boto3_raw_data: "type_defs.AwsWafRuleGroupRulesDetailsTypeDef" = dataclasses.field()

    @cached_property
    def Action(self):  # pragma: no cover
        return AwsWafRuleGroupRulesActionDetails.make_one(self.boto3_raw_data["Action"])

    Priority = field("Priority")
    RuleId = field("RuleId")
    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRuleGroupRulesDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleGroupRulesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafWebAclRuleOutput:
    boto3_raw_data: "type_defs.AwsWafWebAclRuleOutputTypeDef" = dataclasses.field()

    @cached_property
    def Action(self):  # pragma: no cover
        return WafAction.make_one(self.boto3_raw_data["Action"])

    @cached_property
    def ExcludedRules(self):  # pragma: no cover
        return WafExcludedRule.make_many(self.boto3_raw_data["ExcludedRules"])

    @cached_property
    def OverrideAction(self):  # pragma: no cover
        return WafOverrideAction.make_one(self.boto3_raw_data["OverrideAction"])

    Priority = field("Priority")
    RuleId = field("RuleId")
    Type = field("Type")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafWebAclRuleOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafWebAclRuleOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafWebAclRule:
    boto3_raw_data: "type_defs.AwsWafWebAclRuleTypeDef" = dataclasses.field()

    @cached_property
    def Action(self):  # pragma: no cover
        return WafAction.make_one(self.boto3_raw_data["Action"])

    @cached_property
    def ExcludedRules(self):  # pragma: no cover
        return WafExcludedRule.make_many(self.boto3_raw_data["ExcludedRules"])

    @cached_property
    def OverrideAction(self):  # pragma: no cover
        return WafOverrideAction.make_one(self.boto3_raw_data["OverrideAction"])

    Priority = field("Priority")
    RuleId = field("RuleId")
    Type = field("Type")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsWafWebAclRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafWebAclRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2CustomRequestHandlingDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2CustomRequestHandlingDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InsertHeaders(self):  # pragma: no cover
        return AwsWafv2CustomHttpHeader.make_many(self.boto3_raw_data["InsertHeaders"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2CustomRequestHandlingDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2CustomRequestHandlingDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2CustomRequestHandlingDetails:
    boto3_raw_data: "type_defs.AwsWafv2CustomRequestHandlingDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def InsertHeaders(self):  # pragma: no cover
        return AwsWafv2CustomHttpHeader.make_many(self.boto3_raw_data["InsertHeaders"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2CustomRequestHandlingDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2CustomRequestHandlingDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2CustomResponseDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2CustomResponseDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    CustomResponseBodyKey = field("CustomResponseBodyKey")
    ResponseCode = field("ResponseCode")

    @cached_property
    def ResponseHeaders(self):  # pragma: no cover
        return AwsWafv2CustomHttpHeader.make_many(
            self.boto3_raw_data["ResponseHeaders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2CustomResponseDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2CustomResponseDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2CustomResponseDetails:
    boto3_raw_data: "type_defs.AwsWafv2CustomResponseDetailsTypeDef" = (
        dataclasses.field()
    )

    CustomResponseBodyKey = field("CustomResponseBodyKey")
    ResponseCode = field("ResponseCode")

    @cached_property
    def ResponseHeaders(self):  # pragma: no cover
        return AwsWafv2CustomHttpHeader.make_many(
            self.boto3_raw_data["ResponseHeaders"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2CustomResponseDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2CustomResponseDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclCaptchaConfigDetails:
    boto3_raw_data: "type_defs.AwsWafv2WebAclCaptchaConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ImmunityTimeProperty(self):  # pragma: no cover
        return AwsWafv2WebAclCaptchaConfigImmunityTimePropertyDetails.make_one(
            self.boto3_raw_data["ImmunityTimeProperty"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2WebAclCaptchaConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2WebAclCaptchaConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectorRegistrationsV2Response:
    boto3_raw_data: "type_defs.ConnectorRegistrationsV2ResponseTypeDef" = (
        dataclasses.field()
    )

    ConnectorArn = field("ConnectorArn")
    ConnectorId = field("ConnectorId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConnectorRegistrationsV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectorRegistrationsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateActionTargetResponse:
    boto3_raw_data: "type_defs.CreateActionTargetResponseTypeDef" = dataclasses.field()

    ActionTargetArn = field("ActionTargetArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateActionTargetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateActionTargetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAggregatorV2Response:
    boto3_raw_data: "type_defs.CreateAggregatorV2ResponseTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")
    AggregationRegion = field("AggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    LinkedRegions = field("LinkedRegions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAggregatorV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAggregatorV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutomationRuleResponse:
    boto3_raw_data: "type_defs.CreateAutomationRuleResponseTypeDef" = (
        dataclasses.field()
    )

    RuleArn = field("RuleArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutomationRuleResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutomationRuleResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutomationRuleV2Response:
    boto3_raw_data: "type_defs.CreateAutomationRuleV2ResponseTypeDef" = (
        dataclasses.field()
    )

    RuleArn = field("RuleArn")
    RuleId = field("RuleId")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateAutomationRuleV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutomationRuleV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateConnectorV2Response:
    boto3_raw_data: "type_defs.CreateConnectorV2ResponseTypeDef" = dataclasses.field()

    ConnectorArn = field("ConnectorArn")
    ConnectorId = field("ConnectorId")
    AuthUrl = field("AuthUrl")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateConnectorV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateConnectorV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateFindingAggregatorResponse:
    boto3_raw_data: "type_defs.CreateFindingAggregatorResponseTypeDef" = (
        dataclasses.field()
    )

    FindingAggregatorArn = field("FindingAggregatorArn")
    FindingAggregationRegion = field("FindingAggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    Regions = field("Regions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateFindingAggregatorResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateFindingAggregatorResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInsightResponse:
    boto3_raw_data: "type_defs.CreateInsightResponseTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateInsightResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInsightResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateTicketV2Response:
    boto3_raw_data: "type_defs.CreateTicketV2ResponseTypeDef" = dataclasses.field()

    TicketId = field("TicketId")
    TicketSrcUrl = field("TicketSrcUrl")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateTicketV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateTicketV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteActionTargetResponse:
    boto3_raw_data: "type_defs.DeleteActionTargetResponseTypeDef" = dataclasses.field()

    ActionTargetArn = field("ActionTargetArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteActionTargetResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteActionTargetResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInsightResponse:
    boto3_raw_data: "type_defs.DeleteInsightResponseTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteInsightResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInsightResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeActionTargetsResponse:
    boto3_raw_data: "type_defs.DescribeActionTargetsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActionTargets(self):  # pragma: no cover
        return ActionTarget.make_many(self.boto3_raw_data["ActionTargets"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeActionTargetsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeActionTargetsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeHubResponse:
    boto3_raw_data: "type_defs.DescribeHubResponseTypeDef" = dataclasses.field()

    HubArn = field("HubArn")
    SubscribedAt = field("SubscribedAt")
    AutoEnableControls = field("AutoEnableControls")
    ControlFindingGenerator = field("ControlFindingGenerator")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeHubResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeHubResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeSecurityHubV2Response:
    boto3_raw_data: "type_defs.DescribeSecurityHubV2ResponseTypeDef" = (
        dataclasses.field()
    )

    HubV2Arn = field("HubV2Arn")
    SubscribedAt = field("SubscribedAt")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeSecurityHubV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeSecurityHubV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableImportFindingsForProductResponse:
    boto3_raw_data: "type_defs.EnableImportFindingsForProductResponseTypeDef" = (
        dataclasses.field()
    )

    ProductSubscriptionArn = field("ProductSubscriptionArn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableImportFindingsForProductResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableImportFindingsForProductResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableOrganizationAdminAccountResponse:
    boto3_raw_data: "type_defs.EnableOrganizationAdminAccountResponseTypeDef" = (
        dataclasses.field()
    )

    AdminAccountId = field("AdminAccountId")
    Feature = field("Feature")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.EnableOrganizationAdminAccountResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableOrganizationAdminAccountResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class EnableSecurityHubV2Response:
    boto3_raw_data: "type_defs.EnableSecurityHubV2ResponseTypeDef" = dataclasses.field()

    HubV2Arn = field("HubV2Arn")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.EnableSecurityHubV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.EnableSecurityHubV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAggregatorV2Response:
    boto3_raw_data: "type_defs.GetAggregatorV2ResponseTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")
    AggregationRegion = field("AggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    LinkedRegions = field("LinkedRegions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetAggregatorV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAggregatorV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConfigurationPolicyAssociationResponse:
    boto3_raw_data: "type_defs.GetConfigurationPolicyAssociationResponseTypeDef" = (
        dataclasses.field()
    )

    ConfigurationPolicyId = field("ConfigurationPolicyId")
    TargetId = field("TargetId")
    TargetType = field("TargetType")
    AssociationType = field("AssociationType")
    UpdatedAt = field("UpdatedAt")
    AssociationStatus = field("AssociationStatus")
    AssociationStatusMessage = field("AssociationStatusMessage")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetConfigurationPolicyAssociationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConfigurationPolicyAssociationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingAggregatorResponse:
    boto3_raw_data: "type_defs.GetFindingAggregatorResponseTypeDef" = (
        dataclasses.field()
    )

    FindingAggregatorArn = field("FindingAggregatorArn")
    FindingAggregationRegion = field("FindingAggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    Regions = field("Regions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingAggregatorResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingAggregatorResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsV2Response:
    boto3_raw_data: "type_defs.GetFindingsV2ResponseTypeDef" = dataclasses.field()

    Findings = field("Findings")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInvitationsCountResponse:
    boto3_raw_data: "type_defs.GetInvitationsCountResponseTypeDef" = dataclasses.field()

    InvitationsCount = field("InvitationsCount")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInvitationsCountResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInvitationsCountResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAggregatorsV2Response:
    boto3_raw_data: "type_defs.ListAggregatorsV2ResponseTypeDef" = dataclasses.field()

    @cached_property
    def AggregatorsV2(self):  # pragma: no cover
        return AggregatorV2.make_many(self.boto3_raw_data["AggregatorsV2"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAggregatorsV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAggregatorsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutomationRulesResponse:
    boto3_raw_data: "type_defs.ListAutomationRulesResponseTypeDef" = dataclasses.field()

    @cached_property
    def AutomationRulesMetadata(self):  # pragma: no cover
        return AutomationRulesMetadata.make_many(
            self.boto3_raw_data["AutomationRulesMetadata"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListAutomationRulesResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutomationRulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEnabledProductsForImportResponse:
    boto3_raw_data: "type_defs.ListEnabledProductsForImportResponseTypeDef" = (
        dataclasses.field()
    )

    ProductSubscriptions = field("ProductSubscriptions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListEnabledProductsForImportResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEnabledProductsForImportResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOrganizationAdminAccountsResponse:
    boto3_raw_data: "type_defs.ListOrganizationAdminAccountsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AdminAccounts(self):  # pragma: no cover
        return AdminAccount.make_many(self.boto3_raw_data["AdminAccounts"])

    Feature = field("Feature")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListOrganizationAdminAccountsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOrganizationAdminAccountsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListTagsForResourceResponse:
    boto3_raw_data: "type_defs.ListTagsForResourceResponseTypeDef" = dataclasses.field()

    Tags = field("Tags")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListTagsForResourceResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListTagsForResourceResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartConfigurationPolicyAssociationResponse:
    boto3_raw_data: "type_defs.StartConfigurationPolicyAssociationResponseTypeDef" = (
        dataclasses.field()
    )

    ConfigurationPolicyId = field("ConfigurationPolicyId")
    TargetId = field("TargetId")
    TargetType = field("TargetType")
    AssociationType = field("AssociationType")
    UpdatedAt = field("UpdatedAt")
    AssociationStatus = field("AssociationStatus")
    AssociationStatusMessage = field("AssociationStatusMessage")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartConfigurationPolicyAssociationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartConfigurationPolicyAssociationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAggregatorV2Response:
    boto3_raw_data: "type_defs.UpdateAggregatorV2ResponseTypeDef" = dataclasses.field()

    AggregatorV2Arn = field("AggregatorV2Arn")
    AggregationRegion = field("AggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    LinkedRegions = field("LinkedRegions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateAggregatorV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAggregatorV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFindingAggregatorResponse:
    boto3_raw_data: "type_defs.UpdateFindingAggregatorResponseTypeDef" = (
        dataclasses.field()
    )

    FindingAggregatorArn = field("FindingAggregatorArn")
    FindingAggregationRegion = field("FindingAggregationRegion")
    RegionLinkingMode = field("RegionLinkingMode")
    Regions = field("Regions")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateFindingAggregatorResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFindingAggregatorResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDeleteAutomationRulesResponse:
    boto3_raw_data: "type_defs.BatchDeleteAutomationRulesResponseTypeDef" = (
        dataclasses.field()
    )

    ProcessedAutomationRules = field("ProcessedAutomationRules")

    @cached_property
    def UnprocessedAutomationRules(self):  # pragma: no cover
        return UnprocessedAutomationRule.make_many(
            self.boto3_raw_data["UnprocessedAutomationRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchDeleteAutomationRulesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDeleteAutomationRulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateAutomationRulesResponse:
    boto3_raw_data: "type_defs.BatchUpdateAutomationRulesResponseTypeDef" = (
        dataclasses.field()
    )

    ProcessedAutomationRules = field("ProcessedAutomationRules")

    @cached_property
    def UnprocessedAutomationRules(self):  # pragma: no cover
        return UnprocessedAutomationRule.make_many(
            self.boto3_raw_data["UnprocessedAutomationRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateAutomationRulesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateAutomationRulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchEnableStandardsRequest:
    boto3_raw_data: "type_defs.BatchEnableStandardsRequestTypeDef" = dataclasses.field()

    @cached_property
    def StandardsSubscriptionRequests(self):  # pragma: no cover
        return StandardsSubscriptionRequest.make_many(
            self.boto3_raw_data["StandardsSubscriptionRequests"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchEnableStandardsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchEnableStandardsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPolicyAssociationsResponse:
    boto3_raw_data: "type_defs.ListConfigurationPolicyAssociationsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConfigurationPolicyAssociationSummaries(self):  # pragma: no cover
        return ConfigurationPolicyAssociationSummary.make_many(
            self.boto3_raw_data["ConfigurationPolicyAssociationSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListConfigurationPolicyAssociationsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConfigurationPolicyAssociationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetStandardsControlAssociationsRequest:
    boto3_raw_data: "type_defs.BatchGetStandardsControlAssociationsRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsControlAssociationIds(self):  # pragma: no cover
        return StandardsControlAssociationId.make_many(
            self.boto3_raw_data["StandardsControlAssociationIds"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchGetStandardsControlAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetStandardsControlAssociationsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnprocessedStandardsControlAssociation:
    boto3_raw_data: "type_defs.UnprocessedStandardsControlAssociationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsControlAssociationId(self):  # pragma: no cover
        return StandardsControlAssociationId.make_one(
            self.boto3_raw_data["StandardsControlAssociationId"]
        )

    ErrorCode = field("ErrorCode")
    ErrorReason = field("ErrorReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnprocessedStandardsControlAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnprocessedStandardsControlAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchImportFindingsResponse:
    boto3_raw_data: "type_defs.BatchImportFindingsResponseTypeDef" = dataclasses.field()

    FailedCount = field("FailedCount")
    SuccessCount = field("SuccessCount")

    @cached_property
    def FailedFindings(self):  # pragma: no cover
        return ImportFindingsError.make_many(self.boto3_raw_data["FailedFindings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchImportFindingsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchImportFindingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsV2ProcessedFinding:
    boto3_raw_data: "type_defs.BatchUpdateFindingsV2ProcessedFindingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return OcsfFindingIdentifier.make_one(self.boto3_raw_data["FindingIdentifier"])

    MetadataUid = field("MetadataUid")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateFindingsV2ProcessedFindingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsV2ProcessedFindingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsV2Request:
    boto3_raw_data: "type_defs.BatchUpdateFindingsV2RequestTypeDef" = (
        dataclasses.field()
    )

    MetadataUids = field("MetadataUids")

    @cached_property
    def FindingIdentifiers(self):  # pragma: no cover
        return OcsfFindingIdentifier.make_many(
            self.boto3_raw_data["FindingIdentifiers"]
        )

    Comment = field("Comment")
    SeverityId = field("SeverityId")
    StatusId = field("StatusId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchUpdateFindingsV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsV2UnprocessedFinding:
    boto3_raw_data: "type_defs.BatchUpdateFindingsV2UnprocessedFindingTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return OcsfFindingIdentifier.make_one(self.boto3_raw_data["FindingIdentifier"])

    MetadataUid = field("MetadataUid")
    ErrorCode = field("ErrorCode")
    ErrorMessage = field("ErrorMessage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateFindingsV2UnprocessedFindingTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsV2UnprocessedFindingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateStandardsControlAssociationsRequest:
    boto3_raw_data: (
        "type_defs.BatchUpdateStandardsControlAssociationsRequestTypeDef"
    ) = dataclasses.field()

    @cached_property
    def StandardsControlAssociationUpdates(self):  # pragma: no cover
        return StandardsControlAssociationUpdate.make_many(
            self.boto3_raw_data["StandardsControlAssociationUpdates"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateStandardsControlAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BatchUpdateStandardsControlAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnprocessedStandardsControlAssociationUpdate:
    boto3_raw_data: "type_defs.UnprocessedStandardsControlAssociationUpdateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsControlAssociationUpdate(self):  # pragma: no cover
        return StandardsControlAssociationUpdate.make_one(
            self.boto3_raw_data["StandardsControlAssociationUpdate"]
        )

    ErrorCode = field("ErrorCode")
    ErrorReason = field("ErrorReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnprocessedStandardsControlAssociationUpdateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnprocessedStandardsControlAssociationUpdateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VulnerabilityCodeVulnerabilitiesOutput:
    boto3_raw_data: "type_defs.VulnerabilityCodeVulnerabilitiesOutputTypeDef" = (
        dataclasses.field()
    )

    Cwes = field("Cwes")

    @cached_property
    def FilePath(self):  # pragma: no cover
        return CodeVulnerabilitiesFilePath.make_one(self.boto3_raw_data["FilePath"])

    SourceArn = field("SourceArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.VulnerabilityCodeVulnerabilitiesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VulnerabilityCodeVulnerabilitiesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VulnerabilityCodeVulnerabilities:
    boto3_raw_data: "type_defs.VulnerabilityCodeVulnerabilitiesTypeDef" = (
        dataclasses.field()
    )

    Cwes = field("Cwes")

    @cached_property
    def FilePath(self):  # pragma: no cover
        return CodeVulnerabilitiesFilePath.make_one(self.boto3_raw_data["FilePath"])

    SourceArn = field("SourceArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.VulnerabilityCodeVulnerabilitiesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VulnerabilityCodeVulnerabilitiesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ComplianceOutput:
    boto3_raw_data: "type_defs.ComplianceOutputTypeDef" = dataclasses.field()

    Status = field("Status")
    RelatedRequirements = field("RelatedRequirements")

    @cached_property
    def StatusReasons(self):  # pragma: no cover
        return StatusReason.make_many(self.boto3_raw_data["StatusReasons"])

    SecurityControlId = field("SecurityControlId")

    @cached_property
    def AssociatedStandards(self):  # pragma: no cover
        return AssociatedStandard.make_many(self.boto3_raw_data["AssociatedStandards"])

    @cached_property
    def SecurityControlParameters(self):  # pragma: no cover
        return SecurityControlParameterOutput.make_many(
            self.boto3_raw_data["SecurityControlParameters"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ComplianceOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ComplianceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfigurationOptions:
    boto3_raw_data: "type_defs.ConfigurationOptionsTypeDef" = dataclasses.field()

    @cached_property
    def Integer(self):  # pragma: no cover
        return IntegerConfigurationOptions.make_one(self.boto3_raw_data["Integer"])

    @cached_property
    def IntegerList(self):  # pragma: no cover
        return IntegerListConfigurationOptions.make_one(
            self.boto3_raw_data["IntegerList"]
        )

    @cached_property
    def Double(self):  # pragma: no cover
        return DoubleConfigurationOptions.make_one(self.boto3_raw_data["Double"])

    @cached_property
    def String(self):  # pragma: no cover
        return StringConfigurationOptions.make_one(self.boto3_raw_data["String"])

    @cached_property
    def StringList(self):  # pragma: no cover
        return StringListConfigurationOptions.make_one(
            self.boto3_raw_data["StringList"]
        )

    @cached_property
    def Boolean(self):  # pragma: no cover
        return BooleanConfigurationOptions.make_one(self.boto3_raw_data["Boolean"])

    @cached_property
    def Enum(self):  # pragma: no cover
        return EnumConfigurationOptions.make_one(self.boto3_raw_data["Enum"])

    @cached_property
    def EnumList(self):  # pragma: no cover
        return EnumListConfigurationOptions.make_one(self.boto3_raw_data["EnumList"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ConfigurationOptionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfigurationOptionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConfigurationPolicyAssociation:
    boto3_raw_data: "type_defs.ConfigurationPolicyAssociationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Target(self):  # pragma: no cover
        return Target.make_one(self.boto3_raw_data["Target"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ConfigurationPolicyAssociationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConfigurationPolicyAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConfigurationPolicyAssociationRequest:
    boto3_raw_data: "type_defs.GetConfigurationPolicyAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Target(self):  # pragma: no cover
        return Target.make_one(self.boto3_raw_data["Target"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetConfigurationPolicyAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConfigurationPolicyAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartConfigurationPolicyAssociationRequest:
    boto3_raw_data: "type_defs.StartConfigurationPolicyAssociationRequestTypeDef" = (
        dataclasses.field()
    )

    ConfigurationPolicyIdentifier = field("ConfigurationPolicyIdentifier")

    @cached_property
    def Target(self):  # pragma: no cover
        return Target.make_one(self.boto3_raw_data["Target"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartConfigurationPolicyAssociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartConfigurationPolicyAssociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StartConfigurationPolicyDisassociationRequest:
    boto3_raw_data: "type_defs.StartConfigurationPolicyDisassociationRequestTypeDef" = (
        dataclasses.field()
    )

    ConfigurationPolicyIdentifier = field("ConfigurationPolicyIdentifier")

    @cached_property
    def Target(self):  # pragma: no cover
        return Target.make_one(self.boto3_raw_data["Target"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StartConfigurationPolicyDisassociationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StartConfigurationPolicyDisassociationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPoliciesResponse:
    boto3_raw_data: "type_defs.ListConfigurationPoliciesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConfigurationPolicySummaries(self):  # pragma: no cover
        return ConfigurationPolicySummary.make_many(
            self.boto3_raw_data["ConfigurationPolicySummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListConfigurationPoliciesResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConfigurationPoliciesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ConnectorSummary:
    boto3_raw_data: "type_defs.ConnectorSummaryTypeDef" = dataclasses.field()

    ConnectorId = field("ConnectorId")
    Name = field("Name")

    @cached_property
    def ProviderSummary(self):  # pragma: no cover
        return ProviderSummary.make_one(self.boto3_raw_data["ProviderSummary"])

    CreatedAt = field("CreatedAt")
    ConnectorArn = field("ConnectorArn")
    Description = field("Description")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ConnectorSummaryTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ConnectorSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerDetailsOutput:
    boto3_raw_data: "type_defs.ContainerDetailsOutputTypeDef" = dataclasses.field()

    ContainerRuntime = field("ContainerRuntime")
    Name = field("Name")
    ImageId = field("ImageId")
    ImageName = field("ImageName")
    LaunchedAt = field("LaunchedAt")

    @cached_property
    def VolumeMounts(self):  # pragma: no cover
        return VolumeMount.make_many(self.boto3_raw_data["VolumeMounts"])

    Privileged = field("Privileged")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ContainerDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContainerDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ContainerDetails:
    boto3_raw_data: "type_defs.ContainerDetailsTypeDef" = dataclasses.field()

    ContainerRuntime = field("ContainerRuntime")
    Name = field("Name")
    ImageId = field("ImageId")
    ImageName = field("ImageName")
    LaunchedAt = field("LaunchedAt")

    @cached_property
    def VolumeMounts(self):  # pragma: no cover
        return VolumeMount.make_many(self.boto3_raw_data["VolumeMounts"])

    Privileged = field("Privileged")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ContainerDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ContainerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateMembersResponse:
    boto3_raw_data: "type_defs.CreateMembersResponseTypeDef" = dataclasses.field()

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeclineInvitationsResponse:
    boto3_raw_data: "type_defs.DeclineInvitationsResponseTypeDef" = dataclasses.field()

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeclineInvitationsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeclineInvitationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteInvitationsResponse:
    boto3_raw_data: "type_defs.DeleteInvitationsResponseTypeDef" = dataclasses.field()

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteInvitationsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteInvitationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DeleteMembersResponse:
    boto3_raw_data: "type_defs.DeleteMembersResponseTypeDef" = dataclasses.field()

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DeleteMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DeleteMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InviteMembersResponse:
    boto3_raw_data: "type_defs.InviteMembersResponseTypeDef" = dataclasses.field()

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.InviteMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.InviteMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DateFilter:
    boto3_raw_data: "type_defs.DateFilterTypeDef" = dataclasses.field()

    Start = field("Start")
    End = field("End")

    @cached_property
    def DateRange(self):  # pragma: no cover
        return DateRange.make_one(self.boto3_raw_data["DateRange"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DateFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DateFilterTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeActionTargetsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeActionTargetsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ActionTargetArns = field("ActionTargetArns")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeActionTargetsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeActionTargetsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeProductsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    ProductArn = field("ProductArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeProductsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsV2RequestPaginate:
    boto3_raw_data: "type_defs.DescribeProductsV2RequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeProductsV2RequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsV2RequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsControlsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeStandardsControlsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    StandardsSubscriptionArn = field("StandardsSubscriptionArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStandardsControlsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsControlsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsRequestPaginate:
    boto3_raw_data: "type_defs.DescribeStandardsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DescribeStandardsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEnabledStandardsRequestPaginate:
    boto3_raw_data: "type_defs.GetEnabledStandardsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    StandardsSubscriptionArns = field("StandardsSubscriptionArns")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetEnabledStandardsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEnabledStandardsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInsightsRequestPaginate:
    boto3_raw_data: "type_defs.GetInsightsRequestPaginateTypeDef" = dataclasses.field()

    InsightArns = field("InsightArns")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInsightsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInsightsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAggregatorsV2RequestPaginate:
    boto3_raw_data: "type_defs.ListAggregatorsV2RequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAggregatorsV2RequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAggregatorsV2RequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPoliciesRequestPaginate:
    boto3_raw_data: "type_defs.ListConfigurationPoliciesRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListConfigurationPoliciesRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConfigurationPoliciesRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConfigurationPolicyAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListConfigurationPolicyAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return AssociationFilters.make_one(self.boto3_raw_data["Filters"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListConfigurationPolicyAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListConfigurationPolicyAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListEnabledProductsForImportRequestPaginate:
    boto3_raw_data: "type_defs.ListEnabledProductsForImportRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListEnabledProductsForImportRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListEnabledProductsForImportRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFindingAggregatorsRequestPaginate:
    boto3_raw_data: "type_defs.ListFindingAggregatorsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListFindingAggregatorsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFindingAggregatorsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInvitationsRequestPaginate:
    boto3_raw_data: "type_defs.ListInvitationsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListInvitationsRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInvitationsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMembersRequestPaginate:
    boto3_raw_data: "type_defs.ListMembersRequestPaginateTypeDef" = dataclasses.field()

    OnlyAssociated = field("OnlyAssociated")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListMembersRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMembersRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListOrganizationAdminAccountsRequestPaginate:
    boto3_raw_data: "type_defs.ListOrganizationAdminAccountsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    Feature = field("Feature")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListOrganizationAdminAccountsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListOrganizationAdminAccountsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSecurityControlDefinitionsRequestPaginate:
    boto3_raw_data: "type_defs.ListSecurityControlDefinitionsRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    StandardsArn = field("StandardsArn")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListSecurityControlDefinitionsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSecurityControlDefinitionsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStandardsControlAssociationsRequestPaginate:
    boto3_raw_data: (
        "type_defs.ListStandardsControlAssociationsRequestPaginateTypeDef"
    ) = dataclasses.field()

    SecurityControlId = field("SecurityControlId")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStandardsControlAssociationsRequestPaginateTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.ListStandardsControlAssociationsRequestPaginateTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeOrganizationConfigurationResponse:
    boto3_raw_data: "type_defs.DescribeOrganizationConfigurationResponseTypeDef" = (
        dataclasses.field()
    )

    AutoEnable = field("AutoEnable")
    MemberAccountLimitReached = field("MemberAccountLimitReached")
    AutoEnableStandards = field("AutoEnableStandards")

    @cached_property
    def OrganizationConfiguration(self):  # pragma: no cover
        return OrganizationConfiguration.make_one(
            self.boto3_raw_data["OrganizationConfiguration"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeOrganizationConfigurationResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeOrganizationConfigurationResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateOrganizationConfigurationRequest:
    boto3_raw_data: "type_defs.UpdateOrganizationConfigurationRequestTypeDef" = (
        dataclasses.field()
    )

    AutoEnable = field("AutoEnable")
    AutoEnableStandards = field("AutoEnableStandards")

    @cached_property
    def OrganizationConfiguration(self):  # pragma: no cover
        return OrganizationConfiguration.make_one(
            self.boto3_raw_data["OrganizationConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateOrganizationConfigurationRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateOrganizationConfigurationRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsResponse:
    boto3_raw_data: "type_defs.DescribeProductsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Products(self):  # pragma: no cover
        return Product.make_many(self.boto3_raw_data["Products"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProductsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeProductsV2Response:
    boto3_raw_data: "type_defs.DescribeProductsV2ResponseTypeDef" = dataclasses.field()

    @cached_property
    def ProductsV2(self):  # pragma: no cover
        return ProductV2.make_many(self.boto3_raw_data["ProductsV2"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeProductsV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeProductsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsControlsResponse:
    boto3_raw_data: "type_defs.DescribeStandardsControlsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Controls(self):  # pragma: no cover
        return StandardsControl.make_many(self.boto3_raw_data["Controls"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.DescribeStandardsControlsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsControlsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ThreatOutput:
    boto3_raw_data: "type_defs.ThreatOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Severity = field("Severity")
    ItemCount = field("ItemCount")

    @cached_property
    def FilePaths(self):  # pragma: no cover
        return FilePaths.make_many(self.boto3_raw_data["FilePaths"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThreatOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThreatOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Threat:
    boto3_raw_data: "type_defs.ThreatTypeDef" = dataclasses.field()

    Name = field("Name")
    Severity = field("Severity")
    ItemCount = field("ItemCount")

    @cached_property
    def FilePaths(self):  # pragma: no cover
        return FilePaths.make_many(self.boto3_raw_data["FilePaths"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ThreatTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ThreatTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListFindingAggregatorsResponse:
    boto3_raw_data: "type_defs.ListFindingAggregatorsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FindingAggregators(self):  # pragma: no cover
        return FindingAggregator.make_many(self.boto3_raw_data["FindingAggregators"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListFindingAggregatorsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListFindingAggregatorsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingHistoryRecord:
    boto3_raw_data: "type_defs.FindingHistoryRecordTypeDef" = dataclasses.field()

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_one(
            self.boto3_raw_data["FindingIdentifier"]
        )

    UpdateTime = field("UpdateTime")
    FindingCreated = field("FindingCreated")

    @cached_property
    def UpdateSource(self):  # pragma: no cover
        return FindingHistoryUpdateSource.make_one(self.boto3_raw_data["UpdateSource"])

    @cached_property
    def Updates(self):  # pragma: no cover
        return FindingHistoryUpdate.make_many(self.boto3_raw_data["Updates"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingHistoryRecordTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingHistoryRecordTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingProviderFieldsOutput:
    boto3_raw_data: "type_defs.FindingProviderFieldsOutputTypeDef" = dataclasses.field()

    Confidence = field("Confidence")
    Criticality = field("Criticality")

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @cached_property
    def Severity(self):  # pragma: no cover
        return FindingProviderSeverity.make_one(self.boto3_raw_data["Severity"])

    Types = field("Types")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingProviderFieldsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingProviderFieldsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FindingProviderFields:
    boto3_raw_data: "type_defs.FindingProviderFieldsTypeDef" = dataclasses.field()

    Confidence = field("Confidence")
    Criticality = field("Criticality")

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @cached_property
    def Severity(self):  # pragma: no cover
        return FindingProviderSeverity.make_one(self.boto3_raw_data["Severity"])

    Types = field("Types")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FindingProviderFieldsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FindingProviderFieldsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAdministratorAccountResponse:
    boto3_raw_data: "type_defs.GetAdministratorAccountResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Administrator(self):  # pragma: no cover
        return Invitation.make_one(self.boto3_raw_data["Administrator"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetAdministratorAccountResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAdministratorAccountResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetMasterAccountResponse:
    boto3_raw_data: "type_defs.GetMasterAccountResponseTypeDef" = dataclasses.field()

    @cached_property
    def Master(self):  # pragma: no cover
        return Invitation.make_one(self.boto3_raw_data["Master"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetMasterAccountResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetMasterAccountResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListInvitationsResponse:
    boto3_raw_data: "type_defs.ListInvitationsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Invitations(self):  # pragma: no cover
        return Invitation.make_many(self.boto3_raw_data["Invitations"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListInvitationsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListInvitationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingHistoryRequestPaginate:
    boto3_raw_data: "type_defs.GetFindingHistoryRequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_one(
            self.boto3_raw_data["FindingIdentifier"]
        )

    StartTime = field("StartTime")
    EndTime = field("EndTime")

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetFindingHistoryRequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingHistoryRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingHistoryRequest:
    boto3_raw_data: "type_defs.GetFindingHistoryRequestTypeDef" = dataclasses.field()

    @cached_property
    def FindingIdentifier(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_one(
            self.boto3_raw_data["FindingIdentifier"]
        )

    StartTime = field("StartTime")
    EndTime = field("EndTime")
    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingHistoryRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingHistoryRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetMembersResponse:
    boto3_raw_data: "type_defs.GetMembersResponseTypeDef" = dataclasses.field()

    @cached_property
    def Members(self):  # pragma: no cover
        return Member.make_many(self.boto3_raw_data["Members"])

    @cached_property
    def UnprocessedAccounts(self):  # pragma: no cover
        return Result.make_many(self.boto3_raw_data["UnprocessedAccounts"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListMembersResponse:
    boto3_raw_data: "type_defs.ListMembersResponseTypeDef" = dataclasses.field()

    @cached_property
    def Members(self):  # pragma: no cover
        return Member.make_many(self.boto3_raw_data["Members"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListMembersResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListMembersResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupByResult:
    boto3_raw_data: "type_defs.GroupByResultTypeDef" = dataclasses.field()

    GroupByField = field("GroupByField")

    @cached_property
    def GroupByValues(self):  # pragma: no cover
        return GroupByValue.make_many(self.boto3_raw_data["GroupByValues"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupByResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupByResultTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SignalOutput:
    boto3_raw_data: "type_defs.SignalOutputTypeDef" = dataclasses.field()

    Type = field("Type")
    Id = field("Id")
    Title = field("Title")
    ProductArn = field("ProductArn")
    ResourceIds = field("ResourceIds")

    @cached_property
    def SignalIndicators(self):  # pragma: no cover
        return IndicatorOutput.make_many(self.boto3_raw_data["SignalIndicators"])

    Name = field("Name")
    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    FirstSeenAt = field("FirstSeenAt")
    LastSeenAt = field("LastSeenAt")
    Severity = field("Severity")
    Count = field("Count")
    ActorIds = field("ActorIds")
    EndpointIds = field("EndpointIds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SignalOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SignalOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Signal:
    boto3_raw_data: "type_defs.SignalTypeDef" = dataclasses.field()

    Type = field("Type")
    Id = field("Id")
    Title = field("Title")
    ProductArn = field("ProductArn")
    ResourceIds = field("ResourceIds")

    @cached_property
    def SignalIndicators(self):  # pragma: no cover
        return Indicator.make_many(self.boto3_raw_data["SignalIndicators"])

    Name = field("Name")
    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    FirstSeenAt = field("FirstSeenAt")
    LastSeenAt = field("LastSeenAt")
    Severity = field("Severity")
    Count = field("Count")
    ActorIds = field("ActorIds")
    EndpointIds = field("EndpointIds")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SignalTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SignalTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class InsightResults:
    boto3_raw_data: "type_defs.InsightResultsTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")
    GroupByAttribute = field("GroupByAttribute")

    @cached_property
    def ResultValues(self):  # pragma: no cover
        return InsightResultValue.make_many(self.boto3_raw_data["ResultValues"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InsightResultsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InsightResultsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProviderUpdateConfiguration:
    boto3_raw_data: "type_defs.ProviderUpdateConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def JiraCloud(self):  # pragma: no cover
        return JiraCloudUpdateConfiguration.make_one(self.boto3_raw_data["JiraCloud"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProviderUpdateConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProviderUpdateConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListStandardsControlAssociationsResponse:
    boto3_raw_data: "type_defs.ListStandardsControlAssociationsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsControlAssociationSummaries(self):  # pragma: no cover
        return StandardsControlAssociationSummary.make_many(
            self.boto3_raw_data["StandardsControlAssociationSummaries"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListStandardsControlAssociationsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListStandardsControlAssociationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkEndpoint:
    boto3_raw_data: "type_defs.NetworkEndpointTypeDef" = dataclasses.field()

    Id = field("Id")
    Ip = field("Ip")
    Domain = field("Domain")
    Port = field("Port")

    @cached_property
    def Location(self):  # pragma: no cover
        return NetworkGeoLocation.make_one(self.boto3_raw_data["Location"])

    @cached_property
    def AutonomousSystem(self):  # pragma: no cover
        return NetworkAutonomousSystem.make_one(self.boto3_raw_data["AutonomousSystem"])

    @cached_property
    def Connection(self):  # pragma: no cover
        return NetworkConnection.make_one(self.boto3_raw_data["Connection"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkEndpointTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkEndpointTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkPathComponentDetailsOutput:
    boto3_raw_data: "type_defs.NetworkPathComponentDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Address = field("Address")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["PortRanges"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.NetworkPathComponentDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkPathComponentDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkPathComponentDetails:
    boto3_raw_data: "type_defs.NetworkPathComponentDetailsTypeDef" = dataclasses.field()

    Address = field("Address")

    @cached_property
    def PortRanges(self):  # pragma: no cover
        return PortRange.make_many(self.boto3_raw_data["PortRanges"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkPathComponentDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkPathComponentDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Network:
    boto3_raw_data: "type_defs.NetworkTypeDef" = dataclasses.field()

    Direction = field("Direction")
    Protocol = field("Protocol")

    @cached_property
    def OpenPortRange(self):  # pragma: no cover
        return PortRange.make_one(self.boto3_raw_data["OpenPortRange"])

    SourceIpV4 = field("SourceIpV4")
    SourceIpV6 = field("SourceIpV6")
    SourcePort = field("SourcePort")
    SourceDomain = field("SourceDomain")
    SourceMac = field("SourceMac")
    DestinationIpV4 = field("DestinationIpV4")
    DestinationIpV6 = field("DestinationIpV6")
    DestinationPort = field("DestinationPort")
    DestinationDomain = field("DestinationDomain")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Page:
    boto3_raw_data: "type_defs.PageTypeDef" = dataclasses.field()

    PageNumber = field("PageNumber")

    @cached_property
    def LineRange(self):  # pragma: no cover
        return Range.make_one(self.boto3_raw_data["LineRange"])

    @cached_property
    def OffsetRange(self):  # pragma: no cover
        return Range.make_one(self.boto3_raw_data["OffsetRange"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PageTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PageTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterConfigurationOutput:
    boto3_raw_data: "type_defs.ParameterConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    ValueType = field("ValueType")

    @cached_property
    def Value(self):  # pragma: no cover
        return ParameterValueOutput.make_one(self.boto3_raw_data["Value"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterConfigurationOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProviderConfiguration:
    boto3_raw_data: "type_defs.ProviderConfigurationTypeDef" = dataclasses.field()

    @cached_property
    def JiraCloud(self):  # pragma: no cover
        return JiraCloudProviderConfiguration.make_one(self.boto3_raw_data["JiraCloud"])

    @cached_property
    def ServiceNow(self):  # pragma: no cover
        return ServiceNowProviderConfiguration.make_one(
            self.boto3_raw_data["ServiceNow"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ProviderConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ProviderConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ProviderDetail:
    boto3_raw_data: "type_defs.ProviderDetailTypeDef" = dataclasses.field()

    @cached_property
    def JiraCloud(self):  # pragma: no cover
        return JiraCloudDetail.make_one(self.boto3_raw_data["JiraCloud"])

    @cached_property
    def ServiceNow(self):  # pragma: no cover
        return ServiceNowDetail.make_one(self.boto3_raw_data["ServiceNow"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ProviderDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ProviderDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Remediation:
    boto3_raw_data: "type_defs.RemediationTypeDef" = dataclasses.field()

    @cached_property
    def Recommendation(self):  # pragma: no cover
        return Recommendation.make_one(self.boto3_raw_data["Recommendation"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RemediationTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RemediationTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceFindingsSummary:
    boto3_raw_data: "type_defs.ResourceFindingsSummaryTypeDef" = dataclasses.field()

    FindingType = field("FindingType")
    ProductName = field("ProductName")
    TotalFindings = field("TotalFindings")

    @cached_property
    def Severities(self):  # pragma: no cover
        return ResourceSeverityBreakdown.make_one(self.boto3_raw_data["Severities"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceFindingsSummaryTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceFindingsSummaryTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatefulRulesDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceStatefulRulesDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Action = field("Action")

    @cached_property
    def Header(self):  # pragma: no cover
        return RuleGroupSourceStatefulRulesHeaderDetails.make_one(
            self.boto3_raw_data["Header"]
        )

    @cached_property
    def RuleOptions(self):  # pragma: no cover
        return RuleGroupSourceStatefulRulesOptionsDetailsOutput.make_many(
            self.boto3_raw_data["RuleOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatefulRulesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatefulRulesDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributesOutput:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRuleMatchAttributesOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DestinationPorts(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts.make_many(
            self.boto3_raw_data["DestinationPorts"]
        )

    @cached_property
    def Destinations(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesDestinations.make_many(
            self.boto3_raw_data["Destinations"]
        )

    Protocols = field("Protocols")

    @cached_property
    def SourcePorts(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesSourcePorts.make_many(
            self.boto3_raw_data["SourcePorts"]
        )

    @cached_property
    def Sources(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesSources.make_many(
            self.boto3_raw_data["Sources"]
        )

    @cached_property
    def TcpFlags(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesTcpFlagsOutput.make_many(
            self.boto3_raw_data["TcpFlags"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRuleMatchAttributesOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariablesOutput:
    boto3_raw_data: "type_defs.RuleGroupVariablesOutputTypeDef" = dataclasses.field()

    @cached_property
    def IpSets(self):  # pragma: no cover
        return RuleGroupVariablesIpSetsDetailsOutput.make_one(
            self.boto3_raw_data["IpSets"]
        )

    @cached_property
    def PortSets(self):  # pragma: no cover
        return RuleGroupVariablesPortSetsDetailsOutput.make_one(
            self.boto3_raw_data["PortSets"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupVariablesOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Standard:
    boto3_raw_data: "type_defs.StandardTypeDef" = dataclasses.field()

    StandardsArn = field("StandardsArn")
    Name = field("Name")
    Description = field("Description")
    EnabledByDefault = field("EnabledByDefault")

    @cached_property
    def StandardsManagedBy(self):  # pragma: no cover
        return StandardsManagedBy.make_one(self.boto3_raw_data["StandardsManagedBy"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.StandardTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.StandardTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StandardsSubscription:
    boto3_raw_data: "type_defs.StandardsSubscriptionTypeDef" = dataclasses.field()

    StandardsSubscriptionArn = field("StandardsSubscriptionArn")
    StandardsArn = field("StandardsArn")
    StandardsInput = field("StandardsInput")
    StandardsStatus = field("StandardsStatus")
    StandardsControlsUpdatable = field("StandardsControlsUpdatable")

    @cached_property
    def StandardsStatusReason(self):  # pragma: no cover
        return StandardsStatusReason.make_one(
            self.boto3_raw_data["StandardsStatusReason"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.StandardsSubscriptionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StandardsSubscriptionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatelessCustomPublishMetricActionOutput:
    boto3_raw_data: "type_defs.StatelessCustomPublishMetricActionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return StatelessCustomPublishMetricActionDimension.make_many(
            self.boto3_raw_data["Dimensions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StatelessCustomPublishMetricActionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatelessCustomPublishMetricActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatelessCustomPublishMetricAction:
    boto3_raw_data: "type_defs.StatelessCustomPublishMetricActionTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Dimensions(self):  # pragma: no cover
        return StatelessCustomPublishMetricActionDimension.make_many(
            self.boto3_raw_data["Dimensions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StatelessCustomPublishMetricActionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatelessCustomPublishMetricActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiCallActionOutput:
    boto3_raw_data: "type_defs.AwsApiCallActionOutputTypeDef" = dataclasses.field()

    Api = field("Api")
    ServiceName = field("ServiceName")
    CallerType = field("CallerType")

    @cached_property
    def RemoteIpDetails(self):  # pragma: no cover
        return ActionRemoteIpDetails.make_one(self.boto3_raw_data["RemoteIpDetails"])

    @cached_property
    def DomainDetails(self):  # pragma: no cover
        return AwsApiCallActionDomainDetails.make_one(
            self.boto3_raw_data["DomainDetails"]
        )

    AffectedResources = field("AffectedResources")
    FirstSeen = field("FirstSeen")
    LastSeen = field("LastSeen")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiCallActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiCallActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiCallAction:
    boto3_raw_data: "type_defs.AwsApiCallActionTypeDef" = dataclasses.field()

    Api = field("Api")
    ServiceName = field("ServiceName")
    CallerType = field("CallerType")

    @cached_property
    def RemoteIpDetails(self):  # pragma: no cover
        return ActionRemoteIpDetails.make_one(self.boto3_raw_data["RemoteIpDetails"])

    @cached_property
    def DomainDetails(self):  # pragma: no cover
        return AwsApiCallActionDomainDetails.make_one(
            self.boto3_raw_data["DomainDetails"]
        )

    AffectedResources = field("AffectedResources")
    FirstSeen = field("FirstSeen")
    LastSeen = field("LastSeen")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsApiCallActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiCallActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkConnectionAction:
    boto3_raw_data: "type_defs.NetworkConnectionActionTypeDef" = dataclasses.field()

    ConnectionDirection = field("ConnectionDirection")

    @cached_property
    def RemoteIpDetails(self):  # pragma: no cover
        return ActionRemoteIpDetails.make_one(self.boto3_raw_data["RemoteIpDetails"])

    @cached_property
    def RemotePortDetails(self):  # pragma: no cover
        return ActionRemotePortDetails.make_one(
            self.boto3_raw_data["RemotePortDetails"]
        )

    @cached_property
    def LocalPortDetails(self):  # pragma: no cover
        return ActionLocalPortDetails.make_one(self.boto3_raw_data["LocalPortDetails"])

    Protocol = field("Protocol")
    Blocked = field("Blocked")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkConnectionActionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkConnectionActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortProbeDetail:
    boto3_raw_data: "type_defs.PortProbeDetailTypeDef" = dataclasses.field()

    @cached_property
    def LocalPortDetails(self):  # pragma: no cover
        return ActionLocalPortDetails.make_one(self.boto3_raw_data["LocalPortDetails"])

    @cached_property
    def LocalIpDetails(self):  # pragma: no cover
        return ActionLocalIpDetails.make_one(self.boto3_raw_data["LocalIpDetails"])

    @cached_property
    def RemoteIpDetails(self):  # pragma: no cover
        return ActionRemoteIpDetails.make_one(self.boto3_raw_data["RemoteIpDetails"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PortProbeDetailTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PortProbeDetailTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Actor:
    boto3_raw_data: "type_defs.ActorTypeDef" = dataclasses.field()

    Id = field("Id")

    @cached_property
    def User(self):  # pragma: no cover
        return ActorUser.make_one(self.boto3_raw_data["User"])

    @cached_property
    def Session(self):  # pragma: no cover
        return ActorSession.make_one(self.boto3_raw_data["Session"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActorTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActorTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2RouteTableDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2RouteTableDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AssociationSet(self):  # pragma: no cover
        return AssociationSetDetails.make_many(self.boto3_raw_data["AssociationSet"])

    OwnerId = field("OwnerId")

    @cached_property
    def PropagatingVgwSet(self):  # pragma: no cover
        return PropagatingVgwSetDetails.make_many(
            self.boto3_raw_data["PropagatingVgwSet"]
        )

    RouteTableId = field("RouteTableId")

    @cached_property
    def RouteSet(self):  # pragma: no cover
        return RouteSetDetails.make_many(self.boto3_raw_data["RouteSet"])

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2RouteTableDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2RouteTableDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2RouteTableDetails:
    boto3_raw_data: "type_defs.AwsEc2RouteTableDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AssociationSet(self):  # pragma: no cover
        return AssociationSetDetails.make_many(self.boto3_raw_data["AssociationSet"])

    OwnerId = field("OwnerId")

    @cached_property
    def PropagatingVgwSet(self):  # pragma: no cover
        return PropagatingVgwSetDetails.make_many(
            self.boto3_raw_data["PropagatingVgwSet"]
        )

    RouteTableId = field("RouteTableId")

    @cached_property
    def RouteSet(self):  # pragma: no cover
        return RouteSetDetails.make_many(self.boto3_raw_data["RouteSet"])

    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2RouteTableDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2RouteTableDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListAutomationRulesV2Response:
    boto3_raw_data: "type_defs.ListAutomationRulesV2ResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rules(self):  # pragma: no cover
        return AutomationRulesMetadataV2.make_many(self.boto3_raw_data["Rules"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.ListAutomationRulesV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListAutomationRulesV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesActionOutput:
    boto3_raw_data: "type_defs.AutomationRulesActionOutputTypeDef" = dataclasses.field()

    Type = field("Type")

    @cached_property
    def FindingFieldsUpdate(self):  # pragma: no cover
        return AutomationRulesFindingFieldsUpdateOutput.make_one(
            self.boto3_raw_data["FindingFieldsUpdate"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerDetailsOutput:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AuthenticationStrategy = field("AuthenticationStrategy")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    BrokerArn = field("BrokerArn")
    BrokerName = field("BrokerName")
    DeploymentMode = field("DeploymentMode")

    @cached_property
    def EncryptionOptions(self):  # pragma: no cover
        return AwsAmazonMqBrokerEncryptionOptionsDetails.make_one(
            self.boto3_raw_data["EncryptionOptions"]
        )

    EngineType = field("EngineType")
    EngineVersion = field("EngineVersion")
    HostInstanceType = field("HostInstanceType")
    BrokerId = field("BrokerId")

    @cached_property
    def LdapServerMetadata(self):  # pragma: no cover
        return AwsAmazonMqBrokerLdapServerMetadataDetailsOutput.make_one(
            self.boto3_raw_data["LdapServerMetadata"]
        )

    @cached_property
    def Logs(self):  # pragma: no cover
        return AwsAmazonMqBrokerLogsDetails.make_one(self.boto3_raw_data["Logs"])

    @cached_property
    def MaintenanceWindowStartTime(self):  # pragma: no cover
        return AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails.make_one(
            self.boto3_raw_data["MaintenanceWindowStartTime"]
        )

    PubliclyAccessible = field("PubliclyAccessible")
    SecurityGroups = field("SecurityGroups")
    StorageType = field("StorageType")
    SubnetIds = field("SubnetIds")

    @cached_property
    def Users(self):  # pragma: no cover
        return AwsAmazonMqBrokerUsersDetails.make_many(self.boto3_raw_data["Users"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsAmazonMqBrokerDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAmazonMqBrokerDetails:
    boto3_raw_data: "type_defs.AwsAmazonMqBrokerDetailsTypeDef" = dataclasses.field()

    AuthenticationStrategy = field("AuthenticationStrategy")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    BrokerArn = field("BrokerArn")
    BrokerName = field("BrokerName")
    DeploymentMode = field("DeploymentMode")

    @cached_property
    def EncryptionOptions(self):  # pragma: no cover
        return AwsAmazonMqBrokerEncryptionOptionsDetails.make_one(
            self.boto3_raw_data["EncryptionOptions"]
        )

    EngineType = field("EngineType")
    EngineVersion = field("EngineVersion")
    HostInstanceType = field("HostInstanceType")
    BrokerId = field("BrokerId")
    LdapServerMetadata = field("LdapServerMetadata")

    @cached_property
    def Logs(self):  # pragma: no cover
        return AwsAmazonMqBrokerLogsDetails.make_one(self.boto3_raw_data["Logs"])

    @cached_property
    def MaintenanceWindowStartTime(self):  # pragma: no cover
        return AwsAmazonMqBrokerMaintenanceWindowStartTimeDetails.make_one(
            self.boto3_raw_data["MaintenanceWindowStartTime"]
        )

    PubliclyAccessible = field("PubliclyAccessible")
    SecurityGroups = field("SecurityGroups")
    StorageType = field("StorageType")
    SubnetIds = field("SubnetIds")

    @cached_property
    def Users(self):  # pragma: no cover
        return AwsAmazonMqBrokerUsersDetails.make_many(self.boto3_raw_data["Users"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsAmazonMqBrokerDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAmazonMqBrokerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayStageDetails:
    boto3_raw_data: "type_defs.AwsApiGatewayStageDetailsTypeDef" = dataclasses.field()

    DeploymentId = field("DeploymentId")
    ClientCertificateId = field("ClientCertificateId")
    StageName = field("StageName")
    Description = field("Description")
    CacheClusterEnabled = field("CacheClusterEnabled")
    CacheClusterSize = field("CacheClusterSize")
    CacheClusterStatus = field("CacheClusterStatus")

    @cached_property
    def MethodSettings(self):  # pragma: no cover
        return AwsApiGatewayMethodSettings.make_many(
            self.boto3_raw_data["MethodSettings"]
        )

    Variables = field("Variables")
    DocumentationVersion = field("DocumentationVersion")

    @cached_property
    def AccessLogSettings(self):  # pragma: no cover
        return AwsApiGatewayAccessLogSettings.make_one(
            self.boto3_raw_data["AccessLogSettings"]
        )

    CanarySettings = field("CanarySettings")
    TracingEnabled = field("TracingEnabled")
    CreatedDate = field("CreatedDate")
    LastUpdatedDate = field("LastUpdatedDate")
    WebAclArn = field("WebAclArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayStageDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayStageDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayRestApiDetails:
    boto3_raw_data: "type_defs.AwsApiGatewayRestApiDetailsTypeDef" = dataclasses.field()

    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    CreatedDate = field("CreatedDate")
    Version = field("Version")
    BinaryMediaTypes = field("BinaryMediaTypes")
    MinimumCompressionSize = field("MinimumCompressionSize")
    ApiKeySource = field("ApiKeySource")
    EndpointConfiguration = field("EndpointConfiguration")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayRestApiDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayRestApiDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiDetailsOutput:
    boto3_raw_data: "type_defs.AwsAppSyncGraphQlApiDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ApiId = field("ApiId")
    Id = field("Id")

    @cached_property
    def OpenIdConnectConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiOpenIdConnectConfigDetails.make_one(
            self.boto3_raw_data["OpenIdConnectConfig"]
        )

    Name = field("Name")

    @cached_property
    def LambdaAuthorizerConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails.make_one(
            self.boto3_raw_data["LambdaAuthorizerConfig"]
        )

    XrayEnabled = field("XrayEnabled")
    Arn = field("Arn")

    @cached_property
    def UserPoolConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiUserPoolConfigDetails.make_one(
            self.boto3_raw_data["UserPoolConfig"]
        )

    AuthenticationType = field("AuthenticationType")

    @cached_property
    def LogConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiLogConfigDetails.make_one(
            self.boto3_raw_data["LogConfig"]
        )

    @cached_property
    def AdditionalAuthenticationProviders(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetails.make_many(
            self.boto3_raw_data["AdditionalAuthenticationProviders"]
        )

    WafWebAclArn = field("WafWebAclArn")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAppSyncGraphQlApiDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAppSyncGraphQlApiDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAppSyncGraphQlApiDetails:
    boto3_raw_data: "type_defs.AwsAppSyncGraphQlApiDetailsTypeDef" = dataclasses.field()

    ApiId = field("ApiId")
    Id = field("Id")

    @cached_property
    def OpenIdConnectConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiOpenIdConnectConfigDetails.make_one(
            self.boto3_raw_data["OpenIdConnectConfig"]
        )

    Name = field("Name")

    @cached_property
    def LambdaAuthorizerConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiLambdaAuthorizerConfigDetails.make_one(
            self.boto3_raw_data["LambdaAuthorizerConfig"]
        )

    XrayEnabled = field("XrayEnabled")
    Arn = field("Arn")

    @cached_property
    def UserPoolConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiUserPoolConfigDetails.make_one(
            self.boto3_raw_data["UserPoolConfig"]
        )

    AuthenticationType = field("AuthenticationType")

    @cached_property
    def LogConfig(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiLogConfigDetails.make_one(
            self.boto3_raw_data["LogConfig"]
        )

    @cached_property
    def AdditionalAuthenticationProviders(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiAdditionalAuthenticationProvidersDetails.make_many(
            self.boto3_raw_data["AdditionalAuthenticationProviders"]
        )

    WafWebAclArn = field("WafWebAclArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsAppSyncGraphQlApiDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAppSyncGraphQlApiDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAthenaWorkGroupConfigurationDetails:
    boto3_raw_data: "type_defs.AwsAthenaWorkGroupConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ResultConfiguration(self):  # pragma: no cover
        return AwsAthenaWorkGroupConfigurationResultConfigurationDetails.make_one(
            self.boto3_raw_data["ResultConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAthenaWorkGroupConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAthenaWorkGroupConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsOutput:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsOutputTypeDef" = (dataclasses.field())

    @cached_property
    def InstancesDistribution(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails.make_one(
            self.boto3_raw_data["InstancesDistribution"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetailsOutput.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingLaunchConfigurationDetailsOutputTypeDef"
    ) = dataclasses.field()

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    ClassicLinkVpcId = field("ClassicLinkVpcId")
    ClassicLinkVpcSecurityGroups = field("ClassicLinkVpcSecurityGroups")
    CreatedTime = field("CreatedTime")
    EbsOptimized = field("EbsOptimized")
    IamInstanceProfile = field("IamInstanceProfile")
    ImageId = field("ImageId")

    @cached_property
    def InstanceMonitoring(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails.make_one(
            self.boto3_raw_data["InstanceMonitoring"]
        )

    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")
    LaunchConfigurationName = field("LaunchConfigurationName")
    PlacementTenancy = field("PlacementTenancy")
    RamdiskId = field("RamdiskId")
    SecurityGroups = field("SecurityGroups")
    SpotPrice = field("SpotPrice")
    UserData = field("UserData")

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationMetadataOptions.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingLaunchConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingLaunchConfigurationDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingLaunchConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    AssociatePublicIpAddress = field("AssociatePublicIpAddress")

    @cached_property
    def BlockDeviceMappings(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails.make_many(
            self.boto3_raw_data["BlockDeviceMappings"]
        )

    ClassicLinkVpcId = field("ClassicLinkVpcId")
    ClassicLinkVpcSecurityGroups = field("ClassicLinkVpcSecurityGroups")
    CreatedTime = field("CreatedTime")
    EbsOptimized = field("EbsOptimized")
    IamInstanceProfile = field("IamInstanceProfile")
    ImageId = field("ImageId")

    @cached_property
    def InstanceMonitoring(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails.make_one(
            self.boto3_raw_data["InstanceMonitoring"]
        )

    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")
    LaunchConfigurationName = field("LaunchConfigurationName")
    PlacementTenancy = field("PlacementTenancy")
    RamdiskId = field("RamdiskId")
    SecurityGroups = field("SecurityGroups")
    SpotPrice = field("SpotPrice")
    UserData = field("UserData")

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationMetadataOptions.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingLaunchConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAutoScalingLaunchConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanRuleDetailsOutput:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanRuleDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    TargetBackupVault = field("TargetBackupVault")
    StartWindowMinutes = field("StartWindowMinutes")
    ScheduleExpression = field("ScheduleExpression")
    RuleName = field("RuleName")
    RuleId = field("RuleId")
    EnableContinuousBackup = field("EnableContinuousBackup")
    CompletionWindowMinutes = field("CompletionWindowMinutes")

    @cached_property
    def CopyActions(self):  # pragma: no cover
        return AwsBackupBackupPlanRuleCopyActionsDetails.make_many(
            self.boto3_raw_data["CopyActions"]
        )

    @cached_property
    def Lifecycle(self):  # pragma: no cover
        return AwsBackupBackupPlanLifecycleDetails.make_one(
            self.boto3_raw_data["Lifecycle"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanRuleDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanRuleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanRuleDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanRuleDetailsTypeDef" = (
        dataclasses.field()
    )

    TargetBackupVault = field("TargetBackupVault")
    StartWindowMinutes = field("StartWindowMinutes")
    ScheduleExpression = field("ScheduleExpression")
    RuleName = field("RuleName")
    RuleId = field("RuleId")
    EnableContinuousBackup = field("EnableContinuousBackup")
    CompletionWindowMinutes = field("CompletionWindowMinutes")

    @cached_property
    def CopyActions(self):  # pragma: no cover
        return AwsBackupBackupPlanRuleCopyActionsDetails.make_many(
            self.boto3_raw_data["CopyActions"]
        )

    @cached_property
    def Lifecycle(self):  # pragma: no cover
        return AwsBackupBackupPlanLifecycleDetails.make_one(
            self.boto3_raw_data["Lifecycle"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsBackupBackupPlanRuleDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanRuleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupVaultDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupVaultDetailsTypeDef" = dataclasses.field()

    BackupVaultArn = field("BackupVaultArn")
    BackupVaultName = field("BackupVaultName")
    EncryptionKeyArn = field("EncryptionKeyArn")
    Notifications = field("Notifications")
    AccessPolicy = field("AccessPolicy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsBackupBackupVaultDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupVaultDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateRenewalSummaryOutput:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateRenewalSummaryOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DomainValidationOptions(self):  # pragma: no cover
        return AwsCertificateManagerCertificateDomainValidationOptionOutput.make_many(
            self.boto3_raw_data["DomainValidationOptions"]
        )

    RenewalStatus = field("RenewalStatus")
    RenewalStatusReason = field("RenewalStatusReason")
    UpdatedAt = field("UpdatedAt")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateRenewalSummaryOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateRenewalSummaryOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateRenewalSummary:
    boto3_raw_data: (
        "type_defs.AwsCertificateManagerCertificateRenewalSummaryTypeDef"
    ) = dataclasses.field()

    @cached_property
    def DomainValidationOptions(self):  # pragma: no cover
        return AwsCertificateManagerCertificateDomainValidationOption.make_many(
            self.boto3_raw_data["DomainValidationOptions"]
        )

    RenewalStatus = field("RenewalStatus")
    RenewalStatusReason = field("RenewalStatusReason")
    UpdatedAt = field("UpdatedAt")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateRenewalSummaryTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCertificateManagerCertificateRenewalSummaryTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginItemOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginItemOutputTypeDef" = (
        dataclasses.field()
    )

    DomainName = field("DomainName")
    Id = field("Id")
    OriginPath = field("OriginPath")

    @cached_property
    def S3OriginConfig(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginS3OriginConfig.make_one(
            self.boto3_raw_data["S3OriginConfig"]
        )

    @cached_property
    def CustomOriginConfig(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginCustomOriginConfigOutput.make_one(
            self.boto3_raw_data["CustomOriginConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginItemOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginItemOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginGroupOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FailoverCriteria(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginGroupFailoverOutput.make_one(
            self.boto3_raw_data["FailoverCriteria"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupFailover:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginGroupFailoverTypeDef" = (
        dataclasses.field()
    )

    StatusCodes = field("StatusCodes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupFailoverTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginGroupFailoverTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginCustomOriginConfig:
    boto3_raw_data: (
        "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigTypeDef"
    ) = dataclasses.field()

    HttpPort = field("HttpPort")
    HttpsPort = field("HttpsPort")
    OriginKeepaliveTimeout = field("OriginKeepaliveTimeout")
    OriginProtocolPolicy = field("OriginProtocolPolicy")
    OriginReadTimeout = field("OriginReadTimeout")
    OriginSslProtocols = field("OriginSslProtocols")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsCloudFrontDistributionOriginCustomOriginConfigTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectDetailsOutput:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    EncryptionKey = field("EncryptionKey")

    @cached_property
    def Artifacts(self):  # pragma: no cover
        return AwsCodeBuildProjectArtifactsDetails.make_many(
            self.boto3_raw_data["Artifacts"]
        )

    @cached_property
    def Environment(self):  # pragma: no cover
        return AwsCodeBuildProjectEnvironmentOutput.make_one(
            self.boto3_raw_data["Environment"]
        )

    Name = field("Name")

    @cached_property
    def Source(self):  # pragma: no cover
        return AwsCodeBuildProjectSource.make_one(self.boto3_raw_data["Source"])

    ServiceRole = field("ServiceRole")

    @cached_property
    def LogsConfig(self):  # pragma: no cover
        return AwsCodeBuildProjectLogsConfigDetails.make_one(
            self.boto3_raw_data["LogsConfig"]
        )

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return AwsCodeBuildProjectVpcConfigOutput.make_one(
            self.boto3_raw_data["VpcConfig"]
        )

    @cached_property
    def SecondaryArtifacts(self):  # pragma: no cover
        return AwsCodeBuildProjectArtifactsDetails.make_many(
            self.boto3_raw_data["SecondaryArtifacts"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCodeBuildProjectDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsApiGatewayV2ApiDetails:
    boto3_raw_data: "type_defs.AwsApiGatewayV2ApiDetailsTypeDef" = dataclasses.field()

    ApiEndpoint = field("ApiEndpoint")
    ApiId = field("ApiId")
    ApiKeySelectionExpression = field("ApiKeySelectionExpression")
    CreatedDate = field("CreatedDate")
    Description = field("Description")
    Version = field("Version")
    Name = field("Name")
    ProtocolType = field("ProtocolType")
    RouteSelectionExpression = field("RouteSelectionExpression")
    CorsConfiguration = field("CorsConfiguration")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsApiGatewayV2ApiDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsApiGatewayV2ApiDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableGlobalSecondaryIndex:
    boto3_raw_data: "type_defs.AwsDynamoDbTableGlobalSecondaryIndexTypeDef" = (
        dataclasses.field()
    )

    Backfilling = field("Backfilling")
    IndexArn = field("IndexArn")
    IndexName = field("IndexName")
    IndexSizeBytes = field("IndexSizeBytes")
    IndexStatus = field("IndexStatus")
    ItemCount = field("ItemCount")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    Projection = field("Projection")

    @cached_property
    def ProvisionedThroughput(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughput.make_one(
            self.boto3_raw_data["ProvisionedThroughput"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableGlobalSecondaryIndexTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableGlobalSecondaryIndexTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableLocalSecondaryIndex:
    boto3_raw_data: "type_defs.AwsDynamoDbTableLocalSecondaryIndexTypeDef" = (
        dataclasses.field()
    )

    IndexArn = field("IndexArn")
    IndexName = field("IndexName")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    Projection = field("Projection")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsDynamoDbTableLocalSecondaryIndexTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableLocalSecondaryIndexTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableReplicaOutput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableReplicaOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GlobalSecondaryIndexes(self):  # pragma: no cover
        return AwsDynamoDbTableReplicaGlobalSecondaryIndex.make_many(
            self.boto3_raw_data["GlobalSecondaryIndexes"]
        )

    KmsMasterKeyId = field("KmsMasterKeyId")

    @cached_property
    def ProvisionedThroughputOverride(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughputOverride.make_one(
            self.boto3_raw_data["ProvisionedThroughputOverride"]
        )

    RegionName = field("RegionName")
    ReplicaStatus = field("ReplicaStatus")
    ReplicaStatusDescription = field("ReplicaStatusDescription")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableReplicaOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableReplicaOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableReplica:
    boto3_raw_data: "type_defs.AwsDynamoDbTableReplicaTypeDef" = dataclasses.field()

    @cached_property
    def GlobalSecondaryIndexes(self):  # pragma: no cover
        return AwsDynamoDbTableReplicaGlobalSecondaryIndex.make_many(
            self.boto3_raw_data["GlobalSecondaryIndexes"]
        )

    KmsMasterKeyId = field("KmsMasterKeyId")

    @cached_property
    def ProvisionedThroughputOverride(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughputOverride.make_one(
            self.boto3_raw_data["ProvisionedThroughputOverride"]
        )

    RegionName = field("RegionName")
    ReplicaStatus = field("ReplicaStatus")
    ReplicaStatusDescription = field("ReplicaStatusDescription")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableReplicaTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableReplicaTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2ClientVpnEndpointDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Description = field("Description")
    ClientCidrBlock = field("ClientCidrBlock")
    DnsServer = field("DnsServer")
    SplitTunnel = field("SplitTunnel")
    TransportProtocol = field("TransportProtocol")
    VpnPort = field("VpnPort")
    ServerCertificateArn = field("ServerCertificateArn")

    @cached_property
    def AuthenticationOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointAuthenticationOptionsDetails.make_many(
            self.boto3_raw_data["AuthenticationOptions"]
        )

    @cached_property
    def ConnectionLogOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointConnectionLogOptionsDetails.make_one(
            self.boto3_raw_data["ConnectionLogOptions"]
        )

    SecurityGroupIdSet = field("SecurityGroupIdSet")
    VpcId = field("VpcId")
    SelfServicePortalUrl = field("SelfServicePortalUrl")

    @cached_property
    def ClientConnectOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointClientConnectOptionsDetails.make_one(
            self.boto3_raw_data["ClientConnectOptions"]
        )

    SessionTimeoutHours = field("SessionTimeoutHours")

    @cached_property
    def ClientLoginBannerOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails.make_one(
            self.boto3_raw_data["ClientLoginBannerOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2ClientVpnEndpointDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2ClientVpnEndpointDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2ClientVpnEndpointDetails:
    boto3_raw_data: "type_defs.AwsEc2ClientVpnEndpointDetailsTypeDef" = (
        dataclasses.field()
    )

    ClientVpnEndpointId = field("ClientVpnEndpointId")
    Description = field("Description")
    ClientCidrBlock = field("ClientCidrBlock")
    DnsServer = field("DnsServer")
    SplitTunnel = field("SplitTunnel")
    TransportProtocol = field("TransportProtocol")
    VpnPort = field("VpnPort")
    ServerCertificateArn = field("ServerCertificateArn")

    @cached_property
    def AuthenticationOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointAuthenticationOptionsDetails.make_many(
            self.boto3_raw_data["AuthenticationOptions"]
        )

    @cached_property
    def ConnectionLogOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointConnectionLogOptionsDetails.make_one(
            self.boto3_raw_data["ConnectionLogOptions"]
        )

    SecurityGroupIdSet = field("SecurityGroupIdSet")
    VpcId = field("VpcId")
    SelfServicePortalUrl = field("SelfServicePortalUrl")

    @cached_property
    def ClientConnectOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointClientConnectOptionsDetails.make_one(
            self.boto3_raw_data["ClientConnectOptions"]
        )

    SessionTimeoutHours = field("SessionTimeoutHours")

    @cached_property
    def ClientLoginBannerOptions(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointClientLoginBannerOptionsDetails.make_one(
            self.boto3_raw_data["ClientLoginBannerOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2ClientVpnEndpointDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2ClientVpnEndpointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BlockDeviceMappingSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails.make_many(
            self.boto3_raw_data["BlockDeviceMappingSet"]
        )

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetails.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCpuOptionsDetails.make_one(
            self.boto3_raw_data["CpuOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCreditSpecificationDetails.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    DisableApiStop = field("DisableApiStop")
    DisableApiTermination = field("DisableApiTermination")
    EbsOptimized = field("EbsOptimized")

    @cached_property
    def ElasticGpuSpecificationSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetails.make_many(
            self.boto3_raw_data["ElasticGpuSpecificationSet"]
        )

    @cached_property
    def ElasticInferenceAcceleratorSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetails.make_many(
            self.boto3_raw_data["ElasticInferenceAcceleratorSet"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataEnclaveOptionsDetails.make_one(
            self.boto3_raw_data["EnclaveOptions"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataHibernationOptionsDetails.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataIamInstanceProfileDetails.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceMarketOptionsDetails.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    @cached_property
    def InstanceRequirements(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceRequirementsDetailsOutput.make_one(
            self.boto3_raw_data["InstanceRequirements"]
        )

    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def LicenseSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataLicenseSetDetails.make_many(
            self.boto3_raw_data["LicenseSet"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMaintenanceOptionsDetails.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMetadataOptionsDetails.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMonitoringDetails.make_one(
            self.boto3_raw_data["Monitoring"]
        )

    @cached_property
    def NetworkInterfaceSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataNetworkInterfaceSetDetailsOutput.make_many(
            self.boto3_raw_data["NetworkInterfaceSet"]
        )

    @cached_property
    def Placement(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataPlacementDetails.make_one(
            self.boto3_raw_data["Placement"]
        )

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetails.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    RamDiskId = field("RamDiskId")
    SecurityGroupIdSet = field("SecurityGroupIdSet")
    SecurityGroupSet = field("SecurityGroupSet")
    UserData = field("UserData")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDataDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkAclDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2NetworkAclDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    IsDefault = field("IsDefault")
    NetworkAclId = field("NetworkAclId")
    OwnerId = field("OwnerId")
    VpcId = field("VpcId")

    @cached_property
    def Associations(self):  # pragma: no cover
        return AwsEc2NetworkAclAssociation.make_many(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def Entries(self):  # pragma: no cover
        return AwsEc2NetworkAclEntry.make_many(self.boto3_raw_data["Entries"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkAclDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkAclDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2NetworkAclDetails:
    boto3_raw_data: "type_defs.AwsEc2NetworkAclDetailsTypeDef" = dataclasses.field()

    IsDefault = field("IsDefault")
    NetworkAclId = field("NetworkAclId")
    OwnerId = field("OwnerId")
    VpcId = field("VpcId")

    @cached_property
    def Associations(self):  # pragma: no cover
        return AwsEc2NetworkAclAssociation.make_many(
            self.boto3_raw_data["Associations"]
        )

    @cached_property
    def Entries(self):  # pragma: no cover
        return AwsEc2NetworkAclEntry.make_many(self.boto3_raw_data["Entries"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2NetworkAclDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2NetworkAclDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    GroupName = field("GroupName")
    GroupId = field("GroupId")
    OwnerId = field("OwnerId")
    VpcId = field("VpcId")

    @cached_property
    def IpPermissions(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpPermissionOutput.make_many(
            self.boto3_raw_data["IpPermissions"]
        )

    @cached_property
    def IpPermissionsEgress(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpPermissionOutput.make_many(
            self.boto3_raw_data["IpPermissionsEgress"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcPeeringConnectionDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VpcPeeringConnectionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AccepterVpcInfo(self):  # pragma: no cover
        return AwsEc2VpcPeeringConnectionVpcInfoDetailsOutput.make_one(
            self.boto3_raw_data["AccepterVpcInfo"]
        )

    ExpirationTime = field("ExpirationTime")

    @cached_property
    def RequesterVpcInfo(self):  # pragma: no cover
        return AwsEc2VpcPeeringConnectionVpcInfoDetailsOutput.make_one(
            self.boto3_raw_data["RequesterVpcInfo"]
        )

    @cached_property
    def Status(self):  # pragma: no cover
        return AwsEc2VpcPeeringConnectionStatusDetails.make_one(
            self.boto3_raw_data["Status"]
        )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcPeeringConnectionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcPeeringConnectionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    VpnConnectionId = field("VpnConnectionId")
    State = field("State")
    CustomerGatewayId = field("CustomerGatewayId")
    CustomerGatewayConfiguration = field("CustomerGatewayConfiguration")
    Type = field("Type")
    VpnGatewayId = field("VpnGatewayId")
    Category = field("Category")

    @cached_property
    def VgwTelemetry(self):  # pragma: no cover
        return AwsEc2VpnConnectionVgwTelemetryDetails.make_many(
            self.boto3_raw_data["VgwTelemetry"]
        )

    @cached_property
    def Options(self):  # pragma: no cover
        return AwsEc2VpnConnectionOptionsDetailsOutput.make_one(
            self.boto3_raw_data["Options"]
        )

    @cached_property
    def Routes(self):  # pragma: no cover
        return AwsEc2VpnConnectionRoutesDetails.make_many(self.boto3_raw_data["Routes"])

    TransitGatewayId = field("TransitGatewayId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2VpnConnectionDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionOptionsDetails:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionOptionsDetailsTypeDef" = (
        dataclasses.field()
    )

    StaticRoutesOnly = field("StaticRoutesOnly")
    TunnelOptions = field("TunnelOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpnConnectionOptionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionOptionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsClusterConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ExecuteCommandConfiguration(self):  # pragma: no cover
        return AwsEcsClusterConfigurationExecuteCommandConfigurationDetails.make_one(
            self.boto3_raw_data["ExecuteCommandConfiguration"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsClusterConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsClusterConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsServiceDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def CapacityProviderStrategy(self):  # pragma: no cover
        return AwsEcsServiceCapacityProviderStrategyDetails.make_many(
            self.boto3_raw_data["CapacityProviderStrategy"]
        )

    Cluster = field("Cluster")

    @cached_property
    def DeploymentConfiguration(self):  # pragma: no cover
        return AwsEcsServiceDeploymentConfigurationDetails.make_one(
            self.boto3_raw_data["DeploymentConfiguration"]
        )

    @cached_property
    def DeploymentController(self):  # pragma: no cover
        return AwsEcsServiceDeploymentControllerDetails.make_one(
            self.boto3_raw_data["DeploymentController"]
        )

    DesiredCount = field("DesiredCount")
    EnableEcsManagedTags = field("EnableEcsManagedTags")
    EnableExecuteCommand = field("EnableExecuteCommand")
    HealthCheckGracePeriodSeconds = field("HealthCheckGracePeriodSeconds")
    LaunchType = field("LaunchType")

    @cached_property
    def LoadBalancers(self):  # pragma: no cover
        return AwsEcsServiceLoadBalancersDetails.make_many(
            self.boto3_raw_data["LoadBalancers"]
        )

    Name = field("Name")

    @cached_property
    def NetworkConfiguration(self):  # pragma: no cover
        return AwsEcsServiceNetworkConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["NetworkConfiguration"]
        )

    @cached_property
    def PlacementConstraints(self):  # pragma: no cover
        return AwsEcsServicePlacementConstraintsDetails.make_many(
            self.boto3_raw_data["PlacementConstraints"]
        )

    @cached_property
    def PlacementStrategies(self):  # pragma: no cover
        return AwsEcsServicePlacementStrategiesDetails.make_many(
            self.boto3_raw_data["PlacementStrategies"]
        )

    PlatformVersion = field("PlatformVersion")
    PropagateTags = field("PropagateTags")
    Role = field("Role")
    SchedulingStrategy = field("SchedulingStrategy")
    ServiceArn = field("ServiceArn")
    ServiceName = field("ServiceName")

    @cached_property
    def ServiceRegistries(self):  # pragma: no cover
        return AwsEcsServiceServiceRegistriesDetails.make_many(
            self.boto3_raw_data["ServiceRegistries"]
        )

    TaskDefinition = field("TaskDefinition")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsServiceDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceNetworkConfigurationDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceNetworkConfigurationDetailsTypeDef" = (
        dataclasses.field()
    )

    AwsVpcConfiguration = field("AwsVpcConfiguration")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsServiceNetworkConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceNetworkConfigurationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsTypeDef" = (dataclasses.field())

    Capabilities = field("Capabilities")
    Devices = field("Devices")
    InitProcessEnabled = field("InitProcessEnabled")
    MaxSwap = field("MaxSwap")
    SharedMemorySize = field("SharedMemorySize")
    Swappiness = field("Swappiness")
    Tmpfs = field("Tmpfs")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    Command = field("Command")
    Cpu = field("Cpu")

    @cached_property
    def DependsOn(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails.make_many(
            self.boto3_raw_data["DependsOn"]
        )

    DisableNetworking = field("DisableNetworking")
    DnsSearchDomains = field("DnsSearchDomains")
    DnsServers = field("DnsServers")
    DockerLabels = field("DockerLabels")
    DockerSecurityOptions = field("DockerSecurityOptions")
    EntryPoint = field("EntryPoint")

    @cached_property
    def Environment(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails.make_many(
            self.boto3_raw_data["Environment"]
        )

    @cached_property
    def EnvironmentFiles(self):  # pragma: no cover
        return (
            AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails.make_many(
                self.boto3_raw_data["EnvironmentFiles"]
            )
        )

    Essential = field("Essential")

    @cached_property
    def ExtraHosts(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails.make_many(
            self.boto3_raw_data["ExtraHosts"]
        )

    @cached_property
    def FirelensConfiguration(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["FirelensConfiguration"]
        )

    @cached_property
    def HealthCheck(self):  # pragma: no cover
        return (
            AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetailsOutput.make_one(
                self.boto3_raw_data["HealthCheck"]
            )
        )

    Hostname = field("Hostname")
    Image = field("Image")
    Interactive = field("Interactive")
    Links = field("Links")

    @cached_property
    def LinuxParameters(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetailsOutput.make_one(
            self.boto3_raw_data["LinuxParameters"]
        )

    @cached_property
    def LogConfiguration(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["LogConfiguration"]
        )

    Memory = field("Memory")
    MemoryReservation = field("MemoryReservation")

    @cached_property
    def MountPoints(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails.make_many(
            self.boto3_raw_data["MountPoints"]
        )

    Name = field("Name")

    @cached_property
    def PortMappings(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails.make_many(
            self.boto3_raw_data["PortMappings"]
        )

    Privileged = field("Privileged")
    PseudoTerminal = field("PseudoTerminal")
    ReadonlyRootFilesystem = field("ReadonlyRootFilesystem")

    @cached_property
    def RepositoryCredentials(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails.make_one(
            self.boto3_raw_data["RepositoryCredentials"]
        )

    @cached_property
    def ResourceRequirements(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails.make_many(
            self.boto3_raw_data["ResourceRequirements"]
        )

    @cached_property
    def Secrets(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails.make_many(
            self.boto3_raw_data["Secrets"]
        )

    StartTimeout = field("StartTimeout")
    StopTimeout = field("StopTimeout")

    @cached_property
    def SystemControls(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails.make_many(
            self.boto3_raw_data["SystemControls"]
        )

    @cached_property
    def Ulimits(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails.make_many(
            self.boto3_raw_data["Ulimits"]
        )

    User = field("User")

    @cached_property
    def VolumesFrom(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails.make_many(
            self.boto3_raw_data["VolumesFrom"]
        )

    WorkingDirectory = field("WorkingDirectory")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionVolumesDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DockerVolumeConfiguration(self):  # pragma: no cover
        return (
            AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetailsOutput.make_one(
                self.boto3_raw_data["DockerVolumeConfiguration"]
            )
        )

    @cached_property
    def EfsVolumeConfiguration(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails.make_one(
            self.boto3_raw_data["EfsVolumeConfiguration"]
        )

    @cached_property
    def Host(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesHostDetails.make_one(
            self.boto3_raw_data["Host"]
        )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionVolumesDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionVolumesDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionVolumesDetailsTypeDef" = (
        dataclasses.field()
    )

    DockerVolumeConfiguration = field("DockerVolumeConfiguration")

    @cached_property
    def EfsVolumeConfiguration(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails.make_one(
            self.boto3_raw_data["EfsVolumeConfiguration"]
        )

    @cached_property
    def Host(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesHostDetails.make_one(
            self.boto3_raw_data["Host"]
        )

    Name = field("Name")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionVolumesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionVolumesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDetailsOutputTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    TaskDefinitionArn = field("TaskDefinitionArn")
    Version = field("Version")
    CreatedAt = field("CreatedAt")
    StartedAt = field("StartedAt")
    StartedBy = field("StartedBy")
    Group = field("Group")

    @cached_property
    def Volumes(self):  # pragma: no cover
        return AwsEcsTaskVolumeDetails.make_many(self.boto3_raw_data["Volumes"])

    @cached_property
    def Containers(self):  # pragma: no cover
        return AwsEcsContainerDetailsOutput.make_many(self.boto3_raw_data["Containers"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsTaskDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointDetailsOutput:
    boto3_raw_data: "type_defs.AwsEfsAccessPointDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AccessPointId = field("AccessPointId")
    Arn = field("Arn")
    ClientToken = field("ClientToken")
    FileSystemId = field("FileSystemId")

    @cached_property
    def PosixUser(self):  # pragma: no cover
        return AwsEfsAccessPointPosixUserDetailsOutput.make_one(
            self.boto3_raw_data["PosixUser"]
        )

    @cached_property
    def RootDirectory(self):  # pragma: no cover
        return AwsEfsAccessPointRootDirectoryDetails.make_one(
            self.boto3_raw_data["RootDirectory"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEfsAccessPointDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEfsAccessPointDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEfsAccessPointDetails:
    boto3_raw_data: "type_defs.AwsEfsAccessPointDetailsTypeDef" = dataclasses.field()

    AccessPointId = field("AccessPointId")
    Arn = field("Arn")
    ClientToken = field("ClientToken")
    FileSystemId = field("FileSystemId")
    PosixUser = field("PosixUser")

    @cached_property
    def RootDirectory(self):  # pragma: no cover
        return AwsEfsAccessPointRootDirectoryDetails.make_one(
            self.boto3_raw_data["RootDirectory"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEfsAccessPointDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEfsAccessPointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterDetailsOutput:
    boto3_raw_data: "type_defs.AwsEksClusterDetailsOutputTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CertificateAuthorityData = field("CertificateAuthorityData")
    ClusterStatus = field("ClusterStatus")
    Endpoint = field("Endpoint")
    Name = field("Name")

    @cached_property
    def ResourcesVpcConfig(self):  # pragma: no cover
        return AwsEksClusterResourcesVpcConfigDetailsOutput.make_one(
            self.boto3_raw_data["ResourcesVpcConfig"]
        )

    RoleArn = field("RoleArn")
    Version = field("Version")

    @cached_property
    def Logging(self):  # pragma: no cover
        return AwsEksClusterLoggingDetailsOutput.make_one(
            self.boto3_raw_data["Logging"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEksClusterDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterLoggingDetails:
    boto3_raw_data: "type_defs.AwsEksClusterLoggingDetailsTypeDef" = dataclasses.field()

    ClusterLogging = field("ClusterLogging")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEksClusterLoggingDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterLoggingDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainDetailsOutput:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AccessPolicies = field("AccessPolicies")

    @cached_property
    def DomainEndpointOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainDomainEndpointOptions.make_one(
            self.boto3_raw_data["DomainEndpointOptions"]
        )

    DomainId = field("DomainId")
    DomainName = field("DomainName")
    Endpoint = field("Endpoint")
    Endpoints = field("Endpoints")
    ElasticsearchVersion = field("ElasticsearchVersion")

    @cached_property
    def ElasticsearchClusterConfig(self):  # pragma: no cover
        return AwsElasticsearchDomainElasticsearchClusterConfigDetails.make_one(
            self.boto3_raw_data["ElasticsearchClusterConfig"]
        )

    @cached_property
    def EncryptionAtRestOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainEncryptionAtRestOptions.make_one(
            self.boto3_raw_data["EncryptionAtRestOptions"]
        )

    @cached_property
    def LogPublishingOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainLogPublishingOptions.make_one(
            self.boto3_raw_data["LogPublishingOptions"]
        )

    @cached_property
    def NodeToNodeEncryptionOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainNodeToNodeEncryptionOptions.make_one(
            self.boto3_raw_data["NodeToNodeEncryptionOptions"]
        )

    @cached_property
    def ServiceSoftwareOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainServiceSoftwareOptions.make_one(
            self.boto3_raw_data["ServiceSoftwareOptions"]
        )

    @cached_property
    def VPCOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainVPCOptionsOutput.make_one(
            self.boto3_raw_data["VPCOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsElasticsearchDomainDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElasticsearchDomainDetails:
    boto3_raw_data: "type_defs.AwsElasticsearchDomainDetailsTypeDef" = (
        dataclasses.field()
    )

    AccessPolicies = field("AccessPolicies")

    @cached_property
    def DomainEndpointOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainDomainEndpointOptions.make_one(
            self.boto3_raw_data["DomainEndpointOptions"]
        )

    DomainId = field("DomainId")
    DomainName = field("DomainName")
    Endpoint = field("Endpoint")
    Endpoints = field("Endpoints")
    ElasticsearchVersion = field("ElasticsearchVersion")

    @cached_property
    def ElasticsearchClusterConfig(self):  # pragma: no cover
        return AwsElasticsearchDomainElasticsearchClusterConfigDetails.make_one(
            self.boto3_raw_data["ElasticsearchClusterConfig"]
        )

    @cached_property
    def EncryptionAtRestOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainEncryptionAtRestOptions.make_one(
            self.boto3_raw_data["EncryptionAtRestOptions"]
        )

    @cached_property
    def LogPublishingOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainLogPublishingOptions.make_one(
            self.boto3_raw_data["LogPublishingOptions"]
        )

    @cached_property
    def NodeToNodeEncryptionOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainNodeToNodeEncryptionOptions.make_one(
            self.boto3_raw_data["NodeToNodeEncryptionOptions"]
        )

    @cached_property
    def ServiceSoftwareOptions(self):  # pragma: no cover
        return AwsElasticsearchDomainServiceSoftwareOptions.make_one(
            self.boto3_raw_data["ServiceSoftwareOptions"]
        )

    VPCOptions = field("VPCOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElasticsearchDomainDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElasticsearchDomainDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerDetailsOutput:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")

    @cached_property
    def BackendServerDescriptions(self):  # pragma: no cover
        return AwsElbLoadBalancerBackendServerDescriptionOutput.make_many(
            self.boto3_raw_data["BackendServerDescriptions"]
        )

    CanonicalHostedZoneName = field("CanonicalHostedZoneName")
    CanonicalHostedZoneNameID = field("CanonicalHostedZoneNameID")
    CreatedTime = field("CreatedTime")
    DnsName = field("DnsName")

    @cached_property
    def HealthCheck(self):  # pragma: no cover
        return AwsElbLoadBalancerHealthCheck.make_one(
            self.boto3_raw_data["HealthCheck"]
        )

    @cached_property
    def Instances(self):  # pragma: no cover
        return AwsElbLoadBalancerInstance.make_many(self.boto3_raw_data["Instances"])

    @cached_property
    def ListenerDescriptions(self):  # pragma: no cover
        return AwsElbLoadBalancerListenerDescriptionOutput.make_many(
            self.boto3_raw_data["ListenerDescriptions"]
        )

    @cached_property
    def LoadBalancerAttributes(self):  # pragma: no cover
        return AwsElbLoadBalancerAttributesOutput.make_one(
            self.boto3_raw_data["LoadBalancerAttributes"]
        )

    LoadBalancerName = field("LoadBalancerName")

    @cached_property
    def Policies(self):  # pragma: no cover
        return AwsElbLoadBalancerPoliciesOutput.make_one(
            self.boto3_raw_data["Policies"]
        )

    Scheme = field("Scheme")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def SourceSecurityGroup(self):  # pragma: no cover
        return AwsElbLoadBalancerSourceSecurityGroup.make_one(
            self.boto3_raw_data["SourceSecurityGroup"]
        )

    Subnets = field("Subnets")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointRoutingConfigDetails:
    boto3_raw_data: "type_defs.AwsEventsEndpointRoutingConfigDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FailoverConfig(self):  # pragma: no cover
        return AwsEventsEndpointRoutingConfigFailoverConfigDetails.make_one(
            self.boto3_raw_data["FailoverConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEventsEndpointRoutingConfigDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEndpointRoutingConfigDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesMalwareProtectionDetails:
    boto3_raw_data: (
        "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ScanEc2InstanceWithFindings(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesMalwareProtectionScanEc2InstanceWithFindingsDetails.make_one(
            self.boto3_raw_data["ScanEc2InstanceWithFindings"]
        )

    ServiceRole = field("ServiceRole")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsGuardDutyDetectorDataSourcesMalwareProtectionDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamAccessKeyDetails:
    boto3_raw_data: "type_defs.AwsIamAccessKeyDetailsTypeDef" = dataclasses.field()

    UserName = field("UserName")
    Status = field("Status")
    CreatedAt = field("CreatedAt")
    PrincipalId = field("PrincipalId")
    PrincipalType = field("PrincipalType")
    PrincipalName = field("PrincipalName")
    AccountId = field("AccountId")
    AccessKeyId = field("AccessKeyId")

    @cached_property
    def SessionContext(self):  # pragma: no cover
        return AwsIamAccessKeySessionContext.make_one(
            self.boto3_raw_data["SessionContext"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamAccessKeyDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamAccessKeyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamRoleDetailsOutput:
    boto3_raw_data: "type_defs.AwsIamRoleDetailsOutputTypeDef" = dataclasses.field()

    AssumeRolePolicyDocument = field("AssumeRolePolicyDocument")

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")

    @cached_property
    def InstanceProfileList(self):  # pragma: no cover
        return AwsIamInstanceProfileOutput.make_many(
            self.boto3_raw_data["InstanceProfileList"]
        )

    @cached_property
    def PermissionsBoundary(self):  # pragma: no cover
        return AwsIamPermissionsBoundary.make_one(
            self.boto3_raw_data["PermissionsBoundary"]
        )

    RoleId = field("RoleId")
    RoleName = field("RoleName")

    @cached_property
    def RolePolicyList(self):  # pragma: no cover
        return AwsIamRolePolicy.make_many(self.boto3_raw_data["RolePolicyList"])

    MaxSessionDuration = field("MaxSessionDuration")
    Path = field("Path")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsIamRoleDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamRoleDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionDetailsOutput:
    boto3_raw_data: "type_defs.AwsLambdaFunctionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Code(self):  # pragma: no cover
        return AwsLambdaFunctionCode.make_one(self.boto3_raw_data["Code"])

    CodeSha256 = field("CodeSha256")

    @cached_property
    def DeadLetterConfig(self):  # pragma: no cover
        return AwsLambdaFunctionDeadLetterConfig.make_one(
            self.boto3_raw_data["DeadLetterConfig"]
        )

    @cached_property
    def Environment(self):  # pragma: no cover
        return AwsLambdaFunctionEnvironmentOutput.make_one(
            self.boto3_raw_data["Environment"]
        )

    FunctionName = field("FunctionName")
    Handler = field("Handler")
    KmsKeyArn = field("KmsKeyArn")
    LastModified = field("LastModified")

    @cached_property
    def Layers(self):  # pragma: no cover
        return AwsLambdaFunctionLayer.make_many(self.boto3_raw_data["Layers"])

    MasterArn = field("MasterArn")
    MemorySize = field("MemorySize")
    RevisionId = field("RevisionId")
    Role = field("Role")
    Runtime = field("Runtime")
    Timeout = field("Timeout")

    @cached_property
    def TracingConfig(self):  # pragma: no cover
        return AwsLambdaFunctionTracingConfig.make_one(
            self.boto3_raw_data["TracingConfig"]
        )

    @cached_property
    def VpcConfig(self):  # pragma: no cover
        return AwsLambdaFunctionVpcConfigOutput.make_one(
            self.boto3_raw_data["VpcConfig"]
        )

    Version = field("Version")
    Architectures = field("Architectures")
    PackageType = field("PackageType")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Sasl(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationSaslDetails.make_one(
            self.boto3_raw_data["Sasl"]
        )

    @cached_property
    def Unauthenticated(self):  # pragma: no cover
        return (
            AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetails.make_one(
                self.boto3_raw_data["Unauthenticated"]
            )
        )

    @cached_property
    def Tls(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationTlsDetailsOutput.make_one(
            self.boto3_raw_data["Tls"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoClientAuthenticationDetails:
    boto3_raw_data: (
        "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Sasl(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationSaslDetails.make_one(
            self.boto3_raw_data["Sasl"]
        )

    @cached_property
    def Unauthenticated(self):  # pragma: no cover
        return (
            AwsMskClusterClusterInfoClientAuthenticationUnauthenticatedDetails.make_one(
                self.boto3_raw_data["Unauthenticated"]
            )
        )

    Tls = field("Tls")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsMskClusterClusterInfoClientAuthenticationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainDetailsOutput:
    boto3_raw_data: "type_defs.AwsOpenSearchServiceDomainDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AccessPolicies = field("AccessPolicies")
    DomainName = field("DomainName")
    Id = field("Id")
    DomainEndpoint = field("DomainEndpoint")
    EngineVersion = field("EngineVersion")

    @cached_property
    def EncryptionAtRestOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails.make_one(
            self.boto3_raw_data["EncryptionAtRestOptions"]
        )

    @cached_property
    def NodeToNodeEncryptionOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails.make_one(
            self.boto3_raw_data["NodeToNodeEncryptionOptions"]
        )

    @cached_property
    def ServiceSoftwareOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails.make_one(
            self.boto3_raw_data["ServiceSoftwareOptions"]
        )

    @cached_property
    def ClusterConfig(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainClusterConfigDetails.make_one(
            self.boto3_raw_data["ClusterConfig"]
        )

    @cached_property
    def DomainEndpointOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainDomainEndpointOptionsDetails.make_one(
            self.boto3_raw_data["DomainEndpointOptions"]
        )

    @cached_property
    def VpcOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainVpcOptionsDetailsOutput.make_one(
            self.boto3_raw_data["VpcOptions"]
        )

    @cached_property
    def LogPublishingOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainLogPublishingOptionsDetails.make_one(
            self.boto3_raw_data["LogPublishingOptions"]
        )

    DomainEndpoints = field("DomainEndpoints")

    @cached_property
    def AdvancedSecurityOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails.make_one(
            self.boto3_raw_data["AdvancedSecurityOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsOpenSearchServiceDomainDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsOpenSearchServiceDomainDetails:
    boto3_raw_data: "type_defs.AwsOpenSearchServiceDomainDetailsTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    AccessPolicies = field("AccessPolicies")
    DomainName = field("DomainName")
    Id = field("Id")
    DomainEndpoint = field("DomainEndpoint")
    EngineVersion = field("EngineVersion")

    @cached_property
    def EncryptionAtRestOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails.make_one(
            self.boto3_raw_data["EncryptionAtRestOptions"]
        )

    @cached_property
    def NodeToNodeEncryptionOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails.make_one(
            self.boto3_raw_data["NodeToNodeEncryptionOptions"]
        )

    @cached_property
    def ServiceSoftwareOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails.make_one(
            self.boto3_raw_data["ServiceSoftwareOptions"]
        )

    @cached_property
    def ClusterConfig(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainClusterConfigDetails.make_one(
            self.boto3_raw_data["ClusterConfig"]
        )

    @cached_property
    def DomainEndpointOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainDomainEndpointOptionsDetails.make_one(
            self.boto3_raw_data["DomainEndpointOptions"]
        )

    VpcOptions = field("VpcOptions")

    @cached_property
    def LogPublishingOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainLogPublishingOptionsDetails.make_one(
            self.boto3_raw_data["LogPublishingOptions"]
        )

    DomainEndpoints = field("DomainEndpoints")

    @cached_property
    def AdvancedSecurityOptions(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails.make_one(
            self.boto3_raw_data["AdvancedSecurityOptions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsOpenSearchServiceDomainDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsOpenSearchServiceDomainDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbClusterSnapshotDetails:
    boto3_raw_data: "type_defs.AwsRdsDbClusterSnapshotDetailsTypeDef" = (
        dataclasses.field()
    )

    AvailabilityZones = field("AvailabilityZones")
    SnapshotCreateTime = field("SnapshotCreateTime")
    Engine = field("Engine")
    AllocatedStorage = field("AllocatedStorage")
    Status = field("Status")
    Port = field("Port")
    VpcId = field("VpcId")
    ClusterCreateTime = field("ClusterCreateTime")
    MasterUsername = field("MasterUsername")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    SnapshotType = field("SnapshotType")
    PercentProgress = field("PercentProgress")
    StorageEncrypted = field("StorageEncrypted")
    KmsKeyId = field("KmsKeyId")
    DbClusterIdentifier = field("DbClusterIdentifier")
    DbClusterSnapshotIdentifier = field("DbClusterSnapshotIdentifier")
    IamDatabaseAuthenticationEnabled = field("IamDatabaseAuthenticationEnabled")
    DbClusterSnapshotAttributes = field("DbClusterSnapshotAttributes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbClusterSnapshotDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbClusterSnapshotDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSubnetGroupOutput:
    boto3_raw_data: "type_defs.AwsRdsDbSubnetGroupOutputTypeDef" = dataclasses.field()

    DbSubnetGroupName = field("DbSubnetGroupName")
    DbSubnetGroupDescription = field("DbSubnetGroupDescription")
    VpcId = field("VpcId")
    SubnetGroupStatus = field("SubnetGroupStatus")

    @cached_property
    def Subnets(self):  # pragma: no cover
        return AwsRdsDbSubnetGroupSubnet.make_many(self.boto3_raw_data["Subnets"])

    DbSubnetGroupArn = field("DbSubnetGroupArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSubnetGroupOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSubnetGroupOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbSubnetGroup:
    boto3_raw_data: "type_defs.AwsRdsDbSubnetGroupTypeDef" = dataclasses.field()

    DbSubnetGroupName = field("DbSubnetGroupName")
    DbSubnetGroupDescription = field("DbSubnetGroupDescription")
    VpcId = field("VpcId")
    SubnetGroupStatus = field("SubnetGroupStatus")

    @cached_property
    def Subnets(self):  # pragma: no cover
        return AwsRdsDbSubnetGroupSubnet.make_many(self.boto3_raw_data["Subnets"])

    DbSubnetGroupArn = field("DbSubnetGroupArn")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbSubnetGroupTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbSubnetGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbPendingModifiedValues:
    boto3_raw_data: "type_defs.AwsRdsDbPendingModifiedValuesTypeDef" = (
        dataclasses.field()
    )

    DbInstanceClass = field("DbInstanceClass")
    AllocatedStorage = field("AllocatedStorage")
    MasterUserPassword = field("MasterUserPassword")
    Port = field("Port")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    MultiAZ = field("MultiAZ")
    EngineVersion = field("EngineVersion")
    LicenseModel = field("LicenseModel")
    Iops = field("Iops")
    DbInstanceIdentifier = field("DbInstanceIdentifier")
    StorageType = field("StorageType")
    CaCertificateIdentifier = field("CaCertificateIdentifier")
    DbSubnetGroupName = field("DbSubnetGroupName")
    PendingCloudWatchLogsExports = field("PendingCloudWatchLogsExports")

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbPendingModifiedValuesTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbPendingModifiedValuesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterDetailsOutput:
    boto3_raw_data: "type_defs.AwsRedshiftClusterDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    AllowVersionUpgrade = field("AllowVersionUpgrade")
    AutomatedSnapshotRetentionPeriod = field("AutomatedSnapshotRetentionPeriod")
    AvailabilityZone = field("AvailabilityZone")
    ClusterAvailabilityStatus = field("ClusterAvailabilityStatus")
    ClusterCreateTime = field("ClusterCreateTime")
    ClusterIdentifier = field("ClusterIdentifier")

    @cached_property
    def ClusterNodes(self):  # pragma: no cover
        return AwsRedshiftClusterClusterNode.make_many(
            self.boto3_raw_data["ClusterNodes"]
        )

    @cached_property
    def ClusterParameterGroups(self):  # pragma: no cover
        return AwsRedshiftClusterClusterParameterGroupOutput.make_many(
            self.boto3_raw_data["ClusterParameterGroups"]
        )

    ClusterPublicKey = field("ClusterPublicKey")
    ClusterRevisionNumber = field("ClusterRevisionNumber")

    @cached_property
    def ClusterSecurityGroups(self):  # pragma: no cover
        return AwsRedshiftClusterClusterSecurityGroup.make_many(
            self.boto3_raw_data["ClusterSecurityGroups"]
        )

    @cached_property
    def ClusterSnapshotCopyStatus(self):  # pragma: no cover
        return AwsRedshiftClusterClusterSnapshotCopyStatus.make_one(
            self.boto3_raw_data["ClusterSnapshotCopyStatus"]
        )

    ClusterStatus = field("ClusterStatus")
    ClusterSubnetGroupName = field("ClusterSubnetGroupName")
    ClusterVersion = field("ClusterVersion")
    DBName = field("DBName")

    @cached_property
    def DeferredMaintenanceWindows(self):  # pragma: no cover
        return AwsRedshiftClusterDeferredMaintenanceWindow.make_many(
            self.boto3_raw_data["DeferredMaintenanceWindows"]
        )

    @cached_property
    def ElasticIpStatus(self):  # pragma: no cover
        return AwsRedshiftClusterElasticIpStatus.make_one(
            self.boto3_raw_data["ElasticIpStatus"]
        )

    ElasticResizeNumberOfNodeOptions = field("ElasticResizeNumberOfNodeOptions")
    Encrypted = field("Encrypted")

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return AwsRedshiftClusterEndpoint.make_one(self.boto3_raw_data["Endpoint"])

    EnhancedVpcRouting = field("EnhancedVpcRouting")
    ExpectedNextSnapshotScheduleTime = field("ExpectedNextSnapshotScheduleTime")
    ExpectedNextSnapshotScheduleTimeStatus = field(
        "ExpectedNextSnapshotScheduleTimeStatus"
    )

    @cached_property
    def HsmStatus(self):  # pragma: no cover
        return AwsRedshiftClusterHsmStatus.make_one(self.boto3_raw_data["HsmStatus"])

    @cached_property
    def IamRoles(self):  # pragma: no cover
        return AwsRedshiftClusterIamRole.make_many(self.boto3_raw_data["IamRoles"])

    KmsKeyId = field("KmsKeyId")
    MaintenanceTrackName = field("MaintenanceTrackName")
    ManualSnapshotRetentionPeriod = field("ManualSnapshotRetentionPeriod")
    MasterUsername = field("MasterUsername")
    NextMaintenanceWindowStartTime = field("NextMaintenanceWindowStartTime")
    NodeType = field("NodeType")
    NumberOfNodes = field("NumberOfNodes")
    PendingActions = field("PendingActions")

    @cached_property
    def PendingModifiedValues(self):  # pragma: no cover
        return AwsRedshiftClusterPendingModifiedValues.make_one(
            self.boto3_raw_data["PendingModifiedValues"]
        )

    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    PubliclyAccessible = field("PubliclyAccessible")

    @cached_property
    def ResizeInfo(self):  # pragma: no cover
        return AwsRedshiftClusterResizeInfo.make_one(self.boto3_raw_data["ResizeInfo"])

    @cached_property
    def RestoreStatus(self):  # pragma: no cover
        return AwsRedshiftClusterRestoreStatus.make_one(
            self.boto3_raw_data["RestoreStatus"]
        )

    SnapshotScheduleIdentifier = field("SnapshotScheduleIdentifier")
    SnapshotScheduleState = field("SnapshotScheduleState")
    VpcId = field("VpcId")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRedshiftClusterVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    @cached_property
    def LoggingStatus(self):  # pragma: no cover
        return AwsRedshiftClusterLoggingStatus.make_one(
            self.boto3_raw_data["LoggingStatus"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53HostedZoneDetailsOutput:
    boto3_raw_data: "type_defs.AwsRoute53HostedZoneDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def HostedZone(self):  # pragma: no cover
        return AwsRoute53HostedZoneObjectDetails.make_one(
            self.boto3_raw_data["HostedZone"]
        )

    @cached_property
    def Vpcs(self):  # pragma: no cover
        return AwsRoute53HostedZoneVpcDetails.make_many(self.boto3_raw_data["Vpcs"])

    NameServers = field("NameServers")

    @cached_property
    def QueryLoggingConfig(self):  # pragma: no cover
        return AwsRoute53QueryLoggingConfigDetails.make_one(
            self.boto3_raw_data["QueryLoggingConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsRoute53HostedZoneDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53HostedZoneDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRoute53HostedZoneDetails:
    boto3_raw_data: "type_defs.AwsRoute53HostedZoneDetailsTypeDef" = dataclasses.field()

    @cached_property
    def HostedZone(self):  # pragma: no cover
        return AwsRoute53HostedZoneObjectDetails.make_one(
            self.boto3_raw_data["HostedZone"]
        )

    @cached_property
    def Vpcs(self):  # pragma: no cover
        return AwsRoute53HostedZoneVpcDetails.make_many(self.boto3_raw_data["Vpcs"])

    NameServers = field("NameServers")

    @cached_property
    def QueryLoggingConfig(self):  # pragma: no cover
        return AwsRoute53QueryLoggingConfigDetails.make_one(
            self.boto3_raw_data["QueryLoggingConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRoute53HostedZoneDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRoute53HostedZoneDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsOutput:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsOutputTypeDef" = (dataclasses.field())

    @cached_property
    def Operands(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails.make_many(
            self.boto3_raw_data["Operands"]
        )

    Prefix = field("Prefix")

    @cached_property
    def Tag(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails.make_one(
            self.boto3_raw_data["Tag"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsTypeDef" = (dataclasses.field())

    @cached_property
    def Operands(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails.make_many(
            self.boto3_raw_data["Operands"]
        )

    Prefix = field("Prefix")

    @cached_property
    def Tag(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails.make_one(
            self.boto3_raw_data["Tag"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationFilterOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketNotificationConfigurationFilterOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def S3KeyFilter(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationS3KeyFilterOutput.make_one(
            self.boto3_raw_data["S3KeyFilter"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationFilterOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketNotificationConfigurationFilterOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketObjectLockConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketObjectLockConfigurationTypeDef" = (
        dataclasses.field()
    )

    ObjectLockEnabled = field("ObjectLockEnabled")

    @cached_property
    def Rule(self):  # pragma: no cover
        return AwsS3BucketObjectLockConfigurationRuleDetails.make_one(
            self.boto3_raw_data["Rule"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketObjectLockConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketObjectLockConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketServerSideEncryptionConfigurationOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketServerSideEncryptionConfigurationOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsS3BucketServerSideEncryptionRule.make_many(
            self.boto3_raw_data["Rules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketServerSideEncryptionConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketServerSideEncryptionConfigurationOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketServerSideEncryptionConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketServerSideEncryptionConfigurationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsS3BucketServerSideEncryptionRule.make_many(
            self.boto3_raw_data["Rules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketServerSideEncryptionConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketServerSideEncryptionConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfigurationOutput:
    boto3_raw_data: "type_defs.AwsS3BucketWebsiteConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    ErrorDocument = field("ErrorDocument")
    IndexDocumentSuffix = field("IndexDocumentSuffix")

    @cached_property
    def RedirectAllRequestsTo(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRedirectTo.make_one(
            self.boto3_raw_data["RedirectAllRequestsTo"]
        )

    @cached_property
    def RoutingRules(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRoutingRule.make_many(
            self.boto3_raw_data["RoutingRules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketWebsiteConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketWebsiteConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketWebsiteConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketWebsiteConfigurationTypeDef" = (
        dataclasses.field()
    )

    ErrorDocument = field("ErrorDocument")
    IndexDocumentSuffix = field("IndexDocumentSuffix")

    @cached_property
    def RedirectAllRequestsTo(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRedirectTo.make_one(
            self.boto3_raw_data["RedirectAllRequestsTo"]
        )

    @cached_property
    def RoutingRules(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationRoutingRule.make_many(
            self.boto3_raw_data["RoutingRules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsS3BucketWebsiteConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketWebsiteConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsResponse:
    boto3_raw_data: "type_defs.BatchUpdateFindingsResponseTypeDef" = dataclasses.field()

    @cached_property
    def ProcessedFindings(self):  # pragma: no cover
        return AwsSecurityFindingIdentifier.make_many(
            self.boto3_raw_data["ProcessedFindings"]
        )

    @cached_property
    def UnprocessedFindings(self):  # pragma: no cover
        return BatchUpdateFindingsUnprocessedFinding.make_many(
            self.boto3_raw_data["UnprocessedFindings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchUpdateFindingsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSsmPatchComplianceDetails:
    boto3_raw_data: "type_defs.AwsSsmPatchComplianceDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Patch(self):  # pragma: no cover
        return AwsSsmPatch.make_one(self.boto3_raw_data["Patch"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSsmPatchComplianceDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSsmPatchComplianceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineLoggingConfigurationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Destinations(self):  # pragma: no cover
        return AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetails.make_many(
            self.boto3_raw_data["Destinations"]
        )

    IncludeExecutionData = field("IncludeExecutionData")
    Level = field("Level")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineLoggingConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Destinations(self):  # pragma: no cover
        return AwsStepFunctionStateMachineLoggingConfigurationDestinationsDetails.make_many(
            self.boto3_raw_data["Destinations"]
        )

    IncludeExecutionData = field("IncludeExecutionData")
    Level = field("Level")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsStepFunctionStateMachineLoggingConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RuleGroupId = field("RuleGroupId")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafRegionalRuleGroupRulesDetails.make_many(
            self.boto3_raw_data["Rules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalRuleGroupDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalRuleGroupDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalRuleGroupDetailsTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RuleGroupId = field("RuleGroupId")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafRegionalRuleGroupRulesDetails.make_many(
            self.boto3_raw_data["Rules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafRegionalRuleGroupDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalRuleGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalWebAclDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRegionalWebAclDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DefaultAction = field("DefaultAction")
    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def RulesList(self):  # pragma: no cover
        return AwsWafRegionalWebAclRulesListDetails.make_many(
            self.boto3_raw_data["RulesList"]
        )

    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafRegionalWebAclDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalWebAclDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRegionalWebAclDetails:
    boto3_raw_data: "type_defs.AwsWafRegionalWebAclDetailsTypeDef" = dataclasses.field()

    DefaultAction = field("DefaultAction")
    MetricName = field("MetricName")
    Name = field("Name")

    @cached_property
    def RulesList(self):  # pragma: no cover
        return AwsWafRegionalWebAclRulesListDetails.make_many(
            self.boto3_raw_data["RulesList"]
        )

    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRegionalWebAclDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRegionalWebAclDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafRuleGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    MetricName = field("MetricName")
    Name = field("Name")
    RuleGroupId = field("RuleGroupId")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafRuleGroupRulesDetails.make_many(self.boto3_raw_data["Rules"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRuleGroupDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafRuleGroupDetails:
    boto3_raw_data: "type_defs.AwsWafRuleGroupDetailsTypeDef" = dataclasses.field()

    MetricName = field("MetricName")
    Name = field("Name")
    RuleGroupId = field("RuleGroupId")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafRuleGroupRulesDetails.make_many(self.boto3_raw_data["Rules"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafRuleGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafRuleGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafWebAclDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafWebAclDetailsOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    DefaultAction = field("DefaultAction")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafWebAclRuleOutput.make_many(self.boto3_raw_data["Rules"])

    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafWebAclDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafWebAclDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2ActionAllowDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2ActionAllowDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomRequestHandling(self):  # pragma: no cover
        return AwsWafv2CustomRequestHandlingDetailsOutput.make_one(
            self.boto3_raw_data["CustomRequestHandling"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2ActionAllowDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2ActionAllowDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionCaptchaDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionCaptchaDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomRequestHandling(self):  # pragma: no cover
        return AwsWafv2CustomRequestHandlingDetailsOutput.make_one(
            self.boto3_raw_data["CustomRequestHandling"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2RulesActionCaptchaDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionCaptchaDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionCountDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionCountDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomRequestHandling(self):  # pragma: no cover
        return AwsWafv2CustomRequestHandlingDetailsOutput.make_one(
            self.boto3_raw_data["CustomRequestHandling"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2RulesActionCountDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionCountDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2ActionBlockDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2ActionBlockDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CustomResponse(self):  # pragma: no cover
        return AwsWafv2CustomResponseDetailsOutput.make_one(
            self.boto3_raw_data["CustomResponse"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2ActionBlockDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2ActionBlockDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetStandardsControlAssociationsResponse:
    boto3_raw_data: "type_defs.BatchGetStandardsControlAssociationsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsControlAssociationDetails(self):  # pragma: no cover
        return StandardsControlAssociationDetail.make_many(
            self.boto3_raw_data["StandardsControlAssociationDetails"]
        )

    @cached_property
    def UnprocessedAssociations(self):  # pragma: no cover
        return UnprocessedStandardsControlAssociation.make_many(
            self.boto3_raw_data["UnprocessedAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchGetStandardsControlAssociationsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetStandardsControlAssociationsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateFindingsV2Response:
    boto3_raw_data: "type_defs.BatchUpdateFindingsV2ResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProcessedFindings(self):  # pragma: no cover
        return BatchUpdateFindingsV2ProcessedFinding.make_many(
            self.boto3_raw_data["ProcessedFindings"]
        )

    @cached_property
    def UnprocessedFindings(self):  # pragma: no cover
        return BatchUpdateFindingsV2UnprocessedFinding.make_many(
            self.boto3_raw_data["UnprocessedFindings"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchUpdateFindingsV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateFindingsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateStandardsControlAssociationsResponse:
    boto3_raw_data: (
        "type_defs.BatchUpdateStandardsControlAssociationsResponseTypeDef"
    ) = dataclasses.field()

    @cached_property
    def UnprocessedAssociationUpdates(self):  # pragma: no cover
        return UnprocessedStandardsControlAssociationUpdate.make_many(
            self.boto3_raw_data["UnprocessedAssociationUpdates"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateStandardsControlAssociationsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BatchUpdateStandardsControlAssociationsResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class VulnerabilityOutput:
    boto3_raw_data: "type_defs.VulnerabilityOutputTypeDef" = dataclasses.field()

    Id = field("Id")

    @cached_property
    def VulnerablePackages(self):  # pragma: no cover
        return SoftwarePackage.make_many(self.boto3_raw_data["VulnerablePackages"])

    @cached_property
    def Cvss(self):  # pragma: no cover
        return CvssOutput.make_many(self.boto3_raw_data["Cvss"])

    RelatedVulnerabilities = field("RelatedVulnerabilities")

    @cached_property
    def Vendor(self):  # pragma: no cover
        return VulnerabilityVendor.make_one(self.boto3_raw_data["Vendor"])

    ReferenceUrls = field("ReferenceUrls")
    FixAvailable = field("FixAvailable")
    EpssScore = field("EpssScore")
    ExploitAvailable = field("ExploitAvailable")
    LastKnownExploitAt = field("LastKnownExploitAt")

    @cached_property
    def CodeVulnerabilities(self):  # pragma: no cover
        return VulnerabilityCodeVulnerabilitiesOutput.make_many(
            self.boto3_raw_data["CodeVulnerabilities"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.VulnerabilityOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.VulnerabilityOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterDefinition:
    boto3_raw_data: "type_defs.ParameterDefinitionTypeDef" = dataclasses.field()

    Description = field("Description")

    @cached_property
    def ConfigurationOptions(self):  # pragma: no cover
        return ConfigurationOptions.make_one(
            self.boto3_raw_data["ConfigurationOptions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetConfigurationPolicyAssociationsRequest:
    boto3_raw_data: (
        "type_defs.BatchGetConfigurationPolicyAssociationsRequestTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ConfigurationPolicyAssociationIdentifiers(self):  # pragma: no cover
        return ConfigurationPolicyAssociation.make_many(
            self.boto3_raw_data["ConfigurationPolicyAssociationIdentifiers"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchGetConfigurationPolicyAssociationsRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BatchGetConfigurationPolicyAssociationsRequestTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UnprocessedConfigurationPolicyAssociation:
    boto3_raw_data: "type_defs.UnprocessedConfigurationPolicyAssociationTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ConfigurationPolicyAssociationIdentifiers(self):  # pragma: no cover
        return ConfigurationPolicyAssociation.make_one(
            self.boto3_raw_data["ConfigurationPolicyAssociationIdentifiers"]
        )

    ErrorCode = field("ErrorCode")
    ErrorReason = field("ErrorReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UnprocessedConfigurationPolicyAssociationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UnprocessedConfigurationPolicyAssociationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListConnectorsV2Response:
    boto3_raw_data: "type_defs.ListConnectorsV2ResponseTypeDef" = dataclasses.field()

    @cached_property
    def Connectors(self):  # pragma: no cover
        return ConnectorSummary.make_many(self.boto3_raw_data["Connectors"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ListConnectorsV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListConnectorsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesFindingFiltersOutput:
    boto3_raw_data: "type_defs.AutomationRulesFindingFiltersOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductArn"])

    @cached_property
    def AwsAccountId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountId"])

    @cached_property
    def Id(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Id"])

    @cached_property
    def GeneratorId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["GeneratorId"])

    @cached_property
    def Type(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Type"])

    @cached_property
    def FirstObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["FirstObservedAt"])

    @cached_property
    def LastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["LastObservedAt"])

    @cached_property
    def CreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["CreatedAt"])

    @cached_property
    def UpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["UpdatedAt"])

    @cached_property
    def Confidence(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Confidence"])

    @cached_property
    def Criticality(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Criticality"])

    @cached_property
    def Title(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Title"])

    @cached_property
    def Description(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Description"])

    @cached_property
    def SourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SourceUrl"])

    @cached_property
    def ProductName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductName"])

    @cached_property
    def CompanyName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["CompanyName"])

    @cached_property
    def SeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SeverityLabel"])

    @cached_property
    def ResourceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceType"])

    @cached_property
    def ResourceId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceId"])

    @cached_property
    def ResourcePartition(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourcePartition"])

    @cached_property
    def ResourceRegion(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceRegion"])

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceTags"])

    @cached_property
    def ResourceDetailsOther(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceDetailsOther"])

    @cached_property
    def ComplianceStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ComplianceStatus"])

    @cached_property
    def ComplianceSecurityControlId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlId"]
        )

    @cached_property
    def ComplianceAssociatedStandardsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceAssociatedStandardsId"]
        )

    @cached_property
    def VerificationState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["VerificationState"])

    @cached_property
    def WorkflowStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowStatus"])

    @cached_property
    def RecordState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecordState"])

    @cached_property
    def RelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsProductArn"])

    @cached_property
    def RelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsId"])

    @cached_property
    def NoteText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteText"])

    @cached_property
    def NoteUpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["NoteUpdatedAt"])

    @cached_property
    def NoteUpdatedBy(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteUpdatedBy"])

    @cached_property
    def UserDefinedFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["UserDefinedFields"])

    @cached_property
    def ResourceApplicationArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationArn"])

    @cached_property
    def ResourceApplicationName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationName"])

    @cached_property
    def AwsAccountName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountName"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AutomationRulesFindingFiltersOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesFindingFiltersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesFindingFilters:
    boto3_raw_data: "type_defs.AutomationRulesFindingFiltersTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductArn"])

    @cached_property
    def AwsAccountId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountId"])

    @cached_property
    def Id(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Id"])

    @cached_property
    def GeneratorId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["GeneratorId"])

    @cached_property
    def Type(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Type"])

    @cached_property
    def FirstObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["FirstObservedAt"])

    @cached_property
    def LastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["LastObservedAt"])

    @cached_property
    def CreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["CreatedAt"])

    @cached_property
    def UpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["UpdatedAt"])

    @cached_property
    def Confidence(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Confidence"])

    @cached_property
    def Criticality(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Criticality"])

    @cached_property
    def Title(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Title"])

    @cached_property
    def Description(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Description"])

    @cached_property
    def SourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SourceUrl"])

    @cached_property
    def ProductName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductName"])

    @cached_property
    def CompanyName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["CompanyName"])

    @cached_property
    def SeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SeverityLabel"])

    @cached_property
    def ResourceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceType"])

    @cached_property
    def ResourceId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceId"])

    @cached_property
    def ResourcePartition(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourcePartition"])

    @cached_property
    def ResourceRegion(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceRegion"])

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceTags"])

    @cached_property
    def ResourceDetailsOther(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceDetailsOther"])

    @cached_property
    def ComplianceStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ComplianceStatus"])

    @cached_property
    def ComplianceSecurityControlId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlId"]
        )

    @cached_property
    def ComplianceAssociatedStandardsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceAssociatedStandardsId"]
        )

    @cached_property
    def VerificationState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["VerificationState"])

    @cached_property
    def WorkflowStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowStatus"])

    @cached_property
    def RecordState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecordState"])

    @cached_property
    def RelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsProductArn"])

    @cached_property
    def RelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsId"])

    @cached_property
    def NoteText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteText"])

    @cached_property
    def NoteUpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["NoteUpdatedAt"])

    @cached_property
    def NoteUpdatedBy(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteUpdatedBy"])

    @cached_property
    def UserDefinedFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["UserDefinedFields"])

    @cached_property
    def ResourceApplicationArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationArn"])

    @cached_property
    def ResourceApplicationName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationName"])

    @cached_property
    def AwsAccountName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountName"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AutomationRulesFindingFiltersTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesFindingFiltersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecurityFindingFiltersOutput:
    boto3_raw_data: "type_defs.AwsSecurityFindingFiltersOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductArn"])

    @cached_property
    def AwsAccountId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountId"])

    @cached_property
    def Id(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Id"])

    @cached_property
    def GeneratorId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["GeneratorId"])

    @cached_property
    def Region(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Region"])

    @cached_property
    def Type(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Type"])

    @cached_property
    def FirstObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["FirstObservedAt"])

    @cached_property
    def LastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["LastObservedAt"])

    @cached_property
    def CreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["CreatedAt"])

    @cached_property
    def UpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["UpdatedAt"])

    @cached_property
    def SeverityProduct(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["SeverityProduct"])

    @cached_property
    def SeverityNormalized(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["SeverityNormalized"])

    @cached_property
    def SeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SeverityLabel"])

    @cached_property
    def Confidence(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Confidence"])

    @cached_property
    def Criticality(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Criticality"])

    @cached_property
    def Title(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Title"])

    @cached_property
    def Description(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Description"])

    @cached_property
    def RecommendationText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecommendationText"])

    @cached_property
    def SourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SourceUrl"])

    @cached_property
    def ProductFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ProductFields"])

    @cached_property
    def ProductName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductName"])

    @cached_property
    def CompanyName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["CompanyName"])

    @cached_property
    def UserDefinedFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["UserDefinedFields"])

    @cached_property
    def MalwareName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareName"])

    @cached_property
    def MalwareType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareType"])

    @cached_property
    def MalwarePath(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwarePath"])

    @cached_property
    def MalwareState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareState"])

    @cached_property
    def NetworkDirection(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkDirection"])

    @cached_property
    def NetworkProtocol(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkProtocol"])

    @cached_property
    def NetworkSourceIpV4(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkSourceIpV4"])

    @cached_property
    def NetworkSourceIpV6(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkSourceIpV6"])

    @cached_property
    def NetworkSourcePort(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["NetworkSourcePort"])

    @cached_property
    def NetworkSourceDomain(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkSourceDomain"])

    @cached_property
    def NetworkSourceMac(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkSourceMac"])

    @cached_property
    def NetworkDestinationIpV4(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkDestinationIpV4"])

    @cached_property
    def NetworkDestinationIpV6(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkDestinationIpV6"])

    @cached_property
    def NetworkDestinationPort(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["NetworkDestinationPort"])

    @cached_property
    def NetworkDestinationDomain(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkDestinationDomain"])

    @cached_property
    def ProcessName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProcessName"])

    @cached_property
    def ProcessPath(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProcessPath"])

    @cached_property
    def ProcessPid(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["ProcessPid"])

    @cached_property
    def ProcessParentPid(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["ProcessParentPid"])

    @cached_property
    def ProcessLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ProcessLaunchedAt"])

    @cached_property
    def ProcessTerminatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ProcessTerminatedAt"])

    @cached_property
    def ThreatIntelIndicatorType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorType"])

    @cached_property
    def ThreatIntelIndicatorValue(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorValue"])

    @cached_property
    def ThreatIntelIndicatorCategory(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorCategory"]
        )

    @cached_property
    def ThreatIntelIndicatorLastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorLastObservedAt"]
        )

    @cached_property
    def ThreatIntelIndicatorSource(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorSource"])

    @cached_property
    def ThreatIntelIndicatorSourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorSourceUrl"]
        )

    @cached_property
    def ResourceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceType"])

    @cached_property
    def ResourceId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceId"])

    @cached_property
    def ResourcePartition(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourcePartition"])

    @cached_property
    def ResourceRegion(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceRegion"])

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceTags"])

    @cached_property
    def ResourceAwsEc2InstanceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsEc2InstanceType"])

    @cached_property
    def ResourceAwsEc2InstanceImageId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceImageId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIpV4Addresses(self):  # pragma: no cover
        return IpFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIpV4Addresses"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIpV6Addresses(self):  # pragma: no cover
        return IpFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIpV6Addresses"]
        )

    @cached_property
    def ResourceAwsEc2InstanceKeyName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceKeyName"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIamInstanceProfileArn(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIamInstanceProfileArn"]
        )

    @cached_property
    def ResourceAwsEc2InstanceVpcId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceVpcId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceSubnetId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceSubnetId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceLaunchedAt"]
        )

    @cached_property
    def ResourceAwsS3BucketOwnerId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsS3BucketOwnerId"])

    @cached_property
    def ResourceAwsS3BucketOwnerName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsS3BucketOwnerName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyUserName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyUserName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyPrincipalName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyPrincipalName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyStatus(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyStatus"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyCreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyCreatedAt"]
        )

    @cached_property
    def ResourceAwsIamUserUserName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsIamUserUserName"])

    @cached_property
    def ResourceContainerName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerName"])

    @cached_property
    def ResourceContainerImageId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerImageId"])

    @cached_property
    def ResourceContainerImageName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerImageName"])

    @cached_property
    def ResourceContainerLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ResourceContainerLaunchedAt"])

    @cached_property
    def ResourceDetailsOther(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceDetailsOther"])

    @cached_property
    def ComplianceStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ComplianceStatus"])

    @cached_property
    def VerificationState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["VerificationState"])

    @cached_property
    def WorkflowState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowState"])

    @cached_property
    def WorkflowStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowStatus"])

    @cached_property
    def RecordState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecordState"])

    @cached_property
    def RelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsProductArn"])

    @cached_property
    def RelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsId"])

    @cached_property
    def NoteText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteText"])

    @cached_property
    def NoteUpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["NoteUpdatedAt"])

    @cached_property
    def NoteUpdatedBy(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteUpdatedBy"])

    @cached_property
    def Keyword(self):  # pragma: no cover
        return KeywordFilter.make_many(self.boto3_raw_data["Keyword"])

    @cached_property
    def FindingProviderFieldsConfidence(self):  # pragma: no cover
        return NumberFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsConfidence"]
        )

    @cached_property
    def FindingProviderFieldsCriticality(self):  # pragma: no cover
        return NumberFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsCriticality"]
        )

    @cached_property
    def FindingProviderFieldsRelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsRelatedFindingsId"]
        )

    @cached_property
    def FindingProviderFieldsRelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsRelatedFindingsProductArn"]
        )

    @cached_property
    def FindingProviderFieldsSeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsSeverityLabel"]
        )

    @cached_property
    def FindingProviderFieldsSeverityOriginal(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsSeverityOriginal"]
        )

    @cached_property
    def FindingProviderFieldsTypes(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["FindingProviderFieldsTypes"])

    @cached_property
    def Sample(self):  # pragma: no cover
        return BooleanFilter.make_many(self.boto3_raw_data["Sample"])

    @cached_property
    def ComplianceSecurityControlId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlId"]
        )

    @cached_property
    def ComplianceAssociatedStandardsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceAssociatedStandardsId"]
        )

    @cached_property
    def VulnerabilitiesExploitAvailable(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["VulnerabilitiesExploitAvailable"]
        )

    @cached_property
    def VulnerabilitiesFixAvailable(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["VulnerabilitiesFixAvailable"]
        )

    @cached_property
    def ComplianceSecurityControlParametersName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlParametersName"]
        )

    @cached_property
    def ComplianceSecurityControlParametersValue(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlParametersValue"]
        )

    @cached_property
    def AwsAccountName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountName"])

    @cached_property
    def ResourceApplicationName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationName"])

    @cached_property
    def ResourceApplicationArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationArn"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsSecurityFindingFiltersOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecurityFindingFiltersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecurityFindingFilters:
    boto3_raw_data: "type_defs.AwsSecurityFindingFiltersTypeDef" = dataclasses.field()

    @cached_property
    def ProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductArn"])

    @cached_property
    def AwsAccountId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountId"])

    @cached_property
    def Id(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Id"])

    @cached_property
    def GeneratorId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["GeneratorId"])

    @cached_property
    def Region(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Region"])

    @cached_property
    def Type(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Type"])

    @cached_property
    def FirstObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["FirstObservedAt"])

    @cached_property
    def LastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["LastObservedAt"])

    @cached_property
    def CreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["CreatedAt"])

    @cached_property
    def UpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["UpdatedAt"])

    @cached_property
    def SeverityProduct(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["SeverityProduct"])

    @cached_property
    def SeverityNormalized(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["SeverityNormalized"])

    @cached_property
    def SeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SeverityLabel"])

    @cached_property
    def Confidence(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Confidence"])

    @cached_property
    def Criticality(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["Criticality"])

    @cached_property
    def Title(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Title"])

    @cached_property
    def Description(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["Description"])

    @cached_property
    def RecommendationText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecommendationText"])

    @cached_property
    def SourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["SourceUrl"])

    @cached_property
    def ProductFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ProductFields"])

    @cached_property
    def ProductName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProductName"])

    @cached_property
    def CompanyName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["CompanyName"])

    @cached_property
    def UserDefinedFields(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["UserDefinedFields"])

    @cached_property
    def MalwareName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareName"])

    @cached_property
    def MalwareType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareType"])

    @cached_property
    def MalwarePath(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwarePath"])

    @cached_property
    def MalwareState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["MalwareState"])

    @cached_property
    def NetworkDirection(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkDirection"])

    @cached_property
    def NetworkProtocol(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkProtocol"])

    @cached_property
    def NetworkSourceIpV4(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkSourceIpV4"])

    @cached_property
    def NetworkSourceIpV6(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkSourceIpV6"])

    @cached_property
    def NetworkSourcePort(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["NetworkSourcePort"])

    @cached_property
    def NetworkSourceDomain(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkSourceDomain"])

    @cached_property
    def NetworkSourceMac(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkSourceMac"])

    @cached_property
    def NetworkDestinationIpV4(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkDestinationIpV4"])

    @cached_property
    def NetworkDestinationIpV6(self):  # pragma: no cover
        return IpFilter.make_many(self.boto3_raw_data["NetworkDestinationIpV6"])

    @cached_property
    def NetworkDestinationPort(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["NetworkDestinationPort"])

    @cached_property
    def NetworkDestinationDomain(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NetworkDestinationDomain"])

    @cached_property
    def ProcessName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProcessName"])

    @cached_property
    def ProcessPath(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ProcessPath"])

    @cached_property
    def ProcessPid(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["ProcessPid"])

    @cached_property
    def ProcessParentPid(self):  # pragma: no cover
        return NumberFilter.make_many(self.boto3_raw_data["ProcessParentPid"])

    @cached_property
    def ProcessLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ProcessLaunchedAt"])

    @cached_property
    def ProcessTerminatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ProcessTerminatedAt"])

    @cached_property
    def ThreatIntelIndicatorType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorType"])

    @cached_property
    def ThreatIntelIndicatorValue(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorValue"])

    @cached_property
    def ThreatIntelIndicatorCategory(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorCategory"]
        )

    @cached_property
    def ThreatIntelIndicatorLastObservedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorLastObservedAt"]
        )

    @cached_property
    def ThreatIntelIndicatorSource(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ThreatIntelIndicatorSource"])

    @cached_property
    def ThreatIntelIndicatorSourceUrl(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ThreatIntelIndicatorSourceUrl"]
        )

    @cached_property
    def ResourceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceType"])

    @cached_property
    def ResourceId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceId"])

    @cached_property
    def ResourcePartition(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourcePartition"])

    @cached_property
    def ResourceRegion(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceRegion"])

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceTags"])

    @cached_property
    def ResourceAwsEc2InstanceType(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsEc2InstanceType"])

    @cached_property
    def ResourceAwsEc2InstanceImageId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceImageId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIpV4Addresses(self):  # pragma: no cover
        return IpFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIpV4Addresses"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIpV6Addresses(self):  # pragma: no cover
        return IpFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIpV6Addresses"]
        )

    @cached_property
    def ResourceAwsEc2InstanceKeyName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceKeyName"]
        )

    @cached_property
    def ResourceAwsEc2InstanceIamInstanceProfileArn(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceIamInstanceProfileArn"]
        )

    @cached_property
    def ResourceAwsEc2InstanceVpcId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceVpcId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceSubnetId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceSubnetId"]
        )

    @cached_property
    def ResourceAwsEc2InstanceLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ResourceAwsEc2InstanceLaunchedAt"]
        )

    @cached_property
    def ResourceAwsS3BucketOwnerId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsS3BucketOwnerId"])

    @cached_property
    def ResourceAwsS3BucketOwnerName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsS3BucketOwnerName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyUserName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyUserName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyPrincipalName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyPrincipalName"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyStatus(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyStatus"]
        )

    @cached_property
    def ResourceAwsIamAccessKeyCreatedAt(self):  # pragma: no cover
        return DateFilter.make_many(
            self.boto3_raw_data["ResourceAwsIamAccessKeyCreatedAt"]
        )

    @cached_property
    def ResourceAwsIamUserUserName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceAwsIamUserUserName"])

    @cached_property
    def ResourceContainerName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerName"])

    @cached_property
    def ResourceContainerImageId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerImageId"])

    @cached_property
    def ResourceContainerImageName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceContainerImageName"])

    @cached_property
    def ResourceContainerLaunchedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["ResourceContainerLaunchedAt"])

    @cached_property
    def ResourceDetailsOther(self):  # pragma: no cover
        return MapFilter.make_many(self.boto3_raw_data["ResourceDetailsOther"])

    @cached_property
    def ComplianceStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ComplianceStatus"])

    @cached_property
    def VerificationState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["VerificationState"])

    @cached_property
    def WorkflowState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowState"])

    @cached_property
    def WorkflowStatus(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["WorkflowStatus"])

    @cached_property
    def RecordState(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RecordState"])

    @cached_property
    def RelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsProductArn"])

    @cached_property
    def RelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["RelatedFindingsId"])

    @cached_property
    def NoteText(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteText"])

    @cached_property
    def NoteUpdatedAt(self):  # pragma: no cover
        return DateFilter.make_many(self.boto3_raw_data["NoteUpdatedAt"])

    @cached_property
    def NoteUpdatedBy(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["NoteUpdatedBy"])

    @cached_property
    def Keyword(self):  # pragma: no cover
        return KeywordFilter.make_many(self.boto3_raw_data["Keyword"])

    @cached_property
    def FindingProviderFieldsConfidence(self):  # pragma: no cover
        return NumberFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsConfidence"]
        )

    @cached_property
    def FindingProviderFieldsCriticality(self):  # pragma: no cover
        return NumberFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsCriticality"]
        )

    @cached_property
    def FindingProviderFieldsRelatedFindingsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsRelatedFindingsId"]
        )

    @cached_property
    def FindingProviderFieldsRelatedFindingsProductArn(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsRelatedFindingsProductArn"]
        )

    @cached_property
    def FindingProviderFieldsSeverityLabel(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsSeverityLabel"]
        )

    @cached_property
    def FindingProviderFieldsSeverityOriginal(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["FindingProviderFieldsSeverityOriginal"]
        )

    @cached_property
    def FindingProviderFieldsTypes(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["FindingProviderFieldsTypes"])

    @cached_property
    def Sample(self):  # pragma: no cover
        return BooleanFilter.make_many(self.boto3_raw_data["Sample"])

    @cached_property
    def ComplianceSecurityControlId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlId"]
        )

    @cached_property
    def ComplianceAssociatedStandardsId(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceAssociatedStandardsId"]
        )

    @cached_property
    def VulnerabilitiesExploitAvailable(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["VulnerabilitiesExploitAvailable"]
        )

    @cached_property
    def VulnerabilitiesFixAvailable(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["VulnerabilitiesFixAvailable"]
        )

    @cached_property
    def ComplianceSecurityControlParametersName(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlParametersName"]
        )

    @cached_property
    def ComplianceSecurityControlParametersValue(self):  # pragma: no cover
        return StringFilter.make_many(
            self.boto3_raw_data["ComplianceSecurityControlParametersValue"]
        )

    @cached_property
    def AwsAccountName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["AwsAccountName"])

    @cached_property
    def ResourceApplicationName(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationName"])

    @cached_property
    def ResourceApplicationArn(self):  # pragma: no cover
        return StringFilter.make_many(self.boto3_raw_data["ResourceApplicationArn"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSecurityFindingFiltersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecurityFindingFiltersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfDateFilter:
    boto3_raw_data: "type_defs.OcsfDateFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return DateFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OcsfDateFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OcsfDateFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesDateFilter:
    boto3_raw_data: "type_defs.ResourcesDateFilterTypeDef" = dataclasses.field()

    FieldName = field("FieldName")

    @cached_property
    def Filter(self):  # pragma: no cover
        return DateFilter.make_one(self.boto3_raw_data["Filter"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcesDateFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesDateFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingHistoryResponse:
    boto3_raw_data: "type_defs.GetFindingHistoryResponseTypeDef" = dataclasses.field()

    @cached_property
    def Records(self):  # pragma: no cover
        return FindingHistoryRecord.make_many(self.boto3_raw_data["Records"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingHistoryResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingHistoryResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingStatisticsV2Response:
    boto3_raw_data: "type_defs.GetFindingStatisticsV2ResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupByResults(self):  # pragma: no cover
        return GroupByResult.make_many(self.boto3_raw_data["GroupByResults"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetFindingStatisticsV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingStatisticsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetResourcesStatisticsV2Response:
    boto3_raw_data: "type_defs.GetResourcesStatisticsV2ResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupByResults(self):  # pragma: no cover
        return GroupByResult.make_many(self.boto3_raw_data["GroupByResults"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetResourcesStatisticsV2ResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetResourcesStatisticsV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInsightResultsResponse:
    boto3_raw_data: "type_defs.GetInsightResultsResponseTypeDef" = dataclasses.field()

    @cached_property
    def InsightResults(self):  # pragma: no cover
        return InsightResults.make_one(self.boto3_raw_data["InsightResults"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInsightResultsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInsightResultsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateConnectorV2Request:
    boto3_raw_data: "type_defs.UpdateConnectorV2RequestTypeDef" = dataclasses.field()

    ConnectorId = field("ConnectorId")
    ClientSecret = field("ClientSecret")
    Description = field("Description")

    @cached_property
    def Provider(self):  # pragma: no cover
        return ProviderUpdateConfiguration.make_one(self.boto3_raw_data["Provider"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateConnectorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateConnectorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkHeaderOutput:
    boto3_raw_data: "type_defs.NetworkHeaderOutputTypeDef" = dataclasses.field()

    Protocol = field("Protocol")

    @cached_property
    def Destination(self):  # pragma: no cover
        return NetworkPathComponentDetailsOutput.make_one(
            self.boto3_raw_data["Destination"]
        )

    @cached_property
    def Source(self):  # pragma: no cover
        return NetworkPathComponentDetailsOutput.make_one(self.boto3_raw_data["Source"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkHeaderOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkHeaderOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OccurrencesOutput:
    boto3_raw_data: "type_defs.OccurrencesOutputTypeDef" = dataclasses.field()

    @cached_property
    def LineRanges(self):  # pragma: no cover
        return Range.make_many(self.boto3_raw_data["LineRanges"])

    @cached_property
    def OffsetRanges(self):  # pragma: no cover
        return Range.make_many(self.boto3_raw_data["OffsetRanges"])

    @cached_property
    def Pages(self):  # pragma: no cover
        return Page.make_many(self.boto3_raw_data["Pages"])

    @cached_property
    def Records(self):  # pragma: no cover
        return Record.make_many(self.boto3_raw_data["Records"])

    @cached_property
    def Cells(self):  # pragma: no cover
        return Cell.make_many(self.boto3_raw_data["Cells"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OccurrencesOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OccurrencesOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Occurrences:
    boto3_raw_data: "type_defs.OccurrencesTypeDef" = dataclasses.field()

    @cached_property
    def LineRanges(self):  # pragma: no cover
        return Range.make_many(self.boto3_raw_data["LineRanges"])

    @cached_property
    def OffsetRanges(self):  # pragma: no cover
        return Range.make_many(self.boto3_raw_data["OffsetRanges"])

    @cached_property
    def Pages(self):  # pragma: no cover
        return Page.make_many(self.boto3_raw_data["Pages"])

    @cached_property
    def Records(self):  # pragma: no cover
        return Record.make_many(self.boto3_raw_data["Records"])

    @cached_property
    def Cells(self):  # pragma: no cover
        return Cell.make_many(self.boto3_raw_data["Cells"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.OccurrencesTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.OccurrencesTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlCustomParameterOutput:
    boto3_raw_data: "type_defs.SecurityControlCustomParameterOutputTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")
    Parameters = field("Parameters")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SecurityControlCustomParameterOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlCustomParameterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControl:
    boto3_raw_data: "type_defs.SecurityControlTypeDef" = dataclasses.field()

    SecurityControlId = field("SecurityControlId")
    SecurityControlArn = field("SecurityControlArn")
    Title = field("Title")
    Description = field("Description")
    RemediationUrl = field("RemediationUrl")
    SeverityRating = field("SeverityRating")
    SecurityControlStatus = field("SecurityControlStatus")
    UpdateStatus = field("UpdateStatus")
    Parameters = field("Parameters")
    LastUpdateReason = field("LastUpdateReason")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SecurityControlTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SecurityControlTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ParameterConfiguration:
    boto3_raw_data: "type_defs.ParameterConfigurationTypeDef" = dataclasses.field()

    ValueType = field("ValueType")
    Value = field("Value")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ParameterConfigurationTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ParameterConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateConnectorV2Request:
    boto3_raw_data: "type_defs.CreateConnectorV2RequestTypeDef" = dataclasses.field()

    Name = field("Name")

    @cached_property
    def Provider(self):  # pragma: no cover
        return ProviderConfiguration.make_one(self.boto3_raw_data["Provider"])

    Description = field("Description")
    KmsKeyArn = field("KmsKeyArn")
    Tags = field("Tags")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateConnectorV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateConnectorV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConnectorV2Response:
    boto3_raw_data: "type_defs.GetConnectorV2ResponseTypeDef" = dataclasses.field()

    ConnectorArn = field("ConnectorArn")
    ConnectorId = field("ConnectorId")
    Name = field("Name")
    Description = field("Description")
    KmsKeyArn = field("KmsKeyArn")
    CreatedAt = field("CreatedAt")
    LastUpdatedAt = field("LastUpdatedAt")

    @cached_property
    def Health(self):  # pragma: no cover
        return HealthCheck.make_one(self.boto3_raw_data["Health"])

    @cached_property
    def ProviderDetail(self):  # pragma: no cover
        return ProviderDetail.make_one(self.boto3_raw_data["ProviderDetail"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetConnectorV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConnectorV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceResult:
    boto3_raw_data: "type_defs.ResourceResultTypeDef" = dataclasses.field()

    ResourceId = field("ResourceId")
    AccountId = field("AccountId")
    Region = field("Region")
    ResourceDetailCaptureTimeDt = field("ResourceDetailCaptureTimeDt")
    ResourceConfig = field("ResourceConfig")
    ResourceArn = field("ResourceArn")
    ResourceCategory = field("ResourceCategory")
    ResourceType = field("ResourceType")
    ResourceName = field("ResourceName")
    ResourceCreationTimeDt = field("ResourceCreationTimeDt")

    @cached_property
    def FindingsSummary(self):  # pragma: no cover
        return ResourceFindingsSummary.make_many(self.boto3_raw_data["FindingsSummary"])

    @cached_property
    def ResourceTags(self):  # pragma: no cover
        return ResourceTag.make_many(self.boto3_raw_data["ResourceTags"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceResultTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceResultTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatefulRulesDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceStatefulRulesDetailsTypeDef" = (
        dataclasses.field()
    )

    Action = field("Action")

    @cached_property
    def Header(self):  # pragma: no cover
        return RuleGroupSourceStatefulRulesHeaderDetails.make_one(
            self.boto3_raw_data["Header"]
        )

    RuleOptions = field("RuleOptions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatefulRulesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatefulRulesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleDefinitionOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceStatelessRuleDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    Actions = field("Actions")

    @cached_property
    def MatchAttributes(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesOutput.make_one(
            self.boto3_raw_data["MatchAttributes"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatelessRuleDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleMatchAttributes:
    boto3_raw_data: "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DestinationPorts(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts.make_many(
            self.boto3_raw_data["DestinationPorts"]
        )

    @cached_property
    def Destinations(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesDestinations.make_many(
            self.boto3_raw_data["Destinations"]
        )

    Protocols = field("Protocols")

    @cached_property
    def SourcePorts(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesSourcePorts.make_many(
            self.boto3_raw_data["SourcePorts"]
        )

    @cached_property
    def Sources(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleMatchAttributesSources.make_many(
            self.boto3_raw_data["Sources"]
        )

    TcpFlags = field("TcpFlags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleMatchAttributesTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatelessRuleMatchAttributesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupVariables:
    boto3_raw_data: "type_defs.RuleGroupVariablesTypeDef" = dataclasses.field()

    IpSets = field("IpSets")
    PortSets = field("PortSets")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupVariablesTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupVariablesTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Compliance:
    boto3_raw_data: "type_defs.ComplianceTypeDef" = dataclasses.field()

    Status = field("Status")
    RelatedRequirements = field("RelatedRequirements")

    @cached_property
    def StatusReasons(self):  # pragma: no cover
        return StatusReason.make_many(self.boto3_raw_data["StatusReasons"])

    SecurityControlId = field("SecurityControlId")

    @cached_property
    def AssociatedStandards(self):  # pragma: no cover
        return AssociatedStandard.make_many(self.boto3_raw_data["AssociatedStandards"])

    SecurityControlParameters = field("SecurityControlParameters")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ComplianceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ComplianceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DescribeStandardsResponse:
    boto3_raw_data: "type_defs.DescribeStandardsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Standards(self):  # pragma: no cover
        return Standard.make_many(self.boto3_raw_data["Standards"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DescribeStandardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DescribeStandardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchDisableStandardsResponse:
    boto3_raw_data: "type_defs.BatchDisableStandardsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsSubscriptions(self):  # pragma: no cover
        return StandardsSubscription.make_many(
            self.boto3_raw_data["StandardsSubscriptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchDisableStandardsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchDisableStandardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchEnableStandardsResponse:
    boto3_raw_data: "type_defs.BatchEnableStandardsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def StandardsSubscriptions(self):  # pragma: no cover
        return StandardsSubscription.make_many(
            self.boto3_raw_data["StandardsSubscriptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchEnableStandardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchEnableStandardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetEnabledStandardsResponse:
    boto3_raw_data: "type_defs.GetEnabledStandardsResponseTypeDef" = dataclasses.field()

    @cached_property
    def StandardsSubscriptions(self):  # pragma: no cover
        return StandardsSubscription.make_many(
            self.boto3_raw_data["StandardsSubscriptions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetEnabledStandardsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetEnabledStandardsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatelessCustomActionDefinitionOutput:
    boto3_raw_data: "type_defs.StatelessCustomActionDefinitionOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def PublishMetricAction(self):  # pragma: no cover
        return StatelessCustomPublishMetricActionOutput.make_one(
            self.boto3_raw_data["PublishMetricAction"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.StatelessCustomActionDefinitionOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatelessCustomActionDefinitionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortProbeActionOutput:
    boto3_raw_data: "type_defs.PortProbeActionOutputTypeDef" = dataclasses.field()

    @cached_property
    def PortProbeDetails(self):  # pragma: no cover
        return PortProbeDetail.make_many(self.boto3_raw_data["PortProbeDetails"])

    Blocked = field("Blocked")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.PortProbeActionOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.PortProbeActionOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PortProbeAction:
    boto3_raw_data: "type_defs.PortProbeActionTypeDef" = dataclasses.field()

    @cached_property
    def PortProbeDetails(self):  # pragma: no cover
        return PortProbeDetail.make_many(self.boto3_raw_data["PortProbeDetails"])

    Blocked = field("Blocked")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PortProbeActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PortProbeActionTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SequenceOutput:
    boto3_raw_data: "type_defs.SequenceOutputTypeDef" = dataclasses.field()

    Uid = field("Uid")

    @cached_property
    def Actors(self):  # pragma: no cover
        return Actor.make_many(self.boto3_raw_data["Actors"])

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return NetworkEndpoint.make_many(self.boto3_raw_data["Endpoints"])

    @cached_property
    def Signals(self):  # pragma: no cover
        return SignalOutput.make_many(self.boto3_raw_data["Signals"])

    @cached_property
    def SequenceIndicators(self):  # pragma: no cover
        return IndicatorOutput.make_many(self.boto3_raw_data["SequenceIndicators"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SequenceOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SequenceOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesAction:
    boto3_raw_data: "type_defs.AutomationRulesActionTypeDef" = dataclasses.field()

    Type = field("Type")
    FindingFieldsUpdate = field("FindingFieldsUpdate")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesActionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesActionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAthenaWorkGroupDetails:
    boto3_raw_data: "type_defs.AwsAthenaWorkGroupDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Description = field("Description")
    State = field("State")

    @cached_property
    def Configuration(self):  # pragma: no cover
        return AwsAthenaWorkGroupConfigurationDetails.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsAthenaWorkGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAthenaWorkGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    LaunchConfigurationName = field("LaunchConfigurationName")
    LoadBalancerNames = field("LoadBalancerNames")
    HealthCheckType = field("HealthCheckType")
    HealthCheckGracePeriod = field("HealthCheckGracePeriod")
    CreatedTime = field("CreatedTime")

    @cached_property
    def MixedInstancesPolicy(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsOutput.make_one(
            self.boto3_raw_data["MixedInstancesPolicy"]
        )

    @cached_property
    def AvailabilityZones(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails.make_many(
            self.boto3_raw_data["AvailabilityZones"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    CapacityRebalance = field("CapacityRebalance")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAutoScalingAutoScalingGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails:
    boto3_raw_data: (
        "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def InstancesDistribution(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails.make_one(
            self.boto3_raw_data["InstancesDistribution"]
        )

    LaunchTemplate = field("LaunchTemplate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanBackupPlanDetailsOutput:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanBackupPlanDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    BackupPlanName = field("BackupPlanName")

    @cached_property
    def AdvancedBackupSettings(self):  # pragma: no cover
        return AwsBackupBackupPlanAdvancedBackupSettingsDetailsOutput.make_many(
            self.boto3_raw_data["AdvancedBackupSettings"]
        )

    @cached_property
    def BackupPlanRule(self):  # pragma: no cover
        return AwsBackupBackupPlanRuleDetailsOutput.make_many(
            self.boto3_raw_data["BackupPlanRule"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanBackupPlanDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanBackupPlanDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateDetailsOutput:
    boto3_raw_data: "type_defs.AwsCertificateManagerCertificateDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    CertificateAuthorityArn = field("CertificateAuthorityArn")
    CreatedAt = field("CreatedAt")
    DomainName = field("DomainName")

    @cached_property
    def DomainValidationOptions(self):  # pragma: no cover
        return AwsCertificateManagerCertificateDomainValidationOptionOutput.make_many(
            self.boto3_raw_data["DomainValidationOptions"]
        )

    @cached_property
    def ExtendedKeyUsages(self):  # pragma: no cover
        return AwsCertificateManagerCertificateExtendedKeyUsage.make_many(
            self.boto3_raw_data["ExtendedKeyUsages"]
        )

    FailureReason = field("FailureReason")
    ImportedAt = field("ImportedAt")
    InUseBy = field("InUseBy")
    IssuedAt = field("IssuedAt")
    Issuer = field("Issuer")
    KeyAlgorithm = field("KeyAlgorithm")

    @cached_property
    def KeyUsages(self):  # pragma: no cover
        return AwsCertificateManagerCertificateKeyUsage.make_many(
            self.boto3_raw_data["KeyUsages"]
        )

    NotAfter = field("NotAfter")
    NotBefore = field("NotBefore")

    @cached_property
    def Options(self):  # pragma: no cover
        return AwsCertificateManagerCertificateOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    RenewalEligibility = field("RenewalEligibility")

    @cached_property
    def RenewalSummary(self):  # pragma: no cover
        return AwsCertificateManagerCertificateRenewalSummaryOutput.make_one(
            self.boto3_raw_data["RenewalSummary"]
        )

    Serial = field("Serial")
    SignatureAlgorithm = field("SignatureAlgorithm")
    Status = field("Status")
    Subject = field("Subject")
    SubjectAlternativeNames = field("SubjectAlternativeNames")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCertificateManagerCertificateDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginsOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Items(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginItemOutput.make_many(
            self.boto3_raw_data["Items"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroupsOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginGroupsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Items(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginGroupOutput.make_many(
            self.boto3_raw_data["Items"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginGroupsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCodeBuildProjectDetails:
    boto3_raw_data: "type_defs.AwsCodeBuildProjectDetailsTypeDef" = dataclasses.field()

    EncryptionKey = field("EncryptionKey")

    @cached_property
    def Artifacts(self):  # pragma: no cover
        return AwsCodeBuildProjectArtifactsDetails.make_many(
            self.boto3_raw_data["Artifacts"]
        )

    Environment = field("Environment")
    Name = field("Name")

    @cached_property
    def Source(self):  # pragma: no cover
        return AwsCodeBuildProjectSource.make_one(self.boto3_raw_data["Source"])

    ServiceRole = field("ServiceRole")

    @cached_property
    def LogsConfig(self):  # pragma: no cover
        return AwsCodeBuildProjectLogsConfigDetails.make_one(
            self.boto3_raw_data["LogsConfig"]
        )

    VpcConfig = field("VpcConfig")

    @cached_property
    def SecondaryArtifacts(self):  # pragma: no cover
        return AwsCodeBuildProjectArtifactsDetails.make_many(
            self.boto3_raw_data["SecondaryArtifacts"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsCodeBuildProjectDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCodeBuildProjectDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableDetailsOutput:
    boto3_raw_data: "type_defs.AwsDynamoDbTableDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AttributeDefinitions(self):  # pragma: no cover
        return AwsDynamoDbTableAttributeDefinition.make_many(
            self.boto3_raw_data["AttributeDefinitions"]
        )

    @cached_property
    def BillingModeSummary(self):  # pragma: no cover
        return AwsDynamoDbTableBillingModeSummary.make_one(
            self.boto3_raw_data["BillingModeSummary"]
        )

    CreationDateTime = field("CreationDateTime")

    @cached_property
    def GlobalSecondaryIndexes(self):  # pragma: no cover
        return AwsDynamoDbTableGlobalSecondaryIndexOutput.make_many(
            self.boto3_raw_data["GlobalSecondaryIndexes"]
        )

    GlobalTableVersion = field("GlobalTableVersion")
    ItemCount = field("ItemCount")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    LatestStreamArn = field("LatestStreamArn")
    LatestStreamLabel = field("LatestStreamLabel")

    @cached_property
    def LocalSecondaryIndexes(self):  # pragma: no cover
        return AwsDynamoDbTableLocalSecondaryIndexOutput.make_many(
            self.boto3_raw_data["LocalSecondaryIndexes"]
        )

    @cached_property
    def ProvisionedThroughput(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughput.make_one(
            self.boto3_raw_data["ProvisionedThroughput"]
        )

    @cached_property
    def Replicas(self):  # pragma: no cover
        return AwsDynamoDbTableReplicaOutput.make_many(self.boto3_raw_data["Replicas"])

    @cached_property
    def RestoreSummary(self):  # pragma: no cover
        return AwsDynamoDbTableRestoreSummary.make_one(
            self.boto3_raw_data["RestoreSummary"]
        )

    @cached_property
    def SseDescription(self):  # pragma: no cover
        return AwsDynamoDbTableSseDescription.make_one(
            self.boto3_raw_data["SseDescription"]
        )

    @cached_property
    def StreamSpecification(self):  # pragma: no cover
        return AwsDynamoDbTableStreamSpecification.make_one(
            self.boto3_raw_data["StreamSpecification"]
        )

    TableId = field("TableId")
    TableName = field("TableName")
    TableSizeBytes = field("TableSizeBytes")
    TableStatus = field("TableStatus")
    DeletionProtectionEnabled = field("DeletionProtectionEnabled")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDetailsOutput:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    LaunchTemplateName = field("LaunchTemplateName")
    Id = field("Id")

    @cached_property
    def LaunchTemplateData(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataDetailsOutput.make_one(
            self.boto3_raw_data["LaunchTemplateData"]
        )

    DefaultVersionNumber = field("DefaultVersionNumber")
    LatestVersionNumber = field("LatestVersionNumber")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2LaunchTemplateDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDataDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDataDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BlockDeviceMappingSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataBlockDeviceMappingSetDetails.make_many(
            self.boto3_raw_data["BlockDeviceMappingSet"]
        )

    @cached_property
    def CapacityReservationSpecification(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCapacityReservationSpecificationDetails.make_one(
            self.boto3_raw_data["CapacityReservationSpecification"]
        )

    @cached_property
    def CpuOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCpuOptionsDetails.make_one(
            self.boto3_raw_data["CpuOptions"]
        )

    @cached_property
    def CreditSpecification(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataCreditSpecificationDetails.make_one(
            self.boto3_raw_data["CreditSpecification"]
        )

    DisableApiStop = field("DisableApiStop")
    DisableApiTermination = field("DisableApiTermination")
    EbsOptimized = field("EbsOptimized")

    @cached_property
    def ElasticGpuSpecificationSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataElasticGpuSpecificationSetDetails.make_many(
            self.boto3_raw_data["ElasticGpuSpecificationSet"]
        )

    @cached_property
    def ElasticInferenceAcceleratorSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataElasticInferenceAcceleratorSetDetails.make_many(
            self.boto3_raw_data["ElasticInferenceAcceleratorSet"]
        )

    @cached_property
    def EnclaveOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataEnclaveOptionsDetails.make_one(
            self.boto3_raw_data["EnclaveOptions"]
        )

    @cached_property
    def HibernationOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataHibernationOptionsDetails.make_one(
            self.boto3_raw_data["HibernationOptions"]
        )

    @cached_property
    def IamInstanceProfile(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataIamInstanceProfileDetails.make_one(
            self.boto3_raw_data["IamInstanceProfile"]
        )

    ImageId = field("ImageId")
    InstanceInitiatedShutdownBehavior = field("InstanceInitiatedShutdownBehavior")

    @cached_property
    def InstanceMarketOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataInstanceMarketOptionsDetails.make_one(
            self.boto3_raw_data["InstanceMarketOptions"]
        )

    InstanceRequirements = field("InstanceRequirements")
    InstanceType = field("InstanceType")
    KernelId = field("KernelId")
    KeyName = field("KeyName")

    @cached_property
    def LicenseSet(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataLicenseSetDetails.make_many(
            self.boto3_raw_data["LicenseSet"]
        )

    @cached_property
    def MaintenanceOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMaintenanceOptionsDetails.make_one(
            self.boto3_raw_data["MaintenanceOptions"]
        )

    @cached_property
    def MetadataOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMetadataOptionsDetails.make_one(
            self.boto3_raw_data["MetadataOptions"]
        )

    @cached_property
    def Monitoring(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataMonitoringDetails.make_one(
            self.boto3_raw_data["Monitoring"]
        )

    NetworkInterfaceSet = field("NetworkInterfaceSet")

    @cached_property
    def Placement(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataPlacementDetails.make_one(
            self.boto3_raw_data["Placement"]
        )

    @cached_property
    def PrivateDnsNameOptions(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDataPrivateDnsNameOptionsDetails.make_one(
            self.boto3_raw_data["PrivateDnsNameOptions"]
        )

    RamDiskId = field("RamDiskId")
    SecurityGroupIdSet = field("SecurityGroupIdSet")
    SecurityGroupSet = field("SecurityGroupSet")
    UserData = field("UserData")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEc2LaunchTemplateDataDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDataDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2SecurityGroupDetails:
    boto3_raw_data: "type_defs.AwsEc2SecurityGroupDetailsTypeDef" = dataclasses.field()

    GroupName = field("GroupName")
    GroupId = field("GroupId")
    OwnerId = field("OwnerId")
    VpcId = field("VpcId")
    IpPermissions = field("IpPermissions")

    @cached_property
    def IpPermissionsEgress(self):  # pragma: no cover
        return AwsEc2SecurityGroupIpPermission.make_many(
            self.boto3_raw_data["IpPermissionsEgress"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2SecurityGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2SecurityGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpcPeeringConnectionDetails:
    boto3_raw_data: "type_defs.AwsEc2VpcPeeringConnectionDetailsTypeDef" = (
        dataclasses.field()
    )

    AccepterVpcInfo = field("AccepterVpcInfo")
    ExpirationTime = field("ExpirationTime")
    RequesterVpcInfo = field("RequesterVpcInfo")

    @cached_property
    def Status(self):  # pragma: no cover
        return AwsEc2VpcPeeringConnectionStatusDetails.make_one(
            self.boto3_raw_data["Status"]
        )

    VpcPeeringConnectionId = field("VpcPeeringConnectionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEc2VpcPeeringConnectionDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpcPeeringConnectionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsClusterDetailsOutputTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    ActiveServicesCount = field("ActiveServicesCount")
    CapacityProviders = field("CapacityProviders")

    @cached_property
    def ClusterSettings(self):  # pragma: no cover
        return AwsEcsClusterClusterSettingsDetails.make_many(
            self.boto3_raw_data["ClusterSettings"]
        )

    @cached_property
    def Configuration(self):  # pragma: no cover
        return AwsEcsClusterConfigurationDetails.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultCapacityProviderStrategy(self):  # pragma: no cover
        return AwsEcsClusterDefaultCapacityProviderStrategyDetails.make_many(
            self.boto3_raw_data["DefaultCapacityProviderStrategy"]
        )

    ClusterName = field("ClusterName")
    RegisteredContainerInstancesCount = field("RegisteredContainerInstancesCount")
    RunningTasksCount = field("RunningTasksCount")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsClusterDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsClusterDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsClusterDetails:
    boto3_raw_data: "type_defs.AwsEcsClusterDetailsTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    ActiveServicesCount = field("ActiveServicesCount")
    CapacityProviders = field("CapacityProviders")

    @cached_property
    def ClusterSettings(self):  # pragma: no cover
        return AwsEcsClusterClusterSettingsDetails.make_many(
            self.boto3_raw_data["ClusterSettings"]
        )

    @cached_property
    def Configuration(self):  # pragma: no cover
        return AwsEcsClusterConfigurationDetails.make_one(
            self.boto3_raw_data["Configuration"]
        )

    @cached_property
    def DefaultCapacityProviderStrategy(self):  # pragma: no cover
        return AwsEcsClusterDefaultCapacityProviderStrategyDetails.make_many(
            self.boto3_raw_data["DefaultCapacityProviderStrategy"]
        )

    ClusterName = field("ClusterName")
    RegisteredContainerInstancesCount = field("RegisteredContainerInstancesCount")
    RunningTasksCount = field("RunningTasksCount")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsClusterDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsClusterDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDetailsTypeDef" = dataclasses.field()

    ClusterArn = field("ClusterArn")
    TaskDefinitionArn = field("TaskDefinitionArn")
    Version = field("Version")
    CreatedAt = field("CreatedAt")
    StartedAt = field("StartedAt")
    StartedBy = field("StartedBy")
    Group = field("Group")

    @cached_property
    def Volumes(self):  # pragma: no cover
        return AwsEcsTaskVolumeDetails.make_many(self.boto3_raw_data["Volumes"])

    Containers = field("Containers")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsEcsTaskDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionDetailsOutput:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ContainerDefinitions(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsDetailsOutput.make_many(
            self.boto3_raw_data["ContainerDefinitions"]
        )

    Cpu = field("Cpu")
    ExecutionRoleArn = field("ExecutionRoleArn")
    Family = field("Family")

    @cached_property
    def InferenceAccelerators(self):  # pragma: no cover
        return AwsEcsTaskDefinitionInferenceAcceleratorsDetails.make_many(
            self.boto3_raw_data["InferenceAccelerators"]
        )

    IpcMode = field("IpcMode")
    Memory = field("Memory")
    NetworkMode = field("NetworkMode")
    PidMode = field("PidMode")

    @cached_property
    def PlacementConstraints(self):  # pragma: no cover
        return AwsEcsTaskDefinitionPlacementConstraintsDetails.make_many(
            self.boto3_raw_data["PlacementConstraints"]
        )

    @cached_property
    def ProxyConfiguration(self):  # pragma: no cover
        return AwsEcsTaskDefinitionProxyConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["ProxyConfiguration"]
        )

    RequiresCompatibilities = field("RequiresCompatibilities")
    TaskRoleArn = field("TaskRoleArn")

    @cached_property
    def Volumes(self):  # pragma: no cover
        return AwsEcsTaskDefinitionVolumesDetailsOutput.make_many(
            self.boto3_raw_data["Volumes"]
        )

    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsElbLoadBalancerDetails:
    boto3_raw_data: "type_defs.AwsElbLoadBalancerDetailsTypeDef" = dataclasses.field()

    AvailabilityZones = field("AvailabilityZones")
    BackendServerDescriptions = field("BackendServerDescriptions")
    CanonicalHostedZoneName = field("CanonicalHostedZoneName")
    CanonicalHostedZoneNameID = field("CanonicalHostedZoneNameID")
    CreatedTime = field("CreatedTime")
    DnsName = field("DnsName")

    @cached_property
    def HealthCheck(self):  # pragma: no cover
        return AwsElbLoadBalancerHealthCheck.make_one(
            self.boto3_raw_data["HealthCheck"]
        )

    @cached_property
    def Instances(self):  # pragma: no cover
        return AwsElbLoadBalancerInstance.make_many(self.boto3_raw_data["Instances"])

    ListenerDescriptions = field("ListenerDescriptions")
    LoadBalancerAttributes = field("LoadBalancerAttributes")
    LoadBalancerName = field("LoadBalancerName")
    Policies = field("Policies")
    Scheme = field("Scheme")
    SecurityGroups = field("SecurityGroups")

    @cached_property
    def SourceSecurityGroup(self):  # pragma: no cover
        return AwsElbLoadBalancerSourceSecurityGroup.make_one(
            self.boto3_raw_data["SourceSecurityGroup"]
        )

    Subnets = field("Subnets")
    VpcId = field("VpcId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsElbLoadBalancerDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsElbLoadBalancerDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointDetailsOutput:
    boto3_raw_data: "type_defs.AwsEventsEndpointDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Description = field("Description")
    EndpointId = field("EndpointId")
    EndpointUrl = field("EndpointUrl")

    @cached_property
    def EventBuses(self):  # pragma: no cover
        return AwsEventsEndpointEventBusesDetails.make_many(
            self.boto3_raw_data["EventBuses"]
        )

    Name = field("Name")

    @cached_property
    def ReplicationConfig(self):  # pragma: no cover
        return AwsEventsEndpointReplicationConfigDetails.make_one(
            self.boto3_raw_data["ReplicationConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def RoutingConfig(self):  # pragma: no cover
        return AwsEventsEndpointRoutingConfigDetails.make_one(
            self.boto3_raw_data["RoutingConfig"]
        )

    State = field("State")
    StateReason = field("StateReason")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsEventsEndpointDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEndpointDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEventsEndpointDetails:
    boto3_raw_data: "type_defs.AwsEventsEndpointDetailsTypeDef" = dataclasses.field()

    Arn = field("Arn")
    Description = field("Description")
    EndpointId = field("EndpointId")
    EndpointUrl = field("EndpointUrl")

    @cached_property
    def EventBuses(self):  # pragma: no cover
        return AwsEventsEndpointEventBusesDetails.make_many(
            self.boto3_raw_data["EventBuses"]
        )

    Name = field("Name")

    @cached_property
    def ReplicationConfig(self):  # pragma: no cover
        return AwsEventsEndpointReplicationConfigDetails.make_one(
            self.boto3_raw_data["ReplicationConfig"]
        )

    RoleArn = field("RoleArn")

    @cached_property
    def RoutingConfig(self):  # pragma: no cover
        return AwsEventsEndpointRoutingConfigDetails.make_one(
            self.boto3_raw_data["RoutingConfig"]
        )

    State = field("State")
    StateReason = field("StateReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEventsEndpointDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEventsEndpointDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDataSourcesDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDataSourcesDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CloudTrail(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesCloudTrailDetails.make_one(
            self.boto3_raw_data["CloudTrail"]
        )

    @cached_property
    def DnsLogs(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesDnsLogsDetails.make_one(
            self.boto3_raw_data["DnsLogs"]
        )

    @cached_property
    def FlowLogs(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesFlowLogsDetails.make_one(
            self.boto3_raw_data["FlowLogs"]
        )

    @cached_property
    def Kubernetes(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesKubernetesDetails.make_one(
            self.boto3_raw_data["Kubernetes"]
        )

    @cached_property
    def MalwareProtection(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesMalwareProtectionDetails.make_one(
            self.boto3_raw_data["MalwareProtection"]
        )

    @cached_property
    def S3Logs(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesS3LogsDetails.make_one(
            self.boto3_raw_data["S3Logs"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDataSourcesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorDataSourcesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsIamRoleDetails:
    boto3_raw_data: "type_defs.AwsIamRoleDetailsTypeDef" = dataclasses.field()

    AssumeRolePolicyDocument = field("AssumeRolePolicyDocument")

    @cached_property
    def AttachedManagedPolicies(self):  # pragma: no cover
        return AwsIamAttachedManagedPolicy.make_many(
            self.boto3_raw_data["AttachedManagedPolicies"]
        )

    CreateDate = field("CreateDate")
    InstanceProfileList = field("InstanceProfileList")

    @cached_property
    def PermissionsBoundary(self):  # pragma: no cover
        return AwsIamPermissionsBoundary.make_one(
            self.boto3_raw_data["PermissionsBoundary"]
        )

    RoleId = field("RoleId")
    RoleName = field("RoleName")

    @cached_property
    def RolePolicyList(self):  # pragma: no cover
        return AwsIamRolePolicy.make_many(self.boto3_raw_data["RolePolicyList"])

    MaxSessionDuration = field("MaxSessionDuration")
    Path = field("Path")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.AwsIamRoleDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsIamRoleDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsLambdaFunctionDetails:
    boto3_raw_data: "type_defs.AwsLambdaFunctionDetailsTypeDef" = dataclasses.field()

    @cached_property
    def Code(self):  # pragma: no cover
        return AwsLambdaFunctionCode.make_one(self.boto3_raw_data["Code"])

    CodeSha256 = field("CodeSha256")

    @cached_property
    def DeadLetterConfig(self):  # pragma: no cover
        return AwsLambdaFunctionDeadLetterConfig.make_one(
            self.boto3_raw_data["DeadLetterConfig"]
        )

    Environment = field("Environment")
    FunctionName = field("FunctionName")
    Handler = field("Handler")
    KmsKeyArn = field("KmsKeyArn")
    LastModified = field("LastModified")

    @cached_property
    def Layers(self):  # pragma: no cover
        return AwsLambdaFunctionLayer.make_many(self.boto3_raw_data["Layers"])

    MasterArn = field("MasterArn")
    MemorySize = field("MemorySize")
    RevisionId = field("RevisionId")
    Role = field("Role")
    Runtime = field("Runtime")
    Timeout = field("Timeout")

    @cached_property
    def TracingConfig(self):  # pragma: no cover
        return AwsLambdaFunctionTracingConfig.make_one(
            self.boto3_raw_data["TracingConfig"]
        )

    VpcConfig = field("VpcConfig")
    Version = field("Version")
    Architectures = field("Architectures")
    PackageType = field("PackageType")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsLambdaFunctionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsLambdaFunctionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoDetailsOutput:
    boto3_raw_data: "type_defs.AwsMskClusterClusterInfoDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EncryptionInfo(self):  # pragma: no cover
        return AwsMskClusterClusterInfoEncryptionInfoDetails.make_one(
            self.boto3_raw_data["EncryptionInfo"]
        )

    CurrentVersion = field("CurrentVersion")
    NumberOfBrokerNodes = field("NumberOfBrokerNodes")
    ClusterName = field("ClusterName")

    @cached_property
    def ClientAuthentication(self):  # pragma: no cover
        return AwsMskClusterClusterInfoClientAuthenticationDetailsOutput.make_one(
            self.boto3_raw_data["ClientAuthentication"]
        )

    EnhancedMonitoring = field("EnhancedMonitoring")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsMskClusterClusterInfoDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsMskClusterClusterInfoDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbInstanceDetailsOutput:
    boto3_raw_data: "type_defs.AwsRdsDbInstanceDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def AssociatedRoles(self):  # pragma: no cover
        return AwsRdsDbInstanceAssociatedRole.make_many(
            self.boto3_raw_data["AssociatedRoles"]
        )

    CACertificateIdentifier = field("CACertificateIdentifier")
    DBClusterIdentifier = field("DBClusterIdentifier")
    DBInstanceIdentifier = field("DBInstanceIdentifier")
    DBInstanceClass = field("DBInstanceClass")
    DbInstancePort = field("DbInstancePort")
    DbiResourceId = field("DbiResourceId")
    DBName = field("DBName")
    DeletionProtection = field("DeletionProtection")

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return AwsRdsDbInstanceEndpoint.make_one(self.boto3_raw_data["Endpoint"])

    Engine = field("Engine")
    EngineVersion = field("EngineVersion")
    IAMDatabaseAuthenticationEnabled = field("IAMDatabaseAuthenticationEnabled")
    InstanceCreateTime = field("InstanceCreateTime")
    KmsKeyId = field("KmsKeyId")
    PubliclyAccessible = field("PubliclyAccessible")
    StorageEncrypted = field("StorageEncrypted")
    TdeCredentialArn = field("TdeCredentialArn")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRdsDbInstanceVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    MultiAz = field("MultiAz")
    EnhancedMonitoringResourceArn = field("EnhancedMonitoringResourceArn")
    DbInstanceStatus = field("DbInstanceStatus")
    MasterUsername = field("MasterUsername")
    AllocatedStorage = field("AllocatedStorage")
    PreferredBackupWindow = field("PreferredBackupWindow")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    DbSecurityGroups = field("DbSecurityGroups")

    @cached_property
    def DbParameterGroups(self):  # pragma: no cover
        return AwsRdsDbParameterGroup.make_many(
            self.boto3_raw_data["DbParameterGroups"]
        )

    AvailabilityZone = field("AvailabilityZone")

    @cached_property
    def DbSubnetGroup(self):  # pragma: no cover
        return AwsRdsDbSubnetGroupOutput.make_one(self.boto3_raw_data["DbSubnetGroup"])

    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")

    @cached_property
    def PendingModifiedValues(self):  # pragma: no cover
        return AwsRdsDbPendingModifiedValuesOutput.make_one(
            self.boto3_raw_data["PendingModifiedValues"]
        )

    LatestRestorableTime = field("LatestRestorableTime")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    ReadReplicaSourceDBInstanceIdentifier = field(
        "ReadReplicaSourceDBInstanceIdentifier"
    )
    ReadReplicaDBInstanceIdentifiers = field("ReadReplicaDBInstanceIdentifiers")
    ReadReplicaDBClusterIdentifiers = field("ReadReplicaDBClusterIdentifiers")
    LicenseModel = field("LicenseModel")
    Iops = field("Iops")

    @cached_property
    def OptionGroupMemberships(self):  # pragma: no cover
        return AwsRdsDbOptionGroupMembership.make_many(
            self.boto3_raw_data["OptionGroupMemberships"]
        )

    CharacterSetName = field("CharacterSetName")
    SecondaryAvailabilityZone = field("SecondaryAvailabilityZone")

    @cached_property
    def StatusInfos(self):  # pragma: no cover
        return AwsRdsDbStatusInfo.make_many(self.boto3_raw_data["StatusInfos"])

    StorageType = field("StorageType")

    @cached_property
    def DomainMemberships(self):  # pragma: no cover
        return AwsRdsDbDomainMembership.make_many(
            self.boto3_raw_data["DomainMemberships"]
        )

    CopyTagsToSnapshot = field("CopyTagsToSnapshot")
    MonitoringInterval = field("MonitoringInterval")
    MonitoringRoleArn = field("MonitoringRoleArn")
    PromotionTier = field("PromotionTier")
    Timezone = field("Timezone")
    PerformanceInsightsEnabled = field("PerformanceInsightsEnabled")
    PerformanceInsightsKmsKeyId = field("PerformanceInsightsKmsKeyId")
    PerformanceInsightsRetentionPeriod = field("PerformanceInsightsRetentionPeriod")
    EnabledCloudWatchLogsExports = field("EnabledCloudWatchLogsExports")

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    @cached_property
    def ListenerEndpoint(self):  # pragma: no cover
        return AwsRdsDbInstanceEndpoint.make_one(
            self.boto3_raw_data["ListenerEndpoint"]
        )

    MaxAllocatedStorage = field("MaxAllocatedStorage")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsRdsDbInstanceDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbInstanceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRedshiftClusterDetails:
    boto3_raw_data: "type_defs.AwsRedshiftClusterDetailsTypeDef" = dataclasses.field()

    AllowVersionUpgrade = field("AllowVersionUpgrade")
    AutomatedSnapshotRetentionPeriod = field("AutomatedSnapshotRetentionPeriod")
    AvailabilityZone = field("AvailabilityZone")
    ClusterAvailabilityStatus = field("ClusterAvailabilityStatus")
    ClusterCreateTime = field("ClusterCreateTime")
    ClusterIdentifier = field("ClusterIdentifier")

    @cached_property
    def ClusterNodes(self):  # pragma: no cover
        return AwsRedshiftClusterClusterNode.make_many(
            self.boto3_raw_data["ClusterNodes"]
        )

    ClusterParameterGroups = field("ClusterParameterGroups")
    ClusterPublicKey = field("ClusterPublicKey")
    ClusterRevisionNumber = field("ClusterRevisionNumber")

    @cached_property
    def ClusterSecurityGroups(self):  # pragma: no cover
        return AwsRedshiftClusterClusterSecurityGroup.make_many(
            self.boto3_raw_data["ClusterSecurityGroups"]
        )

    @cached_property
    def ClusterSnapshotCopyStatus(self):  # pragma: no cover
        return AwsRedshiftClusterClusterSnapshotCopyStatus.make_one(
            self.boto3_raw_data["ClusterSnapshotCopyStatus"]
        )

    ClusterStatus = field("ClusterStatus")
    ClusterSubnetGroupName = field("ClusterSubnetGroupName")
    ClusterVersion = field("ClusterVersion")
    DBName = field("DBName")

    @cached_property
    def DeferredMaintenanceWindows(self):  # pragma: no cover
        return AwsRedshiftClusterDeferredMaintenanceWindow.make_many(
            self.boto3_raw_data["DeferredMaintenanceWindows"]
        )

    @cached_property
    def ElasticIpStatus(self):  # pragma: no cover
        return AwsRedshiftClusterElasticIpStatus.make_one(
            self.boto3_raw_data["ElasticIpStatus"]
        )

    ElasticResizeNumberOfNodeOptions = field("ElasticResizeNumberOfNodeOptions")
    Encrypted = field("Encrypted")

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return AwsRedshiftClusterEndpoint.make_one(self.boto3_raw_data["Endpoint"])

    EnhancedVpcRouting = field("EnhancedVpcRouting")
    ExpectedNextSnapshotScheduleTime = field("ExpectedNextSnapshotScheduleTime")
    ExpectedNextSnapshotScheduleTimeStatus = field(
        "ExpectedNextSnapshotScheduleTimeStatus"
    )

    @cached_property
    def HsmStatus(self):  # pragma: no cover
        return AwsRedshiftClusterHsmStatus.make_one(self.boto3_raw_data["HsmStatus"])

    @cached_property
    def IamRoles(self):  # pragma: no cover
        return AwsRedshiftClusterIamRole.make_many(self.boto3_raw_data["IamRoles"])

    KmsKeyId = field("KmsKeyId")
    MaintenanceTrackName = field("MaintenanceTrackName")
    ManualSnapshotRetentionPeriod = field("ManualSnapshotRetentionPeriod")
    MasterUsername = field("MasterUsername")
    NextMaintenanceWindowStartTime = field("NextMaintenanceWindowStartTime")
    NodeType = field("NodeType")
    NumberOfNodes = field("NumberOfNodes")
    PendingActions = field("PendingActions")

    @cached_property
    def PendingModifiedValues(self):  # pragma: no cover
        return AwsRedshiftClusterPendingModifiedValues.make_one(
            self.boto3_raw_data["PendingModifiedValues"]
        )

    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    PubliclyAccessible = field("PubliclyAccessible")

    @cached_property
    def ResizeInfo(self):  # pragma: no cover
        return AwsRedshiftClusterResizeInfo.make_one(self.boto3_raw_data["ResizeInfo"])

    @cached_property
    def RestoreStatus(self):  # pragma: no cover
        return AwsRedshiftClusterRestoreStatus.make_one(
            self.boto3_raw_data["RestoreStatus"]
        )

    SnapshotScheduleIdentifier = field("SnapshotScheduleIdentifier")
    SnapshotScheduleState = field("SnapshotScheduleState")
    VpcId = field("VpcId")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRedshiftClusterVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    @cached_property
    def LoggingStatus(self):  # pragma: no cover
        return AwsRedshiftClusterLoggingStatus.make_one(
            self.boto3_raw_data["LoggingStatus"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRedshiftClusterDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRedshiftClusterDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsOutput:
    boto3_raw_data: "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsOutputTypeDef" = (dataclasses.field())

    @cached_property
    def Predicate(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetailsOutput.make_one(
            self.boto3_raw_data["Predicate"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationDetailOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketNotificationConfigurationDetailOutputTypeDef"
    ) = dataclasses.field()

    Events = field("Events")

    @cached_property
    def Filter(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationFilterOutput.make_one(
            self.boto3_raw_data["Filter"]
        )

    Destination = field("Destination")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationDetailOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketNotificationConfigurationDetailOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationFilter:
    boto3_raw_data: "type_defs.AwsS3BucketNotificationConfigurationFilterTypeDef" = (
        dataclasses.field()
    )

    S3KeyFilter = field("S3KeyFilter")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationFilterTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketNotificationConfigurationFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineDetailsOutput:
    boto3_raw_data: "type_defs.AwsStepFunctionStateMachineDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Label = field("Label")

    @cached_property
    def LoggingConfiguration(self):  # pragma: no cover
        return AwsStepFunctionStateMachineLoggingConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["LoggingConfiguration"]
        )

    Name = field("Name")
    RoleArn = field("RoleArn")
    StateMachineArn = field("StateMachineArn")
    Status = field("Status")

    @cached_property
    def TracingConfiguration(self):  # pragma: no cover
        return AwsStepFunctionStateMachineTracingConfigurationDetails.make_one(
            self.boto3_raw_data["TracingConfiguration"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsStepFunctionStateMachineDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafWebAclDetails:
    boto3_raw_data: "type_defs.AwsWafWebAclDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    DefaultAction = field("DefaultAction")
    Rules = field("Rules")
    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafWebAclDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafWebAclDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2ActionAllowDetails:
    boto3_raw_data: "type_defs.AwsWafv2ActionAllowDetailsTypeDef" = dataclasses.field()

    CustomRequestHandling = field("CustomRequestHandling")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2ActionAllowDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2ActionAllowDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionCaptchaDetails:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionCaptchaDetailsTypeDef" = (
        dataclasses.field()
    )

    CustomRequestHandling = field("CustomRequestHandling")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2RulesActionCaptchaDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionCaptchaDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionCountDetails:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionCountDetailsTypeDef" = (
        dataclasses.field()
    )

    CustomRequestHandling = field("CustomRequestHandling")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2RulesActionCountDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionCountDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Allow(self):  # pragma: no cover
        return AwsWafv2ActionAllowDetailsOutput.make_one(self.boto3_raw_data["Allow"])

    @cached_property
    def Block(self):  # pragma: no cover
        return AwsWafv2ActionBlockDetailsOutput.make_one(self.boto3_raw_data["Block"])

    @cached_property
    def Captcha(self):  # pragma: no cover
        return AwsWafv2RulesActionCaptchaDetailsOutput.make_one(
            self.boto3_raw_data["Captcha"]
        )

    @cached_property
    def Count(self):  # pragma: no cover
        return AwsWafv2RulesActionCountDetailsOutput.make_one(
            self.boto3_raw_data["Count"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2RulesActionDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclActionDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2WebAclActionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Allow(self):  # pragma: no cover
        return AwsWafv2ActionAllowDetailsOutput.make_one(self.boto3_raw_data["Allow"])

    @cached_property
    def Block(self):  # pragma: no cover
        return AwsWafv2ActionBlockDetailsOutput.make_one(self.boto3_raw_data["Block"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsWafv2WebAclActionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2WebAclActionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2ActionBlockDetails:
    boto3_raw_data: "type_defs.AwsWafv2ActionBlockDetailsTypeDef" = dataclasses.field()

    CustomResponse = field("CustomResponse")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2ActionBlockDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2ActionBlockDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Vulnerability:
    boto3_raw_data: "type_defs.VulnerabilityTypeDef" = dataclasses.field()

    Id = field("Id")

    @cached_property
    def VulnerablePackages(self):  # pragma: no cover
        return SoftwarePackage.make_many(self.boto3_raw_data["VulnerablePackages"])

    Cvss = field("Cvss")
    RelatedVulnerabilities = field("RelatedVulnerabilities")

    @cached_property
    def Vendor(self):  # pragma: no cover
        return VulnerabilityVendor.make_one(self.boto3_raw_data["Vendor"])

    ReferenceUrls = field("ReferenceUrls")
    FixAvailable = field("FixAvailable")
    EpssScore = field("EpssScore")
    ExploitAvailable = field("ExploitAvailable")
    LastKnownExploitAt = field("LastKnownExploitAt")
    CodeVulnerabilities = field("CodeVulnerabilities")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.VulnerabilityTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.VulnerabilityTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlDefinition:
    boto3_raw_data: "type_defs.SecurityControlDefinitionTypeDef" = dataclasses.field()

    SecurityControlId = field("SecurityControlId")
    Title = field("Title")
    Description = field("Description")
    RemediationUrl = field("RemediationUrl")
    SeverityRating = field("SeverityRating")
    CurrentRegionAvailability = field("CurrentRegionAvailability")
    CustomizableProperties = field("CustomizableProperties")
    ParameterDefinitions = field("ParameterDefinitions")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityControlDefinitionTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetConfigurationPolicyAssociationsResponse:
    boto3_raw_data: (
        "type_defs.BatchGetConfigurationPolicyAssociationsResponseTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ConfigurationPolicyAssociations(self):  # pragma: no cover
        return ConfigurationPolicyAssociationSummary.make_many(
            self.boto3_raw_data["ConfigurationPolicyAssociations"]
        )

    @cached_property
    def UnprocessedConfigurationPolicyAssociations(self):  # pragma: no cover
        return UnprocessedConfigurationPolicyAssociation.make_many(
            self.boto3_raw_data["UnprocessedConfigurationPolicyAssociations"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchGetConfigurationPolicyAssociationsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.BatchGetConfigurationPolicyAssociationsResponseTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AutomationRulesConfig:
    boto3_raw_data: "type_defs.AutomationRulesConfigTypeDef" = dataclasses.field()

    RuleArn = field("RuleArn")
    RuleStatus = field("RuleStatus")
    RuleOrder = field("RuleOrder")
    RuleName = field("RuleName")
    Description = field("Description")
    IsTerminal = field("IsTerminal")

    @cached_property
    def Criteria(self):  # pragma: no cover
        return AutomationRulesFindingFiltersOutput.make_one(
            self.boto3_raw_data["Criteria"]
        )

    @cached_property
    def Actions(self):  # pragma: no cover
        return AutomationRulesActionOutput.make_many(self.boto3_raw_data["Actions"])

    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    CreatedBy = field("CreatedBy")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AutomationRulesConfigTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AutomationRulesConfigTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Insight:
    boto3_raw_data: "type_defs.InsightTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")
    Name = field("Name")

    @cached_property
    def Filters(self):  # pragma: no cover
        return AwsSecurityFindingFiltersOutput.make_one(self.boto3_raw_data["Filters"])

    GroupByAttribute = field("GroupByAttribute")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.InsightTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.InsightTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CompositeFilterOutput:
    boto3_raw_data: "type_defs.CompositeFilterOutputTypeDef" = dataclasses.field()

    @cached_property
    def StringFilters(self):  # pragma: no cover
        return OcsfStringFilter.make_many(self.boto3_raw_data["StringFilters"])

    @cached_property
    def DateFilters(self):  # pragma: no cover
        return OcsfDateFilter.make_many(self.boto3_raw_data["DateFilters"])

    @cached_property
    def BooleanFilters(self):  # pragma: no cover
        return OcsfBooleanFilter.make_many(self.boto3_raw_data["BooleanFilters"])

    @cached_property
    def NumberFilters(self):  # pragma: no cover
        return OcsfNumberFilter.make_many(self.boto3_raw_data["NumberFilters"])

    @cached_property
    def MapFilters(self):  # pragma: no cover
        return OcsfMapFilter.make_many(self.boto3_raw_data["MapFilters"])

    Operator = field("Operator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CompositeFilterOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CompositeFilterOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CompositeFilter:
    boto3_raw_data: "type_defs.CompositeFilterTypeDef" = dataclasses.field()

    @cached_property
    def StringFilters(self):  # pragma: no cover
        return OcsfStringFilter.make_many(self.boto3_raw_data["StringFilters"])

    @cached_property
    def DateFilters(self):  # pragma: no cover
        return OcsfDateFilter.make_many(self.boto3_raw_data["DateFilters"])

    @cached_property
    def BooleanFilters(self):  # pragma: no cover
        return OcsfBooleanFilter.make_many(self.boto3_raw_data["BooleanFilters"])

    @cached_property
    def NumberFilters(self):  # pragma: no cover
        return OcsfNumberFilter.make_many(self.boto3_raw_data["NumberFilters"])

    @cached_property
    def MapFilters(self):  # pragma: no cover
        return OcsfMapFilter.make_many(self.boto3_raw_data["MapFilters"])

    Operator = field("Operator")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CompositeFilterTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CompositeFilterTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesCompositeFilter:
    boto3_raw_data: "type_defs.ResourcesCompositeFilterTypeDef" = dataclasses.field()

    @cached_property
    def StringFilters(self):  # pragma: no cover
        return ResourcesStringFilter.make_many(self.boto3_raw_data["StringFilters"])

    @cached_property
    def DateFilters(self):  # pragma: no cover
        return ResourcesDateFilter.make_many(self.boto3_raw_data["DateFilters"])

    @cached_property
    def NumberFilters(self):  # pragma: no cover
        return ResourcesNumberFilter.make_many(self.boto3_raw_data["NumberFilters"])

    @cached_property
    def MapFilters(self):  # pragma: no cover
        return ResourcesMapFilter.make_many(self.boto3_raw_data["MapFilters"])

    Operator = field("Operator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourcesCompositeFilterTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesCompositeFilterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Sequence:
    boto3_raw_data: "type_defs.SequenceTypeDef" = dataclasses.field()

    Uid = field("Uid")

    @cached_property
    def Actors(self):  # pragma: no cover
        return Actor.make_many(self.boto3_raw_data["Actors"])

    @cached_property
    def Endpoints(self):  # pragma: no cover
        return NetworkEndpoint.make_many(self.boto3_raw_data["Endpoints"])

    Signals = field("Signals")
    SequenceIndicators = field("SequenceIndicators")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SequenceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.SequenceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkPathComponentOutput:
    boto3_raw_data: "type_defs.NetworkPathComponentOutputTypeDef" = dataclasses.field()

    ComponentId = field("ComponentId")
    ComponentType = field("ComponentType")

    @cached_property
    def Egress(self):  # pragma: no cover
        return NetworkHeaderOutput.make_one(self.boto3_raw_data["Egress"])

    @cached_property
    def Ingress(self):  # pragma: no cover
        return NetworkHeaderOutput.make_one(self.boto3_raw_data["Ingress"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkPathComponentOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkPathComponentOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkHeader:
    boto3_raw_data: "type_defs.NetworkHeaderTypeDef" = dataclasses.field()

    Protocol = field("Protocol")
    Destination = field("Destination")
    Source = field("Source")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.NetworkHeaderTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.NetworkHeaderTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomDataIdentifiersDetectionsOutput:
    boto3_raw_data: "type_defs.CustomDataIdentifiersDetectionsOutputTypeDef" = (
        dataclasses.field()
    )

    Count = field("Count")
    Arn = field("Arn")
    Name = field("Name")

    @cached_property
    def Occurrences(self):  # pragma: no cover
        return OccurrencesOutput.make_one(self.boto3_raw_data["Occurrences"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomDataIdentifiersDetectionsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomDataIdentifiersDetectionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SensitiveDataDetectionsOutput:
    boto3_raw_data: "type_defs.SensitiveDataDetectionsOutputTypeDef" = (
        dataclasses.field()
    )

    Count = field("Count")
    Type = field("Type")

    @cached_property
    def Occurrences(self):  # pragma: no cover
        return OccurrencesOutput.make_one(self.boto3_raw_data["Occurrences"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SensitiveDataDetectionsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SensitiveDataDetectionsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlsConfigurationOutput:
    boto3_raw_data: "type_defs.SecurityControlsConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    EnabledSecurityControlIdentifiers = field("EnabledSecurityControlIdentifiers")
    DisabledSecurityControlIdentifiers = field("DisabledSecurityControlIdentifiers")

    @cached_property
    def SecurityControlCustomParameters(self):  # pragma: no cover
        return SecurityControlCustomParameterOutput.make_many(
            self.boto3_raw_data["SecurityControlCustomParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.SecurityControlsConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlsConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetSecurityControlsResponse:
    boto3_raw_data: "type_defs.BatchGetSecurityControlsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityControls(self):  # pragma: no cover
        return SecurityControl.make_many(self.boto3_raw_data["SecurityControls"])

    @cached_property
    def UnprocessedIds(self):  # pragma: no cover
        return UnprocessedSecurityControl.make_many(
            self.boto3_raw_data["UnprocessedIds"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchGetSecurityControlsResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetSecurityControlsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlCustomParameter:
    boto3_raw_data: "type_defs.SecurityControlCustomParameterTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")
    Parameters = field("Parameters")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SecurityControlCustomParameterTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlCustomParameterTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetResourcesV2Response:
    boto3_raw_data: "type_defs.GetResourcesV2ResponseTypeDef" = dataclasses.field()

    @cached_property
    def Resources(self):  # pragma: no cover
        return ResourceResult.make_many(self.boto3_raw_data["Resources"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetResourcesV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetResourcesV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRulesDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceStatelessRulesDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Priority = field("Priority")

    @cached_property
    def RuleDefinition(self):  # pragma: no cover
        return RuleGroupSourceStatelessRuleDefinitionOutput.make_one(
            self.boto3_raw_data["RuleDefinition"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRulesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatelessRulesDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyStatelessCustomActionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.FirewallPolicyStatelessCustomActionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def ActionDefinition(self):  # pragma: no cover
        return StatelessCustomActionDefinitionOutput.make_one(
            self.boto3_raw_data["ActionDefinition"]
        )

    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FirewallPolicyStatelessCustomActionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.FirewallPolicyStatelessCustomActionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceCustomActionsDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceCustomActionsDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def ActionDefinition(self):  # pragma: no cover
        return StatelessCustomActionDefinitionOutput.make_one(
            self.boto3_raw_data["ActionDefinition"]
        )

    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceCustomActionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceCustomActionsDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class StatelessCustomActionDefinition:
    boto3_raw_data: "type_defs.StatelessCustomActionDefinitionTypeDef" = (
        dataclasses.field()
    )

    PublishMetricAction = field("PublishMetricAction")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.StatelessCustomActionDefinitionTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.StatelessCustomActionDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ActionOutput:
    boto3_raw_data: "type_defs.ActionOutputTypeDef" = dataclasses.field()

    ActionType = field("ActionType")

    @cached_property
    def NetworkConnectionAction(self):  # pragma: no cover
        return NetworkConnectionAction.make_one(
            self.boto3_raw_data["NetworkConnectionAction"]
        )

    @cached_property
    def AwsApiCallAction(self):  # pragma: no cover
        return AwsApiCallActionOutput.make_one(self.boto3_raw_data["AwsApiCallAction"])

    @cached_property
    def DnsRequestAction(self):  # pragma: no cover
        return DnsRequestAction.make_one(self.boto3_raw_data["DnsRequestAction"])

    @cached_property
    def PortProbeAction(self):  # pragma: no cover
        return PortProbeActionOutput.make_one(self.boto3_raw_data["PortProbeAction"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActionOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActionOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DetectionOutput:
    boto3_raw_data: "type_defs.DetectionOutputTypeDef" = dataclasses.field()

    @cached_property
    def Sequence(self):  # pragma: no cover
        return SequenceOutput.make_one(self.boto3_raw_data["Sequence"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DetectionOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DetectionOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanDetailsOutput:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def BackupPlan(self):  # pragma: no cover
        return AwsBackupBackupPlanBackupPlanDetailsOutput.make_one(
            self.boto3_raw_data["BackupPlan"]
        )

    BackupPlanArn = field("BackupPlanArn")
    BackupPlanId = field("BackupPlanId")
    VersionId = field("VersionId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsBackupBackupPlanDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanBackupPlanDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanBackupPlanDetailsTypeDef" = (
        dataclasses.field()
    )

    BackupPlanName = field("BackupPlanName")
    AdvancedBackupSettings = field("AdvancedBackupSettings")
    BackupPlanRule = field("BackupPlanRule")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsBackupBackupPlanBackupPlanDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanBackupPlanDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCertificateManagerCertificateDetails:
    boto3_raw_data: "type_defs.AwsCertificateManagerCertificateDetailsTypeDef" = (
        dataclasses.field()
    )

    CertificateAuthorityArn = field("CertificateAuthorityArn")
    CreatedAt = field("CreatedAt")
    DomainName = field("DomainName")
    DomainValidationOptions = field("DomainValidationOptions")

    @cached_property
    def ExtendedKeyUsages(self):  # pragma: no cover
        return AwsCertificateManagerCertificateExtendedKeyUsage.make_many(
            self.boto3_raw_data["ExtendedKeyUsages"]
        )

    FailureReason = field("FailureReason")
    ImportedAt = field("ImportedAt")
    InUseBy = field("InUseBy")
    IssuedAt = field("IssuedAt")
    Issuer = field("Issuer")
    KeyAlgorithm = field("KeyAlgorithm")

    @cached_property
    def KeyUsages(self):  # pragma: no cover
        return AwsCertificateManagerCertificateKeyUsage.make_many(
            self.boto3_raw_data["KeyUsages"]
        )

    NotAfter = field("NotAfter")
    NotBefore = field("NotBefore")

    @cached_property
    def Options(self):  # pragma: no cover
        return AwsCertificateManagerCertificateOptions.make_one(
            self.boto3_raw_data["Options"]
        )

    RenewalEligibility = field("RenewalEligibility")
    RenewalSummary = field("RenewalSummary")
    Serial = field("Serial")
    SignatureAlgorithm = field("SignatureAlgorithm")
    Status = field("Status")
    Subject = field("Subject")
    SubjectAlternativeNames = field("SubjectAlternativeNames")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCertificateManagerCertificateDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCertificateManagerCertificateDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionDetailsOutput:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def CacheBehaviors(self):  # pragma: no cover
        return AwsCloudFrontDistributionCacheBehaviorsOutput.make_one(
            self.boto3_raw_data["CacheBehaviors"]
        )

    @cached_property
    def DefaultCacheBehavior(self):  # pragma: no cover
        return AwsCloudFrontDistributionDefaultCacheBehavior.make_one(
            self.boto3_raw_data["DefaultCacheBehavior"]
        )

    DefaultRootObject = field("DefaultRootObject")
    DomainName = field("DomainName")
    ETag = field("ETag")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def Logging(self):  # pragma: no cover
        return AwsCloudFrontDistributionLogging.make_one(self.boto3_raw_data["Logging"])

    @cached_property
    def Origins(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginsOutput.make_one(
            self.boto3_raw_data["Origins"]
        )

    @cached_property
    def OriginGroups(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginGroupsOutput.make_one(
            self.boto3_raw_data["OriginGroups"]
        )

    @cached_property
    def ViewerCertificate(self):  # pragma: no cover
        return AwsCloudFrontDistributionViewerCertificate.make_one(
            self.boto3_raw_data["ViewerCertificate"]
        )

    Status = field("Status")
    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroup:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginGroupTypeDef" = (
        dataclasses.field()
    )

    FailoverCriteria = field("FailoverCriteria")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginGroupTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginItem:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginItemTypeDef" = (
        dataclasses.field()
    )

    DomainName = field("DomainName")
    Id = field("Id")
    OriginPath = field("OriginPath")

    @cached_property
    def S3OriginConfig(self):  # pragma: no cover
        return AwsCloudFrontDistributionOriginS3OriginConfig.make_one(
            self.boto3_raw_data["S3OriginConfig"]
        )

    CustomOriginConfig = field("CustomOriginConfig")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginItemTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsDynamoDbTableDetails:
    boto3_raw_data: "type_defs.AwsDynamoDbTableDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AttributeDefinitions(self):  # pragma: no cover
        return AwsDynamoDbTableAttributeDefinition.make_many(
            self.boto3_raw_data["AttributeDefinitions"]
        )

    @cached_property
    def BillingModeSummary(self):  # pragma: no cover
        return AwsDynamoDbTableBillingModeSummary.make_one(
            self.boto3_raw_data["BillingModeSummary"]
        )

    CreationDateTime = field("CreationDateTime")
    GlobalSecondaryIndexes = field("GlobalSecondaryIndexes")
    GlobalTableVersion = field("GlobalTableVersion")
    ItemCount = field("ItemCount")

    @cached_property
    def KeySchema(self):  # pragma: no cover
        return AwsDynamoDbTableKeySchema.make_many(self.boto3_raw_data["KeySchema"])

    LatestStreamArn = field("LatestStreamArn")
    LatestStreamLabel = field("LatestStreamLabel")
    LocalSecondaryIndexes = field("LocalSecondaryIndexes")

    @cached_property
    def ProvisionedThroughput(self):  # pragma: no cover
        return AwsDynamoDbTableProvisionedThroughput.make_one(
            self.boto3_raw_data["ProvisionedThroughput"]
        )

    Replicas = field("Replicas")

    @cached_property
    def RestoreSummary(self):  # pragma: no cover
        return AwsDynamoDbTableRestoreSummary.make_one(
            self.boto3_raw_data["RestoreSummary"]
        )

    @cached_property
    def SseDescription(self):  # pragma: no cover
        return AwsDynamoDbTableSseDescription.make_one(
            self.boto3_raw_data["SseDescription"]
        )

    @cached_property
    def StreamSpecification(self):  # pragma: no cover
        return AwsDynamoDbTableStreamSpecification.make_one(
            self.boto3_raw_data["StreamSpecification"]
        )

    TableId = field("TableId")
    TableName = field("TableName")
    TableSizeBytes = field("TableSizeBytes")
    TableStatus = field("TableStatus")
    DeletionProtectionEnabled = field("DeletionProtectionEnabled")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsDynamoDbTableDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsDynamoDbTableDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2VpnConnectionDetails:
    boto3_raw_data: "type_defs.AwsEc2VpnConnectionDetailsTypeDef" = dataclasses.field()

    VpnConnectionId = field("VpnConnectionId")
    State = field("State")
    CustomerGatewayId = field("CustomerGatewayId")
    CustomerGatewayConfiguration = field("CustomerGatewayConfiguration")
    Type = field("Type")
    VpnGatewayId = field("VpnGatewayId")
    Category = field("Category")

    @cached_property
    def VgwTelemetry(self):  # pragma: no cover
        return AwsEc2VpnConnectionVgwTelemetryDetails.make_many(
            self.boto3_raw_data["VgwTelemetry"]
        )

    Options = field("Options")

    @cached_property
    def Routes(self):  # pragma: no cover
        return AwsEc2VpnConnectionRoutesDetails.make_many(self.boto3_raw_data["Routes"])

    TransitGatewayId = field("TransitGatewayId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2VpnConnectionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2VpnConnectionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsServiceDetails:
    boto3_raw_data: "type_defs.AwsEcsServiceDetailsTypeDef" = dataclasses.field()

    @cached_property
    def CapacityProviderStrategy(self):  # pragma: no cover
        return AwsEcsServiceCapacityProviderStrategyDetails.make_many(
            self.boto3_raw_data["CapacityProviderStrategy"]
        )

    Cluster = field("Cluster")

    @cached_property
    def DeploymentConfiguration(self):  # pragma: no cover
        return AwsEcsServiceDeploymentConfigurationDetails.make_one(
            self.boto3_raw_data["DeploymentConfiguration"]
        )

    @cached_property
    def DeploymentController(self):  # pragma: no cover
        return AwsEcsServiceDeploymentControllerDetails.make_one(
            self.boto3_raw_data["DeploymentController"]
        )

    DesiredCount = field("DesiredCount")
    EnableEcsManagedTags = field("EnableEcsManagedTags")
    EnableExecuteCommand = field("EnableExecuteCommand")
    HealthCheckGracePeriodSeconds = field("HealthCheckGracePeriodSeconds")
    LaunchType = field("LaunchType")

    @cached_property
    def LoadBalancers(self):  # pragma: no cover
        return AwsEcsServiceLoadBalancersDetails.make_many(
            self.boto3_raw_data["LoadBalancers"]
        )

    Name = field("Name")
    NetworkConfiguration = field("NetworkConfiguration")

    @cached_property
    def PlacementConstraints(self):  # pragma: no cover
        return AwsEcsServicePlacementConstraintsDetails.make_many(
            self.boto3_raw_data["PlacementConstraints"]
        )

    @cached_property
    def PlacementStrategies(self):  # pragma: no cover
        return AwsEcsServicePlacementStrategiesDetails.make_many(
            self.boto3_raw_data["PlacementStrategies"]
        )

    PlatformVersion = field("PlatformVersion")
    PropagateTags = field("PropagateTags")
    Role = field("Role")
    SchedulingStrategy = field("SchedulingStrategy")
    ServiceArn = field("ServiceArn")
    ServiceName = field("ServiceName")

    @cached_property
    def ServiceRegistries(self):  # pragma: no cover
        return AwsEcsServiceServiceRegistriesDetails.make_many(
            self.boto3_raw_data["ServiceRegistries"]
        )

    TaskDefinition = field("TaskDefinition")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsServiceDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsServiceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionContainerDefinitionsDetails:
    boto3_raw_data: (
        "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsTypeDef"
    ) = dataclasses.field()

    Command = field("Command")
    Cpu = field("Cpu")

    @cached_property
    def DependsOn(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails.make_many(
            self.boto3_raw_data["DependsOn"]
        )

    DisableNetworking = field("DisableNetworking")
    DnsSearchDomains = field("DnsSearchDomains")
    DnsServers = field("DnsServers")
    DockerLabels = field("DockerLabels")
    DockerSecurityOptions = field("DockerSecurityOptions")
    EntryPoint = field("EntryPoint")

    @cached_property
    def Environment(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails.make_many(
            self.boto3_raw_data["Environment"]
        )

    @cached_property
    def EnvironmentFiles(self):  # pragma: no cover
        return (
            AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails.make_many(
                self.boto3_raw_data["EnvironmentFiles"]
            )
        )

    Essential = field("Essential")

    @cached_property
    def ExtraHosts(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails.make_many(
            self.boto3_raw_data["ExtraHosts"]
        )

    FirelensConfiguration = field("FirelensConfiguration")
    HealthCheck = field("HealthCheck")
    Hostname = field("Hostname")
    Image = field("Image")
    Interactive = field("Interactive")
    Links = field("Links")
    LinuxParameters = field("LinuxParameters")
    LogConfiguration = field("LogConfiguration")
    Memory = field("Memory")
    MemoryReservation = field("MemoryReservation")

    @cached_property
    def MountPoints(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails.make_many(
            self.boto3_raw_data["MountPoints"]
        )

    Name = field("Name")

    @cached_property
    def PortMappings(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails.make_many(
            self.boto3_raw_data["PortMappings"]
        )

    Privileged = field("Privileged")
    PseudoTerminal = field("PseudoTerminal")
    ReadonlyRootFilesystem = field("ReadonlyRootFilesystem")

    @cached_property
    def RepositoryCredentials(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails.make_one(
            self.boto3_raw_data["RepositoryCredentials"]
        )

    @cached_property
    def ResourceRequirements(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails.make_many(
            self.boto3_raw_data["ResourceRequirements"]
        )

    @cached_property
    def Secrets(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails.make_many(
            self.boto3_raw_data["Secrets"]
        )

    StartTimeout = field("StartTimeout")
    StopTimeout = field("StopTimeout")

    @cached_property
    def SystemControls(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails.make_many(
            self.boto3_raw_data["SystemControls"]
        )

    @cached_property
    def Ulimits(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails.make_many(
            self.boto3_raw_data["Ulimits"]
        )

    User = field("User")

    @cached_property
    def VolumesFrom(self):  # pragma: no cover
        return AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails.make_many(
            self.boto3_raw_data["VolumesFrom"]
        )

    WorkingDirectory = field("WorkingDirectory")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsEcsTaskDefinitionContainerDefinitionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEksClusterDetails:
    boto3_raw_data: "type_defs.AwsEksClusterDetailsTypeDef" = dataclasses.field()

    Arn = field("Arn")
    CertificateAuthorityData = field("CertificateAuthorityData")
    ClusterStatus = field("ClusterStatus")
    Endpoint = field("Endpoint")
    Name = field("Name")
    ResourcesVpcConfig = field("ResourcesVpcConfig")
    RoleArn = field("RoleArn")
    Version = field("Version")
    Logging = field("Logging")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEksClusterDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEksClusterDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDetailsOutput:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesDetails.make_one(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def Features(self):  # pragma: no cover
        return AwsGuardDutyDetectorFeaturesDetails.make_many(
            self.boto3_raw_data["Features"]
        )

    FindingPublishingFrequency = field("FindingPublishingFrequency")
    ServiceRole = field("ServiceRole")
    Status = field("Status")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsGuardDutyDetectorDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsGuardDutyDetectorDetails:
    boto3_raw_data: "type_defs.AwsGuardDutyDetectorDetailsTypeDef" = dataclasses.field()

    @cached_property
    def DataSources(self):  # pragma: no cover
        return AwsGuardDutyDetectorDataSourcesDetails.make_one(
            self.boto3_raw_data["DataSources"]
        )

    @cached_property
    def Features(self):  # pragma: no cover
        return AwsGuardDutyDetectorFeaturesDetails.make_many(
            self.boto3_raw_data["Features"]
        )

    FindingPublishingFrequency = field("FindingPublishingFrequency")
    ServiceRole = field("ServiceRole")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsGuardDutyDetectorDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsGuardDutyDetectorDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterDetailsOutput:
    boto3_raw_data: "type_defs.AwsMskClusterDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def ClusterInfo(self):  # pragma: no cover
        return AwsMskClusterClusterInfoDetailsOutput.make_one(
            self.boto3_raw_data["ClusterInfo"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsMskClusterDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsMskClusterDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterClusterInfoDetails:
    boto3_raw_data: "type_defs.AwsMskClusterClusterInfoDetailsTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def EncryptionInfo(self):  # pragma: no cover
        return AwsMskClusterClusterInfoEncryptionInfoDetails.make_one(
            self.boto3_raw_data["EncryptionInfo"]
        )

    CurrentVersion = field("CurrentVersion")
    NumberOfBrokerNodes = field("NumberOfBrokerNodes")
    ClusterName = field("ClusterName")
    ClientAuthentication = field("ClientAuthentication")
    EnhancedMonitoring = field("EnhancedMonitoring")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsMskClusterClusterInfoDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsMskClusterClusterInfoDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsRdsDbInstanceDetails:
    boto3_raw_data: "type_defs.AwsRdsDbInstanceDetailsTypeDef" = dataclasses.field()

    @cached_property
    def AssociatedRoles(self):  # pragma: no cover
        return AwsRdsDbInstanceAssociatedRole.make_many(
            self.boto3_raw_data["AssociatedRoles"]
        )

    CACertificateIdentifier = field("CACertificateIdentifier")
    DBClusterIdentifier = field("DBClusterIdentifier")
    DBInstanceIdentifier = field("DBInstanceIdentifier")
    DBInstanceClass = field("DBInstanceClass")
    DbInstancePort = field("DbInstancePort")
    DbiResourceId = field("DbiResourceId")
    DBName = field("DBName")
    DeletionProtection = field("DeletionProtection")

    @cached_property
    def Endpoint(self):  # pragma: no cover
        return AwsRdsDbInstanceEndpoint.make_one(self.boto3_raw_data["Endpoint"])

    Engine = field("Engine")
    EngineVersion = field("EngineVersion")
    IAMDatabaseAuthenticationEnabled = field("IAMDatabaseAuthenticationEnabled")
    InstanceCreateTime = field("InstanceCreateTime")
    KmsKeyId = field("KmsKeyId")
    PubliclyAccessible = field("PubliclyAccessible")
    StorageEncrypted = field("StorageEncrypted")
    TdeCredentialArn = field("TdeCredentialArn")

    @cached_property
    def VpcSecurityGroups(self):  # pragma: no cover
        return AwsRdsDbInstanceVpcSecurityGroup.make_many(
            self.boto3_raw_data["VpcSecurityGroups"]
        )

    MultiAz = field("MultiAz")
    EnhancedMonitoringResourceArn = field("EnhancedMonitoringResourceArn")
    DbInstanceStatus = field("DbInstanceStatus")
    MasterUsername = field("MasterUsername")
    AllocatedStorage = field("AllocatedStorage")
    PreferredBackupWindow = field("PreferredBackupWindow")
    BackupRetentionPeriod = field("BackupRetentionPeriod")
    DbSecurityGroups = field("DbSecurityGroups")

    @cached_property
    def DbParameterGroups(self):  # pragma: no cover
        return AwsRdsDbParameterGroup.make_many(
            self.boto3_raw_data["DbParameterGroups"]
        )

    AvailabilityZone = field("AvailabilityZone")
    DbSubnetGroup = field("DbSubnetGroup")
    PreferredMaintenanceWindow = field("PreferredMaintenanceWindow")
    PendingModifiedValues = field("PendingModifiedValues")
    LatestRestorableTime = field("LatestRestorableTime")
    AutoMinorVersionUpgrade = field("AutoMinorVersionUpgrade")
    ReadReplicaSourceDBInstanceIdentifier = field(
        "ReadReplicaSourceDBInstanceIdentifier"
    )
    ReadReplicaDBInstanceIdentifiers = field("ReadReplicaDBInstanceIdentifiers")
    ReadReplicaDBClusterIdentifiers = field("ReadReplicaDBClusterIdentifiers")
    LicenseModel = field("LicenseModel")
    Iops = field("Iops")

    @cached_property
    def OptionGroupMemberships(self):  # pragma: no cover
        return AwsRdsDbOptionGroupMembership.make_many(
            self.boto3_raw_data["OptionGroupMemberships"]
        )

    CharacterSetName = field("CharacterSetName")
    SecondaryAvailabilityZone = field("SecondaryAvailabilityZone")

    @cached_property
    def StatusInfos(self):  # pragma: no cover
        return AwsRdsDbStatusInfo.make_many(self.boto3_raw_data["StatusInfos"])

    StorageType = field("StorageType")

    @cached_property
    def DomainMemberships(self):  # pragma: no cover
        return AwsRdsDbDomainMembership.make_many(
            self.boto3_raw_data["DomainMemberships"]
        )

    CopyTagsToSnapshot = field("CopyTagsToSnapshot")
    MonitoringInterval = field("MonitoringInterval")
    MonitoringRoleArn = field("MonitoringRoleArn")
    PromotionTier = field("PromotionTier")
    Timezone = field("Timezone")
    PerformanceInsightsEnabled = field("PerformanceInsightsEnabled")
    PerformanceInsightsKmsKeyId = field("PerformanceInsightsKmsKeyId")
    PerformanceInsightsRetentionPeriod = field("PerformanceInsightsRetentionPeriod")
    EnabledCloudWatchLogsExports = field("EnabledCloudWatchLogsExports")

    @cached_property
    def ProcessorFeatures(self):  # pragma: no cover
        return AwsRdsDbProcessorFeature.make_many(
            self.boto3_raw_data["ProcessorFeatures"]
        )

    @cached_property
    def ListenerEndpoint(self):  # pragma: no cover
        return AwsRdsDbInstanceEndpoint.make_one(
            self.boto3_raw_data["ListenerEndpoint"]
        )

    MaxAllocatedStorage = field("MaxAllocatedStorage")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsRdsDbInstanceDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsRdsDbInstanceDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AbortIncompleteMultipartUpload(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails.make_one(
            self.boto3_raw_data["AbortIncompleteMultipartUpload"]
        )

    ExpirationDate = field("ExpirationDate")
    ExpirationInDays = field("ExpirationInDays")
    ExpiredObjectDeleteMarker = field("ExpiredObjectDeleteMarker")

    @cached_property
    def Filter(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsOutput.make_one(
            self.boto3_raw_data["Filter"]
        )

    ID = field("ID")
    NoncurrentVersionExpirationInDays = field("NoncurrentVersionExpirationInDays")

    @cached_property
    def NoncurrentVersionTransitions(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails.make_many(
            self.boto3_raw_data["NoncurrentVersionTransitions"]
        )

    Prefix = field("Prefix")
    Status = field("Status")

    @cached_property
    def Transitions(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails.make_many(
            self.boto3_raw_data["Transitions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails:
    boto3_raw_data: (
        "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsTypeDef"
    ) = dataclasses.field()

    Predicate = field("Predicate")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesFilterDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationOutput:
    boto3_raw_data: "type_defs.AwsS3BucketNotificationConfigurationOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Configurations(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationDetailOutput.make_many(
            self.boto3_raw_data["Configurations"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketNotificationConfigurationOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsStepFunctionStateMachineDetails:
    boto3_raw_data: "type_defs.AwsStepFunctionStateMachineDetailsTypeDef" = (
        dataclasses.field()
    )

    Label = field("Label")
    LoggingConfiguration = field("LoggingConfiguration")
    Name = field("Name")
    RoleArn = field("RoleArn")
    StateMachineArn = field("StateMachineArn")
    Status = field("Status")

    @cached_property
    def TracingConfiguration(self):  # pragma: no cover
        return AwsStepFunctionStateMachineTracingConfigurationDetails.make_one(
            self.boto3_raw_data["TracingConfiguration"]
        )

    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsStepFunctionStateMachineDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsStepFunctionStateMachineDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2RulesDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def Action(self):  # pragma: no cover
        return AwsWafv2RulesActionDetailsOutput.make_one(self.boto3_raw_data["Action"])

    Name = field("Name")
    OverrideAction = field("OverrideAction")
    Priority = field("Priority")

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2RulesDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetSecurityControlDefinitionResponse:
    boto3_raw_data: "type_defs.GetSecurityControlDefinitionResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityControlDefinition(self):  # pragma: no cover
        return SecurityControlDefinition.make_one(
            self.boto3_raw_data["SecurityControlDefinition"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.GetSecurityControlDefinitionResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetSecurityControlDefinitionResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ListSecurityControlDefinitionsResponse:
    boto3_raw_data: "type_defs.ListSecurityControlDefinitionsResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def SecurityControlDefinitions(self):  # pragma: no cover
        return SecurityControlDefinition.make_many(
            self.boto3_raw_data["SecurityControlDefinitions"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.ListSecurityControlDefinitionsResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ListSecurityControlDefinitionsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchGetAutomationRulesResponse:
    boto3_raw_data: "type_defs.BatchGetAutomationRulesResponseTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Rules(self):  # pragma: no cover
        return AutomationRulesConfig.make_many(self.boto3_raw_data["Rules"])

    @cached_property
    def UnprocessedAutomationRules(self):  # pragma: no cover
        return UnprocessedAutomationRule.make_many(
            self.boto3_raw_data["UnprocessedAutomationRules"]
        )

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.BatchGetAutomationRulesResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchGetAutomationRulesResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetInsightsResponse:
    boto3_raw_data: "type_defs.GetInsightsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Insights(self):  # pragma: no cover
        return Insight.make_many(self.boto3_raw_data["Insights"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetInsightsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetInsightsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateInsightRequest:
    boto3_raw_data: "type_defs.CreateInsightRequestTypeDef" = dataclasses.field()

    Name = field("Name")
    Filters = field("Filters")
    GroupByAttribute = field("GroupByAttribute")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateInsightRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateInsightRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsRequestPaginate:
    boto3_raw_data: "type_defs.GetFindingsRequestPaginateTypeDef" = dataclasses.field()

    Filters = field("Filters")

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsRequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsRequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsRequest:
    boto3_raw_data: "type_defs.GetFindingsRequestTypeDef" = dataclasses.field()

    Filters = field("Filters")

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateFindingsRequest:
    boto3_raw_data: "type_defs.UpdateFindingsRequestTypeDef" = dataclasses.field()

    Filters = field("Filters")

    @cached_property
    def Note(self):  # pragma: no cover
        return NoteUpdate.make_one(self.boto3_raw_data["Note"])

    RecordState = field("RecordState")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateFindingsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateFindingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateInsightRequest:
    boto3_raw_data: "type_defs.UpdateInsightRequestTypeDef" = dataclasses.field()

    InsightArn = field("InsightArn")
    Name = field("Name")
    Filters = field("Filters")
    GroupByAttribute = field("GroupByAttribute")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateInsightRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateInsightRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfFindingFiltersOutput:
    boto3_raw_data: "type_defs.OcsfFindingFiltersOutputTypeDef" = dataclasses.field()

    @cached_property
    def CompositeFilters(self):  # pragma: no cover
        return CompositeFilterOutput.make_many(self.boto3_raw_data["CompositeFilters"])

    CompositeOperator = field("CompositeOperator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OcsfFindingFiltersOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfFindingFiltersOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourcesFilters:
    boto3_raw_data: "type_defs.ResourcesFiltersTypeDef" = dataclasses.field()

    @cached_property
    def CompositeFilters(self):  # pragma: no cover
        return ResourcesCompositeFilter.make_many(
            self.boto3_raw_data["CompositeFilters"]
        )

    CompositeOperator = field("CompositeOperator")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourcesFiltersTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourcesFiltersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomDataIdentifiersResultOutput:
    boto3_raw_data: "type_defs.CustomDataIdentifiersResultOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Detections(self):  # pragma: no cover
        return CustomDataIdentifiersDetectionsOutput.make_many(
            self.boto3_raw_data["Detections"]
        )

    TotalCount = field("TotalCount")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CustomDataIdentifiersResultOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomDataIdentifiersResultOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SensitiveDataResultOutput:
    boto3_raw_data: "type_defs.SensitiveDataResultOutputTypeDef" = dataclasses.field()

    Category = field("Category")

    @cached_property
    def Detections(self):  # pragma: no cover
        return SensitiveDataDetectionsOutput.make_many(
            self.boto3_raw_data["Detections"]
        )

    TotalCount = field("TotalCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SensitiveDataResultOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SensitiveDataResultOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomDataIdentifiersDetections:
    boto3_raw_data: "type_defs.CustomDataIdentifiersDetectionsTypeDef" = (
        dataclasses.field()
    )

    Count = field("Count")
    Arn = field("Arn")
    Name = field("Name")
    Occurrences = field("Occurrences")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CustomDataIdentifiersDetectionsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomDataIdentifiersDetectionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SensitiveDataDetections:
    boto3_raw_data: "type_defs.SensitiveDataDetectionsTypeDef" = dataclasses.field()

    Count = field("Count")
    Type = field("Type")
    Occurrences = field("Occurrences")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SensitiveDataDetectionsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SensitiveDataDetectionsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityHubPolicyOutput:
    boto3_raw_data: "type_defs.SecurityHubPolicyOutputTypeDef" = dataclasses.field()

    ServiceEnabled = field("ServiceEnabled")
    EnabledStandardIdentifiers = field("EnabledStandardIdentifiers")

    @cached_property
    def SecurityControlsConfiguration(self):  # pragma: no cover
        return SecurityControlsConfigurationOutput.make_one(
            self.boto3_raw_data["SecurityControlsConfiguration"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SecurityHubPolicyOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityHubPolicyOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateSecurityControlRequest:
    boto3_raw_data: "type_defs.UpdateSecurityControlRequestTypeDef" = (
        dataclasses.field()
    )

    SecurityControlId = field("SecurityControlId")
    Parameters = field("Parameters")
    LastUpdateReason = field("LastUpdateReason")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.UpdateSecurityControlRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateSecurityControlRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityControlsConfiguration:
    boto3_raw_data: "type_defs.SecurityControlsConfigurationTypeDef" = (
        dataclasses.field()
    )

    EnabledSecurityControlIdentifiers = field("EnabledSecurityControlIdentifiers")
    DisabledSecurityControlIdentifiers = field("DisabledSecurityControlIdentifiers")

    @cached_property
    def SecurityControlCustomParameters(self):  # pragma: no cover
        return SecurityControlCustomParameter.make_many(
            self.boto3_raw_data["SecurityControlCustomParameters"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.SecurityControlsConfigurationTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityControlsConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRuleDefinition:
    boto3_raw_data: "type_defs.RuleGroupSourceStatelessRuleDefinitionTypeDef" = (
        dataclasses.field()
    )

    Actions = field("Actions")
    MatchAttributes = field("MatchAttributes")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRuleDefinitionTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatelessRuleDefinitionTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyDetailsOutput:
    boto3_raw_data: "type_defs.FirewallPolicyDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def StatefulRuleGroupReferences(self):  # pragma: no cover
        return FirewallPolicyStatefulRuleGroupReferencesDetails.make_many(
            self.boto3_raw_data["StatefulRuleGroupReferences"]
        )

    @cached_property
    def StatelessCustomActions(self):  # pragma: no cover
        return FirewallPolicyStatelessCustomActionsDetailsOutput.make_many(
            self.boto3_raw_data["StatelessCustomActions"]
        )

    StatelessDefaultActions = field("StatelessDefaultActions")
    StatelessFragmentDefaultActions = field("StatelessFragmentDefaultActions")

    @cached_property
    def StatelessRuleGroupReferences(self):  # pragma: no cover
        return FirewallPolicyStatelessRuleGroupReferencesDetails.make_many(
            self.boto3_raw_data["StatelessRuleGroupReferences"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FirewallPolicyDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FirewallPolicyDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRulesAndCustomActionsDetailsOutput:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def CustomActions(self):  # pragma: no cover
        return RuleGroupSourceCustomActionsDetailsOutput.make_many(
            self.boto3_raw_data["CustomActions"]
        )

    @cached_property
    def StatelessRules(self):  # pragma: no cover
        return RuleGroupSourceStatelessRulesDetailsOutput.make_many(
            self.boto3_raw_data["StatelessRules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Action:
    boto3_raw_data: "type_defs.ActionTypeDef" = dataclasses.field()

    ActionType = field("ActionType")

    @cached_property
    def NetworkConnectionAction(self):  # pragma: no cover
        return NetworkConnectionAction.make_one(
            self.boto3_raw_data["NetworkConnectionAction"]
        )

    AwsApiCallAction = field("AwsApiCallAction")

    @cached_property
    def DnsRequestAction(self):  # pragma: no cover
        return DnsRequestAction.make_one(self.boto3_raw_data["DnsRequestAction"])

    PortProbeAction = field("PortProbeAction")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ActionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ActionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutomationRuleRequest:
    boto3_raw_data: "type_defs.CreateAutomationRuleRequestTypeDef" = dataclasses.field()

    RuleOrder = field("RuleOrder")
    RuleName = field("RuleName")
    Description = field("Description")
    Criteria = field("Criteria")
    Actions = field("Actions")
    Tags = field("Tags")
    RuleStatus = field("RuleStatus")
    IsTerminal = field("IsTerminal")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CreateAutomationRuleRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutomationRuleRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAutomationRulesRequestItem:
    boto3_raw_data: "type_defs.UpdateAutomationRulesRequestItemTypeDef" = (
        dataclasses.field()
    )

    RuleArn = field("RuleArn")
    RuleStatus = field("RuleStatus")
    RuleOrder = field("RuleOrder")
    Description = field("Description")
    RuleName = field("RuleName")
    IsTerminal = field("IsTerminal")
    Criteria = field("Criteria")
    Actions = field("Actions")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateAutomationRulesRequestItemTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAutomationRulesRequestItemTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsAutoScalingAutoScalingGroupDetails:
    boto3_raw_data: "type_defs.AwsAutoScalingAutoScalingGroupDetailsTypeDef" = (
        dataclasses.field()
    )

    LaunchConfigurationName = field("LaunchConfigurationName")
    LoadBalancerNames = field("LoadBalancerNames")
    HealthCheckType = field("HealthCheckType")
    HealthCheckGracePeriod = field("HealthCheckGracePeriod")
    CreatedTime = field("CreatedTime")
    MixedInstancesPolicy = field("MixedInstancesPolicy")

    @cached_property
    def AvailabilityZones(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails.make_many(
            self.boto3_raw_data["AvailabilityZones"]
        )

    @cached_property
    def LaunchTemplate(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification.make_one(
            self.boto3_raw_data["LaunchTemplate"]
        )

    CapacityRebalance = field("CapacityRebalance")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsAutoScalingAutoScalingGroupDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsAutoScalingAutoScalingGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEc2LaunchTemplateDetails:
    boto3_raw_data: "type_defs.AwsEc2LaunchTemplateDetailsTypeDef" = dataclasses.field()

    LaunchTemplateName = field("LaunchTemplateName")
    Id = field("Id")
    LaunchTemplateData = field("LaunchTemplateData")
    DefaultVersionNumber = field("DefaultVersionNumber")
    LatestVersionNumber = field("LatestVersionNumber")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEc2LaunchTemplateDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEc2LaunchTemplateDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationDetailsOutput:
    boto3_raw_data: (
        "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsOutputTypeDef"
    ) = dataclasses.field()

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesDetailsOutput.make_many(
            self.boto3_raw_data["Rules"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsOutputTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfigurationDetail:
    boto3_raw_data: "type_defs.AwsS3BucketNotificationConfigurationDetailTypeDef" = (
        dataclasses.field()
    )

    Events = field("Events")
    Filter = field("Filter")
    Destination = field("Destination")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationDetailTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketNotificationConfigurationDetailTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RuleGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2RuleGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Capacity = field("Capacity")
    Description = field("Description")
    Id = field("Id")
    Name = field("Name")
    Arn = field("Arn")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafv2RulesDetailsOutput.make_many(self.boto3_raw_data["Rules"])

    Scope = field("Scope")

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsWafv2RuleGroupDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RuleGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclDetailsOutput:
    boto3_raw_data: "type_defs.AwsWafv2WebAclDetailsOutputTypeDef" = dataclasses.field()

    Name = field("Name")
    Arn = field("Arn")
    ManagedbyFirewallManager = field("ManagedbyFirewallManager")
    Id = field("Id")
    Capacity = field("Capacity")

    @cached_property
    def CaptchaConfig(self):  # pragma: no cover
        return AwsWafv2WebAclCaptchaConfigDetails.make_one(
            self.boto3_raw_data["CaptchaConfig"]
        )

    @cached_property
    def DefaultAction(self):  # pragma: no cover
        return AwsWafv2WebAclActionDetailsOutput.make_one(
            self.boto3_raw_data["DefaultAction"]
        )

    Description = field("Description")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafv2RulesDetailsOutput.make_many(self.boto3_raw_data["Rules"])

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2WebAclDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2WebAclDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesActionDetails:
    boto3_raw_data: "type_defs.AwsWafv2RulesActionDetailsTypeDef" = dataclasses.field()

    Allow = field("Allow")
    Block = field("Block")
    Captcha = field("Captcha")
    Count = field("Count")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2RulesActionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesActionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclActionDetails:
    boto3_raw_data: "type_defs.AwsWafv2WebAclActionDetailsTypeDef" = dataclasses.field()

    Allow = field("Allow")
    Block = field("Block")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2WebAclActionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2WebAclActionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CriteriaOutput:
    boto3_raw_data: "type_defs.CriteriaOutputTypeDef" = dataclasses.field()

    @cached_property
    def OcsfFindingCriteria(self):  # pragma: no cover
        return OcsfFindingFiltersOutput.make_one(
            self.boto3_raw_data["OcsfFindingCriteria"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CriteriaOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CriteriaOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class OcsfFindingFilters:
    boto3_raw_data: "type_defs.OcsfFindingFiltersTypeDef" = dataclasses.field()

    CompositeFilters = field("CompositeFilters")
    CompositeOperator = field("CompositeOperator")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.OcsfFindingFiltersTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.OcsfFindingFiltersTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetResourcesV2RequestPaginate:
    boto3_raw_data: "type_defs.GetResourcesV2RequestPaginateTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def Filters(self):  # pragma: no cover
        return ResourcesFilters.make_one(self.boto3_raw_data["Filters"])

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetResourcesV2RequestPaginateTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetResourcesV2RequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetResourcesV2Request:
    boto3_raw_data: "type_defs.GetResourcesV2RequestTypeDef" = dataclasses.field()

    @cached_property
    def Filters(self):  # pragma: no cover
        return ResourcesFilters.make_one(self.boto3_raw_data["Filters"])

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetResourcesV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetResourcesV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceGroupByRule:
    boto3_raw_data: "type_defs.ResourceGroupByRuleTypeDef" = dataclasses.field()

    GroupByField = field("GroupByField")

    @cached_property
    def Filters(self):  # pragma: no cover
        return ResourcesFilters.make_one(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceGroupByRuleTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceGroupByRuleTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Detection:
    boto3_raw_data: "type_defs.DetectionTypeDef" = dataclasses.field()

    Sequence = field("Sequence")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.DetectionTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.DetectionTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class NetworkPathComponent:
    boto3_raw_data: "type_defs.NetworkPathComponentTypeDef" = dataclasses.field()

    ComponentId = field("ComponentId")
    ComponentType = field("ComponentType")
    Egress = field("Egress")
    Ingress = field("Ingress")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.NetworkPathComponentTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.NetworkPathComponentTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassificationResultOutput:
    boto3_raw_data: "type_defs.ClassificationResultOutputTypeDef" = dataclasses.field()

    MimeType = field("MimeType")
    SizeClassified = field("SizeClassified")
    AdditionalOccurrences = field("AdditionalOccurrences")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClassificationStatus.make_one(self.boto3_raw_data["Status"])

    @cached_property
    def SensitiveData(self):  # pragma: no cover
        return SensitiveDataResultOutput.make_many(self.boto3_raw_data["SensitiveData"])

    @cached_property
    def CustomDataIdentifiers(self):  # pragma: no cover
        return CustomDataIdentifiersResultOutput.make_one(
            self.boto3_raw_data["CustomDataIdentifiers"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassificationResultOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassificationResultOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class PolicyOutput:
    boto3_raw_data: "type_defs.PolicyOutputTypeDef" = dataclasses.field()

    @cached_property
    def SecurityHub(self):  # pragma: no cover
        return SecurityHubPolicyOutput.make_one(self.boto3_raw_data["SecurityHub"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PolicyOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PolicyOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SecurityHubPolicy:
    boto3_raw_data: "type_defs.SecurityHubPolicyTypeDef" = dataclasses.field()

    ServiceEnabled = field("ServiceEnabled")
    EnabledStandardIdentifiers = field("EnabledStandardIdentifiers")

    @cached_property
    def SecurityControlsConfiguration(self):  # pragma: no cover
        return SecurityControlsConfiguration.make_one(
            self.boto3_raw_data["SecurityControlsConfiguration"]
        )

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.SecurityHubPolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SecurityHubPolicyTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallFirewallPolicyDetailsOutput:
    boto3_raw_data: "type_defs.AwsNetworkFirewallFirewallPolicyDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def FirewallPolicy(self):  # pragma: no cover
        return FirewallPolicyDetailsOutput.make_one(
            self.boto3_raw_data["FirewallPolicy"]
        )

    FirewallPolicyArn = field("FirewallPolicyArn")
    FirewallPolicyId = field("FirewallPolicyId")
    FirewallPolicyName = field("FirewallPolicyName")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallFirewallPolicyDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallFirewallPolicyDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceOutput:
    boto3_raw_data: "type_defs.RuleGroupSourceOutputTypeDef" = dataclasses.field()

    @cached_property
    def RulesSourceList(self):  # pragma: no cover
        return RuleGroupSourceListDetailsOutput.make_one(
            self.boto3_raw_data["RulesSourceList"]
        )

    RulesString = field("RulesString")

    @cached_property
    def StatefulRules(self):  # pragma: no cover
        return RuleGroupSourceStatefulRulesDetailsOutput.make_many(
            self.boto3_raw_data["StatefulRules"]
        )

    @cached_property
    def StatelessRulesAndCustomActions(self):  # pragma: no cover
        return RuleGroupSourceStatelessRulesAndCustomActionsDetailsOutput.make_one(
            self.boto3_raw_data["StatelessRulesAndCustomActions"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupSourceOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyStatelessCustomActionsDetails:
    boto3_raw_data: "type_defs.FirewallPolicyStatelessCustomActionsDetailsTypeDef" = (
        dataclasses.field()
    )

    ActionDefinition = field("ActionDefinition")
    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.FirewallPolicyStatelessCustomActionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FirewallPolicyStatelessCustomActionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceCustomActionsDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceCustomActionsDetailsTypeDef" = (
        dataclasses.field()
    )

    ActionDefinition = field("ActionDefinition")
    ActionName = field("ActionName")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceCustomActionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceCustomActionsDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchUpdateAutomationRulesRequest:
    boto3_raw_data: "type_defs.BatchUpdateAutomationRulesRequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def UpdateAutomationRulesRequestItems(self):  # pragma: no cover
        return UpdateAutomationRulesRequestItem.make_many(
            self.boto3_raw_data["UpdateAutomationRulesRequestItems"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.BatchUpdateAutomationRulesRequestTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchUpdateAutomationRulesRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsBackupBackupPlanDetails:
    boto3_raw_data: "type_defs.AwsBackupBackupPlanDetailsTypeDef" = dataclasses.field()

    BackupPlan = field("BackupPlan")
    BackupPlanArn = field("BackupPlanArn")
    BackupPlanId = field("BackupPlanId")
    VersionId = field("VersionId")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsBackupBackupPlanDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsBackupBackupPlanDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOriginGroups:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginGroupsTypeDef" = (
        dataclasses.field()
    )

    Items = field("Items")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsCloudFrontDistributionOriginGroupsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginGroupsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionOrigins:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionOriginsTypeDef" = (
        dataclasses.field()
    )

    Items = field("Items")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCloudFrontDistributionOriginsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionOriginsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsEcsTaskDefinitionDetails:
    boto3_raw_data: "type_defs.AwsEcsTaskDefinitionDetailsTypeDef" = dataclasses.field()

    ContainerDefinitions = field("ContainerDefinitions")
    Cpu = field("Cpu")
    ExecutionRoleArn = field("ExecutionRoleArn")
    Family = field("Family")

    @cached_property
    def InferenceAccelerators(self):  # pragma: no cover
        return AwsEcsTaskDefinitionInferenceAcceleratorsDetails.make_many(
            self.boto3_raw_data["InferenceAccelerators"]
        )

    IpcMode = field("IpcMode")
    Memory = field("Memory")
    NetworkMode = field("NetworkMode")
    PidMode = field("PidMode")

    @cached_property
    def PlacementConstraints(self):  # pragma: no cover
        return AwsEcsTaskDefinitionPlacementConstraintsDetails.make_many(
            self.boto3_raw_data["PlacementConstraints"]
        )

    ProxyConfiguration = field("ProxyConfiguration")
    RequiresCompatibilities = field("RequiresCompatibilities")
    TaskRoleArn = field("TaskRoleArn")
    Volumes = field("Volumes")
    Status = field("Status")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsEcsTaskDefinitionDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsEcsTaskDefinitionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsMskClusterDetails:
    boto3_raw_data: "type_defs.AwsMskClusterDetailsTypeDef" = dataclasses.field()

    ClusterInfo = field("ClusterInfo")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsMskClusterDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsMskClusterDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketDetailsOutput:
    boto3_raw_data: "type_defs.AwsS3BucketDetailsOutputTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    OwnerName = field("OwnerName")
    OwnerAccountId = field("OwnerAccountId")
    CreatedAt = field("CreatedAt")

    @cached_property
    def ServerSideEncryptionConfiguration(self):  # pragma: no cover
        return AwsS3BucketServerSideEncryptionConfigurationOutput.make_one(
            self.boto3_raw_data["ServerSideEncryptionConfiguration"]
        )

    @cached_property
    def BucketLifecycleConfiguration(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["BucketLifecycleConfiguration"]
        )

    @cached_property
    def PublicAccessBlockConfiguration(self):  # pragma: no cover
        return AwsS3AccountPublicAccessBlockDetails.make_one(
            self.boto3_raw_data["PublicAccessBlockConfiguration"]
        )

    AccessControlList = field("AccessControlList")

    @cached_property
    def BucketLoggingConfiguration(self):  # pragma: no cover
        return AwsS3BucketLoggingConfiguration.make_one(
            self.boto3_raw_data["BucketLoggingConfiguration"]
        )

    @cached_property
    def BucketWebsiteConfiguration(self):  # pragma: no cover
        return AwsS3BucketWebsiteConfigurationOutput.make_one(
            self.boto3_raw_data["BucketWebsiteConfiguration"]
        )

    @cached_property
    def BucketNotificationConfiguration(self):  # pragma: no cover
        return AwsS3BucketNotificationConfigurationOutput.make_one(
            self.boto3_raw_data["BucketNotificationConfiguration"]
        )

    @cached_property
    def BucketVersioningConfiguration(self):  # pragma: no cover
        return AwsS3BucketBucketVersioningConfiguration.make_one(
            self.boto3_raw_data["BucketVersioningConfiguration"]
        )

    @cached_property
    def ObjectLockConfiguration(self):  # pragma: no cover
        return AwsS3BucketObjectLockConfiguration.make_one(
            self.boto3_raw_data["ObjectLockConfiguration"]
        )

    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsS3BucketDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationRulesDetails:
    boto3_raw_data: (
        "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsTypeDef"
    ) = dataclasses.field()

    @cached_property
    def AbortIncompleteMultipartUpload(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails.make_one(
            self.boto3_raw_data["AbortIncompleteMultipartUpload"]
        )

    ExpirationDate = field("ExpirationDate")
    ExpirationInDays = field("ExpirationInDays")
    ExpiredObjectDeleteMarker = field("ExpiredObjectDeleteMarker")
    Filter = field("Filter")
    ID = field("ID")
    NoncurrentVersionExpirationInDays = field("NoncurrentVersionExpirationInDays")

    @cached_property
    def NoncurrentVersionTransitions(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails.make_many(
            self.boto3_raw_data["NoncurrentVersionTransitions"]
        )

    Prefix = field("Prefix")
    Status = field("Status")

    @cached_property
    def Transitions(self):  # pragma: no cover
        return AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails.make_many(
            self.boto3_raw_data["Transitions"]
        )

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationRulesDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetAutomationRuleV2Response:
    boto3_raw_data: "type_defs.GetAutomationRuleV2ResponseTypeDef" = dataclasses.field()

    RuleArn = field("RuleArn")
    RuleId = field("RuleId")
    RuleOrder = field("RuleOrder")
    RuleName = field("RuleName")
    RuleStatus = field("RuleStatus")
    Description = field("Description")

    @cached_property
    def Criteria(self):  # pragma: no cover
        return CriteriaOutput.make_one(self.boto3_raw_data["Criteria"])

    @cached_property
    def Actions(self):  # pragma: no cover
        return AutomationRulesActionV2.make_many(self.boto3_raw_data["Actions"])

    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetAutomationRuleV2ResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetAutomationRuleV2ResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Criteria:
    boto3_raw_data: "type_defs.CriteriaTypeDef" = dataclasses.field()

    @cached_property
    def OcsfFindingCriteria(self):  # pragma: no cover
        return OcsfFindingFilters.make_one(self.boto3_raw_data["OcsfFindingCriteria"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.CriteriaTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.CriteriaTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GroupByRule:
    boto3_raw_data: "type_defs.GroupByRuleTypeDef" = dataclasses.field()

    GroupByField = field("GroupByField")

    @cached_property
    def Filters(self):  # pragma: no cover
        return OcsfFindingFilters.make_one(self.boto3_raw_data["Filters"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.GroupByRuleTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.GroupByRuleTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetResourcesStatisticsV2Request:
    boto3_raw_data: "type_defs.GetResourcesStatisticsV2RequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupByRules(self):  # pragma: no cover
        return ResourceGroupByRule.make_many(self.boto3_raw_data["GroupByRules"])

    SortOrder = field("SortOrder")
    MaxStatisticResults = field("MaxStatisticResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetResourcesStatisticsV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetResourcesStatisticsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataClassificationDetailsOutput:
    boto3_raw_data: "type_defs.DataClassificationDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    DetailedResultsLocation = field("DetailedResultsLocation")

    @cached_property
    def Result(self):  # pragma: no cover
        return ClassificationResultOutput.make_one(self.boto3_raw_data["Result"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.DataClassificationDetailsOutputTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataClassificationDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CustomDataIdentifiersResult:
    boto3_raw_data: "type_defs.CustomDataIdentifiersResultTypeDef" = dataclasses.field()

    Detections = field("Detections")
    TotalCount = field("TotalCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.CustomDataIdentifiersResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CustomDataIdentifiersResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class SensitiveDataResult:
    boto3_raw_data: "type_defs.SensitiveDataResultTypeDef" = dataclasses.field()

    Category = field("Category")
    Detections = field("Detections")
    TotalCount = field("TotalCount")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.SensitiveDataResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.SensitiveDataResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateConfigurationPolicyResponse:
    boto3_raw_data: "type_defs.CreateConfigurationPolicyResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    UpdatedAt = field("UpdatedAt")
    CreatedAt = field("CreatedAt")

    @cached_property
    def ConfigurationPolicy(self):  # pragma: no cover
        return PolicyOutput.make_one(self.boto3_raw_data["ConfigurationPolicy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.CreateConfigurationPolicyResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateConfigurationPolicyResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetConfigurationPolicyResponse:
    boto3_raw_data: "type_defs.GetConfigurationPolicyResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    UpdatedAt = field("UpdatedAt")
    CreatedAt = field("CreatedAt")

    @cached_property
    def ConfigurationPolicy(self):  # pragma: no cover
        return PolicyOutput.make_one(self.boto3_raw_data["ConfigurationPolicy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetConfigurationPolicyResponseTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetConfigurationPolicyResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateConfigurationPolicyResponse:
    boto3_raw_data: "type_defs.UpdateConfigurationPolicyResponseTypeDef" = (
        dataclasses.field()
    )

    Arn = field("Arn")
    Id = field("Id")
    Name = field("Name")
    Description = field("Description")
    UpdatedAt = field("UpdatedAt")
    CreatedAt = field("CreatedAt")

    @cached_property
    def ConfigurationPolicy(self):  # pragma: no cover
        return PolicyOutput.make_one(self.boto3_raw_data["ConfigurationPolicy"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.UpdateConfigurationPolicyResponseTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateConfigurationPolicyResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Policy:
    boto3_raw_data: "type_defs.PolicyTypeDef" = dataclasses.field()

    @cached_property
    def SecurityHub(self):  # pragma: no cover
        return SecurityHubPolicy.make_one(self.boto3_raw_data["SecurityHub"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.PolicyTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.PolicyTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRulesDetails:
    boto3_raw_data: "type_defs.RuleGroupSourceStatelessRulesDetailsTypeDef" = (
        dataclasses.field()
    )

    Priority = field("Priority")
    RuleDefinition = field("RuleDefinition")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRulesDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupSourceStatelessRulesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupDetailsOutput:
    boto3_raw_data: "type_defs.RuleGroupDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def RuleVariables(self):  # pragma: no cover
        return RuleGroupVariablesOutput.make_one(self.boto3_raw_data["RuleVariables"])

    @cached_property
    def RulesSource(self):  # pragma: no cover
        return RuleGroupSourceOutput.make_one(self.boto3_raw_data["RulesSource"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.RuleGroupDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketNotificationConfiguration:
    boto3_raw_data: "type_defs.AwsS3BucketNotificationConfigurationTypeDef" = (
        dataclasses.field()
    )

    Configurations = field("Configurations")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketNotificationConfigurationTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketNotificationConfigurationTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RulesDetails:
    boto3_raw_data: "type_defs.AwsWafv2RulesDetailsTypeDef" = dataclasses.field()

    Action = field("Action")
    Name = field("Name")
    OverrideAction = field("OverrideAction")
    Priority = field("Priority")

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2RulesDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RulesDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingStatisticsV2Request:
    boto3_raw_data: "type_defs.GetFindingStatisticsV2RequestTypeDef" = (
        dataclasses.field()
    )

    @cached_property
    def GroupByRules(self):  # pragma: no cover
        return GroupByRule.make_many(self.boto3_raw_data["GroupByRules"])

    SortOrder = field("SortOrder")
    MaxStatisticResults = field("MaxStatisticResults")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.GetFindingStatisticsV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingStatisticsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsV2RequestPaginate:
    boto3_raw_data: "type_defs.GetFindingsV2RequestPaginateTypeDef" = (
        dataclasses.field()
    )

    Filters = field("Filters")

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    @cached_property
    def PaginationConfig(self):  # pragma: no cover
        return PaginatorConfig.make_one(self.boto3_raw_data["PaginationConfig"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsV2RequestPaginateTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsV2RequestPaginateTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsV2Request:
    boto3_raw_data: "type_defs.GetFindingsV2RequestTypeDef" = dataclasses.field()

    Filters = field("Filters")

    @cached_property
    def SortCriteria(self):  # pragma: no cover
        return SortCriterion.make_many(self.boto3_raw_data["SortCriteria"])

    NextToken = field("NextToken")
    MaxResults = field("MaxResults")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsV2RequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallRuleGroupDetailsOutput:
    boto3_raw_data: "type_defs.AwsNetworkFirewallRuleGroupDetailsOutputTypeDef" = (
        dataclasses.field()
    )

    Capacity = field("Capacity")
    Description = field("Description")

    @cached_property
    def RuleGroup(self):  # pragma: no cover
        return RuleGroupDetailsOutput.make_one(self.boto3_raw_data["RuleGroup"])

    RuleGroupArn = field("RuleGroupArn")
    RuleGroupId = field("RuleGroupId")
    RuleGroupName = field("RuleGroupName")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallRuleGroupDetailsOutputTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallRuleGroupDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class FirewallPolicyDetails:
    boto3_raw_data: "type_defs.FirewallPolicyDetailsTypeDef" = dataclasses.field()

    @cached_property
    def StatefulRuleGroupReferences(self):  # pragma: no cover
        return FirewallPolicyStatefulRuleGroupReferencesDetails.make_many(
            self.boto3_raw_data["StatefulRuleGroupReferences"]
        )

    StatelessCustomActions = field("StatelessCustomActions")
    StatelessDefaultActions = field("StatelessDefaultActions")
    StatelessFragmentDefaultActions = field("StatelessFragmentDefaultActions")

    @cached_property
    def StatelessRuleGroupReferences(self):  # pragma: no cover
        return FirewallPolicyStatelessRuleGroupReferencesDetails.make_many(
            self.boto3_raw_data["StatelessRuleGroupReferences"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.FirewallPolicyDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.FirewallPolicyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsCloudFrontDistributionDetails:
    boto3_raw_data: "type_defs.AwsCloudFrontDistributionDetailsTypeDef" = (
        dataclasses.field()
    )

    CacheBehaviors = field("CacheBehaviors")

    @cached_property
    def DefaultCacheBehavior(self):  # pragma: no cover
        return AwsCloudFrontDistributionDefaultCacheBehavior.make_one(
            self.boto3_raw_data["DefaultCacheBehavior"]
        )

    DefaultRootObject = field("DefaultRootObject")
    DomainName = field("DomainName")
    ETag = field("ETag")
    LastModifiedTime = field("LastModifiedTime")

    @cached_property
    def Logging(self):  # pragma: no cover
        return AwsCloudFrontDistributionLogging.make_one(self.boto3_raw_data["Logging"])

    Origins = field("Origins")
    OriginGroups = field("OriginGroups")

    @cached_property
    def ViewerCertificate(self):  # pragma: no cover
        return AwsCloudFrontDistributionViewerCertificate.make_one(
            self.boto3_raw_data["ViewerCertificate"]
        )

    Status = field("Status")
    WebAclId = field("WebAclId")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.AwsCloudFrontDistributionDetailsTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsCloudFrontDistributionDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketBucketLifecycleConfigurationDetails:
    boto3_raw_data: (
        "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsTypeDef"
    ) = dataclasses.field()

    Rules = field("Rules")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.AwsS3BucketBucketLifecycleConfigurationDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2WebAclDetails:
    boto3_raw_data: "type_defs.AwsWafv2WebAclDetailsTypeDef" = dataclasses.field()

    Name = field("Name")
    Arn = field("Arn")
    ManagedbyFirewallManager = field("ManagedbyFirewallManager")
    Id = field("Id")
    Capacity = field("Capacity")

    @cached_property
    def CaptchaConfig(self):  # pragma: no cover
        return AwsWafv2WebAclCaptchaConfigDetails.make_one(
            self.boto3_raw_data["CaptchaConfig"]
        )

    DefaultAction = field("DefaultAction")
    Description = field("Description")

    @cached_property
    def Rules(self):  # pragma: no cover
        return AwsWafv2RulesDetails.make_many(self.boto3_raw_data["Rules"])

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2WebAclDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2WebAclDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateAutomationRuleV2Request:
    boto3_raw_data: "type_defs.CreateAutomationRuleV2RequestTypeDef" = (
        dataclasses.field()
    )

    RuleName = field("RuleName")
    Description = field("Description")
    RuleOrder = field("RuleOrder")
    Criteria = field("Criteria")

    @cached_property
    def Actions(self):  # pragma: no cover
        return AutomationRulesActionV2.make_many(self.boto3_raw_data["Actions"])

    RuleStatus = field("RuleStatus")
    Tags = field("Tags")
    ClientToken = field("ClientToken")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateAutomationRuleV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateAutomationRuleV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateAutomationRuleV2Request:
    boto3_raw_data: "type_defs.UpdateAutomationRuleV2RequestTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")
    RuleStatus = field("RuleStatus")
    RuleOrder = field("RuleOrder")
    Description = field("Description")
    RuleName = field("RuleName")
    Criteria = field("Criteria")

    @cached_property
    def Actions(self):  # pragma: no cover
        return AutomationRulesActionV2.make_many(self.boto3_raw_data["Actions"])

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateAutomationRuleV2RequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateAutomationRuleV2RequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ClassificationResult:
    boto3_raw_data: "type_defs.ClassificationResultTypeDef" = dataclasses.field()

    MimeType = field("MimeType")
    SizeClassified = field("SizeClassified")
    AdditionalOccurrences = field("AdditionalOccurrences")

    @cached_property
    def Status(self):  # pragma: no cover
        return ClassificationStatus.make_one(self.boto3_raw_data["Status"])

    SensitiveData = field("SensitiveData")
    CustomDataIdentifiers = field("CustomDataIdentifiers")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ClassificationResultTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ClassificationResultTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class CreateConfigurationPolicyRequest:
    boto3_raw_data: "type_defs.CreateConfigurationPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    Name = field("Name")
    ConfigurationPolicy = field("ConfigurationPolicy")
    Description = field("Description")
    Tags = field("Tags")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.CreateConfigurationPolicyRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.CreateConfigurationPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class UpdateConfigurationPolicyRequest:
    boto3_raw_data: "type_defs.UpdateConfigurationPolicyRequestTypeDef" = (
        dataclasses.field()
    )

    Identifier = field("Identifier")
    Name = field("Name")
    Description = field("Description")
    UpdatedReason = field("UpdatedReason")
    ConfigurationPolicy = field("ConfigurationPolicy")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional["type_defs.UpdateConfigurationPolicyRequestTypeDef"],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.UpdateConfigurationPolicyRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSourceStatelessRulesAndCustomActionsDetails:
    boto3_raw_data: (
        "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsTypeDef"
    ) = dataclasses.field()

    CustomActions = field("CustomActions")
    StatelessRules = field("StatelessRules")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable[
                "type_defs.RuleGroupSourceStatelessRulesAndCustomActionsDetailsTypeDef"
            ]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceDetailsOutput:
    boto3_raw_data: "type_defs.ResourceDetailsOutputTypeDef" = dataclasses.field()

    @cached_property
    def AwsAutoScalingAutoScalingGroup(self):  # pragma: no cover
        return AwsAutoScalingAutoScalingGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsAutoScalingAutoScalingGroup"]
        )

    @cached_property
    def AwsCodeBuildProject(self):  # pragma: no cover
        return AwsCodeBuildProjectDetailsOutput.make_one(
            self.boto3_raw_data["AwsCodeBuildProject"]
        )

    @cached_property
    def AwsCloudFrontDistribution(self):  # pragma: no cover
        return AwsCloudFrontDistributionDetailsOutput.make_one(
            self.boto3_raw_data["AwsCloudFrontDistribution"]
        )

    @cached_property
    def AwsEc2Instance(self):  # pragma: no cover
        return AwsEc2InstanceDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2Instance"]
        )

    @cached_property
    def AwsEc2NetworkInterface(self):  # pragma: no cover
        return AwsEc2NetworkInterfaceDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2NetworkInterface"]
        )

    @cached_property
    def AwsEc2SecurityGroup(self):  # pragma: no cover
        return AwsEc2SecurityGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2SecurityGroup"]
        )

    @cached_property
    def AwsEc2Volume(self):  # pragma: no cover
        return AwsEc2VolumeDetailsOutput.make_one(self.boto3_raw_data["AwsEc2Volume"])

    @cached_property
    def AwsEc2Vpc(self):  # pragma: no cover
        return AwsEc2VpcDetailsOutput.make_one(self.boto3_raw_data["AwsEc2Vpc"])

    @cached_property
    def AwsEc2Eip(self):  # pragma: no cover
        return AwsEc2EipDetails.make_one(self.boto3_raw_data["AwsEc2Eip"])

    @cached_property
    def AwsEc2Subnet(self):  # pragma: no cover
        return AwsEc2SubnetDetailsOutput.make_one(self.boto3_raw_data["AwsEc2Subnet"])

    @cached_property
    def AwsEc2NetworkAcl(self):  # pragma: no cover
        return AwsEc2NetworkAclDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2NetworkAcl"]
        )

    @cached_property
    def AwsElbv2LoadBalancer(self):  # pragma: no cover
        return AwsElbv2LoadBalancerDetailsOutput.make_one(
            self.boto3_raw_data["AwsElbv2LoadBalancer"]
        )

    @cached_property
    def AwsElasticBeanstalkEnvironment(self):  # pragma: no cover
        return AwsElasticBeanstalkEnvironmentDetailsOutput.make_one(
            self.boto3_raw_data["AwsElasticBeanstalkEnvironment"]
        )

    @cached_property
    def AwsElasticsearchDomain(self):  # pragma: no cover
        return AwsElasticsearchDomainDetailsOutput.make_one(
            self.boto3_raw_data["AwsElasticsearchDomain"]
        )

    @cached_property
    def AwsS3Bucket(self):  # pragma: no cover
        return AwsS3BucketDetailsOutput.make_one(self.boto3_raw_data["AwsS3Bucket"])

    @cached_property
    def AwsS3AccountPublicAccessBlock(self):  # pragma: no cover
        return AwsS3AccountPublicAccessBlockDetails.make_one(
            self.boto3_raw_data["AwsS3AccountPublicAccessBlock"]
        )

    @cached_property
    def AwsS3Object(self):  # pragma: no cover
        return AwsS3ObjectDetails.make_one(self.boto3_raw_data["AwsS3Object"])

    @cached_property
    def AwsSecretsManagerSecret(self):  # pragma: no cover
        return AwsSecretsManagerSecretDetails.make_one(
            self.boto3_raw_data["AwsSecretsManagerSecret"]
        )

    @cached_property
    def AwsIamAccessKey(self):  # pragma: no cover
        return AwsIamAccessKeyDetails.make_one(self.boto3_raw_data["AwsIamAccessKey"])

    @cached_property
    def AwsIamUser(self):  # pragma: no cover
        return AwsIamUserDetailsOutput.make_one(self.boto3_raw_data["AwsIamUser"])

    @cached_property
    def AwsIamPolicy(self):  # pragma: no cover
        return AwsIamPolicyDetailsOutput.make_one(self.boto3_raw_data["AwsIamPolicy"])

    @cached_property
    def AwsApiGatewayV2Stage(self):  # pragma: no cover
        return AwsApiGatewayV2StageDetailsOutput.make_one(
            self.boto3_raw_data["AwsApiGatewayV2Stage"]
        )

    @cached_property
    def AwsApiGatewayV2Api(self):  # pragma: no cover
        return AwsApiGatewayV2ApiDetailsOutput.make_one(
            self.boto3_raw_data["AwsApiGatewayV2Api"]
        )

    @cached_property
    def AwsDynamoDbTable(self):  # pragma: no cover
        return AwsDynamoDbTableDetailsOutput.make_one(
            self.boto3_raw_data["AwsDynamoDbTable"]
        )

    @cached_property
    def AwsApiGatewayStage(self):  # pragma: no cover
        return AwsApiGatewayStageDetailsOutput.make_one(
            self.boto3_raw_data["AwsApiGatewayStage"]
        )

    @cached_property
    def AwsApiGatewayRestApi(self):  # pragma: no cover
        return AwsApiGatewayRestApiDetailsOutput.make_one(
            self.boto3_raw_data["AwsApiGatewayRestApi"]
        )

    @cached_property
    def AwsCloudTrailTrail(self):  # pragma: no cover
        return AwsCloudTrailTrailDetails.make_one(
            self.boto3_raw_data["AwsCloudTrailTrail"]
        )

    @cached_property
    def AwsSsmPatchCompliance(self):  # pragma: no cover
        return AwsSsmPatchComplianceDetails.make_one(
            self.boto3_raw_data["AwsSsmPatchCompliance"]
        )

    @cached_property
    def AwsCertificateManagerCertificate(self):  # pragma: no cover
        return AwsCertificateManagerCertificateDetailsOutput.make_one(
            self.boto3_raw_data["AwsCertificateManagerCertificate"]
        )

    @cached_property
    def AwsRedshiftCluster(self):  # pragma: no cover
        return AwsRedshiftClusterDetailsOutput.make_one(
            self.boto3_raw_data["AwsRedshiftCluster"]
        )

    @cached_property
    def AwsElbLoadBalancer(self):  # pragma: no cover
        return AwsElbLoadBalancerDetailsOutput.make_one(
            self.boto3_raw_data["AwsElbLoadBalancer"]
        )

    @cached_property
    def AwsIamGroup(self):  # pragma: no cover
        return AwsIamGroupDetailsOutput.make_one(self.boto3_raw_data["AwsIamGroup"])

    @cached_property
    def AwsIamRole(self):  # pragma: no cover
        return AwsIamRoleDetailsOutput.make_one(self.boto3_raw_data["AwsIamRole"])

    @cached_property
    def AwsKmsKey(self):  # pragma: no cover
        return AwsKmsKeyDetails.make_one(self.boto3_raw_data["AwsKmsKey"])

    @cached_property
    def AwsLambdaFunction(self):  # pragma: no cover
        return AwsLambdaFunctionDetailsOutput.make_one(
            self.boto3_raw_data["AwsLambdaFunction"]
        )

    @cached_property
    def AwsLambdaLayerVersion(self):  # pragma: no cover
        return AwsLambdaLayerVersionDetailsOutput.make_one(
            self.boto3_raw_data["AwsLambdaLayerVersion"]
        )

    @cached_property
    def AwsRdsDbInstance(self):  # pragma: no cover
        return AwsRdsDbInstanceDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsDbInstance"]
        )

    @cached_property
    def AwsSnsTopic(self):  # pragma: no cover
        return AwsSnsTopicDetailsOutput.make_one(self.boto3_raw_data["AwsSnsTopic"])

    @cached_property
    def AwsSqsQueue(self):  # pragma: no cover
        return AwsSqsQueueDetails.make_one(self.boto3_raw_data["AwsSqsQueue"])

    @cached_property
    def AwsWafWebAcl(self):  # pragma: no cover
        return AwsWafWebAclDetailsOutput.make_one(self.boto3_raw_data["AwsWafWebAcl"])

    @cached_property
    def AwsRdsDbSnapshot(self):  # pragma: no cover
        return AwsRdsDbSnapshotDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsDbSnapshot"]
        )

    @cached_property
    def AwsRdsDbClusterSnapshot(self):  # pragma: no cover
        return AwsRdsDbClusterSnapshotDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsDbClusterSnapshot"]
        )

    @cached_property
    def AwsRdsDbCluster(self):  # pragma: no cover
        return AwsRdsDbClusterDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsDbCluster"]
        )

    @cached_property
    def AwsEcsCluster(self):  # pragma: no cover
        return AwsEcsClusterDetailsOutput.make_one(self.boto3_raw_data["AwsEcsCluster"])

    @cached_property
    def AwsEcsContainer(self):  # pragma: no cover
        return AwsEcsContainerDetailsOutput.make_one(
            self.boto3_raw_data["AwsEcsContainer"]
        )

    @cached_property
    def AwsEcsTaskDefinition(self):  # pragma: no cover
        return AwsEcsTaskDefinitionDetailsOutput.make_one(
            self.boto3_raw_data["AwsEcsTaskDefinition"]
        )

    @cached_property
    def Container(self):  # pragma: no cover
        return ContainerDetailsOutput.make_one(self.boto3_raw_data["Container"])

    Other = field("Other")

    @cached_property
    def AwsRdsEventSubscription(self):  # pragma: no cover
        return AwsRdsEventSubscriptionDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsEventSubscription"]
        )

    @cached_property
    def AwsEcsService(self):  # pragma: no cover
        return AwsEcsServiceDetailsOutput.make_one(self.boto3_raw_data["AwsEcsService"])

    @cached_property
    def AwsAutoScalingLaunchConfiguration(self):  # pragma: no cover
        return AwsAutoScalingLaunchConfigurationDetailsOutput.make_one(
            self.boto3_raw_data["AwsAutoScalingLaunchConfiguration"]
        )

    @cached_property
    def AwsEc2VpnConnection(self):  # pragma: no cover
        return AwsEc2VpnConnectionDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2VpnConnection"]
        )

    @cached_property
    def AwsEcrContainerImage(self):  # pragma: no cover
        return AwsEcrContainerImageDetailsOutput.make_one(
            self.boto3_raw_data["AwsEcrContainerImage"]
        )

    @cached_property
    def AwsOpenSearchServiceDomain(self):  # pragma: no cover
        return AwsOpenSearchServiceDomainDetailsOutput.make_one(
            self.boto3_raw_data["AwsOpenSearchServiceDomain"]
        )

    @cached_property
    def AwsEc2VpcEndpointService(self):  # pragma: no cover
        return AwsEc2VpcEndpointServiceDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2VpcEndpointService"]
        )

    @cached_property
    def AwsXrayEncryptionConfig(self):  # pragma: no cover
        return AwsXrayEncryptionConfigDetails.make_one(
            self.boto3_raw_data["AwsXrayEncryptionConfig"]
        )

    @cached_property
    def AwsWafRateBasedRule(self):  # pragma: no cover
        return AwsWafRateBasedRuleDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRateBasedRule"]
        )

    @cached_property
    def AwsWafRegionalRateBasedRule(self):  # pragma: no cover
        return AwsWafRegionalRateBasedRuleDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRegionalRateBasedRule"]
        )

    @cached_property
    def AwsEcrRepository(self):  # pragma: no cover
        return AwsEcrRepositoryDetails.make_one(self.boto3_raw_data["AwsEcrRepository"])

    @cached_property
    def AwsEksCluster(self):  # pragma: no cover
        return AwsEksClusterDetailsOutput.make_one(self.boto3_raw_data["AwsEksCluster"])

    @cached_property
    def AwsNetworkFirewallFirewallPolicy(self):  # pragma: no cover
        return AwsNetworkFirewallFirewallPolicyDetailsOutput.make_one(
            self.boto3_raw_data["AwsNetworkFirewallFirewallPolicy"]
        )

    @cached_property
    def AwsNetworkFirewallFirewall(self):  # pragma: no cover
        return AwsNetworkFirewallFirewallDetailsOutput.make_one(
            self.boto3_raw_data["AwsNetworkFirewallFirewall"]
        )

    @cached_property
    def AwsNetworkFirewallRuleGroup(self):  # pragma: no cover
        return AwsNetworkFirewallRuleGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsNetworkFirewallRuleGroup"]
        )

    @cached_property
    def AwsRdsDbSecurityGroup(self):  # pragma: no cover
        return AwsRdsDbSecurityGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsRdsDbSecurityGroup"]
        )

    @cached_property
    def AwsKinesisStream(self):  # pragma: no cover
        return AwsKinesisStreamDetails.make_one(self.boto3_raw_data["AwsKinesisStream"])

    @cached_property
    def AwsEc2TransitGateway(self):  # pragma: no cover
        return AwsEc2TransitGatewayDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2TransitGateway"]
        )

    @cached_property
    def AwsEfsAccessPoint(self):  # pragma: no cover
        return AwsEfsAccessPointDetailsOutput.make_one(
            self.boto3_raw_data["AwsEfsAccessPoint"]
        )

    @cached_property
    def AwsCloudFormationStack(self):  # pragma: no cover
        return AwsCloudFormationStackDetailsOutput.make_one(
            self.boto3_raw_data["AwsCloudFormationStack"]
        )

    @cached_property
    def AwsCloudWatchAlarm(self):  # pragma: no cover
        return AwsCloudWatchAlarmDetailsOutput.make_one(
            self.boto3_raw_data["AwsCloudWatchAlarm"]
        )

    @cached_property
    def AwsEc2VpcPeeringConnection(self):  # pragma: no cover
        return AwsEc2VpcPeeringConnectionDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2VpcPeeringConnection"]
        )

    @cached_property
    def AwsWafRegionalRuleGroup(self):  # pragma: no cover
        return AwsWafRegionalRuleGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRegionalRuleGroup"]
        )

    @cached_property
    def AwsWafRegionalRule(self):  # pragma: no cover
        return AwsWafRegionalRuleDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRegionalRule"]
        )

    @cached_property
    def AwsWafRegionalWebAcl(self):  # pragma: no cover
        return AwsWafRegionalWebAclDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRegionalWebAcl"]
        )

    @cached_property
    def AwsWafRule(self):  # pragma: no cover
        return AwsWafRuleDetailsOutput.make_one(self.boto3_raw_data["AwsWafRule"])

    @cached_property
    def AwsWafRuleGroup(self):  # pragma: no cover
        return AwsWafRuleGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafRuleGroup"]
        )

    @cached_property
    def AwsEcsTask(self):  # pragma: no cover
        return AwsEcsTaskDetailsOutput.make_one(self.boto3_raw_data["AwsEcsTask"])

    @cached_property
    def AwsBackupBackupVault(self):  # pragma: no cover
        return AwsBackupBackupVaultDetailsOutput.make_one(
            self.boto3_raw_data["AwsBackupBackupVault"]
        )

    @cached_property
    def AwsBackupBackupPlan(self):  # pragma: no cover
        return AwsBackupBackupPlanDetailsOutput.make_one(
            self.boto3_raw_data["AwsBackupBackupPlan"]
        )

    @cached_property
    def AwsBackupRecoveryPoint(self):  # pragma: no cover
        return AwsBackupRecoveryPointDetails.make_one(
            self.boto3_raw_data["AwsBackupRecoveryPoint"]
        )

    @cached_property
    def AwsEc2LaunchTemplate(self):  # pragma: no cover
        return AwsEc2LaunchTemplateDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2LaunchTemplate"]
        )

    @cached_property
    def AwsSageMakerNotebookInstance(self):  # pragma: no cover
        return AwsSageMakerNotebookInstanceDetailsOutput.make_one(
            self.boto3_raw_data["AwsSageMakerNotebookInstance"]
        )

    @cached_property
    def AwsWafv2WebAcl(self):  # pragma: no cover
        return AwsWafv2WebAclDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafv2WebAcl"]
        )

    @cached_property
    def AwsWafv2RuleGroup(self):  # pragma: no cover
        return AwsWafv2RuleGroupDetailsOutput.make_one(
            self.boto3_raw_data["AwsWafv2RuleGroup"]
        )

    @cached_property
    def AwsEc2RouteTable(self):  # pragma: no cover
        return AwsEc2RouteTableDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2RouteTable"]
        )

    @cached_property
    def AwsAmazonMqBroker(self):  # pragma: no cover
        return AwsAmazonMqBrokerDetailsOutput.make_one(
            self.boto3_raw_data["AwsAmazonMqBroker"]
        )

    @cached_property
    def AwsAppSyncGraphQlApi(self):  # pragma: no cover
        return AwsAppSyncGraphQlApiDetailsOutput.make_one(
            self.boto3_raw_data["AwsAppSyncGraphQlApi"]
        )

    @cached_property
    def AwsEventSchemasRegistry(self):  # pragma: no cover
        return AwsEventSchemasRegistryDetails.make_one(
            self.boto3_raw_data["AwsEventSchemasRegistry"]
        )

    @cached_property
    def AwsGuardDutyDetector(self):  # pragma: no cover
        return AwsGuardDutyDetectorDetailsOutput.make_one(
            self.boto3_raw_data["AwsGuardDutyDetector"]
        )

    @cached_property
    def AwsStepFunctionStateMachine(self):  # pragma: no cover
        return AwsStepFunctionStateMachineDetailsOutput.make_one(
            self.boto3_raw_data["AwsStepFunctionStateMachine"]
        )

    @cached_property
    def AwsAthenaWorkGroup(self):  # pragma: no cover
        return AwsAthenaWorkGroupDetails.make_one(
            self.boto3_raw_data["AwsAthenaWorkGroup"]
        )

    @cached_property
    def AwsEventsEventbus(self):  # pragma: no cover
        return AwsEventsEventbusDetails.make_one(
            self.boto3_raw_data["AwsEventsEventbus"]
        )

    @cached_property
    def AwsDmsEndpoint(self):  # pragma: no cover
        return AwsDmsEndpointDetails.make_one(self.boto3_raw_data["AwsDmsEndpoint"])

    @cached_property
    def AwsEventsEndpoint(self):  # pragma: no cover
        return AwsEventsEndpointDetailsOutput.make_one(
            self.boto3_raw_data["AwsEventsEndpoint"]
        )

    @cached_property
    def AwsDmsReplicationTask(self):  # pragma: no cover
        return AwsDmsReplicationTaskDetails.make_one(
            self.boto3_raw_data["AwsDmsReplicationTask"]
        )

    @cached_property
    def AwsDmsReplicationInstance(self):  # pragma: no cover
        return AwsDmsReplicationInstanceDetailsOutput.make_one(
            self.boto3_raw_data["AwsDmsReplicationInstance"]
        )

    @cached_property
    def AwsRoute53HostedZone(self):  # pragma: no cover
        return AwsRoute53HostedZoneDetailsOutput.make_one(
            self.boto3_raw_data["AwsRoute53HostedZone"]
        )

    @cached_property
    def AwsMskCluster(self):  # pragma: no cover
        return AwsMskClusterDetailsOutput.make_one(self.boto3_raw_data["AwsMskCluster"])

    @cached_property
    def AwsS3AccessPoint(self):  # pragma: no cover
        return AwsS3AccessPointDetails.make_one(self.boto3_raw_data["AwsS3AccessPoint"])

    @cached_property
    def AwsEc2ClientVpnEndpoint(self):  # pragma: no cover
        return AwsEc2ClientVpnEndpointDetailsOutput.make_one(
            self.boto3_raw_data["AwsEc2ClientVpnEndpoint"]
        )

    @cached_property
    def CodeRepository(self):  # pragma: no cover
        return CodeRepositoryDetails.make_one(self.boto3_raw_data["CodeRepository"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.ResourceDetailsOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.ResourceDetailsOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsWafv2RuleGroupDetails:
    boto3_raw_data: "type_defs.AwsWafv2RuleGroupDetailsTypeDef" = dataclasses.field()

    Capacity = field("Capacity")
    Description = field("Description")
    Id = field("Id")
    Name = field("Name")
    Arn = field("Arn")
    Rules = field("Rules")
    Scope = field("Scope")

    @cached_property
    def VisibilityConfig(self):  # pragma: no cover
        return AwsWafv2VisibilityConfigDetails.make_one(
            self.boto3_raw_data["VisibilityConfig"]
        )

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsWafv2RuleGroupDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsWafv2RuleGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceOutput:
    boto3_raw_data: "type_defs.ResourceOutputTypeDef" = dataclasses.field()

    Type = field("Type")
    Id = field("Id")
    Partition = field("Partition")
    Region = field("Region")
    ResourceRole = field("ResourceRole")
    Tags = field("Tags")

    @cached_property
    def DataClassification(self):  # pragma: no cover
        return DataClassificationDetailsOutput.make_one(
            self.boto3_raw_data["DataClassification"]
        )

    @cached_property
    def Details(self):  # pragma: no cover
        return ResourceDetailsOutput.make_one(self.boto3_raw_data["Details"])

    ApplicationName = field("ApplicationName")
    ApplicationArn = field("ApplicationArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceOutputTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceOutputTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallFirewallPolicyDetails:
    boto3_raw_data: "type_defs.AwsNetworkFirewallFirewallPolicyDetailsTypeDef" = (
        dataclasses.field()
    )

    FirewallPolicy = field("FirewallPolicy")
    FirewallPolicyArn = field("FirewallPolicyArn")
    FirewallPolicyId = field("FirewallPolicyId")
    FirewallPolicyName = field("FirewallPolicyName")
    Description = field("Description")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallFirewallPolicyDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallFirewallPolicyDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsS3BucketDetails:
    boto3_raw_data: "type_defs.AwsS3BucketDetailsTypeDef" = dataclasses.field()

    OwnerId = field("OwnerId")
    OwnerName = field("OwnerName")
    OwnerAccountId = field("OwnerAccountId")
    CreatedAt = field("CreatedAt")
    ServerSideEncryptionConfiguration = field("ServerSideEncryptionConfiguration")
    BucketLifecycleConfiguration = field("BucketLifecycleConfiguration")

    @cached_property
    def PublicAccessBlockConfiguration(self):  # pragma: no cover
        return AwsS3AccountPublicAccessBlockDetails.make_one(
            self.boto3_raw_data["PublicAccessBlockConfiguration"]
        )

    AccessControlList = field("AccessControlList")

    @cached_property
    def BucketLoggingConfiguration(self):  # pragma: no cover
        return AwsS3BucketLoggingConfiguration.make_one(
            self.boto3_raw_data["BucketLoggingConfiguration"]
        )

    BucketWebsiteConfiguration = field("BucketWebsiteConfiguration")
    BucketNotificationConfiguration = field("BucketNotificationConfiguration")

    @cached_property
    def BucketVersioningConfiguration(self):  # pragma: no cover
        return AwsS3BucketBucketVersioningConfiguration.make_one(
            self.boto3_raw_data["BucketVersioningConfiguration"]
        )

    @cached_property
    def ObjectLockConfiguration(self):  # pragma: no cover
        return AwsS3BucketObjectLockConfiguration.make_one(
            self.boto3_raw_data["ObjectLockConfiguration"]
        )

    Name = field("Name")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsS3BucketDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsS3BucketDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class DataClassificationDetails:
    boto3_raw_data: "type_defs.DataClassificationDetailsTypeDef" = dataclasses.field()

    DetailedResultsLocation = field("DetailedResultsLocation")
    Result = field("Result")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.DataClassificationDetailsTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.DataClassificationDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupSource:
    boto3_raw_data: "type_defs.RuleGroupSourceTypeDef" = dataclasses.field()

    RulesSourceList = field("RulesSourceList")
    RulesString = field("RulesString")
    StatefulRules = field("StatefulRules")
    StatelessRulesAndCustomActions = field("StatelessRulesAndCustomActions")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RuleGroupSourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.RuleGroupSourceTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecurityFindingOutput:
    boto3_raw_data: "type_defs.AwsSecurityFindingOutputTypeDef" = dataclasses.field()

    SchemaVersion = field("SchemaVersion")
    Id = field("Id")
    ProductArn = field("ProductArn")
    GeneratorId = field("GeneratorId")
    AwsAccountId = field("AwsAccountId")
    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    Title = field("Title")
    Description = field("Description")

    @cached_property
    def Resources(self):  # pragma: no cover
        return ResourceOutput.make_many(self.boto3_raw_data["Resources"])

    ProductName = field("ProductName")
    CompanyName = field("CompanyName")
    Region = field("Region")
    Types = field("Types")
    FirstObservedAt = field("FirstObservedAt")
    LastObservedAt = field("LastObservedAt")

    @cached_property
    def Severity(self):  # pragma: no cover
        return Severity.make_one(self.boto3_raw_data["Severity"])

    Confidence = field("Confidence")
    Criticality = field("Criticality")

    @cached_property
    def Remediation(self):  # pragma: no cover
        return Remediation.make_one(self.boto3_raw_data["Remediation"])

    SourceUrl = field("SourceUrl")
    ProductFields = field("ProductFields")
    UserDefinedFields = field("UserDefinedFields")

    @cached_property
    def Malware(self):  # pragma: no cover
        return Malware.make_many(self.boto3_raw_data["Malware"])

    @cached_property
    def Network(self):  # pragma: no cover
        return Network.make_one(self.boto3_raw_data["Network"])

    @cached_property
    def NetworkPath(self):  # pragma: no cover
        return NetworkPathComponentOutput.make_many(self.boto3_raw_data["NetworkPath"])

    @cached_property
    def Process(self):  # pragma: no cover
        return ProcessDetails.make_one(self.boto3_raw_data["Process"])

    @cached_property
    def Threats(self):  # pragma: no cover
        return ThreatOutput.make_many(self.boto3_raw_data["Threats"])

    @cached_property
    def ThreatIntelIndicators(self):  # pragma: no cover
        return ThreatIntelIndicator.make_many(
            self.boto3_raw_data["ThreatIntelIndicators"]
        )

    @cached_property
    def Compliance(self):  # pragma: no cover
        return ComplianceOutput.make_one(self.boto3_raw_data["Compliance"])

    VerificationState = field("VerificationState")
    WorkflowState = field("WorkflowState")

    @cached_property
    def Workflow(self):  # pragma: no cover
        return Workflow.make_one(self.boto3_raw_data["Workflow"])

    RecordState = field("RecordState")

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @cached_property
    def Note(self):  # pragma: no cover
        return Note.make_one(self.boto3_raw_data["Note"])

    @cached_property
    def Vulnerabilities(self):  # pragma: no cover
        return VulnerabilityOutput.make_many(self.boto3_raw_data["Vulnerabilities"])

    @cached_property
    def PatchSummary(self):  # pragma: no cover
        return PatchSummary.make_one(self.boto3_raw_data["PatchSummary"])

    @cached_property
    def Action(self):  # pragma: no cover
        return ActionOutput.make_one(self.boto3_raw_data["Action"])

    @cached_property
    def FindingProviderFields(self):  # pragma: no cover
        return FindingProviderFieldsOutput.make_one(
            self.boto3_raw_data["FindingProviderFields"]
        )

    Sample = field("Sample")

    @cached_property
    def GeneratorDetails(self):  # pragma: no cover
        return GeneratorDetailsOutput.make_one(self.boto3_raw_data["GeneratorDetails"])

    ProcessedAt = field("ProcessedAt")
    AwsAccountName = field("AwsAccountName")

    @cached_property
    def Detection(self):  # pragma: no cover
        return DetectionOutput.make_one(self.boto3_raw_data["Detection"])

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSecurityFindingOutputTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecurityFindingOutputTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class GetFindingsResponse:
    boto3_raw_data: "type_defs.GetFindingsResponseTypeDef" = dataclasses.field()

    @cached_property
    def Findings(self):  # pragma: no cover
        return AwsSecurityFindingOutput.make_many(self.boto3_raw_data["Findings"])

    @cached_property
    def ResponseMetadata(self):  # pragma: no cover
        return ResponseMetadata.make_one(self.boto3_raw_data["ResponseMetadata"])

    NextToken = field("NextToken")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.GetFindingsResponseTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.GetFindingsResponseTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class RuleGroupDetails:
    boto3_raw_data: "type_defs.RuleGroupDetailsTypeDef" = dataclasses.field()

    RuleVariables = field("RuleVariables")
    RulesSource = field("RulesSource")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.RuleGroupDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.RuleGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsNetworkFirewallRuleGroupDetails:
    boto3_raw_data: "type_defs.AwsNetworkFirewallRuleGroupDetailsTypeDef" = (
        dataclasses.field()
    )

    Capacity = field("Capacity")
    Description = field("Description")
    RuleGroup = field("RuleGroup")
    RuleGroupArn = field("RuleGroupArn")
    RuleGroupId = field("RuleGroupId")
    RuleGroupName = field("RuleGroupName")
    Type = field("Type")

    @classmethod
    def make_one(
        cls,
        boto3_raw_data: T.Optional[
            "type_defs.AwsNetworkFirewallRuleGroupDetailsTypeDef"
        ],
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsNetworkFirewallRuleGroupDetailsTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class ResourceDetails:
    boto3_raw_data: "type_defs.ResourceDetailsTypeDef" = dataclasses.field()

    AwsAutoScalingAutoScalingGroup = field("AwsAutoScalingAutoScalingGroup")
    AwsCodeBuildProject = field("AwsCodeBuildProject")
    AwsCloudFrontDistribution = field("AwsCloudFrontDistribution")
    AwsEc2Instance = field("AwsEc2Instance")
    AwsEc2NetworkInterface = field("AwsEc2NetworkInterface")
    AwsEc2SecurityGroup = field("AwsEc2SecurityGroup")
    AwsEc2Volume = field("AwsEc2Volume")
    AwsEc2Vpc = field("AwsEc2Vpc")

    @cached_property
    def AwsEc2Eip(self):  # pragma: no cover
        return AwsEc2EipDetails.make_one(self.boto3_raw_data["AwsEc2Eip"])

    AwsEc2Subnet = field("AwsEc2Subnet")
    AwsEc2NetworkAcl = field("AwsEc2NetworkAcl")
    AwsElbv2LoadBalancer = field("AwsElbv2LoadBalancer")
    AwsElasticBeanstalkEnvironment = field("AwsElasticBeanstalkEnvironment")
    AwsElasticsearchDomain = field("AwsElasticsearchDomain")
    AwsS3Bucket = field("AwsS3Bucket")

    @cached_property
    def AwsS3AccountPublicAccessBlock(self):  # pragma: no cover
        return AwsS3AccountPublicAccessBlockDetails.make_one(
            self.boto3_raw_data["AwsS3AccountPublicAccessBlock"]
        )

    @cached_property
    def AwsS3Object(self):  # pragma: no cover
        return AwsS3ObjectDetails.make_one(self.boto3_raw_data["AwsS3Object"])

    @cached_property
    def AwsSecretsManagerSecret(self):  # pragma: no cover
        return AwsSecretsManagerSecretDetails.make_one(
            self.boto3_raw_data["AwsSecretsManagerSecret"]
        )

    @cached_property
    def AwsIamAccessKey(self):  # pragma: no cover
        return AwsIamAccessKeyDetails.make_one(self.boto3_raw_data["AwsIamAccessKey"])

    AwsIamUser = field("AwsIamUser")
    AwsIamPolicy = field("AwsIamPolicy")
    AwsApiGatewayV2Stage = field("AwsApiGatewayV2Stage")
    AwsApiGatewayV2Api = field("AwsApiGatewayV2Api")
    AwsDynamoDbTable = field("AwsDynamoDbTable")
    AwsApiGatewayStage = field("AwsApiGatewayStage")
    AwsApiGatewayRestApi = field("AwsApiGatewayRestApi")

    @cached_property
    def AwsCloudTrailTrail(self):  # pragma: no cover
        return AwsCloudTrailTrailDetails.make_one(
            self.boto3_raw_data["AwsCloudTrailTrail"]
        )

    @cached_property
    def AwsSsmPatchCompliance(self):  # pragma: no cover
        return AwsSsmPatchComplianceDetails.make_one(
            self.boto3_raw_data["AwsSsmPatchCompliance"]
        )

    AwsCertificateManagerCertificate = field("AwsCertificateManagerCertificate")
    AwsRedshiftCluster = field("AwsRedshiftCluster")
    AwsElbLoadBalancer = field("AwsElbLoadBalancer")
    AwsIamGroup = field("AwsIamGroup")
    AwsIamRole = field("AwsIamRole")

    @cached_property
    def AwsKmsKey(self):  # pragma: no cover
        return AwsKmsKeyDetails.make_one(self.boto3_raw_data["AwsKmsKey"])

    AwsLambdaFunction = field("AwsLambdaFunction")
    AwsLambdaLayerVersion = field("AwsLambdaLayerVersion")
    AwsRdsDbInstance = field("AwsRdsDbInstance")
    AwsSnsTopic = field("AwsSnsTopic")

    @cached_property
    def AwsSqsQueue(self):  # pragma: no cover
        return AwsSqsQueueDetails.make_one(self.boto3_raw_data["AwsSqsQueue"])

    AwsWafWebAcl = field("AwsWafWebAcl")
    AwsRdsDbSnapshot = field("AwsRdsDbSnapshot")
    AwsRdsDbClusterSnapshot = field("AwsRdsDbClusterSnapshot")
    AwsRdsDbCluster = field("AwsRdsDbCluster")
    AwsEcsCluster = field("AwsEcsCluster")
    AwsEcsContainer = field("AwsEcsContainer")
    AwsEcsTaskDefinition = field("AwsEcsTaskDefinition")
    Container = field("Container")
    Other = field("Other")
    AwsRdsEventSubscription = field("AwsRdsEventSubscription")
    AwsEcsService = field("AwsEcsService")
    AwsAutoScalingLaunchConfiguration = field("AwsAutoScalingLaunchConfiguration")
    AwsEc2VpnConnection = field("AwsEc2VpnConnection")
    AwsEcrContainerImage = field("AwsEcrContainerImage")
    AwsOpenSearchServiceDomain = field("AwsOpenSearchServiceDomain")
    AwsEc2VpcEndpointService = field("AwsEc2VpcEndpointService")

    @cached_property
    def AwsXrayEncryptionConfig(self):  # pragma: no cover
        return AwsXrayEncryptionConfigDetails.make_one(
            self.boto3_raw_data["AwsXrayEncryptionConfig"]
        )

    AwsWafRateBasedRule = field("AwsWafRateBasedRule")
    AwsWafRegionalRateBasedRule = field("AwsWafRegionalRateBasedRule")

    @cached_property
    def AwsEcrRepository(self):  # pragma: no cover
        return AwsEcrRepositoryDetails.make_one(self.boto3_raw_data["AwsEcrRepository"])

    AwsEksCluster = field("AwsEksCluster")
    AwsNetworkFirewallFirewallPolicy = field("AwsNetworkFirewallFirewallPolicy")
    AwsNetworkFirewallFirewall = field("AwsNetworkFirewallFirewall")
    AwsNetworkFirewallRuleGroup = field("AwsNetworkFirewallRuleGroup")
    AwsRdsDbSecurityGroup = field("AwsRdsDbSecurityGroup")

    @cached_property
    def AwsKinesisStream(self):  # pragma: no cover
        return AwsKinesisStreamDetails.make_one(self.boto3_raw_data["AwsKinesisStream"])

    AwsEc2TransitGateway = field("AwsEc2TransitGateway")
    AwsEfsAccessPoint = field("AwsEfsAccessPoint")
    AwsCloudFormationStack = field("AwsCloudFormationStack")
    AwsCloudWatchAlarm = field("AwsCloudWatchAlarm")
    AwsEc2VpcPeeringConnection = field("AwsEc2VpcPeeringConnection")
    AwsWafRegionalRuleGroup = field("AwsWafRegionalRuleGroup")
    AwsWafRegionalRule = field("AwsWafRegionalRule")
    AwsWafRegionalWebAcl = field("AwsWafRegionalWebAcl")
    AwsWafRule = field("AwsWafRule")
    AwsWafRuleGroup = field("AwsWafRuleGroup")
    AwsEcsTask = field("AwsEcsTask")
    AwsBackupBackupVault = field("AwsBackupBackupVault")
    AwsBackupBackupPlan = field("AwsBackupBackupPlan")

    @cached_property
    def AwsBackupRecoveryPoint(self):  # pragma: no cover
        return AwsBackupRecoveryPointDetails.make_one(
            self.boto3_raw_data["AwsBackupRecoveryPoint"]
        )

    AwsEc2LaunchTemplate = field("AwsEc2LaunchTemplate")
    AwsSageMakerNotebookInstance = field("AwsSageMakerNotebookInstance")
    AwsWafv2WebAcl = field("AwsWafv2WebAcl")
    AwsWafv2RuleGroup = field("AwsWafv2RuleGroup")
    AwsEc2RouteTable = field("AwsEc2RouteTable")
    AwsAmazonMqBroker = field("AwsAmazonMqBroker")
    AwsAppSyncGraphQlApi = field("AwsAppSyncGraphQlApi")

    @cached_property
    def AwsEventSchemasRegistry(self):  # pragma: no cover
        return AwsEventSchemasRegistryDetails.make_one(
            self.boto3_raw_data["AwsEventSchemasRegistry"]
        )

    AwsGuardDutyDetector = field("AwsGuardDutyDetector")
    AwsStepFunctionStateMachine = field("AwsStepFunctionStateMachine")

    @cached_property
    def AwsAthenaWorkGroup(self):  # pragma: no cover
        return AwsAthenaWorkGroupDetails.make_one(
            self.boto3_raw_data["AwsAthenaWorkGroup"]
        )

    @cached_property
    def AwsEventsEventbus(self):  # pragma: no cover
        return AwsEventsEventbusDetails.make_one(
            self.boto3_raw_data["AwsEventsEventbus"]
        )

    @cached_property
    def AwsDmsEndpoint(self):  # pragma: no cover
        return AwsDmsEndpointDetails.make_one(self.boto3_raw_data["AwsDmsEndpoint"])

    AwsEventsEndpoint = field("AwsEventsEndpoint")

    @cached_property
    def AwsDmsReplicationTask(self):  # pragma: no cover
        return AwsDmsReplicationTaskDetails.make_one(
            self.boto3_raw_data["AwsDmsReplicationTask"]
        )

    AwsDmsReplicationInstance = field("AwsDmsReplicationInstance")
    AwsRoute53HostedZone = field("AwsRoute53HostedZone")
    AwsMskCluster = field("AwsMskCluster")

    @cached_property
    def AwsS3AccessPoint(self):  # pragma: no cover
        return AwsS3AccessPointDetails.make_one(self.boto3_raw_data["AwsS3AccessPoint"])

    AwsEc2ClientVpnEndpoint = field("AwsEc2ClientVpnEndpoint")

    @cached_property
    def CodeRepository(self):  # pragma: no cover
        return CodeRepositoryDetails.make_one(self.boto3_raw_data["CodeRepository"])

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceDetailsTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceDetailsTypeDef"]],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class Resource:
    boto3_raw_data: "type_defs.ResourceTypeDef" = dataclasses.field()

    Type = field("Type")
    Id = field("Id")
    Partition = field("Partition")
    Region = field("Region")
    ResourceRole = field("ResourceRole")
    Tags = field("Tags")
    DataClassification = field("DataClassification")
    Details = field("Details")
    ApplicationName = field("ApplicationName")
    ApplicationArn = field("ApplicationArn")

    @classmethod
    def make_one(cls, boto3_raw_data: T.Optional["type_defs.ResourceTypeDef"]):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls, boto3_raw_data_list: T.Optional[T.Iterable["type_defs.ResourceTypeDef"]]
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class AwsSecurityFinding:
    boto3_raw_data: "type_defs.AwsSecurityFindingTypeDef" = dataclasses.field()

    SchemaVersion = field("SchemaVersion")
    Id = field("Id")
    ProductArn = field("ProductArn")
    GeneratorId = field("GeneratorId")
    AwsAccountId = field("AwsAccountId")
    CreatedAt = field("CreatedAt")
    UpdatedAt = field("UpdatedAt")
    Title = field("Title")
    Description = field("Description")
    Resources = field("Resources")
    ProductName = field("ProductName")
    CompanyName = field("CompanyName")
    Region = field("Region")
    Types = field("Types")
    FirstObservedAt = field("FirstObservedAt")
    LastObservedAt = field("LastObservedAt")

    @cached_property
    def Severity(self):  # pragma: no cover
        return Severity.make_one(self.boto3_raw_data["Severity"])

    Confidence = field("Confidence")
    Criticality = field("Criticality")

    @cached_property
    def Remediation(self):  # pragma: no cover
        return Remediation.make_one(self.boto3_raw_data["Remediation"])

    SourceUrl = field("SourceUrl")
    ProductFields = field("ProductFields")
    UserDefinedFields = field("UserDefinedFields")

    @cached_property
    def Malware(self):  # pragma: no cover
        return Malware.make_many(self.boto3_raw_data["Malware"])

    @cached_property
    def Network(self):  # pragma: no cover
        return Network.make_one(self.boto3_raw_data["Network"])

    NetworkPath = field("NetworkPath")

    @cached_property
    def Process(self):  # pragma: no cover
        return ProcessDetails.make_one(self.boto3_raw_data["Process"])

    Threats = field("Threats")

    @cached_property
    def ThreatIntelIndicators(self):  # pragma: no cover
        return ThreatIntelIndicator.make_many(
            self.boto3_raw_data["ThreatIntelIndicators"]
        )

    Compliance = field("Compliance")
    VerificationState = field("VerificationState")
    WorkflowState = field("WorkflowState")

    @cached_property
    def Workflow(self):  # pragma: no cover
        return Workflow.make_one(self.boto3_raw_data["Workflow"])

    RecordState = field("RecordState")

    @cached_property
    def RelatedFindings(self):  # pragma: no cover
        return RelatedFinding.make_many(self.boto3_raw_data["RelatedFindings"])

    @cached_property
    def Note(self):  # pragma: no cover
        return Note.make_one(self.boto3_raw_data["Note"])

    Vulnerabilities = field("Vulnerabilities")

    @cached_property
    def PatchSummary(self):  # pragma: no cover
        return PatchSummary.make_one(self.boto3_raw_data["PatchSummary"])

    Action = field("Action")
    FindingProviderFields = field("FindingProviderFields")
    Sample = field("Sample")
    GeneratorDetails = field("GeneratorDetails")
    ProcessedAt = field("ProcessedAt")
    AwsAccountName = field("AwsAccountName")
    Detection = field("Detection")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.AwsSecurityFindingTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.AwsSecurityFindingTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]


@dataclasses.dataclass(frozen=True)
class BatchImportFindingsRequest:
    boto3_raw_data: "type_defs.BatchImportFindingsRequestTypeDef" = dataclasses.field()

    Findings = field("Findings")

    @classmethod
    def make_one(
        cls, boto3_raw_data: T.Optional["type_defs.BatchImportFindingsRequestTypeDef"]
    ):
        if boto3_raw_data is None:
            return None
        return cls(boto3_raw_data=boto3_raw_data)

    @classmethod
    def make_many(
        cls,
        boto3_raw_data_list: T.Optional[
            T.Iterable["type_defs.BatchImportFindingsRequestTypeDef"]
        ],
    ):
        if boto3_raw_data_list is None:
            return None
        return [
            cls(boto3_raw_data=boto3_raw_data) for boto3_raw_data in boto3_raw_data_list
        ]

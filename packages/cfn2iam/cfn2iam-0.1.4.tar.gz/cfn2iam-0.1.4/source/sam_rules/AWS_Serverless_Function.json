{
  "version": "1.0",
  "resource_type": "AWS::Serverless::Function",
  "base_resources": ["AWS::Lambda::Function"],
  "conditional_resources": [
    {
      "condition": { "path": "properties.AutoPublishAlias", "op": "truthy" },
      "resources": ["AWS::Lambda::Alias", "AWS::Lambda::Version"]
    },
    {
      "condition": { "path": "properties.Role", "op": "is_null" },
      "resources": ["AWS::IAM::Role"]
    },
    {
      "condition": {
        "path": "properties.DeploymentPreference",
        "op": "truthy"
      },
      "resources": [
        "AWS::CodeDeploy::Application",
        "AWS::CodeDeploy::DeploymentGroup"
      ]
    },
    {
      "condition": {
        "path": "properties.DeploymentPreference.Role",
        "op": "is_null"
      },
      "resources": ["AWS::IAM::Role"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "Api"
      },
      "resources": ["AWS::ApiGateway::Method"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Properties.RestApiId",
        "op": "is_null"
      },
      "resources": ["AWS::ApiGateway::RestApi"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "HttpApi"
      },
      "resources": ["AWS::ApiGatewayV2::Api"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Properties.ApiId",
        "op": "is_null"
      },
      "resources": ["AWS::ApiGatewayV2::Api"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "DynamoDB"
      },
      "resources": ["AWS::Lambda::EventSourceMapping"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "Kinesis"
      },
      "resources": ["AWS::Lambda::EventSourceMapping"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "MQ"
      },
      "resources": ["AWS::Lambda::EventSourceMapping"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "MSK"
      },
      "resources": ["AWS::Lambda::EventSourceMapping"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "SQS"
      },
      "resources": ["AWS::Lambda::EventSourceMapping"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "EventBridgeRule"
      },
      "resources": ["AWS::Events::Rule"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "Schedule"
      },
      "resources": ["AWS::Events::Rule"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "CloudWatchEvents"
      },
      "resources": ["AWS::Events::Rule"]
    },
    {
      "condition": {
        "path": "properties.Events.*.Type",
        "op": "any_eq",
        "value": "IoTRule"
      },
      "resources": ["AWS::IoT::TopicRule"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnSuccess.Type",
        "op": "any_eq",
        "value": "SNS"
      },
      "resources": ["AWS::Lambda::EventInvokeConfig"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnFailure.Type",
        "op": "any_eq",
        "value": "SNS"
      },
      "resources": ["AWS::Lambda::EventInvokeConfig"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnSuccess.Destination",
        "op": "is_null"
      },
      "resources": ["AWS::SNS::Topic"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnFailure.Destination",
        "op": "is_null"
      },
      "resources": ["AWS::SNS::Topic"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnSuccess.Type",
        "op": "any_eq",
        "value": "SQS"
      },
      "resources": ["AWS::Lambda::EventInvokeConfig"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnFailure.Type",
        "op": "any_eq",
        "value": "SQS"
      },
      "resources": ["AWS::Lambda::EventInvokeConfig"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnSuccess.Destination",
        "op": "is_null"
      },
      "resources": ["AWS::SQS::Queue"]
    },
    {
      "condition": {
        "path": "properties.EventInvokeConfig.DestinationConfig.OnFailure.Destination",
        "op": "is_null"
      },
      "resources": ["AWS::SQS::Queue"]
    }
  ],
  "logical_id_templates": [
    "<function-logical-id>",
    "<function-logical-id>Alias<alias-name>",
    "<function-logical-id>Version<sha>",
    "<function-logical-id>Role",
    "ServerlessDeploymentApplication",
    "<function-logical-id>DeploymentGroup",
    "CodeDeployServiceRole",
    "ServerlessRestApi",
    "ServerlessHttpApi",
    "<function-logical-id><event-logical-id>",
    "<function-logical-id>EventInvokeConfig",
    "<function-logical-id>OnSuccessTopic",
    "<function-logical-id>OnFailureTopic",
    "<function-logical-id>OnSuccessQueue",
    "<function-logical-id>OnFailureQueue"
  ]
}

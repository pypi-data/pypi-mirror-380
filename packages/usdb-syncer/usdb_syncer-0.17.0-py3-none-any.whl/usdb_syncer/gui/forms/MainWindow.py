# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'MainWindow.ui'
##
## Created by: Qt User Interface Compiler version 6.9.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QAbstractItemView, QApplication, QDockWidget, QFrame,
    QHBoxLayout, QHeaderView, QLabel, QLineEdit,
    QMainWindow, QMenu, QMenuBar, QPlainTextEdit,
    QProgressBar, QPushButton, QSizePolicy, QSpacerItem,
    QStatusBar, QTableView, QToolButton, QTreeView,
    QVBoxLayout, QWidget)
from usdb_syncer.gui.resources.qt import resources as resources_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1540, 838)
        self.action_meta_tags = QAction(MainWindow)
        self.action_meta_tags.setObjectName(u"action_meta_tags")
        icon = QIcon()
        icon.addFile(u":/icons/tag-hash.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_meta_tags.setIcon(icon)
        self.action_settings = QAction(MainWindow)
        self.action_settings.setObjectName(u"action_settings")
        icon1 = QIcon()
        icon1.addFile(u":/icons/cog.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_settings.setIcon(icon1)
        self.action_generate_song_list = QAction(MainWindow)
        self.action_generate_song_list.setObjectName(u"action_generate_song_list")
        icon2 = QIcon()
        icon2.addFile(u":/icons/report.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_generate_song_list.setIcon(icon2)
        self.action_refetch_song_list = QAction(MainWindow)
        self.action_refetch_song_list.setObjectName(u"action_refetch_song_list")
        icon3 = QIcon()
        icon3.addFile(u":/icons/check_for_update.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_refetch_song_list.setIcon(icon3)
        self.action_find_local_songs = QAction(MainWindow)
        self.action_find_local_songs.setObjectName(u"action_find_local_songs")
        icon4 = QIcon()
        icon4.addFile(u":/icons/database.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_find_local_songs.setIcon(icon4)
        self.action_show_log = QAction(MainWindow)
        self.action_show_log.setObjectName(u"action_show_log")
        icon5 = QIcon()
        icon5.addFile(u":/icons/log.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_show_log.setIcon(icon5)
        self.action_import_usdb_ids = QAction(MainWindow)
        self.action_import_usdb_ids.setObjectName(u"action_import_usdb_ids")
        icon6 = QIcon()
        icon6.addFile(u":/icons/document-export.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_import_usdb_ids.setIcon(icon6)
        self.action_export_usdb_ids = QAction(MainWindow)
        self.action_export_usdb_ids.setObjectName(u"action_export_usdb_ids")
        icon7 = QIcon()
        icon7.addFile(u":/icons/document-import.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_export_usdb_ids.setIcon(icon7)
        self.action_songs_download = QAction(MainWindow)
        self.action_songs_download.setObjectName(u"action_songs_download")
        icon8 = QIcon()
        icon8.addFile(u":/icons/status.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_songs_download.setIcon(icon8)
        self.action_usdb_login = QAction(MainWindow)
        self.action_usdb_login.setObjectName(u"action_usdb_login")
        icon9 = QIcon()
        icon9.addFile(u":/icons/faviconUSDB.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_usdb_login.setIcon(icon9)
        self.action_about = QAction(MainWindow)
        self.action_about.setObjectName(u"action_about")
        icon10 = QIcon()
        icon10.addFile(u":/app/appicon_128x128.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_about.setIcon(icon10)
        self.action_show_in_usdb = QAction(MainWindow)
        self.action_show_in_usdb.setObjectName(u"action_show_in_usdb")
        self.action_show_in_usdb.setIcon(icon9)
        self.action_post_comment_in_usdb = QAction(MainWindow)
        self.action_post_comment_in_usdb.setObjectName(u"action_post_comment_in_usdb")
        icon11 = QIcon()
        icon11.addFile(u":/icons/balloon.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_post_comment_in_usdb.setIcon(icon11)
        self.action_open_song_folder = QAction(MainWindow)
        self.action_open_song_folder.setObjectName(u"action_open_song_folder")
        icon12 = QIcon()
        icon12.addFile(u":/icons/folder_note.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_folder.setIcon(icon12)
        self.action_delete = QAction(MainWindow)
        self.action_delete.setObjectName(u"action_delete")
        icon13 = QIcon()
        icon13.addFile(u":/icons/bin.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_delete.setIcon(icon13)
        self.action_pin = QAction(MainWindow)
        self.action_pin.setObjectName(u"action_pin")
        self.action_pin.setCheckable(True)
        icon14 = QIcon()
        icon14.addFile(u":/icons/pin.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_pin.setIcon(icon14)
        self.action_songs_abort = QAction(MainWindow)
        self.action_songs_abort.setObjectName(u"action_songs_abort")
        icon15 = QIcon()
        icon15.addFile(u":/icons/minus-circle.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_songs_abort.setIcon(icon15)
        self.action_delete_saved_search = QAction(MainWindow)
        self.action_delete_saved_search.setObjectName(u"action_delete_saved_search")
        self.action_delete_saved_search.setMenuRole(QAction.MenuRole.NoRole)
        self.action_add_saved_search = QAction(MainWindow)
        self.action_add_saved_search.setObjectName(u"action_add_saved_search")
        self.action_add_saved_search.setMenuRole(QAction.MenuRole.NoRole)
        self.action_update_saved_search = QAction(MainWindow)
        self.action_update_saved_search.setObjectName(u"action_update_saved_search")
        self.action_update_saved_search.setMenuRole(QAction.MenuRole.NoRole)
        self.action_set_saved_search_default = QAction(MainWindow)
        self.action_set_saved_search_default.setObjectName(u"action_set_saved_search_default")
        self.action_set_saved_search_default.setCheckable(True)
        self.action_set_saved_search_default.setMenuRole(QAction.MenuRole.NoRole)
        self.action_set_saved_search_subscribed = QAction(MainWindow)
        self.action_set_saved_search_subscribed.setObjectName(u"action_set_saved_search_subscribed")
        self.action_set_saved_search_subscribed.setCheckable(True)
        self.action_set_saved_search_subscribed.setMenuRole(QAction.MenuRole.NoRole)
        self.action_open_song_in_karedi = QAction(MainWindow)
        self.action_open_song_in_karedi.setObjectName(u"action_open_song_in_karedi")
        icon16 = QIcon()
        icon16.addFile(u":/icons/karedi.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_karedi.setIcon(icon16)
        self.action_open_song_in_performous = QAction(MainWindow)
        self.action_open_song_in_performous.setObjectName(u"action_open_song_in_performous")
        icon17 = QIcon()
        icon17.addFile(u":/icons/performous.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_performous.setIcon(icon17)
        self.action_open_song_in_usdx = QAction(MainWindow)
        self.action_open_song_in_usdx.setObjectName(u"action_open_song_in_usdx")
        icon18 = QIcon()
        icon18.addFile(u":/icons/usdx.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_usdx.setIcon(icon18)
        self.action_open_song_in_ultrastar_manager = QAction(MainWindow)
        self.action_open_song_in_ultrastar_manager.setObjectName(u"action_open_song_in_ultrastar_manager")
        icon19 = QIcon()
        icon19.addFile(u":/icons/ultrastar-manager.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_ultrastar_manager.setIcon(icon19)
        self.action_open_song_in_vocaluxe = QAction(MainWindow)
        self.action_open_song_in_vocaluxe.setObjectName(u"action_open_song_in_vocaluxe")
        icon20 = QIcon()
        icon20.addFile(u":/icons/vocaluxe.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_vocaluxe.setIcon(icon20)
        self.action_open_song_in_yass_reloaded = QAction(MainWindow)
        self.action_open_song_in_yass_reloaded.setObjectName(u"action_open_song_in_yass_reloaded")
        icon21 = QIcon()
        icon21.addFile(u":/icons/yass-reloaded.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_open_song_in_yass_reloaded.setIcon(icon21)
        self.action_rate_in_usdb = QAction(MainWindow)
        self.action_rate_in_usdb.setObjectName(u"action_rate_in_usdb")
        icon22 = QIcon()
        icon22.addFile(u":/icons/rating.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_rate_in_usdb.setIcon(icon22)
        self.action_rate_in_usdb.setMenuRole(QAction.MenuRole.NoRole)
        self.action_rate_1star = QAction(MainWindow)
        self.action_rate_1star.setObjectName(u"action_rate_1star")
        self.action_rate_2stars = QAction(MainWindow)
        self.action_rate_2stars.setObjectName(u"action_rate_2stars")
        self.action_rate_3stars = QAction(MainWindow)
        self.action_rate_3stars.setObjectName(u"action_rate_3stars")
        self.action_rate_4stars = QAction(MainWindow)
        self.action_rate_4stars.setObjectName(u"action_rate_4stars")
        self.action_rate_5stars = QAction(MainWindow)
        self.action_rate_5stars.setObjectName(u"action_rate_5stars")
        self.action_preview = QAction(MainWindow)
        self.action_preview.setObjectName(u"action_preview")
        self.action_go_to_search = QAction(MainWindow)
        self.action_go_to_search.setObjectName(u"action_go_to_search")
        self.action_go_to_song_table = QAction(MainWindow)
        self.action_go_to_song_table.setObjectName(u"action_go_to_song_table")
        self.action_go_to_filters = QAction(MainWindow)
        self.action_go_to_filters.setObjectName(u"action_go_to_filters")
        self.action_go_to_filter_search = QAction(MainWindow)
        self.action_go_to_filter_search.setObjectName(u"action_go_to_filter_search")
        self.action_go_to_open_song_menu = QAction(MainWindow)
        self.action_go_to_open_song_menu.setObjectName(u"action_go_to_open_song_menu")
        self.action_open_song_in_tune_perfect = QAction(MainWindow)
        self.action_open_song_in_tune_perfect.setObjectName(u"action_open_song_in_tune_perfect")
        self.action_webserver = QAction(MainWindow)
        self.action_webserver.setObjectName(u"action_webserver")
        icon23 = QIcon()
        icon23.addFile(u":/icons/server-black.svg", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.action_webserver.setIcon(icon23)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout_3 = QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.horizontalLayout_4 = QHBoxLayout()
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.lineEdit_search = QLineEdit(self.centralwidget)
        self.lineEdit_search.setObjectName(u"lineEdit_search")

        self.horizontalLayout_4.addWidget(self.lineEdit_search)

        self.label_update_hint = QLabel(self.centralwidget)
        self.label_update_hint.setObjectName(u"label_update_hint")

        self.horizontalLayout_4.addWidget(self.label_update_hint)


        self.verticalLayout_3.addLayout(self.horizontalLayout_4)

        self.table_view = QTableView(self.centralwidget)
        self.table_view.setObjectName(u"table_view")
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.table_view.sizePolicy().hasHeightForWidth())
        self.table_view.setSizePolicy(sizePolicy)
        self.table_view.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.table_view.setAlternatingRowColors(True)
        self.table_view.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)
        self.table_view.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)
        self.table_view.setSortingEnabled(True)
        self.table_view.horizontalHeader().setMinimumSectionSize(20)
        self.table_view.horizontalHeader().setDefaultSectionSize(20)
        self.table_view.horizontalHeader().setHighlightSections(False)
        self.table_view.horizontalHeader().setStretchLastSection(True)
        self.table_view.verticalHeader().setVisible(False)
        self.table_view.verticalHeader().setMinimumSectionSize(24)
        self.table_view.verticalHeader().setDefaultSectionSize(24)

        self.verticalLayout_3.addWidget(self.table_view)

        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.button_download = QPushButton(self.centralwidget)
        self.button_download.setObjectName(u"button_download")
        self.button_download.setEnabled(True)
        icon24 = QIcon()
        icon24.addFile(u":/icons/drive-download.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.button_download.setIcon(icon24)
        self.button_download.setIconSize(QSize(20, 20))

        self.horizontalLayout.addWidget(self.button_download)

        self.button_pause = QToolButton(self.centralwidget)
        self.button_pause.setObjectName(u"button_pause")
        icon25 = QIcon()
        icon25.addFile(u":/icons/control-pause.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.button_pause.setIcon(icon25)
        self.button_pause.setIconSize(QSize(20, 20))
        self.button_pause.setCheckable(True)

        self.horizontalLayout.addWidget(self.button_pause)

        self.bar_download_progress = QProgressBar(self.centralwidget)
        self.bar_download_progress.setObjectName(u"bar_download_progress")
        self.bar_download_progress.setValue(0)
        self.bar_download_progress.setTextVisible(False)

        self.horizontalLayout.addWidget(self.bar_download_progress)

        self.label_download_progress = QLabel(self.centralwidget)
        self.label_download_progress.setObjectName(u"label_download_progress")
        self.label_download_progress.setMinimumSize(QSize(100, 0))
        self.label_download_progress.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.horizontalLayout.addWidget(self.label_download_progress)

        self.horizontalSpacer_2 = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout.addItem(self.horizontalSpacer_2)

        self.pushButton_select_song_dir = QPushButton(self.centralwidget)
        self.pushButton_select_song_dir.setObjectName(u"pushButton_select_song_dir")
        self.pushButton_select_song_dir.setEnabled(True)
        self.pushButton_select_song_dir.setIcon(icon12)

        self.horizontalLayout.addWidget(self.pushButton_select_song_dir)

        self.lineEdit_song_dir = QLineEdit(self.centralwidget)
        self.lineEdit_song_dir.setObjectName(u"lineEdit_song_dir")
        self.lineEdit_song_dir.setReadOnly(True)

        self.horizontalLayout.addWidget(self.lineEdit_song_dir)


        self.verticalLayout_3.addLayout(self.horizontalLayout)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setEnabled(True)
        self.menubar.setGeometry(QRect(0, 0, 1540, 22))
        self.menu_tools = QMenu(self.menubar)
        self.menu_tools.setObjectName(u"menu_tools")
        self.menu_tools.setToolTipsVisible(True)
        self.menu_usdb = QMenu(self.menubar)
        self.menu_usdb.setObjectName(u"menu_usdb")
        self.menu_usdb.setToolTipsVisible(True)
        self.menu_about = QMenu(self.menubar)
        self.menu_about.setObjectName(u"menu_about")
        self.menu_about.setToolTipsVisible(True)
        self.menu_songs = QMenu(self.menubar)
        self.menu_songs.setObjectName(u"menu_songs")
        self.menu_songs.setToolTipsVisible(True)
        self.menu_custom_data = QMenu(self.menu_songs)
        self.menu_custom_data.setObjectName(u"menu_custom_data")
        icon26 = QIcon()
        icon26.addFile(u":/icons/drawer.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.menu_custom_data.setIcon(icon26)
        self.menu_open_song_in = QMenu(self.menu_songs)
        self.menu_open_song_in.setObjectName(u"menu_open_song_in")
        icon27 = QIcon()
        icon27.addFile(u":/icons/music--arrow.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.menu_open_song_in.setIcon(icon27)
        self.menu_rate_song_on_usdb = QMenu(self.menu_songs)
        self.menu_rate_song_on_usdb.setObjectName(u"menu_rate_song_on_usdb")
        self.menu_rate_song_on_usdb.setIcon(icon22)
        self.menu_local = QMenu(self.menubar)
        self.menu_local.setObjectName(u"menu_local")
        self.menu_local.setToolTipsVisible(True)
        self.menu_view = QMenu(self.menubar)
        self.menu_view.setObjectName(u"menu_view")
        self.menuGo = QMenu(self.menubar)
        self.menuGo.setObjectName(u"menuGo")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dock_log = QDockWidget(MainWindow)
        self.dock_log.setObjectName(u"dock_log")
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_2 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.toolButton_errors = QToolButton(self.dockWidgetContents)
        self.toolButton_errors.setObjectName(u"toolButton_errors")
        icon28 = QIcon()
        icon28.addFile(u":/icons/error.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.toolButton_errors.setIcon(icon28)
        self.toolButton_errors.setIconSize(QSize(20, 20))
        self.toolButton_errors.setCheckable(True)
        self.toolButton_errors.setChecked(True)

        self.horizontalLayout_3.addWidget(self.toolButton_errors)

        self.toolButton_warnings = QToolButton(self.dockWidgetContents)
        self.toolButton_warnings.setObjectName(u"toolButton_warnings")
        icon29 = QIcon()
        icon29.addFile(u":/icons/warning.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.toolButton_warnings.setIcon(icon29)
        self.toolButton_warnings.setIconSize(QSize(20, 20))
        self.toolButton_warnings.setCheckable(True)
        self.toolButton_warnings.setChecked(True)

        self.horizontalLayout_3.addWidget(self.toolButton_warnings)

        self.toolButton_infos = QToolButton(self.dockWidgetContents)
        self.toolButton_infos.setObjectName(u"toolButton_infos")
        icon30 = QIcon()
        icon30.addFile(u":/icons/info.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.toolButton_infos.setIcon(icon30)
        self.toolButton_infos.setIconSize(QSize(20, 20))
        self.toolButton_infos.setCheckable(True)
        self.toolButton_infos.setChecked(True)

        self.horizontalLayout_3.addWidget(self.toolButton_infos)

        self.toolButton_debugs = QToolButton(self.dockWidgetContents)
        self.toolButton_debugs.setObjectName(u"toolButton_debugs")
        icon31 = QIcon()
        icon31.addFile(u":/icons/bug.png", QSize(), QIcon.Mode.Normal, QIcon.State.Off)
        self.toolButton_debugs.setIcon(icon31)
        self.toolButton_debugs.setIconSize(QSize(20, 20))
        self.toolButton_debugs.setCheckable(True)

        self.horizontalLayout_3.addWidget(self.toolButton_debugs)

        self.horizontalSpacer = QSpacerItem(40, 20, QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)

        self.horizontalLayout_3.addItem(self.horizontalSpacer)


        self.verticalLayout_2.addLayout(self.horizontalLayout_3)

        self.plainTextEdit = QPlainTextEdit(self.dockWidgetContents)
        self.plainTextEdit.setObjectName(u"plainTextEdit")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.plainTextEdit.sizePolicy().hasHeightForWidth())
        self.plainTextEdit.setSizePolicy(sizePolicy1)

        self.verticalLayout_2.addWidget(self.plainTextEdit)

        self.dock_log.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dock_log)
        self.dock_search = QDockWidget(MainWindow)
        self.dock_search.setObjectName(u"dock_search")
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.verticalLayout = QVBoxLayout(self.dockWidgetContents_2)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.line_edit_search_filters = QLineEdit(self.dockWidgetContents_2)
        self.line_edit_search_filters.setObjectName(u"line_edit_search_filters")
        self.line_edit_search_filters.setFrame(False)

        self.verticalLayout.addWidget(self.line_edit_search_filters)

        self.search_view = QTreeView(self.dockWidgetContents_2)
        self.search_view.setObjectName(u"search_view")
        self.search_view.setFrameShape(QFrame.Shape.NoFrame)

        self.verticalLayout.addWidget(self.search_view)

        self.dock_search.setWidget(self.dockWidgetContents_2)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dock_search)
        self.dock_cover = QDockWidget(MainWindow)
        self.dock_cover.setObjectName(u"dock_cover")
        self.cover_widget = QWidget()
        self.cover_widget.setObjectName(u"cover_widget")
        self.cover_layout = QVBoxLayout(self.cover_widget)
        self.cover_layout.setObjectName(u"cover_layout")
        self.cover_layout.setContentsMargins(0, 0, 0, 0)
        self.dock_cover.setWidget(self.cover_widget)
        MainWindow.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dock_cover)

        self.menubar.addAction(self.menu_view.menuAction())
        self.menubar.addAction(self.menu_songs.menuAction())
        self.menubar.addAction(self.menu_usdb.menuAction())
        self.menubar.addAction(self.menu_local.menuAction())
        self.menubar.addAction(self.menu_tools.menuAction())
        self.menubar.addAction(self.menuGo.menuAction())
        self.menubar.addAction(self.menu_about.menuAction())
        self.menu_tools.addAction(self.action_settings)
        self.menu_tools.addAction(self.action_meta_tags)
        self.menu_tools.addAction(self.action_generate_song_list)
        self.menu_tools.addAction(self.action_webserver)
        self.menu_usdb.addAction(self.action_usdb_login)
        self.menu_usdb.addAction(self.action_refetch_song_list)
        self.menu_about.addAction(self.action_show_log)
        self.menu_about.addAction(self.action_about)
        self.menu_songs.addAction(self.action_songs_download)
        self.menu_songs.addAction(self.action_songs_abort)
        self.menu_songs.addAction(self.action_show_in_usdb)
        self.menu_songs.addAction(self.action_post_comment_in_usdb)
        self.menu_songs.addAction(self.menu_rate_song_on_usdb.menuAction())
        self.menu_songs.addSeparator()
        self.menu_songs.addAction(self.menu_open_song_in.menuAction())
        self.menu_songs.addAction(self.menu_custom_data.menuAction())
        self.menu_songs.addAction(self.action_pin)
        self.menu_songs.addAction(self.action_preview)
        self.menu_songs.addSeparator()
        self.menu_songs.addAction(self.action_delete)
        self.menu_open_song_in.addAction(self.action_open_song_folder)
        self.menu_open_song_in.addSeparator()
        self.menu_open_song_in.addAction(self.action_open_song_in_usdx)
        self.menu_open_song_in.addAction(self.action_open_song_in_vocaluxe)
        self.menu_open_song_in.addAction(self.action_open_song_in_performous)
        self.menu_open_song_in.addAction(self.action_open_song_in_tune_perfect)
        self.menu_open_song_in.addSeparator()
        self.menu_open_song_in.addAction(self.action_open_song_in_yass_reloaded)
        self.menu_open_song_in.addAction(self.action_open_song_in_karedi)
        self.menu_open_song_in.addAction(self.action_open_song_in_ultrastar_manager)
        self.menu_rate_song_on_usdb.addAction(self.action_rate_1star)
        self.menu_rate_song_on_usdb.addAction(self.action_rate_2stars)
        self.menu_rate_song_on_usdb.addAction(self.action_rate_3stars)
        self.menu_rate_song_on_usdb.addAction(self.action_rate_4stars)
        self.menu_rate_song_on_usdb.addAction(self.action_rate_5stars)
        self.menu_local.addAction(self.action_find_local_songs)
        self.menu_local.addAction(self.action_import_usdb_ids)
        self.menu_local.addAction(self.action_export_usdb_ids)
        self.menuGo.addAction(self.action_go_to_search)
        self.menuGo.addAction(self.action_go_to_song_table)
        self.menuGo.addAction(self.action_go_to_filters)
        self.menuGo.addAction(self.action_go_to_filter_search)
        self.menuGo.addAction(self.action_go_to_open_song_menu)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"USDB Syncer", None))
        self.action_meta_tags.setText(QCoreApplication.translate("MainWindow", u"Create &Meta Tags", None))
        self.action_settings.setText(QCoreApplication.translate("MainWindow", u"&Settings", None))
        self.action_generate_song_list.setText(QCoreApplication.translate("MainWindow", u"Create &Report", None))
        self.action_refetch_song_list.setText(QCoreApplication.translate("MainWindow", u"Check USDB &Song List", None))
#if QT_CONFIG(tooltip)
        self.action_refetch_song_list.setToolTip(QCoreApplication.translate("MainWindow", u"Redownload the entire song list from USDB", None))
#endif // QT_CONFIG(tooltip)
        self.action_find_local_songs.setText(QCoreApplication.translate("MainWindow", u"Find &Local Songs", None))
#if QT_CONFIG(tooltip)
        self.action_find_local_songs.setToolTip(QCoreApplication.translate("MainWindow", u"Select songs matching a txt file in the given folder", None))
#endif // QT_CONFIG(tooltip)
        self.action_show_log.setText(QCoreApplication.translate("MainWindow", u"Show &Log", None))
        self.action_import_usdb_ids.setText(QCoreApplication.translate("MainWindow", u"Select Songs from &Files", None))
#if QT_CONFIG(tooltip)
        self.action_import_usdb_ids.setToolTip(QCoreApplication.translate("MainWindow", u"Read song IDs from selected files and select the corresponding songs in the song table", None))
#endif // QT_CONFIG(tooltip)
        self.action_export_usdb_ids.setText(QCoreApplication.translate("MainWindow", u"&Export selected IDs to File", None))
#if QT_CONFIG(tooltip)
        self.action_export_usdb_ids.setToolTip(QCoreApplication.translate("MainWindow", u"Write the IDs of the selected songs to a file", None))
#endif // QT_CONFIG(tooltip)
        self.action_songs_download.setText(QCoreApplication.translate("MainWindow", u"&Download", None))
        self.action_usdb_login.setText(QCoreApplication.translate("MainWindow", u"USDB &Login", None))
        self.action_about.setText(QCoreApplication.translate("MainWindow", u"&About", None))
        self.action_show_in_usdb.setText(QCoreApplication.translate("MainWindow", u"Show on &USDB", None))
        self.action_post_comment_in_usdb.setText(QCoreApplication.translate("MainWindow", u"Post &Comment on USDB", None))
        self.action_open_song_folder.setText(QCoreApplication.translate("MainWindow", u"File &Explorer", None))
        self.action_delete.setText(QCoreApplication.translate("MainWindow", u"D&elete", None))
#if QT_CONFIG(tooltip)
        self.action_delete.setToolTip(QCoreApplication.translate("MainWindow", u"Move to system recycle bin", None))
#endif // QT_CONFIG(tooltip)
        self.action_pin.setText(QCoreApplication.translate("MainWindow", u"&Pin", None))
#if QT_CONFIG(tooltip)
        self.action_pin.setToolTip(QCoreApplication.translate("MainWindow", u"Disable or reenable updates to local files", None))
#endif // QT_CONFIG(tooltip)
        self.action_songs_abort.setText(QCoreApplication.translate("MainWindow", u"&Abort Download", None))
        self.action_delete_saved_search.setText(QCoreApplication.translate("MainWindow", u"Delete", None))
        self.action_add_saved_search.setText(QCoreApplication.translate("MainWindow", u"Save current search", None))
        self.action_update_saved_search.setText(QCoreApplication.translate("MainWindow", u"Update with current search", None))
        self.action_set_saved_search_default.setText(QCoreApplication.translate("MainWindow", u"Apply on startup", None))
#if QT_CONFIG(tooltip)
        self.action_set_saved_search_default.setToolTip(QCoreApplication.translate("MainWindow", u"If checked, this search will automatically applied every time you start the application.", None))
#endif // QT_CONFIG(tooltip)
        self.action_set_saved_search_subscribed.setText(QCoreApplication.translate("MainWindow", u"Download new matches", None))
        self.action_open_song_in_karedi.setText(QCoreApplication.translate("MainWindow", u"&Karedi", None))
        self.action_open_song_in_performous.setText(QCoreApplication.translate("MainWindow", u"&Performous", None))
        self.action_open_song_in_usdx.setText(QCoreApplication.translate("MainWindow", u"&UltraStar Deluxe", None))
        self.action_open_song_in_ultrastar_manager.setText(QCoreApplication.translate("MainWindow", u"UltraStar &Manager", None))
        self.action_open_song_in_vocaluxe.setText(QCoreApplication.translate("MainWindow", u"&Vocaluxe", None))
        self.action_open_song_in_yass_reloaded.setText(QCoreApplication.translate("MainWindow", u"&YASS Reloaded", None))
        self.action_rate_in_usdb.setText(QCoreApplication.translate("MainWindow", u"action_rate_in_usdb", None))
        self.action_rate_1star.setText(QCoreApplication.translate("MainWindow", u"&1: \u2605 \u2013 Unusable, requires a complete overhaul", None))
#if QT_CONFIG(tooltip)
        self.action_rate_1star.setToolTip(QCoreApplication.translate("MainWindow", u"unusable, needs a total rework", None))
#endif // QT_CONFIG(tooltip)
        self.action_rate_2stars.setText(QCoreApplication.translate("MainWindow", u"&2: \u2605\u2605 \u2013 Barely usable, needs significant revisions", None))
#if QT_CONFIG(tooltip)
        self.action_rate_2stars.setToolTip(QCoreApplication.translate("MainWindow", u"hardly usable, needs a lot of improvements", None))
#endif // QT_CONFIG(tooltip)
        self.action_rate_3stars.setText(QCoreApplication.translate("MainWindow", u"&3: \u2605\u2605\u2605 \u2013 Usable, but requires improvements", None))
#if QT_CONFIG(tooltip)
        self.action_rate_3stars.setToolTip(QCoreApplication.translate("MainWindow", u"usable, but room for improvement", None))
#endif // QT_CONFIG(tooltip)
        self.action_rate_4stars.setText(QCoreApplication.translate("MainWindow", u"&4: \u2605\u2605\u2605\u2605 \u2013 Very good, with minor areas for improvement", None))
#if QT_CONFIG(tooltip)
        self.action_rate_4stars.setToolTip(QCoreApplication.translate("MainWindow", u"room for some improvements", None))
#endif // QT_CONFIG(tooltip)
        self.action_rate_5stars.setText(QCoreApplication.translate("MainWindow", u"&5: \u2605\u2605\u2605\u2605\u2605 \u2013 Excellent, no improvements needed", None))
#if QT_CONFIG(tooltip)
        self.action_rate_5stars.setToolTip(QCoreApplication.translate("MainWindow", u"simply perfect", None))
#endif // QT_CONFIG(tooltip)
        self.action_preview.setText(QCoreApplication.translate("MainWindow", u"Pre&view Song", None))
        self.action_go_to_search.setText(QCoreApplication.translate("MainWindow", u"Go to &Search", None))
        self.action_go_to_song_table.setText(QCoreApplication.translate("MainWindow", u"Go to Song &Table", None))
        self.action_go_to_filters.setText(QCoreApplication.translate("MainWindow", u"Go to &Filters", None))
        self.action_go_to_filter_search.setText(QCoreApplication.translate("MainWindow", u"Go to F&ilter Search", None))
        self.action_go_to_open_song_menu.setText(QCoreApplication.translate("MainWindow", u"Go to &Open Song Menu", None))
        self.action_open_song_in_tune_perfect.setText(QCoreApplication.translate("MainWindow", u"Tune Perfect", None))
        self.action_webserver.setText(QCoreApplication.translate("MainWindow", u"Webserver", None))
        self.lineEdit_search.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search for anything ...", None))
        self.label_update_hint.setText(QCoreApplication.translate("MainWindow", u"<html><head/><body><p><a href=\"https://github.com/bohning/usdb_syncer/releases\"><span style=\" text-decoration: underline; color:#3586ff;\">USDB Syncer VERSION available!</span></a></p></body></html>", None))
        self.button_download.setText(QCoreApplication.translate("MainWindow", u"Download", None))
        self.button_pause.setText(QCoreApplication.translate("MainWindow", u"Pause", None))
        self.label_download_progress.setText(QCoreApplication.translate("MainWindow", u"0/0", None))
        self.pushButton_select_song_dir.setText(QCoreApplication.translate("MainWindow", u"Select song folder", None))
        self.lineEdit_song_dir.setText(QCoreApplication.translate("MainWindow", u"./songs", None))
        self.menu_tools.setTitle(QCoreApplication.translate("MainWindow", u"&Tools", None))
        self.menu_usdb.setTitle(QCoreApplication.translate("MainWindow", u"&USDB", None))
        self.menu_about.setTitle(QCoreApplication.translate("MainWindow", u"&Help", None))
        self.menu_songs.setTitle(QCoreApplication.translate("MainWindow", u"&Songs", None))
        self.menu_custom_data.setTitle(QCoreApplication.translate("MainWindow", u"Custo&m Data", None))
        self.menu_open_song_in.setTitle(QCoreApplication.translate("MainWindow", u"&Open Song in", None))
        self.menu_rate_song_on_usdb.setTitle(QCoreApplication.translate("MainWindow", u"&Rate Song on USDB", None))
        self.menu_local.setTitle(QCoreApplication.translate("MainWindow", u"&Local", None))
        self.menu_view.setTitle(QCoreApplication.translate("MainWindow", u"&View", None))
        self.menuGo.setTitle(QCoreApplication.translate("MainWindow", u"&Go", None))
        self.dock_log.setWindowTitle(QCoreApplication.translate("MainWindow", u"Log", None))
#if QT_CONFIG(tooltip)
        self.toolButton_errors.setToolTip(QCoreApplication.translate("MainWindow", u"Errors", None))
#endif // QT_CONFIG(tooltip)
        self.toolButton_errors.setText(QCoreApplication.translate("MainWindow", u"Errors", None))
#if QT_CONFIG(tooltip)
        self.toolButton_warnings.setToolTip(QCoreApplication.translate("MainWindow", u"Warnings", None))
#endif // QT_CONFIG(tooltip)
        self.toolButton_warnings.setText(QCoreApplication.translate("MainWindow", u"Warnings", None))
#if QT_CONFIG(tooltip)
        self.toolButton_infos.setToolTip(QCoreApplication.translate("MainWindow", u"Information", None))
#endif // QT_CONFIG(tooltip)
        self.toolButton_infos.setText(QCoreApplication.translate("MainWindow", u"Infos", None))
        self.toolButton_debugs.setText(QCoreApplication.translate("MainWindow", u"Debugs", None))
        self.dock_search.setWindowTitle(QCoreApplication.translate("MainWindow", u"Filters", None))
        self.line_edit_search_filters.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search filters", None))
        self.dock_cover.setWindowTitle(QCoreApplication.translate("MainWindow", u"Cover", None))
    # retranslateUi


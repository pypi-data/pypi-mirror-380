RUCIO Configuration for BDMS
============================

Helm-chart based installation of RUCIO (Rucio server, Rucio daemons, Certificates)
----------------------------------------------------------------------------------

The BDMS sub-system helm chart is located at ``bdms/chart`` under the BDMS organization at the cta-computing dpps gitlab repo and in the chart's YAML file ``Chart.yaml``,  there is
some info on the chart and also sub-charts are listed as dependencies for Rucio database (postgresql), Rucio server, Rucio daemons (both with version 35.0.0), and grid certificates generation.
The BDMS Rucio sub-charts correspond to the fork of the upstream RUCIO charts with some minor changes and its repository ``harbor-deploy-rucio-helm-charts`` is located under BDMS
organization with charts deployed to CTAO Harbor. On the other-hand, the repository for the certificates generation sub-chart namely ``cert-generator-grid`` is located as ``charts/cert-generator-grid``
under DPPS organization ``dpps/aiv/dpps-aiv-toolkit/`` which is also added as submodule to the main ``bdms`` repository. The gitlab CI job in the ``dpps/aiv/dpps-aiv-toolkit/``
publishes the ``cert-generator-grid`` chart and deploys it to the CTAO Harbor. Thus CTAO Harbor repository stores the BDMS chart (bdms-0.1.0) and also all the
sub-charts for all BDMS Rucio components including the one for certificates. Furthermore, we also store the docker images for all the BDMS Rucio components.

The FTS chart is added as a dependency (thus a sub-chart) in the BDMS chart (``bdms/chart``) by including it in the Chart.yaml file.
It is generated separately under FTS repo at the DPPS AIV: https://gitlab.cta-observatory.org/cta-computing/dpps/aiv/fts and then pushed to
the CTAO Harbor repository.

There are other sub-charts defined in the BDMS helm chart including Storages (``bdms/chart/templates/test_storages.yaml``), and Bootstrap jobs for
Rucio (``bdms/chart/templates/bootstrap_jobs.yaml``) respectively. The bootstrap sub-chart helps in Rucio's initialization and configuration. There are three storages
RSEs defined and configured in the storages sub-chart. More details about the FTS helm chart and its configuration is provided in the FTS subsection in this guide.

In the global values.yaml for the BDMS helm chart, there are values defined for the sub-charts with BDMS Rucio docker images fetched from their respective CTAO Harbor repositories. These BDMS images have pre-installed
BDMS policy package. To summarize, we have separate repositories under the BDMS organization for the following, (i) BDMS Rucio policy, (ii) BDMS rucio images
with pre-installed BDMS policy package and harbor deployment, (iii) Rucio helm charts fork with changes for BDMS deployment, and (iv) Harbor deploy for Rucio helm charts.
We provide the details on some of the relevant values defined in the values.yaml for the BDMS helm chart below.

cert-generator-grid
-------------------
- enabled: true, this ensures the  ``cert-generator-grid`` sub-chart is fetched from its Harbor repository location and deployed as a part of the BDMS helm-chart

It runs a job that creates certificates using self-signed CA for generating secrets on the Kubernetes K8s Test cluster for authentication of BDMS services. By means
of this chart, secrets through certificates are deployed independently of the DPPS sub-systems such as WMS, BDMS on the K8s. For production environment, the
certificates will be signed by DPPS AIV CA and/or Let's Encrypt CA.

The ``bootstrap_jobs.yaml`` under ``templates/`` in the sub-chart defines a job with Helm pre-install/pre-upgrade hook for generating X.509 certificates and storing them as
Kubernetes secrets (``kubectl`` client creates secrets from certificates) and this ensures certificates required by Rucio are available in the K8s namespace where BDMS deployment is being rolled out.
The certificates are generated by running the script ``scripts/certificates/generate_certificates.sh`` (also defined in the job's definition).
The OpenSSL configuration for certificates generation is set-up as Helm ConfigMap with file ``openssl_config_ca.cnf`` and its mounted as volumes in the ``bootstrap_jobs.yaml`` job definition.
More details on the certificates generation including the VO proxy creation is found in certificates documentation (``certificates.rst``).

Bootstrap
---------
- Image: belongs to the BDMS Rucio server and fetches from CTAO harbor repository

Rucio server
------------
- Image: Fetches from CTAO harbor repository as in the previous Bootstrap case. The BDMS rucio server with 35.4.1-latest with pull policy

- authRucioHost: ``rucio-server.local``

- config: The database has a default field with value of a Postgresql Connection URI in the format as follows, postgresql://<username>:<password>@<host>/<database>. In our setup, both username and database name is rucio. The host is configured as ``bdms-postgresql`` mapped to port 5432. There is also persistence enabled  with size 1Gi and accessMode to be ReadWriteOnce

- ingress: The host for the ingress is mapped to ``rucio-server-manual-tc.local``

- service: The service definition provides the following mappings, name: https, port: 443, targetPort: 443, protocol: TCP, and type: ClusterIP

- useSSL: true, configures the Rucio server to use SSL/TLS and thus all communication between clients and server is HTTPS based

- httpd_config
   - grid_site_enable: "True", Enables Rucio to interact with grid middleware (storages) for X509 authentication with proxies
   - encoded_slashes: "True", Enables custom LFNs with slashes so that Rucio server can decode and handle such encoded slashes properly avoiding issues such as errors found when Rucio parses requests (handled by Apache web server) and breaking HTTP routing


RUCIO database
--------------
The Postgresql 15.5.10 sub-chart is part of the BDMS helm chart and it is deployed on the CTAO Harbor. It is defined in the values.yaml with postgresql as dependency
and the use of global makes sure the database configuration (username, password, database) is shared across all sub-charts. Thus, in this sub-chart, the ``postgresql.global.postgresql.auth`` sets
up the PostgreSQL service and the latter ``database.default`` configures Rucio to connect to the database.


RUCIO daemons
-------------
The RUCIO daemons require for replication to happen successfully are judgeEvaluator, conveyorTransferSubmitter, conveyorPoller, conveyorFinisher
and conveyorReceiver are configured. The conveyorTransferSubmitter and conveyorFinisher are configured with sleepTime of 5 seconds, however ConveyorPoller is configured
with a sleepTime of 60 seconds, thus Poller waits for 60 seconds between polling cycles for new transfer requests. The poller also has OlderThan: 600 which means
the transfer requests older than 10 mins are also taken into consideration for processing.

- Image: Fetches from CTAO harbor repository. The BDMS rucio daemons with 35.4.1-latest with pull policy

- config:
   - database: The Rucio server database is defined with its value
   - policy: This is needed for conveyor-receiver daemon and permission attribute under policy is set to "ctao" (VO name for CTAO)
   - messaging-fts3: ActiveMQ broker for FTS is defined with port: 61613 and FTS credentials (username, password)


The full description of the BDMS sub-system helm chart ``bdms/chart`` including its requirements (sub-charts as dependencies) and configuration (key-values pairs)
is available at http://cta-computing.gitlab-pages.cta-observatory.org/dpps/bdms/bdms/latest/chart.html

# TODO: an option to template from values
{{- if .Values.rucio_client_config.createConfigMap }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{- template "bdms.rucioConfigMapName" . }}"
data:
  rucio.cfg: |
    [client]
    rucio_host = https://{{ .Release.Name }}-rucio-server
    auth_host = https://{{ .Release.Name }}-rucio-server
    ca_cert = /etc/grid-security/ca.pem

    auth_type = userpass
    username = {{ .Values.rucio.username }}
    password = {{ .Values.rucio.password }}
    account = root
    client_cert = /opt/rucio/etc/usercert.pem
    client_key = /opt/rucio/etc/userkey.pem
    client_x509_proxy = /tmp/x509up_u1000
    request_retries = 3
    x509_proxy = $X509_USER_PROXY
    x509_identity = CN=DPPS User
    x509_email = dpps-test@cta-observatory.org
    key = /opt/rucio/etc/userkey.pem
    cert = /opt/rucio/etc/usercert.pem

    [policy]
    package = bdms_rucio_policy
    permission = generic
    schema = generic
    lfn2pfn_algorithm_default = ctao_bdms
    support = https://github.com/rucio/rucio/issues/
    support_rucio = https://github.com/rucio/rucio/issues/

    [common]
    extract_scope = ctao_bdms

    [database]
    default = {{ .Values.database.default }}

    [alembic]
    cfg = /opt/rucio/etc/alembic.ini

    [bootstrap]
    userpass_identity = {{ .Values.rucio.username }}
    userpass_pwd = {{ .Values.rucio.password }}

  alembic.ini: |
    [alembic]
    # path to migration scripts
    script_location = /usr/local/lib/python3.9/site-packages/rucio/db/sqla/migrate_repo

    # template used to generate migration files
    # file_template = %%(rev)s_%%(slug)s

    # max length of characters to apply to the
    # "slug" field
    #truncate_slug_length = 40

    # set to 'true' to run the environment during
    # the 'revision' command, regardless of autogenerate
    # revision_environment = false

    sqlalchemy.url = {{ .Values.database.default }}
    version_table_schema = public

    # Logging configuration
    [loggers]
    keys = root,sqlalchemy,alembic

    [handlers]
    keys = console

    [formatters]
    keys = generic

    [logger_root]
    level = WARN
    handlers = console
    qualname =

    [logger_sqlalchemy]
    level = WARN
    handlers =
    qualname = sqlalchemy.engine

    [logger_alembic]
    level = INFO
    handlers =
    qualname = alembic

    [handler_console]
    class = StreamHandler
    args = (sys.stderr,)
    level = NOTSET
    formatter = generic

    [formatter_generic]
    format = %(levelname)-5.5s [%(name)s] %(message)s
{{- end }}

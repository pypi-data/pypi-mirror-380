---
import '../styles/global.css'

export interface Props {
	title: string
	description?: string
	image?: string
	noindex?: boolean
}

const { title, description = "LangStruct - LLM-powered structured information extraction using DSPy optimization", image = "/og-image.png", noindex = false } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Canonical URL -->
		<link rel="canonical" href={canonicalURL} />
		
		<!-- Open Graph -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(image, Astro.site)} />
		<meta property="og:site_name" content="LangStruct" />
		
		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={canonicalURL} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL(image, Astro.site)} />
		
		<!-- Robots -->
		{noindex && <meta name="robots" content="noindex" />}
		
		<title>{title}</title>
		
		<!-- Theme script (must be in head to prevent FOUC) -->
		<script is:inline>
			const getThemePreference = () => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
			};
			const isDark = getThemePreference() === 'dark';
			document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
			if (typeof localStorage !== 'undefined') {
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains('dark');
					localStorage.setItem('theme', isDark ? 'dark' : 'light');
				});
				observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
			}
		</script>
	</head>
	<body class="min-h-screen">
		<slot />
		
		<!-- Theme toggle script -->
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const button = document.getElementById('theme-toggle');
				if (button) {
					button.addEventListener('click', () => {
						document.documentElement.classList.toggle('dark');
					});
				}
			});
		</script>
	</body>
</html>
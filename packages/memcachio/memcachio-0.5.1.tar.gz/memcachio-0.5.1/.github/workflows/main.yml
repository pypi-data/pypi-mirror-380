name: CI

on: [push, pull_request]

jobs:
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Lint with ruff
      run: |
        uv run ruff check --select I memcachio tests
        uv run ruff check memcachio tests
    - name: Check types
      run: |
        uv run mypy memcachio
  test:
    name: Test (Python ${{ matrix.python-version }}, Memcached ${{ matrix.memcached-version }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.memcached-version == 'next' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13", "pypy-3.10", "pypy-3.11"]
        memcached-version: ["1.6"]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Tests
      env:
        HOST_OS: linux
        CI: "True"
        MEMCACHIO_MEMCACHED_VERSION: ${{matrix.memcached-version}}
      run: |
        echo "CI: $CI"
        uv run pytest -q --cov=memcachio --cov-report=xml ${{ matrix.test_params }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.2.0
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  benchmark:
    name: Benchmark (Python ${{ matrix.python-version }}, Memcached ${{ matrix.memcached-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13",]
        memcached-version: ["1.6"]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Benchmark
      env:
        HOST_OS: linux
        CI: "True"
        MEMCACHIO_MEMCACHED_VERSION: ${{matrix.memcached-version}}
      run: |
        echo "CI: $CI"
        uv run pytest -q -m "benchmark" --benchmark-min-rounds=1000 --benchmark-histogram=benchmarks/benchmark
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark
        path: benchmarks/*
  build_pure_wheel:
    needs: [lint]
    name: Build pure python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build wheels
        run: |
          uv build
      - uses: actions/upload-artifact@v4
        with:
          name: pure_wheels
          path: ./dist/*.whl
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build sdist
        run: |
          uv build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: src_dist
          path: dist/*.tar.gz
  upload_pypi:
    needs: [test, build_pure_wheel, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true
  upload_pypi_release:
    needs: [test, build_pure_wheel, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    needs: [upload_pypi_release]
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - name: Download source dist
        uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - name: Generate release notes
        run: |
          ./scripts/github_release_notes.sh > release_notes.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}


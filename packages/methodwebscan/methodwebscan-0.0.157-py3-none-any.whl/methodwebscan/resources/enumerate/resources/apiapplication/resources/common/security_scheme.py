# This file was auto-generated by Fern from our API Definition.

from .......core.pydantic_utilities import UniversalBaseModel
from .security_scheme_type import SecuritySchemeType
import typing
import pydantic
from .o_auth_flow import OAuthFlow
from .......core.pydantic_utilities import IS_PYDANTIC_V2


class SecurityScheme(UniversalBaseModel):
    type: SecuritySchemeType
    description: typing.Optional[str] = None
    name: typing.Optional[str] = None
    in_: typing.Optional[str] = pydantic.Field(alias="in", default=None)
    scheme: typing.Optional[str] = None
    bearer_format: typing.Optional[str] = pydantic.Field(alias="bearerFormat", default=None)
    flow: typing.Optional[str] = None
    authorization_url: typing.Optional[str] = pydantic.Field(alias="authorizationUrl", default=None)
    token_url: typing.Optional[str] = pydantic.Field(alias="tokenUrl", default=None)
    scopes: typing.Optional[typing.Dict[str, str]] = None
    o_auth_flow: typing.Optional[OAuthFlow] = pydantic.Field(alias="oAuthFlow", default=None)
    open_id_connect_url: typing.Optional[str] = pydantic.Field(alias="openIdConnectUrl", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow

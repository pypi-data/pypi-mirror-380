agents:
  - description: Expert Python developer for implementing features and fixing bugs
    id: python-engineer
    name: python-engineer
    priority: critical
    system_prompt: |
      You are an expert Python engineer specializing in the Kreuzberg text extraction library.

      Your expertise includes:
      - **Async/await patterns**: Primary async implementation with sync wrappers
      - **Type hints**: Comprehensive typing with msgspec and dataclasses
      - **Registry pattern**: ExtractorRegistry for pluggable extractors
      - **Configuration**: ExtractionConfig and backend-specific configs
      - **Error handling**: Exception-based with KreuzbergError hierarchy

      Key architectural knowledge:
      - Entry point: extraction.py with extract_file, extract_bytes functions
      - All extractors inherit from BaseExtractor in _extractors/_base.py
      - OCR backends implement BaseOCR interface in _ocr/_base.py
      - Use _utils/_sync.py for async/sync compatibility

      Development commands:
      - Install deps: uv sync or uv sync --all-extras
      - Format: ruff format
      - Lint: ruff check --fix
      - Type check: mypy

      IMPORTANT: Follow these principles strictly:
      - Do only what has been asked; nothing more, nothing less
      - NEVER create files unless absolutely necessary
      - ALWAYS prefer editing existing files
      - All builtin imports at top level (except cyclical/optional)
      - Maintain 95% test coverage requirement
    targets:
      - CLAUDE.md
      - .claude/**/*.md
  - description: Writes comprehensive tests for kreuzberg functionality
    id: test-engineer
    name: test-engineer
    priority: high
    system_prompt: |
      You are a test automation expert for the Kreuzberg text extraction library.

      Testing patterns you must follow:
      - **Dual variants**: Write both sync and async test variants
      - **Mock OCR**: Use mock responses for predictable OCR testing
      - **Test resources**: Use files in tests/test_source_files/
      - **Error coverage**: Test all exception cases comprehensively
      - **CI resilience**: Mark OCR tests as xfail in CI environments
      - **Integration tests**: Use timeouts and retry logic

      Test structure:
      - Core tests: tests/extraction_test.py, config_test.py, registry_test.py
      - Extractor tests: tests/extractors/ for each extractor type
      - OCR tests: tests/ocr/ for each backend
      - Multiprocessing: tests/multiprocessing/ for concurrent ops
      - Utils: tests/utils/ for helper functions

      Commands:
      - Run all: pytest
      - Specific file: pytest tests/extraction_test.py
      - With coverage: pytest --cov
      - Coverage requirement: 95% minimum

      Test naming conventions:
      - test_<function>_<scenario>
      - test_<function>_raises_<exception>_when_<condition>
      - Use descriptive names that explain what's being tested

      Always ensure tests are isolated, repeatable, and fast.
    targets:
      - CLAUDE.md
      - .claude/**/*.md
  - description: Reviews code for quality, security, and compliance
    id: code-reviewer
    name: code-reviewer
    priority: critical
    system_prompt: |
      You are a senior code reviewer for the Kreuzberg text extraction library.

      Focus your reviews on:

      **1. Implementation Gaps:**
      - Missing error handling
      - Incomplete async/sync wrappers
      - Unregistered extractors in ExtractorRegistry
      - Missing type hints or incorrect types
      - Incomplete configuration options

      **2. Code Redundancies:**
      - Duplicated logic across extractors
      - Repeated error handling patterns
      - Redundant utility functions
      - Unnecessary code complexity

      **3. Correctness:**
      - Logic errors and edge cases
      - Async/await usage correctness
      - Proper exception hierarchy (KreuzbergError)
      - Configuration validation
      - Resource cleanup (files, processes)

      **4. Rule Adherence:**
      - "Do only what's asked" principle
      - No unnecessary file creation
      - Prefer editing over creating
      - Builtin imports at top level
      - 95% test coverage requirement

      **5. Security Issues:**
      - Path traversal vulnerabilities
      - Command injection risks
      - Unsafe file operations
      - Exposed sensitive data
      - Missing input validation

      **6. Performance:**
      - Inefficient async operations
      - Missing caching opportunities
      - Resource leaks
      - Unnecessary I/O operations
      - Suboptimal multiprocessing

      Provide specific, actionable feedback with code examples when relevant.
      Rate severity: Critical, High, Medium, Low.
    targets:
      - CLAUDE.md
      - .claude/**/*.md
    tools:
      - Read
      - Grep
      - Glob
      - LS
  - description: Manages infrastructure, CI/CD, Docker, and deployment configurations
    id: infra-engineer
    name: infra-engineer
    priority: high
    system_prompt: |
      You are an infrastructure and DevOps engineer for the Kreuzberg text extraction library.

      Your expertise includes:

      **1. Docker Infrastructure:**
      - Multi-stage Dockerfile optimization (.docker/Dockerfile)
      - Security hardening (non-root users, minimal images)
      - Build optimization (cache mounts, layer reduction)
      - Multi-platform builds (linux/amd64, linux/arm64)
      - Docker Compose configurations
      - Container resource limits and health checks

      **2. CI/CD Pipelines:**
      - GitHub Actions workflows (.github/workflows/)
      - Matrix testing strategies
      - Parallel job execution
      - Caching strategies (Docker, dependencies)
      - Artifact management
      - Release automation

      **3. Task Automation:**
      - Taskfile.yml configuration
      - Build automation with uv
      - Test orchestration
      - Deployment scripts
      - Development workflow optimization

      **4. Testing Infrastructure:**
      - E2E test suites (tests/e2e/)
      - Docker test containers
      - Resource monitoring
      - Performance benchmarking
      - Security scanning

      **5. Deployment:**
      - PyPI publishing automation
      - Docker Hub multi-variant releases
      - Documentation deployment (GitHub Pages)
      - Version management
      - Release tagging

      **Key Files:**
      - .github/workflows/: CI/CD workflows
      - .docker/: Docker configurations
      - Taskfile.yml: Task automation
      - tests/e2e/: E2E test infrastructure
      - pyproject.toml: Package configuration

      **Best Practices:**
      - Always use uv for dependency management
      - Implement security scanning in CI
      - Use multi-stage Docker builds
      - Cache aggressively but invalidate correctly
      - Monitor resource usage
      - Document infrastructure changes
      - Test infrastructure code

      IMPORTANT: Follow these principles:
      - Infrastructure as Code (IaC)
      - Reproducible builds
      - Security first approach
      - Resource optimization
      - Clear documentation
    targets:
      - CLAUDE.md
      - .claude/**/*.md
  - description: Optimizes performance and resource usage
    id: performance-optimizer
    name: performance-optimizer
    priority: medium
    system_prompt: |
      You are a performance optimization specialist for the Kreuzberg text extraction library.

      Your optimization targets:

      **1. Async Operations:**
      - Optimize async/await patterns
      - Improve concurrent execution
      - Reduce async overhead
      - Batch operations effectively

      **2. Multiprocessing:**
      - Optimize process pool usage (_utils/_process_pool.py)
      - Improve work distribution
      - Reduce inter-process communication
      - Handle CPU/GPU detection (_utils/_device.py)

      **3. Caching:**
      - Implement efficient caching strategies (_utils/_cache.py)
      - Use memory and disk caching appropriately
      - Cache invalidation strategies
      - OCR result caching

      **4. Memory Usage:**
      - Reduce memory footprint
      - Stream large files instead of loading
      - Optimize data structures
      - Clean up resources properly

      **5. I/O Operations:**
      - Minimize file system operations
      - Batch database queries
      - Optimize network requests
      - Use buffering effectively

      **Benchmarking tools:**
      - Use pytest-benchmark for performance tests
      - Profile with cProfile and line_profiler
      - Memory profiling with memory_profiler
      - Async profiling with aiomonitor

      Always measure before and after optimization.
      Focus on bottlenecks identified through profiling.
      Ensure optimizations don't break functionality or reduce code clarity.
    targets:
      - CLAUDE.md
      - .claude/**/*.md
metadata:
  description: A text extraction library supporting PDFs, images, office documents and more
  name: Kreuzberg
  version: 3.5.0
outputs:
  - path: CLAUDE.md
    template:
      type: inline
      value: |
        # CLAUDE.md

        This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

        ## Project Overview

        {{ .Description }}

        {{ range .Rules }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}

        {{ range .Sections }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}
  - path: GEMINI.md
    template:
      type: inline
      value: |
        # GEMINI.md

        This file provides guidance to Gemini when working with code in this repository.

        ## Project Overview

        {{ .Description }}

        {{ range .Rules }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}

        {{ range .Sections }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}
  - path: .cursorrules
    template:
      type: inline
      value: |
        # Kreuzberg
        A text extraction library supporting PDFs, images, office documents and more

        {{ range .Rules }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}

        {{ range .Sections }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}
  - path: .windsurfrules
    template:
      type: inline
      value: |
        # Kreuzberg
        A text extraction library supporting PDFs, images, office documents and more

        {{ range .Rules }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}

        {{ range .Sections }}
        ## {{ .Name }}
        {{ .Content }}
        {{ end }}
  - naming_scheme: "{priority:02d}-{name}.md"
    path: .claude/agents/
    template:
      type: inline
      value: |
        # Agent: {{ .Name }}

        **Description**: {{ .Description }}
        **Priority**: {{ .Priority }}

        ## Tools Available
        {{ range .Tools }}
        - {{ . }}
        {{ end }}

        ## System Prompt
        {{ .SystemPrompt }}
    type: agent
rules:
  - content: |
      ### Dependencies
      - Install dependencies: `uv sync`
      - Install with all optional dependencies: `uv sync --all-extras`

      ### Testing
      - Run all tests: `pytest`
      - Run specific test file: `pytest tests/extraction_test.py`
      - Run with coverage: `pytest --cov`
      - Coverage must be at least 95%

      ### Code Quality
      - Format code: `ruff format`
      - Lint code: `ruff check`
      - Fix linting issues: `ruff check --fix`
      - Type check: `mypy`

      ### Prek
      - Install prek: `uv tool install prek`
      - Install hooks: `prek install && prek install --hook-type commit-msg`
      - Run manually: `prek run --all-files`

      ### Documentation
      - Build docs: `uv run mkdocs build --clean --strict`
      - Serve docs locally: `uv run mkdocs serve`
      - Install doc dependencies: `uv sync --group doc`
    name: Development Commands
    priority: critical
  - content: |
      - Do what has been asked; nothing more, nothing less
      - NEVER create files unless they're absolutely necessary for achieving your goal
      - ALWAYS prefer editing an existing file to creating a new one
      - NEVER proactively create documentation files (*.md) or README files
      - Only create documentation files if explicitly requested by the User
      - All builtin imports should be at the top level (except for cyclical or optional dependencies)
      - All config dataclasses must be hashable, frozen, and use slots: `@dataclass(unsafe_hash=True, frozen=True, slots=True)`
      - When committing, always use the format specified in the CLAUDE.md
    name: Important Instructions
    priority: critical
  - content: |
      ### Docstrings and Comments Guidelines
      - **NO docstrings in private functions** (functions starting with `_`)
      - **NO docstrings in private files** (files starting with `_`)
      - **NO docstrings in private folders** (folders starting with `_`)
      - **NO docstrings in test files** (files in `tests/` directory)
      - **ONLY use docstrings in public API** (what's documented in API reference)
      - **NO redundant comments** - code should be self-documenting
      - **Comments only when necessary** to explain complex logic or non-obvious decisions
      - **Prefer clear variable/function names** over comments
    name: Documentation Standards
    priority: critical
  - content: |
      ### Core Extraction Flow
      1. **Entry Point**: `extraction.py` provides main functions (`extract_file`, `extract_bytes`, etc.)
      2. **Registry Pattern**: `ExtractorRegistry` selects appropriate extractor based on MIME type
      3. **Extractor Interface**: All extractors inherit from `BaseExtractor` in `_extractors/_base.py`
      4. **OCR Integration**: OCR backends (Tesseract, EasyOCR, PaddleOCR) implement `BaseOCR` interface
      5. **Configuration**: `ExtractionConfig` dataclass controls all extraction behavior

      ### Key Components
      - **Extractors**: Specialized classes for each file type (PDF, image, HTML, etc.)
      - **OCR Backends**: Pluggable OCR engines with separate configuration classes
      - **GMFT Integration**: Table extraction using GMFT library for PDFs
      - **Chunking**: Text splitting functionality in `_chunker.py`
      - **Language Detection**: Automatic language detection using fast-langdetect
      - **Async/Sync**: Primary async implementation with sync wrappers in `_utils/_sync.py`
      - **API Server**: REST API using Litestar framework in `_api/main.py`
      - **CLI**: Command-line interface for batch processing and automation

      ### Adding New Features
      - New extractors: Inherit from `BaseExtractor` and register with `ExtractorRegistry`
      - New OCR backends: Implement `BaseOCR` interface
      - Configuration options: Extend `ExtractionConfig` or create backend-specific configs
      - Hooks: Use `pre_validate_hook` and `post_extraction_hook` for custom processing
    name: Architecture
    priority: high
  - content: |
      - **Exception-based**: All errors are raised as exceptions, no tuple returns
      - **Base class**: All exceptions inherit from `KreuzbergError`
      - **Context**: Exceptions include a `context` parameter with debugging information
      - **Common exceptions**:
        - `ValidationError`: Configuration or input validation failures
        - `ParsingError`: Document parsing failures
        - `OCRError`: OCR processing failures
        - `MissingDependencyError`: Missing optional dependencies
    name: Error Handling
    priority: medium
  - content: |
      ### File Organization and Naming
      - **Test files MUST end with `_test.py`** - No exceptions
      - **Logical directory structure**:
        ```
        tests/
        ├── core/           # Core functionality (extraction, config, types)
        ├── features/       # Feature-specific (chunking, language detection)
        ├── integration/    # Integration tests (API, real file processing)
        ├── interfaces/     # User interfaces (CLI, MCP)
        ├── extractors/     # File format extractors (PDF, image, etc.)
        ├── ocr/           # OCR backend tests
        ├── utils/         # Utility function tests
        └── e2e/           # End-to-end tests
        ```

      ### Test Structure and Patterns
      - **Only function-based tests** - No class-based test methods
      - **Test naming**: `test_<function>_<scenario>_<expected_outcome>`
        - ✅ `test_extract_pdf_with_ocr_returns_text()`
        - ✅ `test_extract_file_raises_validation_error_when_file_missing()`
        - ❌ `test_basic_extraction()` (too vague)
      - **Async/sync variants**: Test both async and sync versions where applicable
      - **Parameterized tests**: Use `@pytest.mark.parametrize` for multiple scenarios

      ### Mocking Guidelines
      - **NEVER mock anyio/asyncio** - Only mock external dependencies
      - **Mock external services**: OCR engines, file system operations, network calls
      - **Use real objects when possible**: Prefer `tmp_path` over mocking file operations
      - **Mock sparingly**: Only when necessary for isolation or performance
      - **Add comments for legitimate mocks**: Explain why mocking is required
        ```python
        # Mock OCR backend for predictable testing ~keep
        mock_ocr = mocker.patch("kreuzberg._ocr.get_backend")
        ```

      ### Fixtures and Test Data
      - **Session-scoped fixtures** for stateless objects (extractors, configs)
      - **Shared fixtures** in `tests/conftest.py` for common test data
      - **Test files** in `tests/test_source_files/` for various formats
      - **Temporary files** using pytest's `tmp_path` fixture

      ### Test Coverage and Quality
      - **95% minimum coverage** requirement
      - **Test all error paths** - Every exception should be tested
      - **Edge cases**: Empty inputs, large files, malformed data
      - **Performance considerations**: Mark slow tests appropriately
      - **CI resilience**: OCR tests marked as `xfail` in CI environments

      ### Test Helpers and Utilities
      - **Shared assertions** in `tests/extractors/test_helpers.py`:
        - `assert_valid_extraction_result()` - Standard result validation
        - `assert_extraction_error()` - Error case validation
        - `assert_ocr_result()` - OCR-specific validation
      - **Avoid repetitive assertions** - Use helper functions

      ### Integration vs Unit Tests
      - **Unit tests**: Fast, isolated, mock external dependencies
      - **Integration tests**: Real file processing, external services, end-to-end flows
      - **Separation**: Integration tests in `tests/integration/` directory
      - **Timeouts**: Integration tests use timeouts and retry logic
    name: Testing Patterns
    priority: critical
  - content: |
      ### GitHub Actions Workflows
      - **Release**: Automated PyPI publishing via GitHub releases, triggers Docker builds
      - **Docker**: Multi-platform Docker builds (linux/amd64, linux/arm64), triggered by releases
      - **Documentation**: Auto-deploy to GitHub Pages on docs changes
      - **CI**: Comprehensive testing across multiple Python versions and platforms

      ### Docker Variants
      - **Core** (`goldziher/kreuzberg:v3.5.0`): API + Tesseract OCR
      - **EasyOCR** (`goldziher/kreuzberg:v3.5.0-easyocr`): Core + EasyOCR
      - **PaddleOCR** (`goldziher/kreuzberg:v3.5.0-paddle`): Core + PaddleOCR
      - **GMFT** (`goldziher/kreuzberg:v3.5.0-gmft`): Core + table extraction
      - **All** (`goldziher/kreuzberg:v3.5.0-all`): All features included

      ### Manual Triggers
      - Docker builds: `gh workflow run "Publish Docker Images"`
      - Documentation: Auto-deploys on docs/ changes

      ### Common Issues
      - **Docker version detection**: Use `git tag --sort=-version:refname | head -n1` not `git describe`
      - **Docs dependencies**: Use `uv sync --group doc` for proper mkdocs-material[imaging] support
      - **Docker Hub README**: May fail due to permissions, use `continue-on-error: true`
    name: CI/CD and Deployment
    priority: minimal
  - content: |
      ### Optional Dependencies Structure
      ```toml
      [project.optional-dependencies]
      api = ["litestar[standard,structlog,opentelemetry]>=2.1.6"]
      cli = ["click>=8.2.1", "rich>=14.0.0", "tomli>=2.0.0; python_version<'3.11'"]
      chunking = ["semantic-text-splitter>=0.27.0"]
      crypto = ["playa-pdf[crypto]>=0.6.4"]
      easyocr = ["easyocr>=1.7.2"]
      gmft = ["gmft>=0.4.2"]
      langdetect = ["fast-langdetect>=0.2.0"]
      paddleocr = ["paddleocr>=3.1.0", "paddlepaddle>=3.1.0", "setuptools>=80.9.0"]
      all = ["kreuzberg[api,chunking,cli,crypto,easyocr,gmft,langdetect,paddleocr]"]
      ```

      ### Installation Patterns
      - Basic: `pip install kreuzberg`
      - With features: `pip install "kreuzberg[api,cli]"`
      - With crypto support: `pip install "kreuzberg[crypto]"`
      - All features: `pip install "kreuzberg[all]"`
      - Development: `uv sync --all-extras`

      ### Dependencies
      - **Core**: pypdfium2, playa-pdf, python-pptx, etc.
      - **System**: tesseract-ocr, pandoc (via package manager)
      - **Development**: Uses dependency groups in pyproject.toml

      ### Crypto Support
      The `crypto` extra adds cryptographic support for PDF processing:
      - **Purpose**: Enables AES encryption/decryption for password-protected PDFs
      - **Dependencies**: Adds cryptography (~22MB), cffi, and pycparser
      - **Usage**: Required for PDFs with AES encryption (RC4 is supported in base installation)
      - **Password Support**: Supports single password or list of passwords to try in sequence
      - **Size Impact**: Increases installation size by ~24MB due to cryptography package
    name: Package Management
    priority: minimal
sections:
  - content: |
      ### Automatic Language Detection (v3.5.0+)
      - **Feature**: Automatically detect languages in extracted text
      - **Implementation**: Uses fast-langdetect library for high-performance detection
      - **Configuration**:
        - Enable with `auto_detect_language=True` in `ExtractionConfig`
        - Configure via `LanguageDetectionConfig` for confidence thresholds
      - **Output**: Results available in `ExtractionResult.detected_languages`
      - **Integration**: Works with all extraction methods and file types
    id: language-detection
    name: Language Detection
  - content: |
      ### Structured Extraction (Issue #55)
      - **Goal**: Enable extraction of structured data from documents using vision models
      - **Implementation**:
        - Extend `ExtractionConfig` with structured extraction fields
        - Support `msgspec.Struct` and Pydantic `BaseModel` as output types
        - Use LiteLLM for vision model integration
        - Implement retry logic with error feedback
      - **Configuration**: Currently programmatic only (no `kreuzberg.toml`)
    id: planned-features
    name: Planned Features

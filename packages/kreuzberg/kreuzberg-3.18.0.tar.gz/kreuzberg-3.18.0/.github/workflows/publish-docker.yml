name: Publish Docker Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (leave empty to use latest git tag)'
        required: false
        type: string
      build_base:
        description: 'Build base image'
        required: true
        type: boolean
        default: true
      build_core:
        description: 'Build core image'
        required: true
        type: boolean
        default: true
  release:
    types: [published]

jobs:
  test-images:
    uses: ./.github/workflows/docker-e2e-tests.yml

  build-and-publish:
    needs: test-images
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'release' }}
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    strategy:
      max-parallel: 1  # Build one at a time to save disk space ~keep
      matrix:
        include:
          - name: base
            extras: "cli"
            image_name: "goldziher/kreuzberg"
            should_build: ${{ github.event_name == 'release' || inputs.build_base == true }}
          - name: core
            extras: "cli chunking crypto document-classification langdetect additional-extensions"
            image_name: "goldziher/kreuzberg-core"
            should_build: ${{ github.event_name == 'release' || inputs.build_core == true }}

    steps:
      - name: Free up disk space
        run: |
          echo "Initial disk space:"
          df -h /

          # Remove unnecessary large directories (saves ~30GB) ~keep
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /opt/microsoft
          sudo rm -rf /usr/local/.ghcup

          # Clean apt
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

          # Remove swap to free up space
          sudo swapoff -a
          sudo rm -f /swapfile

          # Clean Docker completely
          docker system prune -af --volumes || true
          docker builder prune -af || true

          echo "Available disk space after cleanup:"
          df -h /

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}

      - name: Get release version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            git fetch --tags
            VERSION=$(git tag --sort=-version:refname | head -n1)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ matrix.should_build }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image_name }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.VERSION }}
            type=raw,value=latest

      - name: Build and push Docker image to Docker Hub
        if: ${{ matrix.should_build }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.docker/Dockerfile
          platforms: ${{ matrix.name == 'all' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: true
          build-args: |
            EXTRAS=${{ matrix.extras }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

      - name: Clean up after build
        if: always()
        run: |
          # Remove all Docker images and containers
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          docker rmi $(docker images -q) || true

          # Clean all Docker data
          docker system prune -af --volumes || true
          docker builder prune -af || true

          # Clear buildkit cache
          docker buildx prune -af || true

          echo "Disk space after cleanup:"
          df -h /

      - name: Update Docker Hub README
        if: ${{ matrix.should_build }}
        uses: peter-evans/dockerhub-description@v4
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ matrix.image_name }}
          readme-filepath: ./.docker/README.md

[LOCALE]
attach_output.description = 将输入/输出连接至 Python 代码解释器窗口。
attach_output.label = 连接到 Python 代码解释器窗口
auto_cwd.description = 自动将当前工作目录添加至 sys_exec 命令。
auto_cwd.label = 自动追加 CWD 至 sys_exec
cmd.clear_python_output.description = 启用 clear_python_output 命令的执行。如果启用，允许清除 Python 代码解释器窗口的输出。
cmd.clear_python_output.label = 启用：clear_python_output
cmd.code_execute_all.description = 启用 code_execute_all 命令的执行。如果启用，提供在解释器窗口中执行所有 Python 代码的功能。
cmd.code_execute_all.label = 启用：生成并执行 Python 代码
cmd.code_execute.description = 启用 code_execute 命令的执行。如果启用，提供执行 Python 代码的功能（从文件生成并执行）。
cmd.code_execute_file.description = 启用 code_execute_file 命令的执行。如果启用，提供从现有的 .py 文件执行 Python 代码的功能。
cmd.code_execute_file.label = 启用：执行 Python 代码（来自文件）
cmd.code_execute.label = 启用：生成并执行 Python 代码
cmd.get_python_input.description = 启用 get_python_input 命令的执行。如果启用，允许检索 Python 代码解释器窗口中的所有输入代码（来自编辑部分）。
cmd.get_python_input.label = 启用：get_python_input
cmd.get_python_output.description = 启用 get_python_output 命令的执行。如果启用，允许检索 Python 代码解释器窗口的输出。
cmd.get_python_output.label = 启用：get_python_output
cmd.sys_exec.description = 启用 sys_exec 命令的执行。如果启用，提供系统命令执行的功能。
cmd.sys_exec.label = 启用：执行系统命令
docker_entrypoint.description = 启动容器时运行的命令
docker_entrypoint.label = Docker Entrypoint
docker_ports.description = Docker 端口映射：docker <> 主机。您可以使用 8888/tcp 在 DOCKER 键中定义协议，或将协议部分留空以使用默认协议（TCP）
docker_ports.label = Docker Ports
docker_volumes.description = Docker 卷映射：docker <> 主机，{workdir} - 主机上当前工作目录的占位符。将使用 r/w 模式。
docker_volumes.label = Docker Volumes
plugin.description = 提供 Python 代码执行功能
plugin.name = 代码解释器 (v2)
python_cmd_tpl.description = 要执行的 Python 命令模板，使用 {filename} 作为文件名的占位符。
python_cmd_tpl.label = Python 命令模板
sandbox_docker.description = 在沙盒中（Docker 容器）执行命令和代码。必须安装并运行 Docker。
sandbox_docker_image.description = 用于沙盒的 Docker 镜像。
sandbox_docker_image.label = Docker 镜像
sandbox_docker.label = 沙盒（Docker 容器）

[LOCALE]
attach_output.description = Attach code input/output to the Python code interpreter window.
attach_output.label = Connect to the Python code interpreter window
auto_cwd.description = Automatically append the current working directory to the sys_exec command.
auto_cwd.label = Auto-append CWD to sys_exec
cmd.clear_python_output.description = Enable clear_python_output command execution. If enabled, it allows clearing the output of the Python code interpreter window.
cmd.clear_python_output.label = Enable: clear_python_output
cmd.code_execute_all.description = Enable code_execute_all command execution. If enabled, provides execution of all the Python code in the interpreter window.
cmd.code_execute_all.label = Enable: Python code generate and execute
cmd.code_execute.description = Enable code_execute command execution. If enabled, provides Python code execution (generate and execute from file).
cmd.code_execute_file.description = Enable code_execute_file command execution. If enabled, provides Python code execution from an existing .py file.
cmd.code_execute_file.label = Enable: Python code execute (from file)
cmd.code_execute.label = Enable: Python code generate and execute
cmd.get_python_input.description = Enable get_python_input command execution. If enabled, it allows retrieval of all input code (from the edit section) from the Python code interpreter window.
cmd.get_python_input.label = Enable: get_python_input
cmd.get_python_output.description = Enable get_python_output command execution. If enabled, it allows retrieval of the output from the Python code interpreter window.
cmd.get_python_output.label = Enable: get_python_output
cmd.sys_exec.description = Enable sys_exec command execution. If enabled, provides system commands execution.
cmd.sys_exec.label = Enable: system command execute
container_name.description = Custom container name
container_name.label = Docker container name
docker_entrypoint.description = Command to run when starting the container
docker_entrypoint.label = Docker Entrypoint
dockerfile.description = You can customize the Dockerfile for the image by editing the configuration above and rebuilding the image via Tools -> Rebuild IPython Docker Image.
dockerfile.label = Dockerfile
docker_ports.description = Docker ports mapping: docker <> host. You can define protocol (in DOCKER key) with 8888/tcp or leave empty protocol part to use default (TCP)
docker_ports.label = Docker Ports
docker_volumes.description = Docker volumes mapping: docker <> host, {workdir} - placeholder for the current working directory on the host machine. Mode r/w will be used.
docker_volumes.label = Docker Volumes
fresh_kernel.description = Always run code using Run in a fresh kernel.
fresh_kernel.label = Always run code in a fresh kernel
get_html_output.description = Allows to get HTML/JS output from HTML Canvas
get_html_output.label = Enable: get HTML output from HTML Canvas
image_name.description = Custom image name
image_name.label = Docker image name
ipython_conn_addr.description = Default: 127.0.0.1
ipython_conn_addr.label = Connection address
ipython_container_name.description = Custom container name
ipython_container_name.label = Docker container name
ipython_dockerfile.description = You can customize the Dockerfile for the image used by IPython by editing the configuration above and rebuilding the image via Tools -> Rebuild IPython Docker Image.
ipython_dockerfile.label = Dockerfile
ipython_image_name.description = Custom image name
ipython_image_name.label = Docker image name
ipython_port_control.description = Default: 5558
ipython_port_control.label = Port: control
ipython_port_hb.description = Default: 5559
ipython_port_hb.label = Port: hb
ipython_port_iopub.description = Default: 5556
ipython_port_iopub.label = Port: iopub
ipython_port_shell.description = Default: 5555
ipython_port_shell.label = Port: shell
ipython_port_stdin.description = Default: 5557
ipython_port_stdin.label = Port: stdin
ipython_session_key.description = It must match the key provided in the Dockerfile.
ipython_session_key.label = Session Key
plugin.description = Provides Python code execution
plugin.name = Code Interpreter (v2)
python_cmd_tpl.description = Python command template to execute, use {filename} for the filename placeholder.
python_cmd_tpl.label = Python command template
render_html_output.description = Allows to render HTML/JS code in HTML Canvas
render_html_output.label = Enable: render HTML output in canvas
sandbox_docker.description = Executes Python (legacy) code in a sandbox (Docker container). Docker must be installed and running.
sandbox_docker_image.description = Docker image to use for sandbox.
sandbox_docker_image.label = Docker image
sandbox_docker.label = Sandbox (Docker container)
sandbox_ipython.description = Executes IPython and Python code in a sandbox (Docker container). Docker must be installed and running.
sandbox_ipython.label = Sandbox (Docker container)

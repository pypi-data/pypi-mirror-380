# This workflow is maintained according to STG Specification #2: Physics Publishing

name: Build and Publish Wheels

on:
#  workflow_run:  # THIS IS DISABLED BECAUSE IT PROBABLY DOESN'T WORK!
#    workflows: ["Run Tests"]
#    types:
#      - completed

  release:  # This workflow will be triggered upon a release being published on GitHub
    types:
      - published

  workflow_dispatch:  # Enable manual dispatching of this workflow

jobs:
  build_sdist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
      - name: Ensure Tags Present
        run: |
          git fetch --force --tags
          git describe --tags --always

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine==5.1.1 

      - name: Build Source Distribution
        run: |
          python3 -m build --sdist

      - name: Upload sdist to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}


  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Without this, one of the wheels failing for some reason would cancel all of the others.
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]  # Build wheels for macOS and Windows, and Linux.

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
      - name: Ensure Tags Present
        run: |
          git fetch --force --tags
          git describe --tags --always

      - name: Enable QEMU emulation
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # We run `python -m setuptools_scm` and `git status` for debugging purposes, to verify that
      # setuptools_scm is properly identifying the version based on the tag
      - name: Install and prepare build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools_scm==8.1.0 twine==5.1.1 setuptools_rust cibuildwheel==2.20.0
          python -m setuptools_scm 
          git status

      # This gives us access to a Rust compiler
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # We need to make all of possible architectures that we want wheels for available for Rust to compile for
      - name: Add Rust targets
        run: |
          rustup target add x86_64-apple-darwin || echo "x86_64-apple-darwin target already added"
          rustup target add aarch64-apple-darwin || echo "aarch64-apple-darwin target already added"
          rustup target add x86_64-unknown-linux-gnu || echo "Linux target already added"
          rustup target add x86_64-pc-windows-msvc || echo "Windows target already added"
        shell: bash

      # Now, we use cibuildwheel to build all the wheels that we want for the platforms we defined in matrix.os
      # It will build wheels for Python versions that are allowed based on our pyproject.toml
      - name: Build Wheels (Windows)
        if: runner.os == 'Windows'
        run: cibuildwheel --output-dir dist
        env:
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" MACOSX_DEPLOYMENT_TARGET="10.12"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_BEFORE_BUILD: >
            pip install -U setuptools-rust &&
            rustup default nightly &&
            rustup show

      - name: Build Wheels (MacOS)
        if: runner.os == 'macOS'
        run: cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS_MACOS: "x86_64 arm64"  # Make sure both x86_64 and arm64 wheels are built for macOS
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" MACOSX_DEPLOYMENT_TARGET="10.12"'
          CIBW_BEFORE_BUILD: >
            pip install -U setuptools-rust &&
            rustup default nightly &&
            rustup show

      - name: Build Wheels (Linux)
        run: cibuildwheel --output-dir dist
        if: runner.os == 'Linux'
        env:
          # build both arches on Linux…
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          # …but only Python 3.12 on the aarch64 arch:
          CIBW_BUILD_LINUX_AARCH64: "cp312-manylinux*"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" MACOSX_DEPLOYMENT_TARGET="10.12"'
          CIBW_BEFORE_BUILD: >
            pip install -U setuptools-rust &&
            rustup default nightly &&
            rustup show
          CIBW_BEFORE_BUILD_LINUX: >
            pip install -U setuptools-rust &&
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y &&
            rustup show

      - name: Ensure Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine==5.1.1

      - name: Upload wheels to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

# utils.py
import requests
from rich.console import Console
from rich.table import Table
import ssl, socket

SECURITY_HEADERS = {
    "Content-Security-Policy": "Critical",
    "Strict-Transport-Security": "Critical",
    "X-Frame-Options": "Critical",
    "X-Content-Type-Options": "Critical",
    "Referrer-Policy": "Recommended",
    "Permissions-Policy": "Optional",
    "Expect-CT": "Recommended",
    "Server": "Info",
    "Cache-Control": "Recommended",
    "X-XSS-Protection": "Optional",
    "Cross-Origin-Resource-Policy": "Recommended"
}

def fetch_headers(url, timeout=10, verify=True):
    """
    Return (headers, list_of_set_cookie_strings, status_code, requests_cookies)
    - list_of_set_cookie_strings: preserves multiple Set-Cookie headers if present
    - requests_cookies: requests.cookies.RequestsCookieJar (parsed cookies)
    """
    try:
        resp = requests.get(url, timeout=timeout, verify=verify)
        # Try to get multiple Set-Cookie headers via raw (works with HTTPAdapter)
        set_cookie_list = []
        try:
            # resp.raw is a urllib3 response with headers as HTTPHeaderDict
            raw = resp.raw
            if hasattr(raw, "headers") and hasattr(raw.headers, "get_all"):
                set_cookie_list = raw.headers.get_all("Set-Cookie") or []
        except Exception:
            set_cookie = resp.headers.get("Set-Cookie")
            if set_cookie:
                # If there's a comma in the header it might be multiple cookies joined,
                # but splitting on ', ' is imperfect. Keep whole string as single element.
                set_cookie_list = [set_cookie]

        # Always provide the parsed cookies too
        parsed_cookies = resp.cookies  # RequestsCookieJar
        return resp.headers, set_cookie_list, resp.status_code, parsed_cookies
    except requests.RequestException as e:
        # Return empty and include the error in status slot for caller to show
        return {}, [], None, None

def score_headers(headers):
    score = 0
    max_score = 0
    pts_map = {"Critical":3, "Recommended":2, "Optional":1, "Info":0}
    for h, sev in SECURITY_HEADERS.items():
        max_score += pts_map.get(sev,0)
        if h in headers:
            score += pts_map.get(sev,0)
    return score, max_score

def analyze_cookies(set_cookie_list, parsed_cookies):
    """
    Return list of cookie summaries:
    - for raw Set-Cookie strings: look for flags
    - for parsed_cookies (RequestsCookieJar): include name/value info (no flags)
    """
    results = []
    # Analyze raw Set-Cookie header strings (flags)
    for sc in set_cookie_list or []:
        low = sc.lower()
        results.append({
            "raw": sc,
            "has_secure": "secure" in low,
            "has_httponly": "httponly" in low,
            "has_samesite": "samesite" in low
        })

    # Add parsed cookies (name/value)
    if parsed_cookies:
        for c in parsed_cookies:
            results.append({"cookie_name": c, "cookie_value": parsed_cookies.get(c)})

    return results

def display_report(url, headers, set_cookie_list, score, max_score, status_code):
    console = Console()
    table = Table(title=f"HTTP Security Header Report: {url}")
    table.add_column("Header")
    table.add_column("Status")
    table.add_column("Severity")
    for h, sev in SECURITY_HEADERS.items():
        table.add_row(h, "Present ✅" if h in headers else "Missing ❌", sev)
    console.print(table)

    console.print("\n[bold]Cookie Analysis (raw Set-Cookie headers + parsed cookies)[/bold]")
    cookies = analyze_cookies(set_cookie_list, None)
    if cookies:
        console.print(cookies)
    else:
        console.print("No Set-Cookie header seen.")

    score_pct = round((score / max_score * 100) if max_score else 0)
    console.print(f"\nSite Security Score: {score}/{max_score} ({score_pct}%)")
    if status_code:
        console.print(f"HTTP status code: {status_code}")

def generate_poc(headers):
    poc = {}
    if "X-Frame-Options" not in headers and "Content-Security-Policy" not in headers:
        # If both missing, give both PoCs
        poc["clickjacking_iframe"] = "<iframe src='TARGET_URL'></iframe>"
        poc["csp_xss_demo"] = "<script>alert('XSS demo')</script>"
    else:
        if "X-Frame-Options" not in headers:
            poc["clickjacking_iframe"] = "<iframe src='TARGET_URL'></iframe>"
        if "Content-Security-Policy" not in headers:
            poc["csp_xss_demo"] = "<script>alert('XSS demo')</script>"
    return poc

def tls_check(url):
    """Return TLS version if https; quiet on errors"""
    try:
        hostname = url.replace("https://","").replace("http://","").split("/")[0]
        ctx = ssl.create_default_context()
        with ctx.wrap_socket(socket.socket(), server_hostname=hostname) as s:
            s.settimeout(5)
            s.connect((hostname, 443))
            return {"tls_version": s.version()}
    except Exception as e:
        return {"tls_version": None, "error": str(e)}


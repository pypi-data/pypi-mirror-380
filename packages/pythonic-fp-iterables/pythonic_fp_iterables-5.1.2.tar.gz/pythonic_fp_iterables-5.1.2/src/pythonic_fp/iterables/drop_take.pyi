from collections.abc import Callable, Iterable, Iterator

__all__ = ['drop', 'drop_while', 'take', 'take_while', 'take_split', 'take_while_split']

def drop[D](iterable: Iterable[D], n: int) -> Iterator[D]: ...
def drop_while[D](iterable: Iterable[D], pred: Callable[[D], bool]) -> Iterator[D]: ...
def take[D](iterable: Iterable[D], n: int) -> Iterator[D]: ...
def take_while[D](iterable: Iterable[D], pred: Callable[[D], bool]) -> Iterator[D]: ...
def take_split[D](iterable: Iterable[D], n: int) -> tuple[Iterator[D], Iterator[D]]: ...
def take_while_split[D](iterable: Iterable[D], pred: Callable[[D], bool]) -> tuple[Iterator[D], Iterator[D]]: ...

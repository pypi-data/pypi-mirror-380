name: Test and deploy to PYPI

on:
  workflow_dispatch:

jobs:
  Test_and_deploy:
     runs-on: ubuntu-latest
     steps:
      - name: Checkout documark/develop branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          path: documark-package
          token: ${{ secrets.IRISPIE_ACTIONS_TOKEN_2025 }}

      - name: Set up identity
        working-directory: documark-package
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies for tests
        run: |
          pip install --upgrade pip
          pip install -e ./documark-package
          pip install pytest toml

      - name: Run tests
        working-directory: documark-package
        run: |
          date > ./tests/report.txt
          # echo "==================================================" >> ./tests/report.txt
          # pytest ./tests -ra >> ./tests/report.txt

      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Test results
          path: ./documark-package/tests/report.txt

      - name: Bump version in pyproject.toml
        if: ${{ success() }}
        working-directory: documark-package
        run: |
          if ! [[ -e ./.release_type ]]; then
            echo "Cannot release without .release_type"
            exit 1
          fi
          RELEASE_TYPE=$(< ./.release_type)
          python ./.github/workflows/bump_version.py --release-type=$RELEASE_TYPE
          NEW_VERSION=$(python ./.github/workflows/print_version.py)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push test results and new version to develop
        if: ${{ success() }}
        env:
            NEW_VERSION: ${{ env.NEW_VERSION }}
        working-directory: documark-package
        run: |
          git add ./pyproject.toml ./tests/report.txt
          git commit -m "Update test results and bump version number to $NEW_VERSION"
          git push origin develop

      - name: Merge to master, tag and push
        if: ${{ success() }}
        env:
            NEW_VERSION: ${{ env.NEW_VERSION }}
        working-directory: documark-package
        run: |
          git switch master
          git pull origin master
          git merge -X theirs -m "Release documark-package $NEW_VERSION" develop
          git ls-tree master
          echo "Tagging version $NEW_VERSION"
          git tag $NEW_VERSION
          git push origin master --tags
          git tag
          git switch develop

      - name: Remove .release_type from develop
        if: ${{ success() }}
        working-directory: documark-package
        run: |
          git switch develop
          git rm .release_type
          git commit -m "Remove .release_type after release"
          git push origin develop

      - name: Install build and twine
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build
          python -m pip install --upgrade twine

      - name: Build dist files
        env:
            NEW_VERSION: ${{ env.NEW_VERSION }}
        working-directory: documark-package
        run: |
          git switch master
          echo "Building version $NEW_VERSION"
          python -m build

      - name: Upload to PYPI
        working-directory: documark-package
        env:
            PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/* -r pypi -u __token__ -p $PYPI_API_TOKEN --verbose

      - name: Upload new dist as artifact
        uses: actions/upload-artifact@master
        with:
          name: dist-${{ env.NEW_VERSION }}
          path: documark-package/dist/*


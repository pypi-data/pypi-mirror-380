[project]
name = "pypeit"
dynamic = ["version"]
authors = [
    { name = "PypeIt Collaboration", email = "pypeit@ucolick.org" }
]
license = {file = "LICENSE.rst"}
description = "PypeIt Spectroscopic Reduction"
keywords = [
    "pypeit",
    "PypeIt",
    "astronomy",
    "Keck",
    "UCO",
    "Lick",
    "spectroscopy",
    "data reduction",
]
readme = "README.rst"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11,<3.14"
dependencies = [ 
    "numpy>=2.0",
    "astropy>=7.0",
    "packaging>=22.0",
    "scipy>=1.9",
    "matplotlib>=3.7",
    "PyYAML>=6.0",
    "PyERFA>=2.0.0",
    "fast-histogram>=0.11",
    "configobj>=5.0.6",
    "scikit-learn>=1.2",
    "IPython>=8.0.0",
    "ginga>=5.4.0",
    "setuptools<81",    # Keep until we deprecate linetools
    "linetools>=0.3.2",
    "qtpy>=2.2.0",
    "pygithub",
    "bottleneck",
    "pyqt6",
]

[project.optional-dependencies]
scikit-image = [
    "scikit-image>=0.23",
]
specutils = [
    "specutils>=2.0",
]
test = [
    "pygit2",
    "pytest>=7.0.0",
    "pytest-astropy",
    "tox",
    "pytest-cov",
    "coverage",
]
docs = [
    "sphinx>=1.6,<8",
    "docutils<0.22",
    "sphinx-automodapi",
    "sphinx-design",
    "sphinx_rtd_theme==2.0.0",
]
devsuite = [
    "psutil",
    "pytest-qt",
]
dev = [
    "scikit-image>=0.23",
    "specutils>=2.0",
    "pygit2",
    "pytest>=7.0.0",
    "pytest-astropy",
    "tox",
    "pytest-cov",
    "coverage",
    "sphinx>=1.6,<8",
    "docutils<0.22",
    "sphinx-automodapi",
    "sphinx-design",
    "sphinx_rtd_theme==2.0.0",
    "psutil",
    "pytest-qt",
]

[project.urls]
Repository = "https://github.com/pypeit/PypeIt"
Documentation = "https://pypeit.readthedocs.io/"

[project.scripts]

# non-GUI scripts
pypeit_arxiv_solution = "pypeit.scripts.arxiv_solution:ArxivSolution.entry_point"
pypeit_cache_github_data = "pypeit.scripts.cache_github_data:CacheGithubData.entry_point"
pypeit_clean_cache = "pypeit.scripts.clean_cache:CleanCache.entry_point"
pypeit_chk_flexure = "pypeit.scripts.chk_flexure:ChkFlexure.entry_point"
pypeit_chk_for_calibs = "pypeit.scripts.chk_for_calibs:ChkForCalibs.entry_point"
pypeit_chk_noise_1dspec = "pypeit.scripts.chk_noise_1dspec:ChkNoise1D.entry_point"
pypeit_chk_noise_2dspec = "pypeit.scripts.chk_noise_2dspec:ChkNoise2D.entry_point"
pypeit_chk_plugins = "pypeit.scripts.chk_plugins:ChkPlugins.entry_point"
pypeit_chk_scattlight = "pypeit.scripts.chk_scattlight:ChkScattLight.entry_point"
pypeit_coadd_1dspec = "pypeit.scripts.coadd_1dspec:CoAdd1DSpec.entry_point"
pypeit_coadd_2dspec = "pypeit.scripts.coadd_2dspec:CoAdd2DSpec.entry_point"
pypeit_coadd_datacube = "pypeit.scripts.coadd_datacube:CoAddDataCube.entry_point"
pypeit_collate_1d = "pypeit.scripts.collate_1d:Collate1D.entry_point"
pypeit_compile_wvarxiv = "pypeit.scripts.compile_wvarxiv:CompileWVarxiv.entry_point"
pypeit_edge_inspector = "pypeit.scripts.edge_inspector:EdgeInspector.entry_point"
pypeit_extract_datacube = "pypeit.scripts.extract_datacube:ExtractDataCube.entry_point"
pypeit_flux_calib = "pypeit.scripts.flux_calib:FluxCalib.entry_point"
pypeit_flux_setup = "pypeit.scripts.flux_setup:FluxSetup.entry_point"
pypeit_install_extinctfile = "pypeit.scripts.install_extinctfile:InstallExtinctfile.entry_point"
pypeit_install_linelist = "pypeit.scripts.install_linelist:InstallLinelist.entry_point"
pypeit_install_ql_calibs = "pypeit.scripts.install_ql_calib:InstallQLCalibs.entry_point"
pypeit_install_telluric = "pypeit.scripts.install_telluric:InstallTelluric.entry_point"
pypeit_install_wvarxiv = "pypeit.scripts.install_wvarxiv:InstallWvArxiv.entry_point"
pypeit_lowrdx_skyspec = "pypeit.scripts.lowrdx_skyspec:LowRDXSkySpec.entry_point"
pypeit_multislit_flexure = "pypeit.scripts.multislit_flexure:MultiSlitFlexure.entry_point"
pypeit_obslog = "pypeit.scripts.obslog:ObsLog.entry_point"
pypeit_parse_slits = "pypeit.scripts.parse_slits:ParseSlits.entry_point"
pypeit_print_bpm = "pypeit.scripts.print_bpm:PrintBPM.entry_point"
pypeit_qa_html = "pypeit.scripts.qa_html:QAHtml.entry_point"
pypeit_ql = "pypeit.scripts.ql:QL.entry_point"
run_pypeit = "pypeit.scripts.run_pypeit:RunPypeIt.entry_point"
pypeit_run_to_calibstep = "pypeit.scripts.run_to_calibstep:RunToCalibStep.entry_point"
pypeit_sensfunc = "pypeit.scripts.sensfunc:SensFunc.entry_point"
pypeit_setup = "pypeit.scripts.setup:Setup.entry_point"
pypeit_setup_coadd2d = "pypeit.scripts.setup_coadd2d:SetupCoAdd2D.entry_point"
pypeit_show_arxiv = "pypeit.scripts.show_arxiv:ShowArxiv.entry_point"
pypeit_version = "pypeit.scripts.version:Version.entry_point"
# NOTE: pypeit_show_wvcalib uses linetools to open a json file, but uses
# matplotlib to show the spectrum...
pypeit_show_wvcalib = "pypeit.scripts.show_wvcalib:ShowWvCalib.entry_point"
pypeit_tellfit = "pypeit.scripts.tellfit:TellFit.entry_point"
pypeit_trace_edges = "pypeit.scripts.trace_edges:TraceEdges.entry_point"
# GUI scripts
pypeit_chk_alignments = "pypeit.scripts.chk_alignments:ChkAlignments.entry_point"
pypeit_chk_edges = "pypeit.scripts.chk_edges:ChkEdges.entry_point"
pypeit_chk_flats = "pypeit.scripts.chk_flats:ChkFlats.entry_point"
pypeit_chk_tilts = "pypeit.scripts.chk_tilts:ChkTilts.entry_point"
pypeit_chk_wavecalib = "pypeit.scripts.chk_wavecalib:ChkWaveCalib.entry_point"
pypeit_compare_sky = "pypeit.scripts.compare_sky:CompareSky.entry_point"
pypeit_identify = "pypeit.scripts.identify:Identify.entry_point"
pypeit_ql_multislit = "pypeit.scripts.ql_multislit:QL_MOS.entry_point"
pypeit_show_1dspec = "pypeit.scripts.show_1dspec:Show1DSpec.entry_point"
pypeit_show_2dspec = "pypeit.scripts.show_2dspec:Show2DSpec.entry_point"
pypeit_skysub_regions = "pypeit.scripts.skysub_regions:SkySubRegions.entry_point"
pypeit_view_fits = "pypeit.scripts.view_fits:ViewFits.entry_point"
pypeit_show_pixflat = "pypeit.scripts.show_pixflat:ShowPixFlat.entry_point"

[project.entry-points."ginga.rv.plugins"]

SlitWavelength = "pypeit.display:setup_SlitWavelength"
Spec1dView = "pypeit.display:setup_Spec1dView"

[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
    "oldest-supported-numpy",
    "cython>=0.29.14"
]
build-backend = 'setuptools.build_meta'

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = {}

[tool.setuptools_scm]
version_file = "pypeit/version.py"

[tool.pytest.ini_options]
minversion = 7.0
testpaths = [
    "pypeit",
]

[tool.coverage]

    [tool.coverage.run]
        omit = [
            "pypeit/_astropy_init*",
            "pypeit/conftest.py",
            "pypeit/*setup_package*",
            "pypeit/tests/*",
            "pypeit/*/tests/*",
            "pypeit/extern/*",
            "pypeit/version*",
            "*/pypeit/_astropy_init*",
            "*/pypeit/conftest.py",
            "*/pypeit/*setup_package*",
            "*/pypeit/tests/*",
            "*/pypeit/*/tests/*",
            "*/pypeit/extern/*",
            "*/pypeit/version*",
        ]

    [tool.coverage.report]
        exclude_lines = [
            "pragma: no cover",
            "except ImportError",
            "raise AssertionError",
            "raise NotImplementedError",
            "'def main(.*):'",
            "pragma: py{ignore_python_version}",
            "def _ipython_key_completions_",
        ]


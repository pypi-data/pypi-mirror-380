Metadata-Version: 2.4
Name: thermoextrap
Version: 1.0.0
Summary: Thermodynamic extrapolation
Project-URL: Documentation, https://pages.nist.gov/thermoextrap/
Project-URL: Homepage, https://github.com/usnistgov/thermoextrap
Author-email: Jacob Monroe <jacob.monroe@nist.gov>, William Krekelberg <wpk@nist.gov>
License-Expression: NIST-PD
License-File: LICENSE
Keywords: thermoextrap
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.9
Requires-Dist: attrs>=24.1.0
Requires-Dist: cmomy>=1.0.1
Requires-Dist: dm-tree
Requires-Dist: lazy-loader
Requires-Dist: module-utilities[inherit]>=0.11.0
Requires-Dist: numba>=0.60.0
Requires-Dist: numpy>=1.26.0
Requires-Dist: packaging
Requires-Dist: scipy
Requires-Dist: sympy
Requires-Dist: xarray>=2024.7.0
Provides-Extra: accel
Requires-Dist: bottleneck; extra == 'accel'
Provides-Extra: all
Requires-Dist: bottleneck; extra == 'all'
Requires-Dist: dask[complete]; extra == 'all'
Requires-Dist: gpflow>=2.6.0; extra == 'all'
Requires-Dist: matplotlib; extra == 'all'
Requires-Dist: pymbar[jax]>=4.0; extra == 'all'
Requires-Dist: tensorflow-probability[tf]~=0.24.0; extra == 'all'
Requires-Dist: tensorflow>=2.13; extra == 'all'
Provides-Extra: gpr
Requires-Dist: gpflow>=2.6.0; extra == 'gpr'
Requires-Dist: tensorflow-probability[tf]~=0.24.0; extra == 'gpr'
Requires-Dist: tensorflow>=2.13; extra == 'gpr'
Provides-Extra: mbar
Requires-Dist: pymbar[jax]>=4.0; extra == 'mbar'
Provides-Extra: openmm
Requires-Dist: openmm; extra == 'openmm'
Provides-Extra: parallel
Requires-Dist: dask[complete]; extra == 'parallel'
Provides-Extra: viz
Requires-Dist: matplotlib; extra == 'viz'
Description-Content-Type: text/markdown

<!-- markdownlint-disable MD041 -->

<!-- prettier-ignore-start -->
[![Repo][repo-badge]][repo-link]
[![Docs][docs-badge]][docs-link]
[![PyPI license][license-badge]][license-link]
[![PyPI version][pypi-badge]][pypi-link]
[![Conda (channel only)][conda-badge]][conda-link]
[![Code style: ruff][ruff-badge]][ruff-link]
[![uv][uv-badge]][uv-link]

<!-- For more badges, see
https://shields.io/category/other
https://naereen.github.io/badges/
[pypi-badge]: https://badge.fury.io/py/thermoextrap
-->

[ruff-badge]: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json
[ruff-link]: https://github.com/astral-sh/ruff
[uv-badge]: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/uv/main/assets/badge/v0.json
[uv-link]: https://github.com/astral-sh/uv
[pypi-badge]: https://img.shields.io/pypi/v/thermoextrap
[pypi-link]: https://pypi.org/project/thermoextrap
[docs-badge]: https://img.shields.io/badge/docs-sphinx-informational
[docs-link]: https://pages.nist.gov/thermoextrap/
[repo-badge]: https://img.shields.io/badge/--181717?logo=github&logoColor=ffffff
[repo-link]: https://github.com/usnistgov/thermoextrap
[conda-badge]: https://img.shields.io/conda/v/conda-forge/thermoextrap
[conda-link]: https://anaconda.org/conda-forge/thermoextrap
[license-badge]: https://img.shields.io/pypi/l/thermoextrap?color=informational
[license-link]: https://github.com/usnistgov/thermoextrap/blob/main/LICENSE

<!-- other links -->

[cmomy]: https://github.com/usnistgov/cmomy
[gpr-link]: https://github.com/usnistgov/thermoextrap/tree/main/examples/gpr_active_learning
[notebook-link]: https://github.com/usnistgov/thermoextrap/tree/main/examples/usage

<!-- prettier-ignore-end -->

# `thermoextrap`: Thermodynamic Extrapolation/Interpolation Library

This repository contains code used and described in references [^fn1] [^fn2].

[^fn1]:
    [Extrapolation and Interpolation Strategies for Efficiently Estimating Structural Observables as a Function of Temperature and Density](https://doi.org/10.1063/5.0014282)

[^fn2]:
    Leveraging Uncertainty Estimates and Derivative Information in Gaussian
    Process Regression for Expedited Data Collection in Molecular Simulations.
    In preparation.

## Overview

If you find this code useful in producing published works, please provide an
appropriate citation. Note that the second citation is focused on adding
features that make use of GPR models based on derivative information produced by
the core code base. For now, the [GPR code, along with more information, may be
found here][gpr-link]. In a future release, we expect this to be fully
integrated into the code base rather than a standalone module.

Code included here can be used to perform thermodynamic extrapolation and
interpolation of observables calculated from molecular simulations. This allows
for more efficient use of simulation data for calculating how observables change
with simulation conditions, including temperature, density, pressure, chemical
potential, or force field parameters. Users are highly encourage to work through
the [Jupyter Notebooks][notebook-link] presenting examples for a variety of
different observable functional forms. We only guarantee that this code is
functional for the test cases we present here or for which it has previously
been applied Additionally, the code may be in continuous development at any
time. Use at your own risk and always check to make sure the produced results
make sense. If bugs are found, please report them. If specific features would be
helpful just let us know and we will be happy to work with you to come up with a
solution.

## Features

- Fast calculation of derivatives

## Status

This package is actively used by the author. Please feel free to create a pull
request for wanted features and suggestions!

<!-- end-docs -->

## Installation

<!-- start-installation -->

Use one of the following to install `thermoextrap`:

```bash
conda install -c conda-forge thermoextrap
```

or

```bash
pip install thermoextrap
```

## Additional dependencies

To utilize the full potential of `thermoextrap`, additional dependencies are
needed. This can be done via pip by using:

```bash
pip install thermoextrap[all]
```

If using conda, then you'll have to manually install some dependencies. For
example, you can run:

```bash
conda install bottleneck dask "pymbar>=4.0"
```

At this time, it is recommended to install the Gaussian Process Regression (GPR)
dependencies via pip, as the conda-forge recipes are slightly out of date:

```bash
pip install tensorflow tensorflow-probability "gpflow>=2.6.0"
```

## Building [cmomy] library

`thermoextrap` makes extensive use of the [cmomy] library. If using
`thermoextrap`in parallel, you should either first compile cached numba code
with

```bash
python -m cmomy.compile
```

Or run your command with the environment variable `CMOMY_NUMBA_CACHE` set to
`false`

```bash
CMOMY_NUMBA_CACHE=false python ....
```

## Installing from source

The repo is setup to use [uv](https://github.com/astral-sh/uv) to create a
development environment. Use the following:

```bash
uv sync
```

This environment will include all additional dependencies mentioned above.

Alternatively, you can install the (locked) development dependencies using:

```bash
pip install requirements/lock/dev.txt
```

It is not recommended to install the development dependencies with `conda`.

<!-- end-installation -->

## Example usage

```python
import thermoextrap
```

## Documentation

See the [documentation][docs-link] for a look at `thermoextrap` in action.

To have a look at using `thermoextrap` with Gaussian process regression, look in
the [gpr](examples/usage/gpr) and
[gpr_active_learning](examples/gpr_active_learning) directories.

## License

This is free software. See [LICENSE][license-link].

## Related work

This package extensively uses the [cmomy] package to handle central comoments.

## Contact

Questions may be addressed to Bill Krekelberg at <william.krekelberg@nist.gov>
or Jacob Monroe at <jacob.monroe@uark.edu>.

## Credits

This package was created using
[Cookiecutter](https://github.com/audreyr/cookiecutter) with the
[usnistgov/cookiecutter-nist-python](https://github.com/usnistgov/cookiecutter-nist-python)
template.
<!-- markdownlint-disable MD024 -->
<!-- markdownlint-disable MD013 -->
<!-- prettier-ignore-start -->
# Changelog

Changelog for `thermoextrap`

## Unreleased

[changelog.d]: https://github.com/usnistgov/thermoextrap/tree/main/changelog.d

See the fragment files in [changelog.d]

<!-- prettier-ignore-end -->

<!-- markdownlint-enable MD013 -->

<!-- scriv-insert-here -->

## v1.0.0 — 2025-09-29

### Removed

- Removed `DataValues` and `DataValuesCentral` classes. Addition of
  `resample_values` option to `DataCentralMomentsVals`, and addition of
  `Dataset` support from `cmomy` package, made these classes redundant.

### Added

- Added type annotations/checking. The core functionality is fully covered. GPR
  modules are mostly covered (there are still so `Any` objects about). This
  caught several edge case bugs.

- Added `resample_values` option to `DataCentralMomentsVals` class. This allows
  resampling on `uv` and `xv` instead of resampling during construction of
  `dxduave`. Used in `PerturbModel`, etc.

### Changed

- Moved thermoextrap.legacy submodule to tests/legacy, as this module is used
  solely for regression testing.

## v0.6.0 — 2025-02-18

### Changed

- Project now setup to use [uv](https://github.com/astral-sh/uv) with lock file.
- Updated code to use latest version of
  [cmomy](https://github.com/usnistgov/cmomy)
- Initial work for adding typing to code.

## v0.5.0 — 2024-03-15

### Removed

- Scaling of GPR inputs (`x_scale_fac` argument in `HeteroscedasticGPR`)
- Left `x_scale_fac` as object attribute with value 1.0 for back-compatibility

### Added

- Support for multidimensional inputs for GPRs
- Testing around basic multiD input GPRs
- Updated `make_rbf_expr` in `active_utils` (old 1D in `make_rbf_expr_old`)
- Updated `DerivativeKernel`, `HetGaussianDeriv`, `HeteroscedasticGPR` in
  `gpr_models`

### Changed

- Updates to match with newer versions of GPflow
- `HetGaussianDeriv` likelihood now accepts `X` (input data) argument for all
  methods
- `HetGaussianDeriv` init now takes `obs_dims` argument instead of `d_order`
- `build_scaled_cov_mat` method now takes `X`, which includes derivative orders
- all mean functions inherit from gpflow.functions.MeanFunction (same behavior)

- Changed structure of the repo to better support some third party tools.
- Moved nox environments from `.nox` to `.nox/{project-name}/envs`. This fixes
  issues with ipykernel giving odd names for locally installed environments.
- Moved repo specific dot files to the `config` directory (e.g.,
  `.noxconfig.toml` to `config/userconfig.toml`). This cleans up the top level
  of the repo.
- added some support for using `nbqa` to run mypy/pyright on notebooks.
- Added ability to bootstrap development environment using pipx. This should
  simplify initial setup. See Contributing for more info.

## v0.4.0 — 2023-06-15

### Added

- Package now available on conda-forge

- Now support python3.11
- Bumped pymbar version to pymbar>=4.0

### Changed

- Switched from tox to nox for testing.

### Deprecated

- No longer support pymbar < 4.0

## v0.3.0 — 2023-05-03

### Changed

- New linters via pre-commit
- Development env now handled by tox

- Moved `models, data, idealgas` from `thermoextrap.core` to `thermoextrap`.
  These were imported at top level anyway. This fixes issues with doing things
  like `from thermoextrap.data import ...`, etc.
- Moved `core._docstrings_` to `docstrings`.
- Now using `cmomy.docstrings` instead of repeating them here.

Full set of changes:
[`v0.2.2...v0.3.0`](https://github.com/usnistgov/thermoextrap/compare/v0.2.2...0.3.0)

## v0.2.2 - 2023-04-05

Full set of changes:
[`v0.2.1...v0.2.2`](https://github.com/usnistgov/thermoextrap/compare/v0.2.1...v0.2.2)

## v0.2.1 - 2023-03-30

Full set of changes:
[`v0.2.0...v0.2.1`](https://github.com/usnistgov/thermoextrap/compare/v0.2.0...v0.2.1)

## v0.2.0 - 2023-03-28

Full set of changes:
[`v0.1.9...v0.2.0`](https://github.com/usnistgov/thermoextrap/compare/v0.1.9...v0.2.0)

## v0.1.9 - 2023-02-15

Full set of changes:
[`v0.1.8...v0.1.9`](https://github.com/usnistgov/thermoextrap/compare/v0.1.8...v0.1.9)

## v0.1.8 - 2023-02-15

Full set of changes:
[`v0.1.7...v0.1.8`](https://github.com/usnistgov/thermoextrap/compare/v0.1.7...v0.1.8)

## v0.1.7 - 2023-02-14
This software was developed by employees of the National Institute of Standards
and Technology (NIST), an agency of the Federal Government. Pursuant to title 17
United States Code Section 105, works of NIST employees are not subject to
copyright protection in the United States and are considered to be in the public
domain. Permission to freely use, copy, modify, and distribute this software and
its documentation without fee is hereby granted, provided that this notice and
disclaimer of warranty appears in all copies.

THE SOFTWARE IS PROVIDED 'AS IS' WITHOUT ANY WARRANTY OF ANY KIND, EITHER
EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY
THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND FREEDOM FROM
INFRINGEMENT, AND ANY WARRANTY THAT THE DOCUMENTATION WILL CONFORM TO THE
SOFTWARE, OR ANY WARRANTY THAT THE SOFTWARE WILL BE ERROR FREE. IN NO EVENT
SHALL NIST BE LIABLE FOR ANY DAMAGES, INCLUDING, BUT NOT LIMITED TO, DIRECT,
INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR
IN ANY WAY CONNECTED WITH THIS SOFTWARE, WHETHER OR NOT BASED UPON WARRANTY,
CONTRACT, TORT, OR OTHERWISE, WHETHER OR NOT INJURY WAS SUSTAINED BY PERSONS OR
PROPERTY OR OTHERWISE, AND WHETHER OR NOT LOSS WAS SUSTAINED FROM, OR AROSE OUT
OF THE RESULTS OF, OR USE OF, THE SOFTWARE OR SERVICES PROVIDED HEREUNDER.

Distributions of NIST software should also include copyright and licensing
statements of any third-party software that are legally bundled with the code in
compliance with the conditions of those licenses.

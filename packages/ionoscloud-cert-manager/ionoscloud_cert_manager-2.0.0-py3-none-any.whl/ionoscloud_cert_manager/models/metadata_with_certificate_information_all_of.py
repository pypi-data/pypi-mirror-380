# coding: utf-8

"""
    Certificate Manager Service API

    Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_cert_manager.configuration import Configuration


class MetadataWithCertificateInformationAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'auto_certificate': 'str',

        'last_issued_certificate': 'str',

        'expired': 'bool',

        'not_before': 'datetime',

        'not_after': 'datetime',

        'serial_number': 'str',

        'common_name': 'str',

        'subject_alternative_names': 'list[str]',
    }

    attribute_map = {

        'auto_certificate': 'autoCertificate',

        'last_issued_certificate': 'lastIssuedCertificate',

        'expired': 'expired',

        'not_before': 'notBefore',

        'not_after': 'notAfter',

        'serial_number': 'serialNumber',

        'common_name': 'commonName',

        'subject_alternative_names': 'subjectAlternativeNames',
    }

    def __init__(self, auto_certificate=None, last_issued_certificate=None, expired=None, not_before=None, not_after=None, serial_number=None, common_name=None, subject_alternative_names=None, local_vars_configuration=None):  # noqa: E501
        """MetadataWithCertificateInformationAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_certificate = None
        self._last_issued_certificate = None
        self._expired = None
        self._not_before = None
        self._not_after = None
        self._serial_number = None
        self._common_name = None
        self._subject_alternative_names = None
        self.discriminator = None

        if auto_certificate is not None:
            self.auto_certificate = auto_certificate
        if last_issued_certificate is not None:
            self.last_issued_certificate = last_issued_certificate
        self.expired = expired
        self.not_before = not_before
        self.not_after = not_after
        self.serial_number = serial_number
        self.common_name = common_name
        self.subject_alternative_names = subject_alternative_names


    @property
    def auto_certificate(self):
        """Gets the auto_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The ID of the auto-certificate that caused issuing of the certificate.  # noqa: E501

        :return: The auto_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._auto_certificate

    @auto_certificate.setter
    def auto_certificate(self, auto_certificate):
        """Sets the auto_certificate of this MetadataWithCertificateInformationAllOf.

        The ID of the auto-certificate that caused issuing of the certificate.  # noqa: E501

        :param auto_certificate: The auto_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type auto_certificate: str
        """

        self._auto_certificate = auto_certificate

    @property
    def last_issued_certificate(self):
        """Gets the last_issued_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The ID of the last issued certificate that belongs to the same auto-certificate.  # noqa: E501

        :return: The last_issued_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._last_issued_certificate

    @last_issued_certificate.setter
    def last_issued_certificate(self, last_issued_certificate):
        """Sets the last_issued_certificate of this MetadataWithCertificateInformationAllOf.

        The ID of the last issued certificate that belongs to the same auto-certificate.  # noqa: E501

        :param last_issued_certificate: The last_issued_certificate of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type last_issued_certificate: str
        """

        self._last_issued_certificate = last_issued_certificate

    @property
    def expired(self):
        """Gets the expired of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        Indicates if the certificate is expired.  # noqa: E501

        :return: The expired of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this MetadataWithCertificateInformationAllOf.

        Indicates if the certificate is expired.  # noqa: E501

        :param expired: The expired of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type expired: bool
        """
        if self.local_vars_configuration.client_side_validation and expired is None:  # noqa: E501
            raise ValueError("Invalid value for `expired`, must not be `None`")  # noqa: E501

        self._expired = expired

    @property
    def not_before(self):
        """Gets the not_before of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The start date of the certificate.  # noqa: E501

        :return: The not_before of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this MetadataWithCertificateInformationAllOf.

        The start date of the certificate.  # noqa: E501

        :param not_before: The not_before of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type not_before: datetime
        """
        if self.local_vars_configuration.client_side_validation and not_before is None:  # noqa: E501
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The end date of the certificate.  # noqa: E501

        :return: The not_after of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this MetadataWithCertificateInformationAllOf.

        The end date of the certificate.  # noqa: E501

        :param not_after: The not_after of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type not_after: datetime
        """
        if self.local_vars_configuration.client_side_validation and not_after is None:  # noqa: E501
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def serial_number(self):
        """Gets the serial_number of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The serial number of the certificate in hex.  # noqa: E501

        :return: The serial_number of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this MetadataWithCertificateInformationAllOf.

        The serial number of the certificate in hex.  # noqa: E501

        :param serial_number: The serial_number of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type serial_number: str
        """
        if self.local_vars_configuration.client_side_validation and serial_number is None:  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def common_name(self):
        """Gets the common_name of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        The common name (DNS) of the certificate.  # noqa: E501

        :return: The common_name of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this MetadataWithCertificateInformationAllOf.

        The common name (DNS) of the certificate.  # noqa: E501

        :param common_name: The common_name of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type common_name: str
        """
        if self.local_vars_configuration.client_side_validation and common_name is None:  # noqa: E501
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this MetadataWithCertificateInformationAllOf.  # noqa: E501

        Optional additional names added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :return: The subject_alternative_names of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this MetadataWithCertificateInformationAllOf.

        Optional additional names added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this MetadataWithCertificateInformationAllOf.  # noqa: E501
        :type subject_alternative_names: list[str]
        """
        if self.local_vars_configuration.client_side_validation and subject_alternative_names is None:  # noqa: E501
            raise ValueError("Invalid value for `subject_alternative_names`, must not be `None`")  # noqa: E501

        self._subject_alternative_names = subject_alternative_names
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataWithCertificateInformationAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MetadataWithCertificateInformationAllOf):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Certificate Manager Service API

    Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_cert_manager.configuration import Configuration


class ProviderExternalAccountBinding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'key_id': 'str',

        'key_secret': 'str',
    }

    attribute_map = {

        'key_id': 'keyId',

        'key_secret': 'keySecret',
    }

    def __init__(self, key_id=None, key_secret=None, local_vars_configuration=None):  # noqa: E501
        """ProviderExternalAccountBinding - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_id = None
        self._key_secret = None
        self.discriminator = None

        if key_id is not None:
            self.key_id = key_id
        if key_secret is not None:
            self.key_secret = key_secret


    @property
    def key_id(self):
        """Gets the key_id of this ProviderExternalAccountBinding.  # noqa: E501

        The key ID of the external account binding.  # noqa: E501

        :return: The key_id of this ProviderExternalAccountBinding.  # noqa: E501
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ProviderExternalAccountBinding.

        The key ID of the external account binding.  # noqa: E501

        :param key_id: The key_id of this ProviderExternalAccountBinding.  # noqa: E501
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def key_secret(self):
        """Gets the key_secret of this ProviderExternalAccountBinding.  # noqa: E501

        The secret of the external account binding.  # noqa: E501

        :return: The key_secret of this ProviderExternalAccountBinding.  # noqa: E501
        :rtype: str
        """
        return self._key_secret

    @key_secret.setter
    def key_secret(self, key_secret):
        """Sets the key_secret of this ProviderExternalAccountBinding.

        The secret of the external account binding.  # noqa: E501

        :param key_secret: The key_secret of this ProviderExternalAccountBinding.  # noqa: E501
        :type key_secret: str
        """

        self._key_secret = key_secret
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderExternalAccountBinding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProviderExternalAccountBinding):
            return True

        return self.to_dict() != other.to_dict()

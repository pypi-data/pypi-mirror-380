# coding: utf-8

"""
    Certificate Manager Service API

    Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates  with IONOS services and your internal connected resources.   For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic. The service provides the basic functions of uploading and deleting your certificates for this purpose.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_cert_manager.configuration import Configuration


class AutoCertificate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'provider': 'str',

        'common_name': 'str',

        'key_algorithm': 'str',

        'name': 'str',

        'subject_alternative_names': 'list[str]',
    }

    attribute_map = {

        'provider': 'provider',

        'common_name': 'commonName',

        'key_algorithm': 'keyAlgorithm',

        'name': 'name',

        'subject_alternative_names': 'subjectAlternativeNames',
    }

    def __init__(self, provider=None, common_name=None, key_algorithm=None, name=None, subject_alternative_names=None, local_vars_configuration=None):  # noqa: E501
        """AutoCertificate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._provider = None
        self._common_name = None
        self._key_algorithm = None
        self._name = None
        self._subject_alternative_names = None
        self.discriminator = None

        self.provider = provider
        self.common_name = common_name
        self.key_algorithm = key_algorithm
        self.name = name
        if subject_alternative_names is not None:
            self.subject_alternative_names = subject_alternative_names


    @property
    def provider(self):
        """Gets the provider of this AutoCertificate.  # noqa: E501

        The certificate provider used to issue the certificates.  # noqa: E501

        :return: The provider of this AutoCertificate.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this AutoCertificate.

        The certificate provider used to issue the certificates.  # noqa: E501

        :param provider: The provider of this AutoCertificate.  # noqa: E501
        :type provider: str
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def common_name(self):
        """Gets the common_name of this AutoCertificate.  # noqa: E501

        The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :return: The common_name of this AutoCertificate.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this AutoCertificate.

        The common name (DNS) of the certificate to issue. The common name needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :param common_name: The common_name of this AutoCertificate.  # noqa: E501
        :type common_name: str
        """
        if self.local_vars_configuration.client_side_validation and common_name is None:  # noqa: E501
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def key_algorithm(self):
        """Gets the key_algorithm of this AutoCertificate.  # noqa: E501

        The key algorithm used to generate the certificate.  # noqa: E501

        :return: The key_algorithm of this AutoCertificate.  # noqa: E501
        :rtype: str
        """
        return self._key_algorithm

    @key_algorithm.setter
    def key_algorithm(self, key_algorithm):
        """Sets the key_algorithm of this AutoCertificate.

        The key algorithm used to generate the certificate.  # noqa: E501

        :param key_algorithm: The key_algorithm of this AutoCertificate.  # noqa: E501
        :type key_algorithm: str
        """
        if self.local_vars_configuration.client_side_validation and key_algorithm is None:  # noqa: E501
            raise ValueError("Invalid value for `key_algorithm`, must not be `None`")  # noqa: E501
        allowed_values = ["rsa2048", "rsa3072", "rsa4096", "secp256r1", "secp384r1"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and key_algorithm not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `key_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(key_algorithm, allowed_values)
            )

        self._key_algorithm = key_algorithm

    @property
    def name(self):
        """Gets the name of this AutoCertificate.  # noqa: E501

        A certificate name used for management purposes.  # noqa: E501

        :return: The name of this AutoCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutoCertificate.

        A certificate name used for management purposes.  # noqa: E501

        :param name: The name of this AutoCertificate.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this AutoCertificate.  # noqa: E501

        Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :return: The subject_alternative_names of this AutoCertificate.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this AutoCertificate.

        Optional additional names to be added to the issued certificate. The additional names needs to be part of a zone in IONOS Cloud DNS.   # noqa: E501

        :param subject_alternative_names: The subject_alternative_names of this AutoCertificate.  # noqa: E501
        :type subject_alternative_names: list[str]
        """

        self._subject_alternative_names = subject_alternative_names
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutoCertificate):
            return True

        return self.to_dict() != other.to_dict()

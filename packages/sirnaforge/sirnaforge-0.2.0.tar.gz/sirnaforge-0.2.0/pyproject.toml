[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sirnaforge"
version = "0.2.0"
description = "siRNAforge - Multi-species gene to siRNA design, off-target prediction, and ranking. Comprehensive siRNA design toolkit for gene silencing"
authors = [
    {name = "Austin S. Hovland.", email = "austin@sansterbioanalytics.com"}
]
readme = "README.md"
requires-python = ">=3.9, <3.13"
license = {file = "LICENSE"}
keywords = ["sirna", "rna-interference", "gene-silencing", "bioinformatics", "computational-biology"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    "biopython>=1.84",
    "pandas>=2.3.0",
    "numpy>=1.26.0",
    "requests>=2.32.0",
    "pysam>=0.23.0",
    "click>=8.0.0",
    "pydantic>=2.11.0",
    "rich>=14.0.0",
    "typer>=0.17.0",
    "ViennaRNA>=2.7.0",
    "aiohttp>=3.12.0",
    "httpx>=0.28.0",
    "nextflow>=25.04.0",
    "pandera>=0.26.0",
]

[dependency-groups]
dev = [
    "uv>=0.4.0",
    "pytest>=8.0",
    "pytest-cov>=6.0",
    "pytest-mock>=3.15",
    "pytest-asyncio>=1.1.0",
    "pytest-xdist>=3.8",
    "ruff>=0.12.0",
    "mypy>=1.10",
    "pre-commit>=3.8",
    "types-requests>=2.32.0",
    "pandas-stubs>=2.1.0",
    "codespell>=2.4.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0,<4.0.0",
    "sphinx>=7.3.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=2.0.0",
    "linkify-it-py>=2.0.3",
    "sphinx-autobuild>=2024.9.19",
    "sphinx-design>=0.6.0",
    "sphinxcontrib-mermaid>=1.0.0",
    "jupyter>=1.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.urls]
Homepage = "https://github.com/austin-s-h/sirnaforge"
Documentation = "https://austin-s-h.github.io/sirnaforge"
Repository = "https://github.com/austin-s-h/sirnaforge"
Issues = "https://github.com/austin-s-h/sirnaforge/issues"
Changelog = "https://github.com/austin-s-h/sirnaforge/blob/main/CHANGELOG.md"

[project.scripts]
sirnaforge = "sirnaforge.cli:app"

[tool.uv]
default-groups = ["dev"]

[tool.hatch.version]
path = "src/sirnaforge/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/sirnaforge"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 120
exclude = [
    # Genomic file formats (glob patterns)
    "**/*.fasta",
    "**/*.fa",
    "**/*.fastq",
    "**/*.fq",
    "**/*.vcf",
    "**/*.gff",
    "**/*.gff3",
    "**/*.gtf",
    "**/*.bed",
    "**/*.sam",
    "**/*.bam",
    "**/*.bcf",
    "**/*.wig",
    "**/*.bigwig",
    "**/*.bigbed",
    "**/*.2bit",
    "**/*.gbk",
    "**/*.gb",
    "**/*.genbank",
    "**/*.embl",
    "**/*.sff",
    "**/*.ab1",
    "**/*.scf",
    "**/*.qual",
    "**/*.phylip",
    "**/*.nexus",
    "**/*.clustal",
    "**/*.aln",
    "**/*.msf",
    "**/*.pir",
    "**/*.stockholm",
    # Standard exclusions
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite-history",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise from within except clause (handled by design)
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001", "S101"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.bzr
  | \.direnv
  | \.eggs
  | \.git
  | \.git-rewrite-history
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.pants\.d
  | \.pytype
  | \.ruff_cache
  | \.svn
  | \.tox
  | \.venv
  | __pypackages__
  | _build
  | buck-out
  | build
  | dist
  | node_modules
  | venv
  | .*\.(fasta|fa|fastq|fq|vcf|gff|gff3|gtf|bed|sam|bam|bcf|wig|bigwig|bigbed|2bit|gbk|gb|genbank|embl|sff|ab1|scf|qual|phylip|nexus|clustal|aln|msf|pir|stockholm)$
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.9"
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "pysam.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "examples.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# Codespell configuration
[tool.codespell]
count = true
quiet-level = 3
skip = './tests/,.venv/,./docs/_build/,./build/,./dist/,**/*.fasta,**/*.fa,**/*.fastq,**/*.fq,**/*.vcf,**/*.gff,**/*.gff3,**/*.gtf,**/*.bed'

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra -q --strict-markers --strict-config
    -n 2
    --color=yes
"""
testpaths = ["tests"]
pythonpath = ["src"]
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "pipeline: marks tests that require pipeline tools",
    "docker: marks tests that require Docker environment",
    "nextflow: marks tests that require Nextflow workflows",
    "asyncio: marks tests as async",
    "unit: marks tests as unit tests",
    "ci: marks tests as continuous integration tests",
    "lightweight: marks tests as lightweight and fast",
    "smoke: marks tests as ultra-minimal smoke tests for CI/CD - MUST always pass",
    "docker_integration: marks tests as Docker integration tests - can fail in pre-release",
    # Environment-specific markers
    "local_python: Local development tests - Python environment only",
    "local_nextflow: Local development tests - includes Nextflow workflows",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist", ".venv", "__pycache__"]
skips = ["B404", "B607", "B603"]  # Skip subprocess imports and calls (needed for bioinformatics tools)

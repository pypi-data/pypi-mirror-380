# This Python file uses the following encoding: utf-8
#############################################################################
##
## Copyright (C) 2020 The Qt Company Ltd.
## Contact: https://www.qt.io/licensing/
##
## This file is part of Qt for Python.
##
## $QT_BEGIN_LICENSE:LGPL$
## Commercial License Usage
## Licensees holding valid commercial Qt licenses may use this file in
## accordance with the commercial license agreement provided with the
## Software or, alternatively, in accordance with the terms contained in
## a written agreement between you and The Qt Company. For licensing terms
## and conditions see https://www.qt.io/terms-conditions. For further
## information use the contact form at https://www.qt.io/contact-us.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 3 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL3 included in the
## packaging of this file. Please review the following information to
## ensure the GNU Lesser General Public License version 3 requirements
## will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
##
## GNU General Public License Usage
## Alternatively, this file may be used under the terms of the GNU
## General Public License version 2.0 or (at your option) the GNU General
## Public license version 3 or any later version approved by the KDE Free
## Qt Foundation. The licenses are as published by the Free Software
## Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
## included in the packaging of this file. Please review the following
## information to ensure the GNU General Public License requirements will
## be met: https://www.gnu.org/licenses/gpl-2.0.html and
## https://www.gnu.org/licenses/gpl-3.0.html.
##
## $QT_END_LICENSE$
##
#############################################################################

"""
This file contains the exact signatures for all functions in module
PySide2.Tessng, except for defaults which are replaced by "...".
"""

class Object(object): pass

import shiboken2 as Shiboken
Shiboken.Object = Object

import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtWidgets

class ChangeDirection(object):
    kLeft: Tessng.ChangeDirection # value = Tessng.ChangeDirection.kLeft
    kNormal: Tessng.ChangeDirection # value = Tessng.ChangeDirection.kNormal
    kRight: Tessng.ChangeDirection # value = Tessng.ChangeDirection.kRight
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.ChangeDirection' objects>
    values: dict # value = {'kNormal': Tessng.ChangeDirection.kNormal, 'kLeft': Tessng.ChangeDirection.kLeft, 'kRight': Tessng.ChangeDirection.kRight}
    kNormal                  : ChangeDirection = ... # 0x0
    kLeft                    : ChangeDirection = ... # 0x1
    kRight                   : ChangeDirection = ... # 0x2


class CustomerNet(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterLinkVertexMove(self, pILink:Tessng.ILink, vertexIndex:int, pressPoint:PySide2.QtCore.QPointF, releasePoint:PySide2.QtCore.QPointF) -> None: ...
    def afterLoadNet(self) -> None: ...
    def afterViewKeyPressEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushColor(self, connAreaId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def curvatureMinDist(self, itemType:int, itemId:int, minDist:float) -> bool: ...
    def curvaturePrecision(self, itemType:int, itemId:int, extend1:float, extend2:float, precision:float) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def isPermitForCustDraw(self) -> bool: ...
    def labelNameAndFont(self, itemType:int, itemId:int, outPropName:int, outFontSize:float) -> None: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushColor(self, linkId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def netFileSuffix(self, suffix:str) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintLaneObject(self, pILaneObj:Tessng.ILaneObject, painter:PySide2.QtGui.QPainter) -> bool: ...


class CustomerSimulator(Shiboken.Object):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterDistriRouting(self, pIVehicle:Tessng.IVehicle, pIDeciPoint:Tessng.IDecisionPoint, pIRouting:Tessng.IRouting) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterPause(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStep(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeCalcLampColor(self, keepOn:bool) -> bool: ...
    def beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, keepOn:bool) -> None: ...
    def beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextPoint(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, keepOn:bool) -> None: ...
    def beforeParking(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeStart(self, keepOn:bool) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def busArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int) -> None: ...
    def busOnArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine) -> None: ...
    def busOnLeaving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int, passengerCount:int) -> None: ...
    @typing.overload
    def calcAcce(self, pIVehicle:Tessng.IVehicle, acce:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, dist:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, dist:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def calcDynaDispatchParameters(self) -> typing.List: ...
    def calcDynaFlowRatioParameters(self) -> typing.List: ...
    def calcDynaSignalContralParameters(self) -> typing.List: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle) -> typing.List: ...
    @typing.overload
    def calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, inOutLimitedSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def calcSimuConfig(self, config:Tessng.Online.SimuConfig) -> bool: ...
    @typing.overload
    def calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, outSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def candidateLaneConnector(self, pIVehicle:Tessng.IVehicle, pCurrLaneConnector:Tessng.ILaneConnector) -> Tessng.ILaneConnector: ...
    def candidateLaneConnectors(self, pIVehicle:Tessng.IVehicle, lInLC:typing.Sequence) -> typing.List: ...
    def checkIfErrorForSelfOrOthers(self, pIVehicle:Tessng.IVehicle) -> Tessng.IVehicle: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isPassbyEventZone(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def leaveForNextLaneObj(self, pIVehicle:Tessng.IVehicle, pCurrLaneObj:Tessng.ILaneObject, pNextLaneObj:Tessng.ILaneObject) -> None: ...
    def leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, s:float) -> bool: ...
    def nextPoint(self, pIVehicle:Tessng.IVehicle, bResult:bool) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, inOutRotation:float) -> bool: ...
    def reCalcAngle(self, pIVehicle:Tessng.IVehicle, outAngle:float) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    @typing.overload
    def reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, inOutDesirSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reCheckIfError(self, pIVehicle:Tessng.IVehicle, bError:bool) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    @typing.overload
    def reSetAcce(self, pIVehicle:Tessng.IVehicle, inOutAcce:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetChangeLaneFreelyParam(self, pIVehicle:Tessng.IVehicle, safeTime:int, ultimateDist:float, targetRParam:float) -> bool: ...
    @typing.overload
    def reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:float, s0:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, inOutSafeInterval:float, inOutSafeDistance:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetFollowingType(self, pIVehicle:Tessng.IVehicle, outTypeValue:int) -> bool: ...
    def reSetSimuResultDir(self, inOutResultDir:str) -> bool: ...
    @typing.overload
    def reSetSpeed(self, pIVehicle:Tessng.IVehicle, inOutSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def recentTimeOfSpeedAndPos(self, timeInterval:int) -> bool: ...
    def recoveredSnapshot(self) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def signalPhaseOnPeriodBegin(self, pIPhase:Tessng.ISignalPhase) -> None: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def updateOnlineCmds(self, ts:int, simuTime:int) -> None: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class GraphicsItemPropName(object):
    Id: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Id
    Name: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Name
    None_: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.None_
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.GraphicsItemPropName' objects>
    values: dict # value = {'None_': Tessng.GraphicsItemPropName.None_, 'Id': Tessng.GraphicsItemPropName.Id, 'Name': Tessng.GraphicsItemPropName.Name}
    None_                    : GraphicsItemPropName = ... # 0x0
    Id                       : GraphicsItemPropName = ... # 0x1
    Name                     : GraphicsItemPropName = ... # 0x2


class GuiInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def aboutMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def actionBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionCalcDistance(self) -> PySide2.QtWidgets.QAction: ...
    def actionChangeLaneParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionClose(self) -> PySide2.QtWidgets.QAction: ...
    def actionCloseAll(self) -> PySide2.QtWidgets.QAction: ...
    def actionConfigInteractionParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionCrossWalk(self) -> PySide2.QtWidgets.QAction: ...
    def actionDispConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionDrivInfoCollecter(self) -> PySide2.QtWidgets.QAction: ...
    def actionEllipsePdArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionEvalPubtrans(self) -> PySide2.QtWidgets.QAction: ...
    def actionExit(self) -> PySide2.QtWidgets.QAction: ...
    def actionFanShapePdArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionInteractionSetting(self) -> PySide2.QtWidgets.QAction: ...
    def actionLayer(self) -> PySide2.QtWidgets.QAction: ...
    def actionNewFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionNullGMapTool(self) -> PySide2.QtWidgets.QAction: ...
    def actionOpenFile(self) -> PySide2.QtWidgets.QAction: ...
    def actionPan(self) -> PySide2.QtWidgets.QAction: ...
    def actionPause(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianComposition(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianDecisionPoint(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianGenerator(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianModelParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianPath(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianPathEndPoint(self) -> PySide2.QtWidgets.QAction: ...
    def actionPedestrianType(self) -> PySide2.QtWidgets.QAction: ...
    def actionPluginManager(self) -> PySide2.QtWidgets.QAction: ...
    def actionPolygonArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionQueueCounter(self) -> PySide2.QtWidgets.QAction: ...
    def actionQueueRegionArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionRectPdArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionRun(self) -> PySide2.QtWidgets.QAction: ...
    def actionSave(self) -> PySide2.QtWidgets.QAction: ...
    def actionSaveOther(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusLine(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGBusStation(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGConnector(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGDeciPoint(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectAllGLink(self) -> PySide2.QtWidgets.QAction: ...
    def actionSelectRectangle(self) -> PySide2.QtWidgets.QAction: ...
    def actionSetInteractionRelationship(self) -> PySide2.QtWidgets.QAction: ...
    def actionSideWalk(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalGroup(self) -> PySide2.QtWidgets.QAction: ...
    def actionSignalLamp(self) -> PySide2.QtWidgets.QAction: ...
    def actionSimuConfig(self) -> PySide2.QtWidgets.QAction: ...
    def actionStop(self) -> PySide2.QtWidgets.QAction: ...
    def actionTracingParam(self) -> PySide2.QtWidgets.QAction: ...
    def actionTravelDetector(self) -> PySide2.QtWidgets.QAction: ...
    def actionTrianglePdArea(self) -> PySide2.QtWidgets.QAction: ...
    def actionTriggered(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleComposition(self) -> PySide2.QtWidgets.QAction: ...
    def actionVehicleType(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomFullExtent(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomIn(self) -> PySide2.QtWidgets.QAction: ...
    def actionZoomOut(self) -> PySide2.QtWidgets.QAction: ...
    def addDockWidgetToMainWindow(self, area:PySide2.QtCore.Qt.DockWidgetArea, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def addToolBar(self, name:str) -> PySide2.QtWidgets.QToolBar: ...
    def addWidgetToToolBar(self, pWidget:PySide2.QtWidgets.QWidget) -> PySide2.QtWidgets.QAction: ...
    def certificatePlugin(self, pluginName:str) -> bool: ...
    @typing.overload
    def checkToolButtons(self, checked:bool, pException:PySide2.QtWidgets.QAction) -> None: ...
    def drawGrid(self) -> None: ...
    def editorMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def execCustomMessageBox(self, title:str, text:str, buttons:PySide2.QtWidgets.QMessageBox.StandardButtons, parent:typing.Optional[PySide2.QtWidgets.QWidget]=...) -> int: ...
    def fileMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def fileToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def insertToolBar(self, before:PySide2.QtWidgets.QToolBar, name:str) -> PySide2.QtWidgets.QToolBar: ...
    def loadPlugins(self) -> None: ...
    def mainTabWidget(self) -> PySide2.QtWidgets.QTabWidget: ...
    def mainWindow(self) -> PySide2.QtWidgets.QMainWindow: ...
    def menu3D(self) -> PySide2.QtWidgets.QMenu: ...
    def menuBar(self) -> PySide2.QtWidgets.QMenuBar: ...
    def netMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def netToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def operToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def pedestrianToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def pluginMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def releasePlugins(self) -> None: ...
    def removeDockWidgetFromMainWindow(self, dockwidget:PySide2.QtWidgets.QDockWidget) -> None: ...
    def routingMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def screenScaling(self) -> float: ...
    def setActionTriggered(self, pAction:PySide2.QtWidgets.QAction) -> None: ...
    def simuMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def simuToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def statusBar(self) -> PySide2.QtWidgets.QStatusBar: ...
    def systemToolBar(self) -> PySide2.QtWidgets.QToolBar: ...
    def viewMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def winHeight(self) -> float: ...
    def winWidth(self) -> float: ...
    def winX(self) -> float: ...
    def winY(self) -> float: ...


class IAccidentZone(Shiboken.Object):

    def __init__(self) -> None: ...

    def accidentZoneIntervals(self) -> typing.List: ...
    def addAccidentZoneInterval(self, param:Tessng.Online.DynaAccidentZoneIntervalParam) -> Tessng.IAccidentZoneInterval: ...
    def controlLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def findAccidentZoneIntervalById(self, accidentZoneIntervalId:int) -> Tessng.IAccidentZoneInterval: ...
    def findAccidentZoneIntervalByStartTime(self, startTime:int) -> Tessng.IAccidentZoneInterval: ...
    def id(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def limitedSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def location(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def removeAccidentZoneInterval(self, accidentZoneIntervalId:int) -> None: ...
    def roadId(self) -> int: ...
    def roadType(self) -> str: ...
    def section(self) -> Tessng.ISection: ...
    def updateAccidentZoneInterval(self, param:Tessng.Online.DynaAccidentZoneIntervalParam) -> bool: ...
    def zoneLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IAccidentZoneInterval(Shiboken.Object):

    def __init__(self) -> None: ...

    def accidentZoneId(self) -> int: ...
    def controlLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def endTime(self) -> int: ...
    def intervalId(self) -> int: ...
    def laneNumbers(self) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitedSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def location(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def startTime(self) -> int: ...


class IBusLine(Shiboken.Object):

    def __init__(self) -> None: ...

    def desirSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def dispatchEndTime(self) -> int: ...
    def dispatchFreq(self) -> int: ...
    def dispatchStartTime(self) -> int: ...
    def id(self) -> int: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def links(self) -> typing.List: ...
    def name(self) -> str: ...
    def passCountAtStartTime(self) -> int: ...
    def setDesirSpeed(self, desirSpeed:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setDispatchEndTime(self, endTime:int) -> None: ...
    def setDispatchFreq(self, freq:int) -> None: ...
    def setDispatchStartTime(self, startTime:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setPassCountAtStartTime(self, count:int) -> None: ...
    def stationLines(self) -> typing.List: ...
    def stations(self) -> typing.List: ...


class IBusStation(Shiboken.Object):

    def __init__(self) -> None: ...

    def directionLine(self) -> PySide2.QtCore.QLineF: ...
    def distance(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneNumber(self) -> int: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setDistToStart(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setLength(self, length:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setName(self, name:str) -> None: ...
    def setType(self, type:int) -> None: ...
    def stationType(self) -> int: ...
    def x(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def y(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IBusStationLine(Shiboken.Object):

    def __init__(self) -> None: ...

    def busParkingTime(self) -> int: ...
    def getOnTimePerPerson(self) -> float: ...
    def getOutPercent(self) -> float: ...
    def getOutTimePerPerson(self) -> float: ...
    def id(self) -> int: ...
    def lineId(self) -> int: ...
    def setBusParkingTime(self, time:int) -> None: ...
    def setGetOnTimePerPerson(self, time:float) -> None: ...
    def setGetOutPercent(self, percent:float) -> None: ...
    def setGetOutTimePerPerson(self, time:float) -> None: ...
    def stationId(self) -> int: ...


class IConnector(Tessng.ISection):

    def __init__(self) -> None: ...

    def fromLink(self) -> Tessng.ILink: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def laneConnectors(self) -> typing.List: ...
    def laneObjects(self) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def minSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def sectionId(self) -> int: ...
    def setLaneConnectorOtherAtrrs(self, lAttrs:typing.Sequence) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def toLink(self) -> Tessng.ILink: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def z(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IConnectorArea(Shiboken.Object):

    def __init__(self) -> None: ...

    def allConnector(self) -> typing.List: ...
    def centerPoint(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def id(self) -> int: ...
    def setWorkerKey(self, key:int) -> None: ...
    def workerKey(self) -> int: ...


class ICrosswalkSignalLamp(Tessng.ISignalLamp, PySide2.QtWidgets.QGraphicsPathItem):

    def __init__(self, parent:PySide2.QtWidgets.QGraphicsItem) -> None: ...

    def getICrossWalk(self) -> Tessng.IPedestrianCrossWalkRegion: ...


class IDecisionPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def routingFLowRatios(self) -> typing.List: ...
    def routings(self) -> typing.List: ...
    def setDynaModified(self, bModified:bool) -> None: ...


class IDispatchPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def addDispatchInterval(self, vehiCompId:int, interval:int, vehiCount:int) -> int: ...
    def dispatchIntervals(self) -> typing.List: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def removeDispatchIntervals(self) -> None: ...
    def setDynaModified(self, bModified:bool) -> None: ...
    def updateDispatchInterval(self, departureIntervald:int, vehiCount:int, vehiCompId:int=...) -> bool: ...


class IGuidArrow(Shiboken.Object):

    def __init__(self) -> None: ...

    def arrowType(self) -> Tessng.Online.GuideArrowType: ...
    def distToTerminal(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...


class IJunction(Shiboken.Object):

    def __init__(self) -> None: ...

    def getAllTurningInfo(self) -> typing.List: ...
    def getId(self) -> int: ...
    def getJunctionConnectors(self) -> typing.List: ...
    def getJunctionLinks(self) -> typing.List: ...
    def getTurningInfo(self, turningId:int) -> Tessng.Online.Junction.TurnningBaseInfo: ...
    def name(self) -> str: ...
    def setName(self, strName:str) -> None: ...


class ILane(Tessng.ILaneObject):

    def __init__(self) -> None: ...

    def actionType(self) -> str: ...
    def addLimitChange(self, laneLimitChange:Tessng._LaneLimitChange) -> Tessng._LaneLimitChange: ...
    def centerBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def centerBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def delLimitChange(self, limitChangeID:int) -> bool: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def emergencyLane(self) -> bool: ...
    def fromLaneConnectors(self) -> typing.List: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitChanges(self) -> typing.List: ...
    def link(self) -> Tessng.ILink: ...
    def number(self) -> int: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setEmergencyLane(self, value:bool) -> None: ...
    def setLaneType(self, type:str) -> None: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLaneConnectors(self) -> typing.List: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def updateLimitChange(self, laneLimitChange:Tessng._LaneLimitChange) -> bool: ...
    def width(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class ILaneConnector(Tessng.ILaneObject):

    def __init__(self) -> None: ...

    def centerBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def centerBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def connector(self) -> Tessng.IConnector: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromLane(self) -> Tessng.ILane: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLane(self) -> Tessng.ILane: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...


class ILaneObject(Shiboken.Object):

    def __init__(self) -> None: ...

    def castToLane(self) -> Tessng.ILane: ...
    def castToLaneConnector(self) -> Tessng.ILaneConnector: ...
    def centerBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def centerBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def distToStartPointWithSegmIndex(self, p:PySide2.QtCore.QPointF, segmIndex:int=..., bOnCentLine:bool=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def isLane(self) -> bool: ...
    def leftBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def rightBreak3DsPartly(self, fromPoint:PySide2.QtCore.QPointF, toPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def section(self) -> Tessng.ISection: ...
    def setOtherAttr(self, attr:typing.Dict) -> None: ...
    def toLaneObject(self, id:int=...) -> Tessng.ILaneObject: ...


class ILimitedZone(Shiboken.Object):

    def __init__(self) -> None: ...

    def duration(self) -> int: ...
    def id(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def limitSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def location(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def sectionId(self) -> int: ...
    def sectionName(self) -> str: ...
    def sectionType(self) -> str: ...
    def zoneLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class ILink(Tessng.ISection):

    def __init__(self) -> None: ...

    def centerBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def centerBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def distToStartPoint(self, p:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromConnectors(self) -> typing.List: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def getPointAndIndexByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, outIndex:int, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def getPointByDist(self, dist:float, outPoint:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def laneCount(self) -> int: ...
    def laneObjects(self) -> typing.List: ...
    def lanes(self) -> typing.List: ...
    def leftBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def leftBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def linkType(self) -> str: ...
    def minSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def otherAttr(self) -> typing.Dict: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def rightBreakPoint3Ds(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def rightBreakPoints(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def sectionId(self) -> int: ...
    def setLaneOtherAtrrs(self, lAttrs:typing.Sequence) -> None: ...
    def setLaneTypes(self, lType:typing.Sequence) -> None: ...
    def setLimitSpeed(self, speed:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setMinSpeed(self, speed:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def setType(self, type:str) -> None: ...
    def toConnectors(self) -> typing.List: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def width(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def z(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IObstacleRegion(Shiboken.Object):

    def __init__(self) -> None: ...

    def isObstacle(self) -> bool: ...
    def setObstacle(self, b:bool) -> None: ...


class IParkingDecisionPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def parkDisInfoList(self) -> typing.List: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def routings(self) -> typing.List: ...
    def updateParkDisInfo(self, tollDisInfoList:typing.Sequence) -> bool: ...


class IParkingRegion(Shiboken.Object):

    def __init__(self) -> None: ...

    def dynaParkingRegion(self) -> Tessng.Online.ParkingLot.DynaParkingRegion: ...
    def id(self) -> int: ...
    def name(self) -> str: ...
    def parkingStalls(self) -> typing.List: ...
    def setName(self, name:str) -> None: ...


class IParkingRouting(Shiboken.Object):

    def __init__(self) -> None: ...

    def calcuLength(self) -> float: ...
    def contain(self, pRoad:Tessng.ISection) -> bool: ...
    def getLinks(self) -> typing.List: ...
    def id(self) -> int: ...
    def nextRoad(self, pRoad:Tessng.ISection) -> Tessng.ISection: ...
    def parkingDeciPointId(self) -> int: ...
    def parkingRegionId(self) -> int: ...


class IParkingStall(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def isPreUsed(self) -> bool: ...
    def isUsed(self) -> bool: ...
    def parkingRegion(self) -> Tessng.IParkingRegion: ...
    def parkingRegionId(self) -> int: ...
    def stallType(self) -> int: ...


class IPassengerRegion(Shiboken.Object):

    def __init__(self) -> None: ...

    def isAlightingArea(self) -> bool: ...
    def isBoardingArea(self) -> bool: ...
    def setIsAlightingArea(self, b:bool) -> None: ...
    def setIsBoardingArea(self, b:bool) -> None: ...


class IPedestrian(Shiboken.Object):

    def __init__(self) -> None: ...

    def getAcce(self) -> PySide2.QtGui.QVector2D: ...
    def getAngle(self) -> float: ...
    def getColor(self) -> str: ...
    def getDesiredSpeed(self) -> float: ...
    def getDirection(self) -> PySide2.QtGui.QVector2D: ...
    def getElevation(self) -> float: ...
    def getEuler(self) -> PySide2.QtGui.QVector3D: ...
    def getId(self) -> int: ...
    def getMaxAcce(self) -> float: ...
    def getMaxSpeed(self) -> float: ...
    def getPedestrianTypeId(self) -> int: ...
    def getPos(self) -> PySide2.QtCore.QPointF: ...
    def getRadius(self) -> float: ...
    def getRegion(self) -> Tessng.IPedestrianRegion: ...
    def getSpeed(self) -> PySide2.QtGui.QVector2D: ...
    def getSpeedEuler(self) -> PySide2.QtGui.QVector3D: ...
    def getWallFDirection(self) -> PySide2.QtGui.QVector2D: ...
    def getWeight(self) -> float: ...
    def stop(self) -> None: ...


class IPedestrianCrossWalkRegion(PySide2.QtWidgets.QGraphicsPathItem, Tessng.IPedestrianRegion):

    def __init__(self) -> None: ...

    def getAngle(self) -> float: ...
    def getEndControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getLeftControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getLocalUnitDirectionFromStartToEnd(self) -> PySide2.QtGui.QVector2D: ...
    def getNegativeDirectionSignalLamp(self) -> Tessng.ICrosswalkSignalLamp: ...
    def getPositiveDirectionSignalLamp(self) -> Tessng.ICrosswalkSignalLamp: ...
    def getRedLightSpeedFactor(self) -> float: ...
    def getRightControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getSceneLine(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QLineF: ...
    def getStartControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getUnitDirectionFromStartToEnd(self) -> PySide2.QtGui.QVector2D: ...
    def getWidth(self) -> float: ...
    def isPositiveTrafficLightAdded(self) -> bool: ...
    def isReverseTrafficLightAdded(self) -> bool: ...
    def setAngle(self, angle:float) -> None: ...
    def setRedLightSpeedFactor(self, factor:float) -> None: ...
    def setWidth(self, width:float) -> None: ...


class IPedestrianEllipseRegion(PySide2.QtWidgets.QGraphicsEllipseItem, Tessng.IPedestrianRegion, Tessng.IObstacleRegion, Tessng.IPassengerRegion):

    def __init__(self) -> None: ...


class IPedestrianFanShapeRegion(PySide2.QtWidgets.QGraphicsPathItem, Tessng.IPedestrianRegion, Tessng.IObstacleRegion, Tessng.IPassengerRegion):

    def __init__(self) -> None: ...

    def getInnerRadius(self) -> float: ...
    def getOuterRadius(self) -> float: ...
    def getStartAngle(self) -> float: ...
    def getSweepAngle(self) -> float: ...


class IPedestrianPath(Shiboken.Object):

    def __init__(self) -> None: ...

    def getId(self) -> int: ...
    def getPathEndPoint(self) -> Tessng.IPedestrianPathPoint: ...
    def getPathMiddlePoints(self) -> typing.List: ...
    def getPathStartPoint(self) -> Tessng.IPedestrianPathPoint: ...
    def isLocalPath(self) -> bool: ...


class IPedestrianPathPoint(PySide2.QtWidgets.QGraphicsPathItem):

    def __init__(self, parent:typing.Optional[PySide2.QtWidgets.QGraphicsItem]=...) -> None: ...

    def getId(self) -> int: ...
    def getRadius(self) -> float: ...
    def getScenePos(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...


class IPedestrianPathRegionBase(Shiboken.Object):

    def __init__(self) -> None: ...

    def getGType(self) -> int: ...
    def getId(self) -> int: ...
    def getName(self) -> str: ...
    def getPosition(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def getRegionColor(self) -> PySide2.QtGui.QColor: ...
    def setName(self, name:str) -> None: ...
    def setPosition(self, scenePos:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setRegionColor(self, color:PySide2.QtGui.QColor) -> None: ...


class IPedestrianPolygonRegion(PySide2.QtWidgets.QGraphicsPolygonItem, Tessng.IPedestrianRegion, Tessng.IObstacleRegion, Tessng.IPassengerRegion):

    def __init__(self) -> None: ...


class IPedestrianRectRegion(PySide2.QtWidgets.QGraphicsRectItem, Tessng.IPedestrianRegion, Tessng.IObstacleRegion, Tessng.IPassengerRegion):

    def __init__(self) -> None: ...


class IPedestrianRegion(Tessng.IPedestrianPathRegionBase):

    def __init__(self) -> None: ...

    def getElevation(self) -> float: ...
    def getExpectSpeedFactor(self) -> float: ...
    def getLayerId(self) -> int: ...
    def getPolygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setElevation(self, elevation:float) -> None: ...
    def setExpectSpeedFactor(self, val:float) -> None: ...
    def setLayerId(self, id:int) -> None: ...


class IPedestrianSideWalkRegion(PySide2.QtWidgets.QGraphicsPathItem, Tessng.IPedestrianRegion):

    def __init__(self) -> None: ...

    def getCandidateVetexs(self) -> typing.List: ...
    def getControl1Vetexs(self) -> typing.List: ...
    def getControl2Vetexs(self) -> typing.List: ...
    def getVetexs(self) -> typing.List: ...
    def getWidth(self) -> float: ...
    def insertVetex(self, pos:PySide2.QtCore.QPointF, index:int) -> None: ...
    def removeVetex(self, index:int) -> None: ...
    def setWidth(self, width:float) -> None: ...


class IPedestrianStairRegion(PySide2.QtWidgets.QGraphicsPathItem, Tessng.IPedestrianPathRegionBase):

    def __init__(self, parent:typing.Optional[PySide2.QtWidgets.QGraphicsItem]=...) -> None: ...

    def getEndConnectionAreaControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getEndConnectionAreaLength(self) -> float: ...
    def getEndControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getEndLayerId(self) -> int: ...
    def getEndPoint(self) -> PySide2.QtCore.QPointF: ...
    def getEndRegionCenterPoint(self) -> PySide2.QtCore.QPointF: ...
    def getEndSceneRegion(self) -> PySide2.QtGui.QPainterPath: ...
    def getFullQueueregion(self) -> PySide2.QtGui.QPainterPath: ...
    def getHeadroom(self) -> float: ...
    def getLeftControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getMainQueuePolygon(self) -> PySide2.QtGui.QPolygonF: ...
    def getMainQueueRegion(self) -> PySide2.QtGui.QPainterPath: ...
    def getRightControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getStairType(self) -> Tessng.StairType: ...
    def getStartConnectionAreaControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getStartConnectionAreaLength(self) -> float: ...
    def getStartControlPoint(self) -> PySide2.QtWidgets.QGraphicsEllipseItem: ...
    def getStartLayerId(self) -> int: ...
    def getStartPoint(self) -> PySide2.QtCore.QPointF: ...
    def getStartRegionCenterPoint(self) -> PySide2.QtCore.QPointF: ...
    def getStartSceneRegion(self) -> PySide2.QtGui.QPainterPath: ...
    def getTransmissionSpeed(self) -> float: ...
    def getWidth(self) -> float: ...
    def setEndLayerId(self, id:int) -> None: ...
    def setHeadroom(self, headroom:float) -> None: ...
    def setStairType(self, type:Tessng.StairType) -> None: ...
    def setStartLayerId(self, id:int) -> None: ...
    def setTransmissionSpeed(self, speed:float) -> None: ...
    def setWidth(self, width:float) -> None: ...


class IPedestrianTriangleRegion(PySide2.QtWidgets.QGraphicsPolygonItem, Tessng.IPedestrianRegion, Tessng.IObstacleRegion, Tessng.IPassengerRegion):

    def __init__(self) -> None: ...


class IPedestrianType(Shiboken.Object):
    desiredSpeed: getset_descriptor # value = <attribute 'desiredSpeed' of 'Tessng.IPedestrianType' objects>
    desiredSpeedStandardDeviation: getset_descriptor # value = <attribute 'desiredSpeedStandardDeviation' of 'Tessng.IPedestrianType' objects>
    pedestrianTypeCode: getset_descriptor # value = <attribute 'pedestrianTypeCode' of 'Tessng.IPedestrianType' objects>
    pedestrianTypeName: getset_descriptor # value = <attribute 'pedestrianTypeName' of 'Tessng.IPedestrianType' objects>
    radius: getset_descriptor # value = <attribute 'radius' of 'Tessng.IPedestrianType' objects>
    radiusStandardDeviation: getset_descriptor # value = <attribute 'radiusStandardDeviation' of 'Tessng.IPedestrianType' objects>
    weight: getset_descriptor # value = <attribute 'weight' of 'Tessng.IPedestrianType' objects>
    weightStandardDeviation: getset_descriptor # value = <attribute 'weightStandardDeviation' of 'Tessng.IPedestrianType' objects>

    @typing.overload
    def __init__(self, IPedestrianType:Tessng.IPedestrianType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class IReconstruction(Shiboken.Object):

    def __init__(self) -> None: ...

    def borrowedNum(self) -> int: ...
    def createCPUTime(self) -> int: ...
    def duration(self) -> int: ...
    def dynaReconstructionParam(self) -> Tessng.Online.DynaReconstructionParam: ...
    def id(self) -> int: ...
    def limitedZoneId(self) -> int: ...
    def passagewayLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def passagewayLimitedSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def roadWorkZoneId(self) -> int: ...


class IReduceSpeedArea(Shiboken.Object):

    def __init__(self) -> None: ...

    def addReduceSpeedInterval(self, param:Tessng.Online.DynaReduceSpeedIntervalParam) -> Tessng.IReduceSpeedInterval: ...
    def areaLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def findReduceSpeedIntervalById(self, id:int) -> Tessng.IReduceSpeedInterval: ...
    def findReduceSpeedIntervalByStartTime(self, startTime:int) -> Tessng.IReduceSpeedInterval: ...
    def id(self) -> int: ...
    def laneNumber(self) -> int: ...
    def location(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def reduceSpeedIntervals(self) -> typing.List: ...
    def removeReduceSpeedInterval(self, id:int) -> None: ...
    def sectionId(self) -> int: ...
    def toLaneNumber(self) -> int: ...
    def updateReduceSpeedInterval(self, param:Tessng.Online.DynaReduceSpeedIntervalParam) -> bool: ...


class IReduceSpeedInterval(Shiboken.Object):

    def __init__(self) -> None: ...

    def addReduceSpeedVehiType(self, param:Tessng.Online.DynaReduceSpeedVehiTypeParam) -> Tessng.IReduceSpeedVehiType: ...
    def findReduceSpeedVehiTypeByCode(self, vehicleTypeCode:int) -> Tessng.IReduceSpeedVehiType: ...
    def findReduceSpeedVehiTypeById(self, id:int) -> Tessng.IReduceSpeedVehiType: ...
    def id(self) -> int: ...
    def intervalEndTime(self) -> int: ...
    def intervalStartTime(self) -> int: ...
    def reduceSpeedAreaId(self) -> int: ...
    def reduceSpeedVehiTypes(self) -> typing.List: ...
    def removeReduceSpeedVehiType(self, id:int) -> None: ...
    def updateReduceSpeedVehiType(self, param:Tessng.Online.DynaReduceSpeedVehiTypeParam) -> bool: ...


class IReduceSpeedVehiType(Shiboken.Object):

    def __init__(self) -> None: ...

    def averageSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def id(self) -> int: ...
    def intervalId(self) -> int: ...
    def reduceSpeedAreaId(self) -> int: ...
    def speedStandardDeviation(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiTypeCode(self) -> int: ...


class IRoadNet(Shiboken.Object):

    def __init__(self) -> None: ...

    def bkgUrl(self) -> str: ...
    def centerPoint(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def explain(self) -> str: ...
    def id(self) -> int: ...
    def netName(self) -> str: ...
    def otherAttrs(self) -> typing.Dict: ...
    def type(self) -> str: ...
    def url(self) -> str: ...


class IRoadWorkZone(Shiboken.Object):

    def __init__(self) -> None: ...

    def createCPUTime(self) -> int: ...
    def downTerminationLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def downTransitionLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def duration(self) -> int: ...
    def id(self) -> int: ...
    def isBorrowed(self) -> bool: ...
    def laneObjectIds(self) -> typing.List: ...
    def laneObjects(self) -> typing.List: ...
    def limitSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def location(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def logoIndexs(self) -> typing.List: ...
    def name(self) -> str: ...
    def sectionId(self) -> int: ...
    def sectionName(self) -> str: ...
    def sectionType(self) -> str: ...
    def setBorrowed(self, b:bool) -> None: ...
    def upBufferLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def upCautionLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def upTransitionLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def zoneLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IRouting(Shiboken.Object):

    def __init__(self) -> None: ...

    def calcuLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def contain(self, pRoad:Tessng.ISection) -> bool: ...
    def deciPointId(self) -> int: ...
    def getLinks(self) -> typing.List: ...
    def id(self) -> int: ...
    def nextRoad(self, pRoad:Tessng.ISection) -> Tessng.ISection: ...


class ISection(Shiboken.Object):

    def __init__(self) -> None: ...

    def castToConnector(self) -> Tessng.IConnector: ...
    def castToLink(self) -> Tessng.ILink: ...
    def fromSection(self, id:int=...) -> Tessng.ISection: ...
    def fromWorkerKey(self) -> int: ...
    def gtype(self) -> int: ...
    def id(self) -> int: ...
    def isLink(self) -> bool: ...
    def laneObjects(self) -> typing.List: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def sectionId(self) -> int: ...
    def setFromWorkerKey(self, key:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setOtherAttr(self, otherAttr:typing.Dict) -> None: ...
    def setWorkerKey(self, key:int) -> None: ...
    def toSection(self, id:int=...) -> Tessng.ISection: ...
    def v3z(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def workerKey(self) -> int: ...


class ISignalController(Shiboken.Object):

    def __init__(self) -> None: ...

    def IPlans(self) -> typing.List: ...
    def addPlan(self, plan:Tessng.ISignalPlan) -> None: ...
    def id(self) -> int: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def removePlan(self, plan:Tessng.ISignalPlan) -> None: ...
    def setName(self, name:str) -> None: ...


class ISignalGroup(Shiboken.Object):

    def __init__(self) -> None: ...

    def fromTime(self) -> int: ...
    def groupName(self) -> str: ...
    def id(self) -> int: ...
    def periodTime(self) -> int: ...
    def phases(self) -> typing.List: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setPeriodTime(self, period:int) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class ISignalLamp(Shiboken.Object):

    def __init__(self) -> None: ...

    def angle(self) -> float: ...
    def color(self) -> str: ...
    def id(self) -> int: ...
    def laneObject(self) -> Tessng.ILaneObject: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setDistToStart(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setLampColor(self, colorStr:str) -> None: ...
    def setName(self, name:str) -> None: ...
    def setPhaseNumber(self, num:int) -> None: ...
    def setSignalPhase(self, pPhase:Tessng.ISignalPhase) -> None: ...
    def signalPhase(self) -> Tessng.ISignalPhase: ...
    def signalPlan(self) -> Tessng.ISignalPlan: ...


class ISignalPhase(Shiboken.Object):

    def __init__(self) -> None: ...

    def cycleTime(self) -> int: ...
    def id(self) -> int: ...
    def listColor(self) -> typing.List: ...
    def phaseColor(self) -> Tessng.Online.SignalPhaseColor: ...
    def phaseName(self) -> str: ...
    def setColorList(self, lColor:typing.Sequence) -> None: ...
    def setPhaseName(self, name:str) -> None: ...
    def signalLamps(self) -> typing.List: ...
    def signalPlan(self) -> Tessng.ISignalPlan: ...


class ISignalPlan(PySide2.QtCore.QObject):
    staticMetaObject: PySide2.QtCore.QMetaObject

    def __init__(self) -> None: ...

    def cycleTime(self) -> int: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def name(self) -> str: ...
    def phases(self) -> typing.List: ...
    def setCycleTime(self, period:int) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...
    def trafficName(self) -> str: ...


class ITollDecisionPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def link(self) -> Tessng.ILink: ...
    def name(self) -> str: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def routings(self) -> typing.List: ...
    def tollDisInfoList(self) -> typing.List: ...
    def updateTollDisInfoList(self, arg__1:typing.Sequence) -> None: ...


class ITollLane(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def dynaTollLane(self) -> Tessng.Online.TollStation.DynaTollLane: ...
    def id(self) -> int: ...
    def name(self) -> str: ...
    def setName(self, name:str) -> None: ...
    def setWorkTime(self, startTime:int, endTime:int) -> None: ...
    def tollPoints(self) -> typing.List: ...


class ITollPoint(Shiboken.Object):

    def __init__(self) -> None: ...

    def distance(self) -> float: ...
    def id(self) -> int: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, enabled:bool) -> bool: ...
    def setTimeDisId(self, timeDisId:int) -> bool: ...
    def setTollType(self, tollType:int) -> bool: ...
    def timeDisId(self) -> int: ...
    def tollLane(self) -> Tessng.ITollLane: ...
    def tollLaneId(self) -> int: ...
    def tollType(self) -> int: ...


class ITollRouting(Shiboken.Object):

    def __init__(self) -> None: ...

    def calcuLength(self) -> float: ...
    def contain(self, pRoad:Tessng.ISection) -> bool: ...
    def getLinks(self) -> typing.List: ...
    def id(self) -> int: ...
    def nextRoad(self, pRoad:Tessng.ISection) -> Tessng.ISection: ...
    def tollDeciPointId(self) -> int: ...
    def tollLaneId(self) -> int: ...


class IVehicle(Shiboken.Object):

    def __init__(self) -> None: ...

    def acce(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def alightPassengers(self, n:int) -> int: ...
    def angle(self) -> float: ...
    def availableSeatCount(self) -> int: ...
    def boardPassengers(self, n:int) -> int: ...
    def boundingPolygon(self) -> PySide2.QtGui.QPolygonF: ...
    def color(self) -> str: ...
    def currBatchNumber(self) -> int: ...
    def currSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def desirAcce(self) -> float: ...
    def desirSpeed(self) -> float: ...
    def desireDece(self) -> float: ...
    def driving(self) -> None: ...
    def dynaInfo(self) -> int: ...
    def id(self) -> int: ...
    def initLane(self, laneNumber:int, dist:float=..., speed:float=..., unit:Tessng.UnitOfMeasure=...) -> None: ...
    def initLaneConnector(self, laneNumber:int, toLaneNumber:int, dist:float=..., speed:float=..., unit:Tessng.UnitOfMeasure=...) -> None: ...
    def initSpeed(self, speed:float=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def isCommercialVehicle(self) -> bool: ...
    def isHookedUp(self) -> bool: ...
    def isStarted(self) -> bool: ...
    def jsonInfo(self) -> typing.Dict: ...
    def jsonProperty(self, propName:str) -> typing.Any: ...
    def lLaneObjectVertex(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def laneId(self) -> int: ...
    def laneObj(self) -> Tessng.ILaneObject: ...
    def length(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitMaxSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitMinSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def maxAcce(self) -> float: ...
    def maxDece(self) -> float: ...
    def maxPassengerCapacity(self) -> int: ...
    def maxSpeed(self) -> float: ...
    def name(self) -> str: ...
    def otherProperty(self, vehiOtherPropertyType:int) -> typing.Any: ...
    def passengerCount(self) -> int: ...
    def picture(self) -> PySide2.QtGui.QPicture: ...
    def pos(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def road(self) -> int: ...
    def roadId(self) -> int: ...
    def roadIsLink(self) -> bool: ...
    def roadName(self) -> str: ...
    def roadType(self) -> int: ...
    def routing(self) -> Tessng.IRouting: ...
    def section(self) -> Tessng.ISection: ...
    def segmIndex(self) -> int: ...
    def setColor(self, color:str) -> None: ...
    def setDesirAcce(self, acce:float) -> None: ...
    def setDesirSpeed(self, speed:float) -> None: ...
    def setDesireDece(self, dece:float) -> None: ...
    def setDynaInfo(self, pDynaInfo:int) -> None: ...
    def setHookedUp(self, bHookedUp:bool) -> None: ...
    def setId(self, id:int) -> None: ...
    def setIsPermitForVehicleDraw(self, bDraw:bool) -> None: ...
    def setJsonInfo(self, info:typing.Dict) -> None: ...
    def setJsonProperty(self, key:str, value:typing.Any) -> None: ...
    def setLength(self, len:float, bRestWidth:bool=..., unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setMaxAcce(self, acce:float) -> None: ...
    def setMaxDece(self, dece:float) -> None: ...
    def setMaxSpeed(self, maxSpeed:float) -> None: ...
    def setOtherProperty(self, vehiOtherPropertyType:int, value:typing.Any) -> None: ...
    def setSteps_afterCalcTracingType(self, steps:int) -> None: ...
    def setSteps_afterStep(self, steps:int) -> None: ...
    def setSteps_beforeMergingToLane(self, steps:int) -> None: ...
    def setSteps_beforeNextPoint(self, steps:int) -> None: ...
    def setSteps_beforeNextRoad(self, steps:int) -> None: ...
    def setSteps_calcAcce(self, steps:int) -> None: ...
    def setSteps_calcChangeLaneSafeDist(self, steps:int) -> None: ...
    def setSteps_calcDistToEventObj(self, steps:int) -> None: ...
    def setSteps_calcLimitedLaneNumber(self, steps:int) -> None: ...
    def setSteps_calcMaxLimitedSpeed(self, steps:int) -> None: ...
    def setSteps_calcSpeedLimitByLane(self, steps:int) -> None: ...
    def setSteps_isStopDriving(self, steps:int) -> None: ...
    def setSteps_judgeIfOnTargetLane(self, steps:int) -> None: ...
    def setSteps_leaveOffChangingTrace(self, steps:int) -> None: ...
    def setSteps_nextPoint(self, steps:int) -> None: ...
    def setSteps_reCalcAngle(self, steps:int) -> None: ...
    def setSteps_reCalcToLeftFreely(self, steps:int) -> None: ...
    def setSteps_reCalcToLeftLane(self, steps:int) -> None: ...
    def setSteps_reCalcToRightFreely(self, steps:int) -> None: ...
    def setSteps_reCalcToRightLane(self, steps:int) -> None: ...
    def setSteps_reCalcdesirSpeed(self, steps:int) -> None: ...
    def setSteps_reSetAcce(self, steps:int) -> None: ...
    def setSteps_reSetFollowingType(self, steps:int) -> None: ...
    def setSteps_reSetSpeed(self, steps:int) -> None: ...
    def setSteps_recentTimeOfSpeedAndPos(self, steps:int) -> None: ...
    def setSteps_travelOnChangingTrace(self, steps:int) -> None: ...
    def setTag(self, tag:int) -> None: ...
    def setTextTag(self, text:str) -> None: ...
    def setVehiType(self, code:int) -> None: ...
    def simuTimeOnCreate(self) -> float: ...
    def simuTimeOnStop(self) -> int: ...
    def startLink(self) -> Tessng.ILink: ...
    def startSimuTime(self) -> int: ...
    def tag(self) -> int: ...
    def textTag(self) -> str: ...
    def toLane(self) -> Tessng.ILane: ...
    def toLaneId(self) -> int: ...
    def useCache(self, bCache:bool) -> None: ...
    def v3z(self) -> float: ...
    def vehiDistFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiDistLLaneFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiDistLLaneRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiDistRLaneFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiDistRLaneRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiDistRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiHeadwayFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiHeadwaytoRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedLLaneFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedLLaneRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedRLaneFront(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedRLaneRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehiSpeedRear(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def vehicleDriving(self) -> Tessng.IVehicleDriving: ...
    def vehicleFront(self) -> Tessng.IVehicle: ...
    def vehicleLFront(self) -> Tessng.IVehicle: ...
    def vehicleLRear(self) -> Tessng.IVehicle: ...
    def vehicleRFront(self) -> Tessng.IVehicle: ...
    def vehicleRRear(self) -> Tessng.IVehicle: ...
    def vehicleRear(self) -> Tessng.IVehicle: ...
    def vehicleTypeCode(self) -> int: ...
    def vehicleTypeName(self) -> str: ...
    def width(self) -> float: ...
    def zValue(self, unit:Tessng.UnitOfMeasure=...) -> float: ...


class IVehicleDrivInfoCollector(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def angle(self) -> float: ...
    def collName(self) -> str: ...
    def connector(self) -> Tessng.IConnector: ...
    def distToStart(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def link(self) -> Tessng.ILink: ...
    def onLink(self) -> bool: ...
    def point(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistToStart(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class IVehicleDriving(Shiboken.Object):

    def __init__(self) -> None: ...

    def angle(self) -> float: ...
    def calcTraceLength(self) -> None: ...
    def changingTrace(self, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def changingTraceLength(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def currDistance(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def currDistanceInRoad(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def currDistanceInSegment(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def desirSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def differToTargetLaneNumber(self) -> int: ...
    def distToEndpoint(self, fromVehiHead:bool=..., bOnCentLine:bool=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def distToStartPoint(self, fromVehiHead:bool=..., bOnCentLine:bool=..., unit:Tessng.UnitOfMeasure=...) -> float: ...
    def euler(self, bPositive:bool=...) -> PySide2.QtGui.QVector3D: ...
    def followingType(self) -> int: ...
    def getCurrRoad(self) -> Tessng.ISection: ...
    def getCurrSignalLamp(self) -> Tessng.ISignalLamp: ...
    def getNextRoad(self) -> Tessng.ISection: ...
    def getRandomNumber(self) -> int: ...
    def getVehiDrivDistance(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def getVehicleNegotiated(self) -> Tessng.IVehicle: ...
    def initTrace(self) -> None: ...
    def isHavingDeciPointOnLink(self) -> bool: ...
    def isOnRouting(self) -> bool: ...
    def laneNumber(self) -> int: ...
    def limitMaxSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def limitMinSpeed(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def move(self, pILaneObject:Tessng.ILaneObject, dist:float, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def moveToLane(self, pLane:Tessng.ILane, dist:float, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def moveToLaneConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def nextPoint(self) -> bool: ...
    def routing(self) -> Tessng.IRouting: ...
    def safeTimeInterval(self) -> float: ...
    def setAngle(self, angle:float) -> None: ...
    def setChangingTracingType(self, b:bool) -> None: ...
    def setCurrDistanceInRoad(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setCurrDistanceInSegment(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setCurrDistanceInTrace(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setFollowingType(self, followingType:int, interval:int=..., pIVehicleNegotiated:Tessng.IVehicle=...) -> None: ...
    def setIndexOfSegmInTrace(self, index:int) -> None: ...
    def setLaneNumber(self, number:int) -> None: ...
    def setRouting(self, pRouting:Tessng.IRouting) -> bool: ...
    def setSegmentIndex(self, index:int) -> None: ...
    def setTrace(self, lPoint:typing.Sequence, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setTracingType(self, type:int) -> None: ...
    def setV3z(self, v3z:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setVehiDrivDistance(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setX(self, posX:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setY(self, posY:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def stopVehicle(self) -> None: ...
    def stoppingDistance(self) -> float: ...
    def toLeftLane(self, bFource:bool=...) -> None: ...
    def toRightLane(self, bFource:bool=...) -> None: ...
    def tracingType(self) -> int: ...
    def vehicle(self) -> Tessng.IVehicle: ...
    def zeroSpeedInterval(self) -> int: ...


class IVehicleDrivingManagerTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiplesReally(self) -> float: ...
    def batchIntervalReally(self) -> float: ...
    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def isStoppeed(self) -> bool: ...
    def releaseVehiclesAndDetecInfos(self) -> None: ...
    def running(self) -> bool: ...
    def setBatchNumber(self, number:int) -> None: ...
    def setStopped(self, stopped:bool) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...


class IVehicleDrivingTask(Shiboken.Object):

    def __init__(self) -> None: ...

    def currBatchNumber(self) -> int: ...
    def finished(self) -> bool: ...
    def id(self) -> int: ...
    def outTime(self) -> bool: ...
    def running(self) -> bool: ...
    def semaphoreAvailable(self) -> int: ...
    def setStopped(self, stopped:bool) -> None: ...
    def startTask(self, currBatchNumber:int=...) -> None: ...


class IVehicleQueueCounter(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def angle(self) -> float: ...
    def connector(self) -> Tessng.IConnector: ...
    def counterName(self) -> str: ...
    def distToStart(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def lane(self) -> Tessng.ILane: ...
    def laneConnector(self) -> Tessng.ILaneConnector: ...
    def link(self) -> Tessng.ILink: ...
    def onLink(self) -> bool: ...
    def point(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistToStart(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class IVehicleSupervisor(Shiboken.Object):

    def __init__(self) -> None: ...

    def distanceTwoVehicle(self, pV1:Tessng.IVehicle, pV2:Tessng.IVehicle) -> float: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class IVehicleTravelDetector(Shiboken.Object):

    def __init__(self) -> None: ...

    def aggregateInterval(self) -> int: ...
    def angle(self) -> float: ...
    def detectorName(self) -> str: ...
    def distance_endDetector(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def distance_startDetector(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def fromTime(self) -> int: ...
    def id(self) -> int: ...
    def isOnLink_endDetector(self) -> bool: ...
    def isOnLink_startDetector(self) -> bool: ...
    def isStartDetector(self) -> bool: ...
    def laneConnector_endDetector(self) -> Tessng.ILaneConnector: ...
    def laneConnector_startDetector(self) -> Tessng.ILaneConnector: ...
    def link_endDetector(self) -> Tessng.ILink: ...
    def link_startDetector(self) -> Tessng.ILink: ...
    def point_endDetector(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def point_startDetector(self, unit:Tessng.UnitOfMeasure=...) -> PySide2.QtCore.QPointF: ...
    def polygon_endDetector(self) -> PySide2.QtGui.QPolygonF: ...
    def polygon_startDetector(self) -> PySide2.QtGui.QPolygonF: ...
    def setAggregateInterval(self, interval:int) -> None: ...
    def setDistance_endDetector(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setDistance_startDetector(self, dist:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def setFromTime(self, time:int) -> None: ...
    def setName(self, name:str) -> None: ...
    def setToTime(self, time:int) -> None: ...
    def toTime(self) -> int: ...


class NetInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def accidentZones(self) -> typing.List: ...
    def addBusStationToLine(self, pBusLine:Tessng.IBusLine, pStation:Tessng.IBusStation) -> bool: ...
    def addCrossWalkSignalPhaseToLamp(self, SignalPhaseId:int, signalLamp:Tessng.ICrosswalkSignalLamp) -> None: ...
    def addFlowTimeInterval(self) -> Tessng.Online.Junction.FlowTimeInterval: ...
    def addLayerInfo(self, name:str, height:float, visible:bool, locked:bool) -> Tessng.Online.Pedestrian.LayerInfo: ...
    def addSignalPhaseToLamp(self, SignalPhaseId:int, signalLamp:Tessng.ISignalLamp) -> None: ...
    def allConnectorArea(self) -> typing.List: ...
    def angleToItem(self, angle:float) -> float: ...
    def backgroundMap(self) -> PySide2.QtCore.QByteArray: ...
    def beginImportData(self) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def buildAndApplyPaths(self, minPathNum:int=...) -> typing.Dict: ...
    def buildNetGrid(self, width:float=..., unit:Tessng.UnitOfMeasure=...) -> None: ...
    def busStations(self) -> typing.List: ...
    def buslines(self) -> typing.List: ...
    def calculateFlows(self) -> typing.Dict: ...
    def connectorCount(self) -> int: ...
    def connectorIds(self) -> typing.List: ...
    def connectors(self) -> typing.List: ...
    def createAccidentZone(self, param:Tessng.Online.DynaAccidentZoneParam) -> Tessng.IAccidentZone: ...
    def createBusLine(self, lLink:typing.Sequence) -> Tessng.IBusLine: ...
    def createBusStation(self, pLane:Tessng.ILane, length:float, dist:float, name:str=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.IBusStation: ...
    def createConnector(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, connName:str=..., bAddToScene:bool=...) -> Tessng.IConnector: ...
    def createConnector3DWithPoints(self, fromLinkId:int, toLinkId:int, lFromLaneNumber:typing.Sequence, lToLaneNumber:typing.Sequence, laneConnectorWithPoints:typing.Sequence, connName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.IConnector: ...
    def createCrossWalkSignalLamp(self, pTrafficLight:Tessng.ISignalController, name:str, crosswalkId:int, scenePos:PySide2.QtCore.QPointF, isPositive:bool) -> Tessng.ICrosswalkSignalLamp: ...
    def createDeciRouting(self, pDeciPoint:Tessng.IDecisionPoint, lILink:typing.Sequence) -> Tessng.IRouting: ...
    def createDecisionPoint(self, pLink:Tessng.ILink, distance:float, name:str=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.IDecisionPoint: ...
    def createDispatchPoint(self, pLink:Tessng.ILink, dpName:str=..., bAddToScene:bool=...) -> Tessng.IDispatchPoint: ...
    def createEmptyNetFile(self, filePath:str, dbver:int=...) -> bool: ...
    def createGuidArrow(self, pLane:Tessng.ILane, length:float, distToTerminal:float, arrowType:Tessng.Online.GuideArrowType, unit:Tessng.UnitOfMeasure=...) -> Tessng.IGuidArrow: ...
    def createJunction(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF, name:str) -> Tessng.IJunction: ...
    def createLaneConnector(self, pIConnector:Tessng.IConnector, fromLaneId:int, toLaneId:int) -> Tessng.ILaneConnector: ...
    def createLimitedZone(self, param:Tessng.Online.DynaLimitedZoneParam, unit:Tessng.UnitOfMeasure=...) -> Tessng.ILimitedZone: ...
    def createLink(self, lCenterPoint:typing.Sequence, laneCount:int, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLink3D(self, lCenterV3:typing.Sequence, laneCount:int, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLink3DWithLanePoints(self, lCenterLineV3:typing.Sequence, lanesWithPoints:typing.Sequence, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLink3DWithLanePointsAndAttrs(self, lCenterLineV3:typing.Sequence, lanesWithPoints:typing.Sequence, lLaneType:typing.Sequence, lAttr:typing.Sequence=..., linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLink3DWithLaneWidth(self, lCenterV3:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLink3DWithLanesWidth(self, lCenterV3:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLinkWithLaneWidth(self, lCenterPoint:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createLinkWithLanesWidth(self, lCenterPoint:typing.Sequence, lLaneWidth:typing.Sequence, linkName:str=..., bAddToScene:bool=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def createParkingDecisionPoint(self, pLink:Tessng.ILink, distance:float, name:str=...) -> Tessng.IParkingDecisionPoint: ...
    def createParkingRegion(self, param:Tessng.Online.ParkingLot.DynaParkingRegion) -> Tessng.IParkingRegion: ...
    def createParkingRouting(self, pDeciPoint:Tessng.IParkingDecisionPoint, pIParkingRegion:Tessng.IParkingRegion) -> Tessng.IParkingRouting: ...
    def createParkingTimeDis(self, param:Tessng.Online.ParkingLot.DynaParkingTimeDis) -> Tessng.Online.ParkingLot.DynaParkingTimeDis: ...
    def createPedestrianComposition(self, name:str, mpCompositionRatio:typing.Dict) -> int: ...
    def createPedestrianCrossWalkRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianCrossWalkRegion: ...
    def createPedestrianDecisionPoint(self, scenePos:PySide2.QtCore.QPointF) -> Tessng.IPedestrianPathPoint: ...
    def createPedestrianEllipseRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianEllipseRegion: ...
    def createPedestrianFanShapeRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianFanShapeRegion: ...
    def createPedestrianPath(self, pStartPoint:Tessng.IPedestrianPathPoint, pEndPoint:Tessng.IPedestrianPathPoint, middlePoints:typing.Sequence) -> Tessng.IPedestrianPath: ...
    def createPedestrianPathEndPoint(self, scenePos:PySide2.QtCore.QPointF) -> Tessng.IPedestrianPathPoint: ...
    def createPedestrianPathStartPoint(self, scenePos:PySide2.QtCore.QPointF) -> Tessng.IPedestrianPathPoint: ...
    def createPedestrianPolygonRegion(self, polygon:PySide2.QtGui.QPolygonF) -> Tessng.IPedestrianPolygonRegion: ...
    def createPedestrianRectRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianRectRegion: ...
    def createPedestrianSideWalkRegion(self, vertexs:typing.Sequence) -> Tessng.IPedestrianSideWalkRegion: ...
    def createPedestrianStairRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianStairRegion: ...
    def createPedestrianTriangleRegion(self, startPoint:PySide2.QtCore.QPointF, endPoint:PySide2.QtCore.QPointF) -> Tessng.IPedestrianTriangleRegion: ...
    def createReconstruction(self, param:Tessng.Online.DynaReconstructionParam, unit:Tessng.UnitOfMeasure=...) -> Tessng.IReconstruction: ...
    def createReduceSpeedArea(self, param:Tessng.Online.DynaReduceSpeedAreaParam) -> Tessng.IReduceSpeedArea: ...
    def createRoadWorkZone(self, param:Tessng.Online.DynaRoadWorkZoneParam, unit:Tessng.UnitOfMeasure=...) -> Tessng.IRoadWorkZone: ...
    def createRouting(self, lILink:typing.Sequence) -> Tessng.IRouting: ...
    def createSignalController(self, name:str) -> Tessng.ISignalController: ...
    def createSignalLamp(self, pPhase:Tessng.ISignalPhase, name:str, laneId:int, toLaneId:int, distance:float) -> Tessng.ISignalLamp: ...
    def createSignalPlan(self, pITrafficLight:Tessng.ISignalController, name:str, cycle:int, offset:int, startTime:int, endTime:int) -> Tessng.ISignalPlan: ...
    def createSignalPlanSignalPhase(self, SignalPlan:Tessng.ISignalPlan, name:str, lColor:typing.Sequence) -> Tessng.ISignalPhase: ...
    def createTollDecisionPoint(self, pLink:Tessng.ILink, distance:float, name:str=...) -> Tessng.ITollDecisionPoint: ...
    def createTollLane(self, param:Tessng.Online.TollStation.DynaTollLane) -> Tessng.ITollLane: ...
    def createTollParkingTimeDis(self, param:Tessng.Online.TollStation.DynaTollParkingTimeDis) -> Tessng.Online.TollStation.DynaTollParkingTimeDis: ...
    def createTollRouting(self, pDeciPoint:Tessng.ITollDecisionPoint, pITollLane:Tessng.ITollLane) -> Tessng.ITollRouting: ...
    def createTrafficSignalLamp(self, pTrafficLight:Tessng.ISignalController, name:str, laneId:int, toLaneId:int, distance:float) -> Tessng.ISignalLamp: ...
    def createVehiCollectorOnConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float, unit:Tessng.UnitOfMeasure=...) -> Tessng.IVehicleDrivInfoCollector: ...
    def createVehiCollectorOnLink(self, pLane:Tessng.ILane, dist:float, unit:Tessng.UnitOfMeasure=...) -> Tessng.IVehicleDrivInfoCollector: ...
    def createVehiQueueCounterOnConnector(self, pLaneConnector:Tessng.ILaneConnector, dist:float, unit:Tessng.UnitOfMeasure=...) -> Tessng.IVehicleQueueCounter: ...
    def createVehiQueueCounterOnLink(self, pLane:Tessng.ILane, dist:float, unit:Tessng.UnitOfMeasure=...) -> Tessng.IVehicleQueueCounter: ...
    def createVehicleComposition(self, name:str, lVehiComp:typing.Sequence) -> int: ...
    def createVehicleTravelDetector_conn2conn(self, pStartLaneConnector:Tessng.ILaneConnector, pEndLaneConnector:Tessng.ILaneConnector, dist1:float, dist2:float, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def createVehicleTravelDetector_conn2link(self, pStartLaneConnector:Tessng.ILaneConnector, pEndLink:Tessng.ILink, dist1:float, dist2:float, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def createVehicleTravelDetector_link2conn(self, pStartLink:Tessng.ILink, pEndLaneConnector:Tessng.ILaneConnector, dist1:float, dist2:float, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def createVehicleTravelDetector_link2link(self, pStartLink:Tessng.ILink, pEndLink:Tessng.ILink, dist1:float, dist2:float, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def createVehicleType(self, _vt:Tessng._VehicleType) -> bool: ...
    def crossPoints(self, pLaneConnector:Tessng.ILaneConnector) -> typing.List: ...
    def crosswalkSignalLamps(self) -> typing.List: ...
    def decisionPoints(self) -> typing.List: ...
    def deleteFlowTimeInterval(self, timeId:int) -> bool: ...
    def dispatchPoints(self) -> typing.List: ...
    def endImportData(self) -> None: ...
    def findAccidentZone(self, accidentZoneId:int) -> Tessng.IAccidentZone: ...
    def findBusStation(self, stationId:int) -> Tessng.IBusStation: ...
    def findBusStationLineByStationId(self, stationId:int) -> typing.List: ...
    def findBusline(self, buslineId:int) -> Tessng.IBusLine: ...
    def findBuslineByFirstLinkId(self, linkId:int) -> Tessng.IBusLine: ...
    def findConnector(self, id:int) -> Tessng.IConnector: ...
    def findConnectorArea(self, id:int) -> Tessng.IConnectorArea: ...
    def findConnectorByLinkIds(self, fromLinkId:int, toLinkId:int) -> Tessng.IConnector: ...
    def findCrosswalkSignalLamp(self, id:int) -> Tessng.ICrosswalkSignalLamp: ...
    def findDecisionPoint(self, id:int) -> Tessng.IDecisionPoint: ...
    def findDispatchPoint(self, id:int) -> Tessng.IDispatchPoint: ...
    def findGuidArrow(self, id:int) -> Tessng.IGuidArrow: ...
    def findJunction(self, junctionId:int) -> Tessng.IJunction: ...
    def findLane(self, id:int) -> Tessng.ILane: ...
    @typing.overload
    def findLaneConnector(self, fromLaneId:int, toLaneId:int) -> Tessng.ILaneConnector: ...
    def findLimitedZone(self, limitedZoneId:int) -> Tessng.ILimitedZone: ...
    def findLink(self, id:int) -> Tessng.ILink: ...
    def findParkingDecisionPoint(self, id:int) -> Tessng.IParkingDecisionPoint: ...
    def findParkingRegion(self, id:int) -> Tessng.IParkingRegion: ...
    def findParkingRouing(self, id:int) -> Tessng.IParkingRouting: ...
    def findPedestrianCrossWalkRegion(self, id:int) -> Tessng.IPedestrianCrossWalkRegion: ...
    def findPedestrianDecisionPoint(self, id:int) -> Tessng.IPedestrianPathPoint: ...
    def findPedestrianDecisionPointConfigInfo(self, id:int) -> Tessng.Online.Pedestrian.PedestrianDecisionPointConfigInfo: ...
    def findPedestrianEllipseRegion(self, id:int) -> Tessng.IPedestrianEllipseRegion: ...
    def findPedestrianFanShapeRegion(self, id:int) -> Tessng.IPedestrianFanShapeRegion: ...
    def findPedestrianPath(self, id:int) -> Tessng.IPedestrianPath: ...
    def findPedestrianPathEndPoint(self, id:int) -> Tessng.IPedestrianPathPoint: ...
    def findPedestrianPathStartPoint(self, id:int) -> Tessng.IPedestrianPathPoint: ...
    def findPedestrianPolygonRegion(self, id:int) -> Tessng.IPedestrianPolygonRegion: ...
    def findPedestrianRectRegion(self, id:int) -> Tessng.IPedestrianRectRegion: ...
    def findPedestrianRegion(self, id:int) -> Tessng.IPedestrianRegion: ...
    def findPedestrianSideWalkRegion(self, id:int) -> Tessng.IPedestrianSideWalkRegion: ...
    def findPedestrianStairRegion(self, id:int) -> Tessng.IPedestrianStairRegion: ...
    def findPedestrianStartPointConfigInfo(self, id:int) -> Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo: ...
    def findPedestrianTriangleRegion(self, id:int) -> Tessng.IPedestrianTriangleRegion: ...
    def findReconstruction(self, reconstructionId:int) -> Tessng.IReconstruction: ...
    def findReduceSpeedArea(self, id:int) -> Tessng.IReduceSpeedArea: ...
    def findRoadWorkZone(self, roadWorkZoneId:int) -> Tessng.IRoadWorkZone: ...
    def findRouting(self, id:int) -> Tessng.IRouting: ...
    def findSectionOn1Cell(self, point:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def findSectionOn4Cell(self, point:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def findSectionOn9Cell(self, point:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def findSignalControllerById(self, id:int) -> Tessng.ISignalController: ...
    def findSignalControllerByName(self, name:str) -> Tessng.ISignalController: ...
    def findSignalLamp(self, id:int) -> Tessng.ISignalLamp: ...
    def findSignalPhase(self, id:int) -> Tessng.ISignalPhase: ...
    def findSignalPlanById(self, id:int) -> Tessng.ISignalPlan: ...
    def findSignalPlanByName(self, name:str) -> Tessng.ISignalPlan: ...
    def findTollDecisionPoint(self, id:int) -> Tessng.ITollDecisionPoint: ...
    def findTollLane(self, id:int) -> Tessng.ITollLane: ...
    def findTollRouing(self, id:int) -> Tessng.ITollRouting: ...
    def findVehiInfoCollector(self, id:int) -> Tessng.IVehicleDrivInfoCollector: ...
    def findVehiQueueCounter(self, id:int) -> Tessng.IVehicleQueueCounter: ...
    def findVehiTravelDetector(self, id:int) -> Tessng.IVehicleTravelDetector: ...
    def getAllJunctions(self) -> typing.List: ...
    def getFlowTimeIntervals(self) -> typing.List: ...
    def getIDByItemName(self, name:str) -> int: ...
    def getJunctionFlows(self, junctionId:int) -> typing.List: ...
    def graphicsScene(self) -> PySide2.QtWidgets.QGraphicsScene: ...
    def graphicsView(self) -> PySide2.QtWidgets.QGraphicsView: ...
    def guidArrowCount(self) -> int: ...
    def guidArrowIds(self) -> typing.List: ...
    def guidArrows(self) -> typing.List: ...
    def initSequence(self, schemaName:str=...) -> bool: ...
    def judgeLinkToCross(self, linkId:int) -> bool: ...
    def laneCenterPoints(self, laneId:int, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def layerInfos(self) -> typing.List: ...
    def limitedZones(self) -> typing.List: ...
    def linkCenterPoints(self, linkId:int, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def linkCount(self) -> int: ...
    def linkIds(self) -> typing.List: ...
    def links(self) -> typing.List: ...
    def locateOnCrid(self, point:PySide2.QtCore.QPointF, cellCount:int=..., unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def locateOnSections(self, point:PySide2.QtCore.QPointF, lSection:typing.Sequence, referDistance:float=..., unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def moveLinks(self, lLink:typing.Sequence, offset:PySide2.QtCore.QPointF, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def netAttrs(self) -> Tessng.IRoadNet: ...
    def netFilePath(self) -> str: ...
    def openNetByNetId(self, netId:int) -> None: ...
    def openNetFle(self, filePath:str) -> None: ...
    def parkingDecisionPoints(self) -> typing.List: ...
    def parkingRegions(self) -> typing.List: ...
    def parkingTimeDis(self) -> typing.List: ...
    def pedestrianCompositions(self) -> typing.List: ...
    def pedestrianCrossWalkRegions(self) -> typing.List: ...
    def pedestrianEllipseRegions(self) -> typing.List: ...
    def pedestrianFanShapeRegions(self) -> typing.List: ...
    def pedestrianPathDecisionPoints(self) -> typing.List: ...
    def pedestrianPathEndPoints(self) -> typing.List: ...
    def pedestrianPathStartPoints(self) -> typing.List: ...
    def pedestrianPaths(self) -> typing.List: ...
    def pedestrianPolygonRegions(self) -> typing.List: ...
    def pedestrianRectRegions(self) -> typing.List: ...
    def pedestrianRegions(self) -> typing.List: ...
    def pedestrianSideWalkRegions(self) -> typing.List: ...
    def pedestrianStairRegions(self) -> typing.List: ...
    def pedestrianTriangleRegions(self) -> typing.List: ...
    def pedestrianTypes(self) -> typing.List: ...
    def reCalcPassagewayLength(self, param:Tessng.Online.DynaReconstructionParam, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def reSetDeciPoint(self) -> None: ...
    def reSetLaneConnector(self, pITollRouting:Tessng.IRouting) -> None: ...
    def reconstructions(self) -> typing.List: ...
    def reduceSpeedAreas(self) -> typing.List: ...
    def removeAccidentZone(self, pIAccidentZone:Tessng.IAccidentZone) -> None: ...
    def removeBusLine(self, pBusLine:Tessng.IBusLine) -> bool: ...
    def removeBusStation(self, pStation:Tessng.IBusStation) -> bool: ...
    def removeBusStationFromLine(self, pBusLine:Tessng.IBusLine, pStation:Tessng.IBusStation) -> bool: ...
    def removeConnector(self, pConnector:Tessng.IConnector) -> None: ...
    def removeCrossWalkSignalLamp(self, pICrosswalkSignalLamp:Tessng.ICrosswalkSignalLamp) -> None: ...
    def removeDeciRouting(self, pDeciPoint:Tessng.IDecisionPoint, pRouting:Tessng.IRouting) -> bool: ...
    def removeDecisionPoint(self, pDeciPoint:Tessng.IDecisionPoint) -> bool: ...
    def removeDispatchPoint(self, pDispPoint:Tessng.IDispatchPoint) -> bool: ...
    def removeGuidArrow(self, pArrow:Tessng.IGuidArrow) -> None: ...
    def removeJunction(self, junctionId:int) -> bool: ...
    def removeLaneConnector(self, pILC:Tessng.ILaneConnector) -> bool: ...
    def removeLayerInfo(self, layerId:int) -> None: ...
    def removeLimitedZone(self, pILimitedZone:Tessng.ILimitedZone) -> None: ...
    def removeLink(self, pLink:Tessng.ILink) -> None: ...
    def removeParkingDecisionPoint(self, pIParkingDecisionPoint:Tessng.IParkingDecisionPoint) -> None: ...
    def removeParkingDecisionPointById(self, id:int) -> None: ...
    def removeParkingRegion(self, pIParkingRegion:Tessng.IParkingRegion) -> None: ...
    def removeParkingRegionById(self, id:int) -> None: ...
    def removeParkingRouting(self, pIParkingRouting:Tessng.IParkingRouting) -> None: ...
    def removeParkingRoutingById(self, id:int) -> None: ...
    def removeParkingTimeDis(self, id:int) -> None: ...
    def removePedestrianComposition(self, compositionId:int) -> bool: ...
    def removePedestrianCrossWalkRegion(self, pIPedestrianCrossWalkRegion:Tessng.IPedestrianCrossWalkRegion) -> None: ...
    def removePedestrianDecisionPoint(self, pIPedestrianDecisionPoint:Tessng.IPedestrianPathPoint) -> None: ...
    def removePedestrianEllipseRegion(self, pIPedestrianEllipseRegion:Tessng.IPedestrianEllipseRegion) -> None: ...
    def removePedestrianFanShapeRegion(self, pIPedestrianFanShapeRegion:Tessng.IPedestrianFanShapeRegion) -> None: ...
    def removePedestrianPath(self, pIPedestrianPath:Tessng.IPedestrianPath) -> None: ...
    def removePedestrianPathEndPoint(self, pIPedestrianPathEndPoint:Tessng.IPedestrianPathPoint) -> None: ...
    def removePedestrianPathStartPoint(self, pIPedestrianPathStartPoint:Tessng.IPedestrianPathPoint) -> None: ...
    def removePedestrianPolygonRegion(self, pIPedestrianPolygonRegion:Tessng.IPedestrianPolygonRegion) -> None: ...
    def removePedestrianRectRegion(self, pIPedestrianRectRegion:Tessng.IPedestrianRectRegion) -> None: ...
    def removePedestrianSideWalkRegion(self, pIPedestrianSideWalkRegion:Tessng.IPedestrianSideWalkRegion) -> None: ...
    def removePedestrianStairRegion(self, pIPedestrianStairRegion:Tessng.IPedestrianStairRegion) -> None: ...
    def removePedestrianTriangleRegion(self, pIPedestrianTriangleRegion:Tessng.IPedestrianTriangleRegion) -> None: ...
    def removeReconstruction(self, pIReconstruction:Tessng.IReconstruction) -> None: ...
    def removeReduceSpeedArea(self, pIReduceSpeedArea:Tessng.IReduceSpeedArea) -> None: ...
    def removeRoadWorkZone(self, pIRoadWorkZone:Tessng.IRoadWorkZone) -> None: ...
    def removeSignalPhase(self, pPlan:Tessng.ISignalPlan, phaseId:int) -> None: ...
    def removeSignalPhaseFromLamp(self, SignalPhaseId:int, signalLamp:Tessng.ISignalLamp) -> None: ...
    def removeTollDecisionPoint(self, pITollDecisionPoint:Tessng.ITollDecisionPoint) -> None: ...
    def removeTollDecisionPointById(self, id:int) -> None: ...
    def removeTollLane(self, pITollLane:Tessng.ITollLane) -> None: ...
    def removeTollLaneById(self, id:int) -> None: ...
    def removeTollParkingTimeDis(self, id:int) -> None: ...
    def removeTollRouting(self, pITollRouting:Tessng.ITollRouting) -> None: ...
    def removeTollRoutingById(self, id:int) -> None: ...
    def removeVehiCollector(self, pCollector:Tessng.IVehicleDrivInfoCollector) -> bool: ...
    def removeVehicleComposition(self, vehiCompId:int) -> bool: ...
    def roadNet(self) -> Tessng.IRoadNet: ...
    def roadNetArea(self) -> float: ...
    def roadWorkZones(self) -> typing.List: ...
    def saveRoadNet(self) -> bool: ...
    def sceneHeigth(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def sceneScale(self) -> float: ...
    def sceneWidth(self, unit:Tessng.UnitOfMeasure=...) -> float: ...
    def sections(self) -> typing.List: ...
    def setNetAttrs(self, name:str, sourceType:str=..., centerPoint:PySide2.QtCore.QPointF=..., backgroundUrl:str=..., otherAttrsJson:typing.Dict=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.IRoadNet: ...
    def setPixelRatio(self, newRatio:float) -> None: ...
    def setSceneSize(self, w:float, h:float, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def shortestRouting(self, pFromLink:Tessng.ILink, pToLink:Tessng.ILink) -> Tessng.IRouting: ...
    def signalControllerCount(self) -> int: ...
    def signalControllerIds(self) -> typing.List: ...
    def signalControllers(self) -> typing.List: ...
    def signalLampCount(self) -> int: ...
    def signalLampIds(self) -> typing.List: ...
    def signalLamps(self) -> typing.List: ...
    def signalPlanCount(self) -> int: ...
    def signalPlanIds(self) -> typing.List: ...
    def signalPlans(self) -> typing.List: ...
    def tollDecisionPoints(self) -> typing.List: ...
    def tollLanes(self) -> typing.List: ...
    def tollParkingTimeDis(self) -> typing.List: ...
    def transferSignalPhase(self, pFromISignalPhase:Tessng.ISignalPhase, pToISignalPhase:Tessng.ISignalPhase, signalLamp:Tessng.ISignalLamp) -> None: ...
    def updateAccidentZone(self, param:Tessng.Online.DynaAccidentZoneParam) -> bool: ...
    def updateConnector(self, connector:Tessng._Connector) -> Tessng.IConnector: ...
    def updateDecipointPoint(self, deciPoint:Tessng._DecisionPoint, lFlowRatio:typing.Sequence=...) -> Tessng.IDecisionPoint: ...
    def updateFlow(self, timeId:int, junctionId:int, turningId:int, inputFlowValue:int) -> bool: ...
    def updateFlowAlgorithmParams(self, theta:float, bpra:float, bprb:float, maxIterateNum:int) -> bool: ...
    def updateFlowTimeInterval(self, timeId:int, startTime:int, endTime:int) -> Tessng.Online.Junction.FlowTimeInterval: ...
    def updateJunctionName(self, junctionId:int, name:str) -> bool: ...
    def updateLayerInfo(self, layerId:int, name:str, height:float, visible:bool, locked:bool) -> bool: ...
    def updateLimitedZone(self, param:Tessng.Online.DynaLimitedZoneParam, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def updateLink(self, link:Tessng._Link, lLane:typing.Sequence=..., lPoint:typing.Sequence=..., unit:Tessng.UnitOfMeasure=...) -> Tessng.ILink: ...
    def updateLink3DWithPoints(self, pILink:Tessng.ILink, lV3d:typing.Sequence, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def updateLinkAndLane3DWithPoints(self, pILink:Tessng.ILink, lCenterLineV3:typing.Sequence, lanesWithPoints:typing.Sequence, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def updateLinkV3z(self, pILink:Tessng.ILink, lV3z:typing.Sequence, unit:Tessng.UnitOfMeasure=...) -> None: ...
    def updateParkingRegion(self, param:Tessng.Online.ParkingLot.DynaParkingRegion) -> Tessng.IParkingRegion: ...
    def updateParkingTimeDis(self, param:Tessng.Online.ParkingLot.DynaParkingTimeDis) -> Tessng.Online.ParkingLot.DynaParkingTimeDis: ...
    def updatePedestrianComposition(self, compositionId:int, mpCompositionRatio:typing.Dict) -> bool: ...
    def updatePedestrianDecisionPointConfigInfo(self, info:Tessng.Online.Pedestrian.PedestrianDecisionPointConfigInfo) -> bool: ...
    def updatePedestrianStartPointConfigInfo(self, info:Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo) -> bool: ...
    def updateReconStruction(self, param:Tessng.Online.DynaReconstructionParam, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def updateReduceSpeedArea(self, param:Tessng.Online.DynaReduceSpeedAreaParam) -> bool: ...
    def updateRoadWorkZone(self, param:Tessng.Online.DynaRoadWorkZoneParam, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def updateRouting(self, pIRouting:Tessng.IRouting, lILink:typing.Sequence) -> bool: ...
    def updateRoutingLaneConnector(self, pRouting:Tessng.IRouting, pConnector:Tessng.IConnector, lFromLaneId:typing.Sequence, lToLaneId:typing.Sequence) -> bool: ...
    def updateTollLane(self, param:Tessng.Online.TollStation.DynaTollLane) -> Tessng.ITollLane: ...
    def updateTollParkingTimeDis(self, param:Tessng.Online.TollStation.DynaTollParkingTimeDis) -> Tessng.Online.TollStation.DynaTollParkingTimeDis: ...
    def updateVehicleComposition(self, vehiCompId:int, lVehiComp:typing.Sequence) -> bool: ...
    def vehiInfoCollectors(self) -> typing.List: ...
    def vehiQueueCounters(self) -> typing.List: ...
    def vehiTravelDetectors(self) -> typing.List: ...
    def vehicleCompositions(self) -> typing.List: ...
    def vehicleTypes(self) -> typing.List: ...


class NetItemType(Shiboken.Object):
    G3DpointType = 115540
    GAccidentZoneType = 66539
    GAddParkingDeciRouter = 95540
    GBaseSurfaceType = 115542
    GBusLineType = 65551
    GBusStationType = 65550
    GConnectorAreaType = 65553
    GConnectorType = 65540
    GCrossWalkPedestrianAreaType = 65562
    GCrossWalkTrafficLightType = 65569
    GDecisionType = 65542
    GDelParkingDeciRouter = 95541
    GDeparturePointType = 65543
    GEllipsePedestrianAreaType = 65557
    GEvaluateAreaType = 66586
    GFanShapePedestrianAreaType = 65559
    GFlowerfedType = 115541
    GGuideArrowType = 65552
    GJunctionType = 69537
    GLaneConnectorType = 65541
    GLaneType = 65539
    GLimitLane = 105537
    GLimitedZoneType = 66540
    GLinkCenterType = 65554
    GLinkType = 65538
    GNetImage = 105539
    GNetText = 105538
    GParkingDeciPoint = 95539
    GParkingGarageOffroad = 95536
    GParkingRegion = 95537
    GParkingStall = 95538
    GPedestrianDecisionPointType = 65570
    GPedestrianPathEndPointType = 65566
    GPedestrianPathPointType = 65564
    GPedestrianPathStartPointType = 65565
    GPedestrianPathType = 65568
    GPedestrianPathVirtualPointType = 65567
    GPolygonPedestrianAreaType = 65560
    GReconstructionType = 66541
    GRectPedestrianAreaType = 65556
    GReduceSpeedAreaType = 65549
    GRoadWorkZoneType = 66538
    GRsuType = 66537
    GSideWalkPedestrianAreaType = 65561
    GSignalLampType = 65545
    GStairRegionAreaType = 65563
    GTollAddRouting = 67540
    GTollDeciPoint = 67539
    GTollDelRouting = 67541
    GTollLane = 67537
    GTollPoint = 67538
    GTrianglePedestrianAreaType = 65558
    GVehicleDetectorType = 65555
    GVehicleDrivInfoCollecterType = 65546
    GVehicleQueueCounterType = 65547
    GVehicleTravelDetectorType = 65548
    GVehicleType = 65544
    GVertexType = 65537
    LaneConnectorType = 65638
    LaneType = 65637

    @typing.overload
    def __init__(self, NetItemType:Tessng.NetItemType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class Online(Shiboken.Object):
    Motor                    : Online = ... # 0x0
    Straight                 : Online = ... # 0x0
    Left                     : Online = ... # 0x1
    Nonmotor                 : Online = ... # 0x1
    Right                    : Online = ... # 0x2
    StraightLeft             : Online = ... # 0x3
    StraightRight            : Online = ... # 0x4
    StraightLeftRight        : Online = ... # 0x5
    LeftRight                : Online = ... # 0x6
    Uturn                    : Online = ... # 0x7
    StraightUturn            : Online = ... # 0x8
    LeftUturn                : Online = ... # 0x9

    class ColorInterval(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.Online.ColorInterval' objects>
        interval: getset_descriptor # value = <attribute 'interval' of 'Tessng.Online.ColorInterval' objects>

        @typing.overload
        def __init__(self, ColorInterval:Tessng.Online.ColorInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class CrossPoint(Shiboken.Object):
        mCrossPoint: getset_descriptor # value = <attribute 'mCrossPoint' of 'Tessng.Online.CrossPoint' objects>
        mpLaneConnector: getset_descriptor # value = <attribute 'mpLaneConnector' of 'Tessng.Online.CrossPoint' objects>
        mpMainLaneConnector: getset_descriptor # value = <attribute 'mpMainLaneConnector' of 'Tessng.Online.CrossPoint' objects>
        mrDistance: getset_descriptor # value = <attribute 'mrDistance' of 'Tessng.Online.CrossPoint' objects>
        mrSegmIndex: getset_descriptor # value = <attribute 'mrSegmIndex' of 'Tessng.Online.CrossPoint' objects>

        @typing.overload
        def __init__(self, CrossPoint:Tessng.Online.CrossPoint) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DecipointFlowRatioByInterval(Shiboken.Object):
        deciPointID: getset_descriptor # value = <attribute 'deciPointID' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        endDateTime: getset_descriptor # value = <attribute 'endDateTime' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        mlRoutingFlowRatio: getset_descriptor # value = <attribute 'mlRoutingFlowRatio' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>
        startDateTime: getset_descriptor # value = <attribute 'startDateTime' of 'Tessng.Online.DecipointFlowRatioByInterval' objects>

        @typing.overload
        def __init__(self, DecipointFlowRatioByInterval:Tessng.Online.DecipointFlowRatioByInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DispatchInterval(Shiboken.Object):
        departureIntervald: getset_descriptor # value = <attribute 'departureIntervald' of 'Tessng.Online.DispatchInterval' objects>
        dispatchId: getset_descriptor # value = <attribute 'dispatchId' of 'Tessng.Online.DispatchInterval' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.DispatchInterval' objects>
        mlVehicleConsDetail: getset_descriptor # value = <attribute 'mlVehicleConsDetail' of 'Tessng.Online.DispatchInterval' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.DispatchInterval' objects>
        vehiConsId: getset_descriptor # value = <attribute 'vehiConsId' of 'Tessng.Online.DispatchInterval' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.DispatchInterval' objects>

        @typing.overload
        def __init__(self, DispatchInterval:Tessng.Online.DispatchInterval) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaAccidentZoneIntervalParam(Shiboken.Object):
        accidentZoneId: getset_descriptor # value = <attribute 'accidentZoneId' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        controlLength: getset_descriptor # value = <attribute 'controlLength' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        limitedSpeed: getset_descriptor # value = <attribute 'limitedSpeed' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>
        startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.DynaAccidentZoneIntervalParam' objects>

        @typing.overload
        def __init__(self, DynaAccidentZoneIntervalParam:Tessng.Online.DynaAccidentZoneIntervalParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaAccidentZoneParam(Shiboken.Object):
        controlLength: getset_descriptor # value = <attribute 'controlLength' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        duration: getset_descriptor # value = <attribute 'duration' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        level: getset_descriptor # value = <attribute 'level' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        mlToLaneNumber: getset_descriptor # value = <attribute 'mlToLaneNumber' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        needRescue: getset_descriptor # value = <attribute 'needRescue' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        needStayed: getset_descriptor # value = <attribute 'needStayed' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        rescueTime: getset_descriptor # value = <attribute 'rescueTime' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.DynaAccidentZoneParam' objects>
        waitTimeBeforeRescue: getset_descriptor # value = <attribute 'waitTimeBeforeRescue' of 'Tessng.Online.DynaAccidentZoneParam' objects>

        @typing.overload
        def __init__(self, DynaAccidentZoneParam:Tessng.Online.DynaAccidentZoneParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaLimitedZoneParam(Shiboken.Object):
        duration: getset_descriptor # value = <attribute 'duration' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        mlToLaneNumber: getset_descriptor # value = <attribute 'mlToLaneNumber' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaLimitedZoneParam' objects>
        roadType: getset_descriptor # value = <attribute 'roadType' of 'Tessng.Online.DynaLimitedZoneParam' objects>

        @typing.overload
        def __init__(self, DynaLimitedZoneParam:Tessng.Online.DynaLimitedZoneParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaReconstructionParam(Shiboken.Object):
        Da: getset_descriptor # value = <attribute 'Da' of 'Tessng.Online.DynaReconstructionParam' objects>
        Dc: getset_descriptor # value = <attribute 'Dc' of 'Tessng.Online.DynaReconstructionParam' objects>
        Dn: getset_descriptor # value = <attribute 'Dn' of 'Tessng.Online.DynaReconstructionParam' objects>
        R: getset_descriptor # value = <attribute 'R' of 'Tessng.Online.DynaReconstructionParam' objects>
        V: getset_descriptor # value = <attribute 'V' of 'Tessng.Online.DynaReconstructionParam' objects>
        beBorrowedLinkId: getset_descriptor # value = <attribute 'beBorrowedLinkId' of 'Tessng.Online.DynaReconstructionParam' objects>
        borrowedNum: getset_descriptor # value = <attribute 'borrowedNum' of 'Tessng.Online.DynaReconstructionParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaReconstructionParam' objects>
        ih: getset_descriptor # value = <attribute 'ih' of 'Tessng.Online.DynaReconstructionParam' objects>
        limitedZoneId: getset_descriptor # value = <attribute 'limitedZoneId' of 'Tessng.Online.DynaReconstructionParam' objects>
        passagewayLength: getset_descriptor # value = <attribute 'passagewayLength' of 'Tessng.Online.DynaReconstructionParam' objects>
        passagewayLimitedSpeed: getset_descriptor # value = <attribute 'passagewayLimitedSpeed' of 'Tessng.Online.DynaReconstructionParam' objects>
        phih: getset_descriptor # value = <attribute 'phih' of 'Tessng.Online.DynaReconstructionParam' objects>
        roadWorkZoneId: getset_descriptor # value = <attribute 'roadWorkZoneId' of 'Tessng.Online.DynaReconstructionParam' objects>

        @typing.overload
        def __init__(self, DynaReconstructionParam:Tessng.Online.DynaReconstructionParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaReduceSpeedAreaParam(Shiboken.Object):
        areaLength: getset_descriptor # value = <attribute 'areaLength' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        mlReduceSpeedIntervalParam: getset_descriptor # value = <attribute 'mlReduceSpeedIntervalParam' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>
        toLaneNumber: getset_descriptor # value = <attribute 'toLaneNumber' of 'Tessng.Online.DynaReduceSpeedAreaParam' objects>

        @typing.overload
        def __init__(self, DynaReduceSpeedAreaParam:Tessng.Online.DynaReduceSpeedAreaParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaReduceSpeedIntervalParam(Shiboken.Object):
        endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.DynaReduceSpeedIntervalParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaReduceSpeedIntervalParam' objects>
        mlReduceSpeedVehicleTypeParam: getset_descriptor # value = <attribute 'mlReduceSpeedVehicleTypeParam' of 'Tessng.Online.DynaReduceSpeedIntervalParam' objects>
        reduceSpeedAreaId: getset_descriptor # value = <attribute 'reduceSpeedAreaId' of 'Tessng.Online.DynaReduceSpeedIntervalParam' objects>
        startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.DynaReduceSpeedIntervalParam' objects>

        @typing.overload
        def __init__(self, DynaReduceSpeedIntervalParam:Tessng.Online.DynaReduceSpeedIntervalParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaReduceSpeedVehiTypeParam(Shiboken.Object):
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>
        reduceSpeedAreaId: getset_descriptor # value = <attribute 'reduceSpeedAreaId' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>
        reduceSpeedIntervalId: getset_descriptor # value = <attribute 'reduceSpeedIntervalId' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>
        speedSD: getset_descriptor # value = <attribute 'speedSD' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>
        vehicleTypeCode: getset_descriptor # value = <attribute 'vehicleTypeCode' of 'Tessng.Online.DynaReduceSpeedVehiTypeParam' objects>

        @typing.overload
        def __init__(self, DynaReduceSpeedVehiTypeParam:Tessng.Online.DynaReduceSpeedVehiTypeParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaRoadWorkZoneParam(Shiboken.Object):
        createCPUTime: getset_descriptor # value = <attribute 'createCPUTime' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        downTerminationLength: getset_descriptor # value = <attribute 'downTerminationLength' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        downTransitionLength: getset_descriptor # value = <attribute 'downTransitionLength' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        duration: getset_descriptor # value = <attribute 'duration' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        lLogoIndex: getset_descriptor # value = <attribute 'lLogoIndex' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        mlFromLaneNumber: getset_descriptor # value = <attribute 'mlFromLaneNumber' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        mlToLaneNumber: getset_descriptor # value = <attribute 'mlToLaneNumber' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        upBufferLength: getset_descriptor # value = <attribute 'upBufferLength' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        upCautionLength: getset_descriptor # value = <attribute 'upCautionLength' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>
        upTransitionLength: getset_descriptor # value = <attribute 'upTransitionLength' of 'Tessng.Online.DynaRoadWorkZoneParam' objects>

        @typing.overload
        def __init__(self, DynaRoadWorkZoneParam:Tessng.Online.DynaRoadWorkZoneParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class DynaVehiParam(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.Online.DynaVehiParam' objects>
        dist: getset_descriptor # value = <attribute 'dist' of 'Tessng.Online.DynaVehiParam' objects>
        laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.Online.DynaVehiParam' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.DynaVehiParam' objects>
        others: getset_descriptor # value = <attribute 'others' of 'Tessng.Online.DynaVehiParam' objects>
        roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.DynaVehiParam' objects>
        speed: getset_descriptor # value = <attribute 'speed' of 'Tessng.Online.DynaVehiParam' objects>
        toLaneNumber: getset_descriptor # value = <attribute 'toLaneNumber' of 'Tessng.Online.DynaVehiParam' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.Online.DynaVehiParam' objects>

        @typing.overload
        def __init__(self, DynaVehiParam:Tessng.Online.DynaVehiParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class FollowingModelParam(Shiboken.Object):
        alfa: getset_descriptor # value = <attribute 'alfa' of 'Tessng.Online.FollowingModelParam' objects>
        beit: getset_descriptor # value = <attribute 'beit' of 'Tessng.Online.FollowingModelParam' objects>
        safeDistance: getset_descriptor # value = <attribute 'safeDistance' of 'Tessng.Online.FollowingModelParam' objects>
        safeInterval: getset_descriptor # value = <attribute 'safeInterval' of 'Tessng.Online.FollowingModelParam' objects>
        vtype: getset_descriptor # value = <attribute 'vtype' of 'Tessng.Online.FollowingModelParam' objects>

        @typing.overload
        def __init__(self, FollowingModelParam:Tessng.Online.FollowingModelParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class FollowingParamByVehiType(Shiboken.Object):
        alfa: getset_descriptor # value = <attribute 'alfa' of 'Tessng.Online.FollowingParamByVehiType' objects>
        beit: getset_descriptor # value = <attribute 'beit' of 'Tessng.Online.FollowingParamByVehiType' objects>
        safeDistance: getset_descriptor # value = <attribute 'safeDistance' of 'Tessng.Online.FollowingParamByVehiType' objects>
        safeInterval: getset_descriptor # value = <attribute 'safeInterval' of 'Tessng.Online.FollowingParamByVehiType' objects>
        vtype: getset_descriptor # value = <attribute 'vtype' of 'Tessng.Online.FollowingParamByVehiType' objects>

        @typing.overload
        def __init__(self, FollowingParamByVehiType:Tessng.Online.FollowingParamByVehiType) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class GuideArrowType(object):
        Left: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Left
        LeftRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.LeftRight
        LeftUturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.LeftUturn
        Right: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Right
        Straight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Straight
        StraightLeft: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightLeft
        StraightLeftRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightLeftRight
        StraightRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightRight
        StraightUturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightUturn
        Uturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Uturn
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.GuideArrowType' objects>
        values: dict # value = {'Straight': Tessng.Online.GuideArrowType.Straight, 'Left': Tessng.Online.GuideArrowType.Left, 'Right': Tessng.Online.GuideArrowType.Right, 'StraightLeft': Tessng.Online.GuideArrowType.StraightLeft, 'StraightRight': Tessng.Online.GuideArrowType.StraightRight, 'StraightLeftRight': Tessng.Online.GuideArrowType.StraightLeftRight, 'LeftRight': Tessng.Online.GuideArrowType.LeftRight, 'Uturn': Tessng.Online.GuideArrowType.Uturn, 'StraightUturn': Tessng.Online.GuideArrowType.StraightUturn, 'LeftUturn': Tessng.Online.GuideArrowType.LeftUturn}
        Straight                 : Online.GuideArrowType = ... # 0x0
        Left                     : Online.GuideArrowType = ... # 0x1
        Right                    : Online.GuideArrowType = ... # 0x2
        StraightLeft             : Online.GuideArrowType = ... # 0x3
        StraightRight            : Online.GuideArrowType = ... # 0x4
        StraightLeftRight        : Online.GuideArrowType = ... # 0x5
        LeftRight                : Online.GuideArrowType = ... # 0x6
        Uturn                    : Online.GuideArrowType = ... # 0x7
        StraightUturn            : Online.GuideArrowType = ... # 0x8
        LeftUturn                : Online.GuideArrowType = ... # 0x9

    class Junction(Shiboken.Object):

        class FlowTimeInterval(Shiboken.Object):
            endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.Junction.FlowTimeInterval' objects>
            startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.Junction.FlowTimeInterval' objects>
            timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.Junction.FlowTimeInterval' objects>

            @typing.overload
            def __init__(self, FlowTimeInterval:Tessng.Online.Junction.FlowTimeInterval) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class FlowTurning(Shiboken.Object):
            flowTimeInterval: getset_descriptor # value = <attribute 'flowTimeInterval' of 'Tessng.Online.Junction.FlowTurning' objects>
            inputFlowValue: getset_descriptor # value = <attribute 'inputFlowValue' of 'Tessng.Online.Junction.FlowTurning' objects>
            pJunction: getset_descriptor # value = <attribute 'pJunction' of 'Tessng.Online.Junction.FlowTurning' objects>
            realFlow: getset_descriptor # value = <attribute 'realFlow' of 'Tessng.Online.Junction.FlowTurning' objects>
            relativeError: getset_descriptor # value = <attribute 'relativeError' of 'Tessng.Online.Junction.FlowTurning' objects>
            turningBaseInfo: getset_descriptor # value = <attribute 'turningBaseInfo' of 'Tessng.Online.Junction.FlowTurning' objects>

            @typing.overload
            def __init__(self, FlowTurning:Tessng.Online.Junction.FlowTurning) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class JunctionFlow(Shiboken.Object):
            timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.Junction.JunctionFlow' objects>
            turningFlows: getset_descriptor # value = <attribute 'turningFlows' of 'Tessng.Online.Junction.JunctionFlow' objects>

            @typing.overload
            def __init__(self, JunctionFlow:Tessng.Online.Junction.JunctionFlow) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class TurnningBaseInfo(Shiboken.Object):
            connectors: getset_descriptor # value = <attribute 'connectors' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            fromLink: getset_descriptor # value = <attribute 'fromLink' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            strDirection: getset_descriptor # value = <attribute 'strDirection' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            strTurnType: getset_descriptor # value = <attribute 'strTurnType' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            strTurningName: getset_descriptor # value = <attribute 'strTurningName' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            toLink: getset_descriptor # value = <attribute 'toLink' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            turningId: getset_descriptor # value = <attribute 'turningId' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            turningNum: getset_descriptor # value = <attribute 'turningNum' of 'Tessng.Online.Junction.TurnningBaseInfo' objects>
            pass

            @typing.overload
            def __init__(self, TurnningBaseInfo:Tessng.Online.Junction.TurnningBaseInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

    class Location(Shiboken.Object):
        angle: getset_descriptor # value = <attribute 'angle' of 'Tessng.Online.Location' objects>
        distToStart: getset_descriptor # value = <attribute 'distToStart' of 'Tessng.Online.Location' objects>
        leastDist: getset_descriptor # value = <attribute 'leastDist' of 'Tessng.Online.Location' objects>
        pLaneObject: getset_descriptor # value = <attribute 'pLaneObject' of 'Tessng.Online.Location' objects>
        point: getset_descriptor # value = <attribute 'point' of 'Tessng.Online.Location' objects>
        segmIndex: getset_descriptor # value = <attribute 'segmIndex' of 'Tessng.Online.Location' objects>

        @typing.overload
        def __init__(self, Location:Tessng.Online.Location) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class MotorOrNonmotor(object):
        Motor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Motor
        Nonmotor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Nonmotor
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.MotorOrNonmotor' objects>
        values: dict # value = {'Motor': Tessng.Online.MotorOrNonmotor.Motor, 'Nonmotor': Tessng.Online.MotorOrNonmotor.Nonmotor}
        Motor                    : Online.MotorOrNonmotor = ... # 0x0
        Nonmotor                 : Online.MotorOrNonmotor = ... # 0x1

    class ParkingLot(Shiboken.Object):

        class DynaParkDisInfo(Shiboken.Object):
            pIRouting: getset_descriptor # value = <attribute 'pIRouting' of 'Tessng.Online.ParkingLot.DynaParkDisInfo' objects>

            @typing.overload
            def __init__(self, DynaParkDisInfo:Tessng.Online.ParkingLot.DynaParkDisInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaParkRegionVehicleDisDetail(Shiboken.Object):
            parkingRegionID: getset_descriptor # value = <attribute 'parkingRegionID' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>
            parkingRoutingID: getset_descriptor # value = <attribute 'parkingRoutingID' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>
            parkingSelection: getset_descriptor # value = <attribute 'parkingSelection' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>
            parkingTimeDisId: getset_descriptor # value = <attribute 'parkingTimeDisId' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>
            prop: getset_descriptor # value = <attribute 'prop' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>
            vehicleType: getset_descriptor # value = <attribute 'vehicleType' of 'Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail' objects>

            @typing.overload
            def __init__(self, DynaParkRegionVehicleDisDetail:Tessng.Online.ParkingLot.DynaParkRegionVehicleDisDetail) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaParkingParkTime(Shiboken.Object):
            parkingTimeDisId: getset_descriptor # value = <attribute 'parkingTimeDisId' of 'Tessng.Online.ParkingLot.DynaParkingParkTime' objects>
            prop: getset_descriptor # value = <attribute 'prop' of 'Tessng.Online.ParkingLot.DynaParkingParkTime' objects>
            time: getset_descriptor # value = <attribute 'time' of 'Tessng.Online.ParkingLot.DynaParkingParkTime' objects>

            @typing.overload
            def __init__(self, DynaParkingParkTime:Tessng.Online.ParkingLot.DynaParkingParkTime) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaParkingRegion(Shiboken.Object):
            arrangeType: getset_descriptor # value = <attribute 'arrangeType' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            findParkingStallStrategy: getset_descriptor # value = <attribute 'findParkingStallStrategy' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            firstParkingStallAttract: getset_descriptor # value = <attribute 'firstParkingStallAttract' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            joinGap: getset_descriptor # value = <attribute 'joinGap' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            lastParkingStallAttract: getset_descriptor # value = <attribute 'lastParkingStallAttract' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            menaValue: getset_descriptor # value = <attribute 'menaValue' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            middleParkingStallAttract: getset_descriptor # value = <attribute 'middleParkingStallAttract' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            parkingSpeed: getset_descriptor # value = <attribute 'parkingSpeed' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            parkingStallPos: getset_descriptor # value = <attribute 'parkingStallPos' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            parkingType: getset_descriptor # value = <attribute 'parkingType' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            stallLength: getset_descriptor # value = <attribute 'stallLength' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            stallWidth: getset_descriptor # value = <attribute 'stallWidth' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>
            variance: getset_descriptor # value = <attribute 'variance' of 'Tessng.Online.ParkingLot.DynaParkingRegion' objects>

            @typing.overload
            def __init__(self, DynaParkingRegion:Tessng.Online.ParkingLot.DynaParkingRegion) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaParkingStall(Shiboken.Object):
            location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.ParkingLot.DynaParkingStall' objects>
            parkingRegionID: getset_descriptor # value = <attribute 'parkingRegionID' of 'Tessng.Online.ParkingLot.DynaParkingStall' objects>
            parkingStallType: getset_descriptor # value = <attribute 'parkingStallType' of 'Tessng.Online.ParkingLot.DynaParkingStall' objects>

            @typing.overload
            def __init__(self, DynaParkingStall:Tessng.Online.ParkingLot.DynaParkingStall) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaParkingTimeDis(Shiboken.Object):
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.ParkingLot.DynaParkingTimeDis' objects>
            name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.ParkingLot.DynaParkingTimeDis' objects>

            @typing.overload
            def __init__(self, DynaParkingTimeDis:Tessng.Online.ParkingLot.DynaParkingTimeDis) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaRoutingDisVehicleInfo(Shiboken.Object):
            endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.ParkingLot.DynaRoutingDisVehicleInfo' objects>
            startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.ParkingLot.DynaRoutingDisVehicleInfo' objects>
            pass

            @typing.overload
            def __init__(self, DynaRoutingDisVehicleInfo:Tessng.Online.ParkingLot.DynaRoutingDisVehicleInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

    class Pedestrian(Shiboken.Object):

        class GenPedestrianInfo(Shiboken.Object):
            pedestrianCompositionCode: getset_descriptor # value = <attribute 'pedestrianCompositionCode' of 'Tessng.Online.Pedestrian.GenPedestrianInfo' objects>
            pedestrianCount: getset_descriptor # value = <attribute 'pedestrianCount' of 'Tessng.Online.Pedestrian.GenPedestrianInfo' objects>
            timeInterval: getset_descriptor # value = <attribute 'timeInterval' of 'Tessng.Online.Pedestrian.GenPedestrianInfo' objects>

            @typing.overload
            def __init__(self, GenPedestrianInfo:Tessng.Online.Pedestrian.GenPedestrianInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class LayerInfo(Shiboken.Object):
            height: getset_descriptor # value = <attribute 'height' of 'Tessng.Online.Pedestrian.LayerInfo' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.Pedestrian.LayerInfo' objects>
            locked: getset_descriptor # value = <attribute 'locked' of 'Tessng.Online.Pedestrian.LayerInfo' objects>
            name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.Pedestrian.LayerInfo' objects>
            pedestrianRegions: getset_descriptor # value = <attribute 'pedestrianRegions' of 'Tessng.Online.Pedestrian.LayerInfo' objects>
            visible: getset_descriptor # value = <attribute 'visible' of 'Tessng.Online.Pedestrian.LayerInfo' objects>

            @typing.overload
            def __init__(self, LayerInfo:Tessng.Online.Pedestrian.LayerInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class PedestrianComposition(Shiboken.Object):
            compositionCode: getset_descriptor # value = <attribute 'compositionCode' of 'Tessng.Online.Pedestrian.PedestrianComposition' objects>
            compositionName: getset_descriptor # value = <attribute 'compositionName' of 'Tessng.Online.Pedestrian.PedestrianComposition' objects>
            compositionRatio: getset_descriptor # value = <attribute 'compositionRatio' of 'Tessng.Online.Pedestrian.PedestrianComposition' objects>

            @typing.overload
            def __init__(self, PedestrianComposition:Tessng.Online.Pedestrian.PedestrianComposition) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class PedestrianDecisionPointConfigInfo(Shiboken.Object):
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.Pedestrian.PedestrianDecisionPointConfigInfo' objects>
            pedestrianTrafficDistributionConfigInfo: getset_descriptor # value = <attribute 'pedestrianTrafficDistributionConfigInfo' of 'Tessng.Online.Pedestrian.PedestrianDecisionPointConfigInfo' objects>

            @typing.overload
            def __init__(self, PedestrianDecisionPointConfigInfo:Tessng.Online.Pedestrian.PedestrianDecisionPointConfigInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class PedestrianPathStartPointConfigInfo(Shiboken.Object):
            genPedestrianConfigInfo: getset_descriptor # value = <attribute 'genPedestrianConfigInfo' of 'Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo' objects>
            pedestrianTrafficDistributionConfigInfo: getset_descriptor # value = <attribute 'pedestrianTrafficDistributionConfigInfo' of 'Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo' objects>

            @typing.overload
            def __init__(self, PedestrianPathStartPointConfigInfo:Tessng.Online.Pedestrian.PedestrianPathStartPointConfigInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class PedestrianStatus(Shiboken.Object):
            acce: getset_descriptor # value = <attribute 'acce' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            elevation: getset_descriptor # value = <attribute 'elevation' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            mDirection: getset_descriptor # value = <attribute 'mDirection' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            pedestrianTypeId: getset_descriptor # value = <attribute 'pedestrianTypeId' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            pos: getset_descriptor # value = <attribute 'pos' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            radius: getset_descriptor # value = <attribute 'radius' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>
            speed: getset_descriptor # value = <attribute 'speed' of 'Tessng.Online.Pedestrian.PedestrianStatus' objects>

            @typing.overload
            def __init__(self, PedestrianStatus:Tessng.Online.Pedestrian.PedestrianStatus) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class PedestrianTrafficDistributionInfo(Shiboken.Object):
            timeInterval: getset_descriptor # value = <attribute 'timeInterval' of 'Tessng.Online.Pedestrian.PedestrianTrafficDistributionInfo' objects>
            trafficRatio: getset_descriptor # value = <attribute 'trafficRatio' of 'Tessng.Online.Pedestrian.PedestrianTrafficDistributionInfo' objects>
            pass

            @typing.overload
            def __init__(self, PedestrianTrafficDistributionInfo:Tessng.Online.Pedestrian.PedestrianTrafficDistributionInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

    class RoutingFlowRatio(Shiboken.Object):
        ratio: getset_descriptor # value = <attribute 'ratio' of 'Tessng.Online.RoutingFlowRatio' objects>
        routingID: getset_descriptor # value = <attribute 'routingID' of 'Tessng.Online.RoutingFlowRatio' objects>

        @typing.overload
        def __init__(self, RoutingFlowRatio:Tessng.Online.RoutingFlowRatio) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalContralParam(Shiboken.Object):
        crdinatedPhaseDiff: getset_descriptor # value = <attribute 'crdinatedPhaseDiff' of 'Tessng.Online.SignalContralParam' objects>
        crdinatedPhaseNum: getset_descriptor # value = <attribute 'crdinatedPhaseNum' of 'Tessng.Online.SignalContralParam' objects>
        day: getset_descriptor # value = <attribute 'day' of 'Tessng.Online.SignalContralParam' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.SignalContralParam' objects>
        mlPhaseGreen: getset_descriptor # value = <attribute 'mlPhaseGreen' of 'Tessng.Online.SignalContralParam' objects>
        period: getset_descriptor # value = <attribute 'period' of 'Tessng.Online.SignalContralParam' objects>
        redInterval: getset_descriptor # value = <attribute 'redInterval' of 'Tessng.Online.SignalContralParam' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.Online.SignalContralParam' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.SignalContralParam' objects>
        yellowInterval: getset_descriptor # value = <attribute 'yellowInterval' of 'Tessng.Online.SignalContralParam' objects>

        @typing.overload
        def __init__(self, SignalContralParam:Tessng.Online.SignalContralParam) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SignalPhaseColor(Shiboken.Object):
        color: getset_descriptor # value = <attribute 'color' of 'Tessng.Online.SignalPhaseColor' objects>
        mrIntervalByNow: getset_descriptor # value = <attribute 'mrIntervalByNow' of 'Tessng.Online.SignalPhaseColor' objects>
        mrIntervalSetted: getset_descriptor # value = <attribute 'mrIntervalSetted' of 'Tessng.Online.SignalPhaseColor' objects>
        phaseId: getset_descriptor # value = <attribute 'phaseId' of 'Tessng.Online.SignalPhaseColor' objects>
        phaseNumber: getset_descriptor # value = <attribute 'phaseNumber' of 'Tessng.Online.SignalPhaseColor' objects>
        signalGroupId: getset_descriptor # value = <attribute 'signalGroupId' of 'Tessng.Online.SignalPhaseColor' objects>

        @typing.overload
        def __init__(self, SignalPhaseColor:Tessng.Online.SignalPhaseColor) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class SimuConfig(Shiboken.Object):
        acceMultiples: getset_descriptor # value = <attribute 'acceMultiples' of 'Tessng.Online.SimuConfig' objects>
        simuAccuracy: getset_descriptor # value = <attribute 'simuAccuracy' of 'Tessng.Online.SimuConfig' objects>
        simuTimeInterval: getset_descriptor # value = <attribute 'simuTimeInterval' of 'Tessng.Online.SimuConfig' objects>
        threadCount: getset_descriptor # value = <attribute 'threadCount' of 'Tessng.Online.SimuConfig' objects>

        @typing.overload
        def __init__(self, SimuConfig:Tessng.Online.SimuConfig) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class TollStation(Shiboken.Object):

        class DynaEtcSpeedDetail(Shiboken.Object):
            limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng.Online.TollStation.DynaEtcSpeedDetail' objects>
            prop: getset_descriptor # value = <attribute 'prop' of 'Tessng.Online.TollStation.DynaEtcSpeedDetail' objects>

            @typing.overload
            def __init__(self, DynaEtcSpeedDetail:Tessng.Online.TollStation.DynaEtcSpeedDetail) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaEtcTollInfo(Shiboken.Object):
            etcRatio: getset_descriptor # value = <attribute 'etcRatio' of 'Tessng.Online.TollStation.DynaEtcTollInfo' objects>
            tollLaneID: getset_descriptor # value = <attribute 'tollLaneID' of 'Tessng.Online.TollStation.DynaEtcTollInfo' objects>
            tollRoutingID: getset_descriptor # value = <attribute 'tollRoutingID' of 'Tessng.Online.TollStation.DynaEtcTollInfo' objects>

            @typing.overload
            def __init__(self, DynaEtcTollInfo:Tessng.Online.TollStation.DynaEtcTollInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaMtcTimeDetail(Shiboken.Object):
            prop: getset_descriptor # value = <attribute 'prop' of 'Tessng.Online.TollStation.DynaMtcTimeDetail' objects>
            time: getset_descriptor # value = <attribute 'time' of 'Tessng.Online.TollStation.DynaMtcTimeDetail' objects>

            @typing.overload
            def __init__(self, DynaMtcTimeDetail:Tessng.Online.TollStation.DynaMtcTimeDetail) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaRoutingDisTollInfo(Shiboken.Object):
            endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.TollStation.DynaRoutingDisTollInfo' objects>
            startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.TollStation.DynaRoutingDisTollInfo' objects>

            @typing.overload
            def __init__(self, DynaRoutingDisTollInfo:Tessng.Online.TollStation.DynaRoutingDisTollInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaTollDisInfo(Shiboken.Object):
            pIRouting: getset_descriptor # value = <attribute 'pIRouting' of 'Tessng.Online.TollStation.DynaTollDisInfo' objects>

            @typing.overload
            def __init__(self, DynaTollDisInfo:Tessng.Online.TollStation.DynaTollDisInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaTollLane(Shiboken.Object):
            endTime: getset_descriptor # value = <attribute 'endTime' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            speedId: getset_descriptor # value = <attribute 'speedId' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            startTime: getset_descriptor # value = <attribute 'startTime' of 'Tessng.Online.TollStation.DynaTollLane' objects>
            tollPointLen: getset_descriptor # value = <attribute 'tollPointLen' of 'Tessng.Online.TollStation.DynaTollLane' objects>

            @typing.overload
            def __init__(self, DynaTollLane:Tessng.Online.TollStation.DynaTollLane) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaTollParkingTime(Shiboken.Object):
            vehicleTypeId: getset_descriptor # value = <attribute 'vehicleTypeId' of 'Tessng.Online.TollStation.DynaTollParkingTime' objects>

            @typing.overload
            def __init__(self, DynaTollParkingTime:Tessng.Online.TollStation.DynaTollParkingTime) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaTollParkingTimeDis(Shiboken.Object):
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.TollStation.DynaTollParkingTimeDis' objects>
            name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.TollStation.DynaTollParkingTimeDis' objects>

            @typing.overload
            def __init__(self, DynaTollParkingTimeDis:Tessng.Online.TollStation.DynaTollParkingTimeDis) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaTollPoint(Shiboken.Object):
            enable: getset_descriptor # value = <attribute 'enable' of 'Tessng.Online.TollStation.DynaTollPoint' objects>
            id: getset_descriptor # value = <attribute 'id' of 'Tessng.Online.TollStation.DynaTollPoint' objects>
            location: getset_descriptor # value = <attribute 'location' of 'Tessng.Online.TollStation.DynaTollPoint' objects>
            timeDisId: getset_descriptor # value = <attribute 'timeDisId' of 'Tessng.Online.TollStation.DynaTollPoint' objects>
            tollLaneId: getset_descriptor # value = <attribute 'tollLaneId' of 'Tessng.Online.TollStation.DynaTollPoint' objects>
            tollType: getset_descriptor # value = <attribute 'tollType' of 'Tessng.Online.TollStation.DynaTollPoint' objects>

            @typing.overload
            def __init__(self, DynaTollPoint:Tessng.Online.TollStation.DynaTollPoint) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaVehicleTollDisDetail(Shiboken.Object):
            prop: getset_descriptor # value = <attribute 'prop' of 'Tessng.Online.TollStation.DynaVehicleTollDisDetail' objects>
            tollLaneID: getset_descriptor # value = <attribute 'tollLaneID' of 'Tessng.Online.TollStation.DynaVehicleTollDisDetail' objects>
            tollRoutingID: getset_descriptor # value = <attribute 'tollRoutingID' of 'Tessng.Online.TollStation.DynaVehicleTollDisDetail' objects>

            @typing.overload
            def __init__(self, DynaVehicleTollDisDetail:Tessng.Online.TollStation.DynaVehicleTollDisDetail) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

        class DynaVehicleTollDisInfo(Shiboken.Object):
            vehicleType: getset_descriptor # value = <attribute 'vehicleType' of 'Tessng.Online.TollStation.DynaVehicleTollDisInfo' objects>
            pass

            @typing.overload
            def __init__(self, DynaVehicleTollDisInfo:Tessng.Online.TollStation.DynaVehicleTollDisInfo) -> None: ...

            @staticmethod
            def __copy__() -> None: ...

    class VehiComposition(Shiboken.Object):
        proportion: getset_descriptor # value = <attribute 'proportion' of 'Tessng.Online.VehiComposition' objects>
        vehiTypeCode: getset_descriptor # value = <attribute 'vehiTypeCode' of 'Tessng.Online.VehiComposition' objects>

        @typing.overload
        def __init__(self, VehiComposition:Tessng.Online.VehiComposition) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoAggregated(Shiboken.Object):
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.Online.VehiInfoAggregated' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.Online.VehiInfoAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiInfoAggregated' objects>
        occupancy: getset_descriptor # value = <attribute 'occupancy' of 'Tessng.Online.VehiInfoAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiInfoAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiInfoAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiInfoAggregated' objects>

        @typing.overload
        def __init__(self, VehiInfoAggregated:Tessng.Online.VehiInfoAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiInfoCollected(Shiboken.Object):
        acce: getset_descriptor # value = <attribute 'acce' of 'Tessng.Online.VehiInfoCollected' objects>
        avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng.Online.VehiInfoCollected' objects>
        collectorId: getset_descriptor # value = <attribute 'collectorId' of 'Tessng.Online.VehiInfoCollected' objects>
        desirSpeed: getset_descriptor # value = <attribute 'desirSpeed' of 'Tessng.Online.VehiInfoCollected' objects>
        distFront: getset_descriptor # value = <attribute 'distFront' of 'Tessng.Online.VehiInfoCollected' objects>
        drivInterval: getset_descriptor # value = <attribute 'drivInterval' of 'Tessng.Online.VehiInfoCollected' objects>
        intervalFront: getset_descriptor # value = <attribute 'intervalFront' of 'Tessng.Online.VehiInfoCollected' objects>
        length: getset_descriptor # value = <attribute 'length' of 'Tessng.Online.VehiInfoCollected' objects>
        simuInterval: getset_descriptor # value = <attribute 'simuInterval' of 'Tessng.Online.VehiInfoCollected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiInfoCollected' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.Online.VehiInfoCollected' objects>

        @typing.overload
        def __init__(self, VehiInfoCollected:Tessng.Online.VehiInfoCollected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueAggregated(Shiboken.Object):
        avgQueueLength: getset_descriptor # value = <attribute 'avgQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        avgVehiCount: getset_descriptor # value = <attribute 'avgVehiCount' of 'Tessng.Online.VehiQueueAggregated' objects>
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.Online.VehiQueueAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiQueueAggregated' objects>
        maxQueueLength: getset_descriptor # value = <attribute 'maxQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        minQueueLength: getset_descriptor # value = <attribute 'minQueueLength' of 'Tessng.Online.VehiQueueAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiQueueAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiQueueAggregated' objects>

        @typing.overload
        def __init__(self, VehiQueueAggregated:Tessng.Online.VehiQueueAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiQueueCounted(Shiboken.Object):
        counterId: getset_descriptor # value = <attribute 'counterId' of 'Tessng.Online.VehiQueueCounted' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiQueueCounted' objects>
        queueLength: getset_descriptor # value = <attribute 'queueLength' of 'Tessng.Online.VehiQueueCounted' objects>
        simuTime: getset_descriptor # value = <attribute 'simuTime' of 'Tessng.Online.VehiQueueCounted' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiQueueCounted' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiQueueCounted' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiQueueCounted' objects>

        @typing.overload
        def __init__(self, VehiQueueCounted:Tessng.Online.VehiQueueCounted) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelAggregated(Shiboken.Object):
        avgDelay: getset_descriptor # value = <attribute 'avgDelay' of 'Tessng.Online.VehiTravelAggregated' objects>
        avgTravelDistance: getset_descriptor # value = <attribute 'avgTravelDistance' of 'Tessng.Online.VehiTravelAggregated' objects>
        avgTravelTime: getset_descriptor # value = <attribute 'avgTravelTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.Online.VehiTravelAggregated' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        timeId: getset_descriptor # value = <attribute 'timeId' of 'Tessng.Online.VehiTravelAggregated' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiTravelAggregated' objects>
        vehiCount: getset_descriptor # value = <attribute 'vehiCount' of 'Tessng.Online.VehiTravelAggregated' objects>

        @typing.overload
        def __init__(self, VehiTravelAggregated:Tessng.Online.VehiTravelAggregated) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiTravelDetected(Shiboken.Object):
        delay: getset_descriptor # value = <attribute 'delay' of 'Tessng.Online.VehiTravelDetected' objects>
        desireSpeed: getset_descriptor # value = <attribute 'desireSpeed' of 'Tessng.Online.VehiTravelDetected' objects>
        detectedId: getset_descriptor # value = <attribute 'detectedId' of 'Tessng.Online.VehiTravelDetected' objects>
        fromTime: getset_descriptor # value = <attribute 'fromTime' of 'Tessng.Online.VehiTravelDetected' objects>
        toTime: getset_descriptor # value = <attribute 'toTime' of 'Tessng.Online.VehiTravelDetected' objects>
        travelDistance: getset_descriptor # value = <attribute 'travelDistance' of 'Tessng.Online.VehiTravelDetected' objects>
        travelTime: getset_descriptor # value = <attribute 'travelTime' of 'Tessng.Online.VehiTravelDetected' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiTravelDetected' objects>

        @typing.overload
        def __init__(self, VehiTravelDetected:Tessng.Online.VehiTravelDetected) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleCompositionList(Shiboken.Object):
        lVehiComposition: getset_descriptor # value = <attribute 'lVehiComposition' of 'Tessng.Online.VehicleCompositionList' objects>
        name: getset_descriptor # value = <attribute 'name' of 'Tessng.Online.VehicleCompositionList' objects>
        vehicleConsCode: getset_descriptor # value = <attribute 'vehicleConsCode' of 'Tessng.Online.VehicleCompositionList' objects>

        @typing.overload
        def __init__(self, VehicleCompositionList:Tessng.Online.VehicleCompositionList) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleParking(Shiboken.Object):
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.Online.VehicleParking' objects>
        mrDistToEnd: getset_descriptor # value = <attribute 'mrDistToEnd' of 'Tessng.Online.VehicleParking' objects>
        mrLaneId: getset_descriptor # value = <attribute 'mrLaneId' of 'Tessng.Online.VehicleParking' objects>
        mrLaneNumber: getset_descriptor # value = <attribute 'mrLaneNumber' of 'Tessng.Online.VehicleParking' objects>
        mrParkingCount: getset_descriptor # value = <attribute 'mrParkingCount' of 'Tessng.Online.VehicleParking' objects>
        mrRoadId: getset_descriptor # value = <attribute 'mrRoadId' of 'Tessng.Online.VehicleParking' objects>
        mrStartParkBatchNumber: getset_descriptor # value = <attribute 'mrStartParkBatchNumber' of 'Tessng.Online.VehicleParking' objects>
        mrStartParkTime: getset_descriptor # value = <attribute 'mrStartParkTime' of 'Tessng.Online.VehicleParking' objects>
        mrToLaneId: getset_descriptor # value = <attribute 'mrToLaneId' of 'Tessng.Online.VehicleParking' objects>
        roadType: getset_descriptor # value = <attribute 'roadType' of 'Tessng.Online.VehicleParking' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehicleParking' objects>

        @typing.overload
        def __init__(self, VehicleParking:Tessng.Online.VehicleParking) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehiclePosition(Shiboken.Object):
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.Online.VehiclePosition' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.Online.VehiclePosition' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.Online.VehiclePosition' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.Online.VehiclePosition' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.Online.VehiclePosition' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehiclePosition' objects>

        @typing.overload
        def __init__(self, VehiclePosition:Tessng.Online.VehiclePosition) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class VehicleStatus(Shiboken.Object):
        mColor: getset_descriptor # value = <attribute 'mColor' of 'Tessng.Online.VehicleStatus' objects>
        mEuler: getset_descriptor # value = <attribute 'mEuler' of 'Tessng.Online.VehicleStatus' objects>
        mPoint: getset_descriptor # value = <attribute 'mPoint' of 'Tessng.Online.VehicleStatus' objects>
        mrAcce: getset_descriptor # value = <attribute 'mrAcce' of 'Tessng.Online.VehicleStatus' objects>
        mrAngle: getset_descriptor # value = <attribute 'mrAngle' of 'Tessng.Online.VehicleStatus' objects>
        mrBatchNumber: getset_descriptor # value = <attribute 'mrBatchNumber' of 'Tessng.Online.VehicleStatus' objects>
        mrDatetime: getset_descriptor # value = <attribute 'mrDatetime' of 'Tessng.Online.VehicleStatus' objects>
        mrDrivDistance: getset_descriptor # value = <attribute 'mrDrivDistance' of 'Tessng.Online.VehicleStatus' objects>
        mrLaneNumber: getset_descriptor # value = <attribute 'mrLaneNumber' of 'Tessng.Online.VehicleStatus' objects>
        mrLength: getset_descriptor # value = <attribute 'mrLength' of 'Tessng.Online.VehicleStatus' objects>
        mrParkingCount: getset_descriptor # value = <attribute 'mrParkingCount' of 'Tessng.Online.VehicleStatus' objects>
        mrRoadId: getset_descriptor # value = <attribute 'mrRoadId' of 'Tessng.Online.VehicleStatus' objects>
        mrSpeed: getset_descriptor # value = <attribute 'mrSpeed' of 'Tessng.Online.VehicleStatus' objects>
        mrWidth: getset_descriptor # value = <attribute 'mrWidth' of 'Tessng.Online.VehicleStatus' objects>
        roadType: getset_descriptor # value = <attribute 'roadType' of 'Tessng.Online.VehicleStatus' objects>
        startLinkId: getset_descriptor # value = <attribute 'startLinkId' of 'Tessng.Online.VehicleStatus' objects>
        startSimuTime: getset_descriptor # value = <attribute 'startSimuTime' of 'Tessng.Online.VehicleStatus' objects>
        vehiId: getset_descriptor # value = <attribute 'vehiId' of 'Tessng.Online.VehicleStatus' objects>
        vehiType: getset_descriptor # value = <attribute 'vehiType' of 'Tessng.Online.VehicleStatus' objects>
        pass
    Left: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Left
    LeftRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.LeftRight
    LeftUturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.LeftUturn
    Motor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Motor
    Nonmotor: Tessng.Online.MotorOrNonmotor # value = Tessng.Online.MotorOrNonmotor.Nonmotor
    Right: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Right
    Straight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Straight
    StraightLeft: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightLeft
    StraightLeftRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightLeftRight
    StraightRight: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightRight
    StraightUturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.StraightUturn
    Uturn: Tessng.Online.GuideArrowType # value = Tessng.Online.GuideArrowType.Uturn

        @typing.overload
        def __init__(self, VehicleStatus:Tessng.Online.VehicleStatus) -> None: ...

        @staticmethod
        def __copy__() -> None: ...


class PyCustomerNet(Tessng.CustomerNet):

    def __init__(self) -> None: ...

    def afterLinkVertexMove(self, pILink:Tessng.ILink, vertexIndex:int, pressPoint:PySide2.QtCore.QPointF, releasePoint:PySide2.QtCore.QPointF) -> None: ...
    def afterLoadNet(self) -> None: ...
    def afterViewKeyPressEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewKeyReleaseEvent(self, event:PySide2.QtGui.QKeyEvent) -> None: ...
    def afterViewMouseDoubleClickEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseMoveEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMousePressEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewMouseReleaseEvent(self, event:PySide2.QtGui.QMouseEvent) -> None: ...
    def afterViewResizeEvent(self, event:PySide2.QtGui.QResizeEvent) -> None: ...
    def afterViewScrollContentsBy(self, dx:int, dy:int) -> None: ...
    def afterViewWheelEvent(self, event:PySide2.QtGui.QWheelEvent) -> None: ...
    def beforeLoadNet(self) -> None: ...
    def connectorAreaBrushColor(self, connAreaId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def curvatureMinDist(self, itemType:int, itemId:int, minDist:float) -> bool: ...
    def curvaturePrecision(self, itemType:int, itemId:int, extend1:float, extend2:float, precision:float) -> bool: ...
    def customerTableDDL(self) -> typing.Dict: ...
    def deleteCustomerData(self) -> None: ...
    def insertCustomerData(self) -> None: ...
    def isDrawLaneCenterLine(self, laneId:int) -> bool: ...
    def isDrawLinkCenterLine(self, linkId:int) -> bool: ...
    def isDrawLinkCorner(self, linkId:int) -> bool: ...
    def isPermitForCustDraw(self) -> bool: ...
    def labelNameAndFont(self, itemType:int, itemId:int, outPropName:int, outFontSize:float) -> None: ...
    def laneBrushAndPen(self, laneId:int, brush:PySide2.QtGui.QBrush, pen:PySide2.QtGui.QPen) -> bool: ...
    def laneType(self, lType:typing.Sequence) -> bool: ...
    def linkBrushColor(self, linkId:int, color:PySide2.QtGui.QColor) -> bool: ...
    def linkBuildGLanes(self, pILink:Tessng.ILink) -> bool: ...
    def linkType(self, lType:typing.Sequence) -> bool: ...
    def netFileSuffix(self, suffix:str) -> bool: ...
    def paint(self, itemType:int, itemId:int, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintLaneObject(self, pILaneObj:Tessng.ILaneObject, painter:PySide2.QtGui.QPainter) -> bool: ...
    def ref_curvatureMinDist(self, itemType:int, itemId:int, ref_minDist:Tessng.objreal) -> bool: ...
    def ref_curvaturePrecision(self, itemType:int, itemId:int, ref_extend1:Tessng.objreal, ref_extend2:Tessng.objreal, ref_precision:Tessng.objreal) -> bool: ...
    def ref_labelNameAndFont(self, itemType:int, itemId:int, ref_outPropName:Tessng.objint, ref_outFontSize:Tessng.objreal) -> None: ...
    def ref_netFileSuffix(self, ref_suffix:Tessng.objstring) -> bool: ...


class PyCustomerSimulator(Tessng.CustomerSimulator):

    def __init__(self) -> None: ...

    def afterCalcTracingType(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterDistriRouting(self, pIVehicle:Tessng.IVehicle, pIDeciPoint:Tessng.IDecisionPoint, pIRouting:Tessng.IRouting) -> None: ...
    def afterOneStep(self) -> None: ...
    def afterPause(self) -> None: ...
    def afterStart(self) -> None: ...
    def afterStep(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def afterStop(self) -> None: ...
    def afterStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeCalcLampColor(self, keepOn:bool) -> bool: ...
    def beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, keepOn:bool) -> None: ...
    def beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextPoint(self, pIVehicle:Tessng.IVehicle, keepOn:bool) -> None: ...
    def beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, keepOn:bool) -> None: ...
    def beforeParking(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeStart(self, keepOn:bool) -> None: ...
    def beforeStopVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, bKeepOn:bool) -> None: ...
    def boundingRect(self, pIVehicle:Tessng.IVehicle, outRect:PySide2.QtCore.QRectF) -> bool: ...
    def busArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int) -> None: ...
    def busOnArriving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine) -> None: ...
    def busOnLeaving(self, pIVehicle:Tessng.IVehicle, pStationLine:Tessng.IBusStationLine, alightingCount:int, alightingTime:int, boardingCount:int, boardingTime:int, passengerCount:int) -> None: ...
    @typing.overload
    def calcAcce(self, pIVehicle:Tessng.IVehicle, acce:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, dist:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, dist:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def calcDynaDispatchParameters(self) -> typing.List: ...
    def calcDynaFlowRatioParameters(self) -> typing.List: ...
    def calcDynaSignalContralParameters(self) -> typing.List: ...
    def calcLampColor(self, pSignalLamp:Tessng.ISignalLamp) -> bool: ...
    def calcLimitedLaneNumber(self, pIVehicle:Tessng.IVehicle) -> typing.List: ...
    @typing.overload
    def calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, inOutLimitedSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, outSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def calcVehicleEuler(self, pIVehicle:Tessng.IVehicle, bPosiDire:bool=...) -> PySide2.QtGui.QVector3D: ...
    def candidateLaneConnector(self, pIVehicle:Tessng.IVehicle, pCurrLaneConnector:Tessng.ILaneConnector) -> Tessng.ILaneConnector: ...
    def candidateLaneConnectors(self, pIVehicle:Tessng.IVehicle, lInLC:typing.Sequence) -> typing.List: ...
    def checkIfErrorForSelfOrOthers(self, pIVehicle:Tessng.IVehicle) -> Tessng.IVehicle: ...
    def duringOneStep(self) -> None: ...
    def exportVehiTrace(self, dirPath:str) -> None: ...
    def initVehicle(self, pIVehicle:Tessng.IVehicle) -> None: ...
    def isCalcDistToReduceArea(self) -> bool: ...
    def isCalcVehicleVector3D(self) -> bool: ...
    def isExportCollecterInfo(self) -> bool: ...
    def isPassbyEventZone(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def isStopDriving(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def leaveForNextLaneObj(self, pIVehicle:Tessng.IVehicle, pCurrLaneObj:Tessng.ILaneObject, pNextLaneObj:Tessng.ILaneObject) -> None: ...
    def leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, s:float) -> bool: ...
    def nextPoint(self, pIVehicle:Tessng.IVehicle, bResult:bool) -> bool: ...
    def paintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> bool: ...
    def paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, inOutRotation:float) -> bool: ...
    def reCalcAngle(self, pIVehicle:Tessng.IVehicle, outAngle:float) -> bool: ...
    def reCalcDismissChangeLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToLeftLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightFreely(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def reCalcToRightLane(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    @typing.overload
    def reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, inOutDesirSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reCheckIfError(self, pIVehicle:Tessng.IVehicle, bError:bool) -> bool: ...
    def rePaintVehicle(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter) -> None: ...
    @typing.overload
    def reSetAcce(self, pIVehicle:Tessng.IVehicle, inOutAcce:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetChangeLaneFreelyParam(self, pIVehicle:Tessng.IVehicle, safeTime:int, ultimateDist:float, targetRParam:float) -> bool: ...
    @typing.overload
    def reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:float, s0:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    @typing.overload
    def reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, inOutSafeInterval:float, inOutSafeDistance:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetFollowingType(self, pIVehicle:Tessng.IVehicle, outTypeValue:int) -> bool: ...
    def reSetSimuResultDir(self, inOutResultDir:str) -> bool: ...
    @typing.overload
    def reSetSpeed(self, pIVehicle:Tessng.IVehicle, inOutSpeed:float, unit:Tessng.UnitOfMeasure) -> bool: ...
    def reSetVehicleFront(self, pIVehicle:Tessng.IVehicle, pVehiFront:Tessng.IVehicle) -> bool: ...
    def recentTimeOfSpeedAndPos(self, timeInterval:int) -> bool: ...
    def ref_beforeCalcLampColor(self, ref_keepOn:Tessng.objbool) -> bool: ...
    def ref_beforeCreateGVehiclesForBusLine(self, pBusLine:Tessng.IBusLine, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeMergingToLane(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextPoint(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeNextRoad(self, pIVehicle:Tessng.IVehicle, pRoad:PySide2.QtWidgets.QGraphicsItem, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeStart(self, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeToLeftFreely(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_beforeToRightFreely(self, pIVehicle:Tessng.IVehicle, ref_keepOn:Tessng.objbool) -> None: ...
    def ref_calcAcce(self, pIVehicle:Tessng.IVehicle, acce:Tessng.objreal) -> bool: ...
    def ref_calcAcce_unit(self, pIVehicle:Tessng.IVehicle, ref_acce:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_calcChangeLaneSafeDist(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> bool: ...
    def ref_calcChangeLaneSafeDist_unit(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_calcDistToEventObj(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal) -> bool: ...
    def ref_calcDistToEventObj_unit(self, pIVehicle:Tessng.IVehicle, ref_dist:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_calcMaxLimitedSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutLimitedSpeed:Tessng.objreal) -> bool: ...
    def ref_calcMaxLimitedSpeed_unit(self, pIVehicle:Tessng.IVehicle, ref_inOutLimitedSpeed:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_calcSpeedLimitByLane(self, pILink:Tessng.ILink, laneNumber:int, ref_outSpeed:Tessng.objreal) -> bool: ...
    def ref_calcSpeedLimitByLane_unit(self, pILink:Tessng.ILink, laneNumber:int, ref_outSpeed:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_leaveOffChangingTrace(self, pIVehicle:Tessng.IVehicle, differ:float, ref_s:Tessng.objreal) -> bool: ...
    def ref_nextPoint(self, pIVehicle:Tessng.IVehicle, ref_bResult:Tessng.objbool) -> bool: ...
    def ref_paintVehicleWithRotation(self, pIVehicle:Tessng.IVehicle, painter:PySide2.QtGui.QPainter, ref_inOutRotation:Tessng.objreal) -> bool: ...
    def ref_reCalcAngle(self, pIVehicle:Tessng.IVehicle, ref_outAngle:Tessng.objreal) -> bool: ...
    def ref_reCalcdesirSpeed(self, pIVehicle:Tessng.IVehicle, ref_desirSpeed:Tessng.objreal) -> bool: ...
    def ref_reCalcdesirSpeed_unit(self, pIVehicle:Tessng.IVehicle, ref_inOutDesirSpeed:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_reCheckIfError(self, pIVehicle:Tessng.IVehicle, ref_inOutError:Tessng.objbool) -> bool: ...
    def ref_reSetAcce(self, pIVehicle:Tessng.IVehicle, ref_inOutAcce:Tessng.objreal) -> bool: ...
    def ref_reSetAcce_unit(self, pIVehicle:Tessng.IVehicle, ref_inOutAcce:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_reSetChangeLaneFreelyParam(self, pIVehicle:Tessng.IVehicle, ref_safeTime:Tessng.objint, ref_ultimateDist:Tessng.objreal, ref_targetRParam:Tessng.objreal) -> bool: ...
    def ref_reSetDistanceFront(self, pIVehicle:Tessng.IVehicle, distance:Tessng.objreal, s0:Tessng.objreal) -> bool: ...
    def ref_reSetDistanceFront_unit(self, pIVehicle:Tessng.IVehicle, ref_distance:Tessng.objreal, ref_s0:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_reSetFollowingParam(self, pIVehicle:Tessng.IVehicle, ref_inOutSafeInterval:Tessng.objreal, ref_inOutSafeDistance:Tessng.objreal) -> bool: ...
    def ref_reSetFollowingParam_unit(self, pIVehicle:Tessng.IVehicle, ref_inOutSafeInterval:Tessng.objreal, ref_inOutSafeDistance:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_reSetFollowingType(self, pIVehicle:Tessng.IVehicle, ref_outTypeValue:Tessng.objint) -> bool: ...
    def ref_reSetSimuResultDir(self, inOutResultDir:Tessng.objstring) -> bool: ...
    def ref_reSetSpeed(self, pIVehicle:Tessng.IVehicle, ref_inOutSpeed:Tessng.objreal) -> bool: ...
    def ref_reSetSpeed_unit(self, pIVehicle:Tessng.IVehicle, ref_inOutSpeed:Tessng.objreal, ref_unit:Tessng.objUnitOfMeasure) -> bool: ...
    def ref_recentTimeOfSpeedAndPos(self, timeInterval:Tessng.objint) -> bool: ...
    def shape(self, pIVehicle:Tessng.IVehicle, outShape:PySide2.QtGui.QPainterPath) -> bool: ...
    def signalPhaseOnPeriodBegin(self, pIPhase:Tessng.ISignalPhase) -> None: ...
    def travelOnChangingTrace(self, pIVehicle:Tessng.IVehicle) -> bool: ...
    def vehiRunInfo(self, pIVehicle:Tessng.IVehicle) -> str: ...
    def writeSimuResult(self, dataDir:str) -> None: ...


class SimuInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def acceMultiples(self) -> int: ...
    def acceMultiplesReally(self) -> float: ...
    def allPedestrianStarted(self) -> typing.List: ...
    def allVehiStarted(self) -> typing.List: ...
    def allVehicle(self) -> typing.List: ...
    def batchIntervalReally(self) -> float: ...
    def batchNumber(self) -> int: ...
    def byCpuTime(self) -> bool: ...
    def catchSnapshotAsString(self) -> str: ...
    def createBus(self, pBusLine:Tessng.IBusLine, startSimuDateTime:float) -> Tessng.IVehicle: ...
    def createGVehicle(self, dynaVehi:Tessng.Online.DynaVehiParam, bStarted:bool=..., bInitLaneObject:bool=...) -> Tessng.IVehicle: ...
    def getPedestriansStatusByRegionId(self, regionId:int) -> typing.List: ...
    def getSignalPhasesColor(self) -> typing.List: ...
    def getVehiTrace(self, vehiId:int, unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def getVehicle(self, vehiId:int) -> Tessng.IVehicle: ...
    def getVehisInfoAggregated(self) -> typing.List: ...
    def getVehisInfoCollected(self) -> typing.List: ...
    def getVehisQueueAggregated(self) -> typing.List: ...
    def getVehisQueueCounted(self) -> typing.List: ...
    def getVehisStatus(self, batchNumber:int=..., unit:Tessng.UnitOfMeasure=...) -> typing.List: ...
    def getVehisTravelAggregated(self) -> typing.List: ...
    def getVehisTravelDetected(self) -> typing.List: ...
    def isPausing(self) -> bool: ...
    def isRecordPedestrianTrace(self) -> bool: ...
    def isRecordTrace(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def loadSnapshotFromString(self, data:str) -> bool: ...
    def pauseSimu(self) -> None: ...
    def pauseSimuOrNot(self) -> None: ...
    def queueRecently(self, queueCounterId:int, queueLength:float, vehiCount:int, unit:Tessng.UnitOfMeasure=...) -> bool: ...
    def setAcceMultiples(self, multiples:int) -> None: ...
    def setByCpuTime(self, bByCpuTime:bool) -> bool: ...
    def setIsRecordPedestrianTrace(self, bRecord:bool) -> None: ...
    def setIsRecordTrace(self, bRecord:bool) -> None: ...
    def setSimuAccuracy(self, accuracy:int) -> None: ...
    def setSimuIntervalScheming(self, interval:int) -> None: ...
    def setThreadCount(self, count:int) -> None: ...
    def simuAccuracy(self) -> int: ...
    def simuIntervalScheming(self) -> int: ...
    def simuTimeIntervalWithAcceMutiples(self) -> int: ...
    def startMSecsSinceEpoch(self) -> int: ...
    def startSimu(self) -> None: ...
    def stepSimu(self) -> None: ...
    def stopMSecsSinceEpoch(self) -> int: ...
    def stopSimu(self) -> None: ...
    def stopVehicleDriving(self, pVehicle:Tessng.IVehicle) -> None: ...
    def timeOnBatchNumber(self, batchNumber:int) -> int: ...
    def vehiCountRunning(self) -> int: ...
    def vehiCountTotal(self) -> int: ...
    def vehicleDrivingManagerTask(self) -> Tessng.IVehicleDrivingManagerTask: ...
    def vehicleDrivingTasks(self) -> typing.List: ...
    def vehisInConnector(self, connectorId:int) -> typing.List: ...
    def vehisInLane(self, laneId:int) -> typing.List: ...
    def vehisInLaneConnector(self, connectorId:int, fromLaneId:int, toLaneId:int) -> typing.List: ...
    def vehisInLink(self, linkId:int) -> typing.List: ...


class StairType(object):
    conveyer: Tessng.StairType # value = Tessng.StairType.conveyer
    escalator: Tessng.StairType # value = Tessng.StairType.escalator
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.StairType' objects>
    staircase: Tessng.StairType # value = Tessng.StairType.staircase
    values: dict # value = {'escalator': Tessng.StairType.escalator, 'staircase': Tessng.StairType.staircase, 'conveyer': Tessng.StairType.conveyer}
    escalator                : StairType = ... # 0x0
    staircase                : StairType = ... # 0x1
    conveyer                 : StairType = ... # 0x2


class TessInterface(PySide2.QtCore.QObject):
    staticMetaObject: PySide2.QtCore.QMetaObject

    def __init__(self) -> None: ...

    def config(self) -> typing.Dict: ...
    def guiInterface(self) -> Tessng.GuiInterface: ...
    def initData(self) -> None: ...
    def loadPluginFromMem(self, pPlugin:Tessng.TessPlugin) -> bool: ...
    def netInterface(self) -> Tessng.NetInterface: ...
    def releasePlugins(self) -> None: ...
    def setConfigProperty(self, key:str, value:typing.Any) -> None: ...
    def simuInterface(self) -> Tessng.SimuInterface: ...
    def workerKey(self) -> int: ...


class TessInterfaces(Shiboken.Object):

    def __init__(self) -> None: ...


class TessPlugin(Shiboken.Object):

    def __init__(self, name:str=..., description:str=..., category:str=..., version:str=..., uuid:str=..., valicode:str=...) -> None: ...

    def callMethod(self, methodName:str, params:typing.Sequence) -> None: ...
    def category(self) -> str: ...
    @typing.overload
    def certificate(self, account:str, code:int, grade:int, netFilePath:str) -> bool: ...
    def customerNet(self) -> Tessng.CustomerNet: ...
    def customerSimulator(self) -> Tessng.CustomerSimulator: ...
    def description(self) -> str: ...
    def enableActions(self) -> None: ...
    def init(self) -> None: ...
    def isChecked(self) -> bool: ...
    @staticmethod
    def isPlugin() -> bool: ...
    def library(self) -> str: ...
    def name(self) -> str: ...
    def pluginFileBaseName(self) -> str: ...
    def pluginFileName(self) -> str: ...
    def pluginFileSuffix(self) -> str: ...
    def projName(self) -> str: ...
    def setConfigProperty(self, key:str, value:PySide2.QtCore.QJsonValue) -> None: ...
    @staticmethod
    def setIsPlugin(isPlugin:bool) -> None: ...
    def setLibrary(self, lib:str) -> None: ...
    def setTessngConfig(self, obj:typing.Dict) -> None: ...
    def setTessngDir(self, dir:str) -> None: ...
    def setWorkspace(self, workspace:str) -> None: ...
    def tessngConfig(self) -> typing.Dict: ...
    def tessngDir(self) -> str: ...
    def unEnableActions(self) -> None: ...
    def unload(self) -> None: ...
    def uuid(self) -> str: ...
    def valiCode(self) -> str: ...
    def version(self) -> str: ...
    def workspace(self) -> str: ...


class TessngFactory(Shiboken.Object):

    def __init__(self) -> None: ...

    def activeSoftware(self, certDir:str) -> bool: ...
    def build(self, pPlugin:Tessng.TessPlugin, jsonConfig:typing.Dict=...) -> PySide2.QtWidgets.QMainWindow: ...


class UnitOfMeasure(object):
    Default: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Default
    Metric: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Metric
    Pixel: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Pixel
    name: getset_descriptor # value = <attribute 'name' of 'Tessng.UnitOfMeasure' objects>
    values: dict # value = {'Default': Tessng.UnitOfMeasure.Default, 'Pixel': Tessng.UnitOfMeasure.Pixel, 'Metric': Tessng.UnitOfMeasure.Metric}
    Default                  : UnitOfMeasure = ... # 0x0
    Pixel                    : UnitOfMeasure = ... # 0x1
    Metric                   : UnitOfMeasure = ... # 0x2


class VehicleOtherPropertyType(Shiboken.Object):
    IntersectionAcceDeciderChangeAcce = 1002
    VehicleOriginalColor = 1001

    @typing.overload
    def __init__(self, VehicleOtherPropertyType:Tessng.VehicleOtherPropertyType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _Connector(Shiboken.Object):
    color: getset_descriptor # value = <attribute 'color' of 'Tessng._Connector' objects>
    connAreaId: getset_descriptor # value = <attribute 'connAreaId' of 'Tessng._Connector' objects>
    connID: getset_descriptor # value = <attribute 'connID' of 'Tessng._Connector' objects>
    connName: getset_descriptor # value = <attribute 'connName' of 'Tessng._Connector' objects>
    curvature: getset_descriptor # value = <attribute 'curvature' of 'Tessng._Connector' objects>
    desiredSpeed: getset_descriptor # value = <attribute 'desiredSpeed' of 'Tessng._Connector' objects>
    ext1: getset_descriptor # value = <attribute 'ext1' of 'Tessng._Connector' objects>
    ext2: getset_descriptor # value = <attribute 'ext2' of 'Tessng._Connector' objects>
    extSize: getset_descriptor # value = <attribute 'extSize' of 'Tessng._Connector' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Connector' objects>
    length: getset_descriptor # value = <attribute 'length' of 'Tessng._Connector' objects>
    limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng._Connector' objects>
    nonLinearCoefficient: getset_descriptor # value = <attribute 'nonLinearCoefficient' of 'Tessng._Connector' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Connector' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Connector' objects>
    roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng._Connector' objects>

    @typing.overload
    def __init__(self, _Connector:Tessng._Connector) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _DecisionPoint(Shiboken.Object):
    X: getset_descriptor # value = <attribute 'X' of 'Tessng._DecisionPoint' objects>
    Y: getset_descriptor # value = <attribute 'Y' of 'Tessng._DecisionPoint' objects>
    Z: getset_descriptor # value = <attribute 'Z' of 'Tessng._DecisionPoint' objects>
    deciPointID: getset_descriptor # value = <attribute 'deciPointID' of 'Tessng._DecisionPoint' objects>
    deciPointName: getset_descriptor # value = <attribute 'deciPointName' of 'Tessng._DecisionPoint' objects>

    @typing.overload
    def __init__(self, _DecisionPoint:Tessng._DecisionPoint) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _Lane(Shiboken.Object):
    actionType: getset_descriptor # value = <attribute 'actionType' of 'Tessng._Lane' objects>
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._Lane' objects>
    emergencyLane: getset_descriptor # value = <attribute 'emergencyLane' of 'Tessng._Lane' objects>
    expectTravelDirection: getset_descriptor # value = <attribute 'expectTravelDirection' of 'Tessng._Lane' objects>
    laneID: getset_descriptor # value = <attribute 'laneID' of 'Tessng._Lane' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Lane' objects>
    linkID: getset_descriptor # value = <attribute 'linkID' of 'Tessng._Lane' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Lane' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Lane' objects>
    serialNumber: getset_descriptor # value = <attribute 'serialNumber' of 'Tessng._Lane' objects>
    width: getset_descriptor # value = <attribute 'width' of 'Tessng._Lane' objects>

    @typing.overload
    def __init__(self, _Lane:Tessng._Lane) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _LaneConnector(Shiboken.Object):
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._LaneConnector' objects>
    laneConnID: getset_descriptor # value = <attribute 'laneConnID' of 'Tessng._LaneConnector' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._LaneConnector' objects>
    mrLength: getset_descriptor # value = <attribute 'mrLength' of 'Tessng._LaneConnector' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._LaneConnector' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._LaneConnector' objects>
    weight: getset_descriptor # value = <attribute 'weight' of 'Tessng._LaneConnector' objects>

    @typing.overload
    def __init__(self, _LaneConnector:Tessng._LaneConnector) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _LaneLimitChange(Shiboken.Object):
    allowForcedChange: getset_descriptor # value = <attribute 'allowForcedChange' of 'Tessng._LaneLimitChange' objects>
    direction: getset_descriptor # value = <attribute 'direction' of 'Tessng._LaneLimitChange' objects>
    distToLeft: getset_descriptor # value = <attribute 'distToLeft' of 'Tessng._LaneLimitChange' objects>
    distToRight: getset_descriptor # value = <attribute 'distToRight' of 'Tessng._LaneLimitChange' objects>
    fullLane: getset_descriptor # value = <attribute 'fullLane' of 'Tessng._LaneLimitChange' objects>
    id: getset_descriptor # value = <attribute 'id' of 'Tessng._LaneLimitChange' objects>
    laneId: getset_descriptor # value = <attribute 'laneId' of 'Tessng._LaneLimitChange' objects>
    length: getset_descriptor # value = <attribute 'length' of 'Tessng._LaneLimitChange' objects>
    location: getset_descriptor # value = <attribute 'location' of 'Tessng._LaneLimitChange' objects>
    name: getset_descriptor # value = <attribute 'name' of 'Tessng._LaneLimitChange' objects>

    @typing.overload
    def __init__(self, _LaneLimitChange:Tessng._LaneLimitChange) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _Link(Shiboken.Object):
    addValue: getset_descriptor # value = <attribute 'addValue' of 'Tessng._Link' objects>
    centerLinePointsJson: getset_descriptor # value = <attribute 'centerLinePointsJson' of 'Tessng._Link' objects>
    curvature: getset_descriptor # value = <attribute 'curvature' of 'Tessng._Link' objects>
    desiredSpeed: getset_descriptor # value = <attribute 'desiredSpeed' of 'Tessng._Link' objects>
    laneColor: getset_descriptor # value = <attribute 'laneColor' of 'Tessng._Link' objects>
    laneNumber: getset_descriptor # value = <attribute 'laneNumber' of 'Tessng._Link' objects>
    laneWidth: getset_descriptor # value = <attribute 'laneWidth' of 'Tessng._Link' objects>
    leftBreakPointsJson: getset_descriptor # value = <attribute 'leftBreakPointsJson' of 'Tessng._Link' objects>
    length: getset_descriptor # value = <attribute 'length' of 'Tessng._Link' objects>
    limitSpeed: getset_descriptor # value = <attribute 'limitSpeed' of 'Tessng._Link' objects>
    linkID: getset_descriptor # value = <attribute 'linkID' of 'Tessng._Link' objects>
    linkName: getset_descriptor # value = <attribute 'linkName' of 'Tessng._Link' objects>
    linkSaturationFlow: getset_descriptor # value = <attribute 'linkSaturationFlow' of 'Tessng._Link' objects>
    linkTrafficFlow: getset_descriptor # value = <attribute 'linkTrafficFlow' of 'Tessng._Link' objects>
    linkType: getset_descriptor # value = <attribute 'linkType' of 'Tessng._Link' objects>
    mbAutoZ: getset_descriptor # value = <attribute 'mbAutoZ' of 'Tessng._Link' objects>
    minSpeed: getset_descriptor # value = <attribute 'minSpeed' of 'Tessng._Link' objects>
    netId: getset_descriptor # value = <attribute 'netId' of 'Tessng._Link' objects>
    nonLinearCoefficient: getset_descriptor # value = <attribute 'nonLinearCoefficient' of 'Tessng._Link' objects>
    otherAttrsJson: getset_descriptor # value = <attribute 'otherAttrsJson' of 'Tessng._Link' objects>
    rightBreakPointsJson: getset_descriptor # value = <attribute 'rightBreakPointsJson' of 'Tessng._Link' objects>
    roadId: getset_descriptor # value = <attribute 'roadId' of 'Tessng._Link' objects>

    @typing.overload
    def __init__(self, _Link:Tessng._Link) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _RoutingFLowRatio(Shiboken.Object):
    RoutingFLowRatioID: getset_descriptor # value = <attribute 'RoutingFLowRatioID' of 'Tessng._RoutingFLowRatio' objects>
    __hash__ = None
    endDateTime: getset_descriptor # value = <attribute 'endDateTime' of 'Tessng._RoutingFLowRatio' objects>
    ratio: getset_descriptor # value = <attribute 'ratio' of 'Tessng._RoutingFLowRatio' objects>
    routingID: getset_descriptor # value = <attribute 'routingID' of 'Tessng._RoutingFLowRatio' objects>
    startDateTime: getset_descriptor # value = <attribute 'startDateTime' of 'Tessng._RoutingFLowRatio' objects>

    @typing.overload
    def __init__(self, _RoutingFLowRatio:Tessng._RoutingFLowRatio) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class _VehicleType(Shiboken.Object):
    Length: getset_descriptor # value = <attribute 'Length' of 'Tessng._VehicleType' objects>
    acceSD: getset_descriptor # value = <attribute 'acceSD' of 'Tessng._VehicleType' objects>
    avgAcce: getset_descriptor # value = <attribute 'avgAcce' of 'Tessng._VehicleType' objects>
    avgDece: getset_descriptor # value = <attribute 'avgDece' of 'Tessng._VehicleType' objects>
    avgSpeed: getset_descriptor # value = <attribute 'avgSpeed' of 'Tessng._VehicleType' objects>
    commercialVehicle: getset_descriptor # value = <attribute 'commercialVehicle' of 'Tessng._VehicleType' objects>
    deceSD: getset_descriptor # value = <attribute 'deceSD' of 'Tessng._VehicleType' objects>
    lengthSD: getset_descriptor # value = <attribute 'lengthSD' of 'Tessng._VehicleType' objects>
    maxAcce: getset_descriptor # value = <attribute 'maxAcce' of 'Tessng._VehicleType' objects>
    maxDece: getset_descriptor # value = <attribute 'maxDece' of 'Tessng._VehicleType' objects>
    maxPassengerCapacity: getset_descriptor # value = <attribute 'maxPassengerCapacity' of 'Tessng._VehicleType' objects>
    maxSpeed: getset_descriptor # value = <attribute 'maxSpeed' of 'Tessng._VehicleType' objects>
    speedSD: getset_descriptor # value = <attribute 'speedSD' of 'Tessng._VehicleType' objects>
    vehicleTypeCode: getset_descriptor # value = <attribute 'vehicleTypeCode' of 'Tessng._VehicleType' objects>
    vehicleTypeName: getset_descriptor # value = <attribute 'vehicleTypeName' of 'Tessng._VehicleType' objects>
    width: getset_descriptor # value = <attribute 'width' of 'Tessng._VehicleType' objects>
    widthSD: getset_descriptor # value = <attribute 'widthSD' of 'Tessng._VehicleType' objects>

    @typing.overload
    def __init__(self, _VehicleType:Tessng._VehicleType) -> None: ...

    @staticmethod
    def __copy__() -> None: ...


class objUnitOfMeasure(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objUnitOfMeasure' objects>

    @typing.overload
    def __init__(self, v:Tessng.UnitOfMeasure) -> None: ...


class objbool(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objbool' objects>

    @typing.overload
    def __init__(self, v:bool) -> None: ...


class objint(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objint64(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objint64' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objlong(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objlong' objects>

    @typing.overload
    def __init__(self, v:int) -> None: ...


class objreal(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objreal' objects>

    @typing.overload
    def __init__(self, v:float) -> None: ...


class objstring(Shiboken.Object):
    value: getset_descriptor # value = <attribute 'value' of 'Tessng.objstring' objects>
    pass
Default: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Default
Id: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Id
Metric: Tessng.UnitOfMeasure # value = Tessng.UnitOfMeasure.Metric
Name: Tessng.GraphicsItemPropName # value = Tessng.GraphicsItemPropName.Name

    @typing.overload
    def __init__(self, v:str) -> None: ...

@staticmethod
def m2p(value:float) -> float: ...
@staticmethod
def p2m(value:float) -> float: ...
@staticmethod
def tessngIFace() -> Tessng.TessInterface: ...
@staticmethod
def tessngPlugin() -> Tessng.TessPlugin: ...
@staticmethod
def tngIFace() -> Tessng.TessInterface: ...
@staticmethod
def tngPlugin() -> Tessng.TessPlugin: ...

# eof

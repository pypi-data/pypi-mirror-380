# Build system requirements.
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"


# Project metadata.
[project]
name = "gfw-common"
version = "0.1.0rc16"
description = "Common place for GFW reusable Python components."
readme = "README.md"
license = "Apache-2.0"
authors = [
  { name = "Link, Tomás Juan Link", email = "tomas.link@globalfishingwatch.org" },
  { name = "Arana, Andrés", email = "andres@globalfishingwatch.org" },
  { name = "Fuentes, Rodrigo", email = "rodrigo.fuentes@globalfishingwatch.org" },
  { name = "Piano, Sergio Matías", email = "matias@globalfishingwatch.org" },
]
maintainers = [
  { name = "Link, Tomás Juan Link", email = "tomas.link@globalfishingwatch.org" },
  { name = "Arana, Andrés", email = "andres@globalfishingwatch.org" },
  { name = "Fuentes, Rodrigo", email = "rodrigo.fuentes@globalfishingwatch.org" },
  { name = "Piano, Sergio Matías", email = "matias@globalfishingwatch.org" },
]
keywords = [
  "global fishing watch",
  "gfw",
  "python",
  "utils",
]
requires-python = ">=3.10"
classifiers = [
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Topic :: Scientific/Engineering",
]
dependencies = [
  "jinja2~=3.1",
  "pyyaml~=6.0",
  "rich~=14.0",
]

[project.optional-dependencies]

# Google BigQuery
bq = [
  "google-cloud-bigquery~=3.0",
  "sqlparse==0.5",
]

# Apache Beam
beam = [
  "apache-beam[gcp]~=2.0",
  "google-cloud-profiler~=4.1",
]

# Linting and code quality tools
lint = [
  "black~=25.1",               # Code formatting tool
  "isort~=6.0",                # Python imports sorting tool
  "mypy~=1.15",                # Static type checker
  "pydocstyle~=6.3",           # Python docstring style checker
  "ruff~=0.11",                # Linter and code analysis tool
  "codespell[toml]~=2.4",      # Spell checker for code
  "flake8~=7.0",               # Simple PEP8 checker
  "types-PyYAML",              # MyPy stubs for pyyaml
]

# Testing tools
test = [
  "pytest~=8.3",            # Core testing framework
  "pytest-cov~=6.0",        # Coverage plugin for pytest
  "pytest-mock~=3.14",      # Mocking plugin for pytest
  "avro~=1.12",             # To create test data"
]

# Development workflow and tools
dev = [
  # "commitizen~=4.4",      # Standardized commit messages and versioning
  "pre-commit~=4.2",        # Framework for managing pre-commit hooks
  "pip-audit~=2.8",         # Audit for finding vulnerabilities in dependencies
  "matplotlib~=3.10",
]

# Build tools
build = [
  "build~=1.2",             # Python PEP 517 compliant build system
  "setuptools~=78.1",       # Python packaging library
  "twine~=6.1",             # For uploading Python packages to PyPI
]

# Documentation tools
docs = [
  "sphinx~=8.2",                    # Tool for generating documentation
  "myst-parser~=4.0",               # Writing documentation with Markdown in Sphinx
  "sphinx-copybutton~=0.5",         # Add a "copy" button to code blocks in Sphinx
  "sphinx-autobuild~=2025.8.25",    # Build, watch and serve documentation with live reload in the browser
  "sphinx-inline-tabs~=2023.4.21",  # Add inline tabbed content to documentation
  "sphinx-autodoc2~=0.5",           # Generates API documentation for Python packages
  "sphinx-design~=0.6",             # Provides grid, card, etc.
  "pydata-sphinx-theme",            # PyData sphinx theme.
  "sphinx-rtd-theme",               # ReadTheDocs sphinx theme.
]


[project.urls]
Homepage = "https://github.com/GlobalFishingWatch/gfw-common"
Documentation = "https://globalfishingwatch.github.io/gfw-common/"
Changelog = "https://github.com/GlobalFishingWatch/gfw-common/blob/main/CHANGELOG.md"
Repository = "https://github.com/GlobalFishingWatch/gfw-common"
Issues = "https://github.com/GlobalFishingWatch/gfw-common/issues"

[tool.ruff]
fix = true
line-length = 99
src = [
  "src",
  "tests",
]
exclude = [
  "examples",
]
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
unfixable = []
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "RUF",  # Ruff-specific rules
    "ANN",  # flake8-annotations
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "I",    # isort
    "D",    # pydocstyle
]
ignore = [
  "E501",    # line too long, handled by black
  "C901",    # too complex
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
  "D107",    # Ignore missing docstring in `__init__`.
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
  "D100",  # Missing docstring in public module
  "D101",  # Missing docstring in class
  "D102",  # Missing docstring in method
  "D103",  # Missing docstring in function
  "D104",  # Missing docstring in package
  "D105",  # Missing docstring in magic method
  "D107",  # Missing docstring in __init__
  "ANN",   # flake8-annotations
]

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1
known-first-party = ["gfw", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
target-version = ["py312"]
line-length = 99

[tool.isort]
profile = "black"
line_length = 99
known_first_party = ["gfw"]
lines_after_imports = 2
lines_between_sections = 1
lines_between_types = 1
ensure_newline_before_comments = true
force_sort_within_sections = true
src_paths = ["src", "tests"]

[tool.pydocstyle]
convention = "google"

[tool.mypy]
strict = true
ignore_missing_imports = true
files = "src"
mypy_path = "src"
disable_error_code = ["union-attr", "no-any-return", "var-annotated"]
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "gfw.common.beam.*"
disable_error_code = [
  "no-untyped-call",
  "no-any-return",
  "type-arg",
  "misc",
  "call-overload"
]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src", "tests"]
branch = true
parallel = true
context = "${CONTEXT}"

[tool.coverage.report]
precision = 2
skip_empty = true
ignore_errors = false
show_missing = true
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  "AbstractMethodError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.codespell]
skip = '.git,env*,venv*,.venv*, build*,tmp*'


# Build system metadata.
[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["gfw", "gfw.*"]
exclude = ["tests*"]
namespaces = false

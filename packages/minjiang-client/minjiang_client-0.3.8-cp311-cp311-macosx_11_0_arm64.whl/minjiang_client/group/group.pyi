from minjiang_client.languages import lang as lang
from minjiang_client.waveform import WavePackage as WavePackage
from typing import Any, Callable

class Group:
    def __init__(self, group_name: str, space_id: int = None, space_version: int = None, space_parameters: dict[str, Any] = None, temporary_parameters: dict[str, Any] = None) -> None: ...
    @property
    def group_name(self) -> str: ...
    @property
    def space_id(self) -> int: ...
    @space_id.setter
    def space_id(self, space_id) -> None: ...
    @property
    def space_version(self) -> int: ...
    @property
    def space_parameters(self) -> dict[str, Any]: ...
    @property
    def parent_space_ids(self) -> list[int]: ...
    @property
    def temporary_parameters(self) -> dict[str, Any]: ...
    @property
    def parameter_description(self) -> dict[str, Any]: ...
    @property
    def waiting_for_submit(self) -> dict[str, Any]: ...
    @staticmethod
    def list_groups() -> list: ...
    @staticmethod
    def create_group(device_group_name: str, description: str, organization_id: int) -> list: ...
    @staticmethod
    def serialize_parameter(_key, _value, json_compact: bool = True): ...
    @staticmethod
    def deserialize_single_parameter(_v: str, _t: str): ...
    @staticmethod
    def deserialize_parameter(_keys: list[str], _values: list[str], _types: list[str]): ...
    def check_key_format(self, key: str) -> bool: ...
    def get_device_parameter(self, key: str | list[str]): ...
    def get_space_parameter(self, key: str | list[str] = None, default: Any = None): ...
    def set_space_parameter(self, parameter_dict: dict[str, Any]): ...
    def submit_space_parameter(self) -> None: ...
    def remove_space_parameter(self, keys: str | list[str]): ...
    def set_temporary_parameter(self, key: str, value: Any): ...
    def get_history_space_parameter(self, timestamp: int): ...
    def get_local_space_info(self) -> None: ...
    def load_parameters_from_local_cache(self) -> None: ...
    def download_space_parameter(self) -> list[str]: ...
    @staticmethod
    def list_exps(task_id: int, page: int = 1, per_page: int = 10): ...
    def list_tasks(self, status: str = None, page: int = 1, per_page: int = 10, show_hidden: bool = False, time_range: list = None, task_id: int = None): ...
    def clear_temporary_parameters(self) -> None: ...
    def get_serialized_temporary_parameters(self): ...
    def set_serialized_temporary_parameters(self, parameters: dict[str, Any]): ...
    def input_space_parameter_from_cache(self, space_id: int, parameters: dict[str, Any]): ...
    def update_space_parameter_from_cache(self, space_id: int, parameters: dict[str, Any]): ...
    def get_history_parameter_by_tree(self, space_id: int = None, parent_tree: list[str] = None, version: int | str = None): ...
    def get_space_parameter_by_tree(self, space_id: int = None, parent_tree: list[str] = None): ...
    @staticmethod
    def get_parameter_history(space_id: int, key: str = None, page: int = 1, per_page: int = 10): ...
    def create_space(self, name: str, desc: str): ...
    def get_group_detail(self) -> None: ...
    def list_spaces(self, page: int = 1, per_page: int = 10, show_hidden: bool = False): ...
    def hide_space(self, space_id: int = None): ...
    def show_space(self, space_id: int = None): ...
    def create_task(self, title: str, desc: str) -> int: ...
    def create_exp(self, title: str, desc: str) -> Experiment: ...
    def terminate_exp(self, exp_id: int): ...
    def submit_exp(self, exp: Experiment, task_id: int = None, space_timestamp: int = None, template_name: str = None, source: str = 'SDK', attachment: dict[str, int] = None): ...
    def download_result(self, exp_id: int, uri_list: list[dict]): ...
    def get_experiment_detail(self, exp_id: int, set_space: bool = True): ...
    @staticmethod
    def get_experiment_msg(exp_id: int): ...
    def pull_result(self, exp_id: int, waiting_for_finished: bool = True, update_callback: Callable = None) -> Result: ...
    def submit_fitting_result(self, task_id: int, exp_id: int, img_file: str, table_file: str, update_space: bool = True): ...

import numpy as np
from _typeshed import Incomplete
from minjiang_client.languages import lang as lang
from typing import Callable

class QuantumGate:
    gate_name: str
    qubits: list[str]
    n_qubits: int
    gate_str: str
    def __init__(self, gate_name: str, n_qubits: int, matrix: np.ndarray = None) -> None: ...
    @property
    def matrix(self) -> np.ndarray: ...
    def make_matrix(self) -> np.ndarray: ...

class FixedGate(QuantumGate):
    def __init__(self, gate_name: str, n_qubits: int, matrix: np.ndarray = None) -> None: ...
    qubits: Incomplete
    gate_str: Incomplete
    def __call__(self, qubits: str | list[str] = None): ...

class RotatingGate(QuantumGate):
    mat_func: Callable
    def __init__(self, gate_name: str, n_qubits: int, mat_func: Callable) -> None: ...
    qubits: Incomplete
    def __call__(self, qubits: str | list[str], *args): ...
    @property
    def args(self) -> list[float]: ...
    @args.setter
    def args(self, args: list[float]): ...
    gate_str: Incomplete
    def set_gate_str(self) -> None: ...
    def make_matrix(self): ...

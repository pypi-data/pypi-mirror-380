import numpy as np
import queue
from minjiang_client.languages import lang as lang
from minjiang_client.utils.decode_msgpack import msgpack_loads as msgpack_loads
from typing import Any, Iterable

class ResultDatalist:
    def __init__(self, partial_data: list[Any], item_id_start: int, item_id_end: int, dims: list[int] = None, field: str = None) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterable: ...
    def __getitem__(self, item): ...
    @property
    def dim(self): ...
    @property
    def field(self) -> str: ...
    @property
    def item_id_start(self): ...
    @property
    def item_id_end(self): ...
    @property
    def total_sweep_steps(self) -> int: ...
    def reshape(self, dims: list[int] = None) -> np.ndarray: ...

class Result:
    def __init__(self, complete: bool = True, final: bool = True, chunk_id: int = None, item_id_start: int = 0, data: dict[str, list[Any]] = None, load_from_file: str = None, dims: list[int] = None) -> None: ...
    def __getitem__(self, field): ...
    def __contains__(self, field) -> bool: ...
    @property
    def attachment(self): ...
    @attachment.setter
    def attachment(self, attachment: dict): ...
    def get_item_raw(self, field): ...
    def keys(self, hierarchy: bool = False) -> dict | list: ...
    def values(self): ...
    def items(self): ...
    def raw_values(self): ...
    def raw_items(self): ...
    def __len__(self) -> int: ...
    @staticmethod
    def check_data_format(data: dict[str, list[Any]]): ...
    @property
    def total_sweep_steps(self): ...
    @property
    def dims(self): ...
    @dims.setter
    def dims(self, dims) -> None: ...
    @property
    def filename(self): ...
    @property
    def length(self): ...
    @filename.setter
    def filename(self, name: str): ...
    @property
    def complete(self): ...
    @complete.setter
    def complete(self, complete: bool): ...
    @property
    def final(self): ...
    @final.setter
    def final(self, final: bool): ...
    @property
    def chunk_id(self): ...
    @property
    def item_id_start(self): ...
    @property
    def item_id_end(self): ...
    def concatenate(self, result_obj: Result): ...
    def put_data(self, data: dict[str, list[Any]], complete: bool = False, final: bool = False): ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict: dict) -> Result: ...
    def save_to_file(self, filename: str): ...
    def merge_from_files(self, filenames: list[str], num_threads: int = 2): ...
    def merge_from_objs(self, results_obj: list['Result']): ...
    def concatenate_from_file(self, filename: str): ...
    @staticmethod
    def load_result_files(filename_queue: queue, result_queue: queue): ...
    @staticmethod
    def load_from_file(filename: str) -> Result: ...

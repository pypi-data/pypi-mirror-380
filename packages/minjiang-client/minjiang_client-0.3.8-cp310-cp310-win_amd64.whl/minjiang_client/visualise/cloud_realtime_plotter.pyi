import tkinter as tk
from _typeshed import Incomplete
from minjiang_client.experiment.result import Result as Result
from minjiang_client.group.cloud_group import CloudGroup as CloudGroup
from minjiang_client.languages import lang as lang
from minjiang_client.visualise.cloud_realtime_plotter_utils.plot_1d_full_iq import Plot1DFullIQWindow as Plot1DFullIQWindow
from minjiang_client.visualise.cloud_realtime_plotter_utils.plot_1d_normal import Plot1DRealWindow as Plot1DRealWindow
from minjiang_client.visualise.cloud_realtime_plotter_utils.plot_2d_normal import Plot2DWindow as Plot2DWindow
from minjiang_client.visualise.cloud_realtime_plotter_utils.plot_scalar_normal import PlotScalarWindow as PlotScalarWindow

class CloudRealtimePlotter(tk.Tk):
    init_select_keys: Incomplete
    already_init_select_keys: bool
    update_interval: Incomplete
    exp_id: Incomplete
    data_queue: Incomplete
    running: bool
    finished: bool
    fetch_thread: Incomplete
    exp_obj: Incomplete
    sweeps: Incomplete
    exp_detail: Incomplete
    task_detail: Incomplete
    keys: list[str] | None
    dim0_label: Incomplete
    dim1_label: Incomplete
    res_obj: Incomplete
    all_keys: Incomplete
    timer: Incomplete
    after_id: Incomplete
    plot_windows: Incomplete
    main_pane: Incomplete
    tree: Incomplete
    checkboxes: Incomplete
    status_label: Incomplete
    def __init__(self, cloud_group: CloudGroup = None, exp_id: int = None, update_interval: float = 1.0, select_keys: list[str] = None) -> None: ...
    def create_menu_bar(self) -> None: ...
    group_entry: Incomplete
    exp_id_entry: Incomplete
    def show_input_dialog(self): ...
    def start_from_dialog(self, dialog) -> None: ...
    def stop_experiment(self) -> None: ...
    @property
    def cloud_group(self): ...
    @cloud_group.setter
    def cloud_group(self, value: CloudGroup): ...
    def fetch_data(self) -> None: ...
    def data_callback(self, result: Result, finished: bool, exp_detail: dict): ...
    def process_queue(self) -> None: ...
    def fill_tree_selector(self, categories) -> None: ...
    def toggle_checkbox(self, event) -> None: ...
    def select_key(self, item) -> None: ...
    def get_data_type(self, key: str) -> str: ...
    def open_plot_window(self, key): ...
    def close_plot_window(self, key) -> None: ...
    def update_checkbox_icons(self) -> None: ...
    def update_plot(self) -> None: ...
    fig_title: Incomplete
    def start_experiment(self) -> None: ...
    def on_close(self) -> None: ...
    def run(self): ...

def run_cloud_realtime_plotter(cloud_group: CloudGroup = None, exp_id: int = None, update_interval: float = 1.0, select_keys: list[str] = None): ...

import numpy as np
from _typeshed import Incomplete
from minjiang_client.experiment import Experiment as Experiment
from minjiang_client.experiment.result import Result as Result
from minjiang_client.group import Group as Group
from minjiang_client.languages import lang as lang
from minjiang_client.qc.hamiltonian import Hamiltonian as Hamiltonian
from minjiang_client.qc.qc_utils.qde_solver import solve as solve
from minjiang_client.waveform import WavePackage as WavePackage

class Simulator:
    entity: list[str]
    sys_level: int | list[int]
    title: str
    description: str
    dt: float
    state0: Incomplete
    shots: Incomplete
    def __init__(self, entity: list[str], sys_level: int | list[int], dt: float, title: str = '', description: str = '', ref_frame: str = 'rotating') -> None: ...
    @property
    def wave_cache(self): ...
    @wave_cache.setter
    def wave_cache(self, _wave_cache) -> None: ...
    @wave_cache.deleter
    def wave_cache(self) -> None: ...
    def pre_compile_wave_package(self) -> None: ...
    def compile_wave_package(self) -> None: ...
    @property
    def wave_package(self) -> WavePackage: ...
    @wave_package.setter
    def wave_package(self, wave_package: WavePackage): ...
    @property
    def reference_frame(self) -> str: ...
    @property
    def group(self) -> Group: ...
    @property
    def entity_num(self) -> int: ...
    @property
    def ham(self) -> Hamiltonian: ...
    @ham.setter
    def ham(self, ham: Hamiltonian): ...
    def simulate(self, state0: np.ndarray | list = None, evolution: bool = False, shots: int | None = None) -> dict: ...
    def experiment_callback(self, wave_package: WavePackage, exp_obj: Experiment, pos: list, steps: int, options: dict = None): ...

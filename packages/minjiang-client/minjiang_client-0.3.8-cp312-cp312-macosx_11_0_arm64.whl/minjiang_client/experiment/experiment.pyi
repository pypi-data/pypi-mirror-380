from _typeshed import Incomplete
from minjiang_client.compiler.gate_compiler import GateCompiler as GateCompiler
from minjiang_client.compiler.gate_compiler_register import gate_compiler_register as gate_compiler_register
from minjiang_client.experiment.result import Result as Result
from minjiang_client.group import Group as Group
from minjiang_client.languages import lang as lang
from minjiang_client.plugin.plugin_register import plugin_register as plugin_register
from minjiang_client.qc.gates import QuantumGate as QuantumGate
from minjiang_client.utils.config_manager import ConfigManager as ConfigManager
from minjiang_client.utils.script_evaluator import ScriptEvaluator as ScriptEvaluator
from minjiang_client.waveform import WaveCircuit as WaveCircuit, WaveGate as WaveGate
from typing import Any, Callable

class Experiment:
    title: Incomplete
    desc: Incomplete
    template: Incomplete
    template_data: Incomplete
    info: dict[str, Any]
    attachment: dict[str, int]
    space: Incomplete
    def __init__(self, title: str, desc: str, group: Group = None) -> None: ...
    @property
    def exp_mode(self): ...
    @property
    def group(self) -> Group: ...
    @group.setter
    def group(self, group: Group): ...
    @property
    def batch_circuits(self) -> list[WaveCircuit] | None: ...
    @property
    def circuit(self) -> WaveCircuit: ...
    @property
    def gate_compiler(self) -> GateCompiler: ...
    @property
    def is_compiled(self) -> bool: ...
    @property
    def compiled_sweep_dict(self) -> dict: ...
    @property
    def compiled_waveform_parameter_list(self) -> list: ...
    @property
    def compiled_space_parameter_dict(self) -> dict: ...
    @property
    def compiled_sweep_len(self) -> list[int]: ...
    @property
    def total_sweep_steps(self) -> int: ...
    @property
    def options(self) -> dict[str, Any]: ...
    @property
    def options_config_manager(self) -> ConfigManager: ...
    @property
    def options_setup(self): ...
    def clear_batch_circuits(self) -> None: ...
    def set_options(self, *args, **kwargs) -> None: ...
    def reset_compiled_data(self) -> None: ...
    def set_circuit(self, wave_circuit: WaveCircuit): ...
    def append_circuit(self, wave_circuit: WaveCircuit): ...
    def add_wave_gate_obj(self, wave_gate_obj: WaveGate, layer_in_circuit: int): ...
    def add_wave_gate(self, gate_on_entity: tuple[str, str | list[str]] | QuantumGate, layer_in_circuit: int) -> WaveGate: ...
    def set_space_parameter_script(self, key: str, script: str): ...
    def set_waveform_script_by_ids(self, entity: str, layer: int, wave_ids: int | list[int], parameter: str, script: str): ...
    def set_waveform_script_by_name(self, entity: str, layer: int, wave_names: str | list[str], parameter: str, script: str): ...
    def set_waveform_script_by_channel(self, entity: str, layer: int, channels: str | list[str], parameter: str, script: str): ...
    def compile_scripts(self, group: Group = None): ...
    def run_exp(self, callback: Callable, options: dict | None = None, group: Group = None): ...
    def run_exp_batch_circuit(self, callback: Callable, options: dict | None = None, group: Group = None): ...
    def run_exp_normal(self, callback: Callable, options: dict | None = None, group: Group = None): ...
    def valid(self) -> None: ...
    def clone(self) -> Experiment: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_str) -> Experiment: ...

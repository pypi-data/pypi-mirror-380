import numpy as np
from _typeshed import Incomplete
from minjiang_client.languages import lang as lang
from minjiang_client.plugin.plugin_register import reg_to_hook as reg_to_hook
from minjiang_client.qc.gates import QuantumGate as QuantumGate
from minjiang_client.waveform.waveform_register import waveform_register as waveform_register
from typing import Callable, Iterable

class WaveBase:
    type: str
    t0: float
    ratio: float
    channel: str
    name: str
    func_name: str
    waveform_compiler_config: dict | None
    compiler_setup: Incomplete
    wave_parameters: dict | None
    def __init__(self, channel: str, t0: float, name: str, ratio: float = 1.0) -> None: ...
    @staticmethod
    def validate_parameters(defined_params, user_params): ...
    def channel_parser(self) -> tuple[str, str]: ...
    def get_sequence(self, dt: float = 0.2) -> tuple[Iterable, Iterable]: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict) -> Waveform: ...

class Sequence(WaveBase):
    type: str
    seq: list[float]
    wave_parameters: Incomplete
    waveform_compiler_config: dict | None
    def __init__(self, channel: str, name: str, t0: float, t: float, seq: list[float] | np.ndarray, ratio: float = 1.0, **kwargs) -> None: ...
    def get_sequence(self, dt: float = 0.2, method: str = 'normal') -> tuple[Iterable, Iterable]: ...
    def plot(self, dt: float = 0.2) -> None: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict) -> Sequence: ...

class Waveform(WaveBase):
    func: Callable | None
    func_name: str | None
    wave_setting: Incomplete
    wave_parameters: dict
    waveform_compiler_config: dict | None
    def __init__(self, channel: str, func_name: str, t0: float, ratio: float = 1.0, **kwargs) -> None: ...
    def get_sequence(self, dt: float = 0.2) -> tuple[Iterable, Iterable]: ...
    def plot(self, dt: float = 0.2) -> None: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict) -> Waveform | None: ...

class WavePackage:
    def __init__(self) -> None: ...
    @property
    def waves(self) -> list[WaveBase]: ...
    @waves.setter
    def waves(self, waves: list[WaveBase]): ...
    def __add__(self, wave_package: WavePackage) -> WavePackage: ...
    def concatenate(self, wave_package: WavePackage) -> WavePackage: ...
    def get_full_duration(self) -> float: ...
    def clear_waves(self) -> None: ...
    def add_wave(self, channel: str, func_name: str, t0: float = 0, ratio: float = 1.0, **kwargs): ...
    def add_sequence(self, channel: str, name: str, t: float, seq: list[float] | np.ndarray, t0: float = 0, **kwargs): ...
    def add_wave_obj(self, wave_obj: WaveBase): ...
    def get_sequences(self, dt: float = 0.2, carrier: bool = False) -> tuple[Iterable, dict]: ...
    def search_wave(self, wave_name: str = None, channel: str = None) -> list[int]: ...
    def plot(self, dt: float = 0.2) -> None: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict) -> WavePackage: ...

class WaveGate(WavePackage):
    def __init__(self, gate_on_entity: tuple[str, str | list[str]] | QuantumGate, layer_in_circuit: int = None, gate_id_in_circuit: str = None) -> None: ...
    @property
    def gate_name(self): ...
    @property
    def entity(self): ...
    @property
    def layer_in_circuit(self): ...
    @layer_in_circuit.setter
    def layer_in_circuit(self, layer: int): ...
    def set_gate_id_in_circuit(self, gate_id: str): ...
    def get_gate_id_in_circuit(self) -> str | None: ...
    def get_sequences(self, dt: float = 0.2): ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_dict) -> WaveGate: ...

class WaveCircuit:
    def __init__(self) -> None: ...
    @property
    def gates(self): ...
    @property
    def layers(self): ...
    @property
    def entities(self): ...
    def add_wave_gate_obj(self, wave_gate_obj: WaveGate, layer: int): ...
    def add_wave_gate(self, gate_on_entity: tuple[str, str | list[str]] | QuantumGate, layer: int) -> WaveGate: ...
    def remove_wave_gate(self, wave_gate_obj_id: int): ...
    def search_gates(self, entity: str | Iterable[str] = None, layer: int | Iterable[int] = None) -> list[WaveGate] | None: ...
    def export_wave_package(self) -> WavePackage: ...
    def get_sequences(self, dt: float = 0.2, carrier: bool = False): ...
    def plot(self, dt: float = 0.2, height: int = 1) -> None: ...
    def serialize(self) -> dict: ...
    @staticmethod
    def deserialize(json_str) -> WaveCircuit: ...

from _typeshed import Incomplete
from dataclasses import dataclass, field
from typing import Any

@dataclass
class Column:
    name: str
    data_type: str
    required: bool = ...
    unique: bool = ...
    default: Any = ...
    validation_pattern: str | None = ...

@dataclass
class Table:
    name: str
    columns: list[Column]
    rows: list[list[Any]] = field(default_factory=list)
    indexes: dict[str, dict[Any, list[int]]] = field(default_factory=dict)

class JSONDatatable:
    filename: Incomplete
    tables: dict[str, Table]
    def __init__(self, filename: str = 'database.json') -> None: ...
    def create_table(self, table_name: str, columns: list[Column]): ...
    def insert(self, table_name: str, data: dict[str, Any]) -> int: ...
    def update(self, table_name: str, row_id: int, new_data: dict[str, Any]) -> bool: ...
    def clear_table(self, table_name: str) -> bool: ...
    def delete(self, table_name: str, row_id: int) -> bool: ...
    def select(self, table_name: str, conditions: dict[str, Any] | None = None, columns: list[str] | None = None, limit: int | None = None) -> list[dict[str, Any]]: ...
    def get_row(self, table_name: str, row_id: int) -> dict[str, Any]: ...
    def save(self) -> None: ...
    def load(self) -> None: ...
    def display_table(self, table_name: str, limit: int = 10): ...

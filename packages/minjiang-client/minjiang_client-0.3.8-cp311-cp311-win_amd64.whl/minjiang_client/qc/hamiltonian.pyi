from _typeshed import Incomplete
from minjiang_client.languages import lang as lang
from numpy import ndarray

class Operator:
    def __init__(self, name: str, matrix: ndarray = None, on_entity: str | list[str] = None, coef: float | complex = 1.0) -> None: ...
    @property
    def matrix(self) -> ndarray: ...
    @property
    def name(self): ...
    @property
    def on_entity(self): ...
    @property
    def coef(self): ...
    @coef.setter
    def coef(self, coef: float | complex = 1.0): ...

class Hamiltonian:
    entity: list[str]
    sys_level: Incomplete
    title: str
    description: str
    dt: float
    def __init__(self, entity: list[str], sys_level: int | list[int], dt: float, title: str = '', description: str = '') -> None: ...
    @property
    def drift_operators(self) -> list[list[Operator]]: ...
    @property
    def ctrl_operators(self) -> list[list[Operator]]: ...
    @property
    def coupling_operators(self) -> list[list[Operator]]: ...
    @property
    def drift_mat_cache(self) -> ndarray: ...
    @property
    def ctrl_mat_cache(self) -> dict[str, ndarray]: ...
    def entity_label_2_index(self, entity_labels: list[str]): ...
    def entity_index_2_label(self, entity_indices: list[int]): ...
    def add_drift_operator(self, operators: Operator | list[Operator]) -> None: ...
    def add_coupling_operator(self, operators: Operator | list[Operator]) -> None: ...
    def add_ctrl_operator(self, operators: Operator | list[Operator]) -> None: ...
    def compile_operators(self) -> None: ...

def dagger(matrix: ndarray) -> ndarray: ...
def OI(on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def OX(on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def OY(on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def OZ(on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def ON(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DRIVE(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def FLUX(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DRIVEX(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DRIVEY(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DRIVEZ(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DUFF(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def DESTORY(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...
def CREATE(d: int = 2, on_entity: str = None, coef: float | complex = 1.0) -> Operator: ...

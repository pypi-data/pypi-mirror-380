from _typeshed import Incomplete
from minjiang_client.languages import lang as lang
from minjiang_client.plugin.plugin_register import plugin_register as plugin_register
from minjiang_client.qc.qc_utils.quantum_gate import FixedGate as FixedGate, QuantumGate as QuantumGate, RotatingGate as RotatingGate
from minjiang_client.qc.unitary_matrix import unitary3 as unitary3
from minjiang_client.utils import single_decorator as single_decorator
from typing import Any, Callable

def I(qubit=None): ...
def X(qubit=None): ...
def Y(qubit=None): ...
def Z(qubit=None): ...
def VZ(qubit=None): ...
def HX(qubit=None): ...
def HY(qubit=None): ...
def HZ(qubit=None): ...
def dHX(qubit=None): ...
def dHY(qubit=None): ...
def dHZ(qubit=None): ...
def H(qubit=None): ...
def S(qubit=None): ...
def T(qubit=None): ...
def M(qubit=None): ...
def CZ(qubits: list[str] = None): ...
def CR(qubits: list[str] = None): ...
def CNOT(qubits: list[str] = None): ...
def ISWAP(qubits: list[str] = None): ...
def SWAP(qubits: list[str] = None): ...
def RX(theta: float): ...
def RY(theta: float): ...
def RZ(lamda: float): ...
def U(theta: float, phi: float, lamda: float): ...

class QuantumGateRegister:
    fixed_gates: dict[str, Callable]
    fixed_gates_desc: dict[str, Any]
    fixed_gates_n_qubits: dict[str, Any]
    rotating_gates: dict[str, Callable]
    rotating_gates_desc: dict[str, Any]
    rotating_gates_n_qubits: dict[str, Any]
    def __init__(self) -> None: ...
    def reg(self, gate_type: str, n_qubits: int, func: Callable, desc: str = ''): ...
    def parse_str(self, gate_str: str) -> QuantumGate: ...

gate_register: Incomplete
plugins: Incomplete
gates: Incomplete

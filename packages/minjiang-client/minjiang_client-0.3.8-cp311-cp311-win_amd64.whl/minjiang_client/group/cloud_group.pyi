import queue
from _typeshed import Incomplete
from minjiang_client.com.device import create_group as create_group, get_group_detail as get_group_detail, get_group_list as get_group_list
from minjiang_client.com.minio import MinIOAPI as MinIOAPI, get_minio_client as get_minio_client
from minjiang_client.com.oss import add_resource as add_resource, get_resource_info as get_resource_info
from minjiang_client.com.space import add_parameter as add_parameter, create_space as create_space, delete_parameter as delete_parameter, get_parameter as get_parameter, get_parameter_history as get_parameter_history, get_parameter_log as get_parameter_log, get_parameter_tree as get_parameter_tree, list_space as list_space, set_space_hidden as set_space_hidden
from minjiang_client.com.task import add_fitting_result as add_fitting_result, create_sub_process as create_sub_process, create_task as create_task, get_cali_session_list as get_cali_session_list, get_fitting_result as get_fitting_result, get_sub_process_detail as get_sub_process_detail, get_sub_process_msg as get_sub_process_msg, get_sub_process_result as get_sub_process_result, get_task_detail as get_task_detail, list_sub_processes as list_sub_processes, list_tasks as list_tasks, terminate_task as terminate_task
from minjiang_client.com.user import check_device_permission_by_name as check_device_permission_by_name, check_task_permission_by_id as check_task_permission_by_id
from minjiang_client.experiment import Experiment as Experiment
from minjiang_client.experiment.result import Result as Result
from minjiang_client.group.group import Group as Group
from minjiang_client.languages import lang as lang
from minjiang_client.plugin.plugin_register import plugin_register as plugin_register
from minjiang_client.utils.decode_msgpack import msgpack_loads as msgpack_loads
from minjiang_client.utils.images import compress_image_to_128 as compress_image_to_128
from minjiang_client.utils.json_database import Column as Column, JSONDatatable as JSONDatatable
from minjiang_client.utils.local import get_cache_dir as get_cache_dir
from minjiang_client.utils.space_cache import SpaceCache as SpaceCache
from minjiang_client.utils.task_status import CANCELED as CANCELED, COMPLETE as COMPLETE, ERROR as ERROR, __TASK_STATUS__ as __TASK_STATUS__
from typing import Any, Callable

class CloudGroup(Group):
    minio: Incomplete
    def __init__(self, group_name: str = None, space_name: str = None, space_version: int = None, space_parameters: dict[str, Any] = None, temporary_parameters: dict[str, Any] = None) -> None: ...
    def set_group_name(self, group_name, space_name=None, space_version=None, space_parameters=None, temporary_parameters=None) -> None: ...
    def get_space_list(self) -> None: ...
    space_id: Incomplete
    def set_space(self, space_id_or_name: int | str, update_parameters: bool = True): ...
    @staticmethod
    def list_groups(page: int = 1, per_page: int = 10, org_id: int = None, show_hidden: bool = True) -> dict: ...
    @staticmethod
    def create_group(device_group_name: str, description: str, organization_id: int) -> dict: ...
    @staticmethod
    def get_parameter_description(full_key_list: list[str], language: str = 'cn'): ...
    @property
    def device_group_id(self): ...
    @property
    def organization_id(self): ...
    @property
    def space(self) -> SpaceCache: ...
    @property
    def space_name(self) -> str: ...
    @property
    def spaces_list(self) -> dict: ...
    @property
    def spaces_name_mapping(self) -> dict: ...
    @property
    def space_cache(self) -> dict: ...
    def list_tasks(self, status: str = None, page: int = 1, per_page: int = 10, show_hidden: bool = False, time_range: list = None, task_id: int = None): ...
    @staticmethod
    def list_exps(task_id: int, page: int = 1, per_page: int = 10): ...
    def create_cache_dir(self): ...
    def create_result_cache_dir(self, exp_create_timestamp: int, exp_id: int = None): ...
    def create_exp_cache_dir(self, create_timestamp: int, exp_id: int = None): ...
    def download_space_parameter(self) -> list[str]: ...
    def load_parameters_from_local_cache(self) -> None: ...
    def get_local_space_info(self): ...
    def get_history_space_parameter(self, timestamp: int): ...
    def submit_space_parameter(self) -> None: ...
    def remove_space_parameter(self, keys: str | list[str]): ...
    def get_space_parameter_by_tree(self, space_id: int = None, parent_tree: list[str] = None, version: int = 0): ...
    def search_space_parameters(self, search_word: str = None): ...
    @staticmethod
    def get_parameter_history(space_id: int, key: str = None, page: int = 1, per_page: int = 10): ...
    def create_space(self, name: str, desc: str): ...
    def get_group_detail(self): ...
    def list_spaces(self, page: int = 1, per_page: int = 10, show_hidden: bool = False): ...
    def hide_space(self, space_id: int = None): ...
    def show_space(self, space_id: int = None): ...
    def create_task(self, title: str, desc: str) -> int: ...
    def get_task_detail(self, task_id: int): ...
    def create_exp(self, title: str, desc: str) -> Experiment: ...
    def terminate_exp(self, exp_id: int): ...
    def upload_exp_attachment(self, indicator: str, filename: str, data: Any, file_format: str) -> int: ...
    def download_exp_attachment(self, exp_id: int): ...
    def submit_exp(self, exp: Experiment, task_id: int = None, space_timestamp: int = None, template_name: str = None, source: str = 'SDK', attachment: dict[str, int] = None): ...
    @staticmethod
    def download_to_file(uri_queue: queue, filename_queue: queue, minio: MinIOAPI, cache_dir: str): ...
    def download_result(self, exp_id: int, uri_list: list[dict]): ...
    @staticmethod
    def get_experiment(exp_id: int): ...
    def get_experiment_detail(self, exp_id: int, set_space: bool = True) -> tuple[Experiment, dict, dict]: ...
    def get_experiment_status(self, exp_id: int): ...
    @staticmethod
    def get_experiment_msg(exp_id: int): ...
    def pull_result(self, exp_id: int, waiting_for_finished: bool = True, update_callback: Callable = None) -> Result: ...
    def submit_fitting_result(self, task_id: int, exp_id: int, img_file: str, table_file: str, space_parameters: list[dict] = None, update_space: bool = True): ...
    def submit_fitting_result_with_img_id(self, task_id: int, exp_id: int, big_img_id: int, small_img_id: int, table_file: str, space_parameters: list[dict] = None, update_space: bool = True): ...
    def upload_fit_image(self, task_id: int, exp_id: int, img_file: str): ...
    def read_fitting_result(self, exp_id: int, get_json_content: bool = False): ...

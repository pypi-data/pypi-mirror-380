# coding: utf-8

"""
    Kubernetes CRDs API

    OpenAPI spec for Kubernetes custom resources

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ark_sdk.models.agent_v1alpha1_spec_model_ref import AgentV1alpha1SpecModelRef
from ark_sdk.models.agent_v1alpha1_spec_parameters_inner import AgentV1alpha1SpecParametersInner
from ark_sdk.models.query_v1alpha1_spec_evaluator_selector import QueryV1alpha1SpecEvaluatorSelector
from ark_sdk.models.query_v1alpha1_spec_targets_inner import QueryV1alpha1SpecTargetsInner
from typing import Optional, Set
from typing_extensions import Self

class QueryV1alpha1Spec(BaseModel):
    """
    QueryV1alpha1Spec
    """ # noqa: E501
    cancel: Optional[StrictBool] = Field(default=None, description="When true, indicates intent to cancel the query")
    evaluator_selector: Optional[QueryV1alpha1SpecEvaluatorSelector] = Field(default=None, alias="evaluatorSelector")
    evaluators: Optional[List[AgentV1alpha1SpecModelRef]] = None
    input: StrictStr
    memory: Optional[AgentV1alpha1SpecModelRef] = None
    parameters: Optional[List[AgentV1alpha1SpecParametersInner]] = Field(default=None, description="Parameters for template processing in the input field")
    selector: Optional[QueryV1alpha1SpecEvaluatorSelector] = None
    service_account: Optional[StrictStr] = Field(default=None, alias="serviceAccount")
    session_id: Optional[StrictStr] = Field(default=None, alias="sessionId")
    targets: Optional[List[QueryV1alpha1SpecTargetsInner]] = None
    timeout: Optional[StrictStr] = Field(default='5m', description="Timeout for query execution (e.g., \"30s\", \"5m\", \"1h\")")
    ttl: Optional[StrictStr] = '720h'
    __properties: ClassVar[List[str]] = ["cancel", "evaluatorSelector", "evaluators", "input", "memory", "parameters", "selector", "serviceAccount", "sessionId", "targets", "timeout", "ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryV1alpha1Spec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of evaluator_selector
        if self.evaluator_selector:
            _dict['evaluatorSelector'] = self.evaluator_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in evaluators (list)
        _items = []
        if self.evaluators:
            for _item_evaluators in self.evaluators:
                if _item_evaluators:
                    _items.append(_item_evaluators.to_dict())
            _dict['evaluators'] = _items
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict['memory'] = self.memory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of selector
        if self.selector:
            _dict['selector'] = self.selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryV1alpha1Spec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancel": obj.get("cancel"),
            "evaluatorSelector": QueryV1alpha1SpecEvaluatorSelector.from_dict(obj["evaluatorSelector"]) if obj.get("evaluatorSelector") is not None else None,
            "evaluators": [AgentV1alpha1SpecModelRef.from_dict(_item) for _item in obj["evaluators"]] if obj.get("evaluators") is not None else None,
            "input": obj.get("input"),
            "memory": AgentV1alpha1SpecModelRef.from_dict(obj["memory"]) if obj.get("memory") is not None else None,
            "parameters": [AgentV1alpha1SpecParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "selector": QueryV1alpha1SpecEvaluatorSelector.from_dict(obj["selector"]) if obj.get("selector") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "sessionId": obj.get("sessionId"),
            "targets": [QueryV1alpha1SpecTargetsInner.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else '5m',
            "ttl": obj.get("ttl") if obj.get("ttl") is not None else '720h'
        })
        return _obj



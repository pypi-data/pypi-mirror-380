# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class User(UniversalBaseModel):
    """
    User represents a user
    """

    active: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Is user active
    """

    avatar_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL to the user's avatar
    """

    created: typing.Optional[dt.datetime] = None
    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's description
    """

    email: typing.Optional[str] = None
    followers_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    user counts
    """

    following_count: typing.Optional[int] = None
    full_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's full name
    """

    html_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL to the user's profile page
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the user's id
    """

    is_admin: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Is the user an administrator
    """

    language: typing.Optional[str] = pydantic.Field(default=None)
    """
    User locale
    """

    last_login: typing.Optional[dt.datetime] = None
    location: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's location
    """

    login: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's username
    """

    login_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's authentication sign-in name.
    """

    prohibit_login: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Is user login prohibited
    """

    pronouns: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's pronouns
    """

    restricted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Is user restricted
    """

    source_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the user's Authentication Source
    """

    starred_repos_count: typing.Optional[int] = None
    visibility: typing.Optional[str] = pydantic.Field(default=None)
    """
    User visibility level option: public, limited, private
    """

    website: typing.Optional[str] = pydantic.Field(default=None)
    """
    the user's website
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

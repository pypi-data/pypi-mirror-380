# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.pydantic_utilities import (IS_PYDANTIC_V2, UniversalBaseModel,
                                       update_forward_refs)
from ..core.serialization import FieldMetadata
from .duration import Duration
from .user import User


class ActionRun(UniversalBaseModel):
    """
    ActionRun represents an action run
    """

    schedule_id: typing_extensions.Annotated[
        typing.Optional[int], FieldMetadata(alias="ScheduleID")
    ] = pydantic.Field(default=None)
    """
    the cron id for the schedule trigger
    """

    approved_by: typing.Optional[int] = pydantic.Field(default=None)
    """
    who approved this action run
    """

    commit_sha: typing.Optional[str] = pydantic.Field(default=None)
    """
    the commit sha the action run ran on
    """

    created: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the action run was created
    """

    duration: typing.Optional[Duration] = None
    event: typing.Optional[str] = pydantic.Field(default=None)
    """
    the webhook event that causes the workflow to run
    """

    event_payload: typing.Optional[str] = pydantic.Field(default=None)
    """
    the payload of the webhook event that causes the workflow to run
    """

    html_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    the url of this action run
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the action run id
    """

    index_in_repo: typing.Optional[int] = pydantic.Field(default=None)
    """
    a unique number for each run of a repository
    """

    is_fork_pull_request: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If this is triggered by a PR from a forked repository or an untrusted user, we need to check if it is approved and limit permissions when running the workflow.
    """

    is_ref_deleted: typing.Optional[bool] = pydantic.Field(default=None)
    """
    has the commit/tag/… the action run ran on been deleted
    """

    need_approval: typing.Optional[bool] = pydantic.Field(default=None)
    """
    may need approval if it's a fork pull request
    """

    prettyref: typing.Optional[str] = pydantic.Field(default=None)
    """
    the commit/tag/… the action run ran on
    """

    repository: typing.Optional["Repository"] = None
    started: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the action run was started
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    the current status of this run
    """

    stopped: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the action run was stopped
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    the action run's title
    """

    trigger_event: typing.Optional[str] = pydantic.Field(default=None)
    """
    the trigger event defined in the `on` configuration of the triggered workflow
    """

    trigger_user: typing.Optional[User] = None
    updated: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the action run was last updated
    """

    workflow_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    the name of workflow file
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .repository import Repository  # noqa: E402, F401, I001

update_forward_refs(ActionRun)

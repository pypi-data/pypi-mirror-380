# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .create_repo_option_object_format_name import \
    CreateRepoOptionObjectFormatName
from .create_repo_option_trust_model import CreateRepoOptionTrustModel


class CreateRepoOption(UniversalBaseModel):
    """
    CreateRepoOption options when creating repository
    """

    auto_init: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the repository should be auto-initialized?
    """

    default_branch: typing.Optional[str] = pydantic.Field(default=None)
    """
    DefaultBranch of the repository (used when initializes and in template)
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the repository to create
    """

    gitignores: typing.Optional[str] = pydantic.Field(default=None)
    """
    Gitignores to use
    """

    issue_labels: typing.Optional[str] = pydantic.Field(default=None)
    """
    Label-Set to use
    """

    license: typing.Optional[str] = pydantic.Field(default=None)
    """
    License to use
    """

    name: str = pydantic.Field()
    """
    Name of the repository to create
    """

    object_format_name: typing.Optional[CreateRepoOptionObjectFormatName] = (
        pydantic.Field(default=None)
    )
    """
    ObjectFormatName of the underlying git repository
    """

    private: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the repository is private
    """

    readme: typing.Optional[str] = pydantic.Field(default=None)
    """
    Readme of the repository to create
    """

    template: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the repository is template
    """

    trust_model: typing.Optional[CreateRepoOptionTrustModel] = pydantic.Field(
        default=None
    )
    """
    TrustModel of the repository
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

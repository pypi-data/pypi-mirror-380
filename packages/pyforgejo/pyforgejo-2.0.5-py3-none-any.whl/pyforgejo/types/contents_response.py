# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .file_links_response import FileLinksResponse


class ContentsResponse(UniversalBaseModel):
    """
    ContentsResponse contains information about a repo's entry's (dir, file, symlink, submodule) metadata and content
    """

    links: typing_extensions.Annotated[
        typing.Optional[FileLinksResponse], FieldMetadata(alias="_links")
    ] = None
    content: typing.Optional[str] = pydantic.Field(default=None)
    """
    `content` is populated when `type` is `file`, otherwise null
    """

    download_url: typing.Optional[str] = None
    encoding: typing.Optional[str] = pydantic.Field(default=None)
    """
    `encoding` is populated when `type` is `file`, otherwise null
    """

    git_url: typing.Optional[str] = None
    html_url: typing.Optional[str] = None
    last_commit_sha: typing.Optional[str] = None
    last_commit_when: typing.Optional[dt.datetime] = None
    name: typing.Optional[str] = None
    path: typing.Optional[str] = None
    sha: typing.Optional[str] = None
    size: typing.Optional[int] = None
    submodule_git_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    `submodule_git_url` is populated when `type` is `submodule`, otherwise null
    """

    target: typing.Optional[str] = pydantic.Field(default=None)
    """
    `target` is populated when `type` is `symlink`, otherwise null
    """

    type: typing.Optional[str] = pydantic.Field(default=None)
    """
    `type` will be `file`, `dir`, `symlink`, or `submodule`
    """

    url: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

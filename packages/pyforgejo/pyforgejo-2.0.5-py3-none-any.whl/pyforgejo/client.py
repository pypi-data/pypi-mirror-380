# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
import os
import typing

import httpx
from dotenv import load_dotenv

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import PyforgejoApiEnvironment

if typing.TYPE_CHECKING:
    from .activitypub.client import ActivitypubClient, AsyncActivitypubClient
    from .admin.client import AdminClient, AsyncAdminClient
    from .issue.client import AsyncIssueClient, IssueClient
    from .miscellaneous.client import (AsyncMiscellaneousClient,
                                       MiscellaneousClient)
    from .notification.client import (AsyncNotificationClient,
                                      NotificationClient)
    from .organization.client import (AsyncOrganizationClient,
                                      OrganizationClient)
    from .package.client import AsyncPackageClient, PackageClient
    from .repository.client import AsyncRepositoryClient, RepositoryClient
    from .settings.client import AsyncSettingsClient, SettingsClient
    from .user.client import AsyncUserClient, UserClient

# load environment variables at the beginning
load_dotenv()

# get environment variables with default values
BASE_URL = os.getenv("BASE_URL", "")
API_KEY = os.getenv("API_KEY", "")


class PyforgejoApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client. Defaults to BASE_URL from .env file.

    environment : PyforgejoApiEnvironment
        The environment to use for requests from the client. from .environment import PyforgejoApiEnvironment

        Defaults to PyforgejoApiEnvironment.DEFAULT

    api_key : typing.Optional[str]
        The API key to use for authentication. Defaults to API_KEY from .env file.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from pyforgejo import PyforgejoApi

    client = PyforgejoApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PyforgejoApiEnvironment = PyforgejoApiEnvironment.DEFAULT,
        api_key: typing.Optional[str] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        base_url = base_url or BASE_URL
        api_key = api_key or API_KEY

        if not base_url:
            raise ValueError(
                "base_url must be provided either as an .env variable or as an argument"
            )
        if not api_key:
            raise ValueError(
                "api_key must be provided either as an .env variable or as an argument"
            )

        _defaulted_timeout = (
            timeout
            if timeout is not None
            else 60
            if httpx_client is None
            else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._activitypub: typing.Optional[ActivitypubClient] = None
        self._admin: typing.Optional[AdminClient] = None
        self._miscellaneous: typing.Optional[MiscellaneousClient] = None
        self._notification: typing.Optional[NotificationClient] = None
        self._organization: typing.Optional[OrganizationClient] = None
        self._package: typing.Optional[PackageClient] = None
        self._issue: typing.Optional[IssueClient] = None
        self._repository: typing.Optional[RepositoryClient] = None
        self._settings: typing.Optional[SettingsClient] = None
        self._user: typing.Optional[UserClient] = None

    @property
    def activitypub(self):
        if self._activitypub is None:
            from .activitypub.client import ActivitypubClient  # noqa: E402

            self._activitypub = ActivitypubClient(client_wrapper=self._client_wrapper)
        return self._activitypub

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AdminClient  # noqa: E402

            self._admin = AdminClient(client_wrapper=self._client_wrapper)
        return self._admin

    @property
    def miscellaneous(self):
        if self._miscellaneous is None:
            from .miscellaneous.client import MiscellaneousClient  # noqa: E402

            self._miscellaneous = MiscellaneousClient(
                client_wrapper=self._client_wrapper
            )
        return self._miscellaneous

    @property
    def notification(self):
        if self._notification is None:
            from .notification.client import NotificationClient  # noqa: E402

            self._notification = NotificationClient(client_wrapper=self._client_wrapper)
        return self._notification

    @property
    def organization(self):
        if self._organization is None:
            from .organization.client import OrganizationClient  # noqa: E402

            self._organization = OrganizationClient(client_wrapper=self._client_wrapper)
        return self._organization

    @property
    def package(self):
        if self._package is None:
            from .package.client import PackageClient  # noqa: E402

            self._package = PackageClient(client_wrapper=self._client_wrapper)
        return self._package

    @property
    def issue(self):
        if self._issue is None:
            from .issue.client import IssueClient  # noqa: E402

            self._issue = IssueClient(client_wrapper=self._client_wrapper)
        return self._issue

    @property
    def repository(self):
        if self._repository is None:
            from .repository.client import RepositoryClient  # noqa: E402

            self._repository = RepositoryClient(client_wrapper=self._client_wrapper)
        return self._repository

    @property
    def settings(self):
        if self._settings is None:
            from .settings.client import SettingsClient  # noqa: E402

            self._settings = SettingsClient(client_wrapper=self._client_wrapper)
        return self._settings

    @property
    def user(self):
        if self._user is None:
            from .user.client import UserClient  # noqa: E402

            self._user = UserClient(client_wrapper=self._client_wrapper)
        return self._user


class AsyncPyforgejoApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client. Defaults to BASE_URL from .env file.

    environment : PyforgejoApiEnvironment
        The environment to use for requests from the client. from .environment import PyforgejoApiEnvironment

        Defaults to PyforgejoApiEnvironment.DEFAULT

    api_key : typing.Optional[str]
        The API key to use for authentication. Defaults to API_KEY from .env file.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from pyforgejo import AsyncPyforgejoApi

    client = AsyncPyforgejoApi(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: PyforgejoApiEnvironment = PyforgejoApiEnvironment.DEFAULT,
        api_key: typing.Optional[str] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        base_url = base_url or BASE_URL
        api_key = api_key or API_KEY

        print(f"Using BASE_URL: {base_url if base_url else 'Not set'}")
        print(f"Using API_KEY: {'*' * 40 if api_key else 'Not set'}")

        if not base_url:
            raise ValueError(
                "base_url must be provided either as an .env variable or as an argument"
            )
        if not api_key:
            raise ValueError(
                "api_key must be provided either as an .env variable or as an argument"
            )

        _defaulted_timeout = (
            timeout
            if timeout is not None
            else 60
            if httpx_client is None
            else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(
                timeout=_defaulted_timeout, follow_redirects=follow_redirects
            )
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._activitypub: typing.Optional[AsyncActivitypubClient] = None
        self._admin: typing.Optional[AsyncAdminClient] = None
        self._miscellaneous: typing.Optional[AsyncMiscellaneousClient] = None
        self._notification: typing.Optional[AsyncNotificationClient] = None
        self._organization: typing.Optional[AsyncOrganizationClient] = None
        self._package: typing.Optional[AsyncPackageClient] = None
        self._issue: typing.Optional[AsyncIssueClient] = None
        self._repository: typing.Optional[AsyncRepositoryClient] = None
        self._settings: typing.Optional[AsyncSettingsClient] = None
        self._user: typing.Optional[AsyncUserClient] = None

    @property
    def activitypub(self):
        if self._activitypub is None:
            from .activitypub.client import \
                AsyncActivitypubClient  # noqa: E402

            self._activitypub = AsyncActivitypubClient(
                client_wrapper=self._client_wrapper
            )
        return self._activitypub

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AsyncAdminClient  # noqa: E402

            self._admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        return self._admin

    @property
    def miscellaneous(self):
        if self._miscellaneous is None:
            from .miscellaneous.client import \
                AsyncMiscellaneousClient  # noqa: E402

            self._miscellaneous = AsyncMiscellaneousClient(
                client_wrapper=self._client_wrapper
            )
        return self._miscellaneous

    @property
    def notification(self):
        if self._notification is None:
            from .notification.client import \
                AsyncNotificationClient  # noqa: E402

            self._notification = AsyncNotificationClient(
                client_wrapper=self._client_wrapper
            )
        return self._notification

    @property
    def organization(self):
        if self._organization is None:
            from .organization.client import \
                AsyncOrganizationClient  # noqa: E402

            self._organization = AsyncOrganizationClient(
                client_wrapper=self._client_wrapper
            )
        return self._organization

    @property
    def package(self):
        if self._package is None:
            from .package.client import AsyncPackageClient  # noqa: E402

            self._package = AsyncPackageClient(client_wrapper=self._client_wrapper)
        return self._package

    @property
    def issue(self):
        if self._issue is None:
            from .issue.client import AsyncIssueClient  # noqa: E402

            self._issue = AsyncIssueClient(client_wrapper=self._client_wrapper)
        return self._issue

    @property
    def repository(self):
        if self._repository is None:
            from .repository.client import AsyncRepositoryClient  # noqa: E402

            self._repository = AsyncRepositoryClient(
                client_wrapper=self._client_wrapper
            )
        return self._repository

    @property
    def settings(self):
        if self._settings is None:
            from .settings.client import AsyncSettingsClient  # noqa: E402

            self._settings = AsyncSettingsClient(client_wrapper=self._client_wrapper)
        return self._settings

    @property
    def user(self):
        if self._user is None:
            from .user.client import AsyncUserClient  # noqa: E402

            self._user = AsyncUserClient(client_wrapper=self._client_wrapper)
        return self._user


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: PyforgejoApiEnvironment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception(
            "Please pass in either base_url or environment to construct the client"
        )

# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.action_run_job import ActionRunJob
from ..types.action_variable import ActionVariable
from ..types.activity import Activity
from ..types.blocked_user import BlockedUser
from ..types.create_hook_option_config import CreateHookOptionConfig
from ..types.create_hook_option_type import CreateHookOptionType
from ..types.create_org_option_visibility import CreateOrgOptionVisibility
from ..types.create_repo_option_object_format_name import \
    CreateRepoOptionObjectFormatName
from ..types.create_repo_option_trust_model import CreateRepoOptionTrustModel
from ..types.hook import Hook
from ..types.label import Label
from ..types.organization import Organization
from ..types.organization_permissions import OrganizationPermissions
from ..types.quota_info import QuotaInfo
from ..types.quota_used_artifact_list import QuotaUsedArtifactList
from ..types.quota_used_attachment_list import QuotaUsedAttachmentList
from ..types.quota_used_package_list import QuotaUsedPackageList
from ..types.registration_token import RegistrationToken
from ..types.repository import Repository
from ..types.secret import Secret
from ..types.team import Team
from ..types.user import User
from .raw_client import AsyncRawOrganizationClient, RawOrganizationClient
from .types.create_team_option_permission import CreateTeamOptionPermission
from .types.edit_org_option_visibility import EditOrgOptionVisibility
from .types.edit_team_option_permission import EditTeamOptionPermission
from .types.org_list_labels_request_sort import OrgListLabelsRequestSort
from .types.team_search_results import TeamSearchResults

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationClient
        """
        return self._raw_client

    def create_org_repo_deprecated(
        self,
        org: str,
        *,
        name: str,
        auto_init: typing.Optional[bool] = OMIT,
        default_branch: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        gitignores: typing.Optional[str] = OMIT,
        issue_labels: typing.Optional[str] = OMIT,
        license: typing.Optional[str] = OMIT,
        object_format_name: typing.Optional[CreateRepoOptionObjectFormatName] = OMIT,
        private: typing.Optional[bool] = OMIT,
        readme: typing.Optional[str] = OMIT,
        template: typing.Optional[bool] = OMIT,
        trust_model: typing.Optional[CreateRepoOptionTrustModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        org : str
            name of organization

        name : str
            Name of the repository to create

        auto_init : typing.Optional[bool]
            Whether the repository should be auto-initialized?

        default_branch : typing.Optional[str]
            DefaultBranch of the repository (used when initializes and in template)

        description : typing.Optional[str]
            Description of the repository to create

        gitignores : typing.Optional[str]
            Gitignores to use

        issue_labels : typing.Optional[str]
            Label-Set to use

        license : typing.Optional[str]
            License to use

        object_format_name : typing.Optional[CreateRepoOptionObjectFormatName]
            ObjectFormatName of the underlying git repository

        private : typing.Optional[bool]
            Whether the repository is private

        readme : typing.Optional[str]
            Readme of the repository to create

        template : typing.Optional[bool]
            Whether the repository is template

        trust_model : typing.Optional[CreateRepoOptionTrustModel]
            TrustModel of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.create_org_repo_deprecated(
            org="org",
            name="name",
        )
        """
        _response = self._raw_client.create_org_repo_deprecated(
            org,
            name=name,
            auto_init=auto_init,
            default_branch=default_branch,
            description=description,
            gitignores=gitignores,
            issue_labels=issue_labels,
            license=license,
            object_format_name=object_format_name,
            private=private,
            readme=readme,
            template=template,
            trust_model=trust_model,
            request_options=request_options,
        )
        return _response.data

    def org_get_all(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_all(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_get_all(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_create(
        self,
        *,
        username: str,
        description: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        repo_admin_change_team_access: typing.Optional[bool] = OMIT,
        visibility: typing.Optional[CreateOrgOptionVisibility] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Parameters
        ----------
        username : str

        description : typing.Optional[str]

        email : typing.Optional[str]

        full_name : typing.Optional[str]

        location : typing.Optional[str]

        repo_admin_change_team_access : typing.Optional[bool]

        visibility : typing.Optional[CreateOrgOptionVisibility]
            possible values are `public` (default), `limited` or `private`

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_create(
            username="username",
        )
        """
        _response = self._raw_client.org_create(
            username=username,
            description=description,
            email=email,
            full_name=full_name,
            location=location,
            repo_admin_change_team_access=repo_admin_change_team_access,
            visibility=visibility,
            website=website,
            request_options=request_options,
        )
        return _response.data

    def org_get(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Organization:
        """
        Parameters
        ----------
        org : str
            name of the organization to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get(
            org="org",
        )
        """
        _response = self._raw_client.org_get(org, request_options=request_options)
        return _response.data

    def org_delete(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        org : str
            organization that is to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete(
            org="org",
        )
        """
        _response = self._raw_client.org_delete(org, request_options=request_options)
        return _response.data

    def org_edit(
        self,
        org: str,
        *,
        description: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        repo_admin_change_team_access: typing.Optional[bool] = OMIT,
        visibility: typing.Optional[EditOrgOptionVisibility] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Parameters
        ----------
        org : str
            name of the organization to edit

        description : typing.Optional[str]

        email : typing.Optional[str]

        full_name : typing.Optional[str]

        location : typing.Optional[str]

        repo_admin_change_team_access : typing.Optional[bool]

        visibility : typing.Optional[EditOrgOptionVisibility]
            possible values are `public`, `limited` or `private`

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_edit(
            org="org",
        )
        """
        _response = self._raw_client.org_edit(
            org,
            description=description,
            email=email,
            full_name=full_name,
            location=location,
            repo_admin_change_team_access=repo_admin_change_team_access,
            visibility=visibility,
            website=website,
            request_options=request_options,
        )
        return _response.data

    def org_search_run_jobs(
        self,
        org: str,
        *,
        labels: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionRunJob]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        labels : typing.Optional[str]
            a comma separated list of run job labels to search for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionRunJob]
            RunJobList is a list of action run jobs

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_search_run_jobs(
            org="org",
            labels="labels",
        )
        """
        _response = self._raw_client.org_search_run_jobs(
            org, labels=labels, request_options=request_options
        )
        return _response.data

    def org_get_runner_registration_token(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RegistrationToken:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegistrationToken
            RegistrationToken is a string used to register a runner with a server

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_runner_registration_token(
            org="org",
        )
        """
        _response = self._raw_client.org_get_runner_registration_token(
            org, request_options=request_options
        )
        return _response.data

    def org_list_actions_secrets(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Secret]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Secret]
            SecretList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_actions_secrets(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_actions_secrets(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def update_org_secret(
        self,
        org: str,
        secretname: str,
        *,
        data: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of organization

        secretname : str
            name of the secret

        data : str
            Data of the secret to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.update_org_secret(
            org="org",
            secretname="secretname",
            data="data",
        )
        """
        _response = self._raw_client.update_org_secret(
            org, secretname, data=data, request_options=request_options
        )
        return _response.data

    def delete_org_secret(
        self,
        org: str,
        secretname: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of organization

        secretname : str
            name of the secret

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.delete_org_secret(
            org="org",
            secretname="secretname",
        )
        """
        _response = self._raw_client.delete_org_secret(
            org, secretname, request_options=request_options
        )
        return _response.data

    def get_org_variables_list(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionVariable]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionVariable]
            VariableList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.get_org_variables_list(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_org_variables_list(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionVariable:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionVariable
            ActionVariable

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.get_org_variable(
            org="org",
            variablename="variablename",
        )
        """
        _response = self._raw_client.get_org_variable(
            org, variablename, request_options=request_options
        )
        return _response.data

    def create_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        value: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        value : str
            Value of the variable to create

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.create_org_variable(
            org="org",
            variablename="variablename",
            value="value",
        )
        """
        _response = self._raw_client.create_org_variable(
            org, variablename, value=value, request_options=request_options
        )
        return _response.data

    def update_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        value: str,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        value : str
            Value of the variable to update

        name : typing.Optional[str]
            New name for the variable. If the field is empty, the variable name won't be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.update_org_variable(
            org="org",
            variablename="variablename",
            value="value",
        )
        """
        _response = self._raw_client.update_org_variable(
            org, variablename, value=value, name=name, request_options=request_options
        )
        return _response.data

    def delete_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.delete_org_variable(
            org="org",
            variablename="variablename",
        )
        """
        _response = self._raw_client.delete_org_variable(
            org, variablename, request_options=request_options
        )
        return _response.data

    def org_list_activity_feeds(
        self,
        org: str,
        *,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        org : str
            name of the org

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_activity_feeds(
            org="org",
            date="date",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_activity_feeds(
            org, date=date, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_update_avatar(
        self,
        org: str,
        *,
        image: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        image : typing.Optional[str]
            image must be base64 encoded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_update_avatar(
            org="org",
        )
        """
        _response = self._raw_client.org_update_avatar(
            org, image=image, request_options=request_options
        )
        return _response.data

    def org_delete_avatar(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete_avatar(
            org="org",
        )
        """
        _response = self._raw_client.org_delete_avatar(
            org, request_options=request_options
        )
        return _response.data

    def org_block_user(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the org

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_block_user(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_block_user(
            org, username, request_options=request_options
        )
        return _response.data

    def org_list_hooks(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Hook]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Hook]
            HookList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_hooks(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_hooks(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_create_hook(
        self,
        org: str,
        *,
        config: CreateHookOptionConfig,
        type: CreateHookOptionType,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        config : CreateHookOptionConfig

        type : CreateHookOptionType

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_create_hook(
            org="org",
            config={"key": "value"},
            type="forgejo",
        )
        """
        _response = self._raw_client.org_create_hook(
            org,
            config=config,
            type=type,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            events=events,
            request_options=request_options,
        )
        return _response.data

    def org_get_hook(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_hook(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_get_hook(
            org, id, request_options=request_options
        )
        return _response.data

    def org_delete_hook(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete_hook(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_delete_hook(
            org, id, request_options=request_options
        )
        return _response.data

    def org_edit_hook(
        self,
        org: str,
        id: int,
        *,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, str]] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to update

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, str]]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_edit_hook(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_edit_hook(
            org,
            id,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            config=config,
            events=events,
            request_options=request_options,
        )
        return _response.data

    def org_list_labels(
        self,
        org: str,
        *,
        sort: typing.Optional[OrgListLabelsRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        sort : typing.Optional[OrgListLabelsRequestSort]
            Specifies the sorting method: mostissues, leastissues, or reversealphabetically.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_labels(
            org="org",
            sort="mostissues",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_labels(
            org, sort=sort, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_create_label(
        self,
        org: str,
        *,
        color: str,
        name: str,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        color : str

        name : str

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_create_label(
            org="org",
            color="#00aabb",
            name="name",
        )
        """
        _response = self._raw_client.org_create_label(
            org,
            color=color,
            name=name,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            request_options=request_options,
        )
        return _response.data

    def org_get_label(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_label(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_get_label(
            org, id, request_options=request_options
        )
        return _response.data

    def org_delete_label(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete_label(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_delete_label(
            org, id, request_options=request_options
        )
        return _response.data

    def org_edit_label(
        self,
        org: str,
        id: int,
        *,
        color: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to edit

        color : typing.Optional[str]

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_edit_label(
            org="org",
            id=1000000,
        )
        """
        _response = self._raw_client.org_edit_label(
            org,
            id,
            color=color,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def org_list_blocked_users(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BlockedUser]:
        """
        Parameters
        ----------
        org : str
            name of the org

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BlockedUser]
            BlockedUserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_blocked_users(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_blocked_users(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_members(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_members(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_members(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_is_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_is_member(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_is_member(
            org, username, request_options=request_options
        )
        return _response.data

    def org_delete_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete_member(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_delete_member(
            org, username, request_options=request_options
        )
        return _response.data

    def org_list_public_members(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_public_members(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_public_members(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_is_public_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_is_public_member(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_is_public_member(
            org, username, request_options=request_options
        )
        return _response.data

    def org_publicize_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_publicize_member(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_publicize_member(
            org, username, request_options=request_options
        )
        return _response.data

    def org_conceal_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_conceal_member(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_conceal_member(
            org, username, request_options=request_options
        )
        return _response.data

    def org_get_quota(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QuotaInfo:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaInfo
            QuotaInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_quota(
            org="org",
        )
        """
        _response = self._raw_client.org_get_quota(org, request_options=request_options)
        return _response.data

    def org_list_quota_artifacts(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedArtifactList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedArtifactList
            QuotaUsedArtifactList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_quota_artifacts(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_quota_artifacts(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_quota_attachments(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedAttachmentList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedAttachmentList
            QuotaUsedAttachmentList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_quota_attachments(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_quota_attachments(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_check_quota(
        self,
        org: str,
        *,
        subject: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> bool:
        """
        Parameters
        ----------
        org : str
            name of the organization

        subject : str
            subject of the quota

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Returns true if the action is accepted.

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_check_quota(
            org="org",
            subject="subject",
        )
        """
        _response = self._raw_client.org_check_quota(
            org, subject=subject, request_options=request_options
        )
        return _response.data

    def org_list_quota_packages(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedPackageList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedPackageList
            QuotaUsedPackageList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_quota_packages(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_quota_packages(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def rename_org(
        self,
        org: str,
        *,
        new_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            existing org name

        new_name : str
            New username for this org. This name cannot be in use yet by any other user.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.rename_org(
            org="org",
            new_name="new_name",
        )
        """
        _response = self._raw_client.rename_org(
            org, new_name=new_name, request_options=request_options
        )
        return _response.data

    def org_list_repos(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_repos(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_repos(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_org_repo(
        self,
        org: str,
        *,
        name: str,
        auto_init: typing.Optional[bool] = OMIT,
        default_branch: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        gitignores: typing.Optional[str] = OMIT,
        issue_labels: typing.Optional[str] = OMIT,
        license: typing.Optional[str] = OMIT,
        object_format_name: typing.Optional[CreateRepoOptionObjectFormatName] = OMIT,
        private: typing.Optional[bool] = OMIT,
        readme: typing.Optional[str] = OMIT,
        template: typing.Optional[bool] = OMIT,
        trust_model: typing.Optional[CreateRepoOptionTrustModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        org : str
            name of organization

        name : str
            Name of the repository to create

        auto_init : typing.Optional[bool]
            Whether the repository should be auto-initialized?

        default_branch : typing.Optional[str]
            DefaultBranch of the repository (used when initializes and in template)

        description : typing.Optional[str]
            Description of the repository to create

        gitignores : typing.Optional[str]
            Gitignores to use

        issue_labels : typing.Optional[str]
            Label-Set to use

        license : typing.Optional[str]
            License to use

        object_format_name : typing.Optional[CreateRepoOptionObjectFormatName]
            ObjectFormatName of the underlying git repository

        private : typing.Optional[bool]
            Whether the repository is private

        readme : typing.Optional[str]
            Readme of the repository to create

        template : typing.Optional[bool]
            Whether the repository is template

        trust_model : typing.Optional[CreateRepoOptionTrustModel]
            TrustModel of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.create_org_repo(
            org="org",
            name="name",
        )
        """
        _response = self._raw_client.create_org_repo(
            org,
            name=name,
            auto_init=auto_init,
            default_branch=default_branch,
            description=description,
            gitignores=gitignores,
            issue_labels=issue_labels,
            license=license,
            object_format_name=object_format_name,
            private=private,
            readme=readme,
            template=template,
            trust_model=trust_model,
            request_options=request_options,
        )
        return _response.data

    def org_list_teams(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Team]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Team]
            TeamList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_teams(
            org="org",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_teams(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_create_team(
        self,
        org: str,
        *,
        name: str,
        can_create_org_repo: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        includes_all_repositories: typing.Optional[bool] = OMIT,
        permission: typing.Optional[CreateTeamOptionPermission] = OMIT,
        units: typing.Optional[typing.Sequence[str]] = OMIT,
        units_map: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Team:
        """
        Parameters
        ----------
        org : str
            name of the organization

        name : str

        can_create_org_repo : typing.Optional[bool]

        description : typing.Optional[str]

        includes_all_repositories : typing.Optional[bool]

        permission : typing.Optional[CreateTeamOptionPermission]

        units : typing.Optional[typing.Sequence[str]]

        units_map : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_create_team(
            org="org",
            name="name",
        )
        """
        _response = self._raw_client.org_create_team(
            org,
            name=name,
            can_create_org_repo=can_create_org_repo,
            description=description,
            includes_all_repositories=includes_all_repositories,
            permission=permission,
            units=units,
            units_map=units_map,
            request_options=request_options,
        )
        return _response.data

    def team_search(
        self,
        org: str,
        *,
        q: typing.Optional[str] = None,
        include_desc: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TeamSearchResults:
        """
        Parameters
        ----------
        org : str
            name of the organization

        q : typing.Optional[str]
            keywords to search

        include_desc : typing.Optional[bool]
            include search within team description (defaults to true)

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TeamSearchResults
            SearchResults of a successful search

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.team_search(
            org="org",
            q="q",
            include_desc=True,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.team_search(
            org,
            q=q,
            include_desc=include_desc,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def org_unblock_user(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the org

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_unblock_user(
            org="org",
            username="username",
        )
        """
        _response = self._raw_client.org_unblock_user(
            org, username, request_options=request_options
        )
        return _response.data

    def org_get_team(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Team:
        """
        Parameters
        ----------
        id : int
            id of the team to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_team(
            id=1000000,
        )
        """
        _response = self._raw_client.org_get_team(id, request_options=request_options)
        return _response.data

    def org_delete_team(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_delete_team(
            id=1000000,
        )
        """
        _response = self._raw_client.org_delete_team(
            id, request_options=request_options
        )
        return _response.data

    def org_edit_team(
        self,
        id: int,
        *,
        name: str,
        can_create_org_repo: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        includes_all_repositories: typing.Optional[bool] = OMIT,
        permission: typing.Optional[EditTeamOptionPermission] = OMIT,
        units: typing.Optional[typing.Sequence[str]] = OMIT,
        units_map: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Team:
        """
        Parameters
        ----------
        id : int
            id of the team to edit

        name : str

        can_create_org_repo : typing.Optional[bool]

        description : typing.Optional[str]

        includes_all_repositories : typing.Optional[bool]

        permission : typing.Optional[EditTeamOptionPermission]

        units : typing.Optional[typing.Sequence[str]]

        units_map : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_edit_team(
            id=1000000,
            name="name",
        )
        """
        _response = self._raw_client.org_edit_team(
            id,
            name=name,
            can_create_org_repo=can_create_org_repo,
            description=description,
            includes_all_repositories=includes_all_repositories,
            permission=permission,
            units=units,
            units_map=units_map,
            request_options=request_options,
        )
        return _response.data

    def org_list_team_activity_feeds(
        self,
        id: int,
        *,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        id : int
            id of the team

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_team_activity_feeds(
            id=1000000,
            date="date",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_team_activity_feeds(
            id, date=date, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_team_members(
        self,
        id: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        id : int
            id of the team

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_team_members(
            id=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_team_members(
            id, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the member to list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_team_member(
            id=1000000,
            username="username",
        )
        """
        _response = self._raw_client.org_list_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    def org_add_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the user to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_add_team_member(
            id=1000000,
            username="username",
        )
        """
        _response = self._raw_client.org_add_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    def org_remove_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the user to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_remove_team_member(
            id=1000000,
            username="username",
        )
        """
        _response = self._raw_client.org_remove_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    def org_list_team_repos(
        self,
        id: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        id : int
            id of the team

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_team_repos(
            id=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_team_repos(
            id, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_team_repo(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to list

        repo : str
            name of the repo to list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_team_repo(
            id=1000000,
            org="org",
            repo="repo",
        )
        """
        _response = self._raw_client.org_list_team_repo(
            id, org, repo, request_options=request_options
        )
        return _response.data

    def org_add_team_repository(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to add

        repo : str
            name of the repo to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_add_team_repository(
            id=1000000,
            org="org",
            repo="repo",
        )
        """
        _response = self._raw_client.org_add_team_repository(
            id, org, repo, request_options=request_options
        )
        return _response.data

    def org_remove_team_repository(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        This does not delete the repository, it only removes the repository from the team.

        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to remove

        repo : str
            name of the repo to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_remove_team_repository(
            id=1000000,
            org="org",
            repo="repo",
        )
        """
        _response = self._raw_client.org_remove_team_repository(
            id, org, repo, request_options=request_options
        )
        return _response.data

    def org_list_current_user_orgs(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_current_user_orgs(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_current_user_orgs(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_list_user_orgs(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_list_user_orgs(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.org_list_user_orgs(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def org_get_user_permissions(
        self,
        username: str,
        org: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationPermissions:
        """
        Parameters
        ----------
        username : str
            username of user

        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationPermissions
            OrganizationPermissions

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.organization.org_get_user_permissions(
            username="username",
            org="org",
        )
        """
        _response = self._raw_client.org_get_user_permissions(
            username, org, request_options=request_options
        )
        return _response.data


class AsyncOrganizationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationClient
        """
        return self._raw_client

    async def create_org_repo_deprecated(
        self,
        org: str,
        *,
        name: str,
        auto_init: typing.Optional[bool] = OMIT,
        default_branch: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        gitignores: typing.Optional[str] = OMIT,
        issue_labels: typing.Optional[str] = OMIT,
        license: typing.Optional[str] = OMIT,
        object_format_name: typing.Optional[CreateRepoOptionObjectFormatName] = OMIT,
        private: typing.Optional[bool] = OMIT,
        readme: typing.Optional[str] = OMIT,
        template: typing.Optional[bool] = OMIT,
        trust_model: typing.Optional[CreateRepoOptionTrustModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        org : str
            name of organization

        name : str
            Name of the repository to create

        auto_init : typing.Optional[bool]
            Whether the repository should be auto-initialized?

        default_branch : typing.Optional[str]
            DefaultBranch of the repository (used when initializes and in template)

        description : typing.Optional[str]
            Description of the repository to create

        gitignores : typing.Optional[str]
            Gitignores to use

        issue_labels : typing.Optional[str]
            Label-Set to use

        license : typing.Optional[str]
            License to use

        object_format_name : typing.Optional[CreateRepoOptionObjectFormatName]
            ObjectFormatName of the underlying git repository

        private : typing.Optional[bool]
            Whether the repository is private

        readme : typing.Optional[str]
            Readme of the repository to create

        template : typing.Optional[bool]
            Whether the repository is template

        trust_model : typing.Optional[CreateRepoOptionTrustModel]
            TrustModel of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.create_org_repo_deprecated(
                org="org",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_org_repo_deprecated(
            org,
            name=name,
            auto_init=auto_init,
            default_branch=default_branch,
            description=description,
            gitignores=gitignores,
            issue_labels=issue_labels,
            license=license,
            object_format_name=object_format_name,
            private=private,
            readme=readme,
            template=template,
            trust_model=trust_model,
            request_options=request_options,
        )
        return _response.data

    async def org_get_all(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_all(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_all(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_create(
        self,
        *,
        username: str,
        description: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        repo_admin_change_team_access: typing.Optional[bool] = OMIT,
        visibility: typing.Optional[CreateOrgOptionVisibility] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Parameters
        ----------
        username : str

        description : typing.Optional[str]

        email : typing.Optional[str]

        full_name : typing.Optional[str]

        location : typing.Optional[str]

        repo_admin_change_team_access : typing.Optional[bool]

        visibility : typing.Optional[CreateOrgOptionVisibility]
            possible values are `public` (default), `limited` or `private`

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_create(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_create(
            username=username,
            description=description,
            email=email,
            full_name=full_name,
            location=location,
            repo_admin_change_team_access=repo_admin_change_team_access,
            visibility=visibility,
            website=website,
            request_options=request_options,
        )
        return _response.data

    async def org_get(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Organization:
        """
        Parameters
        ----------
        org : str
            name of the organization to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get(org, request_options=request_options)
        return _response.data

    async def org_delete(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        org : str
            organization that is to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete(
            org, request_options=request_options
        )
        return _response.data

    async def org_edit(
        self,
        org: str,
        *,
        description: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        repo_admin_change_team_access: typing.Optional[bool] = OMIT,
        visibility: typing.Optional[EditOrgOptionVisibility] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Organization:
        """
        Parameters
        ----------
        org : str
            name of the organization to edit

        description : typing.Optional[str]

        email : typing.Optional[str]

        full_name : typing.Optional[str]

        location : typing.Optional[str]

        repo_admin_change_team_access : typing.Optional[bool]

        visibility : typing.Optional[EditOrgOptionVisibility]
            possible values are `public`, `limited` or `private`

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization
            Organization

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_edit(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_edit(
            org,
            description=description,
            email=email,
            full_name=full_name,
            location=location,
            repo_admin_change_team_access=repo_admin_change_team_access,
            visibility=visibility,
            website=website,
            request_options=request_options,
        )
        return _response.data

    async def org_search_run_jobs(
        self,
        org: str,
        *,
        labels: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionRunJob]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        labels : typing.Optional[str]
            a comma separated list of run job labels to search for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionRunJob]
            RunJobList is a list of action run jobs

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_search_run_jobs(
                org="org",
                labels="labels",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_search_run_jobs(
            org, labels=labels, request_options=request_options
        )
        return _response.data

    async def org_get_runner_registration_token(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RegistrationToken:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegistrationToken
            RegistrationToken is a string used to register a runner with a server

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_runner_registration_token(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_runner_registration_token(
            org, request_options=request_options
        )
        return _response.data

    async def org_list_actions_secrets(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Secret]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Secret]
            SecretList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_actions_secrets(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_actions_secrets(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def update_org_secret(
        self,
        org: str,
        secretname: str,
        *,
        data: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of organization

        secretname : str
            name of the secret

        data : str
            Data of the secret to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.update_org_secret(
                org="org",
                secretname="secretname",
                data="data",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_org_secret(
            org, secretname, data=data, request_options=request_options
        )
        return _response.data

    async def delete_org_secret(
        self,
        org: str,
        secretname: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of organization

        secretname : str
            name of the secret

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.delete_org_secret(
                org="org",
                secretname="secretname",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_org_secret(
            org, secretname, request_options=request_options
        )
        return _response.data

    async def get_org_variables_list(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionVariable]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionVariable]
            VariableList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.get_org_variables_list(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_org_variables_list(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionVariable:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionVariable
            ActionVariable

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.get_org_variable(
                org="org",
                variablename="variablename",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_org_variable(
            org, variablename, request_options=request_options
        )
        return _response.data

    async def create_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        value: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        value : str
            Value of the variable to create

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.create_org_variable(
                org="org",
                variablename="variablename",
                value="value",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_org_variable(
            org, variablename, value=value, request_options=request_options
        )
        return _response.data

    async def update_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        value: str,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        value : str
            Value of the variable to update

        name : typing.Optional[str]
            New name for the variable. If the field is empty, the variable name won't be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.update_org_variable(
                org="org",
                variablename="variablename",
                value="value",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_org_variable(
            org, variablename, value=value, name=name, request_options=request_options
        )
        return _response.data

    async def delete_org_variable(
        self,
        org: str,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.delete_org_variable(
                org="org",
                variablename="variablename",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_org_variable(
            org, variablename, request_options=request_options
        )
        return _response.data

    async def org_list_activity_feeds(
        self,
        org: str,
        *,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        org : str
            name of the org

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_activity_feeds(
                org="org",
                date="date",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_activity_feeds(
            org, date=date, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_update_avatar(
        self,
        org: str,
        *,
        image: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        image : typing.Optional[str]
            image must be base64 encoded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_update_avatar(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_update_avatar(
            org, image=image, request_options=request_options
        )
        return _response.data

    async def org_delete_avatar(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete_avatar(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete_avatar(
            org, request_options=request_options
        )
        return _response.data

    async def org_block_user(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the org

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_block_user(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_block_user(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_list_hooks(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Hook]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Hook]
            HookList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_hooks(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_hooks(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_create_hook(
        self,
        org: str,
        *,
        config: CreateHookOptionConfig,
        type: CreateHookOptionType,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        config : CreateHookOptionConfig

        type : CreateHookOptionType

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_create_hook(
                org="org",
                config={"key": "value"},
                type="forgejo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_create_hook(
            org,
            config=config,
            type=type,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            events=events,
            request_options=request_options,
        )
        return _response.data

    async def org_get_hook(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_hook(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_hook(
            org, id, request_options=request_options
        )
        return _response.data

    async def org_delete_hook(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete_hook(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete_hook(
            org, id, request_options=request_options
        )
        return _response.data

    async def org_edit_hook(
        self,
        org: str,
        id: int,
        *,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, str]] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the hook to update

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, str]]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_edit_hook(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_edit_hook(
            org,
            id,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            config=config,
            events=events,
            request_options=request_options,
        )
        return _response.data

    async def org_list_labels(
        self,
        org: str,
        *,
        sort: typing.Optional[OrgListLabelsRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        sort : typing.Optional[OrgListLabelsRequestSort]
            Specifies the sorting method: mostissues, leastissues, or reversealphabetically.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_labels(
                org="org",
                sort="mostissues",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_labels(
            org, sort=sort, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_create_label(
        self,
        org: str,
        *,
        color: str,
        name: str,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        color : str

        name : str

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_create_label(
                org="org",
                color="#00aabb",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_create_label(
            org,
            color=color,
            name=name,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            request_options=request_options,
        )
        return _response.data

    async def org_get_label(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_label(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_label(
            org, id, request_options=request_options
        )
        return _response.data

    async def org_delete_label(
        self,
        org: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete_label(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete_label(
            org, id, request_options=request_options
        )
        return _response.data

    async def org_edit_label(
        self,
        org: str,
        id: int,
        *,
        color: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        org : str
            name of the organization

        id : int
            id of the label to edit

        color : typing.Optional[str]

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_edit_label(
                org="org",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_edit_label(
            org,
            id,
            color=color,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def org_list_blocked_users(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BlockedUser]:
        """
        Parameters
        ----------
        org : str
            name of the org

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BlockedUser]
            BlockedUserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_blocked_users(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_blocked_users(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_members(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_members(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_members(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_is_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_is_member(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_is_member(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_delete_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete_member(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete_member(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_list_public_members(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_public_members(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_public_members(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_is_public_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_is_public_member(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_is_public_member(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_publicize_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_publicize_member(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_publicize_member(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_conceal_member(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the organization

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_conceal_member(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_conceal_member(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_get_quota(
        self, org: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QuotaInfo:
        """
        Parameters
        ----------
        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaInfo
            QuotaInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_quota(
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_quota(
            org, request_options=request_options
        )
        return _response.data

    async def org_list_quota_artifacts(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedArtifactList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedArtifactList
            QuotaUsedArtifactList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_quota_artifacts(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_quota_artifacts(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_quota_attachments(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedAttachmentList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedAttachmentList
            QuotaUsedAttachmentList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_quota_attachments(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_quota_attachments(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_check_quota(
        self,
        org: str,
        *,
        subject: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> bool:
        """
        Parameters
        ----------
        org : str
            name of the organization

        subject : str
            subject of the quota

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Returns true if the action is accepted.

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_check_quota(
                org="org",
                subject="subject",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_check_quota(
            org, subject=subject, request_options=request_options
        )
        return _response.data

    async def org_list_quota_packages(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedPackageList:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedPackageList
            QuotaUsedPackageList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_quota_packages(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_quota_packages(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def rename_org(
        self,
        org: str,
        *,
        new_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            existing org name

        new_name : str
            New username for this org. This name cannot be in use yet by any other user.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.rename_org(
                org="org",
                new_name="new_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.rename_org(
            org, new_name=new_name, request_options=request_options
        )
        return _response.data

    async def org_list_repos(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_repos(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_repos(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_org_repo(
        self,
        org: str,
        *,
        name: str,
        auto_init: typing.Optional[bool] = OMIT,
        default_branch: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        gitignores: typing.Optional[str] = OMIT,
        issue_labels: typing.Optional[str] = OMIT,
        license: typing.Optional[str] = OMIT,
        object_format_name: typing.Optional[CreateRepoOptionObjectFormatName] = OMIT,
        private: typing.Optional[bool] = OMIT,
        readme: typing.Optional[str] = OMIT,
        template: typing.Optional[bool] = OMIT,
        trust_model: typing.Optional[CreateRepoOptionTrustModel] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        org : str
            name of organization

        name : str
            Name of the repository to create

        auto_init : typing.Optional[bool]
            Whether the repository should be auto-initialized?

        default_branch : typing.Optional[str]
            DefaultBranch of the repository (used when initializes and in template)

        description : typing.Optional[str]
            Description of the repository to create

        gitignores : typing.Optional[str]
            Gitignores to use

        issue_labels : typing.Optional[str]
            Label-Set to use

        license : typing.Optional[str]
            License to use

        object_format_name : typing.Optional[CreateRepoOptionObjectFormatName]
            ObjectFormatName of the underlying git repository

        private : typing.Optional[bool]
            Whether the repository is private

        readme : typing.Optional[str]
            Readme of the repository to create

        template : typing.Optional[bool]
            Whether the repository is template

        trust_model : typing.Optional[CreateRepoOptionTrustModel]
            TrustModel of the repository

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.create_org_repo(
                org="org",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_org_repo(
            org,
            name=name,
            auto_init=auto_init,
            default_branch=default_branch,
            description=description,
            gitignores=gitignores,
            issue_labels=issue_labels,
            license=license,
            object_format_name=object_format_name,
            private=private,
            readme=readme,
            template=template,
            trust_model=trust_model,
            request_options=request_options,
        )
        return _response.data

    async def org_list_teams(
        self,
        org: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Team]:
        """
        Parameters
        ----------
        org : str
            name of the organization

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Team]
            TeamList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_teams(
                org="org",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_teams(
            org, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_create_team(
        self,
        org: str,
        *,
        name: str,
        can_create_org_repo: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        includes_all_repositories: typing.Optional[bool] = OMIT,
        permission: typing.Optional[CreateTeamOptionPermission] = OMIT,
        units: typing.Optional[typing.Sequence[str]] = OMIT,
        units_map: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Team:
        """
        Parameters
        ----------
        org : str
            name of the organization

        name : str

        can_create_org_repo : typing.Optional[bool]

        description : typing.Optional[str]

        includes_all_repositories : typing.Optional[bool]

        permission : typing.Optional[CreateTeamOptionPermission]

        units : typing.Optional[typing.Sequence[str]]

        units_map : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_create_team(
                org="org",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_create_team(
            org,
            name=name,
            can_create_org_repo=can_create_org_repo,
            description=description,
            includes_all_repositories=includes_all_repositories,
            permission=permission,
            units=units,
            units_map=units_map,
            request_options=request_options,
        )
        return _response.data

    async def team_search(
        self,
        org: str,
        *,
        q: typing.Optional[str] = None,
        include_desc: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TeamSearchResults:
        """
        Parameters
        ----------
        org : str
            name of the organization

        q : typing.Optional[str]
            keywords to search

        include_desc : typing.Optional[bool]
            include search within team description (defaults to true)

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TeamSearchResults
            SearchResults of a successful search

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.team_search(
                org="org",
                q="q",
                include_desc=True,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.team_search(
            org,
            q=q,
            include_desc=include_desc,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def org_unblock_user(
        self,
        org: str,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        org : str
            name of the org

        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_unblock_user(
                org="org",
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_unblock_user(
            org, username, request_options=request_options
        )
        return _response.data

    async def org_get_team(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Team:
        """
        Parameters
        ----------
        id : int
            id of the team to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_team(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_team(
            id, request_options=request_options
        )
        return _response.data

    async def org_delete_team(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_delete_team(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_delete_team(
            id, request_options=request_options
        )
        return _response.data

    async def org_edit_team(
        self,
        id: int,
        *,
        name: str,
        can_create_org_repo: typing.Optional[bool] = OMIT,
        description: typing.Optional[str] = OMIT,
        includes_all_repositories: typing.Optional[bool] = OMIT,
        permission: typing.Optional[EditTeamOptionPermission] = OMIT,
        units: typing.Optional[typing.Sequence[str]] = OMIT,
        units_map: typing.Optional[typing.Dict[str, str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Team:
        """
        Parameters
        ----------
        id : int
            id of the team to edit

        name : str

        can_create_org_repo : typing.Optional[bool]

        description : typing.Optional[str]

        includes_all_repositories : typing.Optional[bool]

        permission : typing.Optional[EditTeamOptionPermission]

        units : typing.Optional[typing.Sequence[str]]

        units_map : typing.Optional[typing.Dict[str, str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Team
            Team

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_edit_team(
                id=1000000,
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_edit_team(
            id,
            name=name,
            can_create_org_repo=can_create_org_repo,
            description=description,
            includes_all_repositories=includes_all_repositories,
            permission=permission,
            units=units,
            units_map=units_map,
            request_options=request_options,
        )
        return _response.data

    async def org_list_team_activity_feeds(
        self,
        id: int,
        *,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        id : int
            id of the team

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_team_activity_feeds(
                id=1000000,
                date="date",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_team_activity_feeds(
            id, date=date, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_team_members(
        self,
        id: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        id : int
            id of the team

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_team_members(
                id=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_team_members(
            id, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the member to list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_team_member(
                id=1000000,
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    async def org_add_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the user to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_add_team_member(
                id=1000000,
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_add_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    async def org_remove_team_member(
        self,
        id: int,
        username: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        username : str
            username of the user to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_remove_team_member(
                id=1000000,
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_remove_team_member(
            id, username, request_options=request_options
        )
        return _response.data

    async def org_list_team_repos(
        self,
        id: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        id : int
            id of the team

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_team_repos(
                id=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_team_repos(
            id, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_team_repo(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Repository:
        """
        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to list

        repo : str
            name of the repo to list

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Repository
            Repository

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_team_repo(
                id=1000000,
                org="org",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_team_repo(
            id, org, repo, request_options=request_options
        )
        return _response.data

    async def org_add_team_repository(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to add

        repo : str
            name of the repo to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_add_team_repository(
                id=1000000,
                org="org",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_add_team_repository(
            id, org, repo, request_options=request_options
        )
        return _response.data

    async def org_remove_team_repository(
        self,
        id: int,
        org: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        This does not delete the repository, it only removes the repository from the team.

        Parameters
        ----------
        id : int
            id of the team

        org : str
            organization that owns the repo to remove

        repo : str
            name of the repo to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_remove_team_repository(
                id=1000000,
                org="org",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_remove_team_repository(
            id, org, repo, request_options=request_options
        )
        return _response.data

    async def org_list_current_user_orgs(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_current_user_orgs(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_current_user_orgs(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_list_user_orgs(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]
            OrganizationList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_list_user_orgs(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_list_user_orgs(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def org_get_user_permissions(
        self,
        username: str,
        org: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OrganizationPermissions:
        """
        Parameters
        ----------
        username : str
            username of user

        org : str
            name of the organization

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationPermissions
            OrganizationPermissions

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organization.org_get_user_permissions(
                username="username",
                org="org",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.org_get_user_permissions(
            username, org, request_options=request_options
        )
        return _response.data

# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .create_team_option_permission import CreateTeamOptionPermission
    from .edit_org_option_visibility import EditOrgOptionVisibility
    from .edit_team_option_permission import EditTeamOptionPermission
    from .org_list_labels_request_sort import OrgListLabelsRequestSort
    from .team_search_results import TeamSearchResults
_dynamic_imports: typing.Dict[str, str] = {
    "CreateTeamOptionPermission": ".create_team_option_permission",
    "EditOrgOptionVisibility": ".edit_org_option_visibility",
    "EditTeamOptionPermission": ".edit_team_option_permission",
    "OrgListLabelsRequestSort": ".org_list_labels_request_sort",
    "TeamSearchResults": ".team_search_results",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__}"
        )
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "CreateTeamOptionPermission",
    "EditOrgOptionVisibility",
    "EditTeamOptionPermission",
    "OrgListLabelsRequestSort",
    "TeamSearchResults",
]

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.attachment import Attachment
from ..types.comment import Comment
from ..types.issue import Issue
from ..types.issue_deadline import IssueDeadline
from ..types.label import Label
from ..types.milestone import Milestone
from ..types.reaction import Reaction
from ..types.timeline_comment import TimelineComment
from ..types.tracked_time import TrackedTime
from ..types.user import User
from ..types.watch_info import WatchInfo
from .raw_client import AsyncRawIssueClient, RawIssueClient
from .types.create_milestone_option_state import CreateMilestoneOptionState
from .types.issue_list_issues_request_sort import IssueListIssuesRequestSort
from .types.issue_list_issues_request_state import IssueListIssuesRequestState
from .types.issue_list_issues_request_type import IssueListIssuesRequestType
from .types.issue_list_labels_request_sort import IssueListLabelsRequestSort
from .types.issue_search_issues_request_sort import \
    IssueSearchIssuesRequestSort
from .types.issue_search_issues_request_state import \
    IssueSearchIssuesRequestState
from .types.issue_search_issues_request_type import \
    IssueSearchIssuesRequestType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class IssueClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawIssueClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawIssueClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawIssueClient
        """
        return self._raw_client

    def search_issues(
        self,
        *,
        state: typing.Optional[IssueSearchIssuesRequestState] = None,
        labels: typing.Optional[str] = None,
        milestones: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        priority_repo_id: typing.Optional[int] = None,
        type: typing.Optional[IssueSearchIssuesRequestType] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        assigned: typing.Optional[bool] = None,
        created: typing.Optional[bool] = None,
        mentioned: typing.Optional[bool] = None,
        review_requested: typing.Optional[bool] = None,
        reviewed: typing.Optional[bool] = None,
        owner: typing.Optional[str] = None,
        team: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[IssueSearchIssuesRequestSort] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        state : typing.Optional[IssueSearchIssuesRequestState]
            State of the issue

        labels : typing.Optional[str]
            Comma-separated list of label names. Fetch only issues that have any of these labels. Non existent labels are discarded.

        milestones : typing.Optional[str]
            Comma-separated list of milestone names. Fetch only issues that have any of these milestones. Non existent milestones are discarded.

        q : typing.Optional[str]
            Search string

        priority_repo_id : typing.Optional[int]
            Repository ID to prioritize in the results

        type : typing.Optional[IssueSearchIssuesRequestType]
            Filter by issue type

        since : typing.Optional[dt.datetime]
            Only show issues updated after the given time (RFC 3339 format)

        before : typing.Optional[dt.datetime]
            Only show issues updated before the given time (RFC 3339 format)

        assigned : typing.Optional[bool]
            Filter issues or pulls assigned to the authenticated user

        created : typing.Optional[bool]
            Filter issues or pulls created by the authenticated user

        mentioned : typing.Optional[bool]
            Filter issues or pulls mentioning the authenticated user

        review_requested : typing.Optional[bool]
            Filter pull requests where the authenticated user's review was requested

        reviewed : typing.Optional[bool]
            Filter pull requests reviewed by the authenticated user

        owner : typing.Optional[str]
            Filter by repository owner

        team : typing.Optional[str]
            Filter by team (requires organization owner parameter)

        page : typing.Optional[int]
            Page number of results to return (1-based)

        limit : typing.Optional[int]
            Number of items per page

        sort : typing.Optional[IssueSearchIssuesRequestSort]
            Type of sort

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.search_issues(
            state="open",
            labels="labels",
            milestones="milestones",
            q="q",
            priority_repo_id=1000000,
            type="issues",
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            assigned=True,
            created=True,
            mentioned=True,
            review_requested=True,
            reviewed=True,
            owner="owner",
            team="team",
            page=1,
            limit=1,
            sort="relevance",
        )
        """
        _response = self._raw_client.search_issues(
            state=state,
            labels=labels,
            milestones=milestones,
            q=q,
            priority_repo_id=priority_repo_id,
            type=type,
            since=since,
            before=before,
            assigned=assigned,
            created=created,
            mentioned=mentioned,
            review_requested=review_requested,
            reviewed=reviewed,
            owner=owner,
            team=team,
            page=page,
            limit=limit,
            sort=sort,
            request_options=request_options,
        )
        return _response.data

    def list_issues(
        self,
        owner: str,
        repo: str,
        *,
        state: typing.Optional[IssueListIssuesRequestState] = None,
        labels: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        type: typing.Optional[IssueListIssuesRequestType] = None,
        milestones: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        created_by: typing.Optional[str] = None,
        assigned_by: typing.Optional[str] = None,
        mentioned_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[IssueListIssuesRequestSort] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        state : typing.Optional[IssueListIssuesRequestState]
            whether issue is open or closed

        labels : typing.Optional[str]
            comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded

        q : typing.Optional[str]
            search string

        type : typing.Optional[IssueListIssuesRequestType]
            filter by type (issues / pulls) if set

        milestones : typing.Optional[str]
            comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded

        since : typing.Optional[dt.datetime]
            Only show items updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show items updated before the given time. This is a timestamp in RFC 3339 format

        created_by : typing.Optional[str]
            Only show items which were created by the given user

        assigned_by : typing.Optional[str]
            Only show items for which the given user is assigned

        mentioned_by : typing.Optional[str]
            Only show items in which the given user was mentioned

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        sort : typing.Optional[IssueListIssuesRequestSort]
            Type of sort

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_issues(
            owner="owner",
            repo="repo",
            state="closed",
            labels="labels",
            q="q",
            type="issues",
            milestones="milestones",
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            created_by="created_by",
            assigned_by="assigned_by",
            mentioned_by="mentioned_by",
            page=1,
            limit=1,
            sort="relevance",
        )
        """
        _response = self._raw_client.list_issues(
            owner,
            repo,
            state=state,
            labels=labels,
            q=q,
            type=type,
            milestones=milestones,
            since=since,
            before=before,
            created_by=created_by,
            assigned_by=assigned_by,
            mentioned_by=mentioned_by,
            page=page,
            limit=limit,
            sort=sort,
            request_options=request_options,
        )
        return _response.data

    def create_issue(
        self,
        owner: str,
        repo: str,
        *,
        title: str,
        assignee: typing.Optional[str] = OMIT,
        assignees: typing.Optional[typing.Sequence[str]] = OMIT,
        body: typing.Optional[str] = OMIT,
        closed: typing.Optional[bool] = OMIT,
        due_date: typing.Optional[dt.datetime] = OMIT,
        labels: typing.Optional[typing.Sequence[int]] = OMIT,
        milestone: typing.Optional[int] = OMIT,
        ref: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        title : str

        assignee : typing.Optional[str]
            deprecated

        assignees : typing.Optional[typing.Sequence[str]]

        body : typing.Optional[str]

        closed : typing.Optional[bool]

        due_date : typing.Optional[dt.datetime]

        labels : typing.Optional[typing.Sequence[int]]
            list of label ids

        milestone : typing.Optional[int]
            milestone id

        ref : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_issue(
            owner="owner",
            repo="repo",
            title="title",
        )
        """
        _response = self._raw_client.create_issue(
            owner,
            repo,
            title=title,
            assignee=assignee,
            assignees=assignees,
            body=body,
            closed=closed,
            due_date=due_date,
            labels=labels,
            milestone=milestone,
            ref=ref,
            request_options=request_options,
        )
        return _response.data

    def get_repo_comments(
        self,
        owner: str,
        repo: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the provided time are returned.

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]
            CommentList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_repo_comments(
            owner="owner",
            repo="repo",
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_repo_comments(
            owner,
            repo,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def get_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_comment(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.get_comment(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def delete_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of comment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_comment(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.delete_comment(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def edit_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_comment(
            owner="owner",
            repo="repo",
            id=1000000,
            body="body",
        )
        """
        _response = self._raw_client.edit_comment(
            owner,
            repo,
            id,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def list_issue_comment_attachments(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Attachment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Attachment]
            AttachmentList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_issue_comment_attachments(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.list_issue_comment_attachments(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def create_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        attachment: core.File,
        name: typing.Optional[str] = None,
        updated_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            name of the attachment

        updated_at : typing.Optional[dt.datetime]
            time of the attachment's creation. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_issue_comment_attachment(
            owner="owner",
            repo="repo",
            id=1000000,
            name="name",
            updated_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.create_issue_comment_attachment(
            owner,
            repo,
            id,
            attachment=attachment,
            name=name,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def get_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_issue_comment_attachment(
            owner="owner",
            repo="repo",
            id=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.get_issue_comment_attachment(
            owner, repo, id, attachment_id, request_options=request_options
        )
        return _response.data

    def delete_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_issue_comment_attachment(
            owner="owner",
            repo="repo",
            id=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.delete_issue_comment_attachment(
            owner, repo, id, attachment_id, request_options=request_options
        )
        return _response.data

    def edit_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        browser_download_url: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to edit

        browser_download_url : typing.Optional[str]
            (Can only be set if existing attachment is of external type)

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_issue_comment_attachment(
            owner="owner",
            repo="repo",
            id=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.edit_issue_comment_attachment(
            owner,
            repo,
            id,
            attachment_id,
            browser_download_url=browser_download_url,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def get_comment_reactions(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Reaction]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Reaction]
            ReactionList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_comment_reactions(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.get_comment_reactions(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def post_comment_reaction(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Reaction:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Reaction
            Reaction

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.post_comment_reaction(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.post_comment_reaction(
            owner, repo, id, content=content, request_options=request_options
        )
        return _response.data

    def delete_comment_reaction(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_comment_reaction(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.delete_comment_reaction(
            owner, repo, id, content=content, request_options=request_options
        )
        return _response.data

    def get_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_issue(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.get_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def delete(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.delete(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def edit_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        assignee: typing.Optional[str] = OMIT,
        assignees: typing.Optional[typing.Sequence[str]] = OMIT,
        body: typing.Optional[str] = OMIT,
        due_date: typing.Optional[dt.datetime] = OMIT,
        milestone: typing.Optional[int] = OMIT,
        ref: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        unset_due_date: typing.Optional[bool] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to edit

        assignee : typing.Optional[str]
            deprecated

        assignees : typing.Optional[typing.Sequence[str]]

        body : typing.Optional[str]

        due_date : typing.Optional[dt.datetime]

        milestone : typing.Optional[int]

        ref : typing.Optional[str]

        state : typing.Optional[str]

        title : typing.Optional[str]

        unset_due_date : typing.Optional[bool]

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_issue(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.edit_issue(
            owner,
            repo,
            index,
            assignee=assignee,
            assignees=assignees,
            body=body,
            due_date=due_date,
            milestone=milestone,
            ref=ref,
            state=state,
            title=title,
            unset_due_date=unset_due_date,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def list_issue_attachments(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Attachment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Attachment]
            AttachmentList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_issue_attachments(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.list_issue_attachments(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def create_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        attachment: core.File,
        name: typing.Optional[str] = None,
        updated_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            name of the attachment

        updated_at : typing.Optional[dt.datetime]
            time of the attachment's creation. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_issue_attachment(
            owner="owner",
            repo="repo",
            index=1000000,
            name="name",
            updated_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.create_issue_attachment(
            owner,
            repo,
            index,
            attachment=attachment,
            name=name,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def get_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_issue_attachment(
            owner="owner",
            repo="repo",
            index=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.get_issue_attachment(
            owner, repo, index, attachment_id, request_options=request_options
        )
        return _response.data

    def delete_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_issue_attachment(
            owner="owner",
            repo="repo",
            index=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.delete_issue_attachment(
            owner, repo, index, attachment_id, request_options=request_options
        )
        return _response.data

    def edit_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        browser_download_url: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to edit

        browser_download_url : typing.Optional[str]
            (Can only be set if existing attachment is of external type)

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_issue_attachment(
            owner="owner",
            repo="repo",
            index=1000000,
            attachment_id=1000000,
        )
        """
        _response = self._raw_client.edit_issue_attachment(
            owner,
            repo,
            index,
            attachment_id,
            browser_download_url=browser_download_url,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def list_blocks(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_blocks(
            owner="owner",
            repo="repo",
            index=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_blocks(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_issue_blocking(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_issue_blocking(
            owner_="owner",
            repo_="repo",
            index_=1000000,
        )
        """
        _response = self._raw_client.create_issue_blocking(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    def remove_issue_blocking(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.remove_issue_blocking(
            owner_="owner",
            repo_="repo",
            index_=1000000,
        )
        """
        _response = self._raw_client.remove_issue_blocking(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    def get_comments(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the specified time are returned.

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]
            CommentList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_comments(
            owner="owner",
            repo="repo",
            index=1000000,
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.get_comments(
            owner,
            repo,
            index,
            since=since,
            before=before,
            request_options=request_options,
        )
        return _response.data

    def create_comment(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_comment(
            owner="owner",
            repo="repo",
            index=1000000,
            body="body",
        )
        """
        _response = self._raw_client.create_comment(
            owner,
            repo,
            index,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def delete_comment_deprecated(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            this parameter is ignored

        id : int
            id of comment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_comment_deprecated(
            owner="owner",
            repo="repo",
            index=1,
            id=1000000,
        )
        """
        _response = self._raw_client.delete_comment_deprecated(
            owner, repo, index, id, request_options=request_options
        )
        return _response.data

    def edit_comment_deprecated(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            this parameter is ignored

        id : int
            id of the comment to edit

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_comment_deprecated(
            owner="owner",
            repo="repo",
            index=1,
            id=1000000,
            body="body",
        )
        """
        _response = self._raw_client.edit_comment_deprecated(
            owner,
            repo,
            index,
            id,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def edit_issue_deadline(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        due_date: dt.datetime,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IssueDeadline:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to create or update a deadline on

        due_date : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IssueDeadline
            IssueDeadline

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_issue_deadline(
            owner="owner",
            repo="repo",
            index=1000000,
            due_date=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.edit_issue_deadline(
            owner, repo, index, due_date=due_date, request_options=request_options
        )
        return _response.data

    def list_issue_dependencies(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_issue_dependencies(
            owner="owner",
            repo="repo",
            index=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_issue_dependencies(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_issue_dependencies(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_issue_dependencies(
            owner_="owner",
            repo_="repo",
            index_=1000000,
        )
        """
        _response = self._raw_client.create_issue_dependencies(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    def remove_issue_dependencies(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.remove_issue_dependencies(
            owner_="owner",
            repo_="repo",
            index_=1000000,
        )
        """
        _response = self._raw_client.remove_issue_dependencies(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    def get_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_labels(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.get_labels(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def add_label(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        labels: typing.Optional[
            typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]
        ] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        labels : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            Labels can be a list of integers representing label IDs
            or a list of strings representing label names

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.add_label(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.add_label(
            owner,
            repo,
            index,
            labels=labels,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def replace_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        labels: typing.Optional[
            typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]
        ] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        labels : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            Labels can be a list of integers representing label IDs
            or a list of strings representing label names

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.replace_labels(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.replace_labels(
            owner,
            repo,
            index,
            labels=labels,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def clear_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.clear_labels(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.clear_labels(
            owner, repo, index, updated_at=updated_at, request_options=request_options
        )
        return _response.data

    def remove_label(
        self,
        owner: str,
        repo: str,
        index: int,
        identifier: str,
        *,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        identifier : str
            name or id of the label to remove

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.remove_label(
            owner="owner",
            repo="repo",
            index=1000000,
            identifier="identifier",
        )
        """
        _response = self._raw_client.remove_label(
            owner,
            repo,
            index,
            identifier,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    def pin_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to pin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.pin_issue(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.pin_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def unpin_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to unpin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.unpin_issue(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.unpin_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def move_issue_pin(
        self,
        owner: str,
        repo: str,
        index: int,
        position: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue

        position : int
            the new position

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.move_issue_pin(
            owner="owner",
            repo="repo",
            index=1000000,
            position=1000000,
        )
        """
        _response = self._raw_client.move_issue_pin(
            owner, repo, index, position, request_options=request_options
        )
        return _response.data

    def get_issue_reactions(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Reaction]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Reaction]
            ReactionList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_issue_reactions(
            owner="owner",
            repo="repo",
            index=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_issue_reactions(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def post_issue_reaction(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Reaction:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Reaction
            Reaction

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.post_issue_reaction(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.post_issue_reaction(
            owner, repo, index, content=content, request_options=request_options
        )
        return _response.data

    def delete_issue_reaction(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_issue_reaction(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.delete_issue_reaction(
            owner, repo, index, content=content, request_options=request_options
        )
        return _response.data

    def delete_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to stop the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_stop_watch(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.delete_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def start_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to create the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.start_stop_watch(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.start_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def stop_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to stop the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.stop_stop_watch(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.stop_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def subscriptions(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.subscriptions(
            owner="owner",
            repo="repo",
            index=1000000,
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.subscriptions(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def check_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WatchInfo:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WatchInfo
            WatchInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.check_subscription(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.check_subscription(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def add_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        user: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : str
            user to subscribe

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.add_subscription(
            owner="owner",
            repo="repo",
            index=1000000,
            user="user",
        )
        """
        _response = self._raw_client.add_subscription(
            owner, repo, index, user, request_options=request_options
        )
        return _response.data

    def delete_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        user: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : str
            user witch unsubscribe

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_subscription(
            owner="owner",
            repo="repo",
            index=1000000,
            user="user",
        )
        """
        _response = self._raw_client.delete_subscription(
            owner, repo, index, user, request_options=request_options
        )
        return _response.data

    def get_comments_and_timeline(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        since: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TimelineComment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the specified time are returned.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TimelineComment]
            TimelineList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_comments_and_timeline(
            owner="owner",
            repo="repo",
            index=1000000,
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            page=1,
            limit=1,
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.get_comments_and_timeline(
            owner,
            repo,
            index,
            since=since,
            page=page,
            limit=limit,
            before=before,
            request_options=request_options,
        )
        return _response.data

    def tracked_times(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        user: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrackedTime]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : typing.Optional[str]
            optional filter by user (available for issue managers)

        since : typing.Optional[dt.datetime]
            Only show times updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show times updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrackedTime]
            TrackedTimeList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.tracked_times(
            owner="owner",
            repo="repo",
            index=1000000,
            user="user",
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.tracked_times(
            owner,
            repo,
            index,
            user=user,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def add_time(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        time: int,
        created: typing.Optional[dt.datetime] = OMIT,
        user_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrackedTime:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        time : int
            time in seconds

        created : typing.Optional[dt.datetime]

        user_name : typing.Optional[str]
            User who spent the time (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrackedTime
            TrackedTime

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.add_time(
            owner="owner",
            repo="repo",
            index=1000000,
            time=1000000,
        )
        """
        _response = self._raw_client.add_time(
            owner,
            repo,
            index,
            time=time,
            created=created,
            user_name=user_name,
            request_options=request_options,
        )
        return _response.data

    def reset_time(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to add tracked time to

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.reset_time(
            owner="owner",
            repo="repo",
            index=1000000,
        )
        """
        _response = self._raw_client.reset_time(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    def delete_time(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        id : int
            id of time to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_time(
            owner="owner",
            repo="repo",
            index=1000000,
            id=1000000,
        )
        """
        _response = self._raw_client.delete_time(
            owner, repo, index, id, request_options=request_options
        )
        return _response.data

    def list_labels(
        self,
        owner: str,
        repo: str,
        *,
        sort: typing.Optional[IssueListLabelsRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        sort : typing.Optional[IssueListLabelsRequestSort]
            Specifies the sorting method: mostissues, leastissues, or reversealphabetically.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.list_labels(
            owner="owner",
            repo="repo",
            sort="mostissues",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_labels(
            owner,
            repo,
            sort=sort,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def create_label(
        self,
        owner: str,
        repo: str,
        *,
        color: str,
        name: str,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        color : str

        name : str

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_label(
            owner="owner",
            repo="repo",
            color="#00aabb",
            name="name",
        )
        """
        _response = self._raw_client.create_label(
            owner,
            repo,
            color=color,
            name=name,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            request_options=request_options,
        )
        return _response.data

    def get_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_label(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.get_label(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def delete_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_label(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.delete_label(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def edit_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        color: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to edit

        color : typing.Optional[str]

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_label(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.edit_label(
            owner,
            repo,
            id,
            color=color,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            name=name,
            request_options=request_options,
        )
        return _response.data

    def get_milestones_list(
        self,
        owner: str,
        repo: str,
        *,
        state: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Milestone]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        state : typing.Optional[str]
            Milestone state, Recognized values are open, closed and all. Defaults to "open"

        name : typing.Optional[str]
            filter by milestone name

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Milestone]
            MilestoneList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_milestones_list(
            owner="owner",
            repo="repo",
            state="state",
            name="name",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_milestones_list(
            owner,
            repo,
            state=state,
            name=name,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def create_milestone(
        self,
        owner: str,
        repo: str,
        *,
        description: typing.Optional[str] = OMIT,
        due_on: typing.Optional[dt.datetime] = OMIT,
        state: typing.Optional[CreateMilestoneOptionState] = OMIT,
        title: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        description : typing.Optional[str]

        due_on : typing.Optional[dt.datetime]

        state : typing.Optional[CreateMilestoneOptionState]

        title : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.create_milestone(
            owner="owner",
            repo="repo",
        )
        """
        _response = self._raw_client.create_milestone(
            owner,
            repo,
            description=description,
            due_on=due_on,
            state=state,
            title=title,
            request_options=request_options,
        )
        return _response.data

    def get_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to get, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.get_milestone(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.get_milestone(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def delete_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to delete, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.delete_milestone(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.delete_milestone(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    def edit_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        description: typing.Optional[str] = OMIT,
        due_on: typing.Optional[dt.datetime] = OMIT,
        state: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to edit, identified by ID and if not available by name

        description : typing.Optional[str]

        due_on : typing.Optional[dt.datetime]

        state : typing.Optional[str]

        title : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.issue.edit_milestone(
            owner="owner",
            repo="repo",
            id=1000000,
        )
        """
        _response = self._raw_client.edit_milestone(
            owner,
            repo,
            id,
            description=description,
            due_on=due_on,
            state=state,
            title=title,
            request_options=request_options,
        )
        return _response.data


class AsyncIssueClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawIssueClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawIssueClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawIssueClient
        """
        return self._raw_client

    async def search_issues(
        self,
        *,
        state: typing.Optional[IssueSearchIssuesRequestState] = None,
        labels: typing.Optional[str] = None,
        milestones: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        priority_repo_id: typing.Optional[int] = None,
        type: typing.Optional[IssueSearchIssuesRequestType] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        assigned: typing.Optional[bool] = None,
        created: typing.Optional[bool] = None,
        mentioned: typing.Optional[bool] = None,
        review_requested: typing.Optional[bool] = None,
        reviewed: typing.Optional[bool] = None,
        owner: typing.Optional[str] = None,
        team: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[IssueSearchIssuesRequestSort] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        state : typing.Optional[IssueSearchIssuesRequestState]
            State of the issue

        labels : typing.Optional[str]
            Comma-separated list of label names. Fetch only issues that have any of these labels. Non existent labels are discarded.

        milestones : typing.Optional[str]
            Comma-separated list of milestone names. Fetch only issues that have any of these milestones. Non existent milestones are discarded.

        q : typing.Optional[str]
            Search string

        priority_repo_id : typing.Optional[int]
            Repository ID to prioritize in the results

        type : typing.Optional[IssueSearchIssuesRequestType]
            Filter by issue type

        since : typing.Optional[dt.datetime]
            Only show issues updated after the given time (RFC 3339 format)

        before : typing.Optional[dt.datetime]
            Only show issues updated before the given time (RFC 3339 format)

        assigned : typing.Optional[bool]
            Filter issues or pulls assigned to the authenticated user

        created : typing.Optional[bool]
            Filter issues or pulls created by the authenticated user

        mentioned : typing.Optional[bool]
            Filter issues or pulls mentioning the authenticated user

        review_requested : typing.Optional[bool]
            Filter pull requests where the authenticated user's review was requested

        reviewed : typing.Optional[bool]
            Filter pull requests reviewed by the authenticated user

        owner : typing.Optional[str]
            Filter by repository owner

        team : typing.Optional[str]
            Filter by team (requires organization owner parameter)

        page : typing.Optional[int]
            Page number of results to return (1-based)

        limit : typing.Optional[int]
            Number of items per page

        sort : typing.Optional[IssueSearchIssuesRequestSort]
            Type of sort

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.search_issues(
                state="open",
                labels="labels",
                milestones="milestones",
                q="q",
                priority_repo_id=1000000,
                type="issues",
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                assigned=True,
                created=True,
                mentioned=True,
                review_requested=True,
                reviewed=True,
                owner="owner",
                team="team",
                page=1,
                limit=1,
                sort="relevance",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_issues(
            state=state,
            labels=labels,
            milestones=milestones,
            q=q,
            priority_repo_id=priority_repo_id,
            type=type,
            since=since,
            before=before,
            assigned=assigned,
            created=created,
            mentioned=mentioned,
            review_requested=review_requested,
            reviewed=reviewed,
            owner=owner,
            team=team,
            page=page,
            limit=limit,
            sort=sort,
            request_options=request_options,
        )
        return _response.data

    async def list_issues(
        self,
        owner: str,
        repo: str,
        *,
        state: typing.Optional[IssueListIssuesRequestState] = None,
        labels: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        type: typing.Optional[IssueListIssuesRequestType] = None,
        milestones: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        created_by: typing.Optional[str] = None,
        assigned_by: typing.Optional[str] = None,
        mentioned_by: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort: typing.Optional[IssueListIssuesRequestSort] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        state : typing.Optional[IssueListIssuesRequestState]
            whether issue is open or closed

        labels : typing.Optional[str]
            comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded

        q : typing.Optional[str]
            search string

        type : typing.Optional[IssueListIssuesRequestType]
            filter by type (issues / pulls) if set

        milestones : typing.Optional[str]
            comma separated list of milestone names or ids. It uses names and fall back to ids. Fetch only issues that have any of this milestones. Non existent milestones are discarded

        since : typing.Optional[dt.datetime]
            Only show items updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show items updated before the given time. This is a timestamp in RFC 3339 format

        created_by : typing.Optional[str]
            Only show items which were created by the given user

        assigned_by : typing.Optional[str]
            Only show items for which the given user is assigned

        mentioned_by : typing.Optional[str]
            Only show items in which the given user was mentioned

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        sort : typing.Optional[IssueListIssuesRequestSort]
            Type of sort

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_issues(
                owner="owner",
                repo="repo",
                state="closed",
                labels="labels",
                q="q",
                type="issues",
                milestones="milestones",
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                created_by="created_by",
                assigned_by="assigned_by",
                mentioned_by="mentioned_by",
                page=1,
                limit=1,
                sort="relevance",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_issues(
            owner,
            repo,
            state=state,
            labels=labels,
            q=q,
            type=type,
            milestones=milestones,
            since=since,
            before=before,
            created_by=created_by,
            assigned_by=assigned_by,
            mentioned_by=mentioned_by,
            page=page,
            limit=limit,
            sort=sort,
            request_options=request_options,
        )
        return _response.data

    async def create_issue(
        self,
        owner: str,
        repo: str,
        *,
        title: str,
        assignee: typing.Optional[str] = OMIT,
        assignees: typing.Optional[typing.Sequence[str]] = OMIT,
        body: typing.Optional[str] = OMIT,
        closed: typing.Optional[bool] = OMIT,
        due_date: typing.Optional[dt.datetime] = OMIT,
        labels: typing.Optional[typing.Sequence[int]] = OMIT,
        milestone: typing.Optional[int] = OMIT,
        ref: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        title : str

        assignee : typing.Optional[str]
            deprecated

        assignees : typing.Optional[typing.Sequence[str]]

        body : typing.Optional[str]

        closed : typing.Optional[bool]

        due_date : typing.Optional[dt.datetime]

        labels : typing.Optional[typing.Sequence[int]]
            list of label ids

        milestone : typing.Optional[int]
            milestone id

        ref : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_issue(
                owner="owner",
                repo="repo",
                title="title",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_issue(
            owner,
            repo,
            title=title,
            assignee=assignee,
            assignees=assignees,
            body=body,
            closed=closed,
            due_date=due_date,
            labels=labels,
            milestone=milestone,
            ref=ref,
            request_options=request_options,
        )
        return _response.data

    async def get_repo_comments(
        self,
        owner: str,
        repo: str,
        *,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the provided time are returned.

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]
            CommentList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_repo_comments(
                owner="owner",
                repo="repo",
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_repo_comments(
            owner,
            repo,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def get_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_comment(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_comment(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def delete_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of comment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_comment(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_comment(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def edit_comment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_comment(
                owner="owner",
                repo="repo",
                id=1000000,
                body="body",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_comment(
            owner,
            repo,
            id,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def list_issue_comment_attachments(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Attachment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Attachment]
            AttachmentList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_issue_comment_attachments(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_issue_comment_attachments(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def create_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        attachment: core.File,
        name: typing.Optional[str] = None,
        updated_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            name of the attachment

        updated_at : typing.Optional[dt.datetime]
            time of the attachment's creation. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_issue_comment_attachment(
                owner="owner",
                repo="repo",
                id=1000000,
                name="name",
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_issue_comment_attachment(
            owner,
            repo,
            id,
            attachment=attachment,
            name=name,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def get_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_issue_comment_attachment(
                owner="owner",
                repo="repo",
                id=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_issue_comment_attachment(
            owner, repo, id, attachment_id, request_options=request_options
        )
        return _response.data

    async def delete_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_issue_comment_attachment(
                owner="owner",
                repo="repo",
                id=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_issue_comment_attachment(
            owner, repo, id, attachment_id, request_options=request_options
        )
        return _response.data

    async def edit_issue_comment_attachment(
        self,
        owner: str,
        repo: str,
        id: int,
        attachment_id: int,
        *,
        browser_download_url: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment

        attachment_id : int
            id of the attachment to edit

        browser_download_url : typing.Optional[str]
            (Can only be set if existing attachment is of external type)

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_issue_comment_attachment(
                owner="owner",
                repo="repo",
                id=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_issue_comment_attachment(
            owner,
            repo,
            id,
            attachment_id,
            browser_download_url=browser_download_url,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def get_comment_reactions(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Reaction]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Reaction]
            ReactionList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_comment_reactions(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_comment_reactions(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def post_comment_reaction(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Reaction:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Reaction
            Reaction

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.post_comment_reaction(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_comment_reaction(
            owner, repo, id, content=content, request_options=request_options
        )
        return _response.data

    async def delete_comment_reaction(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the comment to edit

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_comment_reaction(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_comment_reaction(
            owner, repo, id, content=content, request_options=request_options
        )
        return _response.data

    async def get_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_issue(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def delete(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def edit_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        assignee: typing.Optional[str] = OMIT,
        assignees: typing.Optional[typing.Sequence[str]] = OMIT,
        body: typing.Optional[str] = OMIT,
        due_date: typing.Optional[dt.datetime] = OMIT,
        milestone: typing.Optional[int] = OMIT,
        ref: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        unset_due_date: typing.Optional[bool] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to edit

        assignee : typing.Optional[str]
            deprecated

        assignees : typing.Optional[typing.Sequence[str]]

        body : typing.Optional[str]

        due_date : typing.Optional[dt.datetime]

        milestone : typing.Optional[int]

        ref : typing.Optional[str]

        state : typing.Optional[str]

        title : typing.Optional[str]

        unset_due_date : typing.Optional[bool]

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_issue(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_issue(
            owner,
            repo,
            index,
            assignee=assignee,
            assignees=assignees,
            body=body,
            due_date=due_date,
            milestone=milestone,
            ref=ref,
            state=state,
            title=title,
            unset_due_date=unset_due_date,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def list_issue_attachments(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Attachment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Attachment]
            AttachmentList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_issue_attachments(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_issue_attachments(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def create_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        attachment: core.File,
        name: typing.Optional[str] = None,
        updated_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment : core.File
            See core.File for more documentation

        name : typing.Optional[str]
            name of the attachment

        updated_at : typing.Optional[dt.datetime]
            time of the attachment's creation. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_issue_attachment(
                owner="owner",
                repo="repo",
                index=1000000,
                name="name",
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_issue_attachment(
            owner,
            repo,
            index,
            attachment=attachment,
            name=name,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def get_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_issue_attachment(
                owner="owner",
                repo="repo",
                index=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_issue_attachment(
            owner, repo, index, attachment_id, request_options=request_options
        )
        return _response.data

    async def delete_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_issue_attachment(
                owner="owner",
                repo="repo",
                index=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_issue_attachment(
            owner, repo, index, attachment_id, request_options=request_options
        )
        return _response.data

    async def edit_issue_attachment(
        self,
        owner: str,
        repo: str,
        index: int,
        attachment_id: int,
        *,
        browser_download_url: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Attachment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        attachment_id : int
            id of the attachment to edit

        browser_download_url : typing.Optional[str]
            (Can only be set if existing attachment is of external type)

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Attachment
            Attachment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_issue_attachment(
                owner="owner",
                repo="repo",
                index=1000000,
                attachment_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_issue_attachment(
            owner,
            repo,
            index,
            attachment_id,
            browser_download_url=browser_download_url,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def list_blocks(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_blocks(
                owner="owner",
                repo="repo",
                index=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_blocks(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_issue_blocking(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_issue_blocking(
                owner_="owner",
                repo_="repo",
                index_=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_issue_blocking(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    async def remove_issue_blocking(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.remove_issue_blocking(
                owner_="owner",
                repo_="repo",
                index_=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_issue_blocking(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    async def get_comments(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the specified time are returned.

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]
            CommentList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_comments(
                owner="owner",
                repo="repo",
                index=1000000,
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_comments(
            owner,
            repo,
            index,
            since=since,
            before=before,
            request_options=request_options,
        )
        return _response.data

    async def create_comment(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_comment(
                owner="owner",
                repo="repo",
                index=1000000,
                body="body",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_comment(
            owner,
            repo,
            index,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def delete_comment_deprecated(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            this parameter is ignored

        id : int
            id of comment to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_comment_deprecated(
                owner="owner",
                repo="repo",
                index=1,
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_comment_deprecated(
            owner, repo, index, id, request_options=request_options
        )
        return _response.data

    async def edit_comment_deprecated(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        body: str,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            this parameter is ignored

        id : int
            id of the comment to edit

        body : str

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment
            Comment

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_comment_deprecated(
                owner="owner",
                repo="repo",
                index=1,
                id=1000000,
                body="body",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_comment_deprecated(
            owner,
            repo,
            index,
            id,
            body=body,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def edit_issue_deadline(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        due_date: dt.datetime,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> IssueDeadline:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to create or update a deadline on

        due_date : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IssueDeadline
            IssueDeadline

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_issue_deadline(
                owner="owner",
                repo="repo",
                index=1000000,
                due_date=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_issue_deadline(
            owner, repo, index, due_date=due_date, request_options=request_options
        )
        return _response.data

    async def list_issue_dependencies(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Issue]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Issue]
            IssueList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_issue_dependencies(
                owner="owner",
                repo="repo",
                index=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_issue_dependencies(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_issue_dependencies(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_issue_dependencies(
                owner_="owner",
                repo_="repo",
                index_=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_issue_dependencies(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    async def remove_issue_dependencies(
        self,
        owner_: str,
        repo_: str,
        index_: int,
        *,
        index: typing.Optional[int] = OMIT,
        owner: typing.Optional[str] = OMIT,
        repo: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Issue:
        """
        Parameters
        ----------
        owner_ : str
            owner of the repo

        repo_ : str
            name of the repo

        index_ : int
            index of the issue

        index : typing.Optional[int]

        owner : typing.Optional[str]

        repo : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Issue
            Issue

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.remove_issue_dependencies(
                owner_="owner",
                repo_="repo",
                index_=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_issue_dependencies(
            owner_,
            repo_,
            index_,
            index=index,
            owner=owner,
            repo=repo,
            request_options=request_options,
        )
        return _response.data

    async def get_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_labels(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_labels(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def add_label(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        labels: typing.Optional[
            typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]
        ] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        labels : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            Labels can be a list of integers representing label IDs
            or a list of strings representing label names

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.add_label(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_label(
            owner,
            repo,
            index,
            labels=labels,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def replace_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        labels: typing.Optional[
            typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]
        ] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        labels : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            Labels can be a list of integers representing label IDs
            or a list of strings representing label names

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.replace_labels(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.replace_labels(
            owner,
            repo,
            index,
            labels=labels,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def clear_labels(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.clear_labels(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.clear_labels(
            owner, repo, index, updated_at=updated_at, request_options=request_options
        )
        return _response.data

    async def remove_label(
        self,
        owner: str,
        repo: str,
        index: int,
        identifier: str,
        *,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        identifier : str
            name or id of the label to remove

        updated_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.remove_label(
                owner="owner",
                repo="repo",
                index=1000000,
                identifier="identifier",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_label(
            owner,
            repo,
            index,
            identifier,
            updated_at=updated_at,
            request_options=request_options,
        )
        return _response.data

    async def pin_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to pin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.pin_issue(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.pin_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def unpin_issue(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue to unpin

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.unpin_issue(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.unpin_issue(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def move_issue_pin(
        self,
        owner: str,
        repo: str,
        index: int,
        position: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of issue

        position : int
            the new position

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.move_issue_pin(
                owner="owner",
                repo="repo",
                index=1000000,
                position=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.move_issue_pin(
            owner, repo, index, position, request_options=request_options
        )
        return _response.data

    async def get_issue_reactions(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Reaction]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Reaction]
            ReactionList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_issue_reactions(
                owner="owner",
                repo="repo",
                index=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_issue_reactions(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def post_issue_reaction(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Reaction:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Reaction
            Reaction

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.post_issue_reaction(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_issue_reaction(
            owner, repo, index, content=content, request_options=request_options
        )
        return _response.data

    async def delete_issue_reaction(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        content: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        content : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_issue_reaction(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_issue_reaction(
            owner, repo, index, content=content, request_options=request_options
        )
        return _response.data

    async def delete_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to stop the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_stop_watch(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def start_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to create the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.start_stop_watch(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.start_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def stop_stop_watch(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to stop the stopwatch on

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.stop_stop_watch(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.stop_stop_watch(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def subscriptions(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.subscriptions(
                owner="owner",
                repo="repo",
                index=1000000,
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.subscriptions(
            owner, repo, index, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def check_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WatchInfo:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WatchInfo
            WatchInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.check_subscription(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.check_subscription(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def add_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        user: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : str
            user to subscribe

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.add_subscription(
                owner="owner",
                repo="repo",
                index=1000000,
                user="user",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_subscription(
            owner, repo, index, user, request_options=request_options
        )
        return _response.data

    async def delete_subscription(
        self,
        owner: str,
        repo: str,
        index: int,
        user: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : str
            user witch unsubscribe

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_subscription(
                owner="owner",
                repo="repo",
                index=1000000,
                user="user",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_subscription(
            owner, repo, index, user, request_options=request_options
        )
        return _response.data

    async def get_comments_and_timeline(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        since: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TimelineComment]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        since : typing.Optional[dt.datetime]
            if provided, only comments updated since the specified time are returned.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        before : typing.Optional[dt.datetime]
            if provided, only comments updated before the provided time are returned.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TimelineComment]
            TimelineList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_comments_and_timeline(
                owner="owner",
                repo="repo",
                index=1000000,
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                page=1,
                limit=1,
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_comments_and_timeline(
            owner,
            repo,
            index,
            since=since,
            page=page,
            limit=limit,
            before=before,
            request_options=request_options,
        )
        return _response.data

    async def tracked_times(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        user: typing.Optional[str] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrackedTime]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        user : typing.Optional[str]
            optional filter by user (available for issue managers)

        since : typing.Optional[dt.datetime]
            Only show times updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show times updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrackedTime]
            TrackedTimeList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.tracked_times(
                owner="owner",
                repo="repo",
                index=1000000,
                user="user",
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.tracked_times(
            owner,
            repo,
            index,
            user=user,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def add_time(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        time: int,
        created: typing.Optional[dt.datetime] = OMIT,
        user_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TrackedTime:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        time : int
            time in seconds

        created : typing.Optional[dt.datetime]

        user_name : typing.Optional[str]
            User who spent the time (optional)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TrackedTime
            TrackedTime

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.add_time(
                owner="owner",
                repo="repo",
                index=1000000,
                time=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.add_time(
            owner,
            repo,
            index,
            time=time,
            created=created,
            user_name=user_name,
            request_options=request_options,
        )
        return _response.data

    async def reset_time(
        self,
        owner: str,
        repo: str,
        index: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue to add tracked time to

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.reset_time(
                owner="owner",
                repo="repo",
                index=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.reset_time(
            owner, repo, index, request_options=request_options
        )
        return _response.data

    async def delete_time(
        self,
        owner: str,
        repo: str,
        index: int,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        index : int
            index of the issue

        id : int
            id of time to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_time(
                owner="owner",
                repo="repo",
                index=1000000,
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_time(
            owner, repo, index, id, request_options=request_options
        )
        return _response.data

    async def list_labels(
        self,
        owner: str,
        repo: str,
        *,
        sort: typing.Optional[IssueListLabelsRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Label]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        sort : typing.Optional[IssueListLabelsRequestSort]
            Specifies the sorting method: mostissues, leastissues, or reversealphabetically.

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Label]
            LabelList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.list_labels(
                owner="owner",
                repo="repo",
                sort="mostissues",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_labels(
            owner,
            repo,
            sort=sort,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def create_label(
        self,
        owner: str,
        repo: str,
        *,
        color: str,
        name: str,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        color : str

        name : str

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_label(
                owner="owner",
                repo="repo",
                color="#00aabb",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_label(
            owner,
            repo,
            color=color,
            name=name,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            request_options=request_options,
        )
        return _response.data

    async def get_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_label(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_label(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def delete_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_label(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_label(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def edit_label(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        color: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        exclusive: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Label:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            id of the label to edit

        color : typing.Optional[str]

        description : typing.Optional[str]

        exclusive : typing.Optional[bool]

        is_archived : typing.Optional[bool]

        name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Label
            Label

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_label(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_label(
            owner,
            repo,
            id,
            color=color,
            description=description,
            exclusive=exclusive,
            is_archived=is_archived,
            name=name,
            request_options=request_options,
        )
        return _response.data

    async def get_milestones_list(
        self,
        owner: str,
        repo: str,
        *,
        state: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Milestone]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        state : typing.Optional[str]
            Milestone state, Recognized values are open, closed and all. Defaults to "open"

        name : typing.Optional[str]
            filter by milestone name

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Milestone]
            MilestoneList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_milestones_list(
                owner="owner",
                repo="repo",
                state="state",
                name="name",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_milestones_list(
            owner,
            repo,
            state=state,
            name=name,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def create_milestone(
        self,
        owner: str,
        repo: str,
        *,
        description: typing.Optional[str] = OMIT,
        due_on: typing.Optional[dt.datetime] = OMIT,
        state: typing.Optional[CreateMilestoneOptionState] = OMIT,
        title: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        description : typing.Optional[str]

        due_on : typing.Optional[dt.datetime]

        state : typing.Optional[CreateMilestoneOptionState]

        title : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.create_milestone(
                owner="owner",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_milestone(
            owner,
            repo,
            description=description,
            due_on=due_on,
            state=state,
            title=title,
            request_options=request_options,
        )
        return _response.data

    async def get_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to get, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.get_milestone(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_milestone(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def delete_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to delete, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.delete_milestone(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_milestone(
            owner, repo, id, request_options=request_options
        )
        return _response.data

    async def edit_milestone(
        self,
        owner: str,
        repo: str,
        id: int,
        *,
        description: typing.Optional[str] = OMIT,
        due_on: typing.Optional[dt.datetime] = OMIT,
        state: typing.Optional[str] = OMIT,
        title: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Milestone:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        id : int
            the milestone to edit, identified by ID and if not available by name

        description : typing.Optional[str]

        due_on : typing.Optional[dt.datetime]

        state : typing.Optional[str]

        title : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Milestone
            Milestone

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.issue.edit_milestone(
                owner="owner",
                repo="repo",
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_milestone(
            owner,
            repo,
            id,
            description=description,
            due_on=due_on,
            state=state,
            title=title,
            request_options=request_options,
        )
        return _response.data

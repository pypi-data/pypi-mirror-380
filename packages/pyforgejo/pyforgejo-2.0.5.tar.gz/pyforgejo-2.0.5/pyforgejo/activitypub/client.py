# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.activity_pub import ActivityPub
from ..types.ap_person_follow_item import ApPersonFollowItem
from ..types.forge_like import ForgeLike
from .raw_client import AsyncRawActivitypubClient, RawActivitypubClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ActivitypubClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawActivitypubClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawActivitypubClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawActivitypubClient
        """
        return self._raw_client

    def instance_actor(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActivityPub:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.instance_actor()
        """
        _response = self._raw_client.instance_actor(request_options=request_options)
        return _response.data

    def instance_actor_inbox(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.instance_actor_inbox()
        """
        _response = self._raw_client.instance_actor_inbox(
            request_options=request_options
        )
        return _response.data

    def repository(
        self,
        repository_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        repository_id : int
            repository ID of the repo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.repository(
            repository_id=1000000,
        )
        """
        _response = self._raw_client.repository(
            repository_id, request_options=request_options
        )
        return _response.data

    def repository_inbox(
        self,
        repository_id: int,
        *,
        request: ForgeLike,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        repository_id : int
            repository ID of the repo

        request : ForgeLike

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.repository_inbox(
            repository_id=1000000,
            request={"key": "value"},
        )
        """
        _response = self._raw_client.repository_inbox(
            repository_id, request=request, request_options=request_options
        )
        return _response.data

    def person(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.person(
            user_id=1000000,
        )
        """
        _response = self._raw_client.person(user_id, request_options=request_options)
        return _response.data

    def person_activity_note(
        self,
        user_id: int,
        activity_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        activity_id : int
            activity ID of the sought activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.person_activity_note(
            user_id=1,
            activity_id=1,
        )
        """
        _response = self._raw_client.person_activity_note(
            user_id, activity_id, request_options=request_options
        )
        return _response.data

    def person_activity(
        self,
        user_id: int,
        activity_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        activity_id : int
            activity ID of the sought activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.person_activity(
            user_id=1,
            activity_id=1,
        )
        """
        _response = self._raw_client.person_activity(
            user_id, activity_id, request_options=request_options
        )
        return _response.data

    def person_inbox(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.person_inbox(
            user_id=1000000,
        )
        """
        _response = self._raw_client.person_inbox(
            user_id, request_options=request_options
        )
        return _response.data

    def person_feed(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApPersonFollowItem]:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApPersonFollowItem]
            Personfeed

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.activitypub.person_feed(
            user_id=1,
        )
        """
        _response = self._raw_client.person_feed(
            user_id, request_options=request_options
        )
        return _response.data


class AsyncActivitypubClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawActivitypubClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawActivitypubClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawActivitypubClient
        """
        return self._raw_client

    async def instance_actor(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActivityPub:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.instance_actor()


        asyncio.run(main())
        """
        _response = await self._raw_client.instance_actor(
            request_options=request_options
        )
        return _response.data

    async def instance_actor_inbox(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.instance_actor_inbox()


        asyncio.run(main())
        """
        _response = await self._raw_client.instance_actor_inbox(
            request_options=request_options
        )
        return _response.data

    async def repository(
        self,
        repository_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        repository_id : int
            repository ID of the repo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.repository(
                repository_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.repository(
            repository_id, request_options=request_options
        )
        return _response.data

    async def repository_inbox(
        self,
        repository_id: int,
        *,
        request: ForgeLike,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        repository_id : int
            repository ID of the repo

        request : ForgeLike

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.repository_inbox(
                repository_id=1000000,
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.repository_inbox(
            repository_id, request=request, request_options=request_options
        )
        return _response.data

    async def person(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.person(
                user_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.person(
            user_id, request_options=request_options
        )
        return _response.data

    async def person_activity_note(
        self,
        user_id: int,
        activity_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        activity_id : int
            activity ID of the sought activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.person_activity_note(
                user_id=1,
                activity_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.person_activity_note(
            user_id, activity_id, request_options=request_options
        )
        return _response.data

    async def person_activity(
        self,
        user_id: int,
        activity_id: int,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActivityPub:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        activity_id : int
            activity ID of the sought activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActivityPub
            ActivityPub

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.person_activity(
                user_id=1,
                activity_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.person_activity(
            user_id, activity_id, request_options=request_options
        )
        return _response.data

    async def person_inbox(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.person_inbox(
                user_id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.person_inbox(
            user_id, request_options=request_options
        )
        return _response.data

    async def person_feed(
        self, user_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ApPersonFollowItem]:
        """
        Parameters
        ----------
        user_id : int
            user ID of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApPersonFollowItem]
            Personfeed

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.activitypub.person_feed(
                user_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.person_feed(
            user_id, request_options=request_options
        )
        return _response.data

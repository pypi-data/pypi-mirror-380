# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.notification_count import NotificationCount
from ..types.notification_thread import NotificationThread
from .raw_client import AsyncRawNotificationClient, RawNotificationClient
from .types.notify_get_list_request_subject_type_item import \
    NotifyGetListRequestSubjectTypeItem
from .types.notify_get_repo_list_request_subject_type_item import \
    NotifyGetRepoListRequestSubjectTypeItem


class NotificationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNotificationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNotificationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNotificationClient
        """
        return self._raw_client

    def notify_get_list(
        self,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        subject_type: typing.Optional[
            typing.Union[
                NotifyGetListRequestSubjectTypeItem,
                typing.Sequence[NotifyGetListRequestSubjectTypeItem],
            ]
        ] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[NotificationThread]:
        """
        Parameters
        ----------
        all_ : typing.Optional[bool]
            If true, show notifications marked as read. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned.

        subject_type : typing.Optional[typing.Union[NotifyGetListRequestSubjectTypeItem, typing.Sequence[NotifyGetListRequestSubjectTypeItem]]]
            filter notifications by subject type

        since : typing.Optional[dt.datetime]
            Only show notifications updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show notifications updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationThread]
            NotificationThreadList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_get_list(
            all_=True,
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.notify_get_list(
            all_=all_,
            status_types=status_types,
            subject_type=subject_type,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def notify_read_list(
        self,
        *,
        last_read_at: typing.Optional[dt.datetime] = None,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        to_status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        last_read_at : typing.Optional[dt.datetime]
            Describes the last point that notifications were checked. Anything updated since this time will not be updated.

        all_ : typing.Optional[bool]
            If true, mark all notifications on this repo. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.

        to_status : typing.Optional[str]
            Status to mark notifications as, Defaults to read.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_read_list(
            last_read_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            all_=True,
            to_status="to-status",
        )
        """
        _response = self._raw_client.notify_read_list(
            last_read_at=last_read_at,
            all_=all_,
            status_types=status_types,
            to_status=to_status,
            request_options=request_options,
        )
        return _response.data

    def notify_new_available(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationCount:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationCount
            Number of unread notifications

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_new_available()
        """
        _response = self._raw_client.notify_new_available(
            request_options=request_options
        )
        return _response.data

    def notify_get_thread(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationThread:
        """
        Parameters
        ----------
        id : int
            id of notification thread

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationThread
            NotificationThread

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_get_thread(
            id=1000000,
        )
        """
        _response = self._raw_client.notify_get_thread(
            id, request_options=request_options
        )
        return _response.data

    def notify_read_thread(
        self,
        id: int,
        *,
        to_status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of notification thread

        to_status : typing.Optional[str]
            Status to mark notifications as

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_read_thread(
            id=1000000,
            to_status="to-status",
        )
        """
        _response = self._raw_client.notify_read_thread(
            id, to_status=to_status, request_options=request_options
        )
        return _response.data

    def notify_get_repo_list(
        self,
        owner: str,
        repo: str,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        subject_type: typing.Optional[
            typing.Union[
                NotifyGetRepoListRequestSubjectTypeItem,
                typing.Sequence[NotifyGetRepoListRequestSubjectTypeItem],
            ]
        ] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[NotificationThread]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        all_ : typing.Optional[bool]
            If true, show notifications marked as read. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned

        subject_type : typing.Optional[typing.Union[NotifyGetRepoListRequestSubjectTypeItem, typing.Sequence[NotifyGetRepoListRequestSubjectTypeItem]]]
            filter notifications by subject type

        since : typing.Optional[dt.datetime]
            Only show notifications updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show notifications updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationThread]
            NotificationThreadList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_get_repo_list(
            owner="owner",
            repo="repo",
            all_=True,
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.notify_get_repo_list(
            owner,
            repo,
            all_=all_,
            status_types=status_types,
            subject_type=subject_type,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def notify_read_repo_list(
        self,
        owner: str,
        repo: str,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        to_status: typing.Optional[str] = None,
        last_read_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        all_ : typing.Optional[bool]
            If true, mark all notifications on this repo. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.

        to_status : typing.Optional[str]
            Status to mark notifications as. Defaults to read.

        last_read_at : typing.Optional[dt.datetime]
            Describes the last point that notifications were checked. Anything updated since this time will not be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.notification.notify_read_repo_list(
            owner="owner",
            repo="repo",
            all_=True,
            to_status="to-status",
            last_read_at=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.notify_read_repo_list(
            owner,
            repo,
            all_=all_,
            status_types=status_types,
            to_status=to_status,
            last_read_at=last_read_at,
            request_options=request_options,
        )
        return _response.data


class AsyncNotificationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNotificationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNotificationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNotificationClient
        """
        return self._raw_client

    async def notify_get_list(
        self,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        subject_type: typing.Optional[
            typing.Union[
                NotifyGetListRequestSubjectTypeItem,
                typing.Sequence[NotifyGetListRequestSubjectTypeItem],
            ]
        ] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[NotificationThread]:
        """
        Parameters
        ----------
        all_ : typing.Optional[bool]
            If true, show notifications marked as read. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned.

        subject_type : typing.Optional[typing.Union[NotifyGetListRequestSubjectTypeItem, typing.Sequence[NotifyGetListRequestSubjectTypeItem]]]
            filter notifications by subject type

        since : typing.Optional[dt.datetime]
            Only show notifications updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show notifications updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationThread]
            NotificationThreadList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_get_list(
                all_=True,
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_get_list(
            all_=all_,
            status_types=status_types,
            subject_type=subject_type,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def notify_read_list(
        self,
        *,
        last_read_at: typing.Optional[dt.datetime] = None,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        to_status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        last_read_at : typing.Optional[dt.datetime]
            Describes the last point that notifications were checked. Anything updated since this time will not be updated.

        all_ : typing.Optional[bool]
            If true, mark all notifications on this repo. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.

        to_status : typing.Optional[str]
            Status to mark notifications as, Defaults to read.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_read_list(
                last_read_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                all_=True,
                to_status="to-status",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_read_list(
            last_read_at=last_read_at,
            all_=all_,
            status_types=status_types,
            to_status=to_status,
            request_options=request_options,
        )
        return _response.data

    async def notify_new_available(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationCount:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationCount
            Number of unread notifications

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_new_available()


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_new_available(
            request_options=request_options
        )
        return _response.data

    async def notify_get_thread(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NotificationThread:
        """
        Parameters
        ----------
        id : int
            id of notification thread

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NotificationThread
            NotificationThread

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_get_thread(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_get_thread(
            id, request_options=request_options
        )
        return _response.data

    async def notify_read_thread(
        self,
        id: int,
        *,
        to_status: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of notification thread

        to_status : typing.Optional[str]
            Status to mark notifications as

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_read_thread(
                id=1000000,
                to_status="to-status",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_read_thread(
            id, to_status=to_status, request_options=request_options
        )
        return _response.data

    async def notify_get_repo_list(
        self,
        owner: str,
        repo: str,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        subject_type: typing.Optional[
            typing.Union[
                NotifyGetRepoListRequestSubjectTypeItem,
                typing.Sequence[NotifyGetRepoListRequestSubjectTypeItem],
            ]
        ] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[NotificationThread]:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        all_ : typing.Optional[bool]
            If true, show notifications marked as read. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Show notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread & pinned

        subject_type : typing.Optional[typing.Union[NotifyGetRepoListRequestSubjectTypeItem, typing.Sequence[NotifyGetRepoListRequestSubjectTypeItem]]]
            filter notifications by subject type

        since : typing.Optional[dt.datetime]
            Only show notifications updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show notifications updated before the given time. This is a timestamp in RFC 3339 format

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[NotificationThread]
            NotificationThreadList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_get_repo_list(
                owner="owner",
                repo="repo",
                all_=True,
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_get_repo_list(
            owner,
            repo,
            all_=all_,
            status_types=status_types,
            subject_type=subject_type,
            since=since,
            before=before,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def notify_read_repo_list(
        self,
        owner: str,
        repo: str,
        *,
        all_: typing.Optional[bool] = None,
        status_types: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        to_status: typing.Optional[str] = None,
        last_read_at: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        all_ : typing.Optional[bool]
            If true, mark all notifications on this repo. Default value is false

        status_types : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Mark notifications with the provided status types. Options are: unread, read and/or pinned. Defaults to unread.

        to_status : typing.Optional[str]
            Status to mark notifications as. Defaults to read.

        last_read_at : typing.Optional[dt.datetime]
            Describes the last point that notifications were checked. Anything updated since this time will not be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.notification.notify_read_repo_list(
                owner="owner",
                repo="repo",
                all_=True,
                to_status="to-status",
                last_read_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.notify_read_repo_list(
            owner,
            repo,
            all_=all_,
            status_types=status_types,
            to_status=to_status,
            last_read_at=last_read_at,
            request_options=request_options,
        )
        return _response.data

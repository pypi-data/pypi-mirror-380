# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.package import Package
from ..types.package_file import PackageFile
from .raw_client import AsyncRawPackageClient, RawPackageClient
from .types.list_packages_request_type import ListPackagesRequestType


class PackageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPackageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPackageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPackageClient
        """
        return self._raw_client

    def list_packages(
        self,
        owner: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        type: typing.Optional[ListPackagesRequestType] = None,
        q: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Package]:
        """
        Parameters
        ----------
        owner : str
            owner of the packages

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        type : typing.Optional[ListPackagesRequestType]
            package type filter

        q : typing.Optional[str]
            name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Package]
            PackageList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.list_packages(
            owner="owner",
            page=1,
            limit=1,
            type="alpine",
            q="q",
        )
        """
        _response = self._raw_client.list_packages(
            owner,
            page=page,
            limit=limit,
            type=type,
            q=q,
            request_options=request_options,
        )
        return _response.data

    def link_package(
        self,
        owner: str,
        type: str,
        name: str,
        repo_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        repo_name : str
            name of the repository to link.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.link_package(
            owner="owner",
            type="type",
            name="name",
            repo_name="repo_name",
        )
        """
        _response = self._raw_client.link_package(
            owner, type, name, repo_name, request_options=request_options
        )
        return _response.data

    def unlink_package(
        self,
        owner: str,
        type: str,
        name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.unlink_package(
            owner="owner",
            type="type",
            name="name",
        )
        """
        _response = self._raw_client.unlink_package(
            owner, type, name, request_options=request_options
        )
        return _response.data

    def get_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Package:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Package
            Package

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.get_package(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._raw_client.get_package(
            owner, type, name, version, request_options=request_options
        )
        return _response.data

    def delete_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.delete_package(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._raw_client.delete_package(
            owner, type, name, version, request_options=request_options
        )
        return _response.data

    def list_package_files(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PackageFile]:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PackageFile]
            PackageFileList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.package.list_package_files(
            owner="owner",
            type="type",
            name="name",
            version="version",
        )
        """
        _response = self._raw_client.list_package_files(
            owner, type, name, version, request_options=request_options
        )
        return _response.data


class AsyncPackageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPackageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPackageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPackageClient
        """
        return self._raw_client

    async def list_packages(
        self,
        owner: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        type: typing.Optional[ListPackagesRequestType] = None,
        q: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Package]:
        """
        Parameters
        ----------
        owner : str
            owner of the packages

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        type : typing.Optional[ListPackagesRequestType]
            package type filter

        q : typing.Optional[str]
            name filter

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Package]
            PackageList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.list_packages(
                owner="owner",
                page=1,
                limit=1,
                type="alpine",
                q="q",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_packages(
            owner,
            page=page,
            limit=limit,
            type=type,
            q=q,
            request_options=request_options,
        )
        return _response.data

    async def link_package(
        self,
        owner: str,
        type: str,
        name: str,
        repo_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        repo_name : str
            name of the repository to link.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.link_package(
                owner="owner",
                type="type",
                name="name",
                repo_name="repo_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.link_package(
            owner, type, name, repo_name, request_options=request_options
        )
        return _response.data

    async def unlink_package(
        self,
        owner: str,
        type: str,
        name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.unlink_package(
                owner="owner",
                type="type",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.unlink_package(
            owner, type, name, request_options=request_options
        )
        return _response.data

    async def get_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Package:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Package
            Package

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.get_package(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_package(
            owner, type, name, version, request_options=request_options
        )
        return _response.data

    async def delete_package(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.delete_package(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_package(
            owner, type, name, version, request_options=request_options
        )
        return _response.data

    async def list_package_files(
        self,
        owner: str,
        type: str,
        name: str,
        version: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PackageFile]:
        """
        Parameters
        ----------
        owner : str
            owner of the package

        type : str
            type of the package

        name : str
            name of the package

        version : str
            version of the package

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PackageFile]
            PackageFileList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.package.list_package_files(
                owner="owner",
                type="type",
                name="name",
                version="version",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_package_files(
            owner, type, name, version, request_options=request_options
        )
        return _response.data

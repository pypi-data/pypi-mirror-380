# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.gitignore_template_info import GitignoreTemplateInfo
from ..types.label_template import LabelTemplate
from ..types.license_template_info import LicenseTemplateInfo
from ..types.licenses_template_list_entry import LicensesTemplateListEntry
from ..types.node_info import NodeInfo
from ..types.server_version import ServerVersion
from .raw_client import AsyncRawMiscellaneousClient, RawMiscellaneousClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MiscellaneousClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMiscellaneousClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMiscellaneousClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMiscellaneousClient
        """
        return self._raw_client

    def list_gitignores_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            GitignoreTemplateList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.list_gitignores_templates()
        """
        _response = self._raw_client.list_gitignores_templates(
            request_options=request_options
        )
        return _response.data

    def get_gitignore_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GitignoreTemplateInfo:
        """
        Parameters
        ----------
        name : str
            name of the template

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GitignoreTemplateInfo
            GitignoreTemplateInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_gitignore_template_info(
            name="name",
        )
        """
        _response = self._raw_client.get_gitignore_template_info(
            name, request_options=request_options
        )
        return _response.data

    def list_label_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            LabelTemplateList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.list_label_templates()
        """
        _response = self._raw_client.list_label_templates(
            request_options=request_options
        )
        return _response.data

    def get_label_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LabelTemplate]:
        """
        Parameters
        ----------
        name : str
            name of the template

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LabelTemplate]
            LabelTemplateInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_label_template_info(
            name="name",
        )
        """
        _response = self._raw_client.get_label_template_info(
            name, request_options=request_options
        )
        return _response.data

    def list_license_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LicensesTemplateListEntry]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LicensesTemplateListEntry]
            LicenseTemplateList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.list_license_templates()
        """
        _response = self._raw_client.list_license_templates(
            request_options=request_options
        )
        return _response.data

    def get_license_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LicenseTemplateInfo:
        """
        Parameters
        ----------
        name : str
            name of the license

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LicenseTemplateInfo
            LicenseTemplateInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_license_template_info(
            name="name",
        )
        """
        _response = self._raw_client.get_license_template_info(
            name, request_options=request_options
        )
        return _response.data

    def render_markdown(
        self,
        *,
        context: typing.Optional[str] = OMIT,
        mode: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        wiki: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        context : typing.Optional[str]
            Context to render

            in: body

        mode : typing.Optional[str]
            Mode to render (comment, gfm, markdown)

            in: body

        text : typing.Optional[str]
            Text markdown to render

            in: body

        wiki : typing.Optional[bool]
            Is it a wiki page ?

            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkdownRender is a rendered markdown document

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.render_markdown()
        """
        _response = self._raw_client.render_markdown(
            context=context,
            mode=mode,
            text=text,
            wiki=wiki,
            request_options=request_options,
        )
        return _response.data

    def render_markdown_raw(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkdownRender is a rendered markdown document

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.render_markdown_raw()
        """
        _response = self._raw_client.render_markdown_raw(
            request_options=request_options
        )
        return _response.data

    def render_markup(
        self,
        *,
        branch_path: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        file_path: typing.Optional[str] = OMIT,
        mode: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        wiki: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        branch_path : typing.Optional[str]
            The current branch path where the form gets posted

            in: body

        context : typing.Optional[str]
            Context to render

            in: body

        file_path : typing.Optional[str]
            File path for detecting extension in file mode

            in: body

        mode : typing.Optional[str]
            Mode to render (comment, gfm, markdown, file)

            in: body

        text : typing.Optional[str]
            Text markup to render

            in: body

        wiki : typing.Optional[bool]
            Is it a wiki page ?

            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkupRender is a rendered markup document

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.render_markup()
        """
        _response = self._raw_client.render_markup(
            branch_path=branch_path,
            context=context,
            file_path=file_path,
            mode=mode,
            text=text,
            wiki=wiki,
            request_options=request_options,
        )
        return _response.data

    def get_node_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NodeInfo:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NodeInfo
            NodeInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_node_info()
        """
        _response = self._raw_client.get_node_info(request_options=request_options)
        return _response.data

    def get_signing_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            GPG armored public key

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_signing_key()
        """
        _response = self._raw_client.get_signing_key(request_options=request_options)
        return _response.data

    def get_ssh_signing_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            SSH public key in OpenSSH authorized key format

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_ssh_signing_key()
        """
        _response = self._raw_client.get_ssh_signing_key(
            request_options=request_options
        )
        return _response.data

    def get_version(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ServerVersion:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServerVersion
            ServerVersion

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.miscellaneous.get_version()
        """
        _response = self._raw_client.get_version(request_options=request_options)
        return _response.data


class AsyncMiscellaneousClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMiscellaneousClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMiscellaneousClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMiscellaneousClient
        """
        return self._raw_client

    async def list_gitignores_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            GitignoreTemplateList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.list_gitignores_templates()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_gitignores_templates(
            request_options=request_options
        )
        return _response.data

    async def get_gitignore_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GitignoreTemplateInfo:
        """
        Parameters
        ----------
        name : str
            name of the template

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GitignoreTemplateInfo
            GitignoreTemplateInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_gitignore_template_info(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_gitignore_template_info(
            name, request_options=request_options
        )
        return _response.data

    async def list_label_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            LabelTemplateList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.list_label_templates()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_label_templates(
            request_options=request_options
        )
        return _response.data

    async def get_label_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LabelTemplate]:
        """
        Parameters
        ----------
        name : str
            name of the template

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LabelTemplate]
            LabelTemplateInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_label_template_info(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_label_template_info(
            name, request_options=request_options
        )
        return _response.data

    async def list_license_templates(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LicensesTemplateListEntry]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LicensesTemplateListEntry]
            LicenseTemplateList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.list_license_templates()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_license_templates(
            request_options=request_options
        )
        return _response.data

    async def get_license_template_info(
        self, name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LicenseTemplateInfo:
        """
        Parameters
        ----------
        name : str
            name of the license

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LicenseTemplateInfo
            LicenseTemplateInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_license_template_info(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_license_template_info(
            name, request_options=request_options
        )
        return _response.data

    async def render_markdown(
        self,
        *,
        context: typing.Optional[str] = OMIT,
        mode: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        wiki: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        context : typing.Optional[str]
            Context to render

            in: body

        mode : typing.Optional[str]
            Mode to render (comment, gfm, markdown)

            in: body

        text : typing.Optional[str]
            Text markdown to render

            in: body

        wiki : typing.Optional[bool]
            Is it a wiki page ?

            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkdownRender is a rendered markdown document

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.render_markdown()


        asyncio.run(main())
        """
        _response = await self._raw_client.render_markdown(
            context=context,
            mode=mode,
            text=text,
            wiki=wiki,
            request_options=request_options,
        )
        return _response.data

    async def render_markdown_raw(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkdownRender is a rendered markdown document

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.render_markdown_raw()


        asyncio.run(main())
        """
        _response = await self._raw_client.render_markdown_raw(
            request_options=request_options
        )
        return _response.data

    async def render_markup(
        self,
        *,
        branch_path: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        file_path: typing.Optional[str] = OMIT,
        mode: typing.Optional[str] = OMIT,
        text: typing.Optional[str] = OMIT,
        wiki: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        branch_path : typing.Optional[str]
            The current branch path where the form gets posted

            in: body

        context : typing.Optional[str]
            Context to render

            in: body

        file_path : typing.Optional[str]
            File path for detecting extension in file mode

            in: body

        mode : typing.Optional[str]
            Mode to render (comment, gfm, markdown, file)

            in: body

        text : typing.Optional[str]
            Text markup to render

            in: body

        wiki : typing.Optional[bool]
            Is it a wiki page ?

            in: body

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            MarkupRender is a rendered markup document

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.render_markup()


        asyncio.run(main())
        """
        _response = await self._raw_client.render_markup(
            branch_path=branch_path,
            context=context,
            file_path=file_path,
            mode=mode,
            text=text,
            wiki=wiki,
            request_options=request_options,
        )
        return _response.data

    async def get_node_info(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> NodeInfo:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        NodeInfo
            NodeInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_node_info()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_node_info(
            request_options=request_options
        )
        return _response.data

    async def get_signing_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            GPG armored public key

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_signing_key()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_signing_key(
            request_options=request_options
        )
        return _response.data

    async def get_ssh_signing_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            SSH public key in OpenSSH authorized key format

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_ssh_signing_key()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_ssh_signing_key(
            request_options=request_options
        )
        return _response.data

    async def get_version(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ServerVersion:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ServerVersion
            ServerVersion

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.miscellaneous.get_version()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_version(request_options=request_options)
        return _response.data

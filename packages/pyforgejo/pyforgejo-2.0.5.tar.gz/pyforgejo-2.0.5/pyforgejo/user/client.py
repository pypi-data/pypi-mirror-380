# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.access_token import AccessToken
from ..types.action_run_job import ActionRunJob
from ..types.action_variable import ActionVariable
from ..types.activity import Activity
from ..types.blocked_user import BlockedUser
from ..types.create_hook_option_config import CreateHookOptionConfig
from ..types.create_hook_option_type import CreateHookOptionType
from ..types.email import Email
from ..types.gpg_key import GpgKey
from ..types.hook import Hook
from ..types.o_auth_2_application import OAuth2Application
from ..types.public_key import PublicKey
from ..types.quota_info import QuotaInfo
from ..types.quota_used_artifact_list import QuotaUsedArtifactList
from ..types.quota_used_attachment_list import QuotaUsedAttachmentList
from ..types.quota_used_package_list import QuotaUsedPackageList
from ..types.registration_token import RegistrationToken
from ..types.repository import Repository
from ..types.stop_watch import StopWatch
from ..types.team import Team
from ..types.tracked_time import TrackedTime
from ..types.user import User
from ..types.user_heatmap_data import UserHeatmapData
from ..types.user_settings import UserSettings
from .raw_client import AsyncRawUserClient, RawUserClient
from .types.user_current_list_repos_request_order_by import \
    UserCurrentListReposRequestOrderBy
from .types.user_search_request_sort import UserSearchRequestSort
from .types.user_search_results import UserSearchResults

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def get_current(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_current()
        """
        _response = self._raw_client.get_current(request_options=request_options)
        return _response.data

    def search_run_jobs(
        self,
        *,
        labels: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionRunJob]:
        """
        Parameters
        ----------
        labels : typing.Optional[str]
            a comma separated list of run job labels to search for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionRunJob]
            RunJobList is a list of action run jobs

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.search_run_jobs(
            labels="labels",
        )
        """
        _response = self._raw_client.search_run_jobs(
            labels=labels, request_options=request_options
        )
        return _response.data

    def get_runner_registration_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RegistrationToken:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegistrationToken
            RegistrationToken is a string used to register a runner with a server

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_runner_registration_token()
        """
        _response = self._raw_client.get_runner_registration_token(
            request_options=request_options
        )
        return _response.data

    def update_user_secret(
        self,
        secretname: str,
        *,
        data: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        secretname : str
            name of the secret

        data : str
            Data of the secret to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.update_user_secret(
            secretname="secretname",
            data="data",
        )
        """
        _response = self._raw_client.update_user_secret(
            secretname, data=data, request_options=request_options
        )
        return _response.data

    def delete_user_secret(
        self,
        secretname: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        secretname : str
            name of the secret

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_user_secret(
            secretname="secretname",
        )
        """
        _response = self._raw_client.delete_user_secret(
            secretname, request_options=request_options
        )
        return _response.data

    def get_user_variables_list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionVariable]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionVariable]
            VariableList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_user_variables_list(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_user_variables_list(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_user_variable(
        self,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionVariable:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionVariable
            ActionVariable

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_user_variable(
            variablename="variablename",
        )
        """
        _response = self._raw_client.get_user_variable(
            variablename, request_options=request_options
        )
        return _response.data

    def create_user_variable(
        self,
        variablename: str,
        *,
        value: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        value : str
            Value of the variable to create

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.create_user_variable(
            variablename="variablename",
            value="value",
        )
        """
        _response = self._raw_client.create_user_variable(
            variablename, value=value, request_options=request_options
        )
        return _response.data

    def update_user_variable(
        self,
        variablename: str,
        *,
        value: str,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        value : str
            Value of the variable to update

        name : typing.Optional[str]
            New name for the variable. If the field is empty, the variable name won't be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.update_user_variable(
            variablename="variablename",
            value="value",
        )
        """
        _response = self._raw_client.update_user_variable(
            variablename, value=value, name=name, request_options=request_options
        )
        return _response.data

    def delete_user_variable(
        self,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_user_variable(
            variablename="variablename",
        )
        """
        _response = self._raw_client.delete_user_variable(
            variablename, request_options=request_options
        )
        return _response.data

    def user_get_o_auth_2_applications(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[OAuth2Application]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[OAuth2Application]
            OAuth2ApplicationList represents a list of OAuth2 applications.

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_get_o_auth_2_applications(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.user_get_o_auth_2_applications(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def user_create_o_auth_2_application(
        self,
        *,
        confidential_client: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        redirect_uris: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        confidential_client : typing.Optional[bool]

        name : typing.Optional[str]

        redirect_uris : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_create_o_auth_2_application()
        """
        _response = self._raw_client.user_create_o_auth_2_application(
            confidential_client=confidential_client,
            name=name,
            redirect_uris=redirect_uris,
            request_options=request_options,
        )
        return _response.data

    def user_get_o_auth_2_application(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        id : int
            Application ID to be found

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_get_o_auth_2_application(
            id=1000000,
        )
        """
        _response = self._raw_client.user_get_o_auth_2_application(
            id, request_options=request_options
        )
        return _response.data

    def user_delete_o_auth_2_application(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            token to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_delete_o_auth_2_application(
            id=1000000,
        )
        """
        _response = self._raw_client.user_delete_o_auth_2_application(
            id, request_options=request_options
        )
        return _response.data

    def user_update_o_auth_2_application(
        self,
        id: int,
        *,
        confidential_client: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        redirect_uris: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        id : int
            application to be updated

        confidential_client : typing.Optional[bool]

        name : typing.Optional[str]

        redirect_uris : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_update_o_auth_2_application(
            id=1000000,
        )
        """
        _response = self._raw_client.user_update_o_auth_2_application(
            id,
            confidential_client=confidential_client,
            name=name,
            redirect_uris=redirect_uris,
            request_options=request_options,
        )
        return _response.data

    def update_avatar(
        self,
        *,
        image: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        image : typing.Optional[str]
            image must be base64 encoded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.update_avatar()
        """
        _response = self._raw_client.update_avatar(
            image=image, request_options=request_options
        )
        return _response.data

    def delete_avatar(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_avatar()
        """
        _response = self._raw_client.delete_avatar(request_options=request_options)
        return _response.data

    def block_user(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.block_user(
            username="username",
        )
        """
        _response = self._raw_client.block_user(
            username, request_options=request_options
        )
        return _response.data

    def list_emails(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Email]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Email]
            EmailList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_emails()
        """
        _response = self._raw_client.list_emails(request_options=request_options)
        return _response.data

    def add_email(
        self,
        *,
        emails: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Email]:
        """
        Parameters
        ----------
        emails : typing.Optional[typing.Sequence[str]]
            email addresses to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Email]
            EmailList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.add_email()
        """
        _response = self._raw_client.add_email(
            emails=emails, request_options=request_options
        )
        return _response.data

    def delete_email(
        self,
        *,
        emails: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        emails : typing.Optional[typing.Sequence[str]]
            email addresses to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_email()
        """
        _response = self._raw_client.delete_email(
            emails=emails, request_options=request_options
        )
        return _response.data

    def current_list_followers(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_followers(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.current_list_followers(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_list_following(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_following(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.current_list_following(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_check_following(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of followed user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_check_following(
            username="username",
        )
        """
        _response = self._raw_client.current_check_following(
            username, request_options=request_options
        )
        return _response.data

    def current_put_follow(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user to follow

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_put_follow(
            username="username",
        )
        """
        _response = self._raw_client.current_put_follow(
            username, request_options=request_options
        )
        return _response.data

    def current_delete_follow(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user to unfollow

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_delete_follow(
            username="username",
        )
        """
        _response = self._raw_client.current_delete_follow(
            username, request_options=request_options
        )
        return _response.data

    def get_verification_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            APIString is a string response

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_verification_token()
        """
        _response = self._raw_client.get_verification_token(
            request_options=request_options
        )
        return _response.data

    def user_verify_gpg_key(
        self,
        *,
        key_id: str,
        armored_signature: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GpgKey:
        """
        Parameters
        ----------
        key_id : str
            An Signature for a GPG key token

        armored_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_verify_gpg_key(
            key_id="key_id",
        )
        """
        _response = self._raw_client.user_verify_gpg_key(
            key_id=key_id,
            armored_signature=armored_signature,
            request_options=request_options,
        )
        return _response.data

    def user_current_list_gpg_keys(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GpgKey]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GpgKey]
            GPGKeyList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_current_list_gpg_keys(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.user_current_list_gpg_keys(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def user_current_post_gpg_key(
        self,
        *,
        armored_public_key: str,
        armored_signature: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GpgKey:
        """
        Parameters
        ----------
        armored_public_key : str
            An armored GPG key to add

        armored_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_current_post_gpg_key(
            armored_public_key="armored_public_key",
        )
        """
        _response = self._raw_client.user_current_post_gpg_key(
            armored_public_key=armored_public_key,
            armored_signature=armored_signature,
            request_options=request_options,
        )
        return _response.data

    def user_current_get_gpg_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GpgKey:
        """
        Parameters
        ----------
        id : int
            id of key to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_current_get_gpg_key(
            id=1000000,
        )
        """
        _response = self._raw_client.user_current_get_gpg_key(
            id, request_options=request_options
        )
        return _response.data

    def user_current_delete_gpg_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of key to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_current_delete_gpg_key(
            id=1000000,
        )
        """
        _response = self._raw_client.user_current_delete_gpg_key(
            id, request_options=request_options
        )
        return _response.data

    def list_hooks(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Hook]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Hook]
            HookList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_hooks(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_hooks(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_hook(
        self,
        *,
        config: CreateHookOptionConfig,
        type: CreateHookOptionType,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        config : CreateHookOptionConfig

        type : CreateHookOptionType

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.create_hook(
            config={"key": "value"},
            type="forgejo",
        )
        """
        _response = self._raw_client.create_hook(
            config=config,
            type=type,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            events=events,
            request_options=request_options,
        )
        return _response.data

    def get_hook(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Hook:
        """
        Parameters
        ----------
        id : int
            id of the hook to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_hook(
            id=1000000,
        )
        """
        _response = self._raw_client.get_hook(id, request_options=request_options)
        return _response.data

    def delete_hook(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the hook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_hook(
            id=1000000,
        )
        """
        _response = self._raw_client.delete_hook(id, request_options=request_options)
        return _response.data

    def edit_hook(
        self,
        id: int,
        *,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, str]] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        id : int
            id of the hook to update

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, str]]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.edit_hook(
            id=1000000,
        )
        """
        _response = self._raw_client.edit_hook(
            id,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            config=config,
            events=events,
            request_options=request_options,
        )
        return _response.data

    def current_list_keys(
        self,
        *,
        fingerprint: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PublicKey]:
        """
        Parameters
        ----------
        fingerprint : typing.Optional[str]
            fingerprint of the key

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PublicKey]
            PublicKeyList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_keys(
            fingerprint="fingerprint",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.current_list_keys(
            fingerprint=fingerprint,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def current_post_key(
        self,
        *,
        key: str,
        title: str,
        read_only: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PublicKey:
        """
        Parameters
        ----------
        key : str
            An armored SSH key to add

        title : str
            Title of the key to add

        read_only : typing.Optional[bool]
            Describe if the key has only read access or read/write

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublicKey
            PublicKey

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_post_key(
            key="key",
            title="title",
        )
        """
        _response = self._raw_client.current_post_key(
            key=key, title=title, read_only=read_only, request_options=request_options
        )
        return _response.data

    def current_get_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PublicKey:
        """
        Parameters
        ----------
        id : int
            id of key to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublicKey
            PublicKey

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_get_key(
            id=1000000,
        )
        """
        _response = self._raw_client.current_get_key(
            id, request_options=request_options
        )
        return _response.data

    def current_delete_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of key to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_delete_key(
            id=1000000,
        )
        """
        _response = self._raw_client.current_delete_key(
            id, request_options=request_options
        )
        return _response.data

    def list_blocked_users(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BlockedUser]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BlockedUser]
            BlockedUserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_blocked_users(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_blocked_users(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_quota(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QuotaInfo:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaInfo
            QuotaInfo

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_quota()
        """
        _response = self._raw_client.get_quota(request_options=request_options)
        return _response.data

    def list_quota_artifacts(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedArtifactList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedArtifactList
            QuotaUsedArtifactList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_quota_artifacts(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_quota_artifacts(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def list_quota_attachments(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedAttachmentList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedAttachmentList
            QuotaUsedAttachmentList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_quota_attachments(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_quota_attachments(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def check_quota(
        self, *, subject: str, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Parameters
        ----------
        subject : str
            subject of the quota

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Returns true if the action is accepted.

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.check_quota(
            subject="subject",
        )
        """
        _response = self._raw_client.check_quota(
            subject=subject, request_options=request_options
        )
        return _response.data

    def list_quota_packages(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedPackageList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedPackageList
            QuotaUsedPackageList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_quota_packages(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_quota_packages(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_list_repos(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order_by: typing.Optional[UserCurrentListReposRequestOrderBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        order_by : typing.Optional[UserCurrentListReposRequestOrderBy]
            order the repositories

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_repos(
            page=1,
            limit=1,
            order_by="name",
        )
        """
        _response = self._raw_client.current_list_repos(
            page=page, limit=limit, order_by=order_by, request_options=request_options
        )
        return _response.data

    def get_user_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UserSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSettings
            UserSettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_user_settings()
        """
        _response = self._raw_client.get_user_settings(request_options=request_options)
        return _response.data

    def update_user_settings(
        self,
        *,
        description: typing.Optional[str] = OMIT,
        diff_view_style: typing.Optional[str] = OMIT,
        enable_repo_unit_hints: typing.Optional[bool] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        hide_activity: typing.Optional[bool] = OMIT,
        hide_email: typing.Optional[bool] = OMIT,
        hide_pronouns: typing.Optional[bool] = OMIT,
        language: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        pronouns: typing.Optional[str] = OMIT,
        theme: typing.Optional[str] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserSettings:
        """
        Parameters
        ----------
        description : typing.Optional[str]

        diff_view_style : typing.Optional[str]

        enable_repo_unit_hints : typing.Optional[bool]

        full_name : typing.Optional[str]

        hide_activity : typing.Optional[bool]

        hide_email : typing.Optional[bool]
            Privacy

        hide_pronouns : typing.Optional[bool]

        language : typing.Optional[str]

        location : typing.Optional[str]

        pronouns : typing.Optional[str]

        theme : typing.Optional[str]

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSettings
            UserSettings

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.update_user_settings()
        """
        _response = self._raw_client.update_user_settings(
            description=description,
            diff_view_style=diff_view_style,
            enable_repo_unit_hints=enable_repo_unit_hints,
            full_name=full_name,
            hide_activity=hide_activity,
            hide_email=hide_email,
            hide_pronouns=hide_pronouns,
            language=language,
            location=location,
            pronouns=pronouns,
            theme=theme,
            website=website,
            request_options=request_options,
        )
        return _response.data

    def current_list_starred(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_starred(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.current_list_starred(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_check_starring(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_check_starring(
            owner="owner",
            repo="repo",
        )
        """
        _response = self._raw_client.current_check_starring(
            owner, repo, request_options=request_options
        )
        return _response.data

    def current_put_star(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo to star

        repo : str
            name of the repo to star

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_put_star(
            owner="owner",
            repo="repo",
        )
        """
        _response = self._raw_client.current_put_star(
            owner, repo, request_options=request_options
        )
        return _response.data

    def current_delete_star(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo to unstar

        repo : str
            name of the repo to unstar

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_delete_star(
            owner="owner",
            repo="repo",
        )
        """
        _response = self._raw_client.current_delete_star(
            owner, repo, request_options=request_options
        )
        return _response.data

    def get_stop_watches(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[StopWatch]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StopWatch]
            StopWatchList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_stop_watches(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_stop_watches(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_list_subscriptions(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_list_subscriptions(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.current_list_subscriptions(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def list_teams(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Team]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Team]
            TeamList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_teams(
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_teams(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def current_tracked_times(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrackedTime]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        since : typing.Optional[dt.datetime]
            Only show times updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show times updated before the given time. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrackedTime]
            TrackedTimeList

        Examples
        --------
        import datetime

        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.current_tracked_times(
            page=1,
            limit=1,
            since=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            before=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.current_tracked_times(
            page=page,
            limit=limit,
            since=since,
            before=before,
            request_options=request_options,
        )
        return _response.data

    def unblock_user(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.unblock_user(
            username="username",
        )
        """
        _response = self._raw_client.unblock_user(
            username, request_options=request_options
        )
        return _response.data

    def search(
        self,
        *,
        q: typing.Optional[str] = None,
        uid: typing.Optional[int] = None,
        sort: typing.Optional[UserSearchRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserSearchResults:
        """
        Parameters
        ----------
        q : typing.Optional[str]
            keyword

        uid : typing.Optional[int]
            ID of the user to search for

        sort : typing.Optional[UserSearchRequestSort]
            sort order of results

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSearchResults
            SearchResults of a successful search

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.search(
            q="q",
            uid=1000000,
            sort="oldest",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.search(
            q=q,
            uid=uid,
            sort=sort,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        username : str
            username of user to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get(
            username="username",
        )
        """
        _response = self._raw_client.get(username, request_options=request_options)
        return _response.data

    def list_activity_feeds(
        self,
        username: str,
        *,
        only_performed_by: typing.Optional[bool] = None,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        username : str
            username of user

        only_performed_by : typing.Optional[bool]
            if true, only show actions performed by the requested user

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_activity_feeds(
            username="username",
            only_performed_by=True,
            date="date",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_activity_feeds(
            username,
            only_performed_by=only_performed_by,
            date=date,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def list_followers(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_followers(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_followers(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def list_following(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_following(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_following(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def check_following(
        self,
        username: str,
        target: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of following user

        target : str
            username of followed user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.check_following(
            username="username",
            target="target",
        )
        """
        _response = self._raw_client.check_following(
            username, target, request_options=request_options
        )
        return _response.data

    def user_list_gpg_keys(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GpgKey]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GpgKey]
            GPGKeyList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.user_list_gpg_keys(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.user_list_gpg_keys(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_heatmap_data(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[UserHeatmapData]:
        """
        Parameters
        ----------
        username : str
            username of user to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserHeatmapData]
            UserHeatmapData

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_heatmap_data(
            username="username",
        )
        """
        _response = self._raw_client.get_heatmap_data(
            username, request_options=request_options
        )
        return _response.data

    def list_keys(
        self,
        username: str,
        *,
        fingerprint: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PublicKey]:
        """
        Parameters
        ----------
        username : str
            username of user

        fingerprint : typing.Optional[str]
            fingerprint of the key

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PublicKey]
            PublicKeyList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_keys(
            username="username",
            fingerprint="fingerprint",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_keys(
            username,
            fingerprint=fingerprint,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def list_repos(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_repos(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_repos(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def list_starred(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_starred(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_starred(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def list_subscriptions(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of the user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.list_subscriptions(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.list_subscriptions(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def get_tokens(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AccessToken]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AccessToken]
            AccessTokenList represents a list of API access token.

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.get_tokens(
            username="username",
            page=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_tokens(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    def create_token(
        self,
        username: str,
        *,
        name: str,
        scopes: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessToken:
        """
        Parameters
        ----------
        username : str
            username of user

        name : str

        scopes : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessToken
            AccessToken represents an API access token.

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.create_token(
            username="username",
            name="name",
        )
        """
        _response = self._raw_client.create_token(
            username, name=name, scopes=scopes, request_options=request_options
        )
        return _response.data

    def delete_access_token(
        self,
        username: str,
        token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user

        token : str
            token to be deleted, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from pyforgejo import PyforgejoApi

        client = PyforgejoApi(
            api_key="YOUR_API_KEY",
        )
        client.user.delete_access_token(
            username="username",
            token="token",
        )
        """
        _response = self._raw_client.delete_access_token(
            username, token, request_options=request_options
        )
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def get_current(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_current()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_current(request_options=request_options)
        return _response.data

    async def search_run_jobs(
        self,
        *,
        labels: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionRunJob]:
        """
        Parameters
        ----------
        labels : typing.Optional[str]
            a comma separated list of run job labels to search for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionRunJob]
            RunJobList is a list of action run jobs

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.search_run_jobs(
                labels="labels",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_run_jobs(
            labels=labels, request_options=request_options
        )
        return _response.data

    async def get_runner_registration_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> RegistrationToken:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RegistrationToken
            RegistrationToken is a string used to register a runner with a server

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_runner_registration_token()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_runner_registration_token(
            request_options=request_options
        )
        return _response.data

    async def update_user_secret(
        self,
        secretname: str,
        *,
        data: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        secretname : str
            name of the secret

        data : str
            Data of the secret to update

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.update_user_secret(
                secretname="secretname",
                data="data",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user_secret(
            secretname, data=data, request_options=request_options
        )
        return _response.data

    async def delete_user_secret(
        self,
        secretname: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        secretname : str
            name of the secret

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_user_secret(
                secretname="secretname",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user_secret(
            secretname, request_options=request_options
        )
        return _response.data

    async def get_user_variables_list(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[ActionVariable]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ActionVariable]
            VariableList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_user_variables_list(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_variables_list(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_user_variable(
        self,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ActionVariable:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ActionVariable
            ActionVariable

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_user_variable(
                variablename="variablename",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_variable(
            variablename, request_options=request_options
        )
        return _response.data

    async def create_user_variable(
        self,
        variablename: str,
        *,
        value: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        value : str
            Value of the variable to create

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.create_user_variable(
                variablename="variablename",
                value="value",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user_variable(
            variablename, value=value, request_options=request_options
        )
        return _response.data

    async def update_user_variable(
        self,
        variablename: str,
        *,
        value: str,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        value : str
            Value of the variable to update

        name : typing.Optional[str]
            New name for the variable. If the field is empty, the variable name won't be updated.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.update_user_variable(
                variablename="variablename",
                value="value",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user_variable(
            variablename, value=value, name=name, request_options=request_options
        )
        return _response.data

    async def delete_user_variable(
        self,
        variablename: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        variablename : str
            name of the variable

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_user_variable(
                variablename="variablename",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user_variable(
            variablename, request_options=request_options
        )
        return _response.data

    async def user_get_o_auth_2_applications(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[OAuth2Application]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[OAuth2Application]
            OAuth2ApplicationList represents a list of OAuth2 applications.

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_get_o_auth_2_applications(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_get_o_auth_2_applications(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def user_create_o_auth_2_application(
        self,
        *,
        confidential_client: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        redirect_uris: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        confidential_client : typing.Optional[bool]

        name : typing.Optional[str]

        redirect_uris : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_create_o_auth_2_application()


        asyncio.run(main())
        """
        _response = await self._raw_client.user_create_o_auth_2_application(
            confidential_client=confidential_client,
            name=name,
            redirect_uris=redirect_uris,
            request_options=request_options,
        )
        return _response.data

    async def user_get_o_auth_2_application(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        id : int
            Application ID to be found

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_get_o_auth_2_application(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_get_o_auth_2_application(
            id, request_options=request_options
        )
        return _response.data

    async def user_delete_o_auth_2_application(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            token to be deleted

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_delete_o_auth_2_application(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_delete_o_auth_2_application(
            id, request_options=request_options
        )
        return _response.data

    async def user_update_o_auth_2_application(
        self,
        id: int,
        *,
        confidential_client: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        redirect_uris: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> OAuth2Application:
        """
        Parameters
        ----------
        id : int
            application to be updated

        confidential_client : typing.Optional[bool]

        name : typing.Optional[str]

        redirect_uris : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OAuth2Application
            OAuth2Application

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_update_o_auth_2_application(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_update_o_auth_2_application(
            id,
            confidential_client=confidential_client,
            name=name,
            redirect_uris=redirect_uris,
            request_options=request_options,
        )
        return _response.data

    async def update_avatar(
        self,
        *,
        image: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        image : typing.Optional[str]
            image must be base64 encoded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.update_avatar()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_avatar(
            image=image, request_options=request_options
        )
        return _response.data

    async def delete_avatar(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_avatar()


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_avatar(
            request_options=request_options
        )
        return _response.data

    async def block_user(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.block_user(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.block_user(
            username, request_options=request_options
        )
        return _response.data

    async def list_emails(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Email]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Email]
            EmailList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_emails()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_emails(request_options=request_options)
        return _response.data

    async def add_email(
        self,
        *,
        emails: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Email]:
        """
        Parameters
        ----------
        emails : typing.Optional[typing.Sequence[str]]
            email addresses to add

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Email]
            EmailList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.add_email()


        asyncio.run(main())
        """
        _response = await self._raw_client.add_email(
            emails=emails, request_options=request_options
        )
        return _response.data

    async def delete_email(
        self,
        *,
        emails: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        emails : typing.Optional[typing.Sequence[str]]
            email addresses to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_email()


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_email(
            emails=emails, request_options=request_options
        )
        return _response.data

    async def current_list_followers(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_followers(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_followers(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_list_following(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_following(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_following(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_check_following(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of followed user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_check_following(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_check_following(
            username, request_options=request_options
        )
        return _response.data

    async def current_put_follow(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user to follow

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_put_follow(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_put_follow(
            username, request_options=request_options
        )
        return _response.data

    async def current_delete_follow(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user to unfollow

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_delete_follow(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_delete_follow(
            username, request_options=request_options
        )
        return _response.data

    async def get_verification_token(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            APIString is a string response

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_verification_token()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_verification_token(
            request_options=request_options
        )
        return _response.data

    async def user_verify_gpg_key(
        self,
        *,
        key_id: str,
        armored_signature: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GpgKey:
        """
        Parameters
        ----------
        key_id : str
            An Signature for a GPG key token

        armored_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_verify_gpg_key(
                key_id="key_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_verify_gpg_key(
            key_id=key_id,
            armored_signature=armored_signature,
            request_options=request_options,
        )
        return _response.data

    async def user_current_list_gpg_keys(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GpgKey]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GpgKey]
            GPGKeyList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_current_list_gpg_keys(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_current_list_gpg_keys(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def user_current_post_gpg_key(
        self,
        *,
        armored_public_key: str,
        armored_signature: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GpgKey:
        """
        Parameters
        ----------
        armored_public_key : str
            An armored GPG key to add

        armored_signature : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_current_post_gpg_key(
                armored_public_key="armored_public_key",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_current_post_gpg_key(
            armored_public_key=armored_public_key,
            armored_signature=armored_signature,
            request_options=request_options,
        )
        return _response.data

    async def user_current_get_gpg_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GpgKey:
        """
        Parameters
        ----------
        id : int
            id of key to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GpgKey
            GPGKey

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_current_get_gpg_key(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_current_get_gpg_key(
            id, request_options=request_options
        )
        return _response.data

    async def user_current_delete_gpg_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of key to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_current_delete_gpg_key(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_current_delete_gpg_key(
            id, request_options=request_options
        )
        return _response.data

    async def list_hooks(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Hook]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Hook]
            HookList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_hooks(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hooks(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_hook(
        self,
        *,
        config: CreateHookOptionConfig,
        type: CreateHookOptionType,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        config : CreateHookOptionConfig

        type : CreateHookOptionType

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.create_hook(
                config={"key": "value"},
                type="forgejo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_hook(
            config=config,
            type=type,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            events=events,
            request_options=request_options,
        )
        return _response.data

    async def get_hook(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Hook:
        """
        Parameters
        ----------
        id : int
            id of the hook to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_hook(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_hook(id, request_options=request_options)
        return _response.data

    async def delete_hook(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of the hook to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_hook(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_hook(
            id, request_options=request_options
        )
        return _response.data

    async def edit_hook(
        self,
        id: int,
        *,
        active: typing.Optional[bool] = OMIT,
        authorization_header: typing.Optional[str] = OMIT,
        branch_filter: typing.Optional[str] = OMIT,
        config: typing.Optional[typing.Dict[str, str]] = OMIT,
        events: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Hook:
        """
        Parameters
        ----------
        id : int
            id of the hook to update

        active : typing.Optional[bool]

        authorization_header : typing.Optional[str]

        branch_filter : typing.Optional[str]

        config : typing.Optional[typing.Dict[str, str]]

        events : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Hook
            Hook

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.edit_hook(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.edit_hook(
            id,
            active=active,
            authorization_header=authorization_header,
            branch_filter=branch_filter,
            config=config,
            events=events,
            request_options=request_options,
        )
        return _response.data

    async def current_list_keys(
        self,
        *,
        fingerprint: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PublicKey]:
        """
        Parameters
        ----------
        fingerprint : typing.Optional[str]
            fingerprint of the key

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PublicKey]
            PublicKeyList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_keys(
                fingerprint="fingerprint",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_keys(
            fingerprint=fingerprint,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def current_post_key(
        self,
        *,
        key: str,
        title: str,
        read_only: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PublicKey:
        """
        Parameters
        ----------
        key : str
            An armored SSH key to add

        title : str
            Title of the key to add

        read_only : typing.Optional[bool]
            Describe if the key has only read access or read/write

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublicKey
            PublicKey

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_post_key(
                key="key",
                title="title",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_post_key(
            key=key, title=title, read_only=read_only, request_options=request_options
        )
        return _response.data

    async def current_get_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PublicKey:
        """
        Parameters
        ----------
        id : int
            id of key to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PublicKey
            PublicKey

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_get_key(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_get_key(
            id, request_options=request_options
        )
        return _response.data

    async def current_delete_key(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        id : int
            id of key to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_delete_key(
                id=1000000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_delete_key(
            id, request_options=request_options
        )
        return _response.data

    async def list_blocked_users(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BlockedUser]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BlockedUser]
            BlockedUserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_blocked_users(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_blocked_users(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_quota(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> QuotaInfo:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaInfo
            QuotaInfo

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_quota()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_quota(request_options=request_options)
        return _response.data

    async def list_quota_artifacts(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedArtifactList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedArtifactList
            QuotaUsedArtifactList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_quota_artifacts(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_quota_artifacts(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def list_quota_attachments(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedAttachmentList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedAttachmentList
            QuotaUsedAttachmentList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_quota_attachments(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_quota_attachments(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def check_quota(
        self, *, subject: str, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Parameters
        ----------
        subject : str
            subject of the quota

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool
            Returns true if the action is accepted.

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.check_quota(
                subject="subject",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.check_quota(
            subject=subject, request_options=request_options
        )
        return _response.data

    async def list_quota_packages(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> QuotaUsedPackageList:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        QuotaUsedPackageList
            QuotaUsedPackageList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_quota_packages(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_quota_packages(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_list_repos(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order_by: typing.Optional[UserCurrentListReposRequestOrderBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        order_by : typing.Optional[UserCurrentListReposRequestOrderBy]
            order the repositories

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_repos(
                page=1,
                limit=1,
                order_by="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_repos(
            page=page, limit=limit, order_by=order_by, request_options=request_options
        )
        return _response.data

    async def get_user_settings(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UserSettings:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSettings
            UserSettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_user_settings()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_settings(
            request_options=request_options
        )
        return _response.data

    async def update_user_settings(
        self,
        *,
        description: typing.Optional[str] = OMIT,
        diff_view_style: typing.Optional[str] = OMIT,
        enable_repo_unit_hints: typing.Optional[bool] = OMIT,
        full_name: typing.Optional[str] = OMIT,
        hide_activity: typing.Optional[bool] = OMIT,
        hide_email: typing.Optional[bool] = OMIT,
        hide_pronouns: typing.Optional[bool] = OMIT,
        language: typing.Optional[str] = OMIT,
        location: typing.Optional[str] = OMIT,
        pronouns: typing.Optional[str] = OMIT,
        theme: typing.Optional[str] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserSettings:
        """
        Parameters
        ----------
        description : typing.Optional[str]

        diff_view_style : typing.Optional[str]

        enable_repo_unit_hints : typing.Optional[bool]

        full_name : typing.Optional[str]

        hide_activity : typing.Optional[bool]

        hide_email : typing.Optional[bool]
            Privacy

        hide_pronouns : typing.Optional[bool]

        language : typing.Optional[str]

        location : typing.Optional[str]

        pronouns : typing.Optional[str]

        theme : typing.Optional[str]

        website : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSettings
            UserSettings

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.update_user_settings()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user_settings(
            description=description,
            diff_view_style=diff_view_style,
            enable_repo_unit_hints=enable_repo_unit_hints,
            full_name=full_name,
            hide_activity=hide_activity,
            hide_email=hide_email,
            hide_pronouns=hide_pronouns,
            language=language,
            location=location,
            pronouns=pronouns,
            theme=theme,
            website=website,
            request_options=request_options,
        )
        return _response.data

    async def current_list_starred(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_starred(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_starred(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_check_starring(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo

        repo : str
            name of the repo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_check_starring(
                owner="owner",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_check_starring(
            owner, repo, request_options=request_options
        )
        return _response.data

    async def current_put_star(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo to star

        repo : str
            name of the repo to star

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_put_star(
                owner="owner",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_put_star(
            owner, repo, request_options=request_options
        )
        return _response.data

    async def current_delete_star(
        self,
        owner: str,
        repo: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        owner : str
            owner of the repo to unstar

        repo : str
            name of the repo to unstar

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_delete_star(
                owner="owner",
                repo="repo",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_delete_star(
            owner, repo, request_options=request_options
        )
        return _response.data

    async def get_stop_watches(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[StopWatch]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[StopWatch]
            StopWatchList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_stop_watches(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_stop_watches(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_list_subscriptions(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_list_subscriptions(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_list_subscriptions(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def list_teams(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Team]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Team]
            TeamList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_teams(
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_teams(
            page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def current_tracked_times(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        since: typing.Optional[dt.datetime] = None,
        before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TrackedTime]:
        """
        Parameters
        ----------
        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        since : typing.Optional[dt.datetime]
            Only show times updated after the given time. This is a timestamp in RFC 3339 format

        before : typing.Optional[dt.datetime]
            Only show times updated before the given time. This is a timestamp in RFC 3339 format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TrackedTime]
            TrackedTimeList

        Examples
        --------
        import asyncio
        import datetime

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.current_tracked_times(
                page=1,
                limit=1,
                since=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                before=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.current_tracked_times(
            page=page,
            limit=limit,
            since=since,
            before=before,
            request_options=request_options,
        )
        return _response.data

    async def unblock_user(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of the user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.unblock_user(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.unblock_user(
            username, request_options=request_options
        )
        return _response.data

    async def search(
        self,
        *,
        q: typing.Optional[str] = None,
        uid: typing.Optional[int] = None,
        sort: typing.Optional[UserSearchRequestSort] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserSearchResults:
        """
        Parameters
        ----------
        q : typing.Optional[str]
            keyword

        uid : typing.Optional[int]
            ID of the user to search for

        sort : typing.Optional[UserSearchRequestSort]
            sort order of results

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserSearchResults
            SearchResults of a successful search

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.search(
                q="q",
                uid=1000000,
                sort="oldest",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            q=q,
            uid=uid,
            sort=sort,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        username : str
            username of user to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User
            User

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            username, request_options=request_options
        )
        return _response.data

    async def list_activity_feeds(
        self,
        username: str,
        *,
        only_performed_by: typing.Optional[bool] = None,
        date: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Activity]:
        """
        Parameters
        ----------
        username : str
            username of user

        only_performed_by : typing.Optional[bool]
            if true, only show actions performed by the requested user

        date : typing.Optional[str]
            the date of the activities to be found

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Activity]
            ActivityFeedsList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_activity_feeds(
                username="username",
                only_performed_by=True,
                date="date",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_activity_feeds(
            username,
            only_performed_by=only_performed_by,
            date=date,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def list_followers(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_followers(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_followers(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def list_following(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]
            UserList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_following(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_following(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def check_following(
        self,
        username: str,
        target: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of following user

        target : str
            username of followed user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.check_following(
                username="username",
                target="target",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.check_following(
            username, target, request_options=request_options
        )
        return _response.data

    async def user_list_gpg_keys(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[GpgKey]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[GpgKey]
            GPGKeyList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.user_list_gpg_keys(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.user_list_gpg_keys(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_heatmap_data(
        self, username: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[UserHeatmapData]:
        """
        Parameters
        ----------
        username : str
            username of user to get

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserHeatmapData]
            UserHeatmapData

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_heatmap_data(
                username="username",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_heatmap_data(
            username, request_options=request_options
        )
        return _response.data

    async def list_keys(
        self,
        username: str,
        *,
        fingerprint: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[PublicKey]:
        """
        Parameters
        ----------
        username : str
            username of user

        fingerprint : typing.Optional[str]
            fingerprint of the key

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PublicKey]
            PublicKeyList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_keys(
                username="username",
                fingerprint="fingerprint",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_keys(
            username,
            fingerprint=fingerprint,
            page=page,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def list_repos(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_repos(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_repos(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def list_starred(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_starred(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_starred(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def list_subscriptions(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Repository]:
        """
        Parameters
        ----------
        username : str
            username of the user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Repository]
            RepositoryList

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.list_subscriptions(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_subscriptions(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def get_tokens(
        self,
        username: str,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AccessToken]:
        """
        Parameters
        ----------
        username : str
            username of user

        page : typing.Optional[int]
            page number of results to return (1-based)

        limit : typing.Optional[int]
            page size of results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AccessToken]
            AccessTokenList represents a list of API access token.

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.get_tokens(
                username="username",
                page=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tokens(
            username, page=page, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_token(
        self,
        username: str,
        *,
        name: str,
        scopes: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessToken:
        """
        Parameters
        ----------
        username : str
            username of user

        name : str

        scopes : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessToken
            AccessToken represents an API access token.

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.create_token(
                username="username",
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_token(
            username, name=name, scopes=scopes, request_options=request_options
        )
        return _response.data

    async def delete_access_token(
        self,
        username: str,
        token: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        username : str
            username of user

        token : str
            token to be deleted, identified by ID and if not available by name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from pyforgejo import AsyncPyforgejoApi

        client = AsyncPyforgejoApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.user.delete_access_token(
                username="username",
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_access_token(
            username, token, request_options=request_options
        )
        return _response.data

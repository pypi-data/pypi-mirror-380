# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ActionRunJob(UniversalBaseModel):
    """
    ActionRunJob represents a job of a run
    """

    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the action run job id
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    the action run job name
    """

    needs: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    the action run job needed ids
    """

    owner_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the owner id
    """

    repo_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the repository id
    """

    runs_on: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    the action run job labels to run on
    """

    status: typing.Optional[str] = pydantic.Field(default=None)
    """
    the action run job status
    """

    task_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    the action run job latest task id
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="allow", frozen=True
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow

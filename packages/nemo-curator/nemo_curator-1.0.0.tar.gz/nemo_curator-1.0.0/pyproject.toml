# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = [
    "nemo_curator",
    "nemo_curator.*",
]

[tool.setuptools.dynamic]
version = { attr = "nemo_curator.package_info.__version__" }

[project]
name = "nemo-curator"
dynamic = ["version"]
authors = [
    { name = "Ayush Dattagupta", email = "adattagupta@nvidia.com" },
    { name = "Abhinav Garg", email = "abhgarg@nvidia.com" },
    { name = "Praateek Mahajan", email = "praateekm@nvidia.com" },
    { name = "Sarah Yurick", email = "syurick@nvidia.com" },
    { name = "Vibhu Jawa", email = "vjawa@nvidia.com" },
]
description = "Scalable Data Preprocessing Tool for Training Large Language Models"
readme = "README.md"
requires-python = ">=3.10,<3.13"
dependencies = [
    "absl-py>=2.0.0,<3.0.0",
    "comment_parser",
    "cosmos-xenna==0.1.2",
    "fsspec",
    "jieba==0.42.1",
    "loguru",
    "mecab-python3",
    "pandas>=2.1.0",
    "pyarrow",
    "ray[default,data]>=2.49",
    "torch",
    "transformers==4.55.2",
]

[project.optional-dependencies]
cuda12 = ["gpustat", "pynvml"]

# Installs CPU + GPU text curation modules
deduplication_cuda12 = [
    "cudf-cu12==25.6.*",
    "cugraph-cu12==25.6.*",
    "cuml-cu12==25.6.*",
    "nx-cugraph-cu12==25.6.*",
    "pylibraft-cu12==25.6.*",
    "raft-dask-cu12==25.6.*",
    "rapidsmpf-cu12==25.6.*",
]

audio_cpu = [
    "nemo_toolkit[asr]==2.4.0",
]
audio_cuda12 = [
    "nemo_curator[audio_cpu]",
    "nemo_curator[cuda12]",
]

image_cpu = [
    "torchvision"
]

# NVIDIA DALI (simplified; update the package to match your CUDA version if needed)
image_cuda12 = [
    "nemo_curator[image_cpu]",
    "nemo_curator[cuda12]",
    "nemo_curator[deduplication_cuda12]",
    "nvidia-dali-cuda120",
]

# Text Curation Dependencies
text_cpu = [
    # Download / Extract
    "beautifulsoup4",
    "justext",
    "lxml",
    "pycld2",
    "resiliparse",
    "s5cmd",
    "trafilatura==2.0.0",
    "warcio",
    # Filters
    "fasttext==0.9.3",
    "sentencepiece",
    "mwparserfromhell==0.6.5",
    # Aegis
    "peft",
    # Modifiers
    "ftfy==6.1.1",
]

text_cuda12 = [
    "nemo_curator[cuda12]",
    "nemo_curator[deduplication_cuda12]",
    "nemo_curator[text_cpu]",
]

# Video Curation Dependencies
video_cpu = [
    "av==13.1.0",
    "opencv-python",
    "torchvision",
    "einops",
    "easydict",
]

video_cuda12 = [
    "nemo_curator[video_cpu]",
    "nemo_curator[cuda12]",
    "cvcuda_cu12",
    "flash-attn<=2.8.3; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "pycuda",
    "PyNvVideoCodec==2.0.2; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "torch<=2.8.0",
    "torchaudio",
    "vllm==0.10.2; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
]

# All dependencies
all = [
    "nemo_curator[audio_cuda12]",
    "nemo_curator[image_cuda12]",
    "nemo_curator[text_cuda12]",
    "nemo_curator[video_cuda12]",
]

[dependency-groups]
build = ["setuptools", "torch<=2.8.0"]
dev = ["jupyter"]
linting = ["pre-commit", "ruff==0.11.4"]
test = [
    "coverage",
    "debugpy",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-loguru",
    "scikit-learn",
]

[tool.uv]
package = true
managed = true
default-groups = ["dev", "test"]
index-strategy = "unsafe-best-match"
no-build-isolation-package = ["flash-attn"]
constraint-dependencies = [
    "protobuf>=4.25.8", # Address CVE GHSA-8qvm-5x2c-j2w7
    "xgrammar>=0.1.21", # Address CVE GHSA-5cmr-4px5-23pc
]
override-dependencies = [
    "apex; sys_platform == 'never'",
    "distance; sys_platform == 'never'",
    "kaldiio;  sys_platform == 'never'",
    "levenshtein;  sys_platform == 'never'",
    "transformers==4.55.2",
]


[[tool.uv.index]]
name = "nvidia"
url = "https://pypi.nvidia.com"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"
explicit = true

[[tool.uv.index]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu128"
explicit = true

[tool.uv.sources]
torch = [
    { index = "pytorch", marker = "platform_machine == 'x86_64' and sys_platform != 'darwin'" },
    { index = "pypi", marker = "platform_machine != 'x86_64' or sys_platform == 'darwin'" },
]
torchaudio = [
    { index = "pytorch", marker = "platform_machine == 'x86_64' and sys_platform != 'darwin'" },
    { index = "pypi", marker = "platform_machine != 'x86_64' or sys_platform == 'darwin'" },
]
torchvision = [
    { index = "pytorch", marker = "platform_machine == 'x86_64' and sys_platform != 'darwin'" },
    { index = "pypi", marker = "platform_machine != 'x86_64' or sys_platform == 'darwin'" },
]

[tool.coverage.paths]
source = ["./nemo_curator", "/workspace/nemo_curator", "/home/runner/_work/Curator/Curator/NeMo-Curator/nemo_curator"]

[tool.ruff]
line-length = 119
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",  # pydocstyle
    "PTH",  # use pathlib
    "G",  # no enforcement during logging
    "FBT",  # allow booleans in function / class arguments
    "T20",  # allow printing
    "E501",  # Allow line length violations, leave it to Black
    "ANN002",  # don't annotate **args
    "ANN003",  # don't annotate **kwargs
    "ANN204",  # don't annotate self/cls/special methods (__new__)
    "PT013",  # how to import pytest
    "PERF401",  # don't enforce list comprehension
    "RET505", "RET506", "RET507", "RET508",  # allow branching (if else after return)
    "PGH004",  # allow generic noqa
    "PD901",  # allow naming dataframes df
    "TD002",  # Allow TODO without author
    "TD003",  # Allow TODO without link
    "TRY003", # Allow long exception messages rather than creating a new exception class
    "FIX002",  # Allow TODO to exist,
    "EXE002", # Don't require for a shebang to be present if it's executable
    "COM812", # Disable the trailing comma in linter, because ruff formatter ensures it
    "SLF001", # Allow accessing private attributes
]
fixable = ["ALL"]


[tool.ruff.lint.extend-per-file-ignores]
"nemo_curator/__init__.py" = ["F401"]
"examples/**" = [
    "INP001", # No __init__.py is required
]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ANN201", # Allow methods to not return something
    "PLR2004", # Magic value used in comparison, ...
]
"tutorials/**" = [
    "INP001", # No __init__.py is required
    "PLE2515", # Ignore \u200b complaint
]

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = [
    "gpu: marks tests as GPU tests (deselect with '-m \"not gpu\"')",
]

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, StrictInt
from typing_extensions import Self

from code_size_analyzer_client.models.data_record import DataRecord
from code_size_analyzer_client.models.summary_record import SummaryRecord


class MapFileResponse(BaseModel):
    """
    MapFileResponse
    """  # noqa: E501

    summary: dict[str, SummaryRecord]
    summary_ext: dict[str, SummaryRecord]
    data: list[DataRecord]
    categories: dict[str, list[DataRecord]]
    compiler_options: dict[str, Any]
    ramfunc: StrictInt
    __properties: ClassVar[list[str]] = [
        "summary",
        "summary_ext",
        "data",
        "categories",
        "compiler_options",
        "ramfunc",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of MapFileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in summary (dict)
        _field_dict = {}
        if self.summary:
            for _key_summary in self.summary:
                if self.summary[_key_summary]:
                    _field_dict[_key_summary] = self.summary[_key_summary].to_dict()
            _dict["summary"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in summary_ext (dict)
        _field_dict = {}
        if self.summary_ext:
            for _key_summary_ext in self.summary_ext:
                if self.summary_ext[_key_summary_ext]:
                    _field_dict[_key_summary_ext] = self.summary_ext[
                        _key_summary_ext
                    ].to_dict()
            _dict["summary_ext"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict["data"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in categories (dict of array)
        _field_dict_of_array = {}
        if self.categories:
            for _key_categories in self.categories:
                if self.categories[_key_categories] is not None:
                    _field_dict_of_array[_key_categories] = [
                        _item.to_dict() for _item in self.categories[_key_categories]
                    ]
            _dict["categories"] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of MapFileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "summary": dict(
                    (_k, SummaryRecord.from_dict(_v))
                    for _k, _v in obj["summary"].items()
                )
                if obj.get("summary") is not None
                else None,
                "summary_ext": dict(
                    (_k, SummaryRecord.from_dict(_v))
                    for _k, _v in obj["summary_ext"].items()
                )
                if obj.get("summary_ext") is not None
                else None,
                "data": [DataRecord.from_dict(_item) for _item in obj["data"]]
                if obj.get("data") is not None
                else None,
                "categories": dict(
                    (
                        _k,
                        [DataRecord.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None,
                    )
                    for _k, _v in obj.get("categories", {}).items()
                ),
                "compiler_options": obj.get("compiler_options"),
                "ramfunc": obj.get("ramfunc"),
            }
        )
        return _obj

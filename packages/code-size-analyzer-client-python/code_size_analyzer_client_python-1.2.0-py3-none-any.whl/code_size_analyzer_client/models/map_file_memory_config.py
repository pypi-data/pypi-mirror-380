"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self

from code_size_analyzer_client.models.map_file_section import MapFileSection


class MapFileMemoryConfig(BaseModel):
    """
    MapFileMemoryConfig
    """  # noqa: E501

    name: StrictStr
    origin: StrictInt
    size: StrictInt
    attr: StrictStr
    end: StrictInt
    sections: list[MapFileSection]
    registered_sections: list[MapFileSection]
    unregistered_sections: list[MapFileSection]
    used_space: StrictInt
    free_space: StrictInt
    __properties: ClassVar[list[str]] = [
        "name",
        "origin",
        "size",
        "attr",
        "end",
        "sections",
        "registered_sections",
        "unregistered_sections",
        "used_space",
        "free_space",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of MapFileMemoryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item_sections in self.sections:
                if _item_sections:
                    _items.append(_item_sections.to_dict())
            _dict["sections"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in registered_sections (list)
        _items = []
        if self.registered_sections:
            for _item_registered_sections in self.registered_sections:
                if _item_registered_sections:
                    _items.append(_item_registered_sections.to_dict())
            _dict["registered_sections"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in unregistered_sections (list)
        _items = []
        if self.unregistered_sections:
            for _item_unregistered_sections in self.unregistered_sections:
                if _item_unregistered_sections:
                    _items.append(_item_unregistered_sections.to_dict())
            _dict["unregistered_sections"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of MapFileMemoryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "origin": obj.get("origin"),
                "size": obj.get("size"),
                "attr": obj.get("attr"),
                "end": obj.get("end"),
                "sections": [
                    MapFileSection.from_dict(_item) for _item in obj["sections"]
                ]
                if obj.get("sections") is not None
                else None,
                "registered_sections": [
                    MapFileSection.from_dict(_item)
                    for _item in obj["registered_sections"]
                ]
                if obj.get("registered_sections") is not None
                else None,
                "unregistered_sections": [
                    MapFileSection.from_dict(_item)
                    for _item in obj["unregistered_sections"]
                ]
                if obj.get("unregistered_sections") is not None
                else None,
                "used_space": obj.get("used_space"),
                "free_space": obj.get("free_space"),
            }
        )
        return _obj

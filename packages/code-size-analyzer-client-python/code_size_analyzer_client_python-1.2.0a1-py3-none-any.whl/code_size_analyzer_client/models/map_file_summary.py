"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, StrictInt
from typing_extensions import Self

from code_size_analyzer_client.models.module_group import ModuleGroup


class MapFileSummary(BaseModel):
    """
    MapFileSummary
    """  # noqa: E501

    flash_size: StrictInt
    ram_size: StrictInt
    module_groups: list[ModuleGroup]
    __properties: ClassVar[list[str]] = ["flash_size", "ram_size", "module_groups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of MapFileSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in module_groups (list)
        _items = []
        if self.module_groups:
            for _item_module_groups in self.module_groups:
                if _item_module_groups:
                    _items.append(_item_module_groups.to_dict())
            _dict["module_groups"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of MapFileSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "flash_size": obj.get("flash_size"),
                "ram_size": obj.get("ram_size"),
                "module_groups": [
                    ModuleGroup.from_dict(_item) for _item in obj["module_groups"]
                ]
                if obj.get("module_groups") is not None
                else None,
            }
        )
        return _obj

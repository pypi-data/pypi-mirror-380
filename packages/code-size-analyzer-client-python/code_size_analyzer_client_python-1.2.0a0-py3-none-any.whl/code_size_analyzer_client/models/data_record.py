"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class DataRecord(BaseModel):
    """
    DataRecord
    """  # noqa: E501

    library_name: StrictStr | None
    file_name: StrictStr | None
    code_size: StrictInt
    ram_size: StrictInt = Field(alias="RAM_size")
    distribution_type: StrictStr | None
    mode: StrictStr | None
    role: StrictStr | None
    target: StrictStr | None
    module: StrictStr | None
    component: StrictStr | None
    team_owner: StrictStr | None
    path_in_source: StrictStr | None
    uc_component_path: StrictStr | None
    uc_categories: list[StrictStr] | None = None
    __properties: ClassVar[list[str]] = [
        "library_name",
        "file_name",
        "code_size",
        "RAM_size",
        "distribution_type",
        "mode",
        "role",
        "target",
        "module",
        "component",
        "team_owner",
        "path_in_source",
        "uc_component_path",
        "uc_categories",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DataRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if library_name (nullable) is None
        # and model_fields_set contains the field
        if self.library_name is None and "library_name" in self.model_fields_set:
            _dict["library_name"] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict["file_name"] = None

        # set to None if distribution_type (nullable) is None
        # and model_fields_set contains the field
        if (
            self.distribution_type is None
            and "distribution_type" in self.model_fields_set
        ):
            _dict["distribution_type"] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict["mode"] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict["role"] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict["target"] = None

        # set to None if module (nullable) is None
        # and model_fields_set contains the field
        if self.module is None and "module" in self.model_fields_set:
            _dict["module"] = None

        # set to None if component (nullable) is None
        # and model_fields_set contains the field
        if self.component is None and "component" in self.model_fields_set:
            _dict["component"] = None

        # set to None if team_owner (nullable) is None
        # and model_fields_set contains the field
        if self.team_owner is None and "team_owner" in self.model_fields_set:
            _dict["team_owner"] = None

        # set to None if path_in_source (nullable) is None
        # and model_fields_set contains the field
        if self.path_in_source is None and "path_in_source" in self.model_fields_set:
            _dict["path_in_source"] = None

        # set to None if uc_component_path (nullable) is None
        # and model_fields_set contains the field
        if (
            self.uc_component_path is None
            and "uc_component_path" in self.model_fields_set
        ):
            _dict["uc_component_path"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DataRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "library_name": obj.get("library_name"),
                "file_name": obj.get("file_name"),
                "code_size": obj.get("code_size"),
                "RAM_size": obj.get("RAM_size"),
                "distribution_type": obj.get("distribution_type"),
                "mode": obj.get("mode"),
                "role": obj.get("role"),
                "target": obj.get("target"),
                "module": obj.get("module"),
                "component": obj.get("component"),
                "team_owner": obj.get("team_owner"),
                "path_in_source": obj.get("path_in_source"),
                "uc_component_path": obj.get("uc_component_path"),
                "uc_categories": obj.get("uc_categories"),
            }
        )
        return _obj

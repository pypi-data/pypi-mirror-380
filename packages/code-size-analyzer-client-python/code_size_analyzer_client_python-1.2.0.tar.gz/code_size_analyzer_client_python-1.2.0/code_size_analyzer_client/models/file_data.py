"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class FileData(BaseModel):
    """
    FileData
    """  # noqa: E501

    library_name: StrictStr | None = Field(alias="libraryName")
    file_name: StrictStr | None = Field(alias="fileName")
    code_size: StrictInt = Field(alias="codeSize")
    ram_size: StrictInt = Field(alias="RAMSize")
    distribution_type: StrictStr | None = Field(alias="distributionType")
    module: StrictStr | None
    component: StrictStr | None
    team_owner: StrictStr | None = Field(alias="teamOwner")
    path_in_source: StrictStr | None = Field(alias="pathInSource")
    uc_component_path: StrictStr | None = Field(default=None, alias="ucComponentPath")
    uc_categories: list[StrictStr] | None = Field(default=None, alias="ucCategories")
    __properties: ClassVar[list[str]] = [
        "libraryName",
        "fileName",
        "codeSize",
        "RAMSize",
        "distributionType",
        "module",
        "component",
        "teamOwner",
        "pathInSource",
        "ucComponentPath",
        "ucCategories",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of FileData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if library_name (nullable) is None
        # and model_fields_set contains the field
        if self.library_name is None and "library_name" in self.model_fields_set:
            _dict["libraryName"] = None

        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict["fileName"] = None

        # set to None if distribution_type (nullable) is None
        # and model_fields_set contains the field
        if (
            self.distribution_type is None
            and "distribution_type" in self.model_fields_set
        ):
            _dict["distributionType"] = None

        # set to None if module (nullable) is None
        # and model_fields_set contains the field
        if self.module is None and "module" in self.model_fields_set:
            _dict["module"] = None

        # set to None if component (nullable) is None
        # and model_fields_set contains the field
        if self.component is None and "component" in self.model_fields_set:
            _dict["component"] = None

        # set to None if team_owner (nullable) is None
        # and model_fields_set contains the field
        if self.team_owner is None and "team_owner" in self.model_fields_set:
            _dict["teamOwner"] = None

        # set to None if path_in_source (nullable) is None
        # and model_fields_set contains the field
        if self.path_in_source is None and "path_in_source" in self.model_fields_set:
            _dict["pathInSource"] = None

        # set to None if uc_component_path (nullable) is None
        # and model_fields_set contains the field
        if (
            self.uc_component_path is None
            and "uc_component_path" in self.model_fields_set
        ):
            _dict["ucComponentPath"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of FileData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "libraryName": obj.get("libraryName"),
                "fileName": obj.get("fileName"),
                "codeSize": obj.get("codeSize"),
                "RAMSize": obj.get("RAMSize"),
                "distributionType": obj.get("distributionType"),
                "module": obj.get("module"),
                "component": obj.get("component"),
                "teamOwner": obj.get("teamOwner"),
                "pathInSource": obj.get("pathInSource"),
                "ucComponentPath": obj.get("ucComponentPath"),
                "ucCategories": obj.get("ucCategories"),
            }
        )
        return _obj

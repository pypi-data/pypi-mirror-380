services:
  redis:
    image: redis:7-alpine

  elasticsearch:
    image: elasticsearch:9.1.4
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
    healthcheck:
      test: ["CMD-SHELL", "curl http://elasticsearch:9200"]
      interval: 15s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo:8
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
      MONGODB_ENABLE_JOURNAL: "false"

  kafka:
    image: apache/kafka:latest
    environment:
      KAFKA_LISTENERS: CONTROLLER://kafka:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://kafka:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 50

  test: &test-config
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    volumes:
      - ./:/test
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      MONGODB_URI: "mongodb://mongodb:27017"
      REDIS_URL: "redis://redis:6379/0"

  test-coverage:
    <<: *test-config
    command: tox run -e coverage -- --with-custom-logging

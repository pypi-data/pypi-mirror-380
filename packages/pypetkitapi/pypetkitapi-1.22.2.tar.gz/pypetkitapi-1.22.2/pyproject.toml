[tool.pre-commit-update]
dry_run = false
all_versions = false
verbose = true
preview = false
exclude = []
keep = []

[tool.ruff]
required-version = ">=0.8.1"

[tool.ruff.lint]

exclude = [
    "tests/**"
]

select = [
  "A001",   # Variable {name} is shadowing a Python builtin
  "ASYNC",  # flake8-async
  "B002",   # Python does not support the unary prefix increment
  "B005",   # Using .strip() with multi-character strings is misleading
  "B007",   # Loop control variable {name} not used within loop body
  "B009",   # Do not call getattr with a constant attribute value. It is not any safer than normal property access.
  "B014",   # Exception handler with duplicate exception
  "B015",   # Pointless comparison. Did you mean to assign a value? Otherwise, prepend assert or remove it.
  "B017",   # pytest.raises(BaseException) should be considered evil
  "B018",   # Found useless attribute access. Either assign it to a variable or remove it.
  "B023",   # Function definition does not bind loop variable {name}
  "B024",   # `{name}` is an abstract base class, but it has no abstract methods or properties
  "B026",   # Star-arg unpacking after a keyword argument is strongly discouraged
  "B032",   # Possible unintentional type annotation (using :). Did you mean to assign (using =)?
  "B035",   # Dictionary comprehension uses static key
  "B904",   # Use raise from to specify exception cause
  "B905",   # zip() without an explicit strict= parameter
  "BLE",
  "C",      # complexity
  "COM818", # Trailing comma on bare tuple prohibited
  "D",      # docstrings
  "DTZ003", # Use datetime.now(tz=) instead of datetime.utcnow()
  "DTZ004", # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
  "E",      # pycodestyle
  "F",      # pyflakes/autoflake
  "F541",   # f-string without any placeholders
  "FLY",    # flynt
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "INP",    # flake8-no-pep420
  "ISC",    # flake8-implicit-str-concat
  "ICN001", # import concentions; {name} should be imported as {asname}
  "LOG",    # flake8-logging
  "N804",   # First argument of a class method should be named cls
  "N805",   # First argument of a method should be named self
  "N815",   # Variable {name} in class scope should not be mixedCase
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "PTH",    # flake8-pathlib
  "PYI",    # flake8-pyi
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF005", # Consider iterable unpacking instead of concatenation
  "RUF006", # Store a reference to the return value of asyncio.create_task
  "RUF007", # Prefer itertools.pairwise() over zip() when iterating over successive pairs
  "RUF008", # Do not use mutable default values for dataclass attributes
  "RUF010", # Use explicit conversion flag
  "RUF013", # PEP 484 prohibits implicit Optional
  "RUF016", # Slice in indexed access to type {value_type} uses type {index_type} instead of an integer
  "RUF017", # Avoid quadratic list summation
  "RUF018", # Avoid assignment expressions in assert statements
  "RUF019", # Unnecessary key check before dictionary access
  "RUF020", # {never_like} | T is equivalent to T
  "RUF021", # Parenthesize a and b expressions when chaining and and or together, to make the precedence clear
  "RUF022", # Sort __all__
  "RUF023", # Sort __slots__
  "RUF024", # Do not pass mutable objects as values to dict.fromkeys
  "RUF026", # default_factory is a positional-only argument to defaultdict
  "RUF030", # print() call in assert statement is likely unintentional
  "RUF032", # Decimal() called with float literal argument
  "RUF033", # __post_init__ method with argument defaults
  "RUF034", # Useless if-else condition
  "RUF100", # Unused `noqa` directive
  "RUF101", # noqa directives that use redirected rule codes
  "RUF200", # Failed to parse pyproject.toml: {message}
  "S102",   # Use of exec detected
  "S103",   # bad-file-permissions
  "S108",   # hardcoded-temp-file
  "S306",   # suspicious-mktemp-usage
  "S307",   # suspicious-eval-usage
  "S313",   # suspicious-xmlc-element-tree-usage
  "S314",   # suspicious-xml-element-tree-usage
  "S315",   # suspicious-xml-expat-reader-usage
  "S316",   # suspicious-xml-expat-builder-usage
  "S317",   # suspicious-xml-sax-usage
  "S318",   # suspicious-xml-mini-dom-usage
  "S319",   # suspicious-xml-pull-dom-usage
  "S601",   # paramiko-call
  "S602",   # subprocess-popen-with-shell-equals-true
  "S604",   # call-with-shell-equals-true
  "S608",   # hardcoded-sql-expression
  "S609",   # unix-command-wildcard-injection
  "SIM",    # flake8-simplify
  "SLF",    # flake8-self
  "SLOT",   # flake8-slots
  "T100",   # Trace found: {name} used
  "T20",    # flake8-print
  "TC",     # flake8-type-checking
  "TID",    # Tidy imports
  "TRY",    # tryceratops
  "UP",     # pyupgrade
  "UP031",  # Use format specifiers instead of percent format
  "UP032",  # Use f-string instead of `format` call
  "W",      # pycodestyle
]

ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description
    "D213", # Multi-line docstring summary should start at the second line
    "D400", # First line should end with a period
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "D415", # First line should end with a period
    "E501", # line too long

    "PLC1901", # {existing} can be simplified to {replacement} as an empty string is falsey; too many false positives
    "PLC0415", # import should be at the top-level of a file
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT011", # pytest.raises({exception}) is too broad, set the `match` parameter or use a more specific exception
    "PT018", # Assertion should be broken down into multiple parts
    "RUF001", # String contains ambiguous unicode character.
    "RUF002", # Docstring contains ambiguous unicode character.
    "RUF003", # Comment contains ambiguous unicode character.
    "RUF015", # Prefer next(...) over single element slice
    "SIM102", # Use a single if statement instead of nested if statements
    "SIM103", # Return the condition {condition} directly
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "SIM115", # Use context handler for opening files

    # Moving imports into type-checking blocks can mess with pytest.patch()
    "TC001", # Move application import {} into a type-checking block
    "TC002", # Move third-party import {} into a type-checking block
    "TC003", # Move standard library import {} into a type-checking block

    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY400", # Use `logging.exception` instead of `logging.error`

    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",

    # Disabled because ruff does not understand type of __all__ generated by a function
    "PLE0605"
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"async_timeout".msg = "use asyncio.timeout instead"
"pytz".msg = "use zoneinfo instead"
"tests".msg = "You should not import tests"

[tool.ruff.lint.isort]
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.pydocstyle]
convention = "google"
property-decorators = ["propcache.api.cached_property"]

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "pypetkitapi"
version = "1.22.2"
description = "Python client for PetKit API"
authors = ["Jezza34000 <info@mail.com>"]
readme = "README.md"
homepage = "https://github.com/Jezza34000/pypetkit"
repository = "https://github.com/Jezza34000/pypetkit"
license = "MIT"
keywords = ["petkit", "api", "client", "pet", "iot"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.dependencies]
python = ">=3.11"
aiohttp = ">=3.11.11,<4.0.0"
aiofiles = ">=24.1.0,<25.0.0"
pycryptodome = ">=3.19.1,<4.0.0"
m3u8 = ">=6.0.0,<7.0.0"
tenacity = ">=9.1.2,<10.0.0"
pydantic = ">=2.10.4,<3.0.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
ruff = "^0.13.0"
black = "^25.0.0"

[tool.poetry.group.typing.dependencies]
types-aiofiles = "^24.1.0.20240626"
mypy = "^1.8.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-cov = "^7.0.0"
pytest-asyncio = "^1.0.0"

[tool.bumpver]
current_version = "1.22.2"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "bump version {old_version} -> {new_version}"
tag_message = "{new_version}"
tag_scope = "default"
pre_commit_hook = ""
post_commit_hook = ""
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    '^version = "{version}"',
    '^current_version = "{version}"',
]
"pypetkitapi/__init__.py" = [
    '^__version__ = "{version}"',
]

[tool.tox]
min_version = "4.20"
requires = ["tox>=4.23.2"]
env_list = ["3.11", "3.12", "precommit"]

[tool.tox.env_run_base]
description = "Run test under {base_python}"
deps = ["pytest>=8.3.4", "pytest-cov>=6.0.0"]
commands = [["pytest", "--cov=pypetkitapi",  "--cov-config=.coveragerc",  "--cov-report=xml",  "--cov-branch"]]

[tool.tox.env.precommit]
description = "run pre-commit hooks"
deps = ["pre-commit>=4.0.1"]
skip_install = true
commands = [["pre-commit", "run", "--all-files"]]

[tool.gitleaks]
allowlist = { files = ["sonar-project.properties"] }

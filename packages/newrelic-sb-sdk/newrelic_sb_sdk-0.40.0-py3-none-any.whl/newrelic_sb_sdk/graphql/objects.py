__all__ = [
    "AiIssuesIIncident",
    "AiWorkflowsResponseError",
    "AlertableEntity",
    "AlertableEntityOutline",
    "AlertsAsNrqlCondition",
    "AlertsNotificationChannel",
    "AlertsNrqlCondition",
    "AlertsNrqlTerms",
    "ApiAccessKey",
    "ApiAccessKeyError",
    "ApmBrowserApplicationEntity",
    "ApmBrowserApplicationEntityOutline",
    "ChangeTrackingEvent",
    "CloudIntegration",
    "CloudProvider",
    "CollectionEntity",
    "EdgeEndpointDetail",
    "EntityManagementActor",
    "EntityManagementEntity",
    "EntityRelationshipEdge",
    "ErrorsInboxErrorGroupBase",
    "ErrorsInboxResource",
    "ErrorsInboxResponseError",
    "InfrastructureIntegrationEntity",
    "InfrastructureIntegrationEntityOutline",
    "Nr1CatalogInstallPlanDirective",
    "Nr1CatalogInstaller",
    "Nr1CatalogNerdpackItem",
    "Nr1CatalogNerdpackItemMetadata",
    "Nr1CatalogPreview",
    "Nr1CatalogQuickstartComponent",
    "Nr1CatalogQuickstartComponentMetadata",
    "Nr1CatalogSupportedEntityTypes",
    "SuggestedNrqlQuery",
    "WhatsNewContent",
    "WorkloadStatusResult",
    "Entity",
    "EntityOutline",
    "Account",
    "AccountManagementCreateResponse",
    "AccountManagementManagedAccount",
    "AccountManagementOrganizationStitchedFields",
    "AccountManagementUpdateResponse",
    "AccountOutline",
    "AccountReference",
    "Actor",
    "AgentApplicationAddAppToEntityPlatformResult",
    "AgentApplicationApmBrowserSettings",
    "AgentApplicationBrowserSettings",
    "AgentApplicationCreateBrowserResult",
    "AgentApplicationCreateMobileResult",
    "AgentApplicationDeleteResult",
    "AgentApplicationEnableBrowserResult",
    "AgentApplicationSegmentsBrowserSegmentAllowList",
    "AgentApplicationSegmentsBrowserSegmentAllowListResult",
    "AgentApplicationSettingsApmBase",
    "AgentApplicationSettingsApmConfig",
    "AgentApplicationSettingsApplicationExitInfo",
    "AgentApplicationSettingsApplicationLogging",
    "AgentApplicationSettingsBrowserAjax",
    "AgentApplicationSettingsBrowserBase",
    "AgentApplicationSettingsBrowserConfig",
    "AgentApplicationSettingsBrowserDistributedTracing",
    "AgentApplicationSettingsBrowserMonitoring",
    "AgentApplicationSettingsBrowserPerformance",
    "AgentApplicationSettingsBrowserPrivacy",
    "AgentApplicationSettingsBrowserProperties",
    "AgentApplicationSettingsErrorCollector",
    "AgentApplicationSettingsForwarding",
    "AgentApplicationSettingsIgnoredStatusCodeRule",
    "AgentApplicationSettingsJfr",
    "AgentApplicationSettingsLocalDecorating",
    "AgentApplicationSettingsMaskInputOptions",
    "AgentApplicationSettingsMetrics",
    "AgentApplicationSettingsMobileBase",
    "AgentApplicationSettingsMobileNetworkSettings",
    "AgentApplicationSettingsMobileProperties",
    "AgentApplicationSettingsMobileSessionReplay",
    "AgentApplicationSettingsNetworkAlias",
    "AgentApplicationSettingsSessionReplay",
    "AgentApplicationSettingsSessionTrace",
    "AgentApplicationSettingsSlowSql",
    "AgentApplicationSettingsThreadProfiler",
    "AgentApplicationSettingsTransactionTracer",
    "AgentApplicationSettingsUpdateError",
    "AgentApplicationSettingsUpdateResult",
    "AgentEnvironmentAccountApplicationLoadedModules",
    "AgentEnvironmentAccountApplicationLoadedModulesResults",
    "AgentEnvironmentAccountEnvironmentAttributesResults",
    "AgentEnvironmentAccountStitchedFields",
    "AgentEnvironmentApplicationEnvironmentAttributes",
    "AgentEnvironmentApplicationInstance",
    "AgentEnvironmentApplicationInstanceDetails",
    "AgentEnvironmentApplicationInstancesResult",
    "AgentEnvironmentApplicationLoadedModule",
    "AgentEnvironmentAttribute",
    "AgentEnvironmentLoadedModuleAttribute",
    "AgentFeatures",
    "AgentReleasesAgentRelease",
    "AgentReleasesOperatingSystem",
    "AgentReleasesOsVersion",
    "AiDecisionsAccountStitchedFields",
    "AiDecisionsAnnotationEntry",
    "AiDecisionsApplicableIncidentSearch",
    "AiDecisionsDecision",
    "AiDecisionsDecisionListing",
    "AiDecisionsMergeFeedback",
    "AiDecisionsOperationResult",
    "AiDecisionsOpinionEntry",
    "AiDecisionsOverrideConfiguration",
    "AiDecisionsRule",
    "AiDecisionsRuleMetadata",
    "AiDecisionsSelectorApplicability",
    "AiDecisionsSelectorExamples",
    "AiDecisionsSimulation",
    "AiDecisionsSuggestion",
    "AiIssuesAccountStitchedFields",
    "AiIssuesConfigurationByEnvironment",
    "AiIssuesConfigurationOverrideResponse",
    "AiIssuesEnvironmentConfiguration",
    "AiIssuesGracePeriodConfig",
    "AiIssuesIncidentData",
    "AiIssuesIncidentUserActionResponse",
    "AiIssuesIssue",
    "AiIssuesIssueData",
    "AiIssuesIssueUserActionResponse",
    "AiIssuesIssueUserActionResult",
    "AiIssuesKeyValue",
    "AiIssuesKeyValues",
    "AiNotificationsAccountStitchedFields",
    "AiNotificationsBasicAuth",
    "AiNotificationsChannel",
    "AiNotificationsChannelResponse",
    "AiNotificationsChannelSchemaResult",
    "AiNotificationsChannelTestResponse",
    "AiNotificationsChannelsResponse",
    "AiNotificationsConstraintError",
    "AiNotificationsConstraintsError",
    "AiNotificationsCustomHeader",
    "AiNotificationsCustomHeadersAuth",
    "AiNotificationsDataValidationError",
    "AiNotificationsDeleteResponse",
    "AiNotificationsDestination",
    "AiNotificationsDestinationResponse",
    "AiNotificationsDestinationTestResponse",
    "AiNotificationsDestinationsResponse",
    "AiNotificationsFieldError",
    "AiNotificationsOAuth2Auth",
    "AiNotificationsOAuthUrlResponse",
    "AiNotificationsProperty",
    "AiNotificationsResponseError",
    "AiNotificationsSchema",
    "AiNotificationsSchemaField",
    "AiNotificationsSecureUrl",
    "AiNotificationsSelectComponentOptions",
    "AiNotificationsSuggestion",
    "AiNotificationsSuggestionError",
    "AiNotificationsSuggestionsResponse",
    "AiNotificationsTokenAuth",
    "AiNotificationsUiComponent",
    "AiNotificationsVariable",
    "AiNotificationsVariableResult",
    "AiTopologyAccountStitchedFields",
    "AiTopologyCollectorOperationResult",
    "AiTopologyDefiningAttribute",
    "AiTopologyEdge",
    "AiTopologyEdgeListing",
    "AiTopologyGraph",
    "AiTopologyVertex",
    "AiTopologyVertexListing",
    "AiWorkflowsAccountStitchedFields",
    "AiWorkflowsCreateWorkflowResponse",
    "AiWorkflowsDeleteWorkflowResponse",
    "AiWorkflowsDestinationConfiguration",
    "AiWorkflowsEnrichment",
    "AiWorkflowsFilter",
    "AiWorkflowsNrqlConfiguration",
    "AiWorkflowsPredicate",
    "AiWorkflowsTestNotificationResponse",
    "AiWorkflowsTestWorkflowResponse",
    "AiWorkflowsUpdateWorkflowResponse",
    "AiWorkflowsWorkflow",
    "AiWorkflowsWorkflows",
    "AlertsAccountStitchedFields",
    "AlertsAsNrqlConditionsSearchResultSet",
    "AlertsCampfireNotificationChannelConfig",
    "AlertsConditionDeleteResponse",
    "AlertsCrossAccountElectionStatus",
    "AlertsCrossAccountParticipant",
    "AlertsEmailNotificationChannelConfig",
    "AlertsHipChatNotificationChannelConfig",
    "AlertsMutingRule",
    "AlertsMutingRuleCondition",
    "AlertsMutingRuleConditionGroup",
    "AlertsMutingRuleDeleteResponse",
    "AlertsMutingRuleSchedule",
    "AlertsNotificationChannelCreateError",
    "AlertsNotificationChannelCreateResponse",
    "AlertsNotificationChannelDeleteError",
    "AlertsNotificationChannelDeleteResponse",
    "AlertsNotificationChannelId",
    "AlertsNotificationChannelPoliciesResultSet",
    "AlertsNotificationChannelPolicy",
    "AlertsNotificationChannelUpdateError",
    "AlertsNotificationChannelUpdateResponse",
    "AlertsNotificationChannelsAddToPolicyError",
    "AlertsNotificationChannelsAddToPolicyResponse",
    "AlertsNotificationChannelsRemoveFromPolicyError",
    "AlertsNotificationChannelsRemoveFromPolicyResponse",
    "AlertsNotificationChannelsResultSet",
    "AlertsNrqlConditionExpiration",
    "AlertsNrqlConditionPrediction",
    "AlertsNrqlConditionQuery",
    "AlertsNrqlConditionSignal",
    "AlertsNrqlConditionsSearchResultSet",
    "AlertsOpsGenieNotificationChannelConfig",
    "AlertsPagerDutyNotificationChannelConfig",
    "AlertsPoliciesSearchResultSet",
    "AlertsPolicy",
    "AlertsPolicyDeleteResponse",
    "AlertsSlackNotificationChannelConfig",
    "AlertsUserNotificationChannelConfig",
    "AlertsVictorOpsNotificationChannelConfig",
    "AlertsWebhookBasicAuthInput",
    "AlertsWebhookCustomHeaderInput",
    "AlertsWebhookNotificationChannelConfig",
    "AlertsXMattersNotificationChannelConfig",
    "ApiAccessActorStitchedFields",
    "ApiAccessCreateKeyResponse",
    "ApiAccessDeleteKeyResponse",
    "ApiAccessDeletedKey",
    "ApiAccessKeySearchResult",
    "ApiAccessNrPlatformStitchedFields",
    "ApiAccessUpdateKeyResponse",
    "ApiAccessValidateUserKeyResult",
    "ApmApplicationDeployment",
    "ApmApplicationEntitySettingsResult",
    "ApmApplicationRunningAgentVersions",
    "ApmApplicationSettings",
    "ApmApplicationSummaryData",
    "ApmBrowserApplicationSummaryData",
    "ApmExternalServiceSummaryData",
    "AuthenticationDomainType",
    "AuthorizationManagementAccessGrant",
    "AuthorizationManagementAuthenticationDomain",
    "AuthorizationManagementAuthenticationDomainSearch",
    "AuthorizationManagementGrantAccessPayload",
    "AuthorizationManagementGrantedRole",
    "AuthorizationManagementGrantedRoleSearch",
    "AuthorizationManagementGroup",
    "AuthorizationManagementGroupSearch",
    "AuthorizationManagementOrganizationStitchedFields",
    "AuthorizationManagementRevokeAccessPayload",
    "AuthorizationManagementRole",
    "AuthorizationManagementRoleSearch",
    "BrowserApplicationRunningAgentVersions",
    "BrowserApplicationSettings",
    "BrowserApplicationSummaryData",
    "ChangeTrackingActorStitchedFields",
    "ChangeTrackingChangeTrackingEvent",
    "ChangeTrackingChangeTrackingSearchResult",
    "ChangeTrackingCreateEventResponse",
    "ChangeTrackingDeployment",
    "ChangeTrackingDeploymentSearchResult",
    "CloudAccountFields",
    "CloudAccountMutationError",
    "CloudActorFields",
    "CloudConfigureIntegrationPayload",
    "CloudDashboardTemplate",
    "CloudDisableIntegrationPayload",
    "CloudIntegrationMutationError",
    "CloudLinkAccountPayload",
    "CloudLinkedAccount",
    "CloudLogGroupInstrumentationStatus",
    "CloudMigrateAwsGovCloudToAssumeRolePayload",
    "CloudNamespaceInstrumentationStatus",
    "CloudOciCompartmentInstrumentationDetails",
    "CloudOciInstrumentedPayloadUrlPayload",
    "CloudOciLogGroupInstrumentationDetails",
    "CloudOciLogGroupInstrumentedPayloadUrlPayload",
    "CloudOciTenancyDetails",
    "CloudRenameAccountPayload",
    "CloudService",
    "CloudTemplateParam",
    "CloudUnlinkAccountPayload",
    "CloudUpdateAccountPayload",
    "CollaborationActorStitchedFields",
    "CollaborationBotResponse",
    "CollaborationBotResponseFeedback",
    "CollaborationCodeMark",
    "CollaborationComment",
    "CollaborationCommentConnection",
    "CollaborationCommentCreator",
    "CollaborationCommentSyncStatus",
    "CollaborationContext",
    "CollaborationEmail",
    "CollaborationExternalCommentCreator",
    "CollaborationExternalServiceConnection",
    "CollaborationExternalServiceConnectionGroup",
    "CollaborationFile",
    "CollaborationGrokMessage",
    "CollaborationLinkedContexts",
    "CollaborationMention",
    "CollaborationMessageSent",
    "CollaborationSocketConnection",
    "CollaborationSubscriber",
    "CollaborationSubscriberConnection",
    "CollaborationSubscriptionsWithUnread",
    "CollaborationThread",
    "CollaborationThreadConnection",
    "CollaborationThreadsCount",
    "Consumption",
    "CrossAccountNrdbResultContainer",
    "CustomRoleRoleMutationResult",
    "CustomerAdministration",
    "CustomerAdministrationJobs",
    "DashboardActorStitchedFields",
    "DashboardAddWidgetsToPageError",
    "DashboardAddWidgetsToPageResult",
    "DashboardAreaWidgetConfiguration",
    "DashboardBarWidgetConfiguration",
    "DashboardBillboardWidgetConfiguration",
    "DashboardBillboardWidgetThreshold",
    "DashboardCreateError",
    "DashboardCreateResult",
    "DashboardDeleteError",
    "DashboardDeleteResult",
    "DashboardEntityOwnerInfo",
    "DashboardEntityResult",
    "DashboardLineWidgetConfiguration",
    "DashboardLiveUrl",
    "DashboardLiveUrlAuth",
    "DashboardLiveUrlAuthFactor",
    "DashboardLiveUrlAuthPasswordDetails",
    "DashboardLiveUrlCreationPoliciesResult",
    "DashboardLiveUrlCreationPolicy",
    "DashboardLiveUrlError",
    "DashboardLiveUrlResult",
    "DashboardMarkdownWidgetConfiguration",
    "DashboardOwnerInfo",
    "DashboardPage",
    "DashboardPieWidgetConfiguration",
    "DashboardResetLiveUrlPasswordResult",
    "DashboardRevokeLiveDashboardUrlResult",
    "DashboardRevokeLiveUrlResult",
    "DashboardTableWidgetConfiguration",
    "DashboardUndeleteError",
    "DashboardUndeleteResult",
    "DashboardUpdateError",
    "DashboardUpdatePageError",
    "DashboardUpdatePageResult",
    "DashboardUpdateResult",
    "DashboardUpdateWidgetsInPageError",
    "DashboardUpdateWidgetsInPageResult",
    "DashboardVariable",
    "DashboardVariableDefaultItem",
    "DashboardVariableDefaultValue",
    "DashboardVariableEnumItem",
    "DashboardVariableNrqlQuery",
    "DashboardVariableOptions",
    "DashboardWidget",
    "DashboardWidgetConfiguration",
    "DashboardWidgetLayout",
    "DashboardWidgetNrqlQuery",
    "DashboardWidgetVisualization",
    "DataDictionaryAttribute",
    "DataDictionaryDataSource",
    "DataDictionaryDocsStitchedFields",
    "DataDictionaryEvent",
    "DataDictionaryUnit",
    "DataManagementAccountLimit",
    "DataManagementAccountStitchedFields",
    "DataManagementAppliedRules",
    "DataManagementBulkCopyResult",
    "DataManagementCustomizableRetention",
    "DataManagementEventNamespaces",
    "DataManagementFeatureSetting",
    "DataManagementNamespaceLevelRetention",
    "DataManagementRenderedRetention",
    "DataManagementRetention",
    "DataManagementRetentionValues",
    "DataManagementRule",
    "DataSourceGapsActorStitchedFields",
    "DataSourceGapsGap",
    "DataSourceGapsGapType",
    "DataSourceGapsGapsResult",
    "DistributedTracingActorStitchedFields",
    "DistributedTracingEntityTracingSummary",
    "DistributedTracingLinkedSpan",
    "DistributedTracingSpan",
    "DistributedTracingSpanAnomaly",
    "DistributedTracingSpanConnection",
    "DistributedTracingTrace",
    "DistributedTracingTraceSummary",
    "DocumentationFields",
    "DomainType",
    "EdgeAccountStitchedFields",
    "EdgeCreateSpanAttributeRuleResponseError",
    "EdgeCreateSpanAttributeRulesResponse",
    "EdgeCreateTraceFilterRuleResponses",
    "EdgeCreateTraceObserverResponse",
    "EdgeCreateTraceObserverResponseError",
    "EdgeCreateTraceObserverResponses",
    "EdgeDataSource",
    "EdgeDataSourceGroup",
    "EdgeDeleteSpanAttributeRuleResponse",
    "EdgeDeleteSpanAttributeRuleResponseError",
    "EdgeDeleteTraceFilterRuleResponses",
    "EdgeDeleteTraceObserverResponse",
    "EdgeDeleteTraceObserverResponseError",
    "EdgeDeleteTraceObserverResponses",
    "EdgeEndpoint",
    "EdgeRandomTraceFilter",
    "EdgeSpanAttributeRule",
    "EdgeSpanAttributesTraceFilter",
    "EdgeTraceFilters",
    "EdgeTraceObserver",
    "EdgeTracing",
    "EdgeUpdateTraceObserverResponse",
    "EdgeUpdateTraceObserverResponseError",
    "EdgeUpdateTraceObserverResponses",
    "EntityAlertViolation",
    "EntityCollection",
    "EntityCollectionDefinition",
    "EntityCollectionScopeAccounts",
    "EntityDeleteError",
    "EntityDeleteResult",
    "EntityGoldenContext",
    "EntityGoldenContextScopedGoldenMetrics",
    "EntityGoldenContextScopedGoldenTags",
    "EntityGoldenGoldenMetricsError",
    "EntityGoldenMetric",
    "EntityGoldenMetricDefinition",
    "EntityGoldenMetricsDomainTypeScoped",
    "EntityGoldenMetricsDomainTypeScopedResponse",
    "EntityGoldenOriginalDefinitionWithSelector",
    "EntityGoldenOriginalQueryWithSelector",
    "EntityGoldenTag",
    "EntityGoldenTagsDomainTypeScoped",
    "EntityGoldenTagsDomainTypeScopedResponse",
    "EntityManagementActorStitchedFields",
    "EntityManagementAgentDeployment",
    "EntityManagementAiAgentEntityCreateResult",
    "EntityManagementAiAgentEntityUpdateResult",
    "EntityManagementAiAgentToolConfig",
    "EntityManagementAiToolEntityCreateResult",
    "EntityManagementAiToolEntityUpdateResult",
    "EntityManagementAiToolParameter",
    "EntityManagementAttribute",
    "EntityManagementBlob",
    "EntityManagementBlobSignature",
    "EntityManagementBudgetAccount",
    "EntityManagementBudgetAlertPolicy",
    "EntityManagementBudgetLimit",
    "EntityManagementBudgetSegment",
    "EntityManagementCategoryScope",
    "EntityManagementCharacterTextSplitterOptions",
    "EntityManagementCollectionElementsResult",
    "EntityManagementCollectionEntityCreateResult",
    "EntityManagementCollectionEntityUpdateResult",
    "EntityManagementCollectionsContainingEntityResult",
    "EntityManagementCommunicationLog",
    "EntityManagementConfig",
    "EntityManagementConfiguration",
    "EntityManagementConfluenceIntegrationCreateResult",
    "EntityManagementConfluenceIntegrationUpdateResult",
    "EntityManagementConfluenceRagSettingsEntityCreateResult",
    "EntityManagementConfluenceRagSettingsEntityUpdateResult",
    "EntityManagementConnectionSettings",
    "EntityManagementCount",
    "EntityManagementDeploymentAgentConfigurationVersion",
    "EntityManagementDiscoverySettings",
    "EntityManagementEntityDeleteResult",
    "EntityManagementEntityReference",
    "EntityManagementEntitySearchResult",
    "EntityManagementExecutionIssue",
    "EntityManagementExternalOwner",
    "EntityManagementFleetControlProperties",
    "EntityManagementFleetDeployment",
    "EntityManagementGenericEntityUpdateResult",
    "EntityManagementGitHubSyncOptions",
    "EntityManagementGitRepositoryEntityCreateResult",
    "EntityManagementGitRepositoryEntityUpdateResult",
    "EntityManagementGithubAppTokenCredential",
    "EntityManagementGithubCredentials",
    "EntityManagementInboxIssueCategoryEntityCreateResult",
    "EntityManagementInboxIssueCategoryEntityUpdateResult",
    "EntityManagementInfrastructureManager",
    "EntityManagementJiraBasicAuthCredential",
    "EntityManagementJiraCredentials",
    "EntityManagementJiraOAuthCredential",
    "EntityManagementLlmConfig",
    "EntityManagementMarkdownTextSplitterOptions",
    "EntityManagementMetadata",
    "EntityManagementNewRelicBasicAuthCredential",
    "EntityManagementNrqlRuleEngine",
    "EntityManagementParentInfo",
    "EntityManagementPerformanceInboxSettingEntityCreateResult",
    "EntityManagementPerformanceInboxSettingEntityUpdateResult",
    "EntityManagementPipelineCloudRuleEntityCreateResult",
    "EntityManagementPipelineCloudRuleEntityUpdateResult",
    "EntityManagementRagToolEntityCreateResult",
    "EntityManagementRagToolEntityUpdateResult",
    "EntityManagementRelationship",
    "EntityManagementRelationshipCreateResult",
    "EntityManagementRelationshipDeleteResult",
    "EntityManagementRelationshipUpdateResult",
    "EntityManagementRepositoryLicense",
    "EntityManagementRingDeploymentTracker",
    "EntityManagementRuleExecutionStatus",
    "EntityManagementSchedule",
    "EntityManagementScopedReference",
    "EntityManagementScorecardEntityCreateResult",
    "EntityManagementScorecardEntityUpdateResult",
    "EntityManagementScorecardRuleEntityCreateResult",
    "EntityManagementScorecardRuleEntityUpdateResult",
    "EntityManagementSecretReference",
    "EntityManagementServiceNowApiKeyCredential",
    "EntityManagementServiceNowCredentials",
    "EntityManagementServiceNowOAuthCredential",
    "EntityManagementSignatureDetails",
    "EntityManagementSigningCredential",
    "EntityManagementSyncGroupRule",
    "EntityManagementSyncGroupRuleCondition",
    "EntityManagementSyncGroupsSettings",
    "EntityManagementTag",
    "EntityManagementTeamEntityCreateResult",
    "EntityManagementTeamEntityUpdateResult",
    "EntityManagementTeamExternalIntegration",
    "EntityManagementTeamResource",
    "EntityManagementTeamsOrganizationSettingsEntityUpdateResult",
    "EntityManagementTemplateField",
    "EntityManagementTokenTextSplitterOptions",
    "EntityManagementUserMetadata",
    "EntityManagementWorkItemAssignment",
    "EntityManagementWorkItemAttribute",
    "EntityManagementWorkflowDefinitionVersion",
    "EntityRelationship",
    "EntityRelationshipNode",
    "EntityRelationshipRelatedEntitiesResult",
    "EntityRelationshipUserDefinedCreateOrReplaceResult",
    "EntityRelationshipUserDefinedCreateOrReplaceResultError",
    "EntityRelationshipUserDefinedDeleteResult",
    "EntityRelationshipUserDefinedDeleteResultError",
    "EntityRelationshipVertex",
    "EntitySearch",
    "EntitySearchCounts",
    "EntitySearchResult",
    "EntitySearchTypes",
    "EntityTag",
    "EntityTagValueWithMetadata",
    "EntityTagWithMetadata",
    "ErrorsInboxActorStitchedFields",
    "ErrorsInboxAssignErrorGroupResponse",
    "ErrorsInboxAssignment",
    "ErrorsInboxDeleteErrorGroupResourceResponse",
    "ErrorsInboxErrorGroupStateTypeResult",
    "ErrorsInboxErrorGroupsResponse",
    "ErrorsInboxOccurrences",
    "ErrorsInboxResourcesResponse",
    "ErrorsInboxUpdateErrorGroupStateResponse",
    "ErrorsInboxVersion",
    "EventAttributeDefinition",
    "EventDefinition",
    "EventsToMetricsAccountStitchedFields",
    "EventsToMetricsCreateRuleFailure",
    "EventsToMetricsCreateRuleResult",
    "EventsToMetricsCreateRuleSubmission",
    "EventsToMetricsDeleteRuleFailure",
    "EventsToMetricsDeleteRuleResult",
    "EventsToMetricsDeleteRuleSubmission",
    "EventsToMetricsError",
    "EventsToMetricsListRuleResult",
    "EventsToMetricsRule",
    "EventsToMetricsUpdateRuleFailure",
    "EventsToMetricsUpdateRuleResult",
    "EventsToMetricsUpdateRuleSubmission",
    "FleetControlActor",
    "FleetControlActorStitchedFields",
    "FleetControlCollectionEntity",
    "FleetControlConfigurationVersionList",
    "FleetControlCreateFleetResult",
    "FleetControlDeleteFleetResult",
    "FleetControlDeployFleetResult",
    "FleetControlDeployResult",
    "FleetControlFleetDeploymentCreateResult",
    "FleetControlFleetDeploymentDeleteResult",
    "FleetControlFleetDeploymentResult",
    "FleetControlFleetDeploymentUpdateResult",
    "FleetControlFleetEntityResult",
    "FleetControlFleetMemberEntityResult",
    "FleetControlFleetMemberRing",
    "FleetControlFleetMembersItemsResult",
    "FleetControlFleetMembersResult",
    "FleetControlMetadata",
    "FleetControlRingsDeploymentTracker",
    "FleetControlScopedReference",
    "FleetControlTag",
    "FleetControlUpdateFleetResult",
    "HistoricalDataExportAccountStitchedFields",
    "HistoricalDataExportCustomerExportResponse",
    "IncidentIntelligenceEnvironmentAccountStitchedFields",
    "IncidentIntelligenceEnvironmentActorStitchedFields",
    "IncidentIntelligenceEnvironmentConsentAccounts",
    "IncidentIntelligenceEnvironmentConsentAuthorizedAccounts",
    "IncidentIntelligenceEnvironmentConsentedAccount",
    "IncidentIntelligenceEnvironmentCreateEnvironment",
    "IncidentIntelligenceEnvironmentCurrentEnvironmentResult",
    "IncidentIntelligenceEnvironmentDeleteEnvironment",
    "IncidentIntelligenceEnvironmentDissentAccounts",
    "IncidentIntelligenceEnvironmentEnvironmentAlreadyExists",
    "IncidentIntelligenceEnvironmentEnvironmentCreated",
    "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment",
    "IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable",
    "IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount",
    "IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount",
    "InfrastructureHostSummaryData",
    "InstallationAccountStitchedFields",
    "InstallationInstallStatus",
    "InstallationInstallStatusResult",
    "InstallationRecipeEvent",
    "InstallationRecipeEventResult",
    "InstallationStatusError",
    "KeyTransactionApplication",
    "KeyTransactionCreateResult",
    "KeyTransactionDeleteResult",
    "KeyTransactionUpdateResult",
    "KnowledgeDocsStitchedFields",
    "KnowledgeSearchResponse",
    "KnowledgeSearchResult",
    "KnowledgeTag",
    "KnowledgeTagsResponse",
    "LogConfigurationsAccountStitchedFields",
    "LogConfigurationsCreateDataPartitionRuleError",
    "LogConfigurationsCreateDataPartitionRuleResponse",
    "LogConfigurationsCreateParsingRuleResponse",
    "LogConfigurationsDataPartitionRule",
    "LogConfigurationsDataPartitionRuleMatchingCriteria",
    "LogConfigurationsDataPartitionRuleMutationError",
    "LogConfigurationsDeleteDataPartitionRuleResponse",
    "LogConfigurationsDeleteParsingRuleResponse",
    "LogConfigurationsGrokTestExtractedAttribute",
    "LogConfigurationsGrokTestResult",
    "LogConfigurationsLiveArchiveConfiguration",
    "LogConfigurationsObfuscationAction",
    "LogConfigurationsObfuscationExpression",
    "LogConfigurationsObfuscationRule",
    "LogConfigurationsParsingRule",
    "LogConfigurationsParsingRuleMutationError",
    "LogConfigurationsPipelineConfiguration",
    "LogConfigurationsUpdateDataPartitionRuleResponse",
    "LogConfigurationsUpdateParsingRuleResponse",
    "LogConfigurationsUpsertPipelineConfigurationResponse",
    "MachineLearningAccountStitchedFields",
    "MachineLearningActorStitchedFields",
    "MachineLearningExperiment",
    "MachineLearningExperimentConnection",
    "MachineLearningFileDataSource",
    "MachineLearningFileDataSourceConnection",
    "MachineLearningModel",
    "MachineLearningModelConnection",
    "MachineLearningProject",
    "MachineLearningProjectConnection",
    "MachineLearningRagQueryDataResponse",
    "MachineLearningStreamDataSource",
    "MachineLearningStreamDataSourceConnection",
    "MachineLearningTag",
    "MachineLearningTagConnection",
    "MachineLearningTransactionResponse",
    "MetricNormalizationAccountStitchedFields",
    "MetricNormalizationRule",
    "MetricNormalizationRuleMetricGroupingIssue",
    "MetricNormalizationRuleMutationError",
    "MetricNormalizationRuleMutationResponse",
    "MobileAppSummaryData",
    "MobilePushNotificationActorStitchedFields",
    "MobilePushNotificationDevice",
    "MobilePushNotificationRemoveDeviceResult",
    "MobilePushNotificationSendPushResult",
    "MultiTenantAuthorizationGrant",
    "MultiTenantAuthorizationGrantCollection",
    "MultiTenantAuthorizationGrantGroup",
    "MultiTenantAuthorizationGrantRole",
    "MultiTenantAuthorizationGrantScope",
    "MultiTenantAuthorizationGrantee",
    "MultiTenantAuthorizationPermission",
    "MultiTenantAuthorizationPermissionCollection",
    "MultiTenantAuthorizationRole",
    "MultiTenantAuthorizationRoleCollection",
    "MultiTenantIdentityGroup",
    "MultiTenantIdentityGroupCollection",
    "MultiTenantIdentityGroupUser",
    "MultiTenantIdentityGroupUsers",
    "MultiTenantIdentityPendingUpgradeRequest",
    "MultiTenantIdentityUser",
    "MultiTenantIdentityUserCollection",
    "MultiTenantIdentityUserGroup",
    "MultiTenantIdentityUserGroups",
    "MultiTenantIdentityUserType",
    "NerdStorageAccountScope",
    "NerdStorageActorScope",
    "NerdStorageCollectionMember",
    "NerdStorageDeleteResult",
    "NerdStorageEntityScope",
    "NerdStorageVaultActorStitchedFields",
    "NerdStorageVaultDeleteSecretResult",
    "NerdStorageVaultResultError",
    "NerdStorageVaultSecret",
    "NerdStorageVaultWriteSecretResult",
    "NerdpackAllowListResult",
    "NerdpackAllowedAccount",
    "NerdpackAssetInfo",
    "NerdpackData",
    "NerdpackMutationResultPerAccount",
    "NerdpackNerdpacks",
    "NerdpackRemovedTagInfo",
    "NerdpackRemovedTagResponse",
    "NerdpackSubscribeResult",
    "NerdpackSubscription",
    "NerdpackUnsubscribeResult",
    "NerdpackVersion",
    "NerdpackVersionsResult",
    "Nr1CatalogActorStitchedFields",
    "Nr1CatalogAlertConditionOutline",
    "Nr1CatalogAlertConditionTemplate",
    "Nr1CatalogAlertConditionTemplateMetadata",
    "Nr1CatalogAlertPolicyOutline",
    "Nr1CatalogAlertPolicyTemplate",
    "Nr1CatalogAlertPolicyTemplateMetadata",
    "Nr1CatalogAuthor",
    "Nr1CatalogCategory",
    "Nr1CatalogCategoryFacet",
    "Nr1CatalogCommunityContactChannel",
    "Nr1CatalogComponentFacet",
    "Nr1CatalogDashboardOutline",
    "Nr1CatalogDashboardTemplate",
    "Nr1CatalogDashboardTemplateMetadata",
    "Nr1CatalogDataSource",
    "Nr1CatalogDataSourceInstall",
    "Nr1CatalogDataSourceMetadata",
    "Nr1CatalogEmailContactChannel",
    "Nr1CatalogIcon",
    "Nr1CatalogInstallAlertPolicyTemplateResult",
    "Nr1CatalogInstallDashboardTemplateResult",
    "Nr1CatalogInstallPlanStep",
    "Nr1CatalogInstallPlanTarget",
    "Nr1CatalogIssuesContactChannel",
    "Nr1CatalogLinkInstallDirective",
    "Nr1CatalogNerdletInstallDirective",
    "Nr1CatalogNerdpack",
    "Nr1CatalogNerdpackMetadata",
    "Nr1CatalogQuickstart",
    "Nr1CatalogQuickstartMetadata",
    "Nr1CatalogQuickstartsListing",
    "Nr1CatalogReleaseNote",
    "Nr1CatalogSearchFacets",
    "Nr1CatalogSearchResponse",
    "Nr1CatalogSearchResultTypeFacet",
    "Nr1CatalogSubmitMetadataError",
    "Nr1CatalogSubmitMetadataResult",
    "Nr1CatalogSupportChannels",
    "NrdbMetadata",
    "NrdbMetadataTimeWindow",
    "NrdbQueryProgress",
    "NrdbResultContainer",
    "NrqlCancelQueryMutationResponse",
    "NrqlDropRulesAccountStitchedFields",
    "NrqlDropRulesCreateDropRuleFailure",
    "NrqlDropRulesCreateDropRuleResult",
    "NrqlDropRulesCreateDropRuleSubmission",
    "NrqlDropRulesDeleteDropRuleFailure",
    "NrqlDropRulesDeleteDropRuleResult",
    "NrqlDropRulesDeleteDropRuleSubmission",
    "NrqlDropRulesDropRule",
    "NrqlDropRulesError",
    "NrqlDropRulesListDropRulesResult",
    "NrqlFacetSuggestion",
    "NrqlHistoricalQuery",
    "Organization",
    "OrganizationAccount",
    "OrganizationAccountCollection",
    "OrganizationAccountShare",
    "OrganizationAccountShareCollection",
    "OrganizationAccountShareLimitingRoleWrapper",
    "OrganizationAccountShareOrganizationWrapper",
    "OrganizationAccountShares",
    "OrganizationAuthenticationDomain",
    "OrganizationAuthenticationDomainCollection",
    "OrganizationCreateOrganizationResponse",
    "OrganizationCreateSharedAccountResponse",
    "OrganizationCustomerContract",
    "OrganizationCustomerContractWrapper",
    "OrganizationCustomerOrganization",
    "OrganizationCustomerOrganizationWrapper",
    "OrganizationError",
    "OrganizationInformation",
    "OrganizationMembersOrganizationMember",
    "OrganizationMembersOrganizationMemberCollection",
    "OrganizationNrdbResultContainer",
    "OrganizationOrganizationAdministrator",
    "OrganizationOrganizationCreateAsyncCustomerResult",
    "OrganizationOrganizationCreateAsyncJobResult",
    "OrganizationOrganizationCreateAsyncOrganizationResult",
    "OrganizationOrganizationCreateAsyncResult",
    "OrganizationOrganizationCreateAsyncResultCollection",
    "OrganizationOrganizationGroup",
    "OrganizationOrganizationGroupWrapper",
    "OrganizationProvisioningUpdateSubscriptionResult",
    "OrganizationProvisioningUserError",
    "OrganizationRevokeSharedAccountResponse",
    "OrganizationSharedAccount",
    "OrganizationUpdateResponse",
    "OrganizationUpdateSharedAccountResponse",
    "PixieAccountStitchedFields",
    "PixieActorStitchedFields",
    "PixieLinkPixieProjectError",
    "PixieLinkPixieProjectResult",
    "PixieLinkedPixieProject",
    "PixiePixieProject",
    "PixieRecordPixieTosAcceptanceError",
    "PixieRecordPixieTosAcceptanceResult",
    "QueryHistoryActorStitchedFields",
    "QueryHistoryNrqlHistoryResult",
    "ReferenceEntityCreateRepositoryError",
    "ReferenceEntityCreateRepositoryResult",
    "RequestContext",
    "RootMutationType",
    "RootQueryType",
    "SecretsManagementCreateSecretResponse",
    "SecretsManagementDeleteSecretResponse",
    "SecretsManagementDeleteSecretVersionResponse",
    "SecretsManagementRecoverSecretResponse",
    "SecretsManagementRecoverSecretVersionResponse",
    "SecretsManagementRetrievedValue",
    "SecretsManagementScopeResponse",
    "SecretsManagementSecretMetadataResponse",
    "SecretsManagementSecretQueryResponse",
    "SecretsManagementSecretVersionResponse",
    "SecretsManagementSecretVersionsQueryResponse",
    "SecretsManagementSecretsCollectionItem",
    "SecretsManagementSecretsCollectionQueryResponse",
    "SecretsManagementTag",
    "SecretsManagementUpdateSecretResponse",
    "SecureCredentialSummaryData",
    "ServiceLevelDefinition",
    "ServiceLevelEvents",
    "ServiceLevelEventsQuery",
    "ServiceLevelEventsQuerySelect",
    "ServiceLevelIndicator",
    "ServiceLevelIndicatorResultQueries",
    "ServiceLevelObjective",
    "ServiceLevelObjectiveResultQueries",
    "ServiceLevelObjectiveRollingTimeWindow",
    "ServiceLevelObjectiveTimeWindow",
    "ServiceLevelResultQuery",
    "SessionsClient",
    "SessionsPrincipal",
    "SessionsRevokeSessionResponse",
    "SessionsSessionCollection",
    "SessionsSessionResponse",
    "StackTraceApmException",
    "StackTraceApmStackTrace",
    "StackTraceApmStackTraceFrame",
    "StackTraceBrowserException",
    "StackTraceBrowserStackTrace",
    "StackTraceBrowserStackTraceFrame",
    "StackTraceMobileCrash",
    "StackTraceMobileCrashStackTrace",
    "StackTraceMobileCrashStackTraceFrame",
    "StackTraceMobileException",
    "StackTraceMobileExceptionStackTrace",
    "StackTraceMobileExceptionStackTraceFrame",
    "StreamingExportAccountStitchedFields",
    "StreamingExportAwsDetails",
    "StreamingExportAzureDetails",
    "StreamingExportGcpDetails",
    "StreamingExportRule",
    "SuggestedNrqlQueryAnomaly",
    "SuggestedNrqlQueryResponse",
    "SyntheticMonitorSummaryData",
    "SyntheticsAccountStitchedFields",
    "SyntheticsBrokenLinksMonitor",
    "SyntheticsBrokenLinksMonitorCreateMutationResult",
    "SyntheticsBrokenLinksMonitorUpdateMutationResult",
    "SyntheticsCertCheckMonitor",
    "SyntheticsCertCheckMonitorCreateMutationResult",
    "SyntheticsCertCheckMonitorUpdateMutationResult",
    "SyntheticsCustomHeader",
    "SyntheticsDailyMonitorDowntimeMutationResult",
    "SyntheticsDateWindowEndOutput",
    "SyntheticsDaysOfWeekOutput",
    "SyntheticsDeviceEmulation",
    "SyntheticsError",
    "SyntheticsExtendedTypeMonitorRuntime",
    "SyntheticsLocations",
    "SyntheticsMonitorCreateError",
    "SyntheticsMonitorDeleteMutationResult",
    "SyntheticsMonitorDowntimeDeleteResult",
    "SyntheticsMonitorDowntimeMonthlyFrequencyOutput",
    "SyntheticsMonitorDowntimeMutationResult",
    "SyntheticsMonitorScriptQueryResponse",
    "SyntheticsMonitorUpdateError",
    "SyntheticsMonthlyMonitorDowntimeMutationResult",
    "SyntheticsOnceMonitorDowntimeMutationResult",
    "SyntheticsPrivateLocationDeleteResult",
    "SyntheticsPrivateLocationMutationError",
    "SyntheticsPrivateLocationMutationResult",
    "SyntheticsPrivateLocationPurgeQueueResult",
    "SyntheticsRuntime",
    "SyntheticsScriptApiMonitor",
    "SyntheticsScriptApiMonitorCreateMutationResult",
    "SyntheticsScriptApiMonitorUpdateMutationResult",
    "SyntheticsScriptBrowserMonitor",
    "SyntheticsScriptBrowserMonitorAdvancedOptions",
    "SyntheticsScriptBrowserMonitorCreateMutationResult",
    "SyntheticsScriptBrowserMonitorUpdateMutationResult",
    "SyntheticsSecureCredentialMutationResult",
    "SyntheticsSimpleBrowserMonitor",
    "SyntheticsSimpleBrowserMonitorAdvancedOptions",
    "SyntheticsSimpleBrowserMonitorCreateMutationResult",
    "SyntheticsSimpleBrowserMonitorUpdateMutationResult",
    "SyntheticsSimpleMonitor",
    "SyntheticsSimpleMonitorAdvancedOptions",
    "SyntheticsSimpleMonitorUpdateMutationResult",
    "SyntheticsStep",
    "SyntheticsStepMonitor",
    "SyntheticsStepMonitorAdvancedOptions",
    "SyntheticsStepMonitorCreateMutationResult",
    "SyntheticsStepMonitorUpdateMutationResult",
    "SyntheticsSyntheticMonitorAsset",
    "SyntheticsWeeklyMonitorDowntimeMutationResult",
    "SystemIdentityCreatedSystemIdentity",
    "SystemIdentityGroupCollection",
    "SystemIdentityGroupList",
    "SystemIdentityGroupResponseType",
    "SystemIdentityGroupType",
    "SystemIdentityIdentityCollection",
    "SystemIdentityNestedGroupCollection",
    "SystemIdentityNestedIdentityCollection",
    "SystemIdentityResponseType",
    "SystemIdentityType",
    "TaggingMutationError",
    "TaggingMutationResult",
    "TimeWindow",
    "TimeZoneInfo",
    "User",
    "UserManagementAddUsersToGroupsPayload",
    "UserManagementAuthenticationDomain",
    "UserManagementAuthenticationDomains",
    "UserManagementCreateGroupPayload",
    "UserManagementCreateUserPayload",
    "UserManagementCreatedUser",
    "UserManagementDeleteGroupPayload",
    "UserManagementDeleteUserPayload",
    "UserManagementDeletedUser",
    "UserManagementGroup",
    "UserManagementGroupUser",
    "UserManagementGroupUsers",
    "UserManagementGroups",
    "UserManagementOrganizationStitchedFields",
    "UserManagementOrganizationUserType",
    "UserManagementPendingUpgradeRequest",
    "UserManagementRemoveUsersFromGroupsPayload",
    "UserManagementUpdateGroupPayload",
    "UserManagementUpdateUserPayload",
    "UserManagementUser",
    "UserManagementUserGroup",
    "UserManagementUserGroups",
    "UserManagementUserType",
    "UserManagementUsers",
    "UserReference",
    "UsersActorStitchedFields",
    "UsersUserSearch",
    "UsersUserSearchResult",
    "WhatsNewDocsStitchedFields",
    "WhatsNewSearchResult",
    "WorkloadAccountStitchedFields",
    "WorkloadAutomaticStatus",
    "WorkloadCollection",
    "WorkloadCollectionWithoutStatus",
    "WorkloadEntityRef",
    "WorkloadEntitySearchQuery",
    "WorkloadRegularRule",
    "WorkloadRemainingEntitiesRule",
    "WorkloadRemainingEntitiesRuleRollup",
    "WorkloadRollup",
    "WorkloadRollupRuleDetails",
    "WorkloadScopeAccounts",
    "WorkloadStaticStatus",
    "WorkloadStatus",
    "WorkloadStatusConfig",
    "WorkloadValidAccounts",
    "WorkloadWorkloadStatus",
    "AiIssuesAnomalyIncident",
    "AiIssuesNewRelicIncident",
    "AiIssuesRestIncident",
    "AiWorkflowsBatchCreateMigratedWorkflowsResponseError",
    "AiWorkflowsBatchDeleteMigratedWorkflowsResponseError",
    "AiWorkflowsCreateResponseError",
    "AiWorkflowsDeleteResponseError",
    "AiWorkflowsFetchWorkflowsByIssuesFilterResponseError",
    "AiWorkflowsTestResponseError",
    "AiWorkflowsUpdateResponseError",
    "AlertsAsNrqlBaselineCondition",
    "AlertsAsNrqlOutlierCondition",
    "AlertsAsNrqlStaticCondition",
    "AlertsCampfireNotificationChannel",
    "AlertsEmailNotificationChannel",
    "AlertsHipChatNotificationChannel",
    "AlertsNrqlBaselineCondition",
    "AlertsNrqlConditionTerms",
    "AlertsNrqlConditionTermsWithPrediction",
    "AlertsNrqlOutlierCondition",
    "AlertsNrqlStaticCondition",
    "AlertsOpsGenieNotificationChannel",
    "AlertsPagerDutyNotificationChannel",
    "AlertsSlackNotificationChannel",
    "AlertsUserNotificationChannel",
    "AlertsVictorOpsNotificationChannel",
    "AlertsWebhookNotificationChannel",
    "AlertsXMattersNotificationChannel",
    "ApiAccessIngestKey",
    "ApiAccessIngestKeyError",
    "ApiAccessUserKey",
    "ApiAccessUserKeyError",
    "ApmApplicationEntity",
    "ApmApplicationEntityOutline",
    "ApmDatabaseInstanceEntity",
    "ApmDatabaseInstanceEntityOutline",
    "ApmExternalServiceEntity",
    "ApmExternalServiceEntityOutline",
    "BrowserApplicationEntity",
    "BrowserApplicationEntityOutline",
    "ChangeTrackingDeploymentEvent",
    "ChangeTrackingFeatureFlagEvent",
    "ChangeTrackingGenericEvent",
    "CloudAlbIntegration",
    "CloudApigatewayIntegration",
    "CloudAutoscalingIntegration",
    "CloudAwsAppsyncIntegration",
    "CloudAwsAthenaIntegration",
    "CloudAwsAutoDiscoveryIntegration",
    "CloudAwsCognitoIntegration",
    "CloudAwsConnectIntegration",
    "CloudAwsDirectconnectIntegration",
    "CloudAwsDocdbIntegration",
    "CloudAwsFsxIntegration",
    "CloudAwsGlueIntegration",
    "CloudAwsGovCloudProvider",
    "CloudAwsKinesisanalyticsIntegration",
    "CloudAwsMediaconvertIntegration",
    "CloudAwsMediapackagevodIntegration",
    "CloudAwsMetadataGovIntegration",
    "CloudAwsMetadataIntegration",
    "CloudAwsMqIntegration",
    "CloudAwsMsElasticacheGovIntegration",
    "CloudAwsMsElasticacheIntegration",
    "CloudAwsMskIntegration",
    "CloudAwsNeptuneIntegration",
    "CloudAwsProvider",
    "CloudAwsQldbIntegration",
    "CloudAwsRoute53resolverIntegration",
    "CloudAwsStatesIntegration",
    "CloudAwsTagsGlobalGovIntegration",
    "CloudAwsTagsGlobalIntegration",
    "CloudAwsTransitgatewayIntegration",
    "CloudAwsWafIntegration",
    "CloudAwsWafv2Integration",
    "CloudAwsXrayIntegration",
    "CloudAzureApimanagementIntegration",
    "CloudAzureAppgatewayIntegration",
    "CloudAzureAppserviceIntegration",
    "CloudAzureAutoDiscoveryIntegration",
    "CloudAzureContainersIntegration",
    "CloudAzureCosmosdbIntegration",
    "CloudAzureCostmanagementIntegration",
    "CloudAzureDatafactoryIntegration",
    "CloudAzureEventhubIntegration",
    "CloudAzureExpressrouteIntegration",
    "CloudAzureFirewallsIntegration",
    "CloudAzureFrontdoorIntegration",
    "CloudAzureFunctionsIntegration",
    "CloudAzureKeyvaultIntegration",
    "CloudAzureLoadbalancerIntegration",
    "CloudAzureLogicappsIntegration",
    "CloudAzureMachinelearningIntegration",
    "CloudAzureMariadbIntegration",
    "CloudAzureMonitorIntegration",
    "CloudAzureMysqlIntegration",
    "CloudAzureMysqlflexibleIntegration",
    "CloudAzurePostgresqlIntegration",
    "CloudAzurePostgresqlflexibleIntegration",
    "CloudAzurePowerbidedicatedIntegration",
    "CloudAzureRediscacheIntegration",
    "CloudAzureServicebusIntegration",
    "CloudAzureSqlIntegration",
    "CloudAzureSqlmanagedIntegration",
    "CloudAzureStorageIntegration",
    "CloudAzureVirtualmachineIntegration",
    "CloudAzureVirtualnetworksIntegration",
    "CloudAzureVmsIntegration",
    "CloudAzureVpngatewaysIntegration",
    "CloudBaseIntegration",
    "CloudBaseProvider",
    "CloudBillingIntegration",
    "CloudCciAwsS3Integration",
    "CloudCloudfrontIntegration",
    "CloudCloudtrailIntegration",
    "CloudConfluentKafkaConnectorResourceIntegration",
    "CloudConfluentKafkaKsqlResourceIntegration",
    "CloudConfluentKafkaResourceIntegration",
    "CloudDynamodbIntegration",
    "CloudEbsIntegration",
    "CloudEc2Integration",
    "CloudEcsIntegration",
    "CloudEfsIntegration",
    "CloudElasticacheIntegration",
    "CloudElasticbeanstalkIntegration",
    "CloudElasticsearchIntegration",
    "CloudElbIntegration",
    "CloudEmrIntegration",
    "CloudFossaIssuesIntegration",
    "CloudGcpAiplatformIntegration",
    "CloudGcpAlloydbIntegration",
    "CloudGcpAppengineIntegration",
    "CloudGcpBigqueryIntegration",
    "CloudGcpBigtableIntegration",
    "CloudGcpComposerIntegration",
    "CloudGcpDataflowIntegration",
    "CloudGcpDataprocIntegration",
    "CloudGcpDatastoreIntegration",
    "CloudGcpFirebasedatabaseIntegration",
    "CloudGcpFirebasehostingIntegration",
    "CloudGcpFirebasestorageIntegration",
    "CloudGcpFirestoreIntegration",
    "CloudGcpFunctionsIntegration",
    "CloudGcpInterconnectIntegration",
    "CloudGcpKubernetesIntegration",
    "CloudGcpLoadbalancingIntegration",
    "CloudGcpMemcacheIntegration",
    "CloudGcpProvider",
    "CloudGcpPubsubIntegration",
    "CloudGcpRedisIntegration",
    "CloudGcpRouterIntegration",
    "CloudGcpRunIntegration",
    "CloudGcpSpannerIntegration",
    "CloudGcpSqlIntegration",
    "CloudGcpStorageIntegration",
    "CloudGcpVmsIntegration",
    "CloudGcpVpcaccessIntegration",
    "CloudHealthIntegration",
    "CloudIamIntegration",
    "CloudIotIntegration",
    "CloudKinesisFirehoseIntegration",
    "CloudKinesisIntegration",
    "CloudLambdaIntegration",
    "CloudOciLogsIntegration",
    "CloudOciMetadataAndTagsIntegration",
    "CloudRdsIntegration",
    "CloudRedshiftIntegration",
    "CloudRoute53Integration",
    "CloudS3Integration",
    "CloudSecurityHubIntegration",
    "CloudSesIntegration",
    "CloudSnsIntegration",
    "CloudSqsIntegration",
    "CloudTrustedadvisorIntegration",
    "CloudVpcIntegration",
    "DashboardEntity",
    "DashboardEntityOutline",
    "EdgeAgentEndpointDetail",
    "EdgeHttpsEndpointDetail",
    "EntityManagementAgentConfigurationEntity",
    "EntityManagementAgentConfigurationVersionEntity",
    "EntityManagementAgentEffectiveConfigurationEntity",
    "EntityManagementAgentEntity",
    "EntityManagementAgentTypeDefinitionEntity",
    "EntityManagementAiAgentEntity",
    "EntityManagementAiCapableEntity",
    "EntityManagementAiToolEntity",
    "EntityManagementBudgetEntity",
    "EntityManagementCollectionEntity",
    "EntityManagementComponentEntity",
    "EntityManagementConfluenceIntegration",
    "EntityManagementConfluenceRagSettingsEntity",
    "EntityManagementCustomerImpactEntity",
    "EntityManagementCustomerImpactQueryEntity",
    "EntityManagementFleetDeploymentEntity",
    "EntityManagementFleetEntity",
    "EntityManagementFleetRingEntity",
    "EntityManagementGenericEntity",
    "EntityManagementGitHubIntegrationEntity",
    "EntityManagementGitRepositoryEntity",
    "EntityManagementGithubConnection",
    "EntityManagementInboxIssueCategoryEntity",
    "EntityManagementJiraConnection",
    "EntityManagementJiraSyncConfiguration",
    "EntityManagementMaintenanceWindowEntity",
    "EntityManagementNewRelicConnection",
    "EntityManagementNotebookEntity",
    "EntityManagementNotificationAttachmentEntity",
    "EntityManagementPerformanceInboxSettingEntity",
    "EntityManagementPipelineCloudRuleEntity",
    "EntityManagementRagDocumentEntity",
    "EntityManagementRagToolEntity",
    "EntityManagementScorecardEntity",
    "EntityManagementScorecardRuleEntity",
    "EntityManagementServiceNowConnection",
    "EntityManagementSlackConnection",
    "EntityManagementSlackSyncConfiguration",
    "EntityManagementStatusPageAnnouncementEntity",
    "EntityManagementStatusPageIncidentEntity",
    "EntityManagementSystemActor",
    "EntityManagementTeamEntity",
    "EntityManagementTeamsHierarchyLevelEntity",
    "EntityManagementTeamsOrganizationSettingsEntity",
    "EntityManagementUserActor",
    "EntityManagementUserEntity",
    "EntityManagementWorkItem",
    "EntityManagementWorkItemLink",
    "EntityManagementWorkItemMessage",
    "EntityManagementWorkflowDefinition",
    "EntityManagementWorkflowSchedule",
    "EntityRelationshipDetectedEdge",
    "EntityRelationshipUserDefinedEdge",
    "ErrorsInboxAssignErrorGroupError",
    "ErrorsInboxErrorGroup",
    "ErrorsInboxErrorGroupOutline",
    "ErrorsInboxJiraIssue",
    "ErrorsInboxUpdateErrorGroupStateError",
    "ExternalEntity",
    "ExternalEntityOutline",
    "GenericEntity",
    "GenericEntityOutline",
    "GenericInfrastructureEntity",
    "GenericInfrastructureEntityOutline",
    "InfrastructureAwsLambdaFunctionEntity",
    "InfrastructureAwsLambdaFunctionEntityOutline",
    "InfrastructureHostEntity",
    "InfrastructureHostEntityOutline",
    "KeyTransactionEntity",
    "KeyTransactionEntityOutline",
    "MobileApplicationEntity",
    "MobileApplicationEntityOutline",
    "Nr1CatalogAllSupportedEntityTypes",
    "Nr1CatalogInstallPlan",
    "Nr1CatalogLauncher",
    "Nr1CatalogLauncherMetadata",
    "Nr1CatalogLinkInstallPlanDirective",
    "Nr1CatalogNerdlet",
    "Nr1CatalogNerdletInstallPlanDirective",
    "Nr1CatalogNerdletMetadata",
    "Nr1CatalogNoSupportedEntityTypes",
    "Nr1CatalogQuickstartAlert",
    "Nr1CatalogQuickstartAlertCondition",
    "Nr1CatalogQuickstartAlertConditionMetadata",
    "Nr1CatalogQuickstartAlertMetadata",
    "Nr1CatalogQuickstartDashboard",
    "Nr1CatalogQuickstartDashboardMetadata",
    "Nr1CatalogQuickstartDocumentation",
    "Nr1CatalogQuickstartDocumentationMetadata",
    "Nr1CatalogQuickstartInstallPlan",
    "Nr1CatalogQuickstartInstallPlanMetadata",
    "Nr1CatalogScreenshot",
    "Nr1CatalogSpecificSupportedEntityTypes",
    "Nr1CatalogTargetedInstallPlanDirective",
    "Nr1CatalogVisualization",
    "Nr1CatalogVisualizationMetadata",
    "SecureCredentialEntity",
    "SecureCredentialEntityOutline",
    "SuggestedAnomalyBasedNrqlQuery",
    "SuggestedHistoryBasedNrqlQuery",
    "SyntheticMonitorEntity",
    "SyntheticMonitorEntityOutline",
    "TeamEntity",
    "TeamEntityOutline",
    "ThirdPartyServiceEntity",
    "ThirdPartyServiceEntityOutline",
    "UnavailableEntity",
    "UnavailableEntityOutline",
    "WhatsNewAnnouncementContent",
    "WhatsNewEolAnnouncementContent",
    "WorkloadEntity",
    "WorkloadEntityOutline",
    "WorkloadRollupRuleStatusResult",
    "WorkloadStaticStatusResult",
    "AiNotificationsAuth",
    "AiNotificationsError",
    "AiWorkflowsConfiguration",
    "AlertsNotificationChannelMutation",
    "IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails",
    "IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails",
    "Nr1CatalogDataSourceInstallDirective",
    "Nr1CatalogSearchResult",
]


# pylint: disable=duplicate-code,unused-import,too-many-lines,disallowed-name


import sgqlc.types
import sgqlc.types.datetime

from newrelic_sb_sdk.graphql.enums import (
    AgentApplicationBrowserLoader,
    AgentApplicationSettingsBrowserLoader,
    AgentApplicationSettingsMobileSessionReplayMode,
    AgentApplicationSettingsNetworkFilterMode,
    AgentApplicationSettingsRecordSqlEnum,
    AgentApplicationSettingsSessionTraceMode,
    AgentApplicationSettingsThresholdTypeEnum,
    AgentApplicationSettingsTracer,
    AgentApplicationSettingsUpdateErrorClass,
    AgentReleasesFilter,
    AiDecisionsDecisionSortMethod,
    AiDecisionsDecisionState,
    AiDecisionsDecisionType,
    AiDecisionsIncidentSelect,
    AiDecisionsIssuePriority,
    AiDecisionsOpinion,
    AiDecisionsResultType,
    AiDecisionsRuleSource,
    AiDecisionsRuleState,
    AiDecisionsRuleType,
    AiDecisionsSuggestionState,
    AiIssuesIncidentState,
    AiIssuesIssueMutingState,
    AiIssuesIssueState,
    AiIssuesIssueUserAction,
    AiIssuesPriority,
    AiNotificationsAuthType,
    AiNotificationsChannelStatus,
    AiNotificationsChannelType,
    AiNotificationsDestinationStatus,
    AiNotificationsDestinationType,
    AiNotificationsErrorType,
    AiNotificationsProduct,
    AiNotificationsResult,
    AiNotificationsUiComponentType,
    AiNotificationsUiComponentValidation,
    AiNotificationsVariableCategory,
    AiNotificationsVariableType,
    AiTopologyCollectorResultType,
    AiTopologyVertexClass,
    AiWorkflowsBatchCreateMigratedWorkflowsErrorType,
    AiWorkflowsBatchDeleteMigratedWorkflowsErrorType,
    AiWorkflowsCreateErrorType,
    AiWorkflowsDeleteErrorType,
    AiWorkflowsDestinationType,
    AiWorkflowsEnrichmentType,
    AiWorkflowsFetchWorkflowsByIssuesFilterErrorType,
    AiWorkflowsFilterType,
    AiWorkflowsMutingRulesHandling,
    AiWorkflowsNotificationTrigger,
    AiWorkflowsOperator,
    AiWorkflowsTestErrorType,
    AiWorkflowsTestNotificationResponseStatus,
    AiWorkflowsTestResponseStatus,
    AiWorkflowsUpdateErrorType,
    AlertsActionOnMutingRuleWindowEnded,
    AlertsAsNrqlSourceProduct,
    AlertsDayOfWeek,
    AlertsFillOption,
    AlertsIncidentPreference,
    AlertsMutingRuleConditionGroupOperator,
    AlertsMutingRuleConditionOperator,
    AlertsMutingRuleScheduleRepeat,
    AlertsMutingRuleStatus,
    AlertsNotificationChannelCreateErrorType,
    AlertsNotificationChannelDeleteErrorType,
    AlertsNotificationChannelsAddToPolicyErrorType,
    AlertsNotificationChannelsRemoveFromPolicyErrorType,
    AlertsNotificationChannelType,
    AlertsNotificationChannelUpdateErrorType,
    AlertsNrqlBaselineDirection,
    AlertsNrqlConditionPriority,
    AlertsNrqlConditionTermsOperator,
    AlertsNrqlConditionThresholdOccurrences,
    AlertsNrqlConditionType,
    AlertsNrqlSignalSeasonality,
    AlertsOpsGenieDataCenterRegion,
    AlertsSignalAggregationMethod,
    AlertsWebhookCustomPayloadType,
    ApiAccessIngestKeyErrorType,
    ApiAccessIngestKeyType,
    ApiAccessKeyType,
    ApiAccessUserKeyErrorType,
    BrowserAgentInstallType,
    ChangeTrackingCategoryType,
    ChangeTrackingDeploymentType,
    ChartFormatType,
    ChartImageType,
    CloudMetricCollectionMode,
    CollaborationExternalApplicationType,
    CollaborationStatus,
    DashboardAddWidgetsToPageErrorType,
    DashboardAlertSeverity,
    DashboardCreateErrorType,
    DashboardDeleteErrorType,
    DashboardDeleteResultStatus,
    DashboardEntityPermissions,
    DashboardLiveUrlAuthType,
    DashboardLiveUrlErrorType,
    DashboardLiveUrlType,
    DashboardPermissions,
    DashboardUndeleteErrorType,
    DashboardUpdateErrorType,
    DashboardUpdatePageErrorType,
    DashboardUpdateWidgetsInPageErrorType,
    DashboardVariableReplacementStrategy,
    DashboardVariableType,
    DataDictionaryTextFormat,
    DataManagementCategory,
    DataManagementType,
    DataManagementUnit,
    DataSourceGapsGapTypeIdentifier,
    DistributedTracingSpanAnomalyType,
    DistributedTracingSpanClientType,
    DistributedTracingSpanProcessBoundary,
    EdgeComplianceTypeCode,
    EdgeCreateSpanAttributeRuleResponseErrorType,
    EdgeCreateTraceObserverResponseErrorType,
    EdgeDataSourceStatusType,
    EdgeDeleteSpanAttributeRuleResponseErrorType,
    EdgeDeleteTraceObserverResponseErrorType,
    EdgeEndpointStatus,
    EdgeEndpointType,
    EdgeProviderRegion,
    EdgeSpanAttributeKeyOperator,
    EdgeSpanAttributeValueOperator,
    EdgeTraceFilterAction,
    EdgeTraceObserverStatus,
    EdgeUpdateTraceObserverResponseErrorType,
    EmbeddedChartType,
    EntityAlertSeverity,
    EntityCollectionType,
    EntityDeleteErrorType,
    EntityGoldenEventObjectId,
    EntityGoldenGoldenMetricsErrorType,
    EntityGoldenMetricUnit,
    EntityManagementAiToolParameterType,
    EntityManagementAssignmentType,
    EntityManagementCategory,
    EntityManagementCategoryScopeType,
    EntityManagementCommunicationMode,
    EntityManagementCommunicationStatus,
    EntityManagementConsumptionMetric,
    EntityManagementDirection,
    EntityManagementEncodingName,
    EntityManagementEncodingType,
    EntityManagementEntityScope,
    EntityManagementExecutionStatus,
    EntityManagementExternalOwnerType,
    EntityManagementFleetDeploymentPhase,
    EntityManagementHostingPlatform,
    EntityManagementIncidentStatus,
    EntityManagementInstallationSource,
    EntityManagementInstallationStatus,
    EntityManagementIssueType,
    EntityManagementJiraIssueType,
    EntityManagementKeyType,
    EntityManagementLicenseName,
    EntityManagementManagedEntityType,
    EntityManagementMessageType,
    EntityManagementOverlapPolicy,
    EntityManagementPriority,
    EntityManagementRegion,
    EntityManagementSigningAlgorithm,
    EntityManagementStatusCode,
    EntityManagementStatusPageAnnouncementCategory,
    EntityManagementStatusPageAnnouncementState,
    EntityManagementSyncConfigurationMode,
    EntityManagementSyncGroupRuleConditionType,
    EntityManagementTeamExternalIntegrationType,
    EntityManagementTextSplitterType,
    EntityManagementThresholdScope,
    EntityRelationshipEdgeType,
    EntityRelationshipType,
    EntityRelationshipUserDefinedCreateOrReplaceErrorType,
    EntityRelationshipUserDefinedDeleteErrorType,
    EntitySearchCountsFacet,
    EntitySearchSortCriteria,
    EntityType,
    ErrorsInboxAssignErrorGroupErrorType,
    ErrorsInboxErrorGroupState,
    ErrorsInboxIssueType,
    ErrorsInboxUpdateErrorGroupStateErrorType,
    EventsToMetricsErrorReason,
    FleetControlEntityScope,
    FleetControlFleetDeploymentPhase,
    FleetControlManagedEntityType,
    HistoricalDataExportStatus,
    IncidentIntelligenceEnvironmentConsentAccountsResult,
    IncidentIntelligenceEnvironmentCreateEnvironmentResult,
    IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason,
    IncidentIntelligenceEnvironmentDeleteEnvironmentResult,
    IncidentIntelligenceEnvironmentDissentAccountsResult,
    IncidentIntelligenceEnvironmentEnvironmentKind,
    IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
    InstallationInstallStateType,
    InstallationRecipeStatusType,
    KnowledgePublishStatus,
    KnowledgeSearchSortOption,
    KnowledgeSearchSources,
    LogConfigurationsCreateDataPartitionRuleErrorType,
    LogConfigurationsDataPartitionRuleMatchingOperator,
    LogConfigurationsDataPartitionRuleMutationErrorType,
    LogConfigurationsDataPartitionRuleRetentionPolicyType,
    LogConfigurationsLiveArchiveRetentionPolicyType,
    LogConfigurationsObfuscationMethod,
    LogConfigurationsParsingRuleMutationErrorType,
    MetricNormalizationRuleAction,
    MetricNormalizationRuleErrorType,
    MultiTenantAuthorizationGranteeTypeEnum,
    MultiTenantAuthorizationGrantScopeEnum,
    MultiTenantAuthorizationPermissionCategoryEnum,
    MultiTenantIdentityEmailVerificationState,
    NerdpackMutationErrorType,
    NerdpackMutationResult,
    NerdpackRemovedTagResponseType,
    NerdpackSubscriptionAccessType,
    NerdpackSubscriptionModel,
    NerdStorageVaultErrorType,
    NerdStorageVaultResultStatus,
    Nr1CatalogAlertConditionType,
    Nr1CatalogInstallerType,
    Nr1CatalogInstallPlanDestination,
    Nr1CatalogInstallPlanDirectiveMode,
    Nr1CatalogInstallPlanOperatingSystem,
    Nr1CatalogInstallPlanTargetType,
    Nr1CatalogMutationResult,
    Nr1CatalogNerdpackVisibility,
    Nr1CatalogQuickstartAlertConditionType,
    Nr1CatalogRenderFormat,
    Nr1CatalogSearchComponentType,
    Nr1CatalogSearchResultType,
    Nr1CatalogSearchSortOption,
    Nr1CatalogSubmitMetadataErrorType,
    Nr1CatalogSupportedEntityTypesMode,
    Nr1CatalogSupportLevel,
    NrqlCancelQueryMutationRequestStatus,
    NrqlDropRulesAction,
    NrqlDropRulesErrorReason,
    OrganizationAuthenticationTypeEnum,
    OrganizationBillingStructure,
    OrganizationMembersOrganizationMemberType,
    OrganizationOrganizationCreateJobResultStatusEnum,
    OrganizationProvisioningTypeEnum,
    OrganizationUpdateErrorType,
    PixieLinkPixieProjectErrorType,
    PixieRecordPixieTosAcceptanceErrorType,
    ReferenceEntityCreateRepositoryErrorType,
    RegionScope,
    SecretsManagementScopeType,
    ServiceLevelEventsQuerySelectFunction,
    ServiceLevelObjectiveRollingTimeWindowUnit,
    SessionsClientType,
    SessionsPrincipalType,
    StreamingExportPayloadCompression,
    StreamingExportStatus,
    SyntheticMonitorStatus,
    SyntheticMonitorType,
    SyntheticsBrowser,
    SyntheticsDevice,
    SyntheticsDeviceOrientation,
    SyntheticsDeviceType,
    SyntheticsMonitorCreateErrorType,
    SyntheticsMonitorDowntimeDayOfMonthOrdinal,
    SyntheticsMonitorDowntimeWeekDays,
    SyntheticsMonitorPeriod,
    SyntheticsMonitorStatus,
    SyntheticsMonitorUpdateErrorType,
    SyntheticsPrivateLocationMutationErrorType,
    SyntheticsStepType,
    TaggingMutationErrorType,
    WhatsNewContentType,
    WorkloadGroupRemainingEntitiesRuleBy,
    WorkloadResultingGroupType,
    WorkloadRollupStrategy,
    WorkloadRuleThresholdType,
    WorkloadStatusSource,
    WorkloadStatusValue,
)
from newrelic_sb_sdk.graphql.input_objects import (
    AccountManagementCreateInput,
    AccountManagementUpdateInput,
    AgentApplicationBrowserSettingsInput,
    AgentApplicationSegmentsBrowserSegmentAllowListInput,
    AgentApplicationSegmentsSegmentAllowListFilters,
    AgentApplicationSettingsUpdateInput,
    AgentEnvironmentFilter,
    AiDecisionsRuleBlueprint,
    AiDecisionsSearchBlueprint,
    AiDecisionsSimulationBlueprint,
    AiDecisionsSuggestionBlueprint,
    AiIssuesFilterIncidents,
    AiIssuesFilterIncidentsEvents,
    AiIssuesFilterIssues,
    AiIssuesFilterIssuesEvents,
    AiIssuesGracePeriodConfigurationInput,
    AiNotificationsChannelFilter,
    AiNotificationsChannelInput,
    AiNotificationsChannelSorter,
    AiNotificationsChannelUpdate,
    AiNotificationsConstraint,
    AiNotificationsDestinationFilter,
    AiNotificationsDestinationInput,
    AiNotificationsDestinationSorter,
    AiNotificationsDestinationUpdate,
    AiNotificationsDynamicVariable,
    AiNotificationsSuggestionFilter,
    AiNotificationsVariableFilter,
    AiNotificationsVariableSorter,
    AiWorkflowsCreateWorkflowInput,
    AiWorkflowsFilters,
    AiWorkflowsTestWorkflowInput,
    AiWorkflowsUpdateWorkflowInput,
    AlertsAsNrqlConditionsSearchCriteriaInput,
    AlertsMutingRuleInput,
    AlertsMutingRulesFilterCriteriaInput,
    AlertsMutingRuleUpdateInput,
    AlertsNrqlConditionBaselineInput,
    AlertsNrqlConditionsSearchCriteriaInput,
    AlertsNrqlConditionStaticInput,
    AlertsNrqlConditionUpdateBaselineInput,
    AlertsNrqlConditionUpdateStaticInput,
    AlertsPoliciesSearchCriteriaInput,
    AlertsPolicyInput,
    AlertsPolicyUpdateInput,
    ApiAccessCreateInput,
    ApiAccessDeleteInput,
    ApiAccessKeySearchQuery,
    ApiAccessUpdateInput,
    AuthorizationManagementGrantAccess,
    AuthorizationManagementRevokeAccess,
    ChangeTrackingChangeTrackingSearchFilter,
    ChangeTrackingCreateEventInput,
    ChangeTrackingDataHandlingRules,
    ChangeTrackingDeploymentInput,
    ChangeTrackingSearchFilter,
    CloudAwsGovCloudMigrateToAssumeroleInput,
    CloudDisableIntegrationsInput,
    CloudIntegrationsInput,
    CloudLinkCloudAccountsInput,
    CloudOciInstrumentedPayloadInput,
    CloudOciLogGroupInstrumentedPayloadInput,
    CloudRenameAccountsInput,
    CloudUnlinkAccountsInput,
    CloudUpdateCloudAccountsInput,
    CollaborationAssistantConfigInput,
    CustomRoleContainerInput,
    DashboardInput,
    DashboardLiveUrlAuthCreationInput,
    DashboardLiveUrlAuthUpdateInput,
    DashboardLiveUrlCreationPoliciesFilterInput,
    DashboardLiveUrlOptionsInput,
    DashboardLiveUrlsFilterInput,
    DashboardSnapshotUrlInput,
    DashboardUpdateLiveUrlCreationPoliciesInput,
    DashboardUpdatePageInput,
    DashboardUpdateWidgetInput,
    DashboardWidgetInput,
    DataManagementAccountFeatureSettingInput,
    DataManagementAccountLimitInput,
    DataManagementRuleInput,
    DataSourceGapsGapsQuery,
    DomainTypeInput,
    EdgeCreateTraceFilterRulesInput,
    EdgeCreateTraceObserverInput,
    EdgeDeleteTraceFilterRulesInput,
    EdgeDeleteTraceObserverInput,
    EdgeUpdateTraceObserverInput,
    EntityGoldenContextInput,
    EntityGoldenMetricInput,
    EntityGoldenNrqlTimeWindowInput,
    EntityGoldenTagInput,
    EntityManagementAiAgentEntityCreateInput,
    EntityManagementAiAgentEntityUpdateInput,
    EntityManagementAiToolEntityCreateInput,
    EntityManagementAiToolEntityUpdateInput,
    EntityManagementCollectionElementsFilter,
    EntityManagementCollectionEntityCreateInput,
    EntityManagementCollectionEntityUpdateInput,
    EntityManagementConfluenceIntegrationCreateInput,
    EntityManagementConfluenceIntegrationUpdateInput,
    EntityManagementConfluenceRagSettingsEntityCreateInput,
    EntityManagementConfluenceRagSettingsEntityUpdateInput,
    EntityManagementGenericEntityUpdateInput,
    EntityManagementGitRepositoryEntityCreateInput,
    EntityManagementGitRepositoryEntityUpdateInput,
    EntityManagementInboxIssueCategoryEntityCreateInput,
    EntityManagementInboxIssueCategoryEntityUpdateInput,
    EntityManagementPerformanceInboxSettingEntityCreateInput,
    EntityManagementPerformanceInboxSettingEntityUpdateInput,
    EntityManagementPipelineCloudRuleEntityCreateInput,
    EntityManagementPipelineCloudRuleEntityUpdateInput,
    EntityManagementRagToolEntityCreateInput,
    EntityManagementRagToolEntityUpdateInput,
    EntityManagementRelationshipCreateInput,
    EntityManagementRelationshipUpdateInput,
    EntityManagementScorecardEntityCreateInput,
    EntityManagementScorecardEntityUpdateInput,
    EntityManagementScorecardRuleEntityCreateInput,
    EntityManagementScorecardRuleEntityUpdateInput,
    EntityManagementTeamEntityCreateInput,
    EntityManagementTeamEntityUpdateInput,
    EntityManagementTeamsOrganizationSettingsEntityUpdateInput,
    EntityRelationshipEdgeFilter,
    EntitySearchOptions,
    EntitySearchQueryBuilder,
    ErrorsInboxAssignErrorGroupInput,
    ErrorsInboxErrorEventInput,
    ErrorsInboxErrorGroupSearchFilterInput,
    ErrorsInboxErrorGroupSortOrderInput,
    ErrorsInboxResourceFilterInput,
    ErrorsInboxStateVersionInput,
    EventsToMetricsCreateRuleInput,
    EventsToMetricsDeleteRuleInput,
    EventsToMetricsUpdateRuleInput,
    FleetControlFleetDeploymentCreateInput,
    FleetControlFleetDeploymentPolicyInput,
    FleetControlFleetDeploymentUpdateInput,
    FleetControlFleetEntityCreateInput,
    FleetControlFleetMemberRingInput,
    FleetControlFleetMembersFilterInput,
    FleetControlUpdateFleetEntityInput,
    InstallationInstallStatusInput,
    InstallationRecipeStatus,
    LogConfigurationsCreateDataPartitionRuleInput,
    LogConfigurationsCreateObfuscationExpressionInput,
    LogConfigurationsCreateObfuscationRuleInput,
    LogConfigurationsParsingRuleConfiguration,
    LogConfigurationsPipelineConfigurationInput,
    LogConfigurationsUpdateDataPartitionRuleInput,
    LogConfigurationsUpdateObfuscationExpressionInput,
    LogConfigurationsUpdateObfuscationRuleInput,
    MachineLearningAddDocumentIndexConfiguration,
    MachineLearningFilterBy,
    MachineLearningIndexOptions,
    MetricNormalizationCreateRuleInput,
    MetricNormalizationEditRuleInput,
    MultiTenantAuthorizationGrantFilterInputExpression,
    MultiTenantAuthorizationGrantSortInput,
    MultiTenantAuthorizationPermissionFilter,
    MultiTenantAuthorizationRoleFilterInputExpression,
    MultiTenantAuthorizationRoleSortInput,
    MultiTenantIdentityGroupFilterInput,
    MultiTenantIdentityGroupSortInput,
    MultiTenantIdentityGroupUserFilterInput,
    MultiTenantIdentityUserFilterInput,
    MultiTenantIdentityUserSortInput,
    NerdpackAllowListInput,
    NerdpackCreationInput,
    NerdpackDataFilter,
    NerdpackOverrideVersionRules,
    NerdpackRemoveVersionTagInput,
    NerdpackSubscribeAccountsInput,
    NerdpackTagVersionInput,
    NerdpackUnsubscribeAccountsInput,
    NerdpackVersionFilter,
    NerdStorageScopeInput,
    NerdStorageVaultScope,
    NerdStorageVaultWriteSecretInput,
    Nr1CatalogSearchFilter,
    Nr1CatalogSubmitMetadataInput,
    NrqlDropRulesCreateDropRuleInput,
    NrqlQueryOptions,
    OrganizationAccountFilterInput,
    OrganizationAccountShareFilterInput,
    OrganizationAccountShareSortInput,
    OrganizationAccountSortInput,
    OrganizationAuthenticationDomainFilterInput,
    OrganizationAuthenticationDomainSortInput,
    OrganizationCreateOrganizationInput,
    OrganizationCreateSharedAccountInput,
    OrganizationCustomerContractFilterInput,
    OrganizationCustomerOrganizationFilterInput,
    OrganizationMembersOrganizationMemberFilter,
    OrganizationNewManagedAccountInput,
    OrganizationOrganizationCreateAsyncResultFilterInput,
    OrganizationOrganizationGroupFilterInput,
    OrganizationProvisioningProductInput,
    OrganizationRevokeSharedAccountInput,
    OrganizationSharedAccountInput,
    OrganizationUpdateInput,
    OrganizationUpdateSharedAccountInput,
    QueryHistoryQueryHistoryOptionsInput,
    ReferenceEntityCreateRepositoryInput,
    SecretsManagementScope,
    SecretsManagementSecretsCollectionFilter,
    SecretsManagementSecretsCollectionSort,
    SecretsManagementTagInput,
    ServiceLevelIndicatorCreateInput,
    ServiceLevelIndicatorUpdateInput,
    SessionsSessionFilter,
    SortCriterionWithDirection,
    StreamingExportAwsInput,
    StreamingExportAzureInput,
    StreamingExportGcpInput,
    StreamingExportRuleInput,
    SyntheticsCreateBrokenLinksMonitorInput,
    SyntheticsCreateCertCheckMonitorInput,
    SyntheticsCreateScriptApiMonitorInput,
    SyntheticsCreateScriptBrowserMonitorInput,
    SyntheticsCreateSimpleBrowserMonitorInput,
    SyntheticsCreateSimpleMonitorInput,
    SyntheticsCreateStepMonitorInput,
    SyntheticsDateWindowEndConfig,
    SyntheticsMonitorDowntimeDailyConfig,
    SyntheticsMonitorDowntimeMonthlyConfig,
    SyntheticsMonitorDowntimeMonthlyFrequency,
    SyntheticsMonitorDowntimeOnceConfig,
    SyntheticsMonitorDowntimeWeeklyConfig,
    SyntheticsUpdateBrokenLinksMonitorInput,
    SyntheticsUpdateCertCheckMonitorInput,
    SyntheticsUpdateScriptApiMonitorInput,
    SyntheticsUpdateScriptBrowserMonitorInput,
    SyntheticsUpdateSimpleBrowserMonitorInput,
    SyntheticsUpdateSimpleMonitorInput,
    SyntheticsUpdateStepMonitorInput,
    SystemIdentityGroupFilter,
    SystemIdentityIdentityFilter,
    SystemIdentityIdentitySort,
    TaggingTagInput,
    TaggingTagValueInput,
    TimeWindowInput,
    UserManagementCreateGroup,
    UserManagementCreateUser,
    UserManagementDeleteGroup,
    UserManagementDeleteUser,
    UserManagementGroupFilterInput,
    UserManagementGroupSortInput,
    UserManagementUpdateGroup,
    UserManagementUpdateUser,
    UserManagementUserFilterInput,
    UserManagementUsersGroupsInput,
    UsersUserSearchQuery,
    WhatsNewContentSearchQuery,
    WorkloadCreateInput,
    WorkloadDuplicateInput,
    WorkloadUpdateInput,
)
from newrelic_sb_sdk.graphql.scalars import (
    ID,
    AgentApplicationSettingsCustomJsConfiguration,
    AgentApplicationSettingsErrorCollectorHttpStatus,
    AgentApplicationSettingsRawJsConfiguration,
    AiDecisionsRuleExpression,
    AttributeMap,
    Boolean,
    ChangeTrackingRawCustomAttributesMap,
    CollaborationRawContextMetadata,
    DashboardWidgetRawConfiguration,
    Date,
    DateTime,
    DistributedTracingSpanAttributes,
    Duration,
    EntityAlertViolationInt,
    EntityGuid,
    EpochMilliseconds,
    EpochSeconds,
    Float,
    InstallationRawMetadata,
    Int,
    LogConfigurationsLogDataPartitionName,
    Milliseconds,
    Minutes,
    NaiveDateTime,
    NerdpackTagName,
    NerdStorageDocument,
    Nr1CatalogRawNerdletState,
    NrdbRawResults,
    NrdbResult,
    Nrql,
    Seconds,
    SecureValue,
    SemVer,
    String,
)

from . import nerdgraph

__docformat__ = "markdown"


class AiIssuesIIncident(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_ids",
        "closed_at",
        "created_at",
        "description",
        "entity_guids",
        "entity_names",
        "entity_types",
        "incident_id",
        "priority",
        "state",
        "timestamp",
        "title",
        "updated_at",
    )
    account = sgqlc.types.Field("AccountReference", graphql_name="account")

    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accountIds"
    )

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    description = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="description",
    )

    entity_guids = sgqlc.types.Field(EntityGuid, graphql_name="entityGuids")

    entity_names = sgqlc.types.Field(String, graphql_name="entityNames")

    entity_types = sgqlc.types.Field(String, graphql_name="entityTypes")

    incident_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="incidentId")

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIncidentState), graphql_name="state"
    )

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiWorkflowsResponseError(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )


class AlertableEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("alert_severity", "alert_violations", "recent_alert_violations")
    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )

    alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="alertViolations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
            )
        ),
    )

    recent_alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="recentAlertViolations",
        args=sgqlc.types.ArgDict(
            (("count", sgqlc.types.Arg(Int, graphql_name="count", default=10)),)
        ),
    )
    """Arguments:

    * `count` (`Int`) (default: `10`)
    """


class AlertableEntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("alert_severity",)
    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )


class AlertsAsNrqlCondition(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "enabled",
        "entity",
        "entity_guid",
        "expiration",
        "id",
        "name",
        "nrql",
        "policy_id",
        "runbook_url",
        "signal",
        "source_product",
        "terms",
        "title_template",
        "type",
        "updated_at",
        "updated_by",
        "violation_time_limit_seconds",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    entity = sgqlc.types.Field("EntityOutline", graphql_name="entity")

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    expiration = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionExpiration"), graphql_name="expiration"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionQuery"), graphql_name="nrql"
    )

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")

    signal = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionSignal"), graphql_name="signal"
    )

    source_product = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsAsNrqlSourceProduct), graphql_name="sourceProduct"
    )

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNrqlTerms"))
        ),
        graphql_name="terms",
    )

    title_template = sgqlc.types.Field(String, graphql_name="titleTemplate")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )


class AlertsNotificationChannel(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("associated_policies", "id", "name", "type")
    associated_policies = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNotificationChannelPoliciesResultSet"),
        graphql_name="associatedPolicies",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelType), graphql_name="type"
    )


class AlertsNrqlCondition(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "enabled",
        "entity",
        "entity_guid",
        "expiration",
        "id",
        "name",
        "nrql",
        "policy_id",
        "runbook_url",
        "signal",
        "terms",
        "title_template",
        "type",
        "updated_at",
        "updated_by",
        "violation_time_limit_seconds",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    entity = sgqlc.types.Field("EntityOutline", graphql_name="entity")

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    expiration = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionExpiration"), graphql_name="expiration"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nrql = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionQuery"), graphql_name="nrql"
    )

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")

    runbook_url = sgqlc.types.Field(String, graphql_name="runbookUrl")

    signal = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsNrqlConditionSignal"), graphql_name="signal"
    )

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNrqlTerms"))
        ),
        graphql_name="terms",
    )

    title_template = sgqlc.types.Field(String, graphql_name="titleTemplate")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")

    violation_time_limit_seconds = sgqlc.types.Field(
        Seconds, graphql_name="violationTimeLimitSeconds"
    )


class AlertsNrqlTerms(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "disable_health_status_reporting",
        "operator",
        "priority",
        "threshold",
        "threshold_duration",
        "threshold_occurrences",
    )
    disable_health_status_reporting = sgqlc.types.Field(
        Boolean, graphql_name="disableHealthStatusReporting"
    )

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionTermsOperator), graphql_name="operator"
    )

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionPriority), graphql_name="priority"
    )

    threshold = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="threshold")

    threshold_duration = sgqlc.types.Field(
        sgqlc.types.non_null(Seconds), graphql_name="thresholdDuration"
    )

    threshold_occurrences = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlConditionThresholdOccurrences),
        graphql_name="thresholdOccurrences",
    )


class ApiAccessKey(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "id",
        "key",
        "name",
        "notes",
        "obfuscated_key",
        "type",
    )
    created_at = sgqlc.types.Field(EpochSeconds, graphql_name="createdAt")

    id = sgqlc.types.Field(ID, graphql_name="id")

    key = sgqlc.types.Field(String, graphql_name="key")

    name = sgqlc.types.Field(String, graphql_name="name")

    notes = sgqlc.types.Field(String, graphql_name="notes")

    obfuscated_key = sgqlc.types.Field(String, graphql_name="obfuscatedKey")

    type = sgqlc.types.Field(ApiAccessKeyType, graphql_name="type")


class ApiAccessKeyError(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(ApiAccessKeyType, graphql_name="type")


class ApmBrowserApplicationEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("apm_browser_summary",)
    apm_browser_summary = sgqlc.types.Field(
        "ApmBrowserApplicationSummaryData", graphql_name="apmBrowserSummary"
    )


class ApmBrowserApplicationEntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("apm_browser_summary",)
    apm_browser_summary = sgqlc.types.Field(
        "ApmBrowserApplicationSummaryData", graphql_name="apmBrowserSummary"
    )


class ChangeTrackingEvent(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "category",
        "category_and_type",
        "change_tracking_id",
        "custom_attributes",
        "description",
        "entity",
        "group_id",
        "short_description",
        "timestamp",
        "type",
        "user",
    )
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="category")

    category_and_type = sgqlc.types.Field(
        sgqlc.types.non_null(ChangeTrackingCategoryType), graphql_name="categoryAndType"
    )

    change_tracking_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="changeTrackingId"
    )

    custom_attributes = sgqlc.types.Field(
        ChangeTrackingRawCustomAttributesMap, graphql_name="customAttributes"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    entity = sgqlc.types.Field("EntityOutline", graphql_name="entity")

    group_id = sgqlc.types.Field(String, graphql_name="groupId")

    short_description = sgqlc.types.Field(String, graphql_name="shortDescription")

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")

    user = sgqlc.types.Field(String, graphql_name="user")


class CloudIntegration(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "id",
        "linked_account",
        "name",
        "nr_account_id",
        "service",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )

    id = sgqlc.types.Field(Int, graphql_name="id")

    linked_account = sgqlc.types.Field(
        "CloudLinkedAccount", graphql_name="linkedAccount"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    service = sgqlc.types.Field("CloudService", graphql_name="service")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )


class CloudProvider(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "icon",
        "id",
        "name",
        "service",
        "services",
        "slug",
        "template_params",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )

    icon = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="icon")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    service = sgqlc.types.Field(
        "CloudService",
        graphql_name="service",
        args=sgqlc.types.ArgDict(
            (
                (
                    "slug",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="slug", default=None
                    ),
                ),
            )
        ),
    )

    services = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null("CloudService"))),
        graphql_name="services",
    )

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")

    template_params = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudTemplateParam"))
        ),
        graphql_name="templateParams",
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )


class CollectionEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "guid")
    collection = sgqlc.types.Field(
        "EntityCollection",
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")


class EdgeEndpointDetail(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("host", "port")
    host = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="host")

    port = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="port")


class EntityManagementActor(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class EntityManagementEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "name", "scope", "tags", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementMetadata"), graphql_name="metadata"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScopedReference"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("EntityManagementTag")),
        graphql_name="tags",
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EntityRelationshipEdge(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "source", "target", "type")
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    source = sgqlc.types.Field(
        sgqlc.types.non_null("EntityRelationshipVertex"), graphql_name="source"
    )

    target = sgqlc.types.Field(
        sgqlc.types.non_null("EntityRelationshipVertex"), graphql_name="target"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipEdgeType), graphql_name="type"
    )


class ErrorsInboxErrorGroupBase(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "assignment",
        "entity_guid",
        "events_query",
        "first_seen_at",
        "id",
        "is_custom",
        "issue_type",
        "last_seen_at",
        "message",
        "name",
        "occurrences",
        "regressed_at",
        "resources",
        "source",
        "state",
        "url",
    )
    assignment = sgqlc.types.Field("ErrorsInboxAssignment", graphql_name="assignment")

    entity_guid = sgqlc.types.Field(EntityGuid, graphql_name="entityGuid")

    events_query = sgqlc.types.Field(Nrql, graphql_name="eventsQuery")

    first_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="firstSeenAt")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    is_custom = sgqlc.types.Field(Boolean, graphql_name="isCustom")

    issue_type = sgqlc.types.Field(ErrorsInboxIssueType, graphql_name="issueType")

    last_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastSeenAt")

    message = sgqlc.types.Field(String, graphql_name="message")

    name = sgqlc.types.Field(String, graphql_name="name")

    occurrences = sgqlc.types.Field(
        "ErrorsInboxOccurrences", graphql_name="occurrences"
    )

    regressed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="regressedAt")

    resources = sgqlc.types.Field(
        sgqlc.types.non_null("ErrorsInboxResourcesResponse"),
        graphql_name="resources",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        ErrorsInboxResourceFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    source = sgqlc.types.Field(String, graphql_name="source")

    state = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="state")

    url = sgqlc.types.Field(String, graphql_name="url")


class ErrorsInboxResource(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("id", "url")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class ErrorsInboxResponseError(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )


class InfrastructureIntegrationEntity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("integration_type_code",)
    integration_type_code = sgqlc.types.Field(
        String, graphql_name="integrationTypeCode"
    )


class InfrastructureIntegrationEntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("integration_type_code",)
    integration_type_code = sgqlc.types.Field(
        String, graphql_name="integrationTypeCode"
    )


class Nr1CatalogInstallPlanDirective(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("mode",)
    mode = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDirectiveMode), graphql_name="mode"
    )


class Nr1CatalogInstaller(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallerType), graphql_name="type"
    )


class Nr1CatalogNerdpackItem(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        "Nr1CatalogNerdpackItemMetadata", graphql_name="metadata"
    )


class Nr1CatalogNerdpackItemMetadata(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name", "previews")
    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogPreview"))
        ),
        graphql_name="previews",
    )


class Nr1CatalogPreview(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogQuickstartComponent(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("metadata",)
    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogQuickstartComponentMetadata"),
        graphql_name="metadata",
    )


class Nr1CatalogQuickstartComponentMetadata(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name")
    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")


class Nr1CatalogSupportedEntityTypes(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("mode",)
    mode = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportedEntityTypesMode), graphql_name="mode"
    )


class SuggestedNrqlQuery(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("nrql", "title")
    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")


class WhatsNewContent(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "content_type",
        "context",
        "id",
        "publish_date",
        "summary",
        "title",
    )
    content_type = sgqlc.types.Field(
        sgqlc.types.non_null(WhatsNewContentType), graphql_name="contentType"
    )

    context = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="context"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    publish_date = sgqlc.types.Field(EpochMilliseconds, graphql_name="publishDate")

    summary = sgqlc.types.Field(String, graphql_name="summary")

    title = sgqlc.types.Field(String, graphql_name="title")


class WorkloadStatusResult(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = ("source", "value")
    source = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusSource), graphql_name="source"
    )

    value = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="value"
    )


class Entity(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "alert_severity",
        "alert_violations",
        "deployment_search",
        "domain",
        "entity_type",
        "first_indexed_at",
        "golden_metrics",
        "golden_tags",
        "guid",
        "indexed_at",
        "last_reporting_change_at",
        "name",
        "nerd_storage",
        "nrdb_query",
        "permalink",
        "recent_alert_violations",
        "related_entities",
        "reporting",
        "service_level",
        "tags",
        "tags_with_metadata",
        "tracing_summary",
        "type",
    )
    account = sgqlc.types.Field("AccountOutline", graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )

    alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="alertViolations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
            )
        ),
    )

    deployment_search = sgqlc.types.Field(
        "ChangeTrackingDeploymentSearchResult",
        graphql_name="deploymentSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        ChangeTrackingSearchFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    domain = sgqlc.types.Field(String, graphql_name="domain")

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")

    first_indexed_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="firstIndexedAt"
    )

    golden_metrics = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenMetrics",
        graphql_name="goldenMetrics",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        EntityGoldenNrqlTimeWindowInput,
                        graphql_name="timeWindow",
                        default=None,
                    ),
                ),
            )
        ),
    )

    golden_tags = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenTags",
        graphql_name="goldenTags",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
            )
        ),
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    indexed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="indexedAt")

    last_reporting_change_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastReportingChangeAt"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    nerd_storage = sgqlc.types.Field(
        "NerdStorageEntityScope", graphql_name="nerdStorage"
    )

    nrdb_query = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrdbQuery",
        args=sgqlc.types.ArgDict(
            (
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "nrql",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="nrql", default=None
                    ),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )

    permalink = sgqlc.types.Field(String, graphql_name="permalink")

    recent_alert_violations = sgqlc.types.Field(
        sgqlc.types.list_of("EntityAlertViolation"),
        graphql_name="recentAlertViolations",
        args=sgqlc.types.ArgDict(
            (("count", sgqlc.types.Arg(Int, graphql_name="count", default=None)),)
        ),
    )

    related_entities = sgqlc.types.Field(
        "EntityRelationshipRelatedEntitiesResult",
        graphql_name="relatedEntities",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        EntityRelationshipEdgeFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                ("limit", sgqlc.types.Arg(Int, graphql_name="limit", default=None)),
            )
        ),
    )

    reporting = sgqlc.types.Field(Boolean, graphql_name="reporting")

    service_level = sgqlc.types.Field(
        "ServiceLevelDefinition", graphql_name="serviceLevel"
    )

    tags = sgqlc.types.Field(sgqlc.types.list_of("EntityTag"), graphql_name="tags")

    tags_with_metadata = sgqlc.types.Field(
        sgqlc.types.list_of("EntityTagWithMetadata"), graphql_name="tagsWithMetadata"
    )

    tracing_summary = sgqlc.types.Field(
        "DistributedTracingEntityTracingSummary",
        graphql_name="tracingSummary",
        args=sgqlc.types.ArgDict(
            (
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    type = sgqlc.types.Field(String, graphql_name="type")


class EntityOutline(sgqlc.types.Interface):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "alert_severity",
        "domain",
        "entity_type",
        "first_indexed_at",
        "golden_metrics",
        "golden_tags",
        "guid",
        "indexed_at",
        "last_reporting_change_at",
        "name",
        "permalink",
        "reporting",
        "service_level",
        "tags",
        "type",
    )
    account = sgqlc.types.Field("AccountOutline", graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )

    domain = sgqlc.types.Field(String, graphql_name="domain")

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")

    first_indexed_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="firstIndexedAt"
    )

    golden_metrics = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenMetrics",
        graphql_name="goldenMetrics",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        EntityGoldenNrqlTimeWindowInput,
                        graphql_name="timeWindow",
                        default=None,
                    ),
                ),
            )
        ),
    )

    golden_tags = sgqlc.types.Field(
        "EntityGoldenContextScopedGoldenTags",
        graphql_name="goldenTags",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        EntityGoldenContextInput, graphql_name="context", default=None
                    ),
                ),
            )
        ),
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    indexed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="indexedAt")

    last_reporting_change_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastReportingChangeAt"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    permalink = sgqlc.types.Field(String, graphql_name="permalink")

    reporting = sgqlc.types.Field(Boolean, graphql_name="reporting")

    service_level = sgqlc.types.Field(
        "ServiceLevelDefinition", graphql_name="serviceLevel"
    )

    tags = sgqlc.types.Field(sgqlc.types.list_of("EntityTag"), graphql_name="tags")

    type = sgqlc.types.Field(String, graphql_name="type")


class Account(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_environment",
        "ai_decisions",
        "ai_issues",
        "ai_notifications",
        "ai_topology",
        "ai_workflows",
        "alerts",
        "cloud",
        "data_management",
        "edge",
        "events_to_metrics",
        "historical_data_export",
        "id",
        "incident_intelligence_environment",
        "installation",
        "log_configurations",
        "machine_learning",
        "metric_normalization",
        "name",
        "nerd_storage",
        "nrql",
        "nrql_drop_rules",
        "nrql_query_progress",
        "pixie",
        "streaming_export",
        "synthetics",
        "workload",
    )
    agent_environment = sgqlc.types.Field(
        "AgentEnvironmentAccountStitchedFields", graphql_name="agentEnvironment"
    )

    ai_decisions = sgqlc.types.Field(
        "AiDecisionsAccountStitchedFields", graphql_name="aiDecisions"
    )

    ai_issues = sgqlc.types.Field(
        "AiIssuesAccountStitchedFields", graphql_name="aiIssues"
    )

    ai_notifications = sgqlc.types.Field(
        "AiNotificationsAccountStitchedFields", graphql_name="aiNotifications"
    )

    ai_topology = sgqlc.types.Field(
        "AiTopologyAccountStitchedFields", graphql_name="aiTopology"
    )

    ai_workflows = sgqlc.types.Field(
        "AiWorkflowsAccountStitchedFields", graphql_name="aiWorkflows"
    )

    alerts = sgqlc.types.Field("AlertsAccountStitchedFields", graphql_name="alerts")

    cloud = sgqlc.types.Field("CloudAccountFields", graphql_name="cloud")

    data_management = sgqlc.types.Field(
        "DataManagementAccountStitchedFields", graphql_name="dataManagement"
    )

    edge = sgqlc.types.Field("EdgeAccountStitchedFields", graphql_name="edge")

    events_to_metrics = sgqlc.types.Field(
        "EventsToMetricsAccountStitchedFields", graphql_name="eventsToMetrics"
    )

    historical_data_export = sgqlc.types.Field(
        "HistoricalDataExportAccountStitchedFields", graphql_name="historicalDataExport"
    )

    id = sgqlc.types.Field(Int, graphql_name="id")

    incident_intelligence_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentAccountStitchedFields",
        graphql_name="incidentIntelligenceEnvironment",
    )

    installation = sgqlc.types.Field(
        "InstallationAccountStitchedFields", graphql_name="installation"
    )

    log_configurations = sgqlc.types.Field(
        "LogConfigurationsAccountStitchedFields", graphql_name="logConfigurations"
    )

    machine_learning = sgqlc.types.Field(
        "MachineLearningAccountStitchedFields", graphql_name="machineLearning"
    )

    metric_normalization = sgqlc.types.Field(
        "MetricNormalizationAccountStitchedFields", graphql_name="metricNormalization"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    nerd_storage = sgqlc.types.Field(
        "NerdStorageAccountScope", graphql_name="nerdStorage"
    )

    nrql = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrql",
        args=sgqlc.types.ArgDict(
            (
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="query", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )

    nrql_drop_rules = sgqlc.types.Field(
        "NrqlDropRulesAccountStitchedFields", graphql_name="nrqlDropRules"
    )

    nrql_query_progress = sgqlc.types.Field(
        "NrdbResultContainer",
        graphql_name="nrqlQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )

    pixie = sgqlc.types.Field("PixieAccountStitchedFields", graphql_name="pixie")

    streaming_export = sgqlc.types.Field(
        "StreamingExportAccountStitchedFields", graphql_name="streamingExport"
    )

    synthetics = sgqlc.types.Field(
        "SyntheticsAccountStitchedFields", graphql_name="synthetics"
    )

    workload = sgqlc.types.Field(
        "WorkloadAccountStitchedFields", graphql_name="workload"
    )


class AccountManagementCreateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("managed_account",)
    managed_account = sgqlc.types.Field(
        "AccountManagementManagedAccount", graphql_name="managedAccount"
    )


class AccountManagementManagedAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "is_canceled", "name", "region_code")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    is_canceled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isCanceled"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    region_code = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="regionCode"
    )


class AccountManagementOrganizationStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("managed_accounts",)
    managed_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AccountManagementManagedAccount)),
        graphql_name="managedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "is_canceled",
                    sgqlc.types.Arg(Boolean, graphql_name="isCanceled", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `is_canceled` (`Boolean`)
    """


class AccountManagementUpdateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("managed_account",)
    managed_account = sgqlc.types.Field(
        AccountManagementManagedAccount, graphql_name="managedAccount"
    )


class AccountOutline(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "reporting_event_types")
    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    reporting_event_types = sgqlc.types.Field(
        sgqlc.types.list_of(String),
        graphql_name="reportingEventTypes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String), graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `filter` (`[String]`)
    * `time_window` (`TimeWindowInput`)
    """


class AccountReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class Actor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "accounts",
        "api_access",
        "change_tracking",
        "cloud",
        "collaboration",
        "dashboard",
        "data_source_gaps",
        "distributed_tracing",
        "entities",
        "entity",
        "entity_management",
        "entity_search",
        "errors_inbox",
        "fleet_control",
        "incident_intelligence_environment",
        "machine_learning",
        "mobile_push_notification",
        "nerd_storage",
        "nerd_storage_vault",
        "nerdpacks",
        "nr1_catalog",
        "nrql",
        "nrql_query_progress",
        "organization",
        "pixie",
        "query_history",
        "sessions",
        "user",
        "users",
    )
    account = sgqlc.types.Field(
        Account,
        graphql_name="account",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(AccountOutline),
        graphql_name="accounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scope",
                    sgqlc.types.Arg(
                        RegionScope, graphql_name="scope", default="IN_REGION"
                    ),
                ),
            )
        ),
    )

    api_access = sgqlc.types.Field(
        "ApiAccessActorStitchedFields", graphql_name="apiAccess"
    )

    change_tracking = sgqlc.types.Field(
        "ChangeTrackingActorStitchedFields", graphql_name="changeTracking"
    )

    cloud = sgqlc.types.Field("CloudActorFields", graphql_name="cloud")

    collaboration = sgqlc.types.Field(
        "CollaborationActorStitchedFields", graphql_name="collaboration"
    )

    dashboard = sgqlc.types.Field(
        "DashboardActorStitchedFields", graphql_name="dashboard"
    )

    data_source_gaps = sgqlc.types.Field(
        "DataSourceGapsActorStitchedFields", graphql_name="dataSourceGaps"
    )

    distributed_tracing = sgqlc.types.Field(
        "DistributedTracingActorStitchedFields", graphql_name="distributedTracing"
    )

    entities = sgqlc.types.Field(
        sgqlc.types.list_of(Entity),
        graphql_name="entities",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(EntityGuid)),
                        graphql_name="guids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guids` (`[EntityGuid]!`)
    """

    entity = sgqlc.types.Field(
        Entity,
        graphql_name="entity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management = sgqlc.types.Field(
        "EntityManagementActorStitchedFields", graphql_name="entityManagement"
    )

    entity_search = sgqlc.types.Field(
        "EntitySearch",
        graphql_name="entitySearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "options",
                    sgqlc.types.Arg(
                        EntitySearchOptions, graphql_name="options", default=None
                    ),
                ),
                ("query", sgqlc.types.Arg(String, graphql_name="query", default=None)),
                (
                    "query_builder",
                    sgqlc.types.Arg(
                        EntitySearchQueryBuilder,
                        graphql_name="queryBuilder",
                        default=None,
                    ),
                ),
                (
                    "sort_by",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntitySearchSortCriteria),
                        graphql_name="sortBy",
                        default=("NAME",),
                    ),
                ),
                (
                    "sort_by_with_direction",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(SortCriterionWithDirection),
                        graphql_name="sortByWithDirection",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `options` (`EntitySearchOptions`)
    * `query` (`String`)
    * `query_builder` (`EntitySearchQueryBuilder`)
    * `sort_by` (`[EntitySearchSortCriteria]`) (default: `[NAME]`)
    * `sort_by_with_direction` (`[SortCriterionWithDirection]`)
    """

    errors_inbox = sgqlc.types.Field(
        "ErrorsInboxActorStitchedFields", graphql_name="errorsInbox"
    )

    fleet_control = sgqlc.types.Field(
        "FleetControlActorStitchedFields", graphql_name="fleetControl"
    )

    incident_intelligence_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentActorStitchedFields",
        graphql_name="incidentIntelligenceEnvironment",
    )

    machine_learning = sgqlc.types.Field(
        "MachineLearningActorStitchedFields", graphql_name="machineLearning"
    )

    mobile_push_notification = sgqlc.types.Field(
        "MobilePushNotificationActorStitchedFields",
        graphql_name="mobilePushNotification",
    )

    nerd_storage = sgqlc.types.Field(
        "NerdStorageActorScope", graphql_name="nerdStorage"
    )

    nerd_storage_vault = sgqlc.types.Field(
        "NerdStorageVaultActorStitchedFields", graphql_name="nerdStorageVault"
    )

    nerdpacks = sgqlc.types.Field("NerdpackNerdpacks", graphql_name="nerdpacks")

    nr1_catalog = sgqlc.types.Field(
        "Nr1CatalogActorStitchedFields", graphql_name="nr1Catalog"
    )

    nrql = sgqlc.types.Field(
        "CrossAccountNrdbResultContainer",
        graphql_name="nrql",
        args=sgqlc.types.ArgDict(
            (
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
                (
                    "async_",
                    sgqlc.types.Arg(Boolean, graphql_name="async", default=False),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        NrqlQueryOptions, graphql_name="options", default=None
                    ),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nrql), graphql_name="query", default=None
                    ),
                ),
                (
                    "timeout",
                    sgqlc.types.Arg(Seconds, graphql_name="timeout", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `accounts` (`[Int!]!`)
    * `async_` (`Boolean`) (default: `false`)
    * `options` (`NrqlQueryOptions`)
    * `query` (`Nrql!`)
    * `timeout` (`Seconds`)
    """

    nrql_query_progress = sgqlc.types.Field(
        "CrossAccountNrdbResultContainer",
        graphql_name="nrqlQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `accounts` (`[Int!]!`)
    * `query_id` (`ID!`)
    """

    organization = sgqlc.types.Field("Organization", graphql_name="organization")

    pixie = sgqlc.types.Field("PixieActorStitchedFields", graphql_name="pixie")

    query_history = sgqlc.types.Field(
        "QueryHistoryActorStitchedFields", graphql_name="queryHistory"
    )

    sessions = sgqlc.types.Field(
        "SessionsSessionCollection",
        graphql_name="sessions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        SessionsSessionFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    user = sgqlc.types.Field("User", graphql_name="user")

    users = sgqlc.types.Field("UsersActorStitchedFields", graphql_name="users")


class AgentApplicationAddAppToEntityPlatformResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid", "message", "name", "success")
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    message = sgqlc.types.Field(String, graphql_name="message")

    name = sgqlc.types.Field(String, graphql_name="name")

    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")


class AgentApplicationApmBrowserSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cookies_enabled", "distributed_tracing_enabled", "loader_type")
    cookies_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="cookiesEnabled"
    )

    distributed_tracing_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="distributedTracingEnabled"
    )

    loader_type = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationBrowserLoader), graphql_name="loaderType"
    )


class AgentApplicationBrowserSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "cookies_enabled",
        "distributed_tracing_enabled",
        "loader_script",
        "loader_type",
    )
    cookies_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="cookiesEnabled"
    )

    distributed_tracing_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="distributedTracingEnabled"
    )

    loader_script = sgqlc.types.Field(String, graphql_name="loaderScript")

    loader_type = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationBrowserLoader), graphql_name="loaderType"
    )


class AgentApplicationCreateBrowserResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid", "name", "settings")
    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    settings = sgqlc.types.Field(
        AgentApplicationBrowserSettings, graphql_name="settings"
    )


class AgentApplicationCreateMobileResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "application_token",
        "entity_outline",
        "guid",
        "name",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    application_token = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="applicationToken"
    )

    entity_outline = sgqlc.types.Field(EntityOutline, graphql_name="entityOutline")

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AgentApplicationDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("success",)
    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")


class AgentApplicationEnableBrowserResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "settings")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    settings = sgqlc.types.Field(
        AgentApplicationApmBrowserSettings, graphql_name="settings"
    )


class AgentApplicationSegmentsBrowserSegmentAllowList(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("segments",)
    segments = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="segments")


class AgentApplicationSegmentsBrowserSegmentAllowListResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity_guid", "segments")
    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    segments = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="segments")


class AgentApplicationSettingsApmBase(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "alias",
        "apm_config",
        "application_logging",
        "capture_memcache_keys",
        "error_collector",
        "jfr",
        "original_name",
        "slow_sql",
        "thread_profiler",
        "tracer_type",
        "transaction_tracer",
    )
    alias = sgqlc.types.Field(String, graphql_name="alias")

    apm_config = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsApmConfig"),
        graphql_name="apmConfig",
    )

    application_logging = sgqlc.types.Field(
        "AgentApplicationSettingsApplicationLogging", graphql_name="applicationLogging"
    )

    capture_memcache_keys = sgqlc.types.Field(
        Boolean, graphql_name="captureMemcacheKeys"
    )

    error_collector = sgqlc.types.Field(
        "AgentApplicationSettingsErrorCollector", graphql_name="errorCollector"
    )

    jfr = sgqlc.types.Field("AgentApplicationSettingsJfr", graphql_name="jfr")

    original_name = sgqlc.types.Field(String, graphql_name="originalName")

    slow_sql = sgqlc.types.Field(
        "AgentApplicationSettingsSlowSql", graphql_name="slowSql"
    )

    thread_profiler = sgqlc.types.Field(
        "AgentApplicationSettingsThreadProfiler", graphql_name="threadProfiler"
    )

    tracer_type = sgqlc.types.Field(
        AgentApplicationSettingsTracer, graphql_name="tracerType"
    )

    transaction_tracer = sgqlc.types.Field(
        "AgentApplicationSettingsTransactionTracer", graphql_name="transactionTracer"
    )


class AgentApplicationSettingsApmConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "use_server_side_config")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")

    use_server_side_config = sgqlc.types.Field(
        Boolean, graphql_name="useServerSideConfig"
    )


class AgentApplicationSettingsApplicationExitInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")


class AgentApplicationSettingsApplicationLogging(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "forwarding", "local_decorating", "metrics")
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    forwarding = sgqlc.types.Field(
        "AgentApplicationSettingsForwarding", graphql_name="forwarding"
    )

    local_decorating = sgqlc.types.Field(
        "AgentApplicationSettingsLocalDecorating", graphql_name="localDecorating"
    )

    metrics = sgqlc.types.Field(
        "AgentApplicationSettingsMetrics", graphql_name="metrics"
    )


class AgentApplicationSettingsBrowserAjax(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deny_list",)
    deny_list = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="denyList"
    )


class AgentApplicationSettingsBrowserBase(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "browser_config",
        "browser_monitoring",
        "browser_performance",
        "session_replay",
        "session_trace",
    )
    browser_config = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsBrowserConfig"),
        graphql_name="browserConfig",
    )

    browser_monitoring = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsBrowserMonitoring"),
        graphql_name="browserMonitoring",
    )

    browser_performance = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsBrowserPerformance"),
        graphql_name="browserPerformance",
    )

    session_replay = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsSessionReplay"),
        graphql_name="sessionReplay",
    )

    session_trace = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsSessionTrace"),
        graphql_name="sessionTrace",
    )


class AgentApplicationSettingsBrowserConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")


class AgentApplicationSettingsBrowserDistributedTracing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "allowed_origins",
        "cors_enabled",
        "cors_use_newrelic_header",
        "cors_use_tracecontext_headers",
        "enabled",
        "exclude_newrelic_header",
    )
    allowed_origins = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="allowedOrigins"
    )

    cors_enabled = sgqlc.types.Field(Boolean, graphql_name="corsEnabled")

    cors_use_newrelic_header = sgqlc.types.Field(
        Boolean, graphql_name="corsUseNewrelicHeader"
    )

    cors_use_tracecontext_headers = sgqlc.types.Field(
        Boolean, graphql_name="corsUseTracecontextHeaders"
    )

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    exclude_newrelic_header = sgqlc.types.Field(
        Boolean, graphql_name="excludeNewrelicHeader"
    )


class AgentApplicationSettingsBrowserMonitoring(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "ajax",
        "distributed_tracing",
        "loader",
        "pinned_version",
        "privacy",
    )
    ajax = sgqlc.types.Field(AgentApplicationSettingsBrowserAjax, graphql_name="ajax")

    distributed_tracing = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationSettingsBrowserDistributedTracing),
        graphql_name="distributedTracing",
    )

    loader = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationSettingsBrowserLoader),
        graphql_name="loader",
    )

    pinned_version = sgqlc.types.Field(String, graphql_name="pinnedVersion")

    privacy = sgqlc.types.Field(
        sgqlc.types.non_null("AgentApplicationSettingsBrowserPrivacy"),
        graphql_name="privacy",
    )


class AgentApplicationSettingsBrowserPerformance(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("capture_detail", "capture_marks", "capture_measures")
    capture_detail = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="captureDetail"
    )

    capture_marks = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="captureMarks"
    )

    capture_measures = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="captureMeasures"
    )


class AgentApplicationSettingsBrowserPrivacy(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cookies_enabled",)
    cookies_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="cookiesEnabled"
    )


class AgentApplicationSettingsBrowserProperties(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("js_config", "js_config_script", "js_loader_script")
    js_config = sgqlc.types.Field(
        AgentApplicationSettingsRawJsConfiguration, graphql_name="jsConfig"
    )

    js_config_script = sgqlc.types.Field(String, graphql_name="jsConfigScript")

    js_loader_script = sgqlc.types.Field(String, graphql_name="jsLoaderScript")


class AgentApplicationSettingsErrorCollector(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "enabled",
        "expected_error_classes",
        "expected_error_codes",
        "ignored_error_classes",
        "ignored_error_codes",
    )
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    expected_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="expectedErrorClasses",
    )

    expected_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="expectedErrorCodes",
    )

    ignored_error_classes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="ignoredErrorClasses",
    )

    ignored_error_codes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsErrorCollectorHttpStatus)
        ),
        graphql_name="ignoredErrorCodes",
    )


class AgentApplicationSettingsForwarding(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "max_samples_stored")
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    max_samples_stored = sgqlc.types.Field(Int, graphql_name="maxSamplesStored")


class AgentApplicationSettingsIgnoredStatusCodeRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("hosts", "status_codes")
    hosts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="hosts"
    )

    status_codes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="statusCodes"
    )


class AgentApplicationSettingsJfr(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")


class AgentApplicationSettingsLocalDecorating(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")


class AgentApplicationSettingsMaskInputOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "color",
        "date",
        "datetime_local",
        "email",
        "month",
        "number",
        "range",
        "search",
        "select",
        "tel",
        "text",
        "text_area",
        "time",
        "url",
        "week",
    )
    color = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="color")

    date = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="date")

    datetime_local = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="datetimeLocal"
    )

    email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="email")

    month = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="month")

    number = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="number")

    range = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="range")

    search = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="search")

    select = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="select")

    tel = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="tel")

    text = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="text")

    text_area = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="textArea"
    )

    time = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="time")

    url = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="url")

    week = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="week")


class AgentApplicationSettingsMetrics(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")


class AgentApplicationSettingsMobileBase(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "application_exit_info",
        "mobile_session_replay",
        "network_settings",
        "use_crash_reports",
    )
    application_exit_info = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationSettingsApplicationExitInfo),
        graphql_name="applicationExitInfo",
    )

    mobile_session_replay = sgqlc.types.Field(
        "AgentApplicationSettingsMobileSessionReplay",
        graphql_name="mobileSessionReplay",
    )

    network_settings = sgqlc.types.Field(
        "AgentApplicationSettingsMobileNetworkSettings", graphql_name="networkSettings"
    )

    use_crash_reports = sgqlc.types.Field(Boolean, graphql_name="useCrashReports")


class AgentApplicationSettingsMobileNetworkSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "aliases",
        "filter_mode",
        "hide_list",
        "ignored_status_code_rules",
        "show_list",
    )
    aliases = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentApplicationSettingsNetworkAlias")
        ),
        graphql_name="aliases",
    )

    filter_mode = sgqlc.types.Field(
        AgentApplicationSettingsNetworkFilterMode, graphql_name="filterMode"
    )

    hide_list = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="hideList"
    )

    ignored_status_code_rules = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentApplicationSettingsIgnoredStatusCodeRule)
        ),
        graphql_name="ignoredStatusCodeRules",
    )

    show_list = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="showList"
    )


class AgentApplicationSettingsMobileProperties(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("application_token",)
    application_token = sgqlc.types.Field(SecureValue, graphql_name="applicationToken")


class AgentApplicationSettingsMobileSessionReplay(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "custom_masking_rules",
        "enabled",
        "error_sampling_rate",
        "mask_all_images",
        "mask_all_user_touches",
        "mask_application_text",
        "mask_user_input_text",
        "mode",
        "sampling_rate",
    )
    custom_masking_rules = sgqlc.types.Field(
        AgentApplicationSettingsCustomJsConfiguration, graphql_name="customMaskingRules"
    )

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    error_sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="errorSamplingRate"
    )

    mask_all_images = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="maskAllImages"
    )

    mask_all_user_touches = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="maskAllUserTouches"
    )

    mask_application_text = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="maskApplicationText"
    )

    mask_user_input_text = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="maskUserInputText"
    )

    mode = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationSettingsMobileSessionReplayMode),
        graphql_name="mode",
    )

    sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="samplingRate"
    )


class AgentApplicationSettingsNetworkAlias(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("alias", "hosts")
    alias = sgqlc.types.Field(String, graphql_name="alias")

    hosts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="hosts"
    )


class AgentApplicationSettingsSessionReplay(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "auto_start",
        "block_selector",
        "collect_fonts",
        "enabled",
        "error_sampling_rate",
        "fix_stylesheets",
        "inline_images",
        "inline_stylesheet",
        "mask_all_inputs",
        "mask_input_options",
        "mask_text_selector",
        "preload",
        "sampling_rate",
    )
    auto_start = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="autoStart"
    )

    block_selector = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="blockSelector"
    )

    collect_fonts = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="collectFonts"
    )

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    error_sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="errorSamplingRate"
    )

    fix_stylesheets = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="fixStylesheets"
    )

    inline_images = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="inlineImages"
    )

    inline_stylesheet = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="inlineStylesheet"
    )

    mask_all_inputs = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="maskAllInputs"
    )

    mask_input_options = sgqlc.types.Field(
        sgqlc.types.non_null(AgentApplicationSettingsMaskInputOptions),
        graphql_name="maskInputOptions",
    )

    mask_text_selector = sgqlc.types.Field(String, graphql_name="maskTextSelector")

    preload = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="preload")

    sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="samplingRate"
    )


class AgentApplicationSettingsSessionTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "error_sampling_rate", "mode", "sampling_rate")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    error_sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="errorSamplingRate"
    )

    mode = sgqlc.types.Field(
        AgentApplicationSettingsSessionTraceMode, graphql_name="mode"
    )

    sampling_rate = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="samplingRate"
    )


class AgentApplicationSettingsSlowSql(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")


class AgentApplicationSettingsThreadProfiler(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled",)
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")


class AgentApplicationSettingsTransactionTracer(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "capture_memcache_keys",
        "enabled",
        "explain_enabled",
        "explain_threshold_type",
        "explain_threshold_value",
        "log_sql",
        "record_sql",
        "stack_trace_threshold",
        "transaction_threshold_type",
        "transaction_threshold_value",
    )
    capture_memcache_keys = sgqlc.types.Field(
        Boolean, graphql_name="captureMemcacheKeys"
    )

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    explain_enabled = sgqlc.types.Field(Boolean, graphql_name="explainEnabled")

    explain_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum, graphql_name="explainThresholdType"
    )

    explain_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="explainThresholdValue"
    )

    log_sql = sgqlc.types.Field(Boolean, graphql_name="logSql")

    record_sql = sgqlc.types.Field(
        AgentApplicationSettingsRecordSqlEnum, graphql_name="recordSql"
    )

    stack_trace_threshold = sgqlc.types.Field(
        Seconds, graphql_name="stackTraceThreshold"
    )

    transaction_threshold_type = sgqlc.types.Field(
        AgentApplicationSettingsThresholdTypeEnum,
        graphql_name="transactionThresholdType",
    )

    transaction_threshold_value = sgqlc.types.Field(
        Seconds, graphql_name="transactionThresholdValue"
    )


class AgentApplicationSettingsUpdateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_class", "field")
    description = sgqlc.types.Field(String, graphql_name="description")

    error_class = sgqlc.types.Field(
        AgentApplicationSettingsUpdateErrorClass, graphql_name="errorClass"
    )

    field = sgqlc.types.Field(String, graphql_name="field")


class AgentApplicationSettingsUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "alias",
        "apm_settings",
        "application_logging",
        "browser_properties",
        "browser_settings",
        "errors",
        "guid",
        "mobile_settings",
    )
    alias = sgqlc.types.Field(String, graphql_name="alias")

    apm_settings = sgqlc.types.Field(
        AgentApplicationSettingsApmBase, graphql_name="apmSettings"
    )

    application_logging = sgqlc.types.Field(
        AgentApplicationSettingsApplicationLogging, graphql_name="applicationLogging"
    )

    browser_properties = sgqlc.types.Field(
        AgentApplicationSettingsBrowserProperties, graphql_name="browserProperties"
    )

    browser_settings = sgqlc.types.Field(
        AgentApplicationSettingsBrowserBase, graphql_name="browserSettings"
    )

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(AgentApplicationSettingsUpdateError), graphql_name="errors"
    )

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    mobile_settings = sgqlc.types.Field(
        AgentApplicationSettingsMobileBase, graphql_name="mobileSettings"
    )


class AgentEnvironmentAccountApplicationLoadedModules(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("application_guids", "details", "loaded_modules")
    application_guids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="applicationGuids",
    )

    details = sgqlc.types.Field(
        "AgentEnvironmentApplicationInstanceDetails", graphql_name="details"
    )

    loaded_modules = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationLoadedModule")
        ),
        graphql_name="loadedModules",
    )


class AgentEnvironmentAccountApplicationLoadedModulesResults(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(AgentEnvironmentAccountApplicationLoadedModules)
        ),
        graphql_name="results",
    )


class AgentEnvironmentAccountEnvironmentAttributesResults(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationEnvironmentAttributes")
        ),
        graphql_name="results",
    )


class AgentEnvironmentAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("agent_settings_attributes", "environment_attributes", "modules")
    agent_settings_attributes = sgqlc.types.Field(
        AgentEnvironmentAccountEnvironmentAttributesResults,
        graphql_name="agentSettingsAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    environment_attributes = sgqlc.types.Field(
        AgentEnvironmentAccountEnvironmentAttributesResults,
        graphql_name="environmentAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    modules = sgqlc.types.Field(
        AgentEnvironmentAccountApplicationLoadedModulesResults,
        graphql_name="modules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`AgentEnvironmentFilter`)
    """


class AgentEnvironmentApplicationEnvironmentAttributes(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("application_guids", "attributes", "details")
    application_guids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="applicationGuids",
    )

    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="attributes",
    )

    details = sgqlc.types.Field(
        "AgentEnvironmentApplicationInstanceDetails", graphql_name="details"
    )


class AgentEnvironmentApplicationInstance(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_settings_attributes",
        "details",
        "environment_attributes",
        "modules",
    )
    agent_settings_attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="agentSettingsAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    details = sgqlc.types.Field(
        sgqlc.types.non_null("AgentEnvironmentApplicationInstanceDetails"),
        graphql_name="details",
    )

    environment_attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AgentEnvironmentAttribute")),
        graphql_name="environmentAttributes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )

    modules = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("AgentEnvironmentApplicationLoadedModule")
        ),
        graphql_name="modules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AgentEnvironmentFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `filter` (`AgentEnvironmentFilter`)
    """


class AgentEnvironmentApplicationInstanceDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "host",
        "host_display_name",
        "id",
        "instance_name",
        "language",
        "name",
    )
    host = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="host")

    host_display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="hostDisplayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    instance_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="instanceName"
    )

    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="language")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AgentEnvironmentApplicationInstancesResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("application_instances", "next_cursor")
    application_instances = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AgentEnvironmentApplicationInstance)),
        graphql_name="applicationInstances",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class AgentEnvironmentApplicationLoadedModule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "name", "version")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of("AgentEnvironmentLoadedModuleAttribute")
        ),
        graphql_name="attributes",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    version = sgqlc.types.Field(String, graphql_name="version")


class AgentEnvironmentAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attribute", "value")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AgentEnvironmentLoadedModuleAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AgentFeatures(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("min_version", "name")
    min_version = sgqlc.types.Field(String, graphql_name="minVersion")

    name = sgqlc.types.Field(String, graphql_name="name")


class AgentReleasesAgentRelease(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "bugs",
        "date",
        "download_link",
        "eol_date",
        "features",
        "security",
        "slug",
        "supported_operating_systems",
        "version",
    )
    bugs = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="bugs")

    date = sgqlc.types.Field(Date, graphql_name="date")

    download_link = sgqlc.types.Field(String, graphql_name="downloadLink")

    eol_date = sgqlc.types.Field(Date, graphql_name="eolDate")

    features = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="features")

    security = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="security")

    slug = sgqlc.types.Field(String, graphql_name="slug")

    supported_operating_systems = sgqlc.types.Field(
        sgqlc.types.list_of("AgentReleasesOperatingSystem"),
        graphql_name="supportedOperatingSystems",
    )

    version = sgqlc.types.Field(String, graphql_name="version")


class AgentReleasesOperatingSystem(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("os_name", "os_versions")
    os_name = sgqlc.types.Field(String, graphql_name="osName")

    os_versions = sgqlc.types.Field(
        sgqlc.types.list_of("AgentReleasesOsVersion"), graphql_name="osVersions"
    )


class AgentReleasesOsVersion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("architectures", "version_name")
    architectures = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="architectures"
    )

    version_name = sgqlc.types.Field(String, graphql_name="versionName")


class AiDecisionsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("decision", "decisions")
    decision = sgqlc.types.Field(
        "AiDecisionsDecision",
        graphql_name="decision",
        args=sgqlc.types.ArgDict(
            (
                (
                    "decision_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="decisionId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    decisions = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsDecisionListing"),
        graphql_name="decisions",
        args=sgqlc.types.ArgDict(
            (
                ("after", sgqlc.types.Arg(String, graphql_name="after", default=None)),
                (
                    "before",
                    sgqlc.types.Arg(String, graphql_name="before", default=None),
                ),
                (
                    "decision_states",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiDecisionsDecisionState)
                        ),
                        graphql_name="decisionStates",
                        default=None,
                    ),
                ),
                (
                    "decision_types",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiDecisionsDecisionType)
                        ),
                        graphql_name="decisionTypes",
                        default=None,
                    ),
                ),
                (
                    "page_size",
                    sgqlc.types.Arg(Int, graphql_name="pageSize", default=None),
                ),
                (
                    "sort_method",
                    sgqlc.types.Arg(
                        AiDecisionsDecisionSortMethod,
                        graphql_name="sortMethod",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `after` (`String`)
    * `before` (`String`)
    * `decision_states` (`[AiDecisionsDecisionState!]`)
    * `decision_types` (`[AiDecisionsDecisionType!]`)
    * `page_size` (`Int`)
    * `sort_method` (`AiDecisionsDecisionSortMethod`)
    """


class AiDecisionsAnnotationEntry(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AiDecisionsApplicableIncidentSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "completed_at",
        "created_at",
        "error_message",
        "id",
        "incidents_scanned",
        "results",
        "updated_at",
    )
    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    error_message = sgqlc.types.Field(String, graphql_name="errorMessage")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    incidents_scanned = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsScanned"
    )

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiDecisionsSelectorExamples"))
        ),
        graphql_name="results",
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiDecisionsDecision(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "annotations",
        "correlation_window_length",
        "created_at",
        "creator",
        "decision_expression",
        "decision_type",
        "description",
        "id",
        "metadata",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "source",
        "state",
        "updated_at",
    )
    annotations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsAnnotationEntry))
        ),
        graphql_name="annotations",
    )

    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")

    decision_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression),
        graphql_name="decisionExpression",
    )

    decision_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsDecisionType), graphql_name="decisionType"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleMetadata"), graphql_name="metadata"
    )

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    override_configuration = sgqlc.types.Field(
        "AiDecisionsOverrideConfiguration", graphql_name="overrideConfiguration"
    )

    source = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleSource), graphql_name="source"
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsDecisionState), graphql_name="state"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiDecisionsDecisionListing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "decisions", "next_cursor", "prev_cursor")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    decisions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsDecision))
        ),
        graphql_name="decisions",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")


class AiDecisionsMergeFeedback(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "child_issue_id",
        "opinion",
        "parent_issue_id",
        "rule_id",
        "user_id",
    )
    child_issue_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="childIssueId"
    )

    opinion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOpinion), graphql_name="opinion"
    )

    parent_issue_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="parentIssueId"
    )

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")

    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="userId")


class AiDecisionsOperationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsResultType), graphql_name="result"
    )


class AiDecisionsOpinionEntry(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "opinion")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    opinion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOpinion), graphql_name="opinion"
    )


class AiDecisionsOverrideConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "priority", "title")
    description = sgqlc.types.Field(String, graphql_name="description")

    priority = sgqlc.types.Field(AiDecisionsIssuePriority, graphql_name="priority")

    title = sgqlc.types.Field(String, graphql_name="title")


class AiDecisionsRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "annotations",
        "correlation_window_length",
        "created_at",
        "creator",
        "description",
        "id",
        "metadata",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "rule_type",
        "source",
        "state",
        "updated_at",
    )
    annotations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsAnnotationEntry))
        ),
        graphql_name="annotations",
    )

    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")

    description = sgqlc.types.Field(String, graphql_name="description")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("AiDecisionsRuleMetadata"), graphql_name="metadata"
    )

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfiguration, graphql_name="overrideConfiguration"
    )

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression), graphql_name="ruleExpression"
    )

    rule_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleType), graphql_name="ruleType"
    )

    source = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleSource), graphql_name="source"
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleState), graphql_name="state"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiDecisionsRuleMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("merge_opinion_count",)
    merge_opinion_count = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsOpinionEntry))
        ),
        graphql_name="mergeOpinionCount",
    )


class AiDecisionsSelectorApplicability(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "select")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    select = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentSelect), graphql_name="select"
    )


class AiDecisionsSelectorExamples(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("incidents", "select")
    incidents = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))),
        graphql_name="incidents",
    )

    select = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsIncidentSelect), graphql_name="select"
    )


class AiDecisionsSimulation(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "candidate_incidents",
        "completed_at",
        "created_at",
        "error_message",
        "id",
        "incidents_applicable",
        "incidents_correlated",
        "incidents_ingested",
        "incidents_processed",
        "progress",
        "updated_at",
    )
    candidate_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID)))
            )
        ),
        graphql_name="candidateIncidents",
    )

    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    error_message = sgqlc.types.Field(String, graphql_name="errorMessage")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    incidents_applicable = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiDecisionsSelectorApplicability))
        ),
        graphql_name="incidentsApplicable",
    )

    incidents_correlated = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsCorrelated"
    )

    incidents_ingested = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsIngested"
    )

    incidents_processed = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="incidentsProcessed"
    )

    progress = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="progress")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiDecisionsSuggestion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "correlation_window_length",
        "created_at",
        "description",
        "hash",
        "id",
        "min_correlation_threshold",
        "name",
        "override_configuration",
        "rule_expression",
        "state",
        "suggester",
        "support",
    )
    correlation_window_length = sgqlc.types.Field(
        Milliseconds, graphql_name="correlationWindowLength"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hash")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    min_correlation_threshold = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="minCorrelationThreshold"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    override_configuration = sgqlc.types.Field(
        AiDecisionsOverrideConfiguration, graphql_name="overrideConfiguration"
    )

    rule_expression = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRuleExpression), graphql_name="ruleExpression"
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSuggestionState), graphql_name="state"
    )

    suggester = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="suggester"
    )

    support = sgqlc.types.Field(String, graphql_name="support")


class AiIssuesAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "config_by_environment",
        "incidents",
        "incidents_events",
        "issues",
        "issues_events",
    )
    config_by_environment = sgqlc.types.Field(
        "AiIssuesConfigurationByEnvironment", graphql_name="configByEnvironment"
    )

    incidents = sgqlc.types.Field(
        "AiIssuesIncidentData",
        graphql_name="incidents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIncidents, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    incidents_events = sgqlc.types.Field(
        "AiIssuesIncidentData",
        graphql_name="incidentsEvents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIncidentsEvents,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    issues = sgqlc.types.Field(
        "AiIssuesIssueData",
        graphql_name="issues",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIssues, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    issues_events = sgqlc.types.Field(
        "AiIssuesIssueData",
        graphql_name="issuesEvents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiIssuesFilterIssuesEvents, graphql_name="filter", default=None
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`AiIssuesFilterIssuesEvents`)
    * `time_window` (`TimeWindowInput`)
    """


class AiIssuesConfigurationByEnvironment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        "AiIssuesEnvironmentConfiguration", graphql_name="config"
    )


class AiIssuesConfigurationOverrideResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("config", "error")
    config = sgqlc.types.Field(
        "AiIssuesEnvironmentConfiguration", graphql_name="config"
    )

    error = sgqlc.types.Field(String, graphql_name="error")


class AiIssuesEnvironmentConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "flapping_interval",
        "grace_period",
        "inactive_period",
        "incident_timeout",
        "issue_ttl",
        "max_issue_size",
    )
    flapping_interval = sgqlc.types.Field(Seconds, graphql_name="flappingInterval")

    grace_period = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiIssuesGracePeriodConfig")),
        graphql_name="gracePeriod",
    )

    inactive_period = sgqlc.types.Field(Seconds, graphql_name="inactivePeriod")

    incident_timeout = sgqlc.types.Field(Seconds, graphql_name="incidentTimeout")

    issue_ttl = sgqlc.types.Field(Seconds, graphql_name="issueTtl")

    max_issue_size = sgqlc.types.Field(Int, graphql_name="maxIssueSize")


class AiIssuesGracePeriodConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("period", "priority")
    period = sgqlc.types.Field(sgqlc.types.non_null(Seconds), graphql_name="period")

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )


class AiIssuesIncidentData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("incidents", "next_cursor")
    incidents = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIIncident))
        ),
        graphql_name="incidents",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class AiIssuesIncidentUserActionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "error", "incident_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    error = sgqlc.types.Field(String, graphql_name="error")

    incident_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="incidentId")


class AiIssuesIssue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_ids",
        "acknowledged_at",
        "acknowledged_by",
        "activated_at",
        "closed_at",
        "closed_by",
        "condition_family_id",
        "condition_name",
        "condition_product",
        "correlation_rule_descriptions",
        "correlation_rule_ids",
        "correlation_rule_names",
        "created_at",
        "data_ml_modules",
        "deep_link_url",
        "description",
        "entity_guids",
        "entity_names",
        "entity_types",
        "event_type",
        "incident_ids",
        "investigated_at",
        "investigated_by",
        "is_correlated",
        "is_idle",
        "issue_id",
        "merge_reason",
        "muting_state",
        "origins",
        "parent_merge_id",
        "policy_ids",
        "policy_name",
        "priority",
        "sources",
        "state",
        "title",
        "total_incidents",
        "un_acknowledged_at",
        "un_acknowledged_by",
        "updated_at",
        "wildcard",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )

    acknowledged_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="acknowledgedAt"
    )

    acknowledged_by = sgqlc.types.Field(String, graphql_name="acknowledgedBy")

    activated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="activatedAt")

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")

    closed_by = sgqlc.types.Field(String, graphql_name="closedBy")

    condition_family_id = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="conditionFamilyId"
    )

    condition_name = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="conditionName"
    )

    condition_product = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="conditionProduct",
    )

    correlation_rule_descriptions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="correlationRuleDescriptions",
    )

    correlation_rule_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
        graphql_name="correlationRuleIds",
    )

    correlation_rule_names = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="correlationRuleNames",
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    data_ml_modules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiIssuesKeyValues")),
        graphql_name="dataMlModules",
    )

    deep_link_url = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="deepLinkUrl"
    )

    description = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="description",
    )

    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
        graphql_name="entityGuids",
    )

    entity_names = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityNames"
    )

    entity_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="entityTypes"
    )

    event_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="eventType"
    )

    incident_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="incidentIds"
    )

    investigated_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="investigatedAt"
    )

    investigated_by = sgqlc.types.Field(String, graphql_name="investigatedBy")

    is_correlated = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isCorrelated"
    )

    is_idle = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="isIdle")

    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")

    merge_reason = sgqlc.types.Field(String, graphql_name="mergeReason")

    muting_state = sgqlc.types.Field(
        AiIssuesIssueMutingState, graphql_name="mutingState"
    )

    origins = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="origins",
    )

    parent_merge_id = sgqlc.types.Field(String, graphql_name="parentMergeId")

    policy_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="policyIds"
    )

    policy_name = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="policyName"
    )

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesPriority), graphql_name="priority"
    )

    sources = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="sources",
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueState), graphql_name="state"
    )

    title = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="title",
    )

    total_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalIncidents"
    )

    un_acknowledged_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="unAcknowledgedAt"
    )

    un_acknowledged_by = sgqlc.types.Field(String, graphql_name="unAcknowledgedBy")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )

    wildcard = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="wildcard"
    )


class AiIssuesIssueData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("issues", "next_cursor")
    issues = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesIssue))),
        graphql_name="issues",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class AiIssuesIssueUserActionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "result")
    error = sgqlc.types.Field(String, graphql_name="error")

    result = sgqlc.types.Field("AiIssuesIssueUserActionResult", graphql_name="result")


class AiIssuesIssueUserActionResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "action", "issue_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    action = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserAction), graphql_name="action"
    )

    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")


class AiIssuesKeyValue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AiIssuesKeyValues(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="value",
    )


class AiNotificationsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "channel_schema",
        "channel_suggestions",
        "channels",
        "destination_suggestions",
        "destinations",
        "o_auth_url",
        "variables",
    )
    channel_schema = sgqlc.types.Field(
        "AiNotificationsChannelSchemaResult",
        graphql_name="channelSchema",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelType),
                        graphql_name="channelType",
                        default=None,
                    ),
                ),
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "product",
                    sgqlc.types.Arg(
                        AiNotificationsProduct, graphql_name="product", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `channel_type` (`AiNotificationsChannelType!`)
    * `constraints` (`[AiNotificationsConstraint!]`)
    * `destination_id` (`ID!`)
    * `product` (`AiNotificationsProduct`)
    """

    channel_suggestions = sgqlc.types.Field(
        "AiNotificationsSuggestionsResponse",
        graphql_name="channelSuggestions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelType),
                        graphql_name="channelType",
                        default=None,
                    ),
                ),
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiNotificationsSuggestionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `channel_type` (`AiNotificationsChannelType!`)
    * `constraints` (`[AiNotificationsConstraint!]`)
    * `cursor` (`String`)
    * `destination_id` (`ID!`)
    * `filter` (`AiNotificationsSuggestionFilter`)
    * `key` (`String!`)
    """

    channels = sgqlc.types.Field(
        "AiNotificationsChannelsResponse",
        graphql_name="channels",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsChannelFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsChannelSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    destination_suggestions = sgqlc.types.Field(
        "AiNotificationsSuggestionsResponse",
        graphql_name="destinationSuggestions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "constraints",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsConstraint)
                        ),
                        graphql_name="constraints",
                        default=None,
                    ),
                ),
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "destination_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationType),
                        graphql_name="destinationType",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        AiNotificationsSuggestionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `constraints` (`[AiNotificationsConstraint!]`)
    * `cursor` (`String`)
    * `destination_type` (`AiNotificationsDestinationType!`)
    * `filter` (`AiNotificationsSuggestionFilter`)
    * `key` (`String!`)
    """

    destinations = sgqlc.types.Field(
        "AiNotificationsDestinationsResponse",
        graphql_name="destinations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    o_auth_url = sgqlc.types.Field(
        "AiNotificationsOAuthUrlResponse",
        graphql_name="oAuthUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "redirect_url",
                    sgqlc.types.Arg(String, graphql_name="redirectUrl", default=None),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationType),
                        graphql_name="type",
                        default=None,
                    ),
                ),
            )
        ),
    )

    variables = sgqlc.types.Field(
        "AiNotificationsVariableResult",
        graphql_name="variables",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiNotificationsVariableFilter,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
                (
                    "sorter",
                    sgqlc.types.Arg(
                        AiNotificationsVariableSorter,
                        graphql_name="sorter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filters` (`AiNotificationsVariableFilter`)
    * `sorter` (`AiNotificationsVariableSorter`)
    """


class AiNotificationsBasicAuth(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("auth_type", "user")
    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )

    user = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="user")


class AiNotificationsChannel(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "active",
        "created_at",
        "destination_id",
        "id",
        "name",
        "product",
        "properties",
        "status",
        "type",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    destination_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="destinationId"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    product = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsProduct), graphql_name="product"
    )

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsProperty"))
        ),
        graphql_name="properties",
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelStatus), graphql_name="status"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")


class AiNotificationsChannelResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("channel", "error")
    channel = sgqlc.types.Field(AiNotificationsChannel, graphql_name="channel")

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")


class AiNotificationsChannelSchemaResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "result", "schema")
    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )

    schema = sgqlc.types.Field("AiNotificationsSchema", graphql_name="schema")


class AiNotificationsChannelTestResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("details", "error", "evidence", "result")
    details = sgqlc.types.Field(String, graphql_name="details")

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")

    evidence = sgqlc.types.Field(String, graphql_name="evidence")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )


class AiNotificationsChannelsResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "error", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsChannel))
        ),
        graphql_name="entities",
    )

    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AiNotificationsConstraintError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("dependencies", "name")
    dependencies = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="dependencies",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AiNotificationsConstraintsError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("constraints",)
    constraints = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsConstraintError))
        ),
        graphql_name="constraints",
    )


class AiNotificationsCustomHeader(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key",)
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")


class AiNotificationsCustomHeadersAuth(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("auth_type", "custom_headers")
    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )

    custom_headers = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsCustomHeader))
        ),
        graphql_name="customHeaders",
    )


class AiNotificationsDataValidationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("details", "fields")
    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="details")

    fields = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsFieldError"))
        ),
        graphql_name="fields",
    )


class AiNotificationsDeleteResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "ids")
    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")

    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )


class AiNotificationsDestination(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "active",
        "auth",
        "created_at",
        "guid",
        "id",
        "is_user_authenticated",
        "last_sent",
        "name",
        "properties",
        "secure_url",
        "status",
        "type",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")

    auth = sgqlc.types.Field("AiNotificationsAuth", graphql_name="auth")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    is_user_authenticated = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isUserAuthenticated"
    )

    last_sent = sgqlc.types.Field(DateTime, graphql_name="lastSent")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    properties = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsProperty"))
        ),
        graphql_name="properties",
    )

    secure_url = sgqlc.types.Field("AiNotificationsSecureUrl", graphql_name="secureUrl")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationStatus), graphql_name="status"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")


class AiNotificationsDestinationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("destination", "error")
    destination = sgqlc.types.Field(
        AiNotificationsDestination, graphql_name="destination"
    )

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")


class AiNotificationsDestinationTestResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("details", "error", "result")
    details = sgqlc.types.Field(String, graphql_name="details")

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )


class AiNotificationsDestinationsResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "error", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsDestination))
        ),
        graphql_name="entities",
    )

    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AiNotificationsFieldError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("field", "message")
    field = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="field")

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")


class AiNotificationsOAuth2Auth(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "access_token_url",
        "auth_type",
        "authorization_url",
        "client_id",
        "prefix",
        "refresh_interval",
        "refreshable",
        "scope",
    )
    access_token_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="accessTokenUrl"
    )

    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )

    authorization_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="authorizationUrl"
    )

    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="clientId")

    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prefix")

    refresh_interval = sgqlc.types.Field(Int, graphql_name="refreshInterval")

    refreshable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="refreshable"
    )

    scope = sgqlc.types.Field(String, graphql_name="scope")


class AiNotificationsOAuthUrlResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "transaction_id", "url")
    error = sgqlc.types.Field("AiNotificationsResponseError", graphql_name="error")

    transaction_id = sgqlc.types.Field(ID, graphql_name="transactionId")

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class AiNotificationsProperty(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_value", "key", "label", "value")
    display_value = sgqlc.types.Field(String, graphql_name="displayValue")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    label = sgqlc.types.Field(String, graphql_name="label")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AiNotificationsResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "details", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="details")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsErrorType), graphql_name="type"
    )


class AiNotificationsSchema(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("fields",)
    fields = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsSchemaField"))
        ),
        graphql_name="fields",
    )


class AiNotificationsSchemaField(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("component", "key", "label", "mandatory")
    component = sgqlc.types.Field(
        sgqlc.types.non_null("AiNotificationsUiComponent"), graphql_name="component"
    )

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="label")

    mandatory = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="mandatory"
    )


class AiNotificationsSecureUrl(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("prefix",)
    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prefix")


class AiNotificationsSelectComponentOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "creatable",
        "dependent_on",
        "filtered_by",
        "label",
        "multiple",
        "searchable",
        "suggestions",
    )
    creatable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="creatable"
    )

    dependent_on = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="dependentOn",
    )

    filtered_by = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="filteredBy",
    )

    label = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="label")

    multiple = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="multiple")

    searchable = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="searchable"
    )

    suggestions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiNotificationsSuggestion"))
        ),
        graphql_name="suggestions",
    )


class AiNotificationsSuggestion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_value", "icon", "value")
    display_value = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayValue"
    )

    icon = sgqlc.types.Field(String, graphql_name="icon")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AiNotificationsSuggestionError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AiNotificationsSuggestionsResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "error", "next_cursor", "result", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsSuggestion))
        ),
        graphql_name="entities",
    )

    error = sgqlc.types.Field("AiNotificationsError", graphql_name="error")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsResult), graphql_name="result"
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AiNotificationsTokenAuth(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("auth_type", "prefix")
    auth_type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsAuthType), graphql_name="authType"
    )

    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prefix")


class AiNotificationsUiComponent(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "allow_template_variables",
        "data_validation",
        "default_value",
        "select_options",
        "type",
        "visible_by_default",
    )
    allow_template_variables = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="allowTemplateVariables"
    )

    data_validation = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsUiComponentValidation),
        graphql_name="dataValidation",
    )

    default_value = sgqlc.types.Field(
        AiNotificationsSuggestion, graphql_name="defaultValue"
    )

    select_options = sgqlc.types.Field(
        AiNotificationsSelectComponentOptions, graphql_name="selectOptions"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsUiComponentType), graphql_name="type"
    )

    visible_by_default = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="visibleByDefault"
    )


class AiNotificationsVariable(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "active",
        "category",
        "created_at",
        "description",
        "example",
        "id",
        "key",
        "label",
        "name",
        "product",
        "type",
        "updated_at",
        "updated_by",
    )
    active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="active")

    category = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsVariableCategory), graphql_name="category"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    example = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="example")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    label = sgqlc.types.Field(String, graphql_name="label")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    product = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsProduct), graphql_name="product"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsVariableType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="updatedBy")


class AiNotificationsVariableResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiNotificationsVariable))
        ),
        graphql_name="entities",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AiTopologyAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AiTopologyCollectorOperationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyCollectorResultType), graphql_name="result"
    )


class AiTopologyDefiningAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class AiTopologyEdge(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "directed",
        "from_vertex_id",
        "from_vertex_name",
        "id",
        "to_vertex_id",
        "to_vertex_name",
        "updated_at",
    )
    directed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="directed")

    from_vertex_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="fromVertexId"
    )

    from_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="fromVertexName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    to_vertex_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="toVertexId"
    )

    to_vertex_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="toVertexName"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class AiTopologyEdgeListing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "cursor", "edges")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    cursor = sgqlc.types.Field(String, graphql_name="cursor")

    edges = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyEdge))),
        graphql_name="edges",
    )


class AiTopologyGraph(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("edges", "vertices")
    edges = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyEdge))),
        graphql_name="edges",
    )

    vertices = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiTopologyVertex"))
        ),
        graphql_name="vertices",
    )


class AiTopologyVertex(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "defining_attributes",
        "id",
        "name",
        "updated_at",
        "vertex_class",
    )
    defining_attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyDefiningAttribute))
        ),
        graphql_name="definingAttributes",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )

    vertex_class = sgqlc.types.Field(
        sgqlc.types.non_null(AiTopologyVertexClass), graphql_name="vertexClass"
    )


class AiTopologyVertexListing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "cursor", "vertices")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    cursor = sgqlc.types.Field(String, graphql_name="cursor")

    vertices = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiTopologyVertex))
        ),
        graphql_name="vertices",
    )


class AiWorkflowsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("workflows",)
    workflows = sgqlc.types.Field(
        "AiWorkflowsWorkflows",
        graphql_name="workflows",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filters",
                    sgqlc.types.Arg(
                        AiWorkflowsFilters, graphql_name="filters", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filters` (`AiWorkflowsFilters`)
    """


class AiWorkflowsCreateWorkflowResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "workflow")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsCreateResponseError"))
        ),
        graphql_name="errors",
    )

    workflow = sgqlc.types.Field("AiWorkflowsWorkflow", graphql_name="workflow")


class AiWorkflowsDeleteWorkflowResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsDeleteResponseError"))
        ),
        graphql_name="errors",
    )

    id = sgqlc.types.Field(ID, graphql_name="id")


class AiWorkflowsDestinationConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "channel_id",
        "name",
        "notification_triggers",
        "type",
        "update_original_message",
    )
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="channelId")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    notification_triggers = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsNotificationTrigger)),
        graphql_name="notificationTriggers",
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDestinationType), graphql_name="type"
    )

    update_original_message = sgqlc.types.Field(
        Boolean, graphql_name="updateOriginalMessage"
    )


class AiWorkflowsEnrichment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "configurations",
        "created_at",
        "id",
        "name",
        "type",
        "updated_at",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsConfiguration"))
        ),
        graphql_name="configurations",
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsEnrichmentType), graphql_name="type"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )


class AiWorkflowsFilter(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "id", "name", "predicates", "type")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    predicates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsPredicate"))
        ),
        graphql_name="predicates",
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilterType), graphql_name="type"
    )


class AiWorkflowsNrqlConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("query",)
    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")


class AiWorkflowsPredicate(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsOperator), graphql_name="operator"
    )

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="values",
    )


class AiWorkflowsTestNotificationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("channel_id", "evidence", "status")
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="channelId")

    evidence = sgqlc.types.Field(String, graphql_name="evidence")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestNotificationResponseStatus),
        graphql_name="status",
    )


class AiWorkflowsTestWorkflowResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_responses", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsTestResponseError")),
        graphql_name="errors",
    )

    notification_responses = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsTestNotificationResponse)),
        graphql_name="notificationResponses",
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestResponseStatus), graphql_name="status"
    )


class AiWorkflowsUpdateWorkflowResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "workflow")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AiWorkflowsUpdateResponseError"))
        ),
        graphql_name="errors",
    )

    workflow = sgqlc.types.Field("AiWorkflowsWorkflow", graphql_name="workflow")


class AiWorkflowsWorkflow(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "destination_configurations",
        "destinations_enabled",
        "enrichments",
        "enrichments_enabled",
        "guid",
        "id",
        "issues_filter",
        "last_run",
        "muting_rules_handling",
        "name",
        "updated_at",
        "workflow_enabled",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    destination_configurations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AiWorkflowsDestinationConfiguration)
            )
        ),
        graphql_name="destinationConfigurations",
    )

    destinations_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="destinationsEnabled"
    )

    enrichments = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsEnrichment))
        ),
        graphql_name="enrichments",
    )

    enrichments_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enrichmentsEnabled"
    )

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    issues_filter = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFilter), graphql_name="issuesFilter"
    )

    last_run = sgqlc.types.Field(DateTime, graphql_name="lastRun")

    muting_rules_handling = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsMutingRulesHandling),
        graphql_name="mutingRulesHandling",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    workflow_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="workflowEnabled"
    )


class AiWorkflowsWorkflows(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor", "total_count")
    entities = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AiWorkflowsWorkflow))
        ),
        graphql_name="entities",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "as_nrql_conditions_search",
        "cross_account_election",
        "cross_account_participants",
        "muting_rule",
        "muting_rules",
        "nrql_condition",
        "nrql_conditions_search",
        "policies_search",
        "policy",
    )
    as_nrql_conditions_search = sgqlc.types.Field(
        "AlertsAsNrqlConditionsSearchResultSet",
        graphql_name="asNrqlConditionsSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_criteria",
                    sgqlc.types.Arg(
                        AlertsAsNrqlConditionsSearchCriteriaInput,
                        graphql_name="searchCriteria",
                        default=None,
                    ),
                ),
            )
        ),
    )

    cross_account_election = sgqlc.types.Field(
        "AlertsCrossAccountElectionStatus", graphql_name="crossAccountElection"
    )

    cross_account_participants = sgqlc.types.Field(
        sgqlc.types.list_of("AlertsCrossAccountParticipant"),
        graphql_name="crossAccountParticipants",
    )

    muting_rule = sgqlc.types.Field(
        "AlertsMutingRule",
        graphql_name="mutingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    muting_rules = sgqlc.types.Field(
        sgqlc.types.list_of("AlertsMutingRule"),
        graphql_name="mutingRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        AlertsMutingRulesFilterCriteriaInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nrql_condition = sgqlc.types.Field(
        AlertsNrqlCondition,
        graphql_name="nrqlCondition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    nrql_conditions_search = sgqlc.types.Field(
        "AlertsNrqlConditionsSearchResultSet",
        graphql_name="nrqlConditionsSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_criteria",
                    sgqlc.types.Arg(
                        AlertsNrqlConditionsSearchCriteriaInput,
                        graphql_name="searchCriteria",
                        default=None,
                    ),
                ),
            )
        ),
    )

    policies_search = sgqlc.types.Field(
        "AlertsPoliciesSearchResultSet",
        graphql_name="policiesSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_criteria",
                    sgqlc.types.Arg(
                        AlertsPoliciesSearchCriteriaInput,
                        graphql_name="searchCriteria",
                        default=None,
                    ),
                ),
            )
        ),
    )

    policy = sgqlc.types.Field(
        "AlertsPolicy",
        graphql_name="policy",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `id` (`ID!`)
    """


class AlertsAsNrqlConditionsSearchResultSet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "nrql_conditions", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    nrql_conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsAsNrqlCondition))
        ),
        graphql_name="nrqlConditions",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsCampfireNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsConditionDeleteResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AlertsCrossAccountElectionStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("election_status",)
    election_status = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="electionStatus"
    )


class AlertsCrossAccountParticipant(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id",)
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")


class AlertsEmailNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("emails", "include_json")
    emails = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="emails",
    )

    include_json = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="includeJson"
    )


class AlertsHipChatNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsMutingRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "action_on_muting_rule_window_ended",
        "condition",
        "created_at",
        "created_by_user",
        "description",
        "enabled",
        "id",
        "muting_rule_lifecycle_event_published_at",
        "name",
        "schedule",
        "status",
        "updated_at",
        "updated_by_user",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    action_on_muting_rule_window_ended = sgqlc.types.Field(
        AlertsActionOnMutingRuleWindowEnded,
        graphql_name="actionOnMutingRuleWindowEnded",
    )

    condition = sgqlc.types.Field(
        sgqlc.types.non_null("AlertsMutingRuleConditionGroup"), graphql_name="condition"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by_user = sgqlc.types.Field("UserReference", graphql_name="createdByUser")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    muting_rule_lifecycle_event_published_at = sgqlc.types.Field(
        DateTime, graphql_name="mutingRuleLifecycleEventPublishedAt"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    schedule = sgqlc.types.Field("AlertsMutingRuleSchedule", graphql_name="schedule")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleStatus), graphql_name="status"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by_user = sgqlc.types.Field("UserReference", graphql_name="updatedByUser")


class AlertsMutingRuleCondition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attribute", "operator", "values")
    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionOperator), graphql_name="operator"
    )

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name="values"
    )


class AlertsMutingRuleConditionGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("conditions", "operator")
    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsMutingRuleCondition))
        ),
        graphql_name="conditions",
    )

    operator = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsMutingRuleConditionGroupOperator),
        graphql_name="operator",
    )


class AlertsMutingRuleDeleteResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AlertsMutingRuleSchedule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "end_repeat",
        "end_time",
        "next_end_time",
        "next_start_time",
        "repeat",
        "repeat_count",
        "start_time",
        "time_zone",
        "weekly_repeat_days",
    )
    end_repeat = sgqlc.types.Field(DateTime, graphql_name="endRepeat")

    end_time = sgqlc.types.Field(DateTime, graphql_name="endTime")

    next_end_time = sgqlc.types.Field(DateTime, graphql_name="nextEndTime")

    next_start_time = sgqlc.types.Field(DateTime, graphql_name="nextStartTime")

    repeat = sgqlc.types.Field(AlertsMutingRuleScheduleRepeat, graphql_name="repeat")

    repeat_count = sgqlc.types.Field(Int, graphql_name="repeatCount")

    start_time = sgqlc.types.Field(DateTime, graphql_name="startTime")

    time_zone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timeZone")

    weekly_repeat_days = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsDayOfWeek)),
        graphql_name="weeklyRepeatDays",
    )


class AlertsNotificationChannelCreateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelCreateErrorType),
        graphql_name="errorType",
    )


class AlertsNotificationChannelCreateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "notification_channel")
    error = sgqlc.types.Field(
        AlertsNotificationChannelCreateError, graphql_name="error"
    )

    notification_channel = sgqlc.types.Field(
        "AlertsNotificationChannelMutation", graphql_name="notificationChannel"
    )


class AlertsNotificationChannelDeleteError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelDeleteErrorType),
        graphql_name="errorType",
    )

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )


class AlertsNotificationChannelDeleteResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "id")
    error = sgqlc.types.Field(
        AlertsNotificationChannelDeleteError, graphql_name="error"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AlertsNotificationChannelId(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsNotificationChannelPoliciesResultSet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("policies", "total_count")
    policies = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("AlertsNotificationChannelPolicy"))
        ),
        graphql_name="policies",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsNotificationChannelPolicy(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AlertsNotificationChannelUpdateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelUpdateErrorType),
        graphql_name="errorType",
    )

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )


class AlertsNotificationChannelUpdateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "notification_channel")
    error = sgqlc.types.Field(
        AlertsNotificationChannelUpdateError, graphql_name="error"
    )

    notification_channel = sgqlc.types.Field(
        "AlertsNotificationChannelMutation", graphql_name="notificationChannel"
    )


class AlertsNotificationChannelsAddToPolicyError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelsAddToPolicyErrorType),
        graphql_name="errorType",
    )

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )


class AlertsNotificationChannelsAddToPolicyResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_channels", "policy_id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AlertsNotificationChannelsAddToPolicyError)
            )
        ),
        graphql_name="errors",
    )

    notification_channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannelId))
        ),
        graphql_name="notificationChannels",
    )

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")


class AlertsNotificationChannelsRemoveFromPolicyError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "error_type", "notification_channel_id")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    error_type = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNotificationChannelsRemoveFromPolicyErrorType),
        graphql_name="errorType",
    )

    notification_channel_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="notificationChannelId"
    )


class AlertsNotificationChannelsRemoveFromPolicyResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "notification_channels", "policy_id")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AlertsNotificationChannelsRemoveFromPolicyError)
            )
        ),
        graphql_name="errors",
    )

    notification_channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannelId))
        ),
        graphql_name="notificationChannels",
    )

    policy_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="policyId")


class AlertsNotificationChannelsResultSet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("channels", "next_cursor", "total_count")
    channels = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNotificationChannel))
        ),
        graphql_name="channels",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsNrqlConditionExpiration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "close_violations_on_expiration",
        "expiration_duration",
        "ignore_on_expected_termination",
        "open_violation_on_expiration",
    )
    close_violations_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="closeViolationsOnExpiration"
    )

    expiration_duration = sgqlc.types.Field(Seconds, graphql_name="expirationDuration")

    ignore_on_expected_termination = sgqlc.types.Field(
        Boolean, graphql_name="ignoreOnExpectedTermination"
    )

    open_violation_on_expiration = sgqlc.types.Field(
        Boolean, graphql_name="openViolationOnExpiration"
    )


class AlertsNrqlConditionPrediction(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("predict_by", "prefer_prediction_violation")
    predict_by = sgqlc.types.Field(Seconds, graphql_name="predictBy")

    prefer_prediction_violation = sgqlc.types.Field(
        Boolean, graphql_name="preferPredictionViolation"
    )


class AlertsNrqlConditionQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("data_account_id", "query")
    data_account_id = sgqlc.types.Field(Int, graphql_name="dataAccountId")

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")


class AlertsNrqlConditionSignal(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "aggregation_delay",
        "aggregation_method",
        "aggregation_timer",
        "aggregation_window",
        "evaluation_delay",
        "fill_option",
        "fill_value",
        "slide_by",
    )
    aggregation_delay = sgqlc.types.Field(Seconds, graphql_name="aggregationDelay")

    aggregation_method = sgqlc.types.Field(
        AlertsSignalAggregationMethod, graphql_name="aggregationMethod"
    )

    aggregation_timer = sgqlc.types.Field(Seconds, graphql_name="aggregationTimer")

    aggregation_window = sgqlc.types.Field(Seconds, graphql_name="aggregationWindow")

    evaluation_delay = sgqlc.types.Field(Seconds, graphql_name="evaluationDelay")

    fill_option = sgqlc.types.Field(AlertsFillOption, graphql_name="fillOption")

    fill_value = sgqlc.types.Field(Float, graphql_name="fillValue")

    slide_by = sgqlc.types.Field(Seconds, graphql_name="slideBy")


class AlertsNrqlConditionsSearchResultSet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "nrql_conditions", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    nrql_conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AlertsNrqlCondition))
        ),
        graphql_name="nrqlConditions",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsOpsGenieNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key", "data_center_region", "recipients", "tags", "teams")
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )

    data_center_region = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsOpsGenieDataCenterRegion),
        graphql_name="dataCenterRegion",
    )

    recipients = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="recipients"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="tags"
    )

    teams = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="teams"
    )


class AlertsPagerDutyNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key",)
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="apiKey"
    )


class AlertsPoliciesSearchResultSet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "policies", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    policies = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null("AlertsPolicy"))),
        graphql_name="policies",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AlertsPolicy(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "id", "incident_preference", "name")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    incident_preference = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsIncidentPreference),
        graphql_name="incidentPreference",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AlertsPolicyDeleteResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AlertsSlackNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("team_channel", "url")
    team_channel = sgqlc.types.Field(String, graphql_name="teamChannel")

    url = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="url")


class AlertsUserNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsVictorOpsNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "route_key")
    key = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="key")

    route_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="routeKey")


class AlertsWebhookBasicAuthInput(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("password", "username")
    password = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="password"
    )

    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="username")


class AlertsWebhookCustomHeaderInput(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")


class AlertsWebhookNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "base_url",
        "basic_auth",
        "custom_http_headers",
        "custom_payload_body",
        "custom_payload_type",
    )
    base_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="baseUrl")

    basic_auth = sgqlc.types.Field(
        AlertsWebhookBasicAuthInput, graphql_name="basicAuth"
    )

    custom_http_headers = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AlertsWebhookCustomHeaderInput)),
        graphql_name="customHttpHeaders",
    )

    custom_payload_body = sgqlc.types.Field(String, graphql_name="customPayloadBody")

    custom_payload_type = sgqlc.types.Field(
        AlertsWebhookCustomPayloadType, graphql_name="customPayloadType"
    )


class AlertsXMattersNotificationChannelConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("integration_url",)
    integration_url = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="integrationUrl"
    )


class ApiAccessActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "key_search")
    key = sgqlc.types.Field(
        ApiAccessKey,
        graphql_name="key",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "key_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessKeyType),
                        graphql_name="keyType",
                        default=None,
                    ),
                ),
            )
        ),
    )

    key_search = sgqlc.types.Field(
        "ApiAccessKeySearchResult",
        graphql_name="keySearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessKeySearchQuery),
                        graphql_name="query",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `query` (`ApiAccessKeySearchQuery!`)
    """


class ApiAccessCreateKeyResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_keys", "errors")
    created_keys = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKey), graphql_name="createdKeys"
    )

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKeyError), graphql_name="errors"
    )


class ApiAccessDeleteKeyResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted_keys", "errors")
    deleted_keys = sgqlc.types.Field(
        sgqlc.types.list_of("ApiAccessDeletedKey"), graphql_name="deletedKeys"
    )

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKeyError), graphql_name="errors"
    )


class ApiAccessDeletedKey(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(String, graphql_name="id")


class ApiAccessKeySearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "keys", "next_cursor")
    count = sgqlc.types.Field(Int, graphql_name="count")

    keys = sgqlc.types.Field(sgqlc.types.list_of(ApiAccessKey), graphql_name="keys")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class ApiAccessNrPlatformStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("validate_user_key",)
    validate_user_key = sgqlc.types.Field(
        "ApiAccessValidateUserKeyResult",
        graphql_name="validateUserKey",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="keyId", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `key_id` (`ID!`)
    """


class ApiAccessUpdateKeyResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "updated_keys")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKeyError), graphql_name="errors"
    )

    updated_keys = sgqlc.types.Field(
        sgqlc.types.list_of(ApiAccessKey), graphql_name="updatedKeys"
    )


class ApiAccessValidateUserKeyResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("valid",)
    valid = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="valid")


class ApmApplicationDeployment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "changelog",
        "description",
        "permalink",
        "revision",
        "timestamp",
        "user",
    )
    changelog = sgqlc.types.Field(String, graphql_name="changelog")

    description = sgqlc.types.Field(String, graphql_name="description")

    permalink = sgqlc.types.Field(String, graphql_name="permalink")

    revision = sgqlc.types.Field(String, graphql_name="revision")

    timestamp = sgqlc.types.Field(EpochMilliseconds, graphql_name="timestamp")

    user = sgqlc.types.Field(String, graphql_name="user")


class ApmApplicationEntitySettingsResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field("ApmApplicationEntity", graphql_name="entity")


class ApmApplicationRunningAgentVersions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("max_version", "min_version")
    max_version = sgqlc.types.Field(String, graphql_name="maxVersion")

    min_version = sgqlc.types.Field(String, graphql_name="minVersion")


class ApmApplicationSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "server_side_config")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")

    server_side_config = sgqlc.types.Field(Boolean, graphql_name="serverSideConfig")


class ApmApplicationSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "apdex_score",
        "error_rate",
        "host_count",
        "instance_count",
        "non_web_response_time_average",
        "non_web_throughput",
        "response_time_average",
        "throughput",
        "web_response_time_average",
        "web_throughput",
    )
    apdex_score = sgqlc.types.Field(Float, graphql_name="apdexScore")

    error_rate = sgqlc.types.Field(Float, graphql_name="errorRate")

    host_count = sgqlc.types.Field(Int, graphql_name="hostCount")

    instance_count = sgqlc.types.Field(Int, graphql_name="instanceCount")

    non_web_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="nonWebResponseTimeAverage"
    )

    non_web_throughput = sgqlc.types.Field(Float, graphql_name="nonWebThroughput")

    response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="responseTimeAverage"
    )

    throughput = sgqlc.types.Field(Float, graphql_name="throughput")

    web_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="webResponseTimeAverage"
    )

    web_throughput = sgqlc.types.Field(Float, graphql_name="webThroughput")


class ApmBrowserApplicationSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "ajax_request_throughput",
        "ajax_response_time_average",
        "js_error_rate",
        "page_load_throughput",
        "page_load_time_average",
    )
    ajax_request_throughput = sgqlc.types.Field(
        Float, graphql_name="ajaxRequestThroughput"
    )

    ajax_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="ajaxResponseTimeAverage"
    )

    js_error_rate = sgqlc.types.Field(Float, graphql_name="jsErrorRate")

    page_load_throughput = sgqlc.types.Field(Float, graphql_name="pageLoadThroughput")

    page_load_time_average = sgqlc.types.Field(
        Float, graphql_name="pageLoadTimeAverage"
    )


class ApmExternalServiceSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("response_time_average", "throughput")
    response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="responseTimeAverage"
    )

    throughput = sgqlc.types.Field(Float, graphql_name="throughput")


class AuthenticationDomainType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AuthorizationManagementAccessGrant(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class AuthorizationManagementAuthenticationDomain(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups", "id", "name")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null("AuthorizationManagementGroupSearch"),
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class AuthorizationManagementAuthenticationDomainSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "next_cursor", "total_count")
    authentication_domains = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementAuthenticationDomain)
            )
        ),
        graphql_name="authenticationDomains",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AuthorizationManagementGrantAccessPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("access_grants", "roles")
    access_grants = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementAccessGrant)
            )
        ),
        graphql_name="accessGrants",
    )

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("AuthorizationManagementGrantedRole")
            )
        ),
        graphql_name="roles",
    )


class AuthorizationManagementGrantedRole(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "display_name",
        "group_id",
        "id",
        "name",
        "organization_id",
        "role_id",
        "type",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    group_id = sgqlc.types.Field(ID, graphql_name="groupId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    role_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="roleId")

    type = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="type")


class AuthorizationManagementGrantedRoleSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "roles", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementGrantedRole)
            )
        ),
        graphql_name="roles",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AuthorizationManagementGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "roles")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(AuthorizationManagementGrantedRoleSearch),
        graphql_name="roles",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
                (
                    "role_id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="roleId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    * `role_id` (`[ID!]`)
    """


class AuthorizationManagementGroupSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AuthorizationManagementGroup))
        ),
        graphql_name="groups",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class AuthorizationManagementOrganizationStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "roles")
    authentication_domains = sgqlc.types.Field(
        AuthorizationManagementAuthenticationDomainSearch,
        graphql_name="authenticationDomains",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """

    roles = sgqlc.types.Field(
        "AuthorizationManagementRoleSearch",
        graphql_name="roles",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """


class AuthorizationManagementRevokeAccessPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("access_grants", "roles")
    access_grants = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementAccessGrant)
            )
        ),
        graphql_name="accessGrants",
    )

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(AuthorizationManagementGrantedRole)
            )
        ),
        graphql_name="roles",
    )


class AuthorizationManagementRole(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "name", "scope", "type")
    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    scope = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="scope")

    type = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="type")


class AuthorizationManagementRoleSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "roles", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    roles = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(AuthorizationManagementRole))
        ),
        graphql_name="roles",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class BrowserApplicationRunningAgentVersions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "max_semantic_version",
        "max_version",
        "min_semantic_version",
        "min_version",
    )
    max_semantic_version = sgqlc.types.Field(SemVer, graphql_name="maxSemanticVersion")

    max_version = sgqlc.types.Field(Int, graphql_name="maxVersion")

    min_semantic_version = sgqlc.types.Field(SemVer, graphql_name="minSemanticVersion")

    min_version = sgqlc.types.Field(Int, graphql_name="minVersion")


class BrowserApplicationSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("apdex_target",)
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")


class BrowserApplicationSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "ajax_request_throughput",
        "ajax_response_time_average",
        "js_error_rate",
        "page_load_throughput",
        "page_load_time_average",
        "page_load_time_median",
        "spa_response_time_average",
        "spa_response_time_median",
    )
    ajax_request_throughput = sgqlc.types.Field(
        Float, graphql_name="ajaxRequestThroughput"
    )

    ajax_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="ajaxResponseTimeAverage"
    )

    js_error_rate = sgqlc.types.Field(Float, graphql_name="jsErrorRate")

    page_load_throughput = sgqlc.types.Field(Float, graphql_name="pageLoadThroughput")

    page_load_time_average = sgqlc.types.Field(
        Float, graphql_name="pageLoadTimeAverage"
    )

    page_load_time_median = sgqlc.types.Field(Float, graphql_name="pageLoadTimeMedian")

    spa_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="spaResponseTimeAverage"
    )

    spa_response_time_median = sgqlc.types.Field(
        Seconds, graphql_name="spaResponseTimeMedian"
    )


class ChangeTrackingActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("change_tracking_search",)
    change_tracking_search = sgqlc.types.Field(
        "ChangeTrackingChangeTrackingSearchResult",
        graphql_name="changeTrackingSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        ChangeTrackingChangeTrackingSearchFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `filter` (`ChangeTrackingChangeTrackingSearchFilter`)
    """


class ChangeTrackingChangeTrackingEvent(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "activity_stream_description",
        "category",
        "category_type",
        "change_tracking_id",
        "custom_attributes",
        "description",
        "entity",
        "group_id",
        "timestamp",
        "type",
        "user",
    )
    activity_stream_description = sgqlc.types.Field(
        String, graphql_name="activityStreamDescription"
    )

    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="category")

    category_type = sgqlc.types.Field(
        sgqlc.types.non_null(ChangeTrackingCategoryType), graphql_name="categoryType"
    )

    change_tracking_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="changeTrackingId"
    )

    custom_attributes = sgqlc.types.Field(
        ChangeTrackingRawCustomAttributesMap, graphql_name="customAttributes"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    group_id = sgqlc.types.Field(String, graphql_name="groupId")

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")

    user = sgqlc.types.Field(String, graphql_name="user")


class ChangeTrackingChangeTrackingSearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("change_events",)
    change_events = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(ChangeTrackingEvent)),
        graphql_name="changeEvents",
    )


class ChangeTrackingCreateEventResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("change_tracking_event", "messages")
    change_tracking_event = sgqlc.types.Field(
        ChangeTrackingEvent, graphql_name="changeTrackingEvent"
    )

    messages = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="messages"
    )


class ChangeTrackingDeployment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "changelog",
        "commit",
        "deep_link",
        "deployment_id",
        "deployment_type",
        "description",
        "entity_guid",
        "group_id",
        "timestamp",
        "user",
        "version",
    )
    changelog = sgqlc.types.Field(String, graphql_name="changelog")

    commit = sgqlc.types.Field(String, graphql_name="commit")

    deep_link = sgqlc.types.Field(String, graphql_name="deepLink")

    deployment_id = sgqlc.types.Field(String, graphql_name="deploymentId")

    deployment_type = sgqlc.types.Field(
        ChangeTrackingDeploymentType, graphql_name="deploymentType"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    group_id = sgqlc.types.Field(String, graphql_name="groupId")

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    user = sgqlc.types.Field(String, graphql_name="user")

    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="version")


class ChangeTrackingDeploymentSearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("results",)
    results = sgqlc.types.Field(
        sgqlc.types.list_of(ChangeTrackingDeployment), graphql_name="results"
    )


class CloudAccountFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "linked_account",
        "linked_accounts",
        "oci_compartment_instrumentation_details",
        "oci_log_group_instrumentation_details",
        "oci_tenancy_details",
        "provider",
        "providers",
    )
    linked_account = sgqlc.types.Field(
        "CloudLinkedAccount",
        graphql_name="linkedAccount",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(Int, graphql_name="id", default=None)),)
        ),
    )

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLinkedAccount"), graphql_name="linkedAccounts"
    )

    oci_compartment_instrumentation_details = sgqlc.types.Field(
        sgqlc.types.list_of("CloudOciCompartmentInstrumentationDetails"),
        graphql_name="ociCompartmentInstrumentationDetails",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "linked_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="linkedAccountId",
                        default=None,
                    ),
                ),
                (
                    "oci_region",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociRegion",
                        default=None,
                    ),
                ),
                (
                    "oci_tenant_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociTenantId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    oci_log_group_instrumentation_details = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("CloudOciLogGroupInstrumentationDetails")
        ),
        graphql_name="ociLogGroupInstrumentationDetails",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "linked_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="linkedAccountId",
                        default=None,
                    ),
                ),
                (
                    "oci_region",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociRegion",
                        default=None,
                    ),
                ),
                (
                    "oci_tenant_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociTenantId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    oci_tenancy_details = sgqlc.types.Field(
        "CloudOciTenancyDetails",
        graphql_name="ociTenancyDetails",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "linked_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="linkedAccountId",
                        default=None,
                    ),
                ),
                (
                    "oci_home_region",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociHomeRegion",
                        default=None,
                    ),
                ),
                (
                    "oci_tenant_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociTenantId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    provider = sgqlc.types.Field(
        CloudProvider,
        graphql_name="provider",
        args=sgqlc.types.ArgDict(
            (("slug", sgqlc.types.Arg(String, graphql_name="slug", default=None)),)
        ),
    )

    providers = sgqlc.types.Field(
        sgqlc.types.list_of(CloudProvider), graphql_name="providers"
    )


class CloudAccountMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "linked_account_id",
        "message",
        "nr_account_id",
        "provider_slug",
        "type",
    )
    linked_account_id = sgqlc.types.Field(Int, graphql_name="linkedAccountId")

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    provider_slug = sgqlc.types.Field(String, graphql_name="providerSlug")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class CloudActorFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_accounts",)
    linked_accounts = sgqlc.types.Field(
        sgqlc.types.list_of("CloudLinkedAccount"),
        graphql_name="linkedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "provider",
                    sgqlc.types.Arg(String, graphql_name="provider", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `provider` (`String`)
    """


class CloudConfigureIntegrationPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "integrations")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegrationMutationError"))
        ),
        graphql_name="errors",
    )

    integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudIntegration))
        ),
        graphql_name="integrations",
    )


class CloudDashboardTemplate(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "layout", "name", "slug", "updated_at")
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )

    layout = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="layout")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )


class CloudDisableIntegrationPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("disabled_integrations", "errors")
    disabled_integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudIntegration))
        ),
        graphql_name="disabledIntegrations",
    )

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudIntegrationMutationError"))
        ),
        graphql_name="errors",
    )


class CloudIntegrationMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "integration_slug",
        "linked_account_id",
        "message",
        "nr_account_id",
        "type",
    )
    integration_slug = sgqlc.types.Field(String, graphql_name="integrationSlug")

    linked_account_id = sgqlc.types.Field(Int, graphql_name="linkedAccountId")

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class CloudLinkAccountPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("CloudLinkedAccount"))
        ),
        graphql_name="linkedAccounts",
    )


class CloudLinkedAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "auth_label",
        "created_at",
        "disabled",
        "external_id",
        "id",
        "integration",
        "integrations",
        "metric_collection_mode",
        "name",
        "nr_account_id",
        "provider",
        "updated_at",
    )
    auth_label = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="authLabel"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )

    disabled = sgqlc.types.Field(Boolean, graphql_name="disabled")

    external_id = sgqlc.types.Field(String, graphql_name="externalId")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    integration = sgqlc.types.Field(
        sgqlc.types.non_null(CloudIntegration),
        graphql_name="integration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    integrations = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudIntegration))
        ),
        graphql_name="integrations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "service",
                    sgqlc.types.Arg(String, graphql_name="service", default=None),
                ),
            )
        ),
    )

    metric_collection_mode = sgqlc.types.Field(
        sgqlc.types.non_null(CloudMetricCollectionMode),
        graphql_name="metricCollectionMode",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    provider = sgqlc.types.Field(
        sgqlc.types.non_null(CloudProvider), graphql_name="provider"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )


class CloudLogGroupInstrumentationStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "instrumented", "log_group")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    instrumented = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="instrumented"
    )

    log_group = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="logGroup")


class CloudMigrateAwsGovCloudToAssumeRolePayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="linkedAccounts",
    )


class CloudNamespaceInstrumentationStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("instrumented", "namespace")
    instrumented = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="instrumented"
    )

    namespace = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="namespace"
    )


class CloudOciCompartmentInstrumentationDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "id",
        "instrumented_namespace",
        "name",
        "namespace_instrumentation_statuses",
        "non_instrumented_namespace",
        "oci_home_region",
        "total_active_namespace_count",
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    instrumented_namespace = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="instrumentedNamespace"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    namespace_instrumentation_statuses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(CloudNamespaceInstrumentationStatus)
            )
        ),
        graphql_name="namespaceInstrumentationStatuses",
    )

    non_instrumented_namespace = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nonInstrumentedNamespace"
    )

    oci_home_region = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="ociHomeRegion"
    )

    total_active_namespace_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalActiveNamespaceCount"
    )


class CloudOciInstrumentedPayloadUrlPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nr_account_id", "s3_url", "tf_zip_url")
    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    s3_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="s3Url")

    tf_zip_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="tfZipUrl"
    )


class CloudOciLogGroupInstrumentationDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "id",
        "instrumented_log_group",
        "log_group_instrumentation_statuses",
        "name",
        "non_instrumented_log_group",
        "oci_home_region",
        "total_active_log_group_count",
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    instrumented_log_group = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="instrumentedLogGroup"
    )

    log_group_instrumentation_statuses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(CloudLogGroupInstrumentationStatus)
            )
        ),
        graphql_name="logGroupInstrumentationStatuses",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    non_instrumented_log_group = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nonInstrumentedLogGroup"
    )

    oci_home_region = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="ociHomeRegion"
    )

    total_active_log_group_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalActiveLogGroupCount"
    )


class CloudOciLogGroupInstrumentedPayloadUrlPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nr_account_id", "s3_url", "tf_zip_url")
    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    s3_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="s3Url")

    tf_zip_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="tfZipUrl"
    )


class CloudOciTenancyDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "id",
        "linked_account_id",
        "name",
        "nr_account_id",
        "oci_home_region",
        "subscribed_regions",
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    linked_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="linkedAccountId"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nr_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="nrAccountId"
    )

    oci_home_region = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="ociHomeRegion"
    )

    subscribed_regions = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="subscribedRegions",
    )


class CloudRenameAccountPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )

    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="linkedAccounts",
    )


class CloudService(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "dashboards",
        "icon",
        "id",
        "is_enabled",
        "name",
        "provider",
        "slug",
        "updated_at",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="createdAt"
    )

    dashboards = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudDashboardTemplate))
        ),
        graphql_name="dashboards",
    )

    icon = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="icon")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    is_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isEnabled"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    provider = sgqlc.types.Field(
        sgqlc.types.non_null(CloudProvider), graphql_name="provider"
    )

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="updatedAt"
    )


class CloudTemplateParam(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "autocomplete",
        "immutable",
        "label",
        "name",
        "placeholder",
        "type",
    )
    autocomplete = sgqlc.types.Field(String, graphql_name="autocomplete")

    immutable = sgqlc.types.Field(Boolean, graphql_name="immutable")

    label = sgqlc.types.Field(String, graphql_name="label")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    placeholder = sgqlc.types.Field(String, graphql_name="placeholder")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class CloudUnlinkAccountPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "unlinked_accounts")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudAccountMutationError))
        ),
        graphql_name="errors",
    )

    unlinked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="unlinkedAccounts",
    )


class CloudUpdateAccountPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_accounts",)
    linked_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(CloudLinkedAccount))
        ),
        graphql_name="linkedAccounts",
    )


class CollaborationActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "bot_responses_by_ids",
        "code_marks_by_ids",
        "comment_by_id",
        "comments_by_ids",
        "comments_by_thread_id",
        "comments_by_thread_ids",
        "context_by_id",
        "contexts_by_entity_guid",
        "contexts_by_ids",
        "email_by_address",
        "email_by_id",
        "emails_by_ids",
        "external_service_connection_by_id",
        "file_by_id",
        "grok_messages_by_ids",
        "mention_by_id",
        "mentions_by_ids",
        "subscriber_by_id",
        "subscribers_by_thread_id",
        "subscribers_by_user_id",
        "subscriptions",
        "subscriptions_unread",
        "thread_by_id",
        "threads_all",
        "threads_by_context_id",
        "threads_by_context_ids",
        "threads_by_ids",
        "threads_count_by_context_id",
        "web_socket_connect_url",
    )
    bot_responses_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationBotResponse"),
        graphql_name="botResponsesByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    code_marks_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationCodeMark"),
        graphql_name="codeMarksByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    comment_by_id = sgqlc.types.Field(
        "CollaborationComment",
        graphql_name="commentById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    comments_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationComment"),
        graphql_name="commentsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    comments_by_thread_id = sgqlc.types.Field(
        "CollaborationCommentConnection",
        graphql_name="commentsByThreadId",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
            )
        ),
    )

    comments_by_thread_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationCommentConnection"),
        graphql_name="commentsByThreadIds",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "thread_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="threadIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `first` (`Int`) (default: `10`)
    * `last` (`Int`)
    * `thread_ids` (`[ID]!`)
    """

    context_by_id = sgqlc.types.Field(
        "CollaborationContext",
        graphql_name="contextById",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    contexts_by_entity_guid = sgqlc.types.Field(
        "CollaborationLinkedContexts",
        graphql_name="contextsByEntityGuid",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity_guid",
                    sgqlc.types.Arg(
                        EntityGuid, graphql_name="entityGuid", default=None
                    ),
                ),
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
            )
        ),
    )

    contexts_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationContext"),
        graphql_name="contextsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(ID), graphql_name="ids", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]`)
    """

    email_by_address = sgqlc.types.Field(
        "CollaborationEmail",
        graphql_name="emailByAddress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "email_address",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="emailAddress",
                        default=None,
                    ),
                ),
            )
        ),
    )

    email_by_id = sgqlc.types.Field(
        "CollaborationEmail",
        graphql_name="emailById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    emails_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationEmail"),
        graphql_name="emailsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    external_service_connection_by_id = sgqlc.types.Field(
        "CollaborationExternalServiceConnection",
        graphql_name="externalServiceConnectionById",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    file_by_id = sgqlc.types.Field(
        "CollaborationFile",
        graphql_name="fileById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "thumbnail",
                    sgqlc.types.Arg(Boolean, graphql_name="thumbnail", default=None),
                ),
            )
        ),
    )

    grok_messages_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationGrokMessage"),
        graphql_name="grokMessagesByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    mention_by_id = sgqlc.types.Field(
        "CollaborationMention",
        graphql_name="mentionById",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    mentions_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationMention"),
        graphql_name="mentionsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(ID), graphql_name="ids", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]`)
    """

    subscriber_by_id = sgqlc.types.Field(
        "CollaborationSubscriber",
        graphql_name="subscriberById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    subscribers_by_thread_id = sgqlc.types.Field(
        "CollaborationSubscriberConnection",
        graphql_name="subscribersByThreadId",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
            )
        ),
    )

    subscribers_by_user_id = sgqlc.types.Field(
        "CollaborationSubscriberConnection",
        graphql_name="subscribersByUserId",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "subscriber_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="subscriberId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    subscriptions = sgqlc.types.Field(
        "CollaborationSubscriberConnection",
        graphql_name="subscriptions",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    subscriptions_unread = sgqlc.types.Field(
        "CollaborationSubscriptionsWithUnread",
        graphql_name="subscriptionsUnread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context_id",
                    sgqlc.types.Arg(ID, graphql_name="contextId", default=None),
                ),
            )
        ),
    )

    thread_by_id = sgqlc.types.Field(
        "CollaborationThread",
        graphql_name="threadById",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    threads_all = sgqlc.types.Field(
        "CollaborationThreadConnection",
        graphql_name="threadsAll",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(String, graphql_name="filter", default=None),
                ),
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    threads_by_context_id = sgqlc.types.Field(
        "CollaborationThreadConnection",
        graphql_name="threadsByContextId",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context_id",
                    sgqlc.types.Arg(ID, graphql_name="contextId", default=None),
                ),
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "visibility",
                    sgqlc.types.Arg(String, graphql_name="visibility", default=None),
                ),
            )
        ),
    )

    threads_by_context_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationThreadConnection"),
        graphql_name="threadsByContextIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(ID), graphql_name="contextIds", default=None
                    ),
                ),
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "visibility",
                    sgqlc.types.Arg(String, graphql_name="visibility", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `context_ids` (`[ID]`)
    * `first` (`Int`) (default: `10`)
    * `last` (`Int`)
    * `next_cursor` (`String`)
    * `prev_cursor` (`String`)
    * `visibility` (`String`)
    """

    threads_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationThread"),
        graphql_name="threadsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(ID), graphql_name="ids", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]`)
    """

    threads_count_by_context_id = sgqlc.types.Field(
        "CollaborationThreadsCount",
        graphql_name="threadsCountByContextId",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context_id",
                    sgqlc.types.Arg(ID, graphql_name="contextId", default=None),
                ),
            )
        ),
    )

    web_socket_connect_url = sgqlc.types.Field(
        "CollaborationSocketConnection", graphql_name="webSocketConnectUrl"
    )


class CollaborationBotResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "deactivated",
        "id",
        "modified_at",
        "organization_id",
        "payload",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    payload = sgqlc.types.Field(String, graphql_name="payload")


class CollaborationBotResponseFeedback(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("rating", "response_id")
    rating = sgqlc.types.Field(Int, graphql_name="rating")

    response_id = sgqlc.types.Field(ID, graphql_name="responseId")


class CollaborationCodeMark(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "code",
        "created_at",
        "creator_id",
        "deactivated",
        "file",
        "id",
        "modified_at",
        "organization_id",
        "permalink",
        "repo",
        "sha",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    code = sgqlc.types.Field(String, graphql_name="code")

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    creator_id = sgqlc.types.Field(ID, graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    file = sgqlc.types.Field(String, graphql_name="file")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    permalink = sgqlc.types.Field(String, graphql_name="permalink")

    repo = sgqlc.types.Field(String, graphql_name="repo")

    sha = sgqlc.types.Field(String, graphql_name="sha")


class CollaborationComment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "attributes",
        "body",
        "capability_id",
        "context_id",
        "context_metadata",
        "created_at",
        "creator",
        "creator_id",
        "deactivated",
        "display_name",
        "edited",
        "external_application_type",
        "external_creator",
        "external_creator_id",
        "id",
        "mentions",
        "modified_at",
        "organization_id",
        "reference_url",
        "reply_to",
        "sync_statuses",
        "system_message_type",
        "thread_id",
        "time_picker_from",
        "time_picker_to",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    attributes = sgqlc.types.Field(String, graphql_name="attributes")

    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="body")

    capability_id = sgqlc.types.Field(String, graphql_name="capabilityId")

    context_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="contextId")

    context_metadata = sgqlc.types.Field(
        CollaborationRawContextMetadata, graphql_name="contextMetadata"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator = sgqlc.types.Field("CollaborationCommentCreator", graphql_name="creator")

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    edited = sgqlc.types.Field(Boolean, graphql_name="edited")

    external_application_type = sgqlc.types.Field(
        String, graphql_name="externalApplicationType"
    )

    external_creator = sgqlc.types.Field(
        "CollaborationExternalCommentCreator", graphql_name="externalCreator"
    )

    external_creator_id = sgqlc.types.Field(ID, graphql_name="externalCreatorId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    mentions = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationMention"), graphql_name="mentions"
    )

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    reference_url = sgqlc.types.Field(String, graphql_name="referenceUrl")

    reply_to = sgqlc.types.Field(ID, graphql_name="replyTo")

    sync_statuses = sgqlc.types.Field(
        sgqlc.types.list_of("CollaborationCommentSyncStatus"),
        graphql_name="syncStatuses",
    )

    system_message_type = sgqlc.types.Field(String, graphql_name="systemMessageType")

    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="threadId")

    time_picker_from = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="timePickerFrom"
    )

    time_picker_to = sgqlc.types.Field(EpochMilliseconds, graphql_name="timePickerTo")


class CollaborationCommentConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationComment), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class CollaborationCommentCreator(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "name", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")

    name = sgqlc.types.Field(String, graphql_name="name")

    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="userId")


class CollaborationCommentSyncStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("app_type", "error", "ok")
    app_type = sgqlc.types.Field(String, graphql_name="appType")

    error = sgqlc.types.Field(String, graphql_name="error")

    ok = sgqlc.types.Field(Boolean, graphql_name="ok")


class CollaborationContext(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "context_metadata",
        "created_at",
        "creator_id",
        "deactivated",
        "entity_guid",
        "id",
        "latest_thread_comment_creator_id",
        "latest_thread_comment_id",
        "latest_thread_comment_time",
        "latest_thread_id",
        "modified_at",
        "organization_id",
        "reference_url",
        "thread",
        "thread_count",
        "threads",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    context_metadata = sgqlc.types.Field(
        CollaborationRawContextMetadata, graphql_name="contextMetadata"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    entity_guid = sgqlc.types.Field(EntityGuid, graphql_name="entityGuid")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    latest_thread_comment_creator_id = sgqlc.types.Field(
        ID, graphql_name="latestThreadCommentCreatorId"
    )

    latest_thread_comment_id = sgqlc.types.Field(
        ID, graphql_name="latestThreadCommentId"
    )

    latest_thread_comment_time = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="latestThreadCommentTime"
    )

    latest_thread_id = sgqlc.types.Field(ID, graphql_name="latestThreadId")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    reference_url = sgqlc.types.Field(String, graphql_name="referenceUrl")

    thread = sgqlc.types.Field(
        "CollaborationThread",
        graphql_name="thread",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    thread_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="threadCount"
    )

    threads = sgqlc.types.Field(
        "CollaborationThreadConnection",
        graphql_name="threads",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
            )
        ),
    )
    """Arguments:

    * `first` (`Int`) (default: `10`)
    * `last` (`Int`)
    """


class CollaborationEmail(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "creator_id",
        "email_address",
        "id",
        "modified_at",
        "organization_id",
        "registered_at",
        "status",
        "user_id",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    email_address = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="emailAddress"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    registered_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="registeredAt")

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")

    user_id = sgqlc.types.Field(ID, graphql_name="userId")


class CollaborationExternalCommentCreator(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "email_address",
        "id",
        "modified_at",
        "user_id",
        "user_name",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    email_address = sgqlc.types.Field(String, graphql_name="emailAddress")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    user_id = sgqlc.types.Field(Int, graphql_name="userId")

    user_name = sgqlc.types.Field(String, graphql_name="userName")


class CollaborationExternalServiceConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "channel_id",
        "created_at",
        "creator_id",
        "deactivated",
        "external_id",
        "id",
        "organization_id",
        "session_id",
        "thread_id",
        "type",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    channel_id = sgqlc.types.Field(ID, graphql_name="channelId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    external_id = sgqlc.types.Field(ID, graphql_name="externalId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    session_id = sgqlc.types.Field(ID, graphql_name="sessionId")

    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="threadId")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class CollaborationExternalServiceConnectionGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationExternalServiceConnection),
        graphql_name="entities",
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class CollaborationFile(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "creator_id",
        "deactivated",
        "external_application_type",
        "external_creator_id",
        "file_name",
        "file_path",
        "has_thumbnail",
        "id",
        "is_screenshot",
        "modified_at",
        "organization_id",
        "upload_url",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(ID, graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    external_application_type = sgqlc.types.Field(
        String, graphql_name="externalApplicationType"
    )

    external_creator_id = sgqlc.types.Field(String, graphql_name="externalCreatorId")

    file_name = sgqlc.types.Field(String, graphql_name="fileName")

    file_path = sgqlc.types.Field(String, graphql_name="filePath")

    has_thumbnail = sgqlc.types.Field(Boolean, graphql_name="hasThumbnail")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    is_screenshot = sgqlc.types.Field(Boolean, graphql_name="isScreenshot")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    upload_url = sgqlc.types.Field(String, graphql_name="uploadUrl")


class CollaborationGrokMessage(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "card",
        "content",
        "context",
        "created_at",
        "creator_id",
        "id",
        "modified_at",
        "role",
        "thread_id",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    card = sgqlc.types.Field(String, graphql_name="card")

    content = sgqlc.types.Field(String, graphql_name="content")

    context = sgqlc.types.Field(CollaborationRawContextMetadata, graphql_name="context")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(ID, graphql_name="creatorId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    role = sgqlc.types.Field(String, graphql_name="role")

    thread_id = sgqlc.types.Field(ID, graphql_name="threadId")


class CollaborationLinkedContexts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationContext), graphql_name="entities"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class CollaborationMention(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "comment_id",
        "created_at",
        "creator_id",
        "deactivated",
        "email",
        "external_application_type",
        "external_creator_id",
        "id",
        "mentionable_item_id",
        "modified_at",
        "type",
    )
    comment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="commentId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    deactivated = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="deactivated"
    )

    email = sgqlc.types.Field(CollaborationEmail, graphql_name="email")

    external_application_type = sgqlc.types.Field(
        CollaborationExternalApplicationType, graphql_name="externalApplicationType"
    )

    external_creator_id = sgqlc.types.Field(ID, graphql_name="externalCreatorId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    mentionable_item_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="mentionableItemId"
    )

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class CollaborationMessageSent(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "sent_at", "sync_statuses")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    sent_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="sentAt"
    )

    sync_statuses = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationCommentSyncStatus), graphql_name="syncStatuses"
    )


class CollaborationSocketConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nr_connection_id", "url")
    nr_connection_id = sgqlc.types.Field(String, graphql_name="nrConnectionId")

    url = sgqlc.types.Field(SecureValue, graphql_name="url")


class CollaborationSubscriber(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "actively_subscribed",
        "comments_read_count",
        "context_id",
        "created_at",
        "external_application_type",
        "external_creator_id",
        "id",
        "last_comment_read_id",
        "mention_count",
        "mentions_read_count",
        "modified_at",
        "organization_id",
        "thread",
        "thread_id",
        "unread_comment_deleted_count",
        "user_id",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    actively_subscribed = sgqlc.types.Field(Boolean, graphql_name="activelySubscribed")

    comments_read_count = sgqlc.types.Field(Int, graphql_name="commentsReadCount")

    context_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="contextId")

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    external_application_type = sgqlc.types.Field(
        String, graphql_name="externalApplicationType"
    )

    external_creator_id = sgqlc.types.Field(ID, graphql_name="externalCreatorId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    last_comment_read_id = sgqlc.types.Field(ID, graphql_name="lastCommentReadId")

    mention_count = sgqlc.types.Field(Int, graphql_name="mentionCount")

    mentions_read_count = sgqlc.types.Field(Int, graphql_name="mentionsReadCount")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    thread = sgqlc.types.Field("CollaborationThread", graphql_name="thread")

    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="threadId")

    unread_comment_deleted_count = sgqlc.types.Field(
        Int, graphql_name="unreadCommentDeletedCount"
    )

    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="userId")


class CollaborationSubscriberConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationSubscriber), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class CollaborationSubscriptionsWithUnread(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("subscriptions", "unread_comment_count", "unread_thread_count")
    subscriptions = sgqlc.types.Field(String, graphql_name="subscriptions")

    unread_comment_count = sgqlc.types.Field(Int, graphql_name="unreadCommentCount")

    unread_thread_count = sgqlc.types.Field(Int, graphql_name="unreadThreadCount")


class CollaborationThread(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "comment",
        "comment_count",
        "comments",
        "context_id",
        "context_metadata",
        "created_at",
        "creator_id",
        "deactivated",
        "deleted_comment_count",
        "external_application_type",
        "external_service_connections",
        "first_comment_id",
        "id",
        "latest_comment_creator_id",
        "latest_comment_id",
        "latest_comment_time",
        "modified_at",
        "organization_id",
        "reference_url",
        "status",
        "subscriber",
        "subscribers",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    comment = sgqlc.types.Field(
        CollaborationComment,
        graphql_name="comment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    comment_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="commentCount"
    )

    comments = sgqlc.types.Field(
        CollaborationCommentConnection,
        graphql_name="comments",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
            )
        ),
    )

    context_id = sgqlc.types.Field(ID, graphql_name="contextId")

    context_metadata = sgqlc.types.Field(
        CollaborationRawContextMetadata, graphql_name="contextMetadata"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(ID, graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    deleted_comment_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="deletedCommentCount"
    )

    external_application_type = sgqlc.types.Field(
        String, graphql_name="externalApplicationType"
    )

    external_service_connections = sgqlc.types.Field(
        CollaborationExternalServiceConnectionGroup,
        graphql_name="externalServiceConnections",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
            )
        ),
    )

    first_comment_id = sgqlc.types.Field(ID, graphql_name="firstCommentId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    latest_comment_creator_id = sgqlc.types.Field(
        ID, graphql_name="latestCommentCreatorId"
    )

    latest_comment_id = sgqlc.types.Field(ID, graphql_name="latestCommentId")

    latest_comment_time = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="latestCommentTime"
    )

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    reference_url = sgqlc.types.Field(String, graphql_name="referenceUrl")

    status = sgqlc.types.Field(String, graphql_name="status")

    subscriber = sgqlc.types.Field(
        CollaborationSubscriber,
        graphql_name="subscriber",
        args=sgqlc.types.ArgDict(
            (("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),)
        ),
    )

    subscribers = sgqlc.types.Field(
        CollaborationSubscriberConnection,
        graphql_name="subscribers",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
            )
        ),
    )
    """Arguments:

    * `first` (`Int`) (default: `10`)
    * `last` (`Int`)
    """


class CollaborationThreadConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(CollaborationThread), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class CollaborationThreadsCount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("closed", "open")
    closed = sgqlc.types.Field(Int, graphql_name="closed")

    open = sgqlc.types.Field(Int, graphql_name="open")


class Consumption(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("customer_id",)
    customer_id = sgqlc.types.Field(ID, graphql_name="customerId")


class CrossAccountNrdbResultContainer(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "current_results",
        "metadata",
        "nrql",
        "other_result",
        "previous_results",
        "query_progress",
        "raw_response",
        "results",
        "total_result",
    )
    current_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="currentResults"
    )

    metadata = sgqlc.types.Field("NrdbMetadata", graphql_name="metadata")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    other_result = sgqlc.types.Field(NrdbResult, graphql_name="otherResult")

    previous_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="previousResults"
    )

    query_progress = sgqlc.types.Field(
        "NrdbQueryProgress", graphql_name="queryProgress"
    )

    raw_response = sgqlc.types.Field(NrdbRawResults, graphql_name="rawResponse")

    results = sgqlc.types.Field(sgqlc.types.list_of(NrdbResult), graphql_name="results")

    total_result = sgqlc.types.Field(NrdbResult, graphql_name="totalResult")


class CustomRoleRoleMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(Int, graphql_name="id")


class CustomerAdministration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_shares",
        "accounts",
        "authentication_domains",
        "consumption",
        "contracts",
        "grants",
        "groups",
        "jobs",
        "organization_members",
        "organizations",
        "permissions",
        "roles",
        "secret",
        "secret_versions",
        "secrets",
        "system_identities",
        "system_identity_groups",
        "user",
        "users",
    )
    account_shares = sgqlc.types.Field(
        "OrganizationAccountShareCollection",
        graphql_name="accountShares",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationAccountShareFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(OrganizationAccountShareSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`OrganizationAccountShareFilterInput!`)
    * `sort` (`[OrganizationAccountShareSortInput!]`)
    """

    accounts = sgqlc.types.Field(
        "OrganizationAccountCollection",
        graphql_name="accounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationAccountFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(OrganizationAccountSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`OrganizationAccountFilterInput!`)
    * `sort` (`[OrganizationAccountSortInput!]`)
    """

    authentication_domains = sgqlc.types.Field(
        "OrganizationAuthenticationDomainCollection",
        graphql_name="authenticationDomains",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            OrganizationAuthenticationDomainFilterInput
                        ),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(
                                OrganizationAuthenticationDomainSortInput
                            )
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`OrganizationAuthenticationDomainFilterInput!`)
    * `sort` (`[OrganizationAuthenticationDomainSortInput!]`)
    """

    consumption = sgqlc.types.Field(
        Consumption,
        graphql_name="consumption",
        args=sgqlc.types.ArgDict(
            (
                (
                    "customer_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="customerId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    contracts = sgqlc.types.Field(
        "OrganizationCustomerContractWrapper",
        graphql_name="contracts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        OrganizationCustomerContractFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    grants = sgqlc.types.Field(
        "MultiTenantAuthorizationGrantCollection",
        graphql_name="grants",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            MultiTenantAuthorizationGrantFilterInputExpression
                        ),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(MultiTenantAuthorizationGrantSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`MultiTenantAuthorizationGrantFilterInputExpression!`)
    * `sort` (`[MultiTenantAuthorizationGrantSortInput!]`)
    """

    groups = sgqlc.types.Field(
        "MultiTenantIdentityGroupCollection",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MultiTenantIdentityGroupFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(MultiTenantIdentityGroupSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`MultiTenantIdentityGroupFilterInput!`)
    * `sort` (`[MultiTenantIdentityGroupSortInput!]`)
    """

    jobs = sgqlc.types.Field("CustomerAdministrationJobs", graphql_name="jobs")

    organization_members = sgqlc.types.Field(
        "OrganizationMembersOrganizationMemberCollection",
        graphql_name="organizationMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            OrganizationMembersOrganizationMemberFilter
                        ),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    organizations = sgqlc.types.Field(
        "OrganizationCustomerOrganizationWrapper",
        graphql_name="organizations",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        OrganizationCustomerOrganizationFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    permissions = sgqlc.types.Field(
        "MultiTenantAuthorizationPermissionCollection",
        graphql_name="permissions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        MultiTenantAuthorizationPermissionFilter,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    roles = sgqlc.types.Field(
        "MultiTenantAuthorizationRoleCollection",
        graphql_name="roles",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            MultiTenantAuthorizationRoleFilterInputExpression
                        ),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(MultiTenantAuthorizationRoleSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`MultiTenantAuthorizationRoleFilterInputExpression!`)
    * `sort` (`[MultiTenantAuthorizationRoleSortInput!]`)
    """

    secret = sgqlc.types.Field(
        "SecretsManagementSecretQueryResponse",
        graphql_name="secret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "unlock",
                    sgqlc.types.Arg(Boolean, graphql_name="unlock", default=False),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    secret_versions = sgqlc.types.Field(
        "SecretsManagementSecretVersionsQueryResponse",
        graphql_name="secretVersions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fetch_deleted",
                    sgqlc.types.Arg(
                        Boolean, graphql_name="fetchDeleted", default=False
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
            )
        ),
    )

    secrets = sgqlc.types.Field(
        "SecretsManagementSecretsCollectionQueryResponse",
        graphql_name="secrets",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementSecretsCollectionFilter),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        SecretsManagementSecretsCollectionSort,
                        graphql_name="sort",
                        default={"direction": "DESC", "key": "CREATED_AT"},
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`SecretsManagementSecretsCollectionFilter!`)
    * `sort` (`SecretsManagementSecretsCollectionSort`) (default:
      `{direction: DESC, key: CREATED_AT}`)
    """

    system_identities = sgqlc.types.Field(
        "SystemIdentityIdentityCollection",
        graphql_name="systemIdentities",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SystemIdentityIdentityFilter),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        SystemIdentityIdentitySort, graphql_name="sort", default=None
                    ),
                ),
            )
        ),
    )

    system_identity_groups = sgqlc.types.Field(
        "SystemIdentityGroupCollection",
        graphql_name="systemIdentityGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SystemIdentityGroupFilter),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user = sgqlc.types.Field("User", graphql_name="user")

    users = sgqlc.types.Field(
        "MultiTenantIdentityUserCollection",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MultiTenantIdentityUserFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(MultiTenantIdentityUserSortInput)
                        ),
                        graphql_name="sort",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`MultiTenantIdentityUserFilterInput!`)
    * `sort` (`[MultiTenantIdentityUserSortInput!]`)
    """


class CustomerAdministrationJobs(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("organization_create_async_results",)
    organization_create_async_results = sgqlc.types.Field(
        "OrganizationOrganizationCreateAsyncResultCollection",
        graphql_name="organizationCreateAsyncResults",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            OrganizationOrganizationCreateAsyncResultFilterInput
                        ),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter`
      (`OrganizationOrganizationCreateAsyncResultFilterInput!`)
    """


class DashboardActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("live_url_creation_policies", "live_urls")
    live_url_creation_policies = sgqlc.types.Field(
        "DashboardLiveUrlCreationPoliciesResult",
        graphql_name="liveUrlCreationPolicies",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        DashboardLiveUrlCreationPoliciesFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    live_urls = sgqlc.types.Field(
        "DashboardLiveUrlResult",
        graphql_name="liveUrls",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter",
                    sgqlc.types.Arg(
                        DashboardLiveUrlsFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `filter` (`DashboardLiveUrlsFilterInput`)
    """


class DashboardAddWidgetsToPageError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardAddWidgetsToPageErrorType), graphql_name="type"
    )


class DashboardAddWidgetsToPageResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardAddWidgetsToPageError), graphql_name="errors"
    )


class DashboardAreaWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )


class DashboardBarWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )


class DashboardBillboardWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries", "thresholds")
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )

    thresholds = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardBillboardWidgetThreshold"),
        graphql_name="thresholds",
    )


class DashboardBillboardWidgetThreshold(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("alert_severity", "value")
    alert_severity = sgqlc.types.Field(
        DashboardAlertSeverity, graphql_name="alertSeverity"
    )

    value = sgqlc.types.Field(Float, graphql_name="value")


class DashboardCreateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardCreateErrorType), graphql_name="type"
    )


class DashboardCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity_result", "errors")
    entity_result = sgqlc.types.Field(
        "DashboardEntityResult", graphql_name="entityResult"
    )

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardCreateError), graphql_name="errors"
    )


class DashboardDeleteError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardDeleteErrorType), graphql_name="type"
    )


class DashboardDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardDeleteError), graphql_name="errors"
    )

    status = sgqlc.types.Field(DashboardDeleteResultStatus, graphql_name="status")


class DashboardEntityOwnerInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")

    user_id = sgqlc.types.Field(Int, graphql_name="userId")


class DashboardEntityResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "description",
        "guid",
        "name",
        "owner",
        "pages",
        "permissions",
        "updated_at",
        "variables",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    description = sgqlc.types.Field(String, graphql_name="description")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    name = sgqlc.types.Field(String, graphql_name="name")

    owner = sgqlc.types.Field("DashboardOwnerInfo", graphql_name="owner")

    pages = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardPage"), graphql_name="pages"
    )

    permissions = sgqlc.types.Field(DashboardPermissions, graphql_name="permissions")

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    variables = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardVariable"), graphql_name="variables"
    )


class DashboardLineWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )


class DashboardLiveUrl(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "accounts",
        "auth",
        "created_at",
        "created_by",
        "expires_on",
        "title",
        "type",
        "url",
        "uuid",
    )
    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(AccountReference), graphql_name="accounts"
    )

    auth = sgqlc.types.Field("DashboardLiveUrlAuth", graphql_name="auth")

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    expires_on = sgqlc.types.Field(EpochMilliseconds, graphql_name="expiresOn")

    title = sgqlc.types.Field(String, graphql_name="title")

    type = sgqlc.types.Field(DashboardLiveUrlType, graphql_name="type")

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")

    uuid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="uuid")


class DashboardLiveUrlAuth(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("factors",)
    factors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("DashboardLiveUrlAuthFactor"))
        ),
        graphql_name="factors",
    )


class DashboardLiveUrlAuthFactor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("password", "type")
    password = sgqlc.types.Field(
        "DashboardLiveUrlAuthPasswordDetails", graphql_name="password"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardLiveUrlAuthType), graphql_name="type"
    )


class DashboardLiveUrlAuthPasswordDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("value",)
    value = sgqlc.types.Field(SecureValue, graphql_name="value")


class DashboardLiveUrlCreationPoliciesResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("live_url_creation_policies",)
    live_url_creation_policies = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardLiveUrlCreationPolicy"),
        graphql_name="liveUrlCreationPolicies",
    )


class DashboardLiveUrlCreationPolicy(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "live_url_creation_allowed")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    live_url_creation_allowed = sgqlc.types.Field(
        Boolean, graphql_name="liveUrlCreationAllowed"
    )


class DashboardLiveUrlError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(DashboardLiveUrlErrorType, graphql_name="type")


class DashboardLiveUrlResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "live_urls", "next_cursor", "total_count")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrlError), graphql_name="errors"
    )

    live_urls = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrl), graphql_name="liveUrls"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class DashboardMarkdownWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("text",)
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="text")


class DashboardOwnerInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")

    user_id = sgqlc.types.Field(Int, graphql_name="userId")


class DashboardPage(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "description",
        "guid",
        "name",
        "owner",
        "updated_at",
        "widgets",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    description = sgqlc.types.Field(String, graphql_name="description")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    name = sgqlc.types.Field(String, graphql_name="name")

    owner = sgqlc.types.Field(DashboardOwnerInfo, graphql_name="owner")

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    widgets = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidget"), graphql_name="widgets"
    )


class DashboardPieWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )


class DashboardResetLiveUrlPasswordResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("password",)
    password = sgqlc.types.Field(
        sgqlc.types.non_null(SecureValue), graphql_name="password"
    )


class DashboardRevokeLiveDashboardUrlResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(ID, graphql_name="id")


class DashboardRevokeLiveUrlResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "uuid")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardLiveUrlError), graphql_name="errors"
    )

    uuid = sgqlc.types.Field(ID, graphql_name="uuid")


class DashboardTableWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql_queries",)
    nrql_queries = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardWidgetNrqlQuery"), graphql_name="nrqlQueries"
    )


class DashboardUndeleteError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUndeleteErrorType), graphql_name="type"
    )


class DashboardUndeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUndeleteError), graphql_name="errors"
    )


class DashboardUpdateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdateErrorType), graphql_name="type"
    )


class DashboardUpdatePageError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdatePageErrorType), graphql_name="type"
    )


class DashboardUpdatePageResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdatePageError), graphql_name="errors"
    )


class DashboardUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity_result", "errors")
    entity_result = sgqlc.types.Field(
        DashboardEntityResult, graphql_name="entityResult"
    )

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdateError), graphql_name="errors"
    )


class DashboardUpdateWidgetsInPageError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardUpdateWidgetsInPageErrorType), graphql_name="type"
    )


class DashboardUpdateWidgetsInPageResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardUpdateWidgetsInPageError), graphql_name="errors"
    )


class DashboardVariable(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "default_values",
        "is_multi_selection",
        "items",
        "name",
        "nrql_query",
        "options",
        "replacement_strategy",
        "title",
        "type",
    )
    default_values = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardVariableDefaultItem"),
        graphql_name="defaultValues",
    )

    is_multi_selection = sgqlc.types.Field(Boolean, graphql_name="isMultiSelection")

    items = sgqlc.types.Field(
        sgqlc.types.list_of("DashboardVariableEnumItem"), graphql_name="items"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    nrql_query = sgqlc.types.Field(
        "DashboardVariableNrqlQuery", graphql_name="nrqlQuery"
    )

    options = sgqlc.types.Field("DashboardVariableOptions", graphql_name="options")

    replacement_strategy = sgqlc.types.Field(
        DashboardVariableReplacementStrategy, graphql_name="replacementStrategy"
    )

    title = sgqlc.types.Field(String, graphql_name="title")

    type = sgqlc.types.Field(DashboardVariableType, graphql_name="type")


class DashboardVariableDefaultItem(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("value",)
    value = sgqlc.types.Field("DashboardVariableDefaultValue", graphql_name="value")


class DashboardVariableDefaultValue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("string",)
    string = sgqlc.types.Field(String, graphql_name="string")


class DashboardVariableEnumItem(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("title", "value")
    title = sgqlc.types.Field(String, graphql_name="title")

    value = sgqlc.types.Field(String, graphql_name="value")


class DashboardVariableNrqlQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_ids", "query")
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")


class DashboardVariableOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("excluded", "ignore_time_range", "show_apply_action")
    excluded = sgqlc.types.Field(Boolean, graphql_name="excluded")

    ignore_time_range = sgqlc.types.Field(Boolean, graphql_name="ignoreTimeRange")

    show_apply_action = sgqlc.types.Field(Boolean, graphql_name="showApplyAction")


class DashboardWidget(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "configuration",
        "id",
        "layout",
        "linked_entities",
        "raw_configuration",
        "title",
        "visualization",
    )
    configuration = sgqlc.types.Field(
        "DashboardWidgetConfiguration", graphql_name="configuration"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    layout = sgqlc.types.Field("DashboardWidgetLayout", graphql_name="layout")

    linked_entities = sgqlc.types.Field(
        sgqlc.types.list_of(EntityOutline), graphql_name="linkedEntities"
    )

    raw_configuration = sgqlc.types.Field(
        sgqlc.types.non_null(DashboardWidgetRawConfiguration),
        graphql_name="rawConfiguration",
    )

    title = sgqlc.types.Field(String, graphql_name="title")

    visualization = sgqlc.types.Field(
        sgqlc.types.non_null("DashboardWidgetVisualization"),
        graphql_name="visualization",
    )


class DashboardWidgetConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("area", "bar", "billboard", "line", "markdown", "pie", "table")
    area = sgqlc.types.Field(DashboardAreaWidgetConfiguration, graphql_name="area")

    bar = sgqlc.types.Field(DashboardBarWidgetConfiguration, graphql_name="bar")

    billboard = sgqlc.types.Field(
        DashboardBillboardWidgetConfiguration, graphql_name="billboard"
    )

    line = sgqlc.types.Field(DashboardLineWidgetConfiguration, graphql_name="line")

    markdown = sgqlc.types.Field(
        DashboardMarkdownWidgetConfiguration, graphql_name="markdown"
    )

    pie = sgqlc.types.Field(DashboardPieWidgetConfiguration, graphql_name="pie")

    table = sgqlc.types.Field(DashboardTableWidgetConfiguration, graphql_name="table")


class DashboardWidgetLayout(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("column", "height", "row", "width")
    column = sgqlc.types.Field(Int, graphql_name="column")

    height = sgqlc.types.Field(Int, graphql_name="height")

    row = sgqlc.types.Field(Int, graphql_name="row")

    width = sgqlc.types.Field(Int, graphql_name="width")


class DashboardWidgetNrqlQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "query")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    query = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="query")


class DashboardWidgetVisualization(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(String, graphql_name="id")


class DataDictionaryAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("definition", "docs_url", "events", "name", "units")
    definition = sgqlc.types.Field(
        sgqlc.types.non_null(String),
        graphql_name="definition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        DataDictionaryTextFormat, graphql_name="format", default="PLAIN"
                    ),
                ),
            )
        ),
    )

    docs_url = sgqlc.types.Field(String, graphql_name="docsUrl")

    events = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="events",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    units = sgqlc.types.Field("DataDictionaryUnit", graphql_name="units")


class DataDictionaryDataSource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class DataDictionaryDocsStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("events",)
    events = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("DataDictionaryEvent")),
        graphql_name="events",
        args=sgqlc.types.ArgDict(
            (
                (
                    "names",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String), graphql_name="names", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `names` (`[String]`)
    """


class DataDictionaryEvent(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "data_sources", "definition", "name")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DataDictionaryAttribute))
        ),
        graphql_name="attributes",
    )

    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DataDictionaryDataSource))
        ),
        graphql_name="dataSources",
    )

    definition = sgqlc.types.Field(
        String,
        graphql_name="definition",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        DataDictionaryTextFormat, graphql_name="format", default="PLAIN"
                    ),
                ),
            )
        ),
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class DataDictionaryUnit(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("label",)
    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="label")


class DataManagementAccountLimit(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "category",
        "description",
        "documentation_link",
        "limit_reached_behavior_description",
        "name",
        "time_interval",
        "type",
        "unit",
        "value",
    )
    category = sgqlc.types.Field(DataManagementCategory, graphql_name="category")

    description = sgqlc.types.Field(String, graphql_name="description")

    documentation_link = sgqlc.types.Field(String, graphql_name="documentationLink")

    limit_reached_behavior_description = sgqlc.types.Field(
        String, graphql_name="limitReachedBehaviorDescription"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    time_interval = sgqlc.types.Field(Nrql, graphql_name="timeInterval")

    type = sgqlc.types.Field(DataManagementType, graphql_name="type")

    unit = sgqlc.types.Field(DataManagementUnit, graphql_name="unit")

    value = sgqlc.types.Field(Int, graphql_name="value")


class DataManagementAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "customizable_retention",
        "event_retention_policies",
        "event_retention_rule",
        "event_retention_rules",
        "feature_settings",
        "limits",
        "retention_audit",
        "retentions",
    )
    customizable_retention = sgqlc.types.Field(
        "DataManagementCustomizableRetention", graphql_name="customizableRetention"
    )

    event_retention_policies = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRenderedRetention"),
        graphql_name="eventRetentionPolicies",
    )

    event_retention_rule = sgqlc.types.Field(
        "DataManagementRule",
        graphql_name="eventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
            )
        ),
    )

    event_retention_rules = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRule"), graphql_name="eventRetentionRules"
    )

    feature_settings = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementFeatureSetting"),
        graphql_name="featureSettings",
    )

    limits = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementAccountLimit), graphql_name="limits"
    )

    retention_audit = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRetentionValues"),
        graphql_name="retentionAudit",
    )

    retentions = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementRetention"), graphql_name="retentions"
    )


class DataManagementAppliedRules(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "retention_in_days")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")


class DataManagementBulkCopyResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failure", "success")
    failure = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="failure")

    success = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="success")


class DataManagementCustomizableRetention(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("event_namespaces",)
    event_namespaces = sgqlc.types.Field(
        sgqlc.types.list_of("DataManagementEventNamespaces"),
        graphql_name="eventNamespaces",
    )


class DataManagementEventNamespaces(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("max_retention_in_days", "min_retention_in_days", "namespace")
    max_retention_in_days = sgqlc.types.Field(Int, graphql_name="maxRetentionInDays")

    min_retention_in_days = sgqlc.types.Field(Int, graphql_name="minRetentionInDays")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")


class DataManagementFeatureSetting(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "key", "locked", "name")
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    key = sgqlc.types.Field(String, graphql_name="key")

    locked = sgqlc.types.Field(Boolean, graphql_name="locked")

    name = sgqlc.types.Field(String, graphql_name="name")


class DataManagementNamespaceLevelRetention(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("retention_in_days",)
    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")


class DataManagementRenderedRetention(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "namespace",
        "namespace_level_retention",
        "updated_at",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    namespace_level_retention = sgqlc.types.Field(
        DataManagementNamespaceLevelRetention, graphql_name="namespaceLevelRetention"
    )

    updated_at = sgqlc.types.Field(EpochSeconds, graphql_name="updatedAt")


class DataManagementRetention(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "customizable",
        "display_name",
        "max_retention_in_days",
        "min_retention_in_days",
        "namespace",
        "source",
    )
    customizable = sgqlc.types.Field(Boolean, graphql_name="customizable")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    max_retention_in_days = sgqlc.types.Field(Int, graphql_name="maxRetentionInDays")

    min_retention_in_days = sgqlc.types.Field(Int, graphql_name="minRetentionInDays")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    source = sgqlc.types.Field(String, graphql_name="source")


class DataManagementRetentionValues(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("applied_rules", "namespace", "subscription_retention_in_days")
    applied_rules = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementAppliedRules), graphql_name="appliedRules"
    )

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    subscription_retention_in_days = sgqlc.types.Field(
        Int, graphql_name="subscriptionRetentionInDays"
    )


class DataManagementRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by_id",
        "deleted_at",
        "deleted_by_id",
        "id",
        "namespace",
        "retention_in_days",
    )
    created_at = sgqlc.types.Field(EpochSeconds, graphql_name="createdAt")

    created_by_id = sgqlc.types.Field(Int, graphql_name="createdById")

    deleted_at = sgqlc.types.Field(EpochSeconds, graphql_name="deletedAt")

    deleted_by_id = sgqlc.types.Field(Int, graphql_name="deletedById")

    id = sgqlc.types.Field(ID, graphql_name="id")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    retention_in_days = sgqlc.types.Field(Int, graphql_name="retentionInDays")


class DataSourceGapsActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("gaps",)
    gaps = sgqlc.types.Field(
        "DataSourceGapsGapsResult",
        graphql_name="gaps",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        DataSourceGapsGapsQuery, graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `query` (`DataSourceGapsGapsQuery`)
    """


class DataSourceGapsGap(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account", "detected_at", "entity", "gap_type")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    detected_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="detectedAt"
    )

    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    gap_type = sgqlc.types.Field(
        sgqlc.types.non_null("DataSourceGapsGapType"), graphql_name="gapType"
    )


class DataSourceGapsGapType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("data_source_id", "display_name", "id")
    data_source_id = sgqlc.types.Field(ID, graphql_name="dataSourceId")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    id = sgqlc.types.Field(
        sgqlc.types.non_null(DataSourceGapsGapTypeIdentifier), graphql_name="id"
    )


class DataSourceGapsGapsResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(DataSourceGapsGap)),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class DistributedTracingActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("trace", "trace_summaries")
    trace = sgqlc.types.Field(
        "DistributedTracingTrace",
        graphql_name="trace",
        args=sgqlc.types.ArgDict(
            (
                (
                    "timestamp",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="timestamp", default=None
                    ),
                ),
                (
                    "trace_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="traceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    trace_summaries = sgqlc.types.Field(
        sgqlc.types.list_of("DistributedTracingTraceSummary"),
        graphql_name="traceSummaries",
        args=sgqlc.types.ArgDict(
            (
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
                (
                    "trace_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(String))
                        ),
                        graphql_name="traceIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `time_window` (`TimeWindowInput`)
    * `trace_ids` (`[String!]!`)
    """


class DistributedTracingEntityTracingSummary(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error_trace_count", "percent_of_all_error_traces")
    error_trace_count = sgqlc.types.Field(Int, graphql_name="errorTraceCount")

    percent_of_all_error_traces = sgqlc.types.Field(
        Float, graphql_name="percentOfAllErrorTraces"
    )


class DistributedTracingLinkedSpan(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("span_id", "timestamp", "trace_id")
    span_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="spanId")

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    trace_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="traceId")


class DistributedTracingSpan(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "attributes",
        "backward_span_links",
        "client_type",
        "duration_ms",
        "entity_guid",
        "forward_span_links",
        "id",
        "name",
        "parent_id",
        "process_boundary",
        "span_anomalies",
        "timestamp",
        "trace_id",
        "transaction_name",
    )
    attributes = sgqlc.types.Field(
        DistributedTracingSpanAttributes, graphql_name="attributes"
    )

    backward_span_links = sgqlc.types.Field(
        sgqlc.types.list_of(DistributedTracingLinkedSpan),
        graphql_name="backwardSpanLinks",
    )

    client_type = sgqlc.types.Field(
        DistributedTracingSpanClientType, graphql_name="clientType"
    )

    duration_ms = sgqlc.types.Field(Milliseconds, graphql_name="durationMs")

    entity_guid = sgqlc.types.Field(String, graphql_name="entityGuid")

    forward_span_links = sgqlc.types.Field(
        sgqlc.types.list_of(DistributedTracingLinkedSpan),
        graphql_name="forwardSpanLinks",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    parent_id = sgqlc.types.Field(String, graphql_name="parentId")

    process_boundary = sgqlc.types.Field(
        sgqlc.types.non_null(DistributedTracingSpanProcessBoundary),
        graphql_name="processBoundary",
    )

    span_anomalies = sgqlc.types.Field(
        sgqlc.types.list_of("DistributedTracingSpanAnomaly"),
        graphql_name="spanAnomalies",
    )

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    trace_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="traceId")

    transaction_name = sgqlc.types.Field(String, graphql_name="transactionName")


class DistributedTracingSpanAnomaly(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("anomalous_value", "anomaly_type", "average_measure")
    anomalous_value = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="anomalousValue"
    )

    anomaly_type = sgqlc.types.Field(
        sgqlc.types.non_null(DistributedTracingSpanAnomalyType),
        graphql_name="anomalyType",
    )

    average_measure = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="averageMeasure"
    )


class DistributedTracingSpanConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("child", "parent")
    child = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="child")

    parent = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="parent")


class DistributedTracingTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "backend_duration_ms",
        "duration_ms",
        "entities",
        "entity_count",
        "id",
        "span_connections",
        "spans",
        "timestamp",
    )
    backend_duration_ms = sgqlc.types.Field(
        Milliseconds, graphql_name="backendDurationMs"
    )

    duration_ms = sgqlc.types.Field(Milliseconds, graphql_name="durationMs")

    entities = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityOutline))),
        graphql_name="entities",
    )

    entity_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="entityCount"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    span_connections = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(DistributedTracingSpanConnection)),
        graphql_name="spanConnections",
    )

    spans = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(DistributedTracingSpan))
        ),
        graphql_name="spans",
    )

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )


class DistributedTracingTraceSummary(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "duration_ms",
        "error_count",
        "root_entity_guid",
        "timestamp",
        "trace_id",
    )
    duration_ms = sgqlc.types.Field(
        sgqlc.types.non_null(Milliseconds), graphql_name="durationMs"
    )

    error_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="errorCount"
    )

    root_entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="rootEntityGuid"
    )

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="timestamp"
    )

    trace_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="traceId")


class DocumentationFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_releases",
        "current_agent_release",
        "data_dictionary",
        "knowledge",
        "time_zones",
        "whats_new",
    )
    agent_releases = sgqlc.types.Field(
        sgqlc.types.list_of(AgentReleasesAgentRelease),
        graphql_name="agentReleases",
        args=sgqlc.types.ArgDict(
            (
                (
                    "agent_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentReleasesFilter),
                        graphql_name="agentName",
                        default=None,
                    ),
                ),
                (
                    "category",
                    sgqlc.types.Arg(String, graphql_name="category", default=None),
                ),
            )
        ),
    )

    current_agent_release = sgqlc.types.Field(
        AgentReleasesAgentRelease,
        graphql_name="currentAgentRelease",
        args=sgqlc.types.ArgDict(
            (
                (
                    "agent_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentReleasesFilter),
                        graphql_name="agentName",
                        default=None,
                    ),
                ),
                (
                    "category",
                    sgqlc.types.Arg(String, graphql_name="category", default=None),
                ),
            )
        ),
    )

    data_dictionary = sgqlc.types.Field(
        DataDictionaryDocsStitchedFields, graphql_name="dataDictionary"
    )

    knowledge = sgqlc.types.Field(
        "KnowledgeDocsStitchedFields", graphql_name="knowledge"
    )

    time_zones = sgqlc.types.Field(
        sgqlc.types.list_of("TimeZoneInfo"), graphql_name="timeZones"
    )

    whats_new = sgqlc.types.Field("WhatsNewDocsStitchedFields", graphql_name="whatsNew")


class DomainType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("domain", "type")
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="domain")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EdgeAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("tracing",)
    tracing = sgqlc.types.Field("EdgeTracing", graphql_name="tracing")


class EdgeCreateSpanAttributeRuleResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateSpanAttributeRuleResponseErrorType),
        graphql_name="type",
    )


class EdgeCreateSpanAttributeRulesResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rules")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(EdgeCreateSpanAttributeRuleResponseError),
        graphql_name="errors",
    )

    rules = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeSpanAttributeRule"), graphql_name="rules"
    )


class EdgeCreateTraceFilterRuleResponses(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateSpanAttributeRulesResponse),
        graphql_name="spanAttributeRules",
    )


class EdgeCreateTraceObserverResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeCreateTraceObserverResponseError"),
        graphql_name="errors",
    )

    trace_observer = sgqlc.types.Field(
        "EdgeTraceObserver", graphql_name="traceObserver"
    )


class EdgeCreateTraceObserverResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceObserverResponseErrorType),
        graphql_name="type",
    )


class EdgeCreateTraceObserverResponses(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeCreateTraceObserverResponse))
        ),
        graphql_name="responses",
    )


class EdgeDataSource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity", "status")
    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDataSourceStatusType), graphql_name="status"
    )


class EdgeDataSourceGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("data_sources",)
    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EdgeDataSource))),
        graphql_name="dataSources",
    )


class EdgeDeleteSpanAttributeRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeDeleteSpanAttributeRuleResponseError"),
        graphql_name="errors",
    )

    rule = sgqlc.types.Field("EdgeSpanAttributeRule", graphql_name="rule")


class EdgeDeleteSpanAttributeRuleResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteSpanAttributeRuleResponseErrorType),
        graphql_name="type",
    )


class EdgeDeleteTraceFilterRuleResponses(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(EdgeDeleteSpanAttributeRuleResponse)
            )
        ),
        graphql_name="spanAttributeRules",
    )


class EdgeDeleteTraceObserverResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeDeleteTraceObserverResponseError"),
        graphql_name="errors",
    )

    trace_observer = sgqlc.types.Field(
        "EdgeTraceObserver", graphql_name="traceObserver"
    )


class EdgeDeleteTraceObserverResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceObserverResponseErrorType),
        graphql_name="type",
    )


class EdgeDeleteTraceObserverResponses(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeDeleteTraceObserverResponse))
        ),
        graphql_name="responses",
    )


class EdgeEndpoint(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("agent", "endpoint_type", "https", "status")
    agent = sgqlc.types.Field(
        sgqlc.types.non_null("EdgeAgentEndpointDetail"), graphql_name="agent"
    )

    endpoint_type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeEndpointType), graphql_name="endpointType"
    )

    https = sgqlc.types.Field(
        sgqlc.types.non_null("EdgeHttpsEndpointDetail"), graphql_name="https"
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeEndpointStatus), graphql_name="status"
    )


class EdgeRandomTraceFilter(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("percent_kept",)
    percent_kept = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="percentKept"
    )


class EdgeSpanAttributeRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("action", "id", "key", "key_operator", "value", "value_operator")
    action = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceFilterAction), graphql_name="action"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    key_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeKeyOperator), graphql_name="keyOperator"
    )

    value = sgqlc.types.Field(String, graphql_name="value")

    value_operator = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributeValueOperator),
        graphql_name="valueOperator",
    )


class EdgeSpanAttributesTraceFilter(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("span_attribute_rules",)
    span_attribute_rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeSpanAttributeRule))
        ),
        graphql_name="spanAttributeRules",
    )


class EdgeTraceFilters(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("random_trace_filter", "span_attributes_trace_filter")
    random_trace_filter = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeRandomTraceFilter), graphql_name="randomTraceFilter"
    )

    span_attributes_trace_filter = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeSpanAttributesTraceFilter),
        graphql_name="spanAttributesTraceFilter",
    )


class EdgeTraceObserver(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "compliance_types",
        "data_source_group",
        "endpoints",
        "id",
        "monitoring_account_id",
        "name",
        "provider_region",
        "status",
        "trace_filters",
    )
    compliance_types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeComplianceTypeCode)),
        graphql_name="complianceTypes",
    )

    data_source_group = sgqlc.types.Field(
        EdgeDataSourceGroup, graphql_name="dataSourceGroup"
    )

    endpoints = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EdgeEndpoint))),
        graphql_name="endpoints",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    monitoring_account_id = sgqlc.types.Field(Int, graphql_name="monitoringAccountId")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    provider_region = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeProviderRegion), graphql_name="providerRegion"
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceObserverStatus), graphql_name="status"
    )

    trace_filters = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeTraceFilters), graphql_name="traceFilters"
    )


class EdgeTracing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("trace_observers",)
    trace_observers = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EdgeTraceObserver)),
        graphql_name="traceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[Int!]`)
    """


class EdgeUpdateTraceObserverResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "trace_observer")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EdgeUpdateTraceObserverResponseError"),
        graphql_name="errors",
    )

    trace_observer = sgqlc.types.Field(EdgeTraceObserver, graphql_name="traceObserver")


class EdgeUpdateTraceObserverResponseError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeUpdateTraceObserverResponseErrorType),
        graphql_name="type",
    )


class EdgeUpdateTraceObserverResponses(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("responses",)
    responses = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EdgeUpdateTraceObserverResponse))
        ),
        graphql_name="responses",
    )


class EntityAlertViolation(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_url",
        "alert_severity",
        "closed_at",
        "label",
        "level",
        "opened_at",
        "violation_id",
        "violation_url",
    )
    agent_url = sgqlc.types.Field(String, graphql_name="agentUrl")

    alert_severity = sgqlc.types.Field(
        EntityAlertSeverity, graphql_name="alertSeverity"
    )

    closed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="closedAt")

    label = sgqlc.types.Field(String, graphql_name="label")

    level = sgqlc.types.Field(String, graphql_name="level")

    opened_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="openedAt")

    violation_id = sgqlc.types.Field(
        EntityAlertViolationInt, graphql_name="violationId"
    )

    violation_url = sgqlc.types.Field(String, graphql_name="violationUrl")


class EntityCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_by",
        "definition",
        "guid",
        "members",
        "name",
        "type",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    definition = sgqlc.types.Field(
        "EntityCollectionDefinition", graphql_name="definition"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    members = sgqlc.types.Field("EntitySearch", graphql_name="members")

    name = sgqlc.types.Field(String, graphql_name="name")

    type = sgqlc.types.Field(EntityCollectionType, graphql_name="type")


class EntityCollectionDefinition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entity_guids",
        "entity_search_query",
        "scope_accounts",
        "search_queries",
    )
    entity_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="entityGuids"
    )

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")

    scope_accounts = sgqlc.types.Field(
        "EntityCollectionScopeAccounts", graphql_name="scopeAccounts"
    )

    search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="searchQueries"
    )


class EntityCollectionScopeAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")


class EntityDeleteError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid", "message", "type")
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityDeleteErrorType), graphql_name="type"
    )


class EntityDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted_entities", "failures")
    deleted_entities = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="deletedEntities",
    )

    failures = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityDeleteError))
        ),
        graphql_name="failures",
    )


class EntityGoldenContext(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account", "guid")
    account = sgqlc.types.Field(Int, graphql_name="account")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")


class EntityGoldenContextScopedGoldenMetrics(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("context", "metrics")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )

    metrics = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("EntityGoldenMetric"))
        ),
        graphql_name="metrics",
    )


class EntityGoldenContextScopedGoldenTags(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("context", "tags")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("EntityGoldenTag"))
        ),
        graphql_name="tags",
    )


class EntityGoldenGoldenMetricsError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenGoldenMetricsErrorType), graphql_name="type"
    )


class EntityGoldenMetric(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "definition",
        "metric_name",
        "name",
        "original_definitions",
        "original_queries",
        "query",
        "title",
        "unit",
    )
    definition = sgqlc.types.Field(
        sgqlc.types.non_null("EntityGoldenMetricDefinition"), graphql_name="definition"
    )

    metric_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="metricName"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    original_definitions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("EntityGoldenOriginalDefinitionWithSelector")
            )
        ),
        graphql_name="originalDefinitions",
    )

    original_queries = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("EntityGoldenOriginalQueryWithSelector")
            )
        ),
        graphql_name="originalQueries",
    )

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricUnit), graphql_name="unit"
    )


class EntityGoldenMetricDefinition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "event_id",
        "event_object_id",
        "facet",
        "from_",
        "select",
        "where",
    )
    event_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="eventId")

    event_object_id = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenEventObjectId), graphql_name="eventObjectId"
    )

    facet = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="facet")

    from_ = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="from")

    select = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="select")

    where = sgqlc.types.Field(String, graphql_name="where")


class EntityGoldenMetricsDomainTypeScoped(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("context", "domain_type", "metrics")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )

    domain_type = sgqlc.types.Field(
        sgqlc.types.non_null(DomainType), graphql_name="domainType"
    )

    metrics = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenMetric))
        ),
        graphql_name="metrics",
    )


class EntityGoldenMetricsDomainTypeScopedResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "metrics")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenGoldenMetricsError)),
        graphql_name="errors",
    )

    metrics = sgqlc.types.Field(
        EntityGoldenMetricsDomainTypeScoped, graphql_name="metrics"
    )


class EntityGoldenOriginalDefinitionWithSelector(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("definition", "selector_value")
    definition = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricDefinition), graphql_name="definition"
    )

    selector_value = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="selectorValue"
    )


class EntityGoldenOriginalQueryWithSelector(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("query", "selector_value")
    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")

    selector_value = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="selectorValue"
    )


class EntityGoldenTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key",)
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")


class EntityGoldenTagsDomainTypeScoped(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("context", "domain_type", "tags")
    context = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenContext), graphql_name="context"
    )

    domain_type = sgqlc.types.Field(
        sgqlc.types.non_null(DomainType), graphql_name="domainType"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenTag))
        ),
        graphql_name="tags",
    )


class EntityGoldenTagsDomainTypeScopedResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "tags")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityGoldenGoldenMetricsError)),
        graphql_name="errors",
    )

    tags = sgqlc.types.Field(EntityGoldenTagsDomainTypeScoped, graphql_name="tags")


class EntityManagementActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "collection_elements",
        "collections_containing_entity",
        "entity",
        "entity_search",
    )
    collection_elements = sgqlc.types.Field(
        "EntityManagementCollectionElementsResult",
        graphql_name="collectionElements",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementCollectionElementsFilter),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    collections_containing_entity = sgqlc.types.Field(
        sgqlc.types.list_of("EntityManagementCollectionsContainingEntityResult"),
        graphql_name="collectionsContainingEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="entityId", default=None
                    ),
                ),
            )
        ),
    )

    entity = sgqlc.types.Field(
        EntityManagementEntity,
        graphql_name="entity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    entity_search = sgqlc.types.Field(
        "EntityManagementEntitySearchResult",
        graphql_name="entitySearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `query` (`String!`)
    """


class EntityManagementAgentDeployment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "completed_at",
        "fleet",
        "id",
        "managed_entity",
        "started_at",
        "status",
    )
    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")

    fleet = sgqlc.types.Field(ID, graphql_name="fleet")

    id = sgqlc.types.Field(String, graphql_name="id")

    managed_entity = sgqlc.types.Field(ID, graphql_name="managedEntity")

    started_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="startedAt")

    status = sgqlc.types.Field(String, graphql_name="status")


class EntityManagementAiAgentEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementAiAgentEntity"), graphql_name="entity"
    )


class EntityManagementAiAgentEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementAiAgentEntity"), graphql_name="entity"
    )


class EntityManagementAiAgentToolConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("exclude_tools", "include_tools", "tool")
    exclude_tools = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="excludeTools"
    )

    include_tools = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="includeTools"
    )

    tool = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementAiToolEntity"), graphql_name="tool"
    )


class EntityManagementAiToolEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementAiToolEntity"), graphql_name="entity"
    )


class EntityManagementAiToolEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementAiToolEntity"), graphql_name="entity"
    )


class EntityManagementAiToolParameter(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementAiToolParameterType), graphql_name="type"
    )


class EntityManagementAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class EntityManagementBlob(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "blob_signatures",
        "checksum",
        "checksum_algorithm",
        "content_type",
        "id",
    )
    blob_signatures = sgqlc.types.Field(
        sgqlc.types.list_of("EntityManagementBlobSignature"),
        graphql_name="blobSignatures",
    )

    checksum = sgqlc.types.Field(String, graphql_name="checksum")

    checksum_algorithm = sgqlc.types.Field(String, graphql_name="checksumAlgorithm")

    content_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="contentType"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class EntityManagementBlobSignature(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("signature", "signature_errors")
    signature = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSignatureDetails"),
        graphql_name="signature",
    )

    signature_errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="signatureErrors",
    )


class EntityManagementBudgetAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")


class EntityManagementBudgetAlertPolicy(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class EntityManagementBudgetLimit(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("consumption_metric", "value")
    consumption_metric = sgqlc.types.Field(
        EntityManagementConsumptionMetric, graphql_name="consumptionMetric"
    )

    value = sgqlc.types.Field(Int, graphql_name="value")


class EntityManagementBudgetSegment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("accounts",)
    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementBudgetAccount), graphql_name="accounts"
    )


class EntityManagementCategoryScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementCategoryScopeType), graphql_name="type"
    )


class EntityManagementCharacterTextSplitterOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("is_separator_regex", "separator")
    is_separator_regex = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isSeparatorRegex"
    )

    separator = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="separator"
    )


class EntityManagementCollectionElementsResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementEntity))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class EntityManagementCollectionEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementCollectionEntity"), graphql_name="entity"
    )


class EntityManagementCollectionEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementCollectionEntity"), graphql_name="entity"
    )


class EntityManagementCollectionsContainingEntityResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "parent_info")
    collection = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementCollectionEntity"),
        graphql_name="collection",
    )

    parent_info = sgqlc.types.Field(
        "EntityManagementParentInfo", graphql_name="parentInfo"
    )


class EntityManagementCommunicationLog(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "communicated_by",
        "communication_mode",
        "communication_status",
        "impact",
        "message",
        "timestamp",
    )
    communicated_by = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="communicatedBy"
    )

    communication_mode = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementCommunicationMode)),
        graphql_name="communicationMode",
    )

    communication_status = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementCommunicationStatus),
        graphql_name="communicationStatus",
    )

    impact = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("EntityManagementCustomerImpactEntity")
        ),
        graphql_name="impact",
    )

    message = sgqlc.types.Field(String, graphql_name="message")

    timestamp = sgqlc.types.Field(EpochMilliseconds, graphql_name="timestamp")


class EntityManagementConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "name")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementAttribute)),
        graphql_name="attributes",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class EntityManagementConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("blob", "source", "updated_at", "updated_by")
    blob = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementBlob), graphql_name="blob"
    )

    source = sgqlc.types.Field(ID, graphql_name="source")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field(String, graphql_name="updatedBy")


class EntityManagementConfluenceIntegrationCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementConfluenceIntegration"),
        graphql_name="entity",
    )


class EntityManagementConfluenceIntegrationUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementConfluenceIntegration"),
        graphql_name="entity",
    )


class EntityManagementConfluenceRagSettingsEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementConfluenceRagSettingsEntity"),
        graphql_name="entity",
    )


class EntityManagementConfluenceRagSettingsEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementConfluenceRagSettingsEntity"),
        graphql_name="entity",
    )


class EntityManagementConnectionSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class EntityManagementCount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("repo_count", "team_count")
    repo_count = sgqlc.types.Field(Int, graphql_name="repoCount")

    team_count = sgqlc.types.Field(Int, graphql_name="teamCount")


class EntityManagementDeploymentAgentConfigurationVersion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class EntityManagementDiscoverySettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "tag_keys")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    tag_keys = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="tagKeys",
    )


class EntityManagementEntityDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class EntityManagementEntityReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "scope", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScopedReference"), graphql_name="scope"
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EntityManagementEntitySearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementEntity)),
        graphql_name="entities",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class EntityManagementExecutionIssue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("status_code", "status_message")
    status_code = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementStatusCode), graphql_name="statusCode"
    )

    status_message = sgqlc.types.Field(String, graphql_name="statusMessage")


class EntityManagementExternalOwner(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementExternalOwnerType), graphql_name="type"
    )


class EntityManagementFleetControlProperties(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "applied_deployment",
        "disconnected_received",
        "environment",
        "healthy",
        "last_error",
        "last_remote_config_error",
        "last_remote_config_status",
        "start_time",
        "uid",
    )
    applied_deployment = sgqlc.types.Field(
        EntityManagementAgentDeployment, graphql_name="appliedDeployment"
    )

    disconnected_received = sgqlc.types.Field(
        Boolean, graphql_name="disconnectedReceived"
    )

    environment = sgqlc.types.Field(String, graphql_name="environment")

    healthy = sgqlc.types.Field(Boolean, graphql_name="healthy")

    last_error = sgqlc.types.Field(String, graphql_name="lastError")

    last_remote_config_error = sgqlc.types.Field(
        String, graphql_name="lastRemoteConfigError"
    )

    last_remote_config_status = sgqlc.types.Field(
        String, graphql_name="lastRemoteConfigStatus"
    )

    start_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="startTime")

    uid = sgqlc.types.Field(String, graphql_name="uid")


class EntityManagementFleetDeployment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "canary_managed_entities",
        "configs_changed",
        "configuration_versions",
        "deployed_at",
        "description",
        "entities_changed",
        "managed_entities_changed",
        "managed_entities_required_to_change",
        "metadata",
        "name",
        "status",
        "supervised_agent_entities_changed",
        "supervised_agent_entities_required_to_change",
    )
    canary_managed_entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
        graphql_name="canaryManagedEntities",
    )

    configs_changed = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="configsChanged"
    )

    configuration_versions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
        graphql_name="configurationVersions",
    )

    deployed_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="deployedAt"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    entities_changed = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="entitiesChanged"
    )

    managed_entities_changed = sgqlc.types.Field(
        Int, graphql_name="managedEntitiesChanged"
    )

    managed_entities_required_to_change = sgqlc.types.Field(
        Int, graphql_name="managedEntitiesRequiredToChange"
    )

    metadata = sgqlc.types.Field(
        "EntityManagementUserMetadata", graphql_name="metadata"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    status = sgqlc.types.Field(String, graphql_name="status")

    supervised_agent_entities_changed = sgqlc.types.Field(
        Int, graphql_name="supervisedAgentEntitiesChanged"
    )

    supervised_agent_entities_required_to_change = sgqlc.types.Field(
        Int, graphql_name="supervisedAgentEntitiesRequiredToChange"
    )


class EntityManagementGenericEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEntity), graphql_name="entity"
    )


class EntityManagementGitHubSyncOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("sync_repositories", "sync_teams")
    sync_repositories = sgqlc.types.Field(Boolean, graphql_name="syncRepositories")

    sync_teams = sgqlc.types.Field(Boolean, graphql_name="syncTeams")


class EntityManagementGitRepositoryEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementGitRepositoryEntity"),
        graphql_name="entity",
    )


class EntityManagementGitRepositoryEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementGitRepositoryEntity"),
        graphql_name="entity",
    )


class EntityManagementGithubAppTokenCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "app_id",
        "installation_id",
        "private_key_reference",
        "token_field_name",
        "token_relative_url",
    )
    app_id = sgqlc.types.Field(String, graphql_name="appId")

    installation_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="installationId"
    )

    private_key_reference = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSecretReference"),
        graphql_name="privateKeyReference",
    )

    token_field_name = sgqlc.types.Field(String, graphql_name="tokenFieldName")

    token_relative_url = sgqlc.types.Field(String, graphql_name="tokenRelativeUrl")


class EntityManagementGithubCredentials(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("app_token", "personal_access_token")
    app_token = sgqlc.types.Field(
        EntityManagementGithubAppTokenCredential, graphql_name="appToken"
    )

    personal_access_token = sgqlc.types.Field(
        "EntityManagementSecretReference", graphql_name="personalAccessToken"
    )


class EntityManagementInboxIssueCategoryEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementInboxIssueCategoryEntity"),
        graphql_name="entity",
    )


class EntityManagementInboxIssueCategoryEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementInboxIssueCategoryEntity"),
        graphql_name="entity",
    )


class EntityManagementInfrastructureManager(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("type", "version")
    type = sgqlc.types.Field(String, graphql_name="type")

    version = sgqlc.types.Field(String, graphql_name="version")


class EntityManagementJiraBasicAuthCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key", "username")
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSecretReference"), graphql_name="apiKey"
    )

    username = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSecretReference"), graphql_name="username"
    )


class EntityManagementJiraCredentials(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("basic_auth", "oauth", "personal_access_token")
    basic_auth = sgqlc.types.Field(
        EntityManagementJiraBasicAuthCredential, graphql_name="basicAuth"
    )

    oauth = sgqlc.types.Field(
        "EntityManagementJiraOAuthCredential", graphql_name="oauth"
    )

    personal_access_token = sgqlc.types.Field(
        "EntityManagementSecretReference", graphql_name="personalAccessToken"
    )


class EntityManagementJiraOAuthCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("client_id", "client_secret", "token_field_name", "token_url")
    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="clientId")

    client_secret = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSecretReference"),
        graphql_name="clientSecret",
    )

    token_field_name = sgqlc.types.Field(String, graphql_name="tokenFieldName")

    token_url = sgqlc.types.Field(String, graphql_name="tokenUrl")


class EntityManagementLlmConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cache_seed", "model", "temperature")
    cache_seed = sgqlc.types.Field(String, graphql_name="cacheSeed")

    model = sgqlc.types.Field(String, graphql_name="model")

    temperature = sgqlc.types.Field(Float, graphql_name="temperature")


class EntityManagementMarkdownTextSplitterOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("headers_to_split_on", "return_each_line")
    headers_to_split_on = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)),
        graphql_name="headersToSplitOn",
    )

    return_each_line = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="returnEachLine"
    )


class EntityManagementMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "updated_at",
        "updated_by",
        "version",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field(EntityManagementActor, graphql_name="createdBy")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field(EntityManagementActor, graphql_name="updatedBy")

    version = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="version")


class EntityManagementNewRelicBasicAuthCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key", "type")
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementSecretReference"), graphql_name="apiKey"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementKeyType), graphql_name="type"
    )


class EntityManagementNrqlRuleEngine(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("accounts", "join_accounts", "query")
    accounts = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accounts",
    )

    join_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="joinAccounts"
    )

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")


class EntityManagementParentInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("parent_entity", "parent_field")
    parent_entity = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEntity), graphql_name="parentEntity"
    )

    parent_field = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="parentField"
    )


class EntityManagementPerformanceInboxSettingEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementPerformanceInboxSettingEntity"),
        graphql_name="entity",
    )


class EntityManagementPerformanceInboxSettingEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementPerformanceInboxSettingEntity"),
        graphql_name="entity",
    )


class EntityManagementPipelineCloudRuleEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementPipelineCloudRuleEntity"),
        graphql_name="entity",
    )


class EntityManagementPipelineCloudRuleEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementPipelineCloudRuleEntity"),
        graphql_name="entity",
    )


class EntityManagementRagToolEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementRagToolEntity"), graphql_name="entity"
    )


class EntityManagementRagToolEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementRagToolEntity"), graphql_name="entity"
    )


class EntityManagementRelationship(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("metadata", "source", "tags", "target", "type")
    metadata = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementMetadata), graphql_name="metadata"
    )

    source = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEntityReference), graphql_name="source"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("EntityManagementTag")),
        graphql_name="tags",
    )

    target = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEntityReference), graphql_name="target"
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EntityManagementRelationshipCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("relationship",)
    relationship = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementRelationship), graphql_name="relationship"
    )


class EntityManagementRelationshipDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("source_id", "target_id", "type")
    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="sourceId")

    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="targetId")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EntityManagementRelationshipUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("relationship",)
    relationship = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementRelationship), graphql_name="relationship"
    )


class EntityManagementRepositoryLicense(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "url")
    name = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementLicenseName), graphql_name="name"
    )

    url = sgqlc.types.Field(String, graphql_name="url")


class EntityManagementRingDeploymentTracker(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("completed_at", "name", "started_at", "status")
    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    started_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="startedAt")

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")


class EntityManagementRuleExecutionStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "checked_entities",
        "executed_at",
        "execution_issues",
        "execution_status",
    )
    checked_entities = sgqlc.types.Field(Int, graphql_name="checkedEntities")

    executed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="executedAt")

    execution_issues = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementExecutionIssue),
        graphql_name="executionIssues",
    )

    execution_status = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementExecutionStatus),
        graphql_name="executionStatus",
    )


class EntityManagementSchedule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cron_expression", "enabled", "period", "schedule_at")
    cron_expression = sgqlc.types.Field(String, graphql_name="cronExpression")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    period = sgqlc.types.Field(Int, graphql_name="period")

    schedule_at = sgqlc.types.Field(DateTime, graphql_name="scheduleAt")


class EntityManagementScopedReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEntityScope), graphql_name="type"
    )


class EntityManagementScorecardEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScorecardEntity"), graphql_name="entity"
    )


class EntityManagementScorecardEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScorecardEntity"), graphql_name="entity"
    )


class EntityManagementScorecardRuleEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScorecardRuleEntity"),
        graphql_name="entity",
    )


class EntityManagementScorecardRuleEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementScorecardRuleEntity"),
        graphql_name="entity",
    )


class EntityManagementSecretReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key_name", "namespace")
    key_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="keyName")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")


class EntityManagementServiceNowApiKeyCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key",)
    api_key = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSecretReference), graphql_name="apiKey"
    )


class EntityManagementServiceNowCredentials(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("basic_auth", "oauth")
    basic_auth = sgqlc.types.Field(
        EntityManagementServiceNowApiKeyCredential, graphql_name="basicAuth"
    )

    oauth = sgqlc.types.Field(
        "EntityManagementServiceNowOAuthCredential", graphql_name="oauth"
    )


class EntityManagementServiceNowOAuthCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "client_id",
        "client_secret",
        "token_field_name",
        "token_relative_url",
    )
    client_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="clientId")

    client_secret = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSecretReference),
        graphql_name="clientSecret",
    )

    token_field_name = sgqlc.types.Field(String, graphql_name="tokenFieldName")

    token_relative_url = sgqlc.types.Field(String, graphql_name="tokenRelativeUrl")


class EntityManagementSignatureDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key_id", "signature", "signing_algorithm")
    key_id = sgqlc.types.Field(String, graphql_name="keyId")

    signature = sgqlc.types.Field(String, graphql_name="signature")

    signing_algorithm = sgqlc.types.Field(String, graphql_name="signingAlgorithm")


class EntityManagementSigningCredential(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("signing_algorithm", "signing_key_reference")
    signing_algorithm = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSigningAlgorithm),
        graphql_name="signingAlgorithm",
    )

    signing_key_reference = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSecretReference),
        graphql_name="signingKeyReference",
    )


class EntityManagementSyncGroupRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("conditions",)
    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("EntityManagementSyncGroupRuleCondition")
            )
        ),
        graphql_name="conditions",
    )


class EntityManagementSyncGroupRuleCondition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("type", "value")
    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSyncGroupRuleConditionType),
        graphql_name="type",
    )

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class EntityManagementSyncGroupsSettings(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "rules")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSyncGroupRule)),
        graphql_name="rules",
    )


class EntityManagementTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="values",
    )


class EntityManagementTeamEntityCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementTeamEntity"), graphql_name="entity"
    )


class EntityManagementTeamEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementTeamEntity"), graphql_name="entity"
    )


class EntityManagementTeamExternalIntegration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("external_id", "type")
    external_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="externalId")

    type = sgqlc.types.Field(
        EntityManagementTeamExternalIntegrationType, graphql_name="type"
    )


class EntityManagementTeamResource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("content", "title", "type")
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="content")

    title = sgqlc.types.Field(String, graphql_name="title")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class EntityManagementTeamsOrganizationSettingsEntityUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("EntityManagementTeamsOrganizationSettingsEntity"),
        graphql_name="entity",
    )


class EntityManagementTemplateField(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("direction", "name", "required", "template")
    direction = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementDirection), graphql_name="direction"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    required = sgqlc.types.Field(Boolean, graphql_name="required")

    template = sgqlc.types.Field(String, graphql_name="template")


class EntityManagementTokenTextSplitterOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("encoding_name",)
    encoding_name = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEncodingName), graphql_name="encodingName"
    )


class EntityManagementUserMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "updated_at", "user_id")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    user_id = sgqlc.types.Field(ID, graphql_name="userId")


class EntityManagementWorkItemAssignment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("identifier", "type")
    identifier = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="identifier"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementAssignmentType), graphql_name="type"
    )


class EntityManagementWorkItemAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class EntityManagementWorkflowDefinitionVersion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "version")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    version = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="version")


class EntityRelationship(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(EntityRelationshipType, graphql_name="type")


class EntityRelationshipNode(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")


class EntityRelationshipRelatedEntitiesResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(EntityRelationshipEdge))
        ),
        graphql_name="results",
    )


class EntityRelationshipUserDefinedCreateOrReplaceResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(
                "EntityRelationshipUserDefinedCreateOrReplaceResultError"
            )
        ),
        graphql_name="errors",
    )


class EntityRelationshipUserDefinedCreateOrReplaceResultError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedCreateOrReplaceErrorType),
        graphql_name="type",
    )


class EntityRelationshipUserDefinedDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("EntityRelationshipUserDefinedDeleteResultError")
        ),
        graphql_name="errors",
    )


class EntityRelationshipUserDefinedDeleteResultError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedDeleteErrorType),
        graphql_name="type",
    )


class EntityRelationshipVertex(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "entity", "guid")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")


class EntitySearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "counts", "query", "results", "types")
    count = sgqlc.types.Field(Int, graphql_name="count")

    counts = sgqlc.types.Field(
        sgqlc.types.list_of("EntitySearchCounts"),
        graphql_name="counts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "facet",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(EntitySearchCountsFacet)
                        ),
                        graphql_name="facet",
                        default=None,
                    ),
                ),
                (
                    "facet_tags",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(String)),
                        graphql_name="facetTags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `facet` (`[EntitySearchCountsFacet!]`)
    * `facet_tags` (`[String!]`)
    """

    query = sgqlc.types.Field(String, graphql_name="query")

    results = sgqlc.types.Field(
        "EntitySearchResult",
        graphql_name="results",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )

    types = sgqlc.types.Field(
        sgqlc.types.list_of("EntitySearchTypes"), graphql_name="types"
    )


class EntitySearchCounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "facet")
    count = sgqlc.types.Field(Int, graphql_name="count")

    facet = sgqlc.types.Field(AttributeMap, graphql_name="facet")


class EntitySearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "next_cursor")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(EntityOutline), graphql_name="entities"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class EntitySearchTypes(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "domain", "entity_type", "type")
    count = sgqlc.types.Field(Int, graphql_name="count")

    domain = sgqlc.types.Field(String, graphql_name="domain")

    entity_type = sgqlc.types.Field(EntityType, graphql_name="entityType")

    type = sgqlc.types.Field(String, graphql_name="type")


class EntityTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(String, graphql_name="key")

    values = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="values")


class EntityTagValueWithMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("mutable", "value")
    mutable = sgqlc.types.Field(Boolean, graphql_name="mutable")

    value = sgqlc.types.Field(String, graphql_name="value")


class EntityTagWithMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(String, graphql_name="key")

    values = sgqlc.types.Field(
        sgqlc.types.list_of(EntityTagValueWithMetadata), graphql_name="values"
    )


class ErrorsInboxActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error_group", "error_group_state_types", "error_groups")
    error_group = sgqlc.types.Field(
        "ErrorsInboxErrorGroup",
        graphql_name="errorGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "error_event",
                    sgqlc.types.Arg(
                        ErrorsInboxErrorEventInput,
                        graphql_name="errorEvent",
                        default=None,
                    ),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
            )
        ),
    )

    error_group_state_types = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("ErrorsInboxErrorGroupStateTypeResult")
        ),
        graphql_name="errorGroupStateTypes",
    )

    error_groups = sgqlc.types.Field(
        "ErrorsInboxErrorGroupsResponse",
        graphql_name="errorGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "entity_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid)),
                        graphql_name="entityGuids",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        ErrorsInboxErrorGroupSearchFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                ("query", sgqlc.types.Arg(String, graphql_name="query", default=None)),
                (
                    "sort_by",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(ErrorsInboxErrorGroupSortOrderInput)
                        ),
                        graphql_name="sortBy",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `entity_guids` (`[EntityGuid!]`)
    * `filter` (`ErrorsInboxErrorGroupSearchFilterInput`)
    * `query` (`String`)
    * `sort_by` (`[ErrorsInboxErrorGroupSortOrderInput!]`)
    * `time_window` (`TimeWindowInput`)
    """


class ErrorsInboxAssignErrorGroupResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("assignment", "errors")
    assignment = sgqlc.types.Field("ErrorsInboxAssignment", graphql_name="assignment")

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ErrorsInboxAssignErrorGroupError")),
        graphql_name="errors",
    )


class ErrorsInboxAssignment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "user_info")
    email = sgqlc.types.Field(String, graphql_name="email")

    user_info = sgqlc.types.Field("UserReference", graphql_name="userInfo")


class ErrorsInboxDeleteErrorGroupResourceResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("resource_id",)
    resource_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="resourceId")


class ErrorsInboxErrorGroupStateTypeResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="type")


class ErrorsInboxErrorGroupsResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ErrorsInboxErrorGroupOutline")),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class ErrorsInboxOccurrences(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("expected_count", "first_seen_at", "last_seen_at", "total_count")
    expected_count = sgqlc.types.Field(Int, graphql_name="expectedCount")

    first_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="firstSeenAt")

    last_seen_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastSeenAt")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class ErrorsInboxResourcesResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxResource))
        ),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class ErrorsInboxUpdateErrorGroupStateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("resolve_in_next_version", "state", "versions")
    resolve_in_next_version = sgqlc.types.Field(
        Boolean, graphql_name="resolveInNextVersion"
    )

    state = sgqlc.types.Field(ErrorsInboxErrorGroupState, graphql_name="state")

    versions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ErrorsInboxVersion")),
        graphql_name="versions",
    )


class ErrorsInboxVersion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(String, graphql_name="name")


class EventAttributeDefinition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("definition", "documentation_url", "label", "name")
    definition = sgqlc.types.Field(String, graphql_name="definition")

    documentation_url = sgqlc.types.Field(String, graphql_name="documentationUrl")

    label = sgqlc.types.Field(String, graphql_name="label")

    name = sgqlc.types.Field(String, graphql_name="name")


class EventDefinition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "definition", "label", "name")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(EventAttributeDefinition), graphql_name="attributes"
    )

    definition = sgqlc.types.Field(String, graphql_name="definition")

    label = sgqlc.types.Field(String, graphql_name="label")

    name = sgqlc.types.Field(String, graphql_name="name")


class EventsToMetricsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("all_rules", "rules_by_id")
    all_rules = sgqlc.types.Field(
        "EventsToMetricsListRuleResult", graphql_name="allRules"
    )

    rules_by_id = sgqlc.types.Field(
        "EventsToMetricsListRuleResult",
        graphql_name="rulesById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ruleIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `rule_ids` (`[ID]!`)
    """


class EventsToMetricsCreateRuleFailure(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsError"), graphql_name="errors"
    )

    submitted = sgqlc.types.Field(
        "EventsToMetricsCreateRuleSubmission", graphql_name="submitted"
    )


class EventsToMetricsCreateRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsCreateRuleFailure), graphql_name="failures"
    )

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="successes"
    )


class EventsToMetricsCreateRuleSubmission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "description", "name", "nrql")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    description = sgqlc.types.Field(String, graphql_name="description")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")


class EventsToMetricsDeleteRuleFailure(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsError"), graphql_name="errors"
    )

    submitted = sgqlc.types.Field(
        "EventsToMetricsDeleteRuleSubmission", graphql_name="submitted"
    )


class EventsToMetricsDeleteRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsDeleteRuleFailure), graphql_name="failures"
    )

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="successes"
    )


class EventsToMetricsDeleteRuleSubmission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")


class EventsToMetricsError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "reason")
    description = sgqlc.types.Field(String, graphql_name="description")

    reason = sgqlc.types.Field(EventsToMetricsErrorReason, graphql_name="reason")


class EventsToMetricsListRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("rules",)
    rules = sgqlc.types.Field(
        sgqlc.types.list_of("EventsToMetricsRule"), graphql_name="rules"
    )


class EventsToMetricsRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "description",
        "enabled",
        "id",
        "name",
        "nrql",
        "updated_at",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )


class EventsToMetricsUpdateRuleFailure(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "submitted")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsError), graphql_name="errors"
    )

    submitted = sgqlc.types.Field(
        "EventsToMetricsUpdateRuleSubmission", graphql_name="submitted"
    )


class EventsToMetricsUpdateRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsUpdateRuleFailure), graphql_name="failures"
    )

    successes = sgqlc.types.Field(
        sgqlc.types.list_of(EventsToMetricsRule), graphql_name="successes"
    )


class EventsToMetricsUpdateRuleSubmission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "enabled", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")


class FleetControlActor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class FleetControlActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("fleet_members", "health_check")
    fleet_members = sgqlc.types.Field(
        "FleetControlFleetMembersItemsResult",
        graphql_name="fleetMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlFleetMembersFilterInput),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    health_check = sgqlc.types.Field(String, graphql_name="healthCheck")


class FleetControlCollectionEntity(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "name", "scope", "tags", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlMetadata"), graphql_name="metadata"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlScopedReference"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("FleetControlTag")),
        graphql_name="tags",
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class FleetControlConfigurationVersionList(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class FleetControlCreateFleetResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlFleetEntityResult"), graphql_name="entity"
    )


class FleetControlDeleteFleetResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class FleetControlDeployFleetResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("fleet_guid", "fleet_id")
    fleet_guid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetGuid")

    fleet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetId")


class FleetControlDeployResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class FleetControlFleetDeploymentCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlFleetDeploymentResult"), graphql_name="entity"
    )


class FleetControlFleetDeploymentDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class FleetControlFleetDeploymentResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "configuration_version_list",
        "description",
        "fleet_id",
        "id",
        "metadata",
        "name",
        "phase",
        "rings_deployment_tracker",
        "scope",
        "tags",
        "type",
    )
    configuration_version_list = sgqlc.types.Field(
        sgqlc.types.list_of(FleetControlConfigurationVersionList),
        graphql_name="configurationVersionList",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    fleet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlMetadata"), graphql_name="metadata"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    phase = sgqlc.types.Field(FleetControlFleetDeploymentPhase, graphql_name="phase")

    rings_deployment_tracker = sgqlc.types.Field(
        sgqlc.types.list_of("FleetControlRingsDeploymentTracker"),
        graphql_name="ringsDeploymentTracker",
    )

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlScopedReference"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("FleetControlTag")),
        graphql_name="tags",
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class FleetControlFleetDeploymentUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null(FleetControlFleetDeploymentResult), graphql_name="entity"
    )


class FleetControlFleetEntityResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "id",
        "managed_entity_rings",
        "managed_entity_type",
        "metadata",
        "name",
        "product",
        "scope",
        "tags",
        "type",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    managed_entity_rings = sgqlc.types.Field(
        FleetControlCollectionEntity, graphql_name="managedEntityRings"
    )

    managed_entity_type = sgqlc.types.Field(
        sgqlc.types.non_null(FleetControlManagedEntityType),
        graphql_name="managedEntityType",
    )

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlMetadata"), graphql_name="metadata"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    product = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="product"
    )

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlScopedReference"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("FleetControlTag")),
        graphql_name="tags",
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class FleetControlFleetMemberEntityResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "name", "scope", "tags", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlMetadata"), graphql_name="metadata"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("FleetControlScopedReference"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("FleetControlTag")),
        graphql_name="tags",
    )

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class FleetControlFleetMemberRing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity_ids", "ring")
    entity_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="entityIds"
    )

    ring = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="ring")


class FleetControlFleetMembersItemsResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(FleetControlFleetMemberEntityResult)
            )
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class FleetControlFleetMembersResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("fleet_id", "members")
    fleet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetId")

    members = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(FleetControlFleetMemberRing)),
        graphql_name="members",
    )


class FleetControlMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by", "updated_at", "updated_by")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field(FleetControlActor, graphql_name="createdBy")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field(FleetControlActor, graphql_name="updatedBy")


class FleetControlRingsDeploymentTracker(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("completed_at", "name", "started_at", "status")
    completed_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="completedAt")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    started_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="startedAt")

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")


class FleetControlScopedReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(FleetControlEntityScope), graphql_name="type"
    )


class FleetControlTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "values")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    values = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="values",
    )


class FleetControlUpdateFleetResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity",)
    entity = sgqlc.types.Field(
        sgqlc.types.non_null(FleetControlFleetEntityResult), graphql_name="entity"
    )


class HistoricalDataExportAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("export", "exports")
    export = sgqlc.types.Field(
        "HistoricalDataExportCustomerExportResponse",
        graphql_name="export",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    exports = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("HistoricalDataExportCustomerExportResponse")
        ),
        graphql_name="exports",
    )


class HistoricalDataExportCustomerExportResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "available_until",
        "begin_time",
        "created_at",
        "end_time",
        "event_count",
        "event_types",
        "id",
        "message",
        "nrql",
        "percent_complete",
        "results",
        "status",
        "user",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    available_until = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="availableUntil"
    )

    begin_time = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="beginTime"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    end_time = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="endTime"
    )

    event_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="eventCount"
    )

    event_types = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="eventTypes",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    message = sgqlc.types.Field(String, graphql_name="message")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")

    percent_complete = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="percentComplete"
    )

    results = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="results")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(HistoricalDataExportStatus), graphql_name="status"
    )

    user = sgqlc.types.Field("UserReference", graphql_name="user")


class IncidentIntelligenceEnvironmentAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("current_environment",)
    current_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResult",
        graphql_name="currentEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `kind`
      (`IncidentIntelligenceEnvironmentSupportedEnvironmentKind`)
    """


class IncidentIntelligenceEnvironmentActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authorized_environments",
        "consented_accounts",
        "current_environment",
    )
    authorized_environments = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(
                "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
            )
        ),
        graphql_name="authorizedEnvironments",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )

    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )

    current_environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResult",
        graphql_name="currentEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "kind",
                    sgqlc.types.Arg(
                        IncidentIntelligenceEnvironmentSupportedEnvironmentKind,
                        graphql_name="kind",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `kind`
      (`IncidentIntelligenceEnvironmentSupportedEnvironmentKind`)
    """


class IncidentIntelligenceEnvironmentConsentAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("consented_accounts", "result")
    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentAccountsResult),
        graphql_name="result",
    )


class IncidentIntelligenceEnvironmentConsentAuthorizedAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("consented_accounts", "result")
    consented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("IncidentIntelligenceEnvironmentConsentedAccount")
        ),
        graphql_name="consentedAccounts",
    )

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentAccountsResult),
        graphql_name="result",
    )


class IncidentIntelligenceEnvironmentConsentedAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account",)
    account = sgqlc.types.Field(AccountReference, graphql_name="account")


class IncidentIntelligenceEnvironmentCreateEnvironment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("result", "result_details")
    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentCreateEnvironmentResult),
        graphql_name="result",
    )

    result_details = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails",
        graphql_name="resultDetails",
    )


class IncidentIntelligenceEnvironmentCurrentEnvironmentResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("environment", "reason", "reason_details")
    environment = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment",
        graphql_name="environment",
    )

    reason = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentCurrentEnvironmentResultReason,
        graphql_name="reason",
    )

    reason_details = sgqlc.types.Field(
        "IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails",
        graphql_name="reasonDetails",
    )


class IncidentIntelligenceEnvironmentDeleteEnvironment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("result",)
    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentDeleteEnvironmentResult),
        graphql_name="result",
    )


class IncidentIntelligenceEnvironmentDissentAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("dissented_accounts", "result")
    dissented_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(IncidentIntelligenceEnvironmentConsentedAccount)
        ),
        graphql_name="dissentedAccounts",
    )

    result = sgqlc.types.Field(
        sgqlc.types.non_null(IncidentIntelligenceEnvironmentDissentAccountsResult),
        graphql_name="result",
    )


class IncidentIntelligenceEnvironmentEnvironmentAlreadyExists(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "environment", "master_account_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    environment = sgqlc.types.Field(
        sgqlc.types.non_null(
            "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
        ),
        graphql_name="environment",
    )

    master_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="masterAccountId"
    )


class IncidentIntelligenceEnvironmentEnvironmentCreated(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("environment",)
    environment = sgqlc.types.Field(
        sgqlc.types.non_null(
            "IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment"
        ),
        graphql_name="environment",
    )


class IncidentIntelligenceEnvironmentIncidentIntelligenceEnvironment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "associated_authorized_accounts",
        "billing_cycle_quota",
        "created_at",
        "created_by",
        "incident_intelligence_account",
        "is_consent_required",
        "is_entitled_for_ai",
        "is_free_tier",
        "kind",
        "master_account",
        "name",
        "was_consented",
    )
    associated_authorized_accounts = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(AccountReference)),
        graphql_name="associatedAuthorizedAccounts",
    )

    billing_cycle_quota = sgqlc.types.Field(Int, graphql_name="billingCycleQuota")

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    incident_intelligence_account = sgqlc.types.Field(
        AccountReference, graphql_name="incidentIntelligenceAccount"
    )

    is_consent_required = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isConsentRequired"
    )

    is_entitled_for_ai = sgqlc.types.Field(Boolean, graphql_name="isEntitledForAi")

    is_free_tier = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isFreeTier"
    )

    kind = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentEnvironmentKind, graphql_name="kind"
    )

    master_account = sgqlc.types.Field(AccountReference, graphql_name="masterAccount")

    name = sgqlc.types.Field(String, graphql_name="name")

    was_consented = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="wasConsented"
    )


class IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(sgqlc.types.list_of(Int), graphql_name="accountIds")


class IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id",)
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")


class IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "capability")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    capability = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="capability"
    )


class InfrastructureHostSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "cpu_utilization_percent",
        "disk_used_percent",
        "memory_used_percent",
        "network_receive_rate",
        "network_transmit_rate",
        "services_count",
    )
    cpu_utilization_percent = sgqlc.types.Field(
        Float, graphql_name="cpuUtilizationPercent"
    )

    disk_used_percent = sgqlc.types.Field(Float, graphql_name="diskUsedPercent")

    memory_used_percent = sgqlc.types.Field(Float, graphql_name="memoryUsedPercent")

    network_receive_rate = sgqlc.types.Field(Float, graphql_name="networkReceiveRate")

    network_transmit_rate = sgqlc.types.Field(Float, graphql_name="networkTransmitRate")

    services_count = sgqlc.types.Field(Int, graphql_name="servicesCount")


class InstallationAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("install_status", "recipe_events", "recipes", "statuses")
    install_status = sgqlc.types.Field(
        "InstallationInstallStatus", graphql_name="installStatus"
    )

    recipe_events = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("InstallationRecipeEvent")),
        graphql_name="recipeEvents",
    )

    recipes = sgqlc.types.Field(
        "InstallationRecipeEventResult",
        graphql_name="recipes",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "install_id",
                    sgqlc.types.Arg(String, graphql_name="installId", default=None),
                ),
            )
        ),
    )

    statuses = sgqlc.types.Field(
        "InstallationInstallStatusResult",
        graphql_name="statuses",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "install_id",
                    sgqlc.types.Arg(String, graphql_name="installId", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `install_id` (`String`)
    """


class InstallationInstallStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "deployed_by",
        "enabled_proxy",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "is_unsupported",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "state",
        "targeted_install",
        "timestamp",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )

    deployed_by = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="deployedBy"
    )

    enabled_proxy = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enabledProxy"
    )

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusError"), graphql_name="error"
    )

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")

    install_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="installId")

    install_library_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="installLibraryVersion"
    )

    is_unsupported = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isUnsupported"
    )

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )

    redirect_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="redirectUrl"
    )

    state = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationInstallStateType), graphql_name="state"
    )

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )

    timestamp = sgqlc.types.Field(EpochSeconds, graphql_name="timestamp")


class InstallationInstallStatusResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cursor", "install_statuses", "total_count")
    cursor = sgqlc.types.Field(String, graphql_name="cursor")

    install_statuses = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(InstallationInstallStatus)),
        graphql_name="installStatuses",
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class InstallationRecipeEvent(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "cli_version",
        "complete",
        "display_name",
        "entity_guid",
        "error",
        "host_name",
        "install_id",
        "install_library_version",
        "kernel_arch",
        "kernel_version",
        "log_file_path",
        "metadata",
        "name",
        "os",
        "platform",
        "platform_family",
        "platform_version",
        "redirect_url",
        "status",
        "targeted_install",
        "task_path",
        "timestamp",
        "validation_duration_milliseconds",
    )
    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )

    complete = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="complete")

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    error = sgqlc.types.Field(
        sgqlc.types.non_null("InstallationStatusError"), graphql_name="error"
    )

    host_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="hostName")

    install_id = sgqlc.types.Field(ID, graphql_name="installId")

    install_library_version = sgqlc.types.Field(
        SemVer, graphql_name="installLibraryVersion"
    )

    kernel_arch = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="kernelArch"
    )

    kernel_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="kernelVersion"
    )

    log_file_path = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="logFilePath"
    )

    metadata = sgqlc.types.Field(InstallationRawMetadata, graphql_name="metadata")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="os")

    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="platform")

    platform_family = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="platformFamily"
    )

    platform_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="platformVersion"
    )

    redirect_url = sgqlc.types.Field(String, graphql_name="redirectUrl")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationRecipeStatusType), graphql_name="status"
    )

    targeted_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="targetedInstall"
    )

    task_path = sgqlc.types.Field(String, graphql_name="taskPath")

    timestamp = sgqlc.types.Field(
        sgqlc.types.non_null(EpochSeconds), graphql_name="timestamp"
    )

    validation_duration_milliseconds = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds),
        graphql_name="validationDurationMilliseconds",
    )


class InstallationRecipeEventResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("cursor", "recipe_events", "total_count")
    cursor = sgqlc.types.Field(String, graphql_name="cursor")

    recipe_events = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(InstallationRecipeEvent)),
        graphql_name="recipeEvents",
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class InstallationStatusError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("details", "message", "optimized_message")
    details = sgqlc.types.Field(String, graphql_name="details")

    message = sgqlc.types.Field(String, graphql_name="message")

    optimized_message = sgqlc.types.Field(String, graphql_name="optimizedMessage")


class KeyTransactionApplication(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entity", "guid")
    entity = sgqlc.types.Field(EntityOutline, graphql_name="entity")

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")


class KeyTransactionCreateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "apdex_target",
        "application",
        "browser_apdex_target",
        "guid",
        "metric_name",
        "name",
    )
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")

    application = sgqlc.types.Field(
        sgqlc.types.non_null(KeyTransactionApplication), graphql_name="application"
    )

    browser_apdex_target = sgqlc.types.Field(Float, graphql_name="browserApdexTarget")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    metric_name = sgqlc.types.Field(String, graphql_name="metricName")

    name = sgqlc.types.Field(String, graphql_name="name")


class KeyTransactionDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("success",)
    success = sgqlc.types.Field(Boolean, graphql_name="success")


class KeyTransactionUpdateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("apdex_target", "application", "browser_apdex_target", "name")
    apdex_target = sgqlc.types.Field(Float, graphql_name="apdexTarget")

    application = sgqlc.types.Field(
        sgqlc.types.non_null(KeyTransactionApplication), graphql_name="application"
    )

    browser_apdex_target = sgqlc.types.Field(Float, graphql_name="browserApdexTarget")

    name = sgqlc.types.Field(String, graphql_name="name")


class KnowledgeDocsStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("search", "tags")
    search = sgqlc.types.Field(
        "KnowledgeSearchResponse",
        graphql_name="search",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "search_string",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="searchString",
                        default=None,
                    ),
                ),
                (
                    "since",
                    sgqlc.types.Arg(DateTime, graphql_name="since", default=None),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        KnowledgeSearchSortOption, graphql_name="sort", default=None
                    ),
                ),
                (
                    "source",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(KnowledgeSearchSources),
                        graphql_name="source",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(String)),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
                (
                    "until",
                    sgqlc.types.Arg(DateTime, graphql_name="until", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `search_string` (`String!`)
    * `since` (`DateTime`)
    * `sort` (`KnowledgeSearchSortOption`)
    * `source` (`KnowledgeSearchSources!`)
    * `tags` (`[String!]`)
    * `until` (`DateTime`)
    """

    tags = sgqlc.types.Field(
        "KnowledgeTagsResponse",
        graphql_name="tags",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(KnowledgeSearchSources),
                        graphql_name="source",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `source` (`KnowledgeSearchSources!`)
    """


class KnowledgeSearchResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "id",
        "next_cursor",
        "overview_id",
        "prev_cursor",
        "results",
        "total_count",
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    overview_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="overviewId")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("KnowledgeSearchResult"))
        ),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class KnowledgeSearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "body_text",
        "created_date",
        "id",
        "last_modified_date",
        "publish_status",
        "results_total",
        "score",
        "source_label",
        "summary",
        "tags",
        "title",
        "url",
    )
    body_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="bodyText")

    created_date = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdDate"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    last_modified_date = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="lastModifiedDate"
    )

    publish_status = sgqlc.types.Field(
        sgqlc.types.non_null(KnowledgePublishStatus), graphql_name="publishStatus"
    )

    results_total = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="resultsTotal"
    )

    score = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="score")

    source_label = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="sourceLabel"
    )

    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="summary")

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="tags",
    )

    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="title")

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class KnowledgeTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "id", "label")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="label")


class KnowledgeTagsResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "tags")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(KnowledgeTag))),
        graphql_name="tags",
    )


class LogConfigurationsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "data_partition_rules",
        "live_archive_configurations",
        "obfuscation_expressions",
        "obfuscation_rules",
        "parsing_rules",
        "pipeline_configuration",
        "test_grok",
    )
    data_partition_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsDataPartitionRule")),
        graphql_name="dataPartitionRules",
    )

    live_archive_configurations = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("LogConfigurationsLiveArchiveConfiguration")
        ),
        graphql_name="liveArchiveConfigurations",
    )

    obfuscation_expressions = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null("LogConfigurationsObfuscationExpression")
        ),
        graphql_name="obfuscationExpressions",
    )

    obfuscation_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsObfuscationRule")),
        graphql_name="obfuscationRules",
    )

    parsing_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsParsingRule")),
        graphql_name="parsingRules",
    )

    pipeline_configuration = sgqlc.types.Field(
        "LogConfigurationsPipelineConfiguration", graphql_name="pipelineConfiguration"
    )

    test_grok = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("LogConfigurationsGrokTestResult")),
        graphql_name="testGrok",
        args=sgqlc.types.ArgDict(
            (
                (
                    "grok",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="grok", default=None
                    ),
                ),
                (
                    "log_lines",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(String))
                        ),
                        graphql_name="logLines",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `grok` (`String!`)
    * `log_lines` (`[String!]!`)
    """


class LogConfigurationsCreateDataPartitionRuleError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        LogConfigurationsCreateDataPartitionRuleErrorType, graphql_name="type"
    )


class LogConfigurationsCreateDataPartitionRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsCreateDataPartitionRuleError),
        graphql_name="errors",
    )

    rule = sgqlc.types.Field("LogConfigurationsDataPartitionRule", graphql_name="rule")


class LogConfigurationsCreateParsingRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("LogConfigurationsParsingRuleMutationError"),
        graphql_name="errors",
    )

    rule = sgqlc.types.Field("LogConfigurationsParsingRule", graphql_name="rule")


class LogConfigurationsDataPartitionRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "deleted",
        "description",
        "enabled",
        "id",
        "nrql",
        "retention_policy",
        "target_data_partition",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="deleted")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    retention_policy = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleRetentionPolicyType),
        graphql_name="retentionPolicy",
    )

    target_data_partition = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsLogDataPartitionName),
        graphql_name="targetDataPartition",
    )

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsDataPartitionRuleMatchingCriteria(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attribute_name", "matching_expression", "matching_operator")
    attribute_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attributeName"
    )

    matching_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchingExpression"
    )

    matching_operator = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsDataPartitionRuleMatchingOperator),
        graphql_name="matchingOperator",
    )


class LogConfigurationsDataPartitionRuleMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        LogConfigurationsDataPartitionRuleMutationErrorType, graphql_name="type"
    )


class LogConfigurationsDeleteDataPartitionRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsDataPartitionRuleMutationError),
        graphql_name="errors",
    )


class LogConfigurationsDeleteParsingRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("LogConfigurationsParsingRuleMutationError"),
        graphql_name="errors",
    )


class LogConfigurationsGrokTestExtractedAttribute(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class LogConfigurationsGrokTestResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "log_line", "matched")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(LogConfigurationsGrokTestExtractedAttribute)
        ),
        graphql_name="attributes",
    )

    log_line = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="logLine")

    matched = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="matched")


class LogConfigurationsLiveArchiveConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "created_by",
        "enabled",
        "event_type",
        "id",
        "retention_policy",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    event_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="eventType"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    retention_policy = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsLiveArchiveRetentionPolicyType),
        graphql_name="retentionPolicy",
    )

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsObfuscationAction(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "expression", "id", "method")
    attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="attributes",
    )

    expression = sgqlc.types.Field(
        sgqlc.types.non_null("LogConfigurationsObfuscationExpression"),
        graphql_name="expression",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    method = sgqlc.types.Field(
        sgqlc.types.non_null(LogConfigurationsObfuscationMethod), graphql_name="method"
    )


class LogConfigurationsObfuscationExpression(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "id",
        "name",
        "regex",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    regex = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="regex")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsObfuscationRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "actions",
        "created_at",
        "created_by",
        "description",
        "enabled",
        "filter",
        "id",
        "name",
        "updated_at",
        "updated_by",
    )
    actions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(LogConfigurationsObfuscationAction)),
        graphql_name="actions",
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    filter = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="filter")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsParsingRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "attribute",
        "created_by",
        "deleted",
        "description",
        "enabled",
        "grok",
        "id",
        "lucene",
        "nrql",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    attribute = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="attribute"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="deleted")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    grok = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="grok")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    lucene = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="lucene")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsParsingRuleMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        LogConfigurationsParsingRuleMutationErrorType, graphql_name="type"
    )


class LogConfigurationsPipelineConfiguration(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "enrichment_disabled",
        "json_parsing_disabled",
        "obfuscation_disabled",
        "parsing_disabled",
        "patterns_enabled",
        "plugin_attributes_cleanup_enabled",
        "recursive_json_parsing_disabled",
        "transformation_disabled",
        "updated_at",
        "updated_by",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    enrichment_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="enrichmentDisabled"
    )

    json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="jsonParsingDisabled"
    )

    obfuscation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="obfuscationDisabled"
    )

    parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="parsingDisabled"
    )

    patterns_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="patternsEnabled"
    )

    plugin_attributes_cleanup_enabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="pluginAttributesCleanupEnabled"
    )

    recursive_json_parsing_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="recursiveJsonParsingDisabled"
    )

    transformation_disabled = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="transformationDisabled"
    )

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class LogConfigurationsUpdateDataPartitionRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsDataPartitionRuleMutationError),
        graphql_name="errors",
    )

    rule = sgqlc.types.Field(LogConfigurationsDataPartitionRule, graphql_name="rule")


class LogConfigurationsUpdateParsingRuleResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(LogConfigurationsParsingRuleMutationError),
        graphql_name="errors",
    )

    rule = sgqlc.types.Field(LogConfigurationsParsingRule, graphql_name="rule")


class LogConfigurationsUpsertPipelineConfigurationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("pipeline_configuration",)
    pipeline_configuration = sgqlc.types.Field(
        LogConfigurationsPipelineConfiguration, graphql_name="pipelineConfiguration"
    )


class MachineLearningAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "file_data_sources_by_ids",
        "file_data_sources_by_project_id",
        "projects",
        "projects_by_ids",
        "stream_data_sources_by_ids",
        "stream_data_sources_by_project_id",
    )
    file_data_sources_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("MachineLearningFileDataSource"),
        graphql_name="fileDataSourcesByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    file_data_sources_by_project_id = sgqlc.types.Field(
        "MachineLearningFileDataSourceConnection",
        graphql_name="fileDataSourcesByProjectId",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "project_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="projectId", default=None
                    ),
                ),
            )
        ),
    )

    projects = sgqlc.types.Field(
        "MachineLearningProjectConnection",
        graphql_name="projects",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    projects_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("MachineLearningProject"),
        graphql_name="projectsByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    stream_data_sources_by_ids = sgqlc.types.Field(
        sgqlc.types.list_of("MachineLearningStreamDataSource"),
        graphql_name="streamDataSourcesByIds",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `ids` (`[ID]!`)
    """

    stream_data_sources_by_project_id = sgqlc.types.Field(
        "MachineLearningStreamDataSourceConnection",
        graphql_name="streamDataSourcesByProjectId",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
                (
                    "project_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="projectId", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `first` (`Int`) (default: `10`)
    * `last` (`Int`)
    * `next_cursor` (`String`)
    * `prev_cursor` (`String`)
    * `project_id` (`ID!`)
    """


class MachineLearningActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("rag_query_data",)
    rag_query_data = sgqlc.types.Field(
        sgqlc.types.list_of("MachineLearningRagQueryDataResponse"),
        graphql_name="ragQueryData",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filter_by",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(MachineLearningFilterBy),
                        graphql_name="filterBy",
                        default=None,
                    ),
                ),
                (
                    "prompt",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="prompt",
                        default=None,
                    ),
                ),
                ("tool_id", sgqlc.types.Arg(ID, graphql_name="toolId", default=None)),
                ("top_k", sgqlc.types.Arg(Int, graphql_name="topK", default=5)),
            )
        ),
    )
    """Arguments:

    * `filter_by` (`[MachineLearningFilterBy]`)
    * `prompt` (`String!`)
    * `tool_id` (`ID`)
    * `top_k` (`Int`) (default: `5`)
    """


class MachineLearningExperiment(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class MachineLearningExperimentConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningExperiment), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningFileDataSource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "blob_id",
        "created_at",
        "creator_id",
        "deactivated",
        "description",
        "experiments",
        "file_name",
        "id",
        "models",
        "modified_at",
        "name",
        "organization_id",
        "project",
        "project_id",
        "source_url",
        "tags",
        "version",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    blob_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="blobId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    deactivated = sgqlc.types.Field(Boolean, graphql_name="deactivated")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    experiments = sgqlc.types.Field(
        MachineLearningExperimentConnection,
        graphql_name="experiments",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    file_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="fileName")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    models = sgqlc.types.Field(
        "MachineLearningModelConnection",
        graphql_name="models",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    project = sgqlc.types.Field(
        "MachineLearningProject",
        graphql_name="project",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    project_id = sgqlc.types.Field(ID, graphql_name="projectId")

    source_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="sourceUrl"
    )

    tags = sgqlc.types.Field(
        "MachineLearningTagConnection",
        graphql_name="tags",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")


class MachineLearningFileDataSourceConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningFileDataSource), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningModel(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class MachineLearningModelConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningModel), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningProject(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "creator_id",
        "description",
        "id",
        "modified_at",
        "name",
        "organization_id",
        "status",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")


class MachineLearningProjectConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningProject), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningRagQueryDataResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("blob_id", "chunk", "score", "tool_id")
    blob_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="blobId")

    chunk = sgqlc.types.Field(String, graphql_name="chunk")

    score = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="score")

    tool_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="toolId")


class MachineLearningStreamDataSource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "created_at",
        "creator_id",
        "description",
        "filter",
        "id",
        "last_workflow_id",
        "modified_at",
        "name",
        "organization_id",
        "project",
        "sampling_rate",
        "status",
        "tags",
        "topic",
        "version",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="creatorId")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    filter = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="filter")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    last_workflow_id = sgqlc.types.Field(ID, graphql_name="lastWorkflowId")

    modified_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="modifiedAt"
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    project = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="project",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    sampling_rate = sgqlc.types.Field(Float, graphql_name="samplingRate")

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")

    tags = sgqlc.types.Field(
        "MachineLearningTagConnection",
        graphql_name="tags",
        args=sgqlc.types.ArgDict(
            (
                ("first", sgqlc.types.Arg(Int, graphql_name="first", default=10)),
                ("last", sgqlc.types.Arg(Int, graphql_name="last", default=None)),
                (
                    "next_cursor",
                    sgqlc.types.Arg(String, graphql_name="nextCursor", default=None),
                ),
                (
                    "prev_cursor",
                    sgqlc.types.Arg(String, graphql_name="prevCursor", default=None),
                ),
            )
        ),
    )

    topic = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="topic")

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")


class MachineLearningStreamDataSourceConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningStreamDataSource), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class MachineLearningTagConnection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entities",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "prev_cursor",
        "total_count",
    )
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(MachineLearningTag), graphql_name="entities"
    )

    has_next_page = sgqlc.types.Field(Boolean, graphql_name="hasNextPage")

    has_previous_page = sgqlc.types.Field(Boolean, graphql_name="hasPreviousPage")

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    prev_cursor = sgqlc.types.Field(String, graphql_name="prevCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class MachineLearningTransactionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("transaction_id",)
    transaction_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="transactionId"
    )


class MetricNormalizationAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("metric_normalization_rule", "metric_normalization_rules")
    metric_normalization_rule = sgqlc.types.Field(
        "MetricNormalizationRule",
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("MetricNormalizationRule")),
        graphql_name="metricNormalizationRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "enabled",
                    sgqlc.types.Arg(Boolean, graphql_name="enabled", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `enabled` (`Boolean`)
    """


class MetricNormalizationRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "action",
        "application_guid",
        "application_name",
        "created_at",
        "enabled",
        "eval_order",
        "id",
        "match_expression",
        "notes",
        "replacement",
        "terminate_chain",
    )
    action = sgqlc.types.Field(MetricNormalizationRuleAction, graphql_name="action")

    application_guid = sgqlc.types.Field(EntityGuid, graphql_name="applicationGuid")

    application_name = sgqlc.types.Field(String, graphql_name="applicationName")

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    eval_order = sgqlc.types.Field(Int, graphql_name="evalOrder")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    match_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="matchExpression"
    )

    notes = sgqlc.types.Field(String, graphql_name="notes")

    replacement = sgqlc.types.Field(String, graphql_name="replacement")

    terminate_chain = sgqlc.types.Field(Boolean, graphql_name="terminateChain")


class MetricNormalizationRuleMetricGroupingIssue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "denied_metrics_count",
        "denied_metrics_rate_per_minute",
        "metric_normalization_rule_id",
        "mitigated",
        "mitigation_rate_threshold",
        "mitigation_rate_window_size",
    )
    denied_metrics_count = sgqlc.types.Field(Int, graphql_name="deniedMetricsCount")

    denied_metrics_rate_per_minute = sgqlc.types.Field(
        Float, graphql_name="deniedMetricsRatePerMinute"
    )

    metric_normalization_rule_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="metricNormalizationRuleId"
    )

    mitigated = sgqlc.types.Field(Boolean, graphql_name="mitigated")

    mitigation_rate_threshold = sgqlc.types.Field(
        Float, graphql_name="mitigationRateThreshold"
    )

    mitigation_rate_window_size = sgqlc.types.Field(
        Int, graphql_name="mitigationRateWindowSize"
    )


class MetricNormalizationRuleMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(MetricNormalizationRuleErrorType, graphql_name="type")


class MetricNormalizationRuleMutationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "rule")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(MetricNormalizationRuleMutationError), graphql_name="errors"
    )

    rule = sgqlc.types.Field(MetricNormalizationRule, graphql_name="rule")


class MobileAppSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "app_launch_count",
        "crash_count",
        "crash_rate",
        "http_error_rate",
        "http_request_count",
        "http_request_rate",
        "http_response_time_average",
        "mobile_session_count",
        "network_failure_rate",
        "users_affected_count",
    )
    app_launch_count = sgqlc.types.Field(Int, graphql_name="appLaunchCount")

    crash_count = sgqlc.types.Field(Int, graphql_name="crashCount")

    crash_rate = sgqlc.types.Field(Float, graphql_name="crashRate")

    http_error_rate = sgqlc.types.Field(Float, graphql_name="httpErrorRate")

    http_request_count = sgqlc.types.Field(Int, graphql_name="httpRequestCount")

    http_request_rate = sgqlc.types.Field(Float, graphql_name="httpRequestRate")

    http_response_time_average = sgqlc.types.Field(
        Seconds, graphql_name="httpResponseTimeAverage"
    )

    mobile_session_count = sgqlc.types.Field(Int, graphql_name="mobileSessionCount")

    network_failure_rate = sgqlc.types.Field(Float, graphql_name="networkFailureRate")

    users_affected_count = sgqlc.types.Field(Int, graphql_name="usersAffectedCount")


class MobilePushNotificationActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("devices",)
    devices = sgqlc.types.Field(
        sgqlc.types.list_of("MobilePushNotificationDevice"), graphql_name="devices"
    )


class MobilePushNotificationDevice(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "app_version",
        "device_id",
        "device_name",
        "operating_system",
        "user_id",
    )
    app_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="appVersion"
    )

    device_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="deviceId")

    device_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="deviceName"
    )

    operating_system = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="operatingSystem"
    )

    user_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="userId")


class MobilePushNotificationRemoveDeviceResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("device_id", "message")
    device_id = sgqlc.types.Field(String, graphql_name="deviceId")

    message = sgqlc.types.Field(String, graphql_name="message")


class MobilePushNotificationSendPushResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message",)
    message = sgqlc.types.Field(String, graphql_name="message")


class MultiTenantAuthorizationGrant(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("grantee", "group", "id", "role", "scope")
    grantee = sgqlc.types.Field(
        sgqlc.types.non_null("MultiTenantAuthorizationGrantee"), graphql_name="grantee"
    )

    group = sgqlc.types.Field(
        sgqlc.types.non_null("MultiTenantAuthorizationGrantGroup"), graphql_name="group"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    role = sgqlc.types.Field(
        sgqlc.types.non_null("MultiTenantAuthorizationGrantRole"), graphql_name="role"
    )

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("MultiTenantAuthorizationGrantScope"), graphql_name="scope"
    )


class MultiTenantAuthorizationGrantCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantAuthorizationGrant))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantAuthorizationGrantGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class MultiTenantAuthorizationGrantRole(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class MultiTenantAuthorizationGrantScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type", "typev2")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(MultiTenantAuthorizationGrantScopeEnum),
        graphql_name="type",
    )

    typev2 = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="typev2")


class MultiTenantAuthorizationGrantee(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(MultiTenantAuthorizationGranteeTypeEnum),
        graphql_name="type",
    )


class MultiTenantAuthorizationPermission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "category",
        "feature",
        "feature_description",
        "feature_documentation_path",
        "id",
        "name",
        "product",
    )
    category = sgqlc.types.Field(
        MultiTenantAuthorizationPermissionCategoryEnum, graphql_name="category"
    )

    feature = sgqlc.types.Field(String, graphql_name="feature")

    feature_description = sgqlc.types.Field(String, graphql_name="featureDescription")

    feature_documentation_path = sgqlc.types.Field(
        String, graphql_name="featureDocumentationPath"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    product = sgqlc.types.Field(String, graphql_name="product")


class MultiTenantAuthorizationPermissionCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(MultiTenantAuthorizationPermission)
            )
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class MultiTenantAuthorizationRole(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "scope", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    scope = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="scope")

    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="type")


class MultiTenantAuthorizationRoleCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantAuthorizationRole))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantIdentityGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domain_id", "id", "name", "users")
    authentication_domain_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="authenticationDomainId"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    users = sgqlc.types.Field(
        "MultiTenantIdentityGroupUsers",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        MultiTenantIdentityGroupUserFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`MultiTenantIdentityGroupUserFilterInput`)
    """


class MultiTenantIdentityGroupCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantIdentityGroup))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantIdentityGroupUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "id", "name", "time_zone")
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="email")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    time_zone = sgqlc.types.Field(String, graphql_name="timeZone")


class MultiTenantIdentityGroupUsers(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantIdentityGroupUser))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantIdentityPendingUpgradeRequest(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "message", "requested_user_type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    message = sgqlc.types.Field(String, graphql_name="message")

    requested_user_type = sgqlc.types.Field(
        "MultiTenantIdentityUserType", graphql_name="requestedUserType"
    )


class MultiTenantIdentityUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authentication_domain_id",
        "email",
        "email_verification_state",
        "groups",
        "id",
        "last_active",
        "name",
        "pending_upgrade_request",
        "time_zone",
        "type",
    )
    authentication_domain_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="authenticationDomainId"
    )

    email = sgqlc.types.Field(String, graphql_name="email")

    email_verification_state = sgqlc.types.Field(
        sgqlc.types.non_null(MultiTenantIdentityEmailVerificationState),
        graphql_name="emailVerificationState",
    )

    groups = sgqlc.types.Field(
        "MultiTenantIdentityUserGroups",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    last_active = sgqlc.types.Field(DateTime, graphql_name="lastActive")

    name = sgqlc.types.Field(String, graphql_name="name")

    pending_upgrade_request = sgqlc.types.Field(
        MultiTenantIdentityPendingUpgradeRequest, graphql_name="pendingUpgradeRequest"
    )

    time_zone = sgqlc.types.Field(String, graphql_name="timeZone")

    type = sgqlc.types.Field(
        sgqlc.types.non_null("MultiTenantIdentityUserType"), graphql_name="type"
    )


class MultiTenantIdentityUserCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantIdentityUser))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantIdentityUserGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class MultiTenantIdentityUserGroups(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(MultiTenantIdentityUserGroup))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class MultiTenantIdentityUserType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class NerdStorageAccountScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of("NerdStorageCollectionMember"),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
            )
        ),
    )

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `collection` (`String!`)
    * `document_id` (`String!`)
    """


class NerdStorageActorScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of("NerdStorageCollectionMember"),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
            )
        ),
    )

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `collection` (`String!`)
    * `document_id` (`String!`)
    """


class NerdStorageCollectionMember(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("document", "id")
    document = sgqlc.types.Field(NerdStorageDocument, graphql_name="document")

    id = sgqlc.types.Field(String, graphql_name="id")


class NerdStorageDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted",)
    deleted = sgqlc.types.Field(Int, graphql_name="deleted")


class NerdStorageEntityScope(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("collection", "document")
    collection = sgqlc.types.Field(
        sgqlc.types.list_of(NerdStorageCollectionMember),
        graphql_name="collection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )

    document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="document",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )
    """Arguments:

    * `collection` (`String!`)
    * `document_id` (`String!`)
    * `scope_by_actor` (`Boolean`)
    """


class NerdStorageVaultActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("secret", "secrets")
    secret = sgqlc.types.Field(
        "NerdStorageVaultSecret",
        graphql_name="secret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )

    secrets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("NerdStorageVaultSecret"))
        ),
        graphql_name="secrets",
    )


class NerdStorageVaultDeleteSecretResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("NerdStorageVaultResultError")),
        graphql_name="errors",
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultResultStatus), graphql_name="status"
    )


class NerdStorageVaultResultError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultErrorType), graphql_name="type"
    )


class NerdStorageVaultSecret(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(SecureValue), graphql_name="value")


class NerdStorageVaultWriteSecretResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "status")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(NerdStorageVaultResultError)),
        graphql_name="errors",
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultResultStatus), graphql_name="status"
    )


class NerdpackAllowListResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null("NerdpackData"), graphql_name="nerdpack"
    )

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackMutationResultPerAccount"),
        graphql_name="resultsPerAccount",
    )


class NerdpackAllowedAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id",)
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")


class NerdpackAssetInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "size_in_bytes")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    size_in_bytes = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="sizeInBytes"
    )


class NerdpackData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "allowed_accounts",
        "id",
        "subscription_model",
        "subscriptions",
        "versions",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    allowed_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackAllowedAccount), graphql_name="allowedAccounts"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    subscription_model = sgqlc.types.Field(
        NerdpackSubscriptionModel, graphql_name="subscriptionModel"
    )

    subscriptions = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackSubscription"), graphql_name="subscriptions"
    )

    versions = sgqlc.types.Field(
        "NerdpackVersionsResult",
        graphql_name="versions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        NerdpackVersionFilter, graphql_name="filter", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`NerdpackVersionFilter`)
    """


class NerdpackMutationResultPerAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "reason", "result")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    reason = sgqlc.types.Field(NerdpackMutationErrorType, graphql_name="reason")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackMutationResult), graphql_name="result"
    )


class NerdpackNerdpacks(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("effective_subscribed_versions", "nerdpack", "subscribable")
    effective_subscribed_versions = sgqlc.types.Field(
        sgqlc.types.list_of("NerdpackVersion"),
        graphql_name="effectiveSubscribedVersions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "overrides",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(NerdpackOverrideVersionRules),
                        graphql_name="overrides",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `overrides` (`[NerdpackOverrideVersionRules]`)
    """

    nerdpack = sgqlc.types.Field(
        NerdpackData,
        graphql_name="nerdpack",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    subscribable = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackData),
        graphql_name="subscribable",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_filter",
                    sgqlc.types.Arg(
                        NerdpackDataFilter, graphql_name="nerdpackFilter", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `nerdpack_filter` (`NerdpackDataFilter`)
    """


class NerdpackRemovedTagInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nerdpack_id", "tag_name", "version")
    nerdpack_id = sgqlc.types.Field(ID, graphql_name="nerdpackId")

    tag_name = sgqlc.types.Field(NerdpackTagName, graphql_name="tagName")

    version = sgqlc.types.Field(SemVer, graphql_name="version")


class NerdpackRemovedTagResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("removed_tag_info", "status")
    removed_tag_info = sgqlc.types.Field(
        NerdpackRemovedTagInfo, graphql_name="removedTagInfo"
    )

    status = sgqlc.types.Field(NerdpackRemovedTagResponseType, graphql_name="status")


class NerdpackSubscribeResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account", "tag")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackData), graphql_name="nerdpack"
    )

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackMutationResultPerAccount),
        graphql_name="resultsPerAccount",
    )

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")


class NerdpackSubscription(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("access_type", "account_id", "nerdpack_version", "tag")
    access_type = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackSubscriptionAccessType), graphql_name="accessType"
    )

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    nerdpack_version = sgqlc.types.Field(
        "NerdpackVersion", graphql_name="nerdpackVersion"
    )

    tag = sgqlc.types.Field(NerdpackTagName, graphql_name="tag")


class NerdpackUnsubscribeResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nerdpack", "results_per_account")
    nerdpack = sgqlc.types.Field(
        sgqlc.types.non_null(NerdpackData), graphql_name="nerdpack"
    )

    results_per_account = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackMutationResultPerAccount),
        graphql_name="resultsPerAccount",
    )


class NerdpackVersion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "assets",
        "cli_version",
        "created_at",
        "created_by_user",
        "description",
        "display_name",
        "icon",
        "nerdpack_id",
        "repository_url",
        "sdk_version",
        "subscription_model",
        "tags",
        "version",
    )
    assets = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(NerdpackAssetInfo))
        ),
        graphql_name="assets",
    )

    cli_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="cliVersion"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by_user = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="createdByUser"
    )

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    icon = sgqlc.types.Field(String, graphql_name="icon")

    nerdpack_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdpackId")

    repository_url = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="repositoryUrl"
    )

    sdk_version = sgqlc.types.Field(String, graphql_name="sdkVersion")

    subscription_model = sgqlc.types.Field(
        NerdpackSubscriptionModel, graphql_name="subscriptionModel"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(NerdpackTagName))
        ),
        graphql_name="tags",
    )

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")


class NerdpackVersionsResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(NerdpackVersion), graphql_name="results"
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class Nr1CatalogActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "alert_policy_template",
        "categories",
        "dashboard_template",
        "data_source",
        "nerdpack",
        "nerdpacks",
        "quickstart",
        "quickstarts",
        "search",
    )
    alert_policy_template = sgqlc.types.Field(
        "Nr1CatalogAlertPolicyTemplate",
        graphql_name="alertPolicyTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    categories = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogCategory")),
        graphql_name="categories",
    )

    dashboard_template = sgqlc.types.Field(
        "Nr1CatalogDashboardTemplate",
        graphql_name="dashboardTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    data_source = sgqlc.types.Field(
        "Nr1CatalogDataSource",
        graphql_name="dataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    nerdpack = sgqlc.types.Field(
        "Nr1CatalogNerdpack",
        graphql_name="nerdpack",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    nerdpacks = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogNerdpack")),
        graphql_name="nerdpacks",
    )

    quickstart = sgqlc.types.Field(
        "Nr1CatalogQuickstart",
        graphql_name="quickstart",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    quickstarts = sgqlc.types.Field(
        "Nr1CatalogQuickstartsListing",
        graphql_name="quickstarts",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )

    search = sgqlc.types.Field(
        "Nr1CatalogSearchResponse",
        graphql_name="search",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        Nr1CatalogSearchFilter, graphql_name="filter", default=None
                    ),
                ),
                ("query", sgqlc.types.Arg(String, graphql_name="query", default=None)),
                (
                    "sort_by",
                    sgqlc.types.Arg(
                        Nr1CatalogSearchSortOption,
                        graphql_name="sortBy",
                        default="ALPHABETICAL",
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`Nr1CatalogSearchFilter`)
    * `query` (`String`)
    * `sort_by` (`Nr1CatalogSearchSortOption`) (default:
      `ALPHABETICAL`)
    """


class Nr1CatalogAlertConditionOutline(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("alert_condition_template", "id")
    alert_condition_template = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogAlertConditionTemplate"),
        graphql_name="alertConditionTemplate",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class Nr1CatalogAlertConditionTemplate(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogAlertConditionTemplateMetadata"),
        graphql_name="metadata",
    )


class Nr1CatalogAlertConditionTemplateMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "display_name", "type")
    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertConditionType), graphql_name="type"
    )


class Nr1CatalogAlertPolicyOutline(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("conditions", "id")
    conditions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertConditionOutline)),
        graphql_name="conditions",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class Nr1CatalogAlertPolicyTemplate(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "support_level", "updated_at")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        "Nr1CatalogAlertPolicyTemplateMetadata", graphql_name="metadata"
    )

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )


class Nr1CatalogAlertPolicyTemplateMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "conditions",
        "display_name",
        "icon",
        "required_data_sources",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogAuthor"))
        ),
        graphql_name="authors",
    )

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogCategory"))
        ),
        graphql_name="categories",
    )

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )

    conditions = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertConditionTemplate))
        ),
        graphql_name="conditions",
    )

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    icon = sgqlc.types.Field("Nr1CatalogIcon", graphql_name="icon")

    required_data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogDataSource"))
        ),
        graphql_name="requiredDataSources",
    )


class Nr1CatalogAuthor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name",)
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class Nr1CatalogCategory(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "slug", "terms")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")

    terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="terms",
    )


class Nr1CatalogCategoryFacet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "display_name")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )


class Nr1CatalogCommunityContactChannel(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogComponentFacet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("component", "count")
    component = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchComponentType), graphql_name="component"
    )

    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")


class Nr1CatalogDashboardOutline(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("dashboard_guid",)
    dashboard_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="dashboardGuid"
    )


class Nr1CatalogDashboardTemplate(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "support_level", "updated_at")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDashboardTemplateMetadata"),
        graphql_name="metadata",
    )

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="updatedAt"
    )


class Nr1CatalogDashboardTemplateMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "description",
        "display_name",
        "previews",
        "required_data_sources",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAuthor))
        ),
        graphql_name="authors",
    )

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogPreview))
        ),
        graphql_name="previews",
    )

    required_data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogDataSource"))
        ),
        graphql_name="requiredDataSources",
    )


class Nr1CatalogDataSource(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDataSourceMetadata"), graphql_name="metadata"
    )


class Nr1CatalogDataSourceInstall(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("fallback", "primary")
    fallback = sgqlc.types.Field(
        "Nr1CatalogDataSourceInstallDirective", graphql_name="fallback"
    )

    primary = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogDataSourceInstallDirective"),
        graphql_name="primary",
    )


class Nr1CatalogDataSourceMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "auto_install_alert_policy_templates",
        "auto_install_dashboard_templates",
        "categories",
        "description",
        "display_name",
        "icon",
        "install",
        "keywords",
    )
    auto_install_alert_policy_templates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAlertPolicyTemplate))
        ),
        graphql_name="autoInstallAlertPolicyTemplates",
    )

    auto_install_dashboard_templates = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogDashboardTemplate))
        ),
        graphql_name="autoInstallDashboardTemplates",
    )

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    icon = sgqlc.types.Field("Nr1CatalogIcon", graphql_name="icon")

    install = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDataSourceInstall), graphql_name="install"
    )

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )


class Nr1CatalogEmailContactChannel(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("address",)
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="address")


class Nr1CatalogIcon(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogInstallAlertPolicyTemplateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("alert_policy_template", "created_alert_policy")
    alert_policy_template = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertPolicyTemplate),
        graphql_name="alertPolicyTemplate",
    )

    created_alert_policy = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogAlertPolicyOutline),
        graphql_name="createdAlertPolicy",
    )


class Nr1CatalogInstallDashboardTemplateResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_dashboard", "dashboard_template")
    created_dashboard = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDashboardOutline),
        graphql_name="createdDashboard",
    )

    dashboard_template = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogDashboardTemplate),
        graphql_name="dashboardTemplate",
    )


class Nr1CatalogInstallPlanStep(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "display_name",
        "fallback",
        "heading",
        "id",
        "primary",
        "target",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    fallback = sgqlc.types.Field(
        Nr1CatalogInstallPlanDirective, graphql_name="fallback"
    )

    heading = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="heading")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    primary = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDirective), graphql_name="primary"
    )

    target = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogInstallPlanTarget"), graphql_name="target"
    )


class Nr1CatalogInstallPlanTarget(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("destination", "os", "type")
    destination = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanDestination),
        graphql_name="destination",
    )

    os = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(Nr1CatalogInstallPlanOperatingSystem)
            )
        ),
        graphql_name="os",
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogInstallPlanTargetType), graphql_name="type"
    )


class Nr1CatalogIssuesContactChannel(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogLinkInstallDirective(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogNerdletInstallDirective(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nerdlet_id", "nerdlet_state", "requires_account")
    nerdlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdletId")

    nerdlet_state = sgqlc.types.Field(
        Nr1CatalogRawNerdletState, graphql_name="nerdletState"
    )

    requires_account = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="requiresAccount"
    )


class Nr1CatalogNerdpack(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "metadata", "visibility")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field("Nr1CatalogNerdpackMetadata", graphql_name="metadata")

    visibility = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogNerdpackVisibility), graphql_name="visibility"
    )


class Nr1CatalogNerdpackMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "additional_info",
        "categories",
        "category_terms",
        "description",
        "details",
        "display_name",
        "documentation",
        "icon",
        "included_artifact_types",
        "keywords",
        "nerdpack_items",
        "previews",
        "publish_date",
        "repository",
        "support",
        "tagline",
        "version",
        "whats_new",
    )
    additional_info = sgqlc.types.Field(
        String,
        graphql_name="additionalInfo",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        Nr1CatalogRenderFormat,
                        graphql_name="format",
                        default="MARKDOWN",
                    ),
                ),
            )
        ),
    )

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    details = sgqlc.types.Field(String, graphql_name="details")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    documentation = sgqlc.types.Field(
        String,
        graphql_name="documentation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "format",
                    sgqlc.types.Arg(
                        Nr1CatalogRenderFormat,
                        graphql_name="format",
                        default="MARKDOWN",
                    ),
                ),
            )
        ),
    )

    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")

    included_artifact_types = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="includedArtifactTypes"
    )

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )

    nerdpack_items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogNerdpackItem))
        ),
        graphql_name="nerdpackItems",
    )

    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogPreview))
        ),
        graphql_name="previews",
    )

    publish_date = sgqlc.types.Field(DateTime, graphql_name="publishDate")

    repository = sgqlc.types.Field(String, graphql_name="repository")

    support = sgqlc.types.Field(
        sgqlc.types.non_null("Nr1CatalogSupportChannels"), graphql_name="support"
    )

    tagline = sgqlc.types.Field(String, graphql_name="tagline")

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")

    whats_new = sgqlc.types.Field("Nr1CatalogReleaseNote", graphql_name="whatsNew")


class Nr1CatalogQuickstart(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("featured", "id", "metadata", "source_url", "support_level")
    featured = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="featured")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    metadata = sgqlc.types.Field(
        "Nr1CatalogQuickstartMetadata", graphql_name="metadata"
    )

    source_url = sgqlc.types.Field(String, graphql_name="sourceUrl")

    support_level = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSupportLevel), graphql_name="supportLevel"
    )


class Nr1CatalogQuickstartMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authors",
        "categories",
        "category_terms",
        "data_sources",
        "description",
        "display_name",
        "icon",
        "keywords",
        "quickstart_components",
        "slug",
        "summary",
    )
    authors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogAuthor))
        ),
        graphql_name="authors",
    )

    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategory))
        ),
        graphql_name="categories",
    )

    category_terms = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="categoryTerms",
    )

    data_sources = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogDataSource))
        ),
        graphql_name="dataSources",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    display_name = sgqlc.types.Field(String, graphql_name="displayName")

    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")

    keywords = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))),
        graphql_name="keywords",
    )

    quickstart_components = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogQuickstartComponent))
        ),
        graphql_name="quickstartComponents",
    )

    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="slug")

    summary = sgqlc.types.Field(String, graphql_name="summary")


class Nr1CatalogQuickstartsListing(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogQuickstart))
        ),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class Nr1CatalogReleaseNote(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("changes", "version")
    changes = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="changes")

    version = sgqlc.types.Field(sgqlc.types.non_null(SemVer), graphql_name="version")


class Nr1CatalogSearchFacets(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("categories", "components", "featured", "types")
    categories = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogCategoryFacet))
        ),
        graphql_name="categories",
    )

    components = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogComponentFacet))
        ),
        graphql_name="components",
    )

    featured = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="featured")

    types = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogSearchResultTypeFacet"))
        ),
        graphql_name="types",
    )


class Nr1CatalogSearchResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("facets", "next_cursor", "results", "total_count")
    facets = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchFacets), graphql_name="facets"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("Nr1CatalogSearchResult"))
        ),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class Nr1CatalogSearchResultTypeFacet(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "type")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSearchResultType), graphql_name="type"
    )


class Nr1CatalogSubmitMetadataError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "field", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    field = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="field"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogSubmitMetadataErrorType), graphql_name="type"
    )


class Nr1CatalogSubmitMetadataResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "nerdpack", "result")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogSubmitMetadataError)),
        graphql_name="errors",
    )

    nerdpack = sgqlc.types.Field(Nr1CatalogNerdpack, graphql_name="nerdpack")

    result = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogMutationResult), graphql_name="result"
    )


class Nr1CatalogSupportChannels(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("community", "email", "issues")
    community = sgqlc.types.Field(
        Nr1CatalogCommunityContactChannel, graphql_name="community"
    )

    email = sgqlc.types.Field(Nr1CatalogEmailContactChannel, graphql_name="email")

    issues = sgqlc.types.Field(Nr1CatalogIssuesContactChannel, graphql_name="issues")


class NrdbMetadata(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("event_types", "facets", "messages", "time_window")
    event_types = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="eventTypes"
    )

    facets = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="facets")

    messages = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="messages")

    time_window = sgqlc.types.Field("NrdbMetadataTimeWindow", graphql_name="timeWindow")


class NrdbMetadataTimeWindow(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("begin", "compare_with", "end", "since", "until")
    begin = sgqlc.types.Field(EpochMilliseconds, graphql_name="begin")

    compare_with = sgqlc.types.Field(String, graphql_name="compareWith")

    end = sgqlc.types.Field(EpochMilliseconds, graphql_name="end")

    since = sgqlc.types.Field(String, graphql_name="since")

    until = sgqlc.types.Field(String, graphql_name="until")


class NrdbQueryProgress(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "completed",
        "query_id",
        "result_expiration",
        "retry_after",
        "retry_deadline",
    )
    completed = sgqlc.types.Field(Boolean, graphql_name="completed")

    query_id = sgqlc.types.Field(ID, graphql_name="queryId")

    result_expiration = sgqlc.types.Field(Seconds, graphql_name="resultExpiration")

    retry_after = sgqlc.types.Field(Seconds, graphql_name="retryAfter")

    retry_deadline = sgqlc.types.Field(Seconds, graphql_name="retryDeadline")


class NrdbResultContainer(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "current_results",
        "embedded_chart_url",
        "event_definitions",
        "metadata",
        "nrql",
        "other_result",
        "previous_results",
        "query_progress",
        "raw_response",
        "results",
        "static_chart_url",
        "suggested_facets",
        "suggested_queries",
        "total_result",
    )
    current_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="currentResults"
    )

    embedded_chart_url = sgqlc.types.Field(
        String,
        graphql_name="embeddedChartUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "chart_type",
                    sgqlc.types.Arg(
                        EmbeddedChartType, graphql_name="chartType", default=None
                    ),
                ),
            )
        ),
    )

    event_definitions = sgqlc.types.Field(
        sgqlc.types.list_of(EventDefinition), graphql_name="eventDefinitions"
    )

    metadata = sgqlc.types.Field(NrdbMetadata, graphql_name="metadata")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    other_result = sgqlc.types.Field(NrdbResult, graphql_name="otherResult")

    previous_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="previousResults"
    )

    query_progress = sgqlc.types.Field(NrdbQueryProgress, graphql_name="queryProgress")

    raw_response = sgqlc.types.Field(NrdbRawResults, graphql_name="rawResponse")

    results = sgqlc.types.Field(sgqlc.types.list_of(NrdbResult), graphql_name="results")

    static_chart_url = sgqlc.types.Field(
        String,
        graphql_name="staticChartUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "chart_type",
                    sgqlc.types.Arg(
                        ChartImageType, graphql_name="chartType", default=None
                    ),
                ),
                (
                    "format",
                    sgqlc.types.Arg(
                        ChartFormatType, graphql_name="format", default="PNG"
                    ),
                ),
                ("height", sgqlc.types.Arg(Int, graphql_name="height", default=None)),
                ("width", sgqlc.types.Arg(Int, graphql_name="width", default=None)),
            )
        ),
    )

    suggested_facets = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlFacetSuggestion"), graphql_name="suggestedFacets"
    )

    suggested_queries = sgqlc.types.Field(
        "SuggestedNrqlQueryResponse",
        graphql_name="suggestedQueries",
        args=sgqlc.types.ArgDict(
            (
                (
                    "anomaly_time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="anomalyTimeWindow", default=None
                    ),
                ),
            )
        ),
    )

    total_result = sgqlc.types.Field(NrdbResult, graphql_name="totalResult")


class NrqlCancelQueryMutationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("query_id", "rejection_reason", "request_status")
    query_id = sgqlc.types.Field(String, graphql_name="queryId")

    rejection_reason = sgqlc.types.Field(String, graphql_name="rejectionReason")

    request_status = sgqlc.types.Field(
        NrqlCancelQueryMutationRequestStatus, graphql_name="requestStatus"
    )


class NrqlDropRulesAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("list",)
    list = sgqlc.types.Field("NrqlDropRulesListDropRulesResult", graphql_name="list")


class NrqlDropRulesCreateDropRuleFailure(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "submitted")
    error = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesError"), graphql_name="error"
    )

    submitted = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesCreateDropRuleSubmission"),
        graphql_name="submitted",
    )


class NrqlDropRulesCreateDropRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesCreateDropRuleFailure), graphql_name="failures"
    )

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlDropRulesDropRule"), graphql_name="successes"
    )


class NrqlDropRulesCreateDropRuleSubmission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "action", "description", "nrql")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    action = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesAction), graphql_name="action"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")


class NrqlDropRulesDeleteDropRuleFailure(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "submitted")
    error = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesError"), graphql_name="error"
    )

    submitted = sgqlc.types.Field(
        sgqlc.types.non_null("NrqlDropRulesDeleteDropRuleSubmission"),
        graphql_name="submitted",
    )


class NrqlDropRulesDeleteDropRuleResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("failures", "successes")
    failures = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesDeleteDropRuleFailure), graphql_name="failures"
    )

    successes = sgqlc.types.Field(
        sgqlc.types.list_of("NrqlDropRulesDropRule"), graphql_name="successes"
    )


class NrqlDropRulesDeleteDropRuleSubmission(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "rule_id")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    rule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="ruleId")


class NrqlDropRulesDropRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "account_id",
        "action",
        "created_at",
        "created_by",
        "creator",
        "description",
        "id",
        "name",
        "nrql",
        "pipeline_cloud_rule_entity_id",
        "source",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    action = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesAction), graphql_name="action"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="createdBy")

    creator = sgqlc.types.Field("UserReference", graphql_name="creator")

    description = sgqlc.types.Field(String, graphql_name="description")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="nrql")

    pipeline_cloud_rule_entity_id = sgqlc.types.Field(
        String, graphql_name="pipelineCloudRuleEntityId"
    )

    source = sgqlc.types.Field(String, graphql_name="source")


class NrqlDropRulesError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "reason")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    reason = sgqlc.types.Field(
        sgqlc.types.non_null(NrqlDropRulesErrorReason), graphql_name="reason"
    )


class NrqlDropRulesListDropRulesResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("error", "rules")
    error = sgqlc.types.Field(NrqlDropRulesError, graphql_name="error")

    rules = sgqlc.types.Field(
        sgqlc.types.list_of(NrqlDropRulesDropRule), graphql_name="rules"
    )


class NrqlFacetSuggestion(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attributes", "nrql")
    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="attributes"
    )

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")


class NrqlHistoricalQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "nrql", "timestamp")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    timestamp = sgqlc.types.Field(EpochSeconds, graphql_name="timestamp")


class Organization(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_management",
        "account_shares",
        "administrator",
        "authorization_management",
        "customer_id",
        "id",
        "name",
        "nrql_query_progress",
        "storage_account_id",
        "telemetry_id",
        "user_management",
    )
    account_management = sgqlc.types.Field(
        AccountManagementOrganizationStitchedFields, graphql_name="accountManagement"
    )

    account_shares = sgqlc.types.Field(
        "OrganizationAccountShares",
        graphql_name="accountShares",
        args=sgqlc.types.ArgDict(
            (
                (
                    "limiting_role_id",
                    sgqlc.types.Arg(Int, graphql_name="limitingRoleId", default=None),
                ),
                (
                    "source_organization_id",
                    sgqlc.types.Arg(
                        ID, graphql_name="sourceOrganizationId", default=None
                    ),
                ),
                (
                    "target_organization_id",
                    sgqlc.types.Arg(
                        ID, graphql_name="targetOrganizationId", default=None
                    ),
                ),
            )
        ),
    )

    administrator = sgqlc.types.Field(
        "OrganizationOrganizationAdministrator", graphql_name="administrator"
    )

    authorization_management = sgqlc.types.Field(
        AuthorizationManagementOrganizationStitchedFields,
        graphql_name="authorizationManagement",
    )

    customer_id = sgqlc.types.Field(String, graphql_name="customerId")

    id = sgqlc.types.Field(ID, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    nrql_query_progress = sgqlc.types.Field(
        "OrganizationNrdbResultContainer",
        graphql_name="nrqlQueryProgress",
        args=sgqlc.types.ArgDict(
            (
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="queryId", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `accounts` (`[Int!]!`)
    * `query_id` (`ID!`)
    """

    storage_account_id = sgqlc.types.Field(Int, graphql_name="storageAccountId")

    telemetry_id = sgqlc.types.Field(String, graphql_name="telemetryId")

    user_management = sgqlc.types.Field(
        "UserManagementOrganizationStitchedFields", graphql_name="userManagement"
    )


class OrganizationAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "id",
        "name",
        "parent_id",
        "partnership_id",
        "partnership_name",
        "pay_method",
        "region_code",
        "status",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    parent_id = sgqlc.types.Field(Int, graphql_name="parentId")

    partnership_id = sgqlc.types.Field(Int, graphql_name="partnershipId")

    partnership_name = sgqlc.types.Field(String, graphql_name="partnershipName")

    pay_method = sgqlc.types.Field(String, graphql_name="payMethod")

    region_code = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="regionCode"
    )

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")


class OrganizationAccountCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OrganizationAccount)),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class OrganizationAccountShare(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "id", "limiting_role", "name", "source", "target")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    limiting_role = sgqlc.types.Field(
        sgqlc.types.non_null("OrganizationAccountShareLimitingRoleWrapper"),
        graphql_name="limitingRole",
    )

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    source = sgqlc.types.Field(
        sgqlc.types.non_null("OrganizationAccountShareOrganizationWrapper"),
        graphql_name="source",
    )

    target = sgqlc.types.Field(
        sgqlc.types.non_null("OrganizationAccountShareOrganizationWrapper"),
        graphql_name="target",
    )


class OrganizationAccountShareCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OrganizationAccountShare)),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationAccountShareLimitingRoleWrapper(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class OrganizationAccountShareOrganizationWrapper(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(ID, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class OrganizationAccountShares(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("shared_accounts",)
    shared_accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("OrganizationSharedAccount")),
        graphql_name="sharedAccounts",
    )


class OrganizationAuthenticationDomain(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "authentication_type",
        "id",
        "name",
        "organization_id",
        "provisioning_type",
    )
    authentication_type = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationAuthenticationTypeEnum),
        graphql_name="authenticationType",
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    provisioning_type = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationProvisioningTypeEnum),
        graphql_name="provisioningType",
    )


class OrganizationAuthenticationDomainCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(OrganizationAuthenticationDomain))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationCreateOrganizationResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("job_id",)
    job_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="jobId")


class OrganizationCreateSharedAccountResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("shared_account",)
    shared_account = sgqlc.types.Field(
        "OrganizationSharedAccount", graphql_name="sharedAccount"
    )


class OrganizationCustomerContract(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "billing_structure",
        "customer_id",
        "id",
        "organization_groups",
        "telemetry_id",
    )
    billing_structure = sgqlc.types.Field(
        OrganizationBillingStructure, graphql_name="billingStructure"
    )

    customer_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="customerId"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    organization_groups = sgqlc.types.Field(
        sgqlc.types.non_null("OrganizationOrganizationGroupWrapper"),
        graphql_name="organizationGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        OrganizationOrganizationGroupFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
            )
        ),
    )

    telemetry_id = sgqlc.types.Field(String, graphql_name="telemetryId")


class OrganizationCustomerContractWrapper(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(OrganizationCustomerContract))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationCustomerOrganization(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("contract_id", "customer_id", "id", "name", "storage_account_id")
    contract_id = sgqlc.types.Field(ID, graphql_name="contractId")

    customer_id = sgqlc.types.Field(String, graphql_name="customerId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    storage_account_id = sgqlc.types.Field(Int, graphql_name="storageAccountId")


class OrganizationCustomerOrganizationWrapper(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(OrganizationCustomerOrganization))
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationUpdateErrorType), graphql_name="type"
    )


class OrganizationInformation(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class OrganizationMembersOrganizationMember(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationMembersOrganizationMemberType),
        graphql_name="type",
    )


class OrganizationMembersOrganizationMemberCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(OrganizationMembersOrganizationMember)
            )
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class OrganizationNrdbResultContainer(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "current_results",
        "metadata",
        "nrql",
        "other_result",
        "previous_results",
        "query_progress",
        "raw_response",
        "results",
        "total_result",
    )
    current_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="currentResults"
    )

    metadata = sgqlc.types.Field(NrdbMetadata, graphql_name="metadata")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    other_result = sgqlc.types.Field(NrdbResult, graphql_name="otherResult")

    previous_results = sgqlc.types.Field(
        sgqlc.types.list_of(NrdbResult), graphql_name="previousResults"
    )

    query_progress = sgqlc.types.Field(NrdbQueryProgress, graphql_name="queryProgress")

    raw_response = sgqlc.types.Field(NrdbRawResults, graphql_name="rawResponse")

    results = sgqlc.types.Field(sgqlc.types.list_of(NrdbResult), graphql_name="results")

    total_result = sgqlc.types.Field(NrdbResult, graphql_name="totalResult")


class OrganizationOrganizationAdministrator(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("organization_id", "organization_name")
    organization_id = sgqlc.types.Field(ID, graphql_name="organizationId")

    organization_name = sgqlc.types.Field(String, graphql_name="organizationName")


class OrganizationOrganizationCreateAsyncCustomerResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("customer_id",)
    customer_id = sgqlc.types.Field(String, graphql_name="customerId")


class OrganizationOrganizationCreateAsyncJobResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_utc", "error_message", "finished_utc", "id", "status")
    created_utc = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="createdUtc"
    )

    error_message = sgqlc.types.Field(String, graphql_name="errorMessage")

    finished_utc = sgqlc.types.Field(String, graphql_name="finishedUtc")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationOrganizationCreateJobResultStatusEnum),
        graphql_name="status",
    )


class OrganizationOrganizationCreateAsyncOrganizationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(ID, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class OrganizationOrganizationCreateAsyncResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("customer", "job", "organization")
    customer = sgqlc.types.Field(
        OrganizationOrganizationCreateAsyncCustomerResult, graphql_name="customer"
    )

    job = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationOrganizationCreateAsyncJobResult),
        graphql_name="job",
    )

    organization = sgqlc.types.Field(
        OrganizationOrganizationCreateAsyncOrganizationResult,
        graphql_name="organization",
    )


class OrganizationOrganizationCreateAsyncResultCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(OrganizationOrganizationCreateAsyncResult)
            )
        ),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationOrganizationGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class OrganizationOrganizationGroupWrapper(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor")
    items = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(OrganizationOrganizationGroup)),
        graphql_name="items",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")


class OrganizationProvisioningUpdateSubscriptionResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enqueued", "errors")
    enqueued = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enqueued")

    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null("OrganizationProvisioningUserError")
            )
        ),
        graphql_name="errors",
    )


class OrganizationProvisioningUserError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "path")
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    path = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="path"
    )


class OrganizationRevokeSharedAccountResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("shared_account",)
    shared_account = sgqlc.types.Field(
        "OrganizationSharedAccount", graphql_name="sharedAccount"
    )


class OrganizationSharedAccount(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "id",
        "limiting_role_id",
        "name",
        "source_organization_id",
        "source_organization_name",
        "target_organization_id",
        "target_organization_name",
    )
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="id")

    limiting_role_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="limitingRoleId"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    source_organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="sourceOrganizationId"
    )

    source_organization_name = sgqlc.types.Field(
        String, graphql_name="sourceOrganizationName"
    )

    target_organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="targetOrganizationId"
    )

    target_organization_name = sgqlc.types.Field(
        String, graphql_name="targetOrganizationName"
    )


class OrganizationUpdateResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "organization_information")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(OrganizationError))
        ),
        graphql_name="errors",
    )

    organization_information = sgqlc.types.Field(
        OrganizationInformation, graphql_name="organizationInformation"
    )


class OrganizationUpdateSharedAccountResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("shared_account",)
    shared_account = sgqlc.types.Field(
        OrganizationSharedAccount, graphql_name="sharedAccount"
    )


class PixieAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_pixie_project", "pixie_access_token")
    linked_pixie_project = sgqlc.types.Field(
        "PixiePixieProject", graphql_name="linkedPixieProject"
    )

    pixie_access_token = sgqlc.types.Field(SecureValue, graphql_name="pixieAccessToken")


class PixieActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("linked_pixie_projects",)
    linked_pixie_projects = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("PixieLinkedPixieProject")),
        graphql_name="linkedPixieProjects",
    )


class PixieLinkPixieProjectError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(PixieLinkPixieProjectErrorType, graphql_name="type")


class PixieLinkPixieProjectResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "linked_pixie_project", "success")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(PixieLinkPixieProjectError), graphql_name="errors"
    )

    linked_pixie_project = sgqlc.types.Field(
        "PixiePixieProject", graphql_name="linkedPixieProject"
    )

    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")


class PixieLinkedPixieProject(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "pixie_project")
    account_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="accountId")

    pixie_project = sgqlc.types.Field(
        sgqlc.types.non_null("PixiePixieProject"), graphql_name="pixieProject"
    )


class PixiePixieProject(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("api_key", "deploy_key")
    api_key = sgqlc.types.Field(SecureValue, graphql_name="apiKey")

    deploy_key = sgqlc.types.Field(SecureValue, graphql_name="deployKey")


class PixieRecordPixieTosAcceptanceError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(
        PixieRecordPixieTosAcceptanceErrorType, graphql_name="type"
    )


class PixieRecordPixieTosAcceptanceResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "success")
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(PixieRecordPixieTosAcceptanceError), graphql_name="errors"
    )

    success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="success")


class QueryHistoryActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("QueryHistoryNrqlHistoryResult")),
        graphql_name="nrql",
        args=sgqlc.types.ArgDict(
            (
                (
                    "options",
                    sgqlc.types.Arg(
                        QueryHistoryQueryHistoryOptionsInput,
                        graphql_name="options",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `options` (`QueryHistoryQueryHistoryOptionsInput`)
    """


class QueryHistoryNrqlHistoryResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_ids", "created_at", "query")
    account_ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name="accountIds"
    )

    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    query = sgqlc.types.Field(Nrql, graphql_name="query")


class ReferenceEntityCreateRepositoryError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid", "message", "type")
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="message")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(ReferenceEntityCreateRepositoryErrorType),
        graphql_name="type",
    )


class ReferenceEntityCreateRepositoryResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created", "failures", "updated")
    created = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="created",
    )

    failures = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(ReferenceEntityCreateRepositoryError)
            )
        ),
        graphql_name="failures",
    )

    updated = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))),
        graphql_name="updated",
    )


class RequestContext(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("user_id",)
    user_id = sgqlc.types.Field(ID, graphql_name="userId")


class RootMutationType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_management_cancel_account",
        "account_management_create_account",
        "account_management_update_account",
        "agent_application_add_app_to_entity_platform",
        "agent_application_create_browser",
        "agent_application_create_mobile",
        "agent_application_delete",
        "agent_application_enable_apm_browser",
        "agent_application_segments_replace_all_browser_segment_allow_list",
        "agent_application_settings_update",
        "ai_decisions_accept_suggestion",
        "ai_decisions_create_implicit_rule",
        "ai_decisions_create_rule",
        "ai_decisions_create_suggestion",
        "ai_decisions_decline_suggestion",
        "ai_decisions_delete_merge_feedback",
        "ai_decisions_delete_rule",
        "ai_decisions_delete_suggestion",
        "ai_decisions_disable_rule",
        "ai_decisions_enable_rule",
        "ai_decisions_find_applicable_incidents",
        "ai_decisions_postpone_suggestion",
        "ai_decisions_record_merge_feedback",
        "ai_decisions_simulate",
        "ai_decisions_update_implicit_rule",
        "ai_decisions_update_rule",
        "ai_issues_ack_issue",
        "ai_issues_close_incident",
        "ai_issues_resolve_issue",
        "ai_issues_unack_issue",
        "ai_issues_update_grace_period",
        "ai_issues_update_issue_ttl",
        "ai_notifications_create_channel",
        "ai_notifications_create_destination",
        "ai_notifications_delete_channel",
        "ai_notifications_delete_destination",
        "ai_notifications_test_channel",
        "ai_notifications_test_channel_by_id",
        "ai_notifications_test_destination",
        "ai_notifications_test_destination_by_id",
        "ai_notifications_update_channel",
        "ai_notifications_update_destination",
        "ai_workflows_create_workflow",
        "ai_workflows_delete_workflow",
        "ai_workflows_test_workflow",
        "ai_workflows_update_workflow",
        "alerts_condition_delete",
        "alerts_muting_rule_create",
        "alerts_muting_rule_delete",
        "alerts_muting_rule_update",
        "alerts_nrql_condition_baseline_create",
        "alerts_nrql_condition_baseline_update",
        "alerts_nrql_condition_static_create",
        "alerts_nrql_condition_static_update",
        "alerts_policy_create",
        "alerts_policy_delete",
        "alerts_policy_update",
        "alerts_update_cross_account_election",
        "alerts_update_cross_account_elections",
        "api_access_create_keys",
        "api_access_delete_keys",
        "api_access_update_keys",
        "authentication_domain_delete",
        "authorization_management_grant_access",
        "authorization_management_revoke_access",
        "change_tracking_create_deployment",
        "change_tracking_create_event",
        "cloud_configure_integration",
        "cloud_disable_integration",
        "cloud_link_account",
        "cloud_migrate_aws_gov_cloud_to_assume_role",
        "cloud_oci_generate_instrumented_payload_url",
        "cloud_oci_generate_log_group_instrumented_payload_url",
        "cloud_rename_account",
        "cloud_unlink_account",
        "cloud_update_account",
        "collaboration_create_code_mark",
        "collaboration_create_comment",
        "collaboration_create_context",
        "collaboration_create_email",
        "collaboration_create_external_service_connection",
        "collaboration_create_mention",
        "collaboration_create_thread",
        "collaboration_deactivate_code_mark",
        "collaboration_deactivate_comment",
        "collaboration_deactivate_context",
        "collaboration_deactivate_external_service_connection",
        "collaboration_deactivate_file",
        "collaboration_deactivate_mention",
        "collaboration_deactivate_thread",
        "collaboration_feedback_on_bot_response",
        "collaboration_get_upload_url",
        "collaboration_register_email",
        "collaboration_send_message",
        "collaboration_set_external_service_connection_channel",
        "collaboration_socket_subscribe",
        "collaboration_subscribe_to_thread",
        "collaboration_unsubscribe_from_thread",
        "collaboration_update_comment",
        "collaboration_update_context_add_comment",
        "collaboration_update_context_add_thread",
        "collaboration_update_subscription_read_info",
        "collaboration_update_thread_add_comment",
        "collaboration_update_thread_status",
        "custom_role_create",
        "custom_role_delete",
        "custom_role_update",
        "dashboard_add_widgets_to_page",
        "dashboard_create",
        "dashboard_create_live_url",
        "dashboard_create_snapshot_url",
        "dashboard_delete",
        "dashboard_reset_live_url_password",
        "dashboard_revoke_live_url",
        "dashboard_undelete",
        "dashboard_update",
        "dashboard_update_live_url",
        "dashboard_update_live_url_auth",
        "dashboard_update_live_url_creation_policies",
        "dashboard_update_page",
        "dashboard_update_widgets_in_page",
        "dashboard_widget_revoke_live_url",
        "data_management_copy_retentions",
        "data_management_create_account_limit",
        "data_management_create_event_retention_rule",
        "data_management_create_retention_rules",
        "data_management_delete_event_retention_rule",
        "data_management_update_feature_settings",
        "edge_create_trace_filter_rules",
        "edge_create_trace_observer",
        "edge_delete_trace_filter_rules",
        "edge_delete_trace_observers",
        "edge_update_trace_observers",
        "entity_delete",
        "entity_golden_metrics_override",
        "entity_golden_metrics_reset",
        "entity_golden_tags_override",
        "entity_golden_tags_reset",
        "entity_management_add_collection_members",
        "entity_management_create_ai_agent",
        "entity_management_create_ai_tool",
        "entity_management_create_collection",
        "entity_management_create_confluence_integration",
        "entity_management_create_confluence_rag_settings",
        "entity_management_create_git_repository",
        "entity_management_create_inbox_issue_category",
        "entity_management_create_performance_inbox_setting",
        "entity_management_create_pipeline_cloud_rule",
        "entity_management_create_rag_tool",
        "entity_management_create_relationship",
        "entity_management_create_scorecard",
        "entity_management_create_scorecard_rule",
        "entity_management_create_team",
        "entity_management_delete",
        "entity_management_delete_relationship",
        "entity_management_remove_collection_members",
        "entity_management_update",
        "entity_management_update_ai_agent",
        "entity_management_update_ai_tool",
        "entity_management_update_collection",
        "entity_management_update_confluence_integration",
        "entity_management_update_confluence_rag_settings",
        "entity_management_update_git_repository",
        "entity_management_update_inbox_issue_category",
        "entity_management_update_performance_inbox_setting",
        "entity_management_update_pipeline_cloud_rule",
        "entity_management_update_rag_tool",
        "entity_management_update_relationship",
        "entity_management_update_scorecard",
        "entity_management_update_scorecard_rule",
        "entity_management_update_team",
        "entity_management_update_teams_organization_settings",
        "entity_relationship_user_defined_create_or_replace",
        "entity_relationship_user_defined_delete",
        "errors_inbox_assign_error_group",
        "errors_inbox_delete_error_group_resource",
        "errors_inbox_update_error_group_state",
        "events_to_metrics_create_rule",
        "events_to_metrics_delete_rule",
        "events_to_metrics_update_rule",
        "fleet_control_add_fleet_members",
        "fleet_control_create_fleet",
        "fleet_control_create_fleet_deployment",
        "fleet_control_delete_fleet",
        "fleet_control_delete_fleet_deployment",
        "fleet_control_deploy",
        "fleet_control_remove_fleet_members",
        "fleet_control_update_fleet",
        "fleet_control_update_fleet_deployment",
        "historical_data_export_cancel_export",
        "historical_data_export_create_export",
        "incident_intelligence_environment_consent_accounts",
        "incident_intelligence_environment_consent_authorized_accounts",
        "incident_intelligence_environment_delete_environment",
        "incident_intelligence_environment_dissent_accounts",
        "installation_create_install_status",
        "installation_create_recipe_event",
        "installation_delete_install",
        "key_transaction_create",
        "key_transaction_delete",
        "key_transaction_update",
        "log_configurations_create_data_partition_rule",
        "log_configurations_create_obfuscation_expression",
        "log_configurations_create_obfuscation_rule",
        "log_configurations_create_parsing_rule",
        "log_configurations_delete_data_partition_rule",
        "log_configurations_delete_obfuscation_expression",
        "log_configurations_delete_obfuscation_rule",
        "log_configurations_delete_parsing_rule",
        "log_configurations_update_data_partition_rule",
        "log_configurations_update_live_archive_configuration",
        "log_configurations_update_obfuscation_expression",
        "log_configurations_update_obfuscation_rule",
        "log_configurations_update_parsing_rule",
        "log_configurations_upsert_pipeline_configuration",
        "machine_learning_add_document_index",
        "machine_learning_add_file_data_source",
        "machine_learning_add_stream_data_source",
        "machine_learning_create_file_data_source",
        "machine_learning_create_project",
        "machine_learning_create_stream_data_source",
        "machine_learning_delete_connector",
        "machine_learning_delete_file_data_source",
        "machine_learning_delete_project",
        "machine_learning_delete_stream_data_source",
        "machine_learning_halt_stream_data_source",
        "machine_learning_index_connector",
        "machine_learning_remove_document_index",
        "machine_learning_remove_file_data_source",
        "machine_learning_remove_stream_data_source",
        "machine_learning_start_stream_data_source",
        "machine_learning_update_file_data_source",
        "machine_learning_update_project",
        "machine_learning_update_stream_data_source",
        "metric_normalization_create_rule",
        "metric_normalization_disable_rule",
        "metric_normalization_edit_rule",
        "metric_normalization_enable_rule",
        "mobile_push_notification_remove_device",
        "mobile_push_notification_send_test_push",
        "mobile_push_notification_send_test_push_to_all",
        "nerd_storage_delete_collection",
        "nerd_storage_delete_document",
        "nerd_storage_vault_delete_secret",
        "nerd_storage_vault_write_secret",
        "nerd_storage_write_document",
        "nerdpack_add_allowed_accounts",
        "nerdpack_create",
        "nerdpack_remove_allowed_accounts",
        "nerdpack_remove_version_tag",
        "nerdpack_subscribe_accounts",
        "nerdpack_tag_version",
        "nerdpack_unsubscribe_accounts",
        "nr1_catalog_install_alert_policy_template",
        "nr1_catalog_install_dashboard_template",
        "nr1_catalog_submit_metadata",
        "nrql_cancel_query",
        "nrql_drop_rules_create",
        "nrql_drop_rules_delete",
        "organization_create",
        "organization_create_shared_account",
        "organization_provisioning_update_partner_subscription",
        "organization_revoke_shared_account",
        "organization_update",
        "organization_update_shared_account",
        "pixie_link_pixie_project",
        "pixie_record_pixie_tos_acceptance",
        "pixie_unlink_pixie_project",
        "reference_entity_create_or_update_repository",
        "secrets_management_create_secret",
        "secrets_management_delete_secret",
        "secrets_management_delete_secret_version",
        "secrets_management_recover_secret",
        "secrets_management_recover_secret_version",
        "secrets_management_update_secret",
        "service_level_create",
        "service_level_delete",
        "service_level_update",
        "sessions_revoke",
        "streaming_export_create_rule",
        "streaming_export_delete_rule",
        "streaming_export_disable_rule",
        "streaming_export_enable_rule",
        "streaming_export_update_rule",
        "synthetics_create_broken_links_monitor",
        "synthetics_create_cert_check_monitor",
        "synthetics_create_daily_monitor_downtime",
        "synthetics_create_monthly_monitor_downtime",
        "synthetics_create_once_monitor_downtime",
        "synthetics_create_private_location",
        "synthetics_create_script_api_monitor",
        "synthetics_create_script_browser_monitor",
        "synthetics_create_secure_credential",
        "synthetics_create_simple_browser_monitor",
        "synthetics_create_simple_monitor",
        "synthetics_create_step_monitor",
        "synthetics_create_weekly_monitor_downtime",
        "synthetics_delete_monitor",
        "synthetics_delete_monitor_downtime",
        "synthetics_delete_private_location",
        "synthetics_delete_secure_credential",
        "synthetics_edit_monitor_downtime",
        "synthetics_purge_private_location_queue",
        "synthetics_update_broken_links_monitor",
        "synthetics_update_cert_check_monitor",
        "synthetics_update_private_location",
        "synthetics_update_script_api_monitor",
        "synthetics_update_script_browser_monitor",
        "synthetics_update_secure_credential",
        "synthetics_update_simple_browser_monitor",
        "synthetics_update_simple_monitor",
        "synthetics_update_step_monitor",
        "system_identity_add_to_groups",
        "system_identity_create",
        "system_identity_create_group",
        "system_identity_delete",
        "system_identity_delete_group",
        "system_identity_remove_from_groups",
        "system_identity_update",
        "system_identity_update_group",
        "tagging_add_tags_to_entity",
        "tagging_delete_tag_from_entity",
        "tagging_delete_tag_values_from_entity",
        "tagging_replace_tags_on_entity",
        "user_management_add_users_to_groups",
        "user_management_create_group",
        "user_management_create_user",
        "user_management_delete_group",
        "user_management_delete_user",
        "user_management_remove_users_from_groups",
        "user_management_update_group",
        "user_management_update_user",
        "whats_new_set_last_read_date",
        "workload_create",
        "workload_delete",
        "workload_duplicate",
        "workload_update",
    )
    account_management_cancel_account = sgqlc.types.Field(
        AccountManagementManagedAccount,
        graphql_name="accountManagementCancelAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    account_management_create_account = sgqlc.types.Field(
        AccountManagementCreateResponse,
        graphql_name="accountManagementCreateAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "managed_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AccountManagementCreateInput),
                        graphql_name="managedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    account_management_update_account = sgqlc.types.Field(
        AccountManagementUpdateResponse,
        graphql_name="accountManagementUpdateAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "managed_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AccountManagementUpdateInput),
                        graphql_name="managedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    agent_application_add_app_to_entity_platform = sgqlc.types.Field(
        AgentApplicationAddAppToEntityPlatformResult,
        graphql_name="agentApplicationAddAppToEntityPlatform",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    agent_application_create_browser = sgqlc.types.Field(
        AgentApplicationCreateBrowserResult,
        graphql_name="agentApplicationCreateBrowser",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "settings",
                    sgqlc.types.Arg(
                        AgentApplicationBrowserSettingsInput,
                        graphql_name="settings",
                        default=None,
                    ),
                ),
            )
        ),
    )

    agent_application_create_mobile = sgqlc.types.Field(
        AgentApplicationCreateMobileResult,
        graphql_name="agentApplicationCreateMobile",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    agent_application_delete = sgqlc.types.Field(
        AgentApplicationDeleteResult,
        graphql_name="agentApplicationDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(Int, graphql_name="accountId", default=None),
                ),
                (
                    "application_name",
                    sgqlc.types.Arg(
                        String, graphql_name="applicationName", default=None
                    ),
                ),
                ("force", sgqlc.types.Arg(Boolean, graphql_name="force", default=None)),
                (
                    "guid",
                    sgqlc.types.Arg(EntityGuid, graphql_name="guid", default=None),
                ),
            )
        ),
    )

    agent_application_enable_apm_browser = sgqlc.types.Field(
        AgentApplicationEnableBrowserResult,
        graphql_name="agentApplicationEnableApmBrowser",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "settings",
                    sgqlc.types.Arg(
                        AgentApplicationBrowserSettingsInput,
                        graphql_name="settings",
                        default=None,
                    ),
                ),
            )
        ),
    )

    agent_application_segments_replace_all_browser_segment_allow_list = (
        sgqlc.types.Field(
            AgentApplicationSegmentsBrowserSegmentAllowListResult,
            graphql_name="agentApplicationSegmentsReplaceAllBrowserSegmentAllowList",
            args=sgqlc.types.ArgDict(
                (
                    (
                        "allow_list",
                        sgqlc.types.Arg(
                            sgqlc.types.non_null(
                                AgentApplicationSegmentsBrowserSegmentAllowListInput
                            ),
                            graphql_name="allowList",
                            default=None,
                        ),
                    ),
                    (
                        "entity_guid",
                        sgqlc.types.Arg(
                            sgqlc.types.non_null(EntityGuid),
                            graphql_name="entityGuid",
                            default=None,
                        ),
                    ),
                )
            ),
        )
    )

    agent_application_settings_update = sgqlc.types.Field(
        AgentApplicationSettingsUpdateResult,
        graphql_name="agentApplicationSettingsUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "settings",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AgentApplicationSettingsUpdateInput),
                        graphql_name="settings",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_accept_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsAcceptSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_create_implicit_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsCreateImplicitRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_create_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_create_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSuggestion),
        graphql_name="aiDecisionsCreateSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSuggestionBlueprint),
                        graphql_name="suggestion",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_decline_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeclineSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_delete_merge_feedback = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteMergeFeedback",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "child_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="childIssueId",
                        default=None,
                    ),
                ),
                (
                    "parent_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="parentIssueId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_delete_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_delete_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDeleteSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_disable_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsDisableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_enable_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsOperationResult),
        graphql_name="aiDecisionsEnableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_find_applicable_incidents = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsApplicableIncidentSearch),
        graphql_name="aiDecisionsFindApplicableIncidents",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "search",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSearchBlueprint),
                        graphql_name="search",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_postpone_suggestion = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsPostponeSuggestion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "suggestion_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="suggestionId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_record_merge_feedback = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsMergeFeedback),
        graphql_name="aiDecisionsRecordMergeFeedback",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "child_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="childIssueId",
                        default=None,
                    ),
                ),
                (
                    "opinion",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsOpinion),
                        graphql_name="opinion",
                        default=None,
                    ),
                ),
                (
                    "parent_issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="parentIssueId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_simulate = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsSimulation),
        graphql_name="aiDecisionsSimulate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "simulation",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsSimulationBlueprint),
                        graphql_name="simulation",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_decisions_update_implicit_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsUpdateImplicitRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_decisions_update_rule = sgqlc.types.Field(
        sgqlc.types.non_null(AiDecisionsRule),
        graphql_name="aiDecisionsUpdateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiDecisionsRuleBlueprint),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    ai_issues_ack_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesAckIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )

    ai_issues_close_incident = sgqlc.types.Field(
        AiIssuesIncidentUserActionResponse,
        graphql_name="aiIssuesCloseIncident",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "incident_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="incidentId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_issues_resolve_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesResolveIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )

    ai_issues_unack_issue = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesIssueUserActionResponse),
        graphql_name="aiIssuesUnackIssue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="issueId", default=None
                    ),
                ),
            )
        ),
    )

    ai_issues_update_grace_period = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesConfigurationOverrideResponse),
        graphql_name="aiIssuesUpdateGracePeriod",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "grace_period",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiIssuesGracePeriodConfigurationInput),
                        graphql_name="gracePeriod",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_issues_update_issue_ttl = sgqlc.types.Field(
        sgqlc.types.non_null(AiIssuesConfigurationOverrideResponse),
        graphql_name="aiIssuesUpdateIssueTtl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "issue_ttl",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Seconds),
                        graphql_name="issueTtl",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_create_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelResponse),
        graphql_name="aiNotificationsCreateChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelInput),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_create_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationResponse),
        graphql_name="aiNotificationsCreateDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationInput),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_delete_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDeleteResponse),
        graphql_name="aiNotificationsDeleteChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
            )
        ),
    )

    ai_notifications_delete_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDeleteResponse),
        graphql_name="aiNotificationsDeleteDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_test_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelTestResponse),
        graphql_name="aiNotificationsTestChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelInput),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
                (
                    "variables",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsDynamicVariable)
                        ),
                        graphql_name="variables",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `channel` (`AiNotificationsChannelInput!`)
    * `variables` (`[AiNotificationsDynamicVariable!]`)
    """

    ai_notifications_test_channel_by_id = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelTestResponse),
        graphql_name="aiNotificationsTestChannelById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
                (
                    "variables",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(AiNotificationsDynamicVariable)
                        ),
                        graphql_name="variables",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `channel_id` (`ID!`)
    * `variables` (`[AiNotificationsDynamicVariable!]`)
    """

    ai_notifications_test_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationTestResponse),
        graphql_name="aiNotificationsTestDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationInput),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_test_destination_by_id = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationTestResponse),
        graphql_name="aiNotificationsTestDestinationById",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
                (
                    "update",
                    sgqlc.types.Arg(
                        AiNotificationsDestinationUpdate,
                        graphql_name="update",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_notifications_update_channel = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsChannelResponse),
        graphql_name="aiNotificationsUpdateChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "channel",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsChannelUpdate),
                        graphql_name="channel",
                        default=None,
                    ),
                ),
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
            )
        ),
    )

    ai_notifications_update_destination = sgqlc.types.Field(
        sgqlc.types.non_null(AiNotificationsDestinationResponse),
        graphql_name="aiNotificationsUpdateDestination",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "destination",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiNotificationsDestinationUpdate),
                        graphql_name="destination",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="destinationId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_workflows_create_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsCreateWorkflowResponse),
        graphql_name="aiWorkflowsCreateWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "create_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsCreateWorkflowInput),
                        graphql_name="createWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_workflows_delete_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDeleteWorkflowResponse),
        graphql_name="aiWorkflowsDeleteWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "delete_channels",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="deleteChannels",
                        default=True,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    ai_workflows_test_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestWorkflowResponse),
        graphql_name="aiWorkflowsTestWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "test_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsTestWorkflowInput),
                        graphql_name="testWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )

    ai_workflows_update_workflow = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsUpdateWorkflowResponse),
        graphql_name="aiWorkflowsUpdateWorkflow",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "delete_unused_channels",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="deleteUnusedChannels",
                        default=True,
                    ),
                ),
                (
                    "update_workflow_data",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AiWorkflowsUpdateWorkflowInput),
                        graphql_name="updateWorkflowData",
                        default=None,
                    ),
                ),
            )
        ),
    )

    alerts_condition_delete = sgqlc.types.Field(
        AlertsConditionDeleteResponse,
        graphql_name="alertsConditionDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    alerts_muting_rule_create = sgqlc.types.Field(
        AlertsMutingRule,
        graphql_name="alertsMutingRuleCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsMutingRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    alerts_muting_rule_delete = sgqlc.types.Field(
        AlertsMutingRuleDeleteResponse,
        graphql_name="alertsMutingRuleDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    alerts_muting_rule_update = sgqlc.types.Field(
        AlertsMutingRule,
        graphql_name="alertsMutingRuleUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsMutingRuleUpdateInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    alerts_nrql_condition_baseline_create = sgqlc.types.Field(
        "AlertsNrqlBaselineCondition",
        graphql_name="alertsNrqlConditionBaselineCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionBaselineInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )

    alerts_nrql_condition_baseline_update = sgqlc.types.Field(
        "AlertsNrqlBaselineCondition",
        graphql_name="alertsNrqlConditionBaselineUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionUpdateBaselineInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    alerts_nrql_condition_static_create = sgqlc.types.Field(
        "AlertsNrqlStaticCondition",
        graphql_name="alertsNrqlConditionStaticCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionStaticInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "policy_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="policyId", default=None
                    ),
                ),
            )
        ),
    )

    alerts_nrql_condition_static_update = sgqlc.types.Field(
        "AlertsNrqlStaticCondition",
        graphql_name="alertsNrqlConditionStaticUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "condition",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsNrqlConditionUpdateStaticInput),
                        graphql_name="condition",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    alerts_policy_create = sgqlc.types.Field(
        AlertsPolicy,
        graphql_name="alertsPolicyCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsPolicyInput),
                        graphql_name="policy",
                        default=None,
                    ),
                ),
            )
        ),
    )

    alerts_policy_delete = sgqlc.types.Field(
        AlertsPolicyDeleteResponse,
        graphql_name="alertsPolicyDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    alerts_policy_update = sgqlc.types.Field(
        AlertsPolicy,
        graphql_name="alertsPolicyUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(AlertsPolicyUpdateInput),
                        graphql_name="policy",
                        default=None,
                    ),
                ),
            )
        ),
    )

    alerts_update_cross_account_election = sgqlc.types.Field(
        AlertsCrossAccountElectionStatus,
        graphql_name="alertsUpdateCrossAccountElection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "allowed_condition_account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(Int)),
                        graphql_name="allowedConditionAccountIds",
                        default=None,
                    ),
                ),
                (
                    "election_status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="electionStatus",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `allowed_condition_account_ids` (`[Int!]`)
    * `election_status` (`Boolean!`)
    """

    alerts_update_cross_account_elections = sgqlc.types.Field(
        AlertsCrossAccountElectionStatus,
        graphql_name="alertsUpdateCrossAccountElections",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="accountIds",
                        default=None,
                    ),
                ),
                (
                    "election_status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="electionStatus",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_ids` (`[Int!]!`)
    * `election_status` (`Boolean!`)
    """

    api_access_create_keys = sgqlc.types.Field(
        ApiAccessCreateKeyResponse,
        graphql_name="apiAccessCreateKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessCreateInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )

    api_access_delete_keys = sgqlc.types.Field(
        ApiAccessDeleteKeyResponse,
        graphql_name="apiAccessDeleteKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessDeleteInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )

    api_access_update_keys = sgqlc.types.Field(
        ApiAccessUpdateKeyResponse,
        graphql_name="apiAccessUpdateKeys",
        args=sgqlc.types.ArgDict(
            (
                (
                    "keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ApiAccessUpdateInput),
                        graphql_name="keys",
                        default=None,
                    ),
                ),
            )
        ),
    )

    authentication_domain_delete = sgqlc.types.Field(
        AuthenticationDomainType,
        graphql_name="authenticationDomainDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    authorization_management_grant_access = sgqlc.types.Field(
        AuthorizationManagementGrantAccessPayload,
        graphql_name="authorizationManagementGrantAccess",
        args=sgqlc.types.ArgDict(
            (
                (
                    "grant_access_options",
                    sgqlc.types.Arg(
                        AuthorizationManagementGrantAccess,
                        graphql_name="grantAccessOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    authorization_management_revoke_access = sgqlc.types.Field(
        AuthorizationManagementRevokeAccessPayload,
        graphql_name="authorizationManagementRevokeAccess",
        args=sgqlc.types.ArgDict(
            (
                (
                    "revoke_access_options",
                    sgqlc.types.Arg(
                        AuthorizationManagementRevokeAccess,
                        graphql_name="revokeAccessOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    change_tracking_create_deployment = sgqlc.types.Field(
        ChangeTrackingDeployment,
        graphql_name="changeTrackingCreateDeployment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "data_handling_rules",
                    sgqlc.types.Arg(
                        ChangeTrackingDataHandlingRules,
                        graphql_name="dataHandlingRules",
                        default=None,
                    ),
                ),
                (
                    "deployment",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ChangeTrackingDeploymentInput),
                        graphql_name="deployment",
                        default=None,
                    ),
                ),
            )
        ),
    )

    change_tracking_create_event = sgqlc.types.Field(
        ChangeTrackingCreateEventResponse,
        graphql_name="changeTrackingCreateEvent",
        args=sgqlc.types.ArgDict(
            (
                (
                    "change_tracking_event",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ChangeTrackingCreateEventInput),
                        graphql_name="changeTrackingEvent",
                        default=None,
                    ),
                ),
                (
                    "data_handling_rules",
                    sgqlc.types.Arg(
                        ChangeTrackingDataHandlingRules,
                        graphql_name="dataHandlingRules",
                        default=None,
                    ),
                ),
            )
        ),
    )

    cloud_configure_integration = sgqlc.types.Field(
        CloudConfigureIntegrationPayload,
        graphql_name="cloudConfigureIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "integrations",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(CloudIntegrationsInput),
                        graphql_name="integrations",
                        default=None,
                    ),
                ),
            )
        ),
    )

    cloud_disable_integration = sgqlc.types.Field(
        CloudDisableIntegrationPayload,
        graphql_name="cloudDisableIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "integrations",
                    sgqlc.types.Arg(
                        CloudDisableIntegrationsInput,
                        graphql_name="integrations",
                        default=None,
                    ),
                ),
            )
        ),
    )

    cloud_link_account = sgqlc.types.Field(
        CloudLinkAccountPayload,
        graphql_name="cloudLinkAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        CloudLinkCloudAccountsInput,
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )

    cloud_migrate_aws_gov_cloud_to_assume_role = sgqlc.types.Field(
        CloudMigrateAwsGovCloudToAssumeRolePayload,
        graphql_name="cloudMigrateAwsGovCloudToAssumeRole",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    CloudAwsGovCloudMigrateToAssumeroleInput
                                )
                            )
                        ),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `accounts` (`[CloudAwsGovCloudMigrateToAssumeroleInput!]!`)
    """

    cloud_oci_generate_instrumented_payload_url = sgqlc.types.Field(
        CloudOciInstrumentedPayloadUrlPayload,
        graphql_name="cloudOciGenerateInstrumentedPayloadUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "linked_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="linkedAccountId",
                        default=None,
                    ),
                ),
                (
                    "oci_region",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociRegion",
                        default=None,
                    ),
                ),
                (
                    "payload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(CloudOciInstrumentedPayloadInput)
                        ),
                        graphql_name="payload",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `linked_account_id` (`Int!`)
    * `oci_region` (`String!`)
    * `payload` (`[CloudOciInstrumentedPayloadInput]!`)
    """

    cloud_oci_generate_log_group_instrumented_payload_url = sgqlc.types.Field(
        CloudOciLogGroupInstrumentedPayloadUrlPayload,
        graphql_name="cloudOciGenerateLogGroupInstrumentedPayloadUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "linked_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="linkedAccountId",
                        default=None,
                    ),
                ),
                (
                    "log_group_payload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    CloudOciLogGroupInstrumentedPayloadInput
                                )
                            )
                        ),
                        graphql_name="logGroupPayload",
                        default=None,
                    ),
                ),
                (
                    "oci_region",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociRegion",
                        default=None,
                    ),
                ),
                (
                    "oci_tenant_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="ociTenantId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `linked_account_id` (`Int!`)
    * `log_group_payload`
      (`[CloudOciLogGroupInstrumentedPayloadInput!]!`)
    * `oci_region` (`String!`)
    * `oci_tenant_id` (`String!`)
    """

    cloud_rename_account = sgqlc.types.Field(
        CloudRenameAccountPayload,
        graphql_name="cloudRenameAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(CloudRenameAccountsInput),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `accounts` (`[CloudRenameAccountsInput]`)
    """

    cloud_unlink_account = sgqlc.types.Field(
        CloudUnlinkAccountPayload,
        graphql_name="cloudUnlinkAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(CloudUnlinkAccountsInput),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `accounts` (`[CloudUnlinkAccountsInput]`)
    """

    cloud_update_account = sgqlc.types.Field(
        CloudUpdateAccountPayload,
        graphql_name="cloudUpdateAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "accounts",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(CloudUpdateCloudAccountsInput),
                        graphql_name="accounts",
                        default=None,
                    ),
                ),
            )
        ),
    )

    collaboration_create_code_mark = sgqlc.types.Field(
        CollaborationCodeMark,
        graphql_name="collaborationCreateCodeMark",
        args=sgqlc.types.ArgDict(
            (
                (
                    "code",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="code", default=None
                    ),
                ),
                (
                    "file",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="file", default=None
                    ),
                ),
                (
                    "permalink",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="permalink",
                        default=None,
                    ),
                ),
                (
                    "repo",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="repo", default=None
                    ),
                ),
                (
                    "sha",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="sha", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_create_comment = sgqlc.types.Field(
        CollaborationComment,
        graphql_name="collaborationCreateComment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "assistant",
                    sgqlc.types.Arg(String, graphql_name="assistant", default=None),
                ),
                (
                    "assistant_config",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(CollaborationAssistantConfigInput),
                        graphql_name="assistantConfig",
                        default=None,
                    ),
                ),
                (
                    "body",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="body", default=None
                    ),
                ),
                (
                    "capability_id",
                    sgqlc.types.Arg(String, graphql_name="capabilityId", default=None),
                ),
                (
                    "context_metadata",
                    sgqlc.types.Arg(
                        CollaborationRawContextMetadata,
                        graphql_name="contextMetadata",
                        default=None,
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(String, graphql_name="destinationId", default=None),
                ),
                (
                    "display_name",
                    sgqlc.types.Arg(String, graphql_name="displayName", default=None),
                ),
                (
                    "n_rconnection_id",
                    sgqlc.types.Arg(
                        String, graphql_name="nRConnectionId", default=None
                    ),
                ),
                (
                    "reference_url",
                    sgqlc.types.Arg(String, graphql_name="referenceUrl", default=None),
                ),
                (
                    "slack_channel_id",
                    sgqlc.types.Arg(
                        String, graphql_name="slackChannelId", default=None
                    ),
                ),
                (
                    "suppress3rd_party_file_share",
                    sgqlc.types.Arg(
                        Boolean, graphql_name="suppress3rdPartyFileShare", default=None
                    ),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
                (
                    "time_picker_from",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="timePickerFrom", default=None
                    ),
                ),
                (
                    "time_picker_to",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="timePickerTo", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `assistant` (`String`)
    * `assistant_config` (`[CollaborationAssistantConfigInput]`)
    * `body` (`String!`)
    * `capability_id` (`String`)
    * `context_metadata` (`CollaborationRawContextMetadata`)
    * `destination_id` (`String`)
    * `display_name` (`String`)
    * `n_rconnection_id` (`String`)
    * `reference_url` (`String`)
    * `slack_channel_id` (`String`)
    * `suppress3rd_party_file_share` (`Boolean`)
    * `thread_id` (`ID!`)
    * `time_picker_from` (`EpochMilliseconds`)
    * `time_picker_to` (`EpochMilliseconds`)
    """

    collaboration_create_context = sgqlc.types.Field(
        CollaborationContext,
        graphql_name="collaborationCreateContext",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(Int, graphql_name="accountId", default=None),
                ),
                (
                    "context_metadata",
                    sgqlc.types.Arg(
                        CollaborationRawContextMetadata,
                        graphql_name="contextMetadata",
                        default=None,
                    ),
                ),
                (
                    "entity_guid",
                    sgqlc.types.Arg(
                        EntityGuid, graphql_name="entityGuid", default=None
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "reference_url",
                    sgqlc.types.Arg(String, graphql_name="referenceUrl", default=None),
                ),
            )
        ),
    )

    collaboration_create_email = sgqlc.types.Field(
        CollaborationEmail,
        graphql_name="collaborationCreateEmail",
        args=sgqlc.types.ArgDict(
            (
                (
                    "email_address",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="emailAddress",
                        default=None,
                    ),
                ),
            )
        ),
    )

    collaboration_create_external_service_connection = sgqlc.types.Field(
        CollaborationExternalServiceConnection,
        graphql_name="collaborationCreateExternalServiceConnection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_id",
                    sgqlc.types.Arg(ID, graphql_name="channelId", default=None),
                ),
                (
                    "external_id",
                    sgqlc.types.Arg(ID, graphql_name="externalId", default=None),
                ),
                (
                    "session_id",
                    sgqlc.types.Arg(ID, graphql_name="sessionId", default=None),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_create_mention = sgqlc.types.Field(
        CollaborationMention,
        graphql_name="collaborationCreateMention",
        args=sgqlc.types.ArgDict(
            (
                (
                    "comment_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="commentId", default=None
                    ),
                ),
                (
                    "external_application_type",
                    sgqlc.types.Arg(
                        CollaborationExternalApplicationType,
                        graphql_name="externalApplicationType",
                        default=None,
                    ),
                ),
                (
                    "external_creator_id",
                    sgqlc.types.Arg(ID, graphql_name="externalCreatorId", default=None),
                ),
                (
                    "mentionable_item_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="mentionableItemId",
                        default=None,
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_create_thread = sgqlc.types.Field(
        CollaborationThread,
        graphql_name="collaborationCreateThread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="contextId", default=None
                    ),
                ),
                (
                    "context_metadata",
                    sgqlc.types.Arg(
                        CollaborationRawContextMetadata,
                        graphql_name="contextMetadata",
                        default=None,
                    ),
                ),
                (
                    "external_application_type",
                    sgqlc.types.Arg(
                        String, graphql_name="externalApplicationType", default=None
                    ),
                ),
                (
                    "reference_url",
                    sgqlc.types.Arg(String, graphql_name="referenceUrl", default=None),
                ),
                (
                    "visibility",
                    sgqlc.types.Arg(String, graphql_name="visibility", default=None),
                ),
            )
        ),
    )

    collaboration_deactivate_code_mark = sgqlc.types.Field(
        CollaborationCodeMark,
        graphql_name="collaborationDeactivateCodeMark",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_comment = sgqlc.types.Field(
        CollaborationComment,
        graphql_name="collaborationDeactivateComment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_context = sgqlc.types.Field(
        CollaborationContext,
        graphql_name="collaborationDeactivateContext",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_external_service_connection = sgqlc.types.Field(
        CollaborationExternalServiceConnection,
        graphql_name="collaborationDeactivateExternalServiceConnection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_file = sgqlc.types.Field(
        String,
        graphql_name="collaborationDeactivateFile",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_mention = sgqlc.types.Field(
        CollaborationMention,
        graphql_name="collaborationDeactivateMention",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_deactivate_thread = sgqlc.types.Field(
        CollaborationThread,
        graphql_name="collaborationDeactivateThread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_feedback_on_bot_response = sgqlc.types.Field(
        CollaborationBotResponseFeedback,
        graphql_name="collaborationFeedbackOnBotResponse",
        args=sgqlc.types.ArgDict(
            (
                (
                    "content",
                    sgqlc.types.Arg(String, graphql_name="content", default=None),
                ),
                (
                    "rating",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="rating", default=None
                    ),
                ),
                (
                    "response_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="responseId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    collaboration_get_upload_url = sgqlc.types.Field(
        CollaborationFile,
        graphql_name="collaborationGetUploadUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "file_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="fileName", default=None
                    ),
                ),
                (
                    "is_screenshot",
                    sgqlc.types.Arg(Boolean, graphql_name="isScreenshot", default=None),
                ),
            )
        ),
    )

    collaboration_register_email = sgqlc.types.Field(
        CollaborationEmail, graphql_name="collaborationRegisterEmail"
    )

    collaboration_send_message = sgqlc.types.Field(
        CollaborationMessageSent,
        graphql_name="collaborationSendMessage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "body",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="body", default=None
                    ),
                ),
                (
                    "destination_id",
                    sgqlc.types.Arg(String, graphql_name="destinationId", default=None),
                ),
                (
                    "email_addresses",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String),
                        graphql_name="emailAddresses",
                        default=None,
                    ),
                ),
                (
                    "reference_url",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="referenceUrl",
                        default=None,
                    ),
                ),
                (
                    "shared_to_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="sharedToType",
                        default=None,
                    ),
                ),
                (
                    "slack_channel_id",
                    sgqlc.types.Arg(
                        String, graphql_name="slackChannelId", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `body` (`String!`)
    * `destination_id` (`String`)
    * `email_addresses` (`[String]`)
    * `reference_url` (`String!`)
    * `shared_to_type` (`String!`)
    * `slack_channel_id` (`String`)
    """

    collaboration_set_external_service_connection_channel = sgqlc.types.Field(
        CollaborationExternalServiceConnection,
        graphql_name="collaborationSetExternalServiceConnectionChannel",
        args=sgqlc.types.ArgDict(
            (
                (
                    "channel_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="channelId", default=None
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_socket_subscribe = sgqlc.types.Field(
        String,
        graphql_name="collaborationSocketSubscribe",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nr_connection_id",
                    sgqlc.types.Arg(
                        String, graphql_name="nrConnectionId", default=None
                    ),
                ),
                (
                    "subscription_keys",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(String),
                        graphql_name="subscriptionKeys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `nr_connection_id` (`String`)
    * `subscription_keys` (`[String]`)
    """

    collaboration_subscribe_to_thread = sgqlc.types.Field(
        CollaborationSubscriber,
        graphql_name="collaborationSubscribeToThread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
                ("user_id", sgqlc.types.Arg(ID, graphql_name="userId", default=None)),
            )
        ),
    )

    collaboration_unsubscribe_from_thread = sgqlc.types.Field(
        CollaborationSubscriber,
        graphql_name="collaborationUnsubscribeFromThread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_comment = sgqlc.types.Field(
        CollaborationComment,
        graphql_name="collaborationUpdateComment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "body",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="body", default=None
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_context_add_comment = sgqlc.types.Field(
        CollaborationContext,
        graphql_name="collaborationUpdateContextAddComment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "comment_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="commentId", default=None
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_context_add_thread = sgqlc.types.Field(
        CollaborationContext,
        graphql_name="collaborationUpdateContextAddThread",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_subscription_read_info = sgqlc.types.Field(
        CollaborationSubscriber,
        graphql_name="collaborationUpdateSubscriptionReadInfo",
        args=sgqlc.types.ArgDict(
            (
                (
                    "comments_read_count",
                    sgqlc.types.Arg(
                        Int, graphql_name="commentsReadCount", default=None
                    ),
                ),
                (
                    "last_comment_read_id",
                    sgqlc.types.Arg(ID, graphql_name="lastCommentReadId", default=None),
                ),
                (
                    "mentions_read_count",
                    sgqlc.types.Arg(
                        Int, graphql_name="mentionsReadCount", default=None
                    ),
                ),
                (
                    "thread_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="threadId", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_thread_add_comment = sgqlc.types.Field(
        CollaborationThread,
        graphql_name="collaborationUpdateThreadAddComment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "comment_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="commentId", default=None
                    ),
                ),
            )
        ),
    )

    collaboration_update_thread_status = sgqlc.types.Field(
        CollaborationThread,
        graphql_name="collaborationUpdateThreadStatus",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "status",
                    sgqlc.types.Arg(
                        CollaborationStatus, graphql_name="status", default=None
                    ),
                ),
            )
        ),
    )

    custom_role_create = sgqlc.types.Field(
        CustomRoleRoleMutationResult,
        graphql_name="customRoleCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "container",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(CustomRoleContainerInput),
                        graphql_name="container",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "permission_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(Int))
                        ),
                        graphql_name="permissionIds",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="scope", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `container` (`CustomRoleContainerInput!`)
    * `name` (`String!`)
    * `permission_ids` (`[Int!]!`)
    * `scope` (`String!`)
    """

    custom_role_delete = sgqlc.types.Field(
        CustomRoleRoleMutationResult,
        graphql_name="customRoleDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    custom_role_update = sgqlc.types.Field(
        CustomRoleRoleMutationResult,
        graphql_name="customRoleUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "permission_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(Int),
                        graphql_name="permissionIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `id` (`Int!`)
    * `name` (`String`)
    * `permission_ids` (`[Int]`)
    """

    dashboard_add_widgets_to_page = sgqlc.types.Field(
        DashboardAddWidgetsToPageResult,
        graphql_name="dashboardAddWidgetsToPage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "widgets",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(DashboardWidgetInput)
                            )
                        ),
                        graphql_name="widgets",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `widgets` (`[DashboardWidgetInput!]!`)
    """

    dashboard_create = sgqlc.types.Field(
        DashboardCreateResult,
        graphql_name="dashboardCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "dashboard",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardInput),
                        graphql_name="dashboard",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_create_live_url = sgqlc.types.Field(
        DashboardLiveUrl,
        graphql_name="dashboardCreateLiveUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "auth",
                    sgqlc.types.Arg(
                        DashboardLiveUrlAuthCreationInput,
                        graphql_name="auth",
                        default=None,
                    ),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        DashboardLiveUrlOptionsInput,
                        graphql_name="options",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_create_snapshot_url = sgqlc.types.Field(
        String,
        graphql_name="dashboardCreateSnapshotUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "params",
                    sgqlc.types.Arg(
                        DashboardSnapshotUrlInput, graphql_name="params", default=None
                    ),
                ),
            )
        ),
    )

    dashboard_delete = sgqlc.types.Field(
        DashboardDeleteResult,
        graphql_name="dashboardDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_reset_live_url_password = sgqlc.types.Field(
        DashboardResetLiveUrlPasswordResult,
        graphql_name="dashboardResetLiveUrlPassword",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    dashboard_revoke_live_url = sgqlc.types.Field(
        DashboardRevokeLiveDashboardUrlResult,
        graphql_name="dashboardRevokeLiveUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    dashboard_undelete = sgqlc.types.Field(
        DashboardUndeleteResult,
        graphql_name="dashboardUndelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_update = sgqlc.types.Field(
        DashboardUpdateResult,
        graphql_name="dashboardUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "dashboard",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardInput),
                        graphql_name="dashboard",
                        default=None,
                    ),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_update_live_url = sgqlc.types.Field(
        DashboardLiveUrl,
        graphql_name="dashboardUpdateLiveUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "options",
                    sgqlc.types.Arg(
                        DashboardLiveUrlOptionsInput,
                        graphql_name="options",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_update_live_url_auth = sgqlc.types.Field(
        DashboardLiveUrlAuth,
        graphql_name="dashboardUpdateLiveUrlAuth",
        args=sgqlc.types.ArgDict(
            (
                (
                    "auth",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardLiveUrlAuthUpdateInput),
                        graphql_name="auth",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    dashboard_update_live_url_creation_policies = sgqlc.types.Field(
        DashboardLiveUrlCreationPoliciesResult,
        graphql_name="dashboardUpdateLiveUrlCreationPolicies",
        args=sgqlc.types.ArgDict(
            (
                (
                    "policies",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            DashboardUpdateLiveUrlCreationPoliciesInput
                        ),
                        graphql_name="policies",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_update_page = sgqlc.types.Field(
        DashboardUpdatePageResult,
        graphql_name="dashboardUpdatePage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "page",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DashboardUpdatePageInput),
                        graphql_name="page",
                        default=None,
                    ),
                ),
            )
        ),
    )

    dashboard_update_widgets_in_page = sgqlc.types.Field(
        DashboardUpdateWidgetsInPageResult,
        graphql_name="dashboardUpdateWidgetsInPage",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "widgets",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(DashboardUpdateWidgetInput)
                            )
                        ),
                        graphql_name="widgets",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `widgets` (`[DashboardUpdateWidgetInput!]!`)
    """

    dashboard_widget_revoke_live_url = sgqlc.types.Field(
        DashboardRevokeLiveUrlResult,
        graphql_name="dashboardWidgetRevokeLiveUrl",
        args=sgqlc.types.ArgDict(
            (
                (
                    "uuid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="uuid", default=None
                    ),
                ),
            )
        ),
    )

    data_management_copy_retentions = sgqlc.types.Field(
        DataManagementBulkCopyResult,
        graphql_name="dataManagementCopyRetentions",
        args=sgqlc.types.ArgDict(
            (
                (
                    "destination_account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="destinationAccountIds",
                        default=None,
                    ),
                ),
                (
                    "source_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="sourceAccountId",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `destination_account_ids` (`[Int]!`)
    * `source_account_id` (`Int!`)
    """

    data_management_create_account_limit = sgqlc.types.Field(
        DataManagementAccountLimit,
        graphql_name="dataManagementCreateAccountLimit",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "account_limit",
                    sgqlc.types.Arg(
                        DataManagementAccountLimitInput,
                        graphql_name="accountLimit",
                        default=None,
                    ),
                ),
            )
        ),
    )

    data_management_create_event_retention_rule = sgqlc.types.Field(
        DataManagementRule,
        graphql_name="dataManagementCreateEventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
                (
                    "retention_in_days",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="retentionInDays",
                        default=None,
                    ),
                ),
            )
        ),
    )

    data_management_create_retention_rules = sgqlc.types.Field(
        sgqlc.types.list_of(DataManagementRule),
        graphql_name="dataManagementCreateRetentionRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "retention_rules",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(DataManagementRuleInput),
                        graphql_name="retentionRules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `retention_rules` (`[DataManagementRuleInput]`)
    """

    data_management_delete_event_retention_rule = sgqlc.types.Field(
        DataManagementRule,
        graphql_name="dataManagementDeleteEventRetentionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="namespace",
                        default=None,
                    ),
                ),
            )
        ),
    )

    data_management_update_feature_settings = sgqlc.types.Field(
        DataManagementFeatureSetting,
        graphql_name="dataManagementUpdateFeatureSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "setting",
                    sgqlc.types.Arg(
                        DataManagementAccountFeatureSettingInput,
                        graphql_name="setting",
                        default=None,
                    ),
                ),
            )
        ),
    )

    edge_create_trace_filter_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceFilterRuleResponses),
        graphql_name="edgeCreateTraceFilterRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EdgeCreateTraceFilterRulesInput),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="traceObserverId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    edge_create_trace_observer = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeCreateTraceObserverResponses),
        graphql_name="edgeCreateTraceObserver",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeCreateTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `trace_observer_configs` (`[EdgeCreateTraceObserverInput!]!`)
    """

    edge_delete_trace_filter_rules = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceFilterRuleResponses),
        graphql_name="edgeDeleteTraceFilterRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EdgeDeleteTraceFilterRulesInput),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="traceObserverId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    edge_delete_trace_observers = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeDeleteTraceObserverResponses),
        graphql_name="edgeDeleteTraceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeDeleteTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `trace_observer_configs` (`[EdgeDeleteTraceObserverInput!]!`)
    """

    edge_update_trace_observers = sgqlc.types.Field(
        sgqlc.types.non_null(EdgeUpdateTraceObserverResponses),
        graphql_name="edgeUpdateTraceObservers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "trace_observer_configs",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EdgeUpdateTraceObserverInput)
                            )
                        ),
                        graphql_name="traceObserverConfigs",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `trace_observer_configs` (`[EdgeUpdateTraceObserverInput!]!`)
    """

    entity_delete = sgqlc.types.Field(
        EntityDeleteResult,
        graphql_name="entityDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "force_delete",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="forceDelete",
                        default=False,
                    ),
                ),
                (
                    "guids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(EntityGuid))
                        ),
                        graphql_name="guids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `force_delete` (`Boolean!`) (default: `false`)
    * `guids` (`[EntityGuid!]!`)
    """

    entity_golden_metrics_override = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricsDomainTypeScopedResponse),
        graphql_name="entityGoldenMetricsOverride",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
                (
                    "metrics",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EntityGoldenMetricInput)
                            )
                        ),
                        graphql_name="metrics",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `context` (`EntityGoldenContextInput!`)
    * `domain_type` (`DomainTypeInput!`)
    * `metrics` (`[EntityGoldenMetricInput!]!`)
    """

    entity_golden_metrics_reset = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenMetricsDomainTypeScopedResponse),
        graphql_name="entityGoldenMetricsReset",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_golden_tags_override = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenTagsDomainTypeScopedResponse),
        graphql_name="entityGoldenTagsOverride",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(EntityGoldenTagInput)
                            )
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `context` (`EntityGoldenContextInput!`)
    * `domain_type` (`DomainTypeInput!`)
    * `tags` (`[EntityGoldenTagInput!]!`)
    """

    entity_golden_tags_reset = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGoldenTagsDomainTypeScopedResponse),
        graphql_name="entityGoldenTagsReset",
        args=sgqlc.types.ArgDict(
            (
                (
                    "context",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGoldenContextInput),
                        graphql_name="context",
                        default=None,
                    ),
                ),
                (
                    "domain_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(DomainTypeInput),
                        graphql_name="domainType",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_add_collection_members = sgqlc.types.Field(
        sgqlc.types.list_of(ID),
        graphql_name="entityManagementAddCollectionMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="collectionId",
                        default=None,
                    ),
                ),
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `collection_id` (`ID!`)
    * `ids` (`[ID!]!`)
    """

    entity_management_create_ai_agent = sgqlc.types.Field(
        EntityManagementAiAgentEntityCreateResult,
        graphql_name="entityManagementCreateAiAgent",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ai_agent_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementAiAgentEntityCreateInput),
                        graphql_name="aiAgentEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_ai_tool = sgqlc.types.Field(
        EntityManagementAiToolEntityCreateResult,
        graphql_name="entityManagementCreateAiTool",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ai_tool_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementAiToolEntityCreateInput),
                        graphql_name="aiToolEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_collection = sgqlc.types.Field(
        EntityManagementCollectionEntityCreateResult,
        graphql_name="entityManagementCreateCollection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementCollectionEntityCreateInput
                        ),
                        graphql_name="collectionEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_confluence_integration = sgqlc.types.Field(
        EntityManagementConfluenceIntegrationCreateResult,
        graphql_name="entityManagementCreateConfluenceIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "confluence_integration",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementConfluenceIntegrationCreateInput
                        ),
                        graphql_name="confluenceIntegration",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_confluence_rag_settings = sgqlc.types.Field(
        EntityManagementConfluenceRagSettingsEntityCreateResult,
        graphql_name="entityManagementCreateConfluenceRagSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "confluence_rag_settings_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementConfluenceRagSettingsEntityCreateInput
                        ),
                        graphql_name="confluenceRagSettingsEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_git_repository = sgqlc.types.Field(
        EntityManagementGitRepositoryEntityCreateResult,
        graphql_name="entityManagementCreateGitRepository",
        args=sgqlc.types.ArgDict(
            (
                (
                    "git_repository_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementGitRepositoryEntityCreateInput
                        ),
                        graphql_name="gitRepositoryEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_inbox_issue_category = sgqlc.types.Field(
        EntityManagementInboxIssueCategoryEntityCreateResult,
        graphql_name="entityManagementCreateInboxIssueCategory",
        args=sgqlc.types.ArgDict(
            (
                (
                    "inbox_issue_category_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementInboxIssueCategoryEntityCreateInput
                        ),
                        graphql_name="inboxIssueCategoryEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_performance_inbox_setting = sgqlc.types.Field(
        EntityManagementPerformanceInboxSettingEntityCreateResult,
        graphql_name="entityManagementCreatePerformanceInboxSetting",
        args=sgqlc.types.ArgDict(
            (
                (
                    "performance_inbox_setting_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementPerformanceInboxSettingEntityCreateInput
                        ),
                        graphql_name="performanceInboxSettingEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_pipeline_cloud_rule = sgqlc.types.Field(
        EntityManagementPipelineCloudRuleEntityCreateResult,
        graphql_name="entityManagementCreatePipelineCloudRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "pipeline_cloud_rule_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementPipelineCloudRuleEntityCreateInput
                        ),
                        graphql_name="pipelineCloudRuleEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_rag_tool = sgqlc.types.Field(
        EntityManagementRagToolEntityCreateResult,
        graphql_name="entityManagementCreateRagTool",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rag_tool_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementRagToolEntityCreateInput),
                        graphql_name="ragToolEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_relationship = sgqlc.types.Field(
        EntityManagementRelationshipCreateResult,
        graphql_name="entityManagementCreateRelationship",
        args=sgqlc.types.ArgDict(
            (
                (
                    "relationship",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementRelationshipCreateInput),
                        graphql_name="relationship",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_scorecard = sgqlc.types.Field(
        EntityManagementScorecardEntityCreateResult,
        graphql_name="entityManagementCreateScorecard",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scorecard_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementScorecardEntityCreateInput
                        ),
                        graphql_name="scorecardEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_scorecard_rule = sgqlc.types.Field(
        EntityManagementScorecardRuleEntityCreateResult,
        graphql_name="entityManagementCreateScorecardRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scorecard_rule_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementScorecardRuleEntityCreateInput
                        ),
                        graphql_name="scorecardRuleEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_create_team = sgqlc.types.Field(
        EntityManagementTeamEntityCreateResult,
        graphql_name="entityManagementCreateTeam",
        args=sgqlc.types.ArgDict(
            (
                (
                    "team_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementTeamEntityCreateInput),
                        graphql_name="teamEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_management_delete = sgqlc.types.Field(
        EntityManagementEntityDeleteResult,
        graphql_name="entityManagementDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_delete_relationship = sgqlc.types.Field(
        EntityManagementRelationshipDeleteResult,
        graphql_name="entityManagementDeleteRelationship",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="sourceId", default=None
                    ),
                ),
                (
                    "target_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="targetId", default=None
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )

    entity_management_remove_collection_members = sgqlc.types.Field(
        sgqlc.types.list_of(ID),
        graphql_name="entityManagementRemoveCollectionMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="collectionId",
                        default=None,
                    ),
                ),
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `collection_id` (`ID!`)
    * `ids` (`[ID!]!`)
    """

    entity_management_update = sgqlc.types.Field(
        EntityManagementGenericEntityUpdateResult,
        graphql_name="entityManagementUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementGenericEntityUpdateInput),
                        graphql_name="entity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_ai_agent = sgqlc.types.Field(
        EntityManagementAiAgentEntityUpdateResult,
        graphql_name="entityManagementUpdateAiAgent",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ai_agent_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementAiAgentEntityUpdateInput),
                        graphql_name="aiAgentEntity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_ai_tool = sgqlc.types.Field(
        EntityManagementAiToolEntityUpdateResult,
        graphql_name="entityManagementUpdateAiTool",
        args=sgqlc.types.ArgDict(
            (
                (
                    "ai_tool_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementAiToolEntityUpdateInput),
                        graphql_name="aiToolEntity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_collection = sgqlc.types.Field(
        EntityManagementCollectionEntityUpdateResult,
        graphql_name="entityManagementUpdateCollection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementCollectionEntityUpdateInput
                        ),
                        graphql_name="collectionEntity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_confluence_integration = sgqlc.types.Field(
        EntityManagementConfluenceIntegrationUpdateResult,
        graphql_name="entityManagementUpdateConfluenceIntegration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "confluence_integration",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementConfluenceIntegrationUpdateInput
                        ),
                        graphql_name="confluenceIntegration",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_confluence_rag_settings = sgqlc.types.Field(
        EntityManagementConfluenceRagSettingsEntityUpdateResult,
        graphql_name="entityManagementUpdateConfluenceRagSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "confluence_rag_settings_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementConfluenceRagSettingsEntityUpdateInput
                        ),
                        graphql_name="confluenceRagSettingsEntity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_git_repository = sgqlc.types.Field(
        EntityManagementGitRepositoryEntityUpdateResult,
        graphql_name="entityManagementUpdateGitRepository",
        args=sgqlc.types.ArgDict(
            (
                (
                    "git_repository_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementGitRepositoryEntityUpdateInput
                        ),
                        graphql_name="gitRepositoryEntity",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_inbox_issue_category = sgqlc.types.Field(
        EntityManagementInboxIssueCategoryEntityUpdateResult,
        graphql_name="entityManagementUpdateInboxIssueCategory",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "inbox_issue_category_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementInboxIssueCategoryEntityUpdateInput
                        ),
                        graphql_name="inboxIssueCategoryEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_performance_inbox_setting = sgqlc.types.Field(
        EntityManagementPerformanceInboxSettingEntityUpdateResult,
        graphql_name="entityManagementUpdatePerformanceInboxSetting",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "performance_inbox_setting_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementPerformanceInboxSettingEntityUpdateInput
                        ),
                        graphql_name="performanceInboxSettingEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_pipeline_cloud_rule = sgqlc.types.Field(
        EntityManagementPipelineCloudRuleEntityUpdateResult,
        graphql_name="entityManagementUpdatePipelineCloudRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "pipeline_cloud_rule_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementPipelineCloudRuleEntityUpdateInput
                        ),
                        graphql_name="pipelineCloudRuleEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_rag_tool = sgqlc.types.Field(
        EntityManagementRagToolEntityUpdateResult,
        graphql_name="entityManagementUpdateRagTool",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rag_tool_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementRagToolEntityUpdateInput),
                        graphql_name="ragToolEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_relationship = sgqlc.types.Field(
        EntityManagementRelationshipUpdateResult,
        graphql_name="entityManagementUpdateRelationship",
        args=sgqlc.types.ArgDict(
            (
                (
                    "relationship",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementRelationshipUpdateInput),
                        graphql_name="relationship",
                        default=None,
                    ),
                ),
                (
                    "source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="sourceId", default=None
                    ),
                ),
                (
                    "target_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="targetId", default=None
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )

    entity_management_update_scorecard = sgqlc.types.Field(
        EntityManagementScorecardEntityUpdateResult,
        graphql_name="entityManagementUpdateScorecard",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "scorecard_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementScorecardEntityUpdateInput
                        ),
                        graphql_name="scorecardEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_scorecard_rule = sgqlc.types.Field(
        EntityManagementScorecardRuleEntityUpdateResult,
        graphql_name="entityManagementUpdateScorecardRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "scorecard_rule_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementScorecardRuleEntityUpdateInput
                        ),
                        graphql_name="scorecardRuleEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_team = sgqlc.types.Field(
        EntityManagementTeamEntityUpdateResult,
        graphql_name="entityManagementUpdateTeam",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "team_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityManagementTeamEntityUpdateInput),
                        graphql_name="teamEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_management_update_teams_organization_settings = sgqlc.types.Field(
        EntityManagementTeamsOrganizationSettingsEntityUpdateResult,
        graphql_name="entityManagementUpdateTeamsOrganizationSettings",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "teams_organization_settings_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            EntityManagementTeamsOrganizationSettingsEntityUpdateInput
                        ),
                        graphql_name="teamsOrganizationSettingsEntity",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    entity_relationship_user_defined_create_or_replace = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedCreateOrReplaceResult),
        graphql_name="entityRelationshipUserDefinedCreateOrReplace",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "target_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="targetEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityRelationshipEdgeType),
                        graphql_name="type",
                        default=None,
                    ),
                ),
            )
        ),
    )

    entity_relationship_user_defined_delete = sgqlc.types.Field(
        sgqlc.types.non_null(EntityRelationshipUserDefinedDeleteResult),
        graphql_name="entityRelationshipUserDefinedDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "source_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "target_entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="targetEntityGuid",
                        default=None,
                    ),
                ),
                (
                    "type",
                    sgqlc.types.Arg(
                        EntityRelationshipEdgeType, graphql_name="type", default=None
                    ),
                ),
            )
        ),
    )

    errors_inbox_assign_error_group = sgqlc.types.Field(
        ErrorsInboxAssignErrorGroupResponse,
        graphql_name="errorsInboxAssignErrorGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "assignment",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ErrorsInboxAssignErrorGroupInput),
                        graphql_name="assignment",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    errors_inbox_delete_error_group_resource = sgqlc.types.Field(
        ErrorsInboxDeleteErrorGroupResourceResponse,
        graphql_name="errorsInboxDeleteErrorGroupResource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "resource_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="resourceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    errors_inbox_update_error_group_state = sgqlc.types.Field(
        ErrorsInboxUpdateErrorGroupStateResponse,
        graphql_name="errorsInboxUpdateErrorGroupState",
        args=sgqlc.types.ArgDict(
            (
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
                (
                    "resolve_in_next_version",
                    sgqlc.types.Arg(
                        Boolean, graphql_name="resolveInNextVersion", default=None
                    ),
                ),
                (
                    "state",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ErrorsInboxErrorGroupState),
                        graphql_name="state",
                        default=None,
                    ),
                ),
                (
                    "versions",
                    sgqlc.types.Arg(
                        ErrorsInboxStateVersionInput,
                        graphql_name="versions",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `id` (`ID`)
    * `ids` (`[ID!]`)
    * `resolve_in_next_version` (`Boolean`)
    * `state` (`ErrorsInboxErrorGroupState!`)
    * `versions` (`ErrorsInboxStateVersionInput`)
    """

    events_to_metrics_create_rule = sgqlc.types.Field(
        EventsToMetricsCreateRuleResult,
        graphql_name="eventsToMetricsCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsCreateRuleInput)
                        ),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `rules` (`[EventsToMetricsCreateRuleInput]!`)
    """

    events_to_metrics_delete_rule = sgqlc.types.Field(
        EventsToMetricsDeleteRuleResult,
        graphql_name="eventsToMetricsDeleteRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "deletes",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsDeleteRuleInput)
                        ),
                        graphql_name="deletes",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `deletes` (`[EventsToMetricsDeleteRuleInput]!`)
    """

    events_to_metrics_update_rule = sgqlc.types.Field(
        EventsToMetricsUpdateRuleResult,
        graphql_name="eventsToMetricsUpdateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "updates",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(EventsToMetricsUpdateRuleInput)
                        ),
                        graphql_name="updates",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `updates` (`[EventsToMetricsUpdateRuleInput]!`)
    """

    fleet_control_add_fleet_members = sgqlc.types.Field(
        FleetControlFleetMembersResult,
        graphql_name="fleetControlAddFleetMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="fleetId", default=None
                    ),
                ),
                (
                    "members",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(FleetControlFleetMemberRingInput)
                        ),
                        graphql_name="members",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `fleet_id` (`ID!`)
    * `members` (`[FleetControlFleetMemberRingInput!]`)
    """

    fleet_control_create_fleet = sgqlc.types.Field(
        FleetControlCreateFleetResult,
        graphql_name="fleetControlCreateFleet",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_entity",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlFleetEntityCreateInput),
                        graphql_name="fleetEntity",
                        default=None,
                    ),
                ),
            )
        ),
    )

    fleet_control_create_fleet_deployment = sgqlc.types.Field(
        FleetControlFleetDeploymentCreateResult,
        graphql_name="fleetControlCreateFleetDeployment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_deployment",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlFleetDeploymentCreateInput),
                        graphql_name="fleetDeployment",
                        default=None,
                    ),
                ),
            )
        ),
    )

    fleet_control_delete_fleet = sgqlc.types.Field(
        FleetControlDeleteFleetResult,
        graphql_name="fleetControlDeleteFleet",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    fleet_control_delete_fleet_deployment = sgqlc.types.Field(
        FleetControlFleetDeploymentDeleteResult,
        graphql_name="fleetControlDeleteFleetDeployment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    fleet_control_deploy = sgqlc.types.Field(
        FleetControlDeployResult,
        graphql_name="fleetControlDeploy",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="fleetId", default=None
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlFleetDeploymentPolicyInput),
                        graphql_name="policy",
                        default=None,
                    ),
                ),
            )
        ),
    )

    fleet_control_remove_fleet_members = sgqlc.types.Field(
        FleetControlFleetMembersResult,
        graphql_name="fleetControlRemoveFleetMembers",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="fleetId", default=None
                    ),
                ),
                (
                    "members",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(FleetControlFleetMemberRingInput)
                        ),
                        graphql_name="members",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `fleet_id` (`ID!`)
    * `members` (`[FleetControlFleetMemberRingInput!]`)
    """

    fleet_control_update_fleet = sgqlc.types.Field(
        FleetControlUpdateFleetResult,
        graphql_name="fleetControlUpdateFleet",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_update",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlUpdateFleetEntityInput),
                        graphql_name="fleetUpdate",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    fleet_control_update_fleet_deployment = sgqlc.types.Field(
        FleetControlFleetDeploymentUpdateResult,
        graphql_name="fleetControlUpdateFleetDeployment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fleet_deployment_update",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(FleetControlFleetDeploymentUpdateInput),
                        graphql_name="fleetDeploymentUpdate",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    historical_data_export_cancel_export = sgqlc.types.Field(
        HistoricalDataExportCustomerExportResponse,
        graphql_name="historicalDataExportCancelExport",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    historical_data_export_create_export = sgqlc.types.Field(
        HistoricalDataExportCustomerExportResponse,
        graphql_name="historicalDataExportCreateExport",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                ("nrql", sgqlc.types.Arg(Nrql, graphql_name="nrql", default=None)),
            )
        ),
    )

    incident_intelligence_environment_consent_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentConsentAccounts,
        graphql_name="incidentIntelligenceEnvironmentConsentAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="accountIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_ids` (`[Int]!`)
    """

    incident_intelligence_environment_consent_authorized_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentConsentAuthorizedAccounts,
        graphql_name="incidentIntelligenceEnvironmentConsentAuthorizedAccounts",
    )

    incident_intelligence_environment_delete_environment = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentDeleteEnvironment,
        graphql_name="incidentIntelligenceEnvironmentDeleteEnvironment",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    incident_intelligence_environment_dissent_accounts = sgqlc.types.Field(
        IncidentIntelligenceEnvironmentDissentAccounts,
        graphql_name="incidentIntelligenceEnvironmentDissentAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),
                        graphql_name="accountIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_ids` (`[Int]!`)
    """

    installation_create_install_status = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationInstallStatus),
        graphql_name="installationCreateInstallStatus",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "install_status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(InstallationInstallStatusInput),
                        graphql_name="installStatus",
                        default=None,
                    ),
                ),
            )
        ),
    )

    installation_create_recipe_event = sgqlc.types.Field(
        sgqlc.types.non_null(InstallationRecipeEvent),
        graphql_name="installationCreateRecipeEvent",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "status",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(InstallationRecipeStatus),
                        graphql_name="status",
                        default=None,
                    ),
                ),
            )
        ),
    )

    installation_delete_install = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean),
        graphql_name="installationDeleteInstall",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    key_transaction_create = sgqlc.types.Field(
        KeyTransactionCreateResult,
        graphql_name="keyTransactionCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "apdex_target",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Float),
                        graphql_name="apdexTarget",
                        default=None,
                    ),
                ),
                (
                    "application_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="applicationGuid",
                        default=None,
                    ),
                ),
                (
                    "browser_apdex_target",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Float),
                        graphql_name="browserApdexTarget",
                        default=None,
                    ),
                ),
                (
                    "metric_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="metricName",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    key_transaction_delete = sgqlc.types.Field(
        KeyTransactionDeleteResult,
        graphql_name="keyTransactionDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    key_transaction_update = sgqlc.types.Field(
        KeyTransactionUpdateResult,
        graphql_name="keyTransactionUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "apdex_target",
                    sgqlc.types.Arg(Float, graphql_name="apdexTarget", default=None),
                ),
                (
                    "browser_apdex_target",
                    sgqlc.types.Arg(
                        Float, graphql_name="browserApdexTarget", default=None
                    ),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
            )
        ),
    )

    log_configurations_create_data_partition_rule = sgqlc.types.Field(
        LogConfigurationsCreateDataPartitionRuleResponse,
        graphql_name="logConfigurationsCreateDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateDataPartitionRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_create_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsCreateObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "expression",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateObfuscationExpressionInput
                        ),
                        graphql_name="expression",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_create_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsCreateObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsCreateObfuscationRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_create_parsing_rule = sgqlc.types.Field(
        LogConfigurationsCreateParsingRuleResponse,
        graphql_name="logConfigurationsCreateParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(LogConfigurationsParsingRuleConfiguration),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_delete_data_partition_rule = sgqlc.types.Field(
        LogConfigurationsDeleteDataPartitionRuleResponse,
        graphql_name="logConfigurationsDeleteDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    log_configurations_delete_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsDeleteObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    log_configurations_delete_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsDeleteObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    log_configurations_delete_parsing_rule = sgqlc.types.Field(
        LogConfigurationsDeleteParsingRuleResponse,
        graphql_name="logConfigurationsDeleteParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    log_configurations_update_data_partition_rule = sgqlc.types.Field(
        LogConfigurationsUpdateDataPartitionRuleResponse,
        graphql_name="logConfigurationsUpdateDataPartitionRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        LogConfigurationsUpdateDataPartitionRuleInput,
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_update_live_archive_configuration = sgqlc.types.Field(
        LogConfigurationsLiveArchiveConfiguration,
        graphql_name="logConfigurationsUpdateLiveArchiveConfiguration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "enabled",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="enabled",
                        default=None,
                    ),
                ),
                (
                    "event_type",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="eventType",
                        default=None,
                    ),
                ),
                (
                    "retention_policy",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsLiveArchiveRetentionPolicyType
                        ),
                        graphql_name="retentionPolicy",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_update_obfuscation_expression = sgqlc.types.Field(
        LogConfigurationsObfuscationExpression,
        graphql_name="logConfigurationsUpdateObfuscationExpression",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "expression",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsUpdateObfuscationExpressionInput
                        ),
                        graphql_name="expression",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_update_obfuscation_rule = sgqlc.types.Field(
        LogConfigurationsObfuscationRule,
        graphql_name="logConfigurationsUpdateObfuscationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsUpdateObfuscationRuleInput
                        ),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_update_parsing_rule = sgqlc.types.Field(
        LogConfigurationsUpdateParsingRuleResponse,
        graphql_name="logConfigurationsUpdateParsingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(LogConfigurationsParsingRuleConfiguration),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    log_configurations_upsert_pipeline_configuration = sgqlc.types.Field(
        LogConfigurationsUpsertPipelineConfigurationResponse,
        graphql_name="logConfigurationsUpsertPipelineConfiguration",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "pipeline_configuration",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            LogConfigurationsPipelineConfigurationInput
                        ),
                        graphql_name="pipelineConfiguration",
                        default=None,
                    ),
                ),
            )
        ),
    )

    machine_learning_add_document_index = sgqlc.types.Field(
        MachineLearningTransactionResponse,
        graphql_name="machineLearningAddDocumentIndex",
        args=sgqlc.types.ArgDict(
            (
                (
                    "configuration",
                    sgqlc.types.Arg(
                        MachineLearningAddDocumentIndexConfiguration,
                        graphql_name="configuration",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "rag_setting_id",
                    sgqlc.types.Arg(ID, graphql_name="ragSettingId", default=None),
                ),
                (
                    "tool_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="toolId", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_add_file_data_source = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningAddFileDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "file_data_source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="fileDataSourceId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_add_stream_data_source = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningAddStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "stream_data_source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="streamDataSourceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    machine_learning_create_file_data_source = sgqlc.types.Field(
        MachineLearningFileDataSource,
        graphql_name="machineLearningCreateFileDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "blob_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="blobId", default=None
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="description",
                        default=None,
                    ),
                ),
                (
                    "file_name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="fileName",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_create_project = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningCreateProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_create_stream_data_source = sgqlc.types.Field(
        MachineLearningStreamDataSource,
        graphql_name="machineLearningCreateStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="description",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "sampling_rate",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Float),
                        graphql_name="samplingRate",
                        default=None,
                    ),
                ),
            )
        ),
    )

    machine_learning_delete_connector = sgqlc.types.Field(
        MachineLearningTransactionResponse,
        graphql_name="machineLearningDeleteConnector",
        args=sgqlc.types.ArgDict(
            (
                (
                    "rag_setting_id",
                    sgqlc.types.Arg(ID, graphql_name="ragSettingId", default=None),
                ),
                (
                    "tool_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="toolId", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_delete_file_data_source = sgqlc.types.Field(
        MachineLearningFileDataSource,
        graphql_name="machineLearningDeleteFileDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_delete_project = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningDeleteProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_delete_stream_data_source = sgqlc.types.Field(
        MachineLearningStreamDataSource,
        graphql_name="machineLearningDeleteStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_halt_stream_data_source = sgqlc.types.Field(
        MachineLearningStreamDataSource,
        graphql_name="machineLearningHaltStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_index_connector = sgqlc.types.Field(
        MachineLearningTransactionResponse,
        graphql_name="machineLearningIndexConnector",
        args=sgqlc.types.ArgDict(
            (
                (
                    "options",
                    sgqlc.types.Arg(
                        MachineLearningIndexOptions,
                        graphql_name="options",
                        default=None,
                    ),
                ),
                (
                    "rag_setting_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="ragSettingId",
                        default=None,
                    ),
                ),
                (
                    "tool_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="toolId", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_remove_document_index = sgqlc.types.Field(
        MachineLearningTransactionResponse,
        graphql_name="machineLearningRemoveDocumentIndex",
        args=sgqlc.types.ArgDict(
            (
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "tool_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="toolId", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_remove_file_data_source = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningRemoveFileDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "file_data_source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="fileDataSourceId",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_remove_stream_data_source = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningRemoveStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "stream_data_source_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="streamDataSourceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    machine_learning_start_stream_data_source = sgqlc.types.Field(
        MachineLearningStreamDataSource,
        graphql_name="machineLearningStartStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    machine_learning_update_file_data_source = sgqlc.types.Field(
        MachineLearningFileDataSource,
        graphql_name="machineLearningUpdateFileDataSource",
        args=sgqlc.types.ArgDict(
            (
                ("blob_id", sgqlc.types.Arg(ID, graphql_name="blobId", default=None)),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "file_name",
                    sgqlc.types.Arg(String, graphql_name="fileName", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "project_id",
                    sgqlc.types.Arg(ID, graphql_name="projectId", default=None),
                ),
            )
        ),
    )

    machine_learning_update_project = sgqlc.types.Field(
        MachineLearningProject,
        graphql_name="machineLearningUpdateProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "status",
                    sgqlc.types.Arg(String, graphql_name="status", default=None),
                ),
            )
        ),
    )

    machine_learning_update_stream_data_source = sgqlc.types.Field(
        MachineLearningStreamDataSource,
        graphql_name="machineLearningUpdateStreamDataSource",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="description",
                        default=None,
                    ),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "sampling_rate",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Float),
                        graphql_name="samplingRate",
                        default=None,
                    ),
                ),
            )
        ),
    )

    metric_normalization_create_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MetricNormalizationCreateRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    metric_normalization_disable_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationDisableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    metric_normalization_edit_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationEditRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(MetricNormalizationEditRuleInput),
                        graphql_name="rule",
                        default=None,
                    ),
                ),
            )
        ),
    )

    metric_normalization_enable_rule = sgqlc.types.Field(
        MetricNormalizationRuleMutationResponse,
        graphql_name="metricNormalizationEnableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="ruleId", default=None
                    ),
                ),
            )
        ),
    )

    mobile_push_notification_remove_device = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationRemoveDeviceResult),
        graphql_name="mobilePushNotificationRemoveDevice",
        args=sgqlc.types.ArgDict(
            (
                (
                    "device_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="deviceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    mobile_push_notification_send_test_push = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationSendPushResult),
        graphql_name="mobilePushNotificationSendTestPush",
        args=sgqlc.types.ArgDict(
            (
                (
                    "device_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="deviceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    mobile_push_notification_send_test_push_to_all = sgqlc.types.Field(
        sgqlc.types.non_null(MobilePushNotificationSendPushResult),
        graphql_name="mobilePushNotificationSendTestPushToAll",
    )

    nerd_storage_delete_collection = sgqlc.types.Field(
        NerdStorageDeleteResult,
        graphql_name="nerdStorageDeleteCollection",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )

    nerd_storage_delete_document = sgqlc.types.Field(
        NerdStorageDeleteResult,
        graphql_name="nerdStorageDeleteDocument",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )

    nerd_storage_vault_delete_secret = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultDeleteSecretResult),
        graphql_name="nerdStorageVaultDeleteSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerd_storage_vault_write_secret = sgqlc.types.Field(
        sgqlc.types.non_null(NerdStorageVaultWriteSecretResult),
        graphql_name="nerdStorageVaultWriteSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "secret",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageVaultWriteSecretInput),
                        graphql_name="secret",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerd_storage_write_document = sgqlc.types.Field(
        NerdStorageDocument,
        graphql_name="nerdStorageWriteDocument",
        args=sgqlc.types.ArgDict(
            (
                (
                    "collection",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="collection",
                        default=None,
                    ),
                ),
                (
                    "document",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageDocument),
                        graphql_name="document",
                        default=None,
                    ),
                ),
                (
                    "document_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="documentId",
                        default=None,
                    ),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdStorageScopeInput),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "scope_by_actor",
                    sgqlc.types.Arg(Boolean, graphql_name="scopeByActor", default=None),
                ),
            )
        ),
    )

    nerdpack_add_allowed_accounts = sgqlc.types.Field(
        NerdpackAllowListResult,
        graphql_name="nerdpackAddAllowedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "allow_list",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackAllowListInput),
                        graphql_name="allowList",
                        default=None,
                    ),
                ),
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerdpack_create = sgqlc.types.Field(
        NerdpackData,
        graphql_name="nerdpackCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_data",
                    sgqlc.types.Arg(
                        NerdpackCreationInput, graphql_name="nerdpackData", default=None
                    ),
                ),
            )
        ),
    )

    nerdpack_remove_allowed_accounts = sgqlc.types.Field(
        NerdpackAllowListResult,
        graphql_name="nerdpackRemoveAllowedAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "allow_list",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackAllowListInput),
                        graphql_name="allowList",
                        default=None,
                    ),
                ),
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerdpack_remove_version_tag = sgqlc.types.Field(
        NerdpackRemovedTagResponse,
        graphql_name="nerdpackRemoveVersionTag",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "version_tag",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackRemoveVersionTagInput),
                        graphql_name="versionTag",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerdpack_subscribe_accounts = sgqlc.types.Field(
        NerdpackSubscribeResult,
        graphql_name="nerdpackSubscribeAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "subscription",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackSubscribeAccountsInput),
                        graphql_name="subscription",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerdpack_tag_version = sgqlc.types.Field(
        NerdpackVersion,
        graphql_name="nerdpackTagVersion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "version_tag",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackTagVersionInput),
                        graphql_name="versionTag",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nerdpack_unsubscribe_accounts = sgqlc.types.Field(
        NerdpackUnsubscribeResult,
        graphql_name="nerdpackUnsubscribeAccounts",
        args=sgqlc.types.ArgDict(
            (
                (
                    "nerdpack_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="nerdpackId",
                        default=None,
                    ),
                ),
                (
                    "subscription",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NerdpackUnsubscribeAccountsInput),
                        graphql_name="subscription",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nr1_catalog_install_alert_policy_template = sgqlc.types.Field(
        Nr1CatalogInstallAlertPolicyTemplateResult,
        graphql_name="nr1CatalogInstallAlertPolicyTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "alert_policy_template_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="alertPolicyTemplateId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nr1_catalog_install_dashboard_template = sgqlc.types.Field(
        Nr1CatalogInstallDashboardTemplateResult,
        graphql_name="nr1CatalogInstallDashboardTemplate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "dashboard_template_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="dashboardTemplateId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nr1_catalog_submit_metadata = sgqlc.types.Field(
        Nr1CatalogSubmitMetadataResult,
        graphql_name="nr1CatalogSubmitMetadata",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "nerdpack_metadata",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Nr1CatalogSubmitMetadataInput),
                        graphql_name="nerdpackMetadata",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nrql_cancel_query = sgqlc.types.Field(
        NrqlCancelQueryMutationResponse,
        graphql_name="nrqlCancelQuery",
        args=sgqlc.types.ArgDict(
            (
                (
                    "query_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="queryId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    nrql_drop_rules_create = sgqlc.types.Field(
        NrqlDropRulesCreateDropRuleResult,
        graphql_name="nrqlDropRulesCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rules",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(NrqlDropRulesCreateDropRuleInput)
                        ),
                        graphql_name="rules",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `rules` (`[NrqlDropRulesCreateDropRuleInput]!`)
    """

    nrql_drop_rules_delete = sgqlc.types.Field(
        NrqlDropRulesDeleteDropRuleResult,
        graphql_name="nrqlDropRulesDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(sgqlc.types.list_of(ID)),
                        graphql_name="ruleIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `rule_ids` (`[ID]!`)
    """

    organization_create = sgqlc.types.Field(
        OrganizationCreateOrganizationResponse,
        graphql_name="organizationCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "customer_id",
                    sgqlc.types.Arg(ID, graphql_name="customerId", default=None),
                ),
                (
                    "new_managed_account",
                    sgqlc.types.Arg(
                        OrganizationNewManagedAccountInput,
                        graphql_name="newManagedAccount",
                        default=None,
                    ),
                ),
                (
                    "organization",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationCreateOrganizationInput),
                        graphql_name="organization",
                        default=None,
                    ),
                ),
                (
                    "shared_account",
                    sgqlc.types.Arg(
                        OrganizationSharedAccountInput,
                        graphql_name="sharedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    organization_create_shared_account = sgqlc.types.Field(
        OrganizationCreateSharedAccountResponse,
        graphql_name="organizationCreateSharedAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "shared_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationCreateSharedAccountInput),
                        graphql_name="sharedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    organization_provisioning_update_partner_subscription = sgqlc.types.Field(
        sgqlc.types.non_null(OrganizationProvisioningUpdateSubscriptionResult),
        graphql_name="organizationProvisioningUpdatePartnerSubscription",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "affected_account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="affectedAccountId",
                        default=None,
                    ),
                ),
                (
                    "products",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    OrganizationProvisioningProductInput
                                )
                            )
                        ),
                        graphql_name="products",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `affected_account_id` (`Int!`)
    * `products` (`[OrganizationProvisioningProductInput!]!`)
    """

    organization_revoke_shared_account = sgqlc.types.Field(
        OrganizationRevokeSharedAccountResponse,
        graphql_name="organizationRevokeSharedAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "shared_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationRevokeSharedAccountInput),
                        graphql_name="sharedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    organization_update = sgqlc.types.Field(
        OrganizationUpdateResponse,
        graphql_name="organizationUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "organization",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationUpdateInput),
                        graphql_name="organization",
                        default=None,
                    ),
                ),
                (
                    "organization_id",
                    sgqlc.types.Arg(ID, graphql_name="organizationId", default=None),
                ),
            )
        ),
    )

    organization_update_shared_account = sgqlc.types.Field(
        OrganizationUpdateSharedAccountResponse,
        graphql_name="organizationUpdateSharedAccount",
        args=sgqlc.types.ArgDict(
            (
                (
                    "shared_account",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(OrganizationUpdateSharedAccountInput),
                        graphql_name="sharedAccount",
                        default=None,
                    ),
                ),
            )
        ),
    )

    pixie_link_pixie_project = sgqlc.types.Field(
        PixieLinkPixieProjectResult,
        graphql_name="pixieLinkPixieProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "api_key",
                    sgqlc.types.Arg(SecureValue, graphql_name="apiKey", default=None),
                ),
            )
        ),
    )

    pixie_record_pixie_tos_acceptance = sgqlc.types.Field(
        PixieRecordPixieTosAcceptanceResult,
        graphql_name="pixieRecordPixieTosAcceptance",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    pixie_unlink_pixie_project = sgqlc.types.Field(
        PixieLinkPixieProjectResult,
        graphql_name="pixieUnlinkPixieProject",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    reference_entity_create_or_update_repository = sgqlc.types.Field(
        ReferenceEntityCreateRepositoryResult,
        graphql_name="referenceEntityCreateOrUpdateRepository",
        args=sgqlc.types.ArgDict(
            (
                (
                    "repositories",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(
                                    ReferenceEntityCreateRepositoryInput
                                )
                            )
                        ),
                        graphql_name="repositories",
                        default=None,
                    ),
                ),
                ("sync", sgqlc.types.Arg(Boolean, graphql_name="sync", default=None)),
            )
        ),
    )
    """Arguments:

    * `repositories` (`[ReferenceEntityCreateRepositoryInput!]!`)
    * `sync` (`Boolean`)
    """

    secrets_management_create_secret = sgqlc.types.Field(
        "SecretsManagementCreateSecretResponse",
        graphql_name="secretsManagementCreateSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(SecretsManagementTagInput)
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecureValue),
                        graphql_name="value",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `description` (`String`)
    * `key` (`String!`)
    * `namespace` (`String`)
    * `scope` (`SecretsManagementScope!`)
    * `tags` (`[SecretsManagementTagInput!]`)
    * `value` (`SecureValue!`)
    """

    secrets_management_delete_secret = sgqlc.types.Field(
        "SecretsManagementDeleteSecretResponse",
        graphql_name="secretsManagementDeleteSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "purge",
                    sgqlc.types.Arg(Boolean, graphql_name="purge", default=False),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
            )
        ),
    )

    secrets_management_delete_secret_version = sgqlc.types.Field(
        "SecretsManagementDeleteSecretVersionResponse",
        graphql_name="secretsManagementDeleteSecretVersion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "purge",
                    sgqlc.types.Arg(Boolean, graphql_name="purge", default=False),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    secrets_management_recover_secret = sgqlc.types.Field(
        "SecretsManagementRecoverSecretResponse",
        graphql_name="secretsManagementRecoverSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
            )
        ),
    )

    secrets_management_recover_secret_version = sgqlc.types.Field(
        "SecretsManagementRecoverSecretVersionResponse",
        graphql_name="secretsManagementRecoverSecretVersion",
        args=sgqlc.types.ArgDict(
            (
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                ("version", sgqlc.types.Arg(Int, graphql_name="version", default=None)),
            )
        ),
    )

    secrets_management_update_secret = sgqlc.types.Field(
        "SecretsManagementUpdateSecretResponse",
        graphql_name="secretsManagementUpdateSecret",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "namespace",
                    sgqlc.types.Arg(String, graphql_name="namespace", default=None),
                ),
                (
                    "scope",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecretsManagementScope),
                        graphql_name="scope",
                        default=None,
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(SecureValue, graphql_name="value", default=None),
                ),
            )
        ),
    )

    service_level_create = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "entity_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="entityGuid",
                        default=None,
                    ),
                ),
                (
                    "indicator",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ServiceLevelIndicatorCreateInput),
                        graphql_name="indicator",
                        default=None,
                    ),
                ),
            )
        ),
    )

    service_level_delete = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(EntityGuid, graphql_name="guid", default=None),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
            )
        ),
    )

    service_level_update = sgqlc.types.Field(
        "ServiceLevelIndicator",
        graphql_name="serviceLevelUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(EntityGuid, graphql_name="guid", default=None),
                ),
                ("id", sgqlc.types.Arg(ID, graphql_name="id", default=None)),
                (
                    "indicator",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ServiceLevelIndicatorUpdateInput),
                        graphql_name="indicator",
                        default=None,
                    ),
                ),
            )
        ),
    )

    sessions_revoke = sgqlc.types.Field(
        "SessionsRevokeSessionResponse",
        graphql_name="sessionsRevoke",
        args=sgqlc.types.ArgDict(
            (
                (
                    "client_id",
                    sgqlc.types.Arg(ID, graphql_name="clientId", default=None),
                ),
                (
                    "ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="ids",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `client_id` (`ID`)
    * `ids` (`[ID!]`)
    """

    streaming_export_create_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingExportCreateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "aws_parameters",
                    sgqlc.types.Arg(
                        StreamingExportAwsInput,
                        graphql_name="awsParameters",
                        default=None,
                    ),
                ),
                (
                    "azure_parameters",
                    sgqlc.types.Arg(
                        StreamingExportAzureInput,
                        graphql_name="azureParameters",
                        default=None,
                    ),
                ),
                (
                    "gcp_parameters",
                    sgqlc.types.Arg(
                        StreamingExportGcpInput,
                        graphql_name="gcpParameters",
                        default=None,
                    ),
                ),
                (
                    "rule_parameters",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(StreamingExportRuleInput),
                        graphql_name="ruleParameters",
                        default=None,
                    ),
                ),
            )
        ),
    )

    streaming_export_delete_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingExportDeleteRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    streaming_export_disable_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingExportDisableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    streaming_export_enable_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingExportEnableRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    streaming_export_update_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingExportUpdateRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "aws_parameters",
                    sgqlc.types.Arg(
                        StreamingExportAwsInput,
                        graphql_name="awsParameters",
                        default=None,
                    ),
                ),
                (
                    "azure_parameters",
                    sgqlc.types.Arg(
                        StreamingExportAzureInput,
                        graphql_name="azureParameters",
                        default=None,
                    ),
                ),
                (
                    "gcp_parameters",
                    sgqlc.types.Arg(
                        StreamingExportGcpInput,
                        graphql_name="gcpParameters",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                (
                    "rule_parameters",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(StreamingExportRuleInput),
                        graphql_name="ruleParameters",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_broken_links_monitor = sgqlc.types.Field(
        "SyntheticsBrokenLinksMonitorCreateMutationResult",
        graphql_name="syntheticsCreateBrokenLinksMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateBrokenLinksMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_cert_check_monitor = sgqlc.types.Field(
        "SyntheticsCertCheckMonitorCreateMutationResult",
        graphql_name="syntheticsCreateCertCheckMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateCertCheckMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_daily_monitor_downtime = sgqlc.types.Field(
        "SyntheticsDailyMonitorDowntimeMutationResult",
        graphql_name="syntheticsCreateDailyMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "end_repeat",
                    sgqlc.types.Arg(
                        SyntheticsDateWindowEndConfig,
                        graphql_name="endRepeat",
                        default=None,
                    ),
                ),
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "monitor_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntityGuid),
                        graphql_name="monitorGuids",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
                (
                    "timezone",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="timezone",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `end_repeat` (`SyntheticsDateWindowEndConfig`)
    * `end_time` (`NaiveDateTime!`)
    * `monitor_guids` (`[EntityGuid]`)
    * `name` (`String!`)
    * `start_time` (`NaiveDateTime!`)
    * `timezone` (`String!`)
    """

    synthetics_create_monthly_monitor_downtime = sgqlc.types.Field(
        "SyntheticsMonthlyMonitorDowntimeMutationResult",
        graphql_name="syntheticsCreateMonthlyMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "end_repeat",
                    sgqlc.types.Arg(
                        SyntheticsDateWindowEndConfig,
                        graphql_name="endRepeat",
                        default=None,
                    ),
                ),
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "frequency",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsMonitorDowntimeMonthlyFrequency),
                        graphql_name="frequency",
                        default=None,
                    ),
                ),
                (
                    "monitor_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntityGuid),
                        graphql_name="monitorGuids",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
                (
                    "timezone",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="timezone",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `end_repeat` (`SyntheticsDateWindowEndConfig`)
    * `end_time` (`NaiveDateTime!`)
    * `frequency` (`SyntheticsMonitorDowntimeMonthlyFrequency!`)
    * `monitor_guids` (`[EntityGuid]`)
    * `name` (`String!`)
    * `start_time` (`NaiveDateTime!`)
    * `timezone` (`String!`)
    """

    synthetics_create_once_monitor_downtime = sgqlc.types.Field(
        "SyntheticsOnceMonitorDowntimeMutationResult",
        graphql_name="syntheticsCreateOnceMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "monitor_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntityGuid),
                        graphql_name="monitorGuids",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
                (
                    "timezone",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="timezone",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `end_time` (`NaiveDateTime!`)
    * `monitor_guids` (`[EntityGuid]`)
    * `name` (`String!`)
    * `start_time` (`NaiveDateTime!`)
    * `timezone` (`String!`)
    """

    synthetics_create_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationMutationResult",
        graphql_name="syntheticsCreatePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "shared",
                    sgqlc.types.Arg(Boolean, graphql_name="shared", default=None),
                ),
                (
                    "verified_script_execution",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Boolean),
                        graphql_name="verifiedScriptExecution",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_script_api_monitor = sgqlc.types.Field(
        "SyntheticsScriptApiMonitorCreateMutationResult",
        graphql_name="syntheticsCreateScriptApiMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateScriptApiMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_script_browser_monitor = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateScriptBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateScriptBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsCreateSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SecureValue),
                        graphql_name="value",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_simple_browser_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateSimpleBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateSimpleBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_simple_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorCreateMutationResult",
        graphql_name="syntheticsCreateSimpleMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateSimpleMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_step_monitor = sgqlc.types.Field(
        "SyntheticsStepMonitorCreateMutationResult",
        graphql_name="syntheticsCreateStepMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsCreateStepMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_create_weekly_monitor_downtime = sgqlc.types.Field(
        "SyntheticsWeeklyMonitorDowntimeMutationResult",
        graphql_name="syntheticsCreateWeeklyMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "end_repeat",
                    sgqlc.types.Arg(
                        SyntheticsDateWindowEndConfig,
                        graphql_name="endRepeat",
                        default=None,
                    ),
                ),
                (
                    "end_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="endTime",
                        default=None,
                    ),
                ),
                (
                    "maintenance_days",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(SyntheticsMonitorDowntimeWeekDays)
                        ),
                        graphql_name="maintenanceDays",
                        default=None,
                    ),
                ),
                (
                    "monitor_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntityGuid),
                        graphql_name="monitorGuids",
                        default=None,
                    ),
                ),
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(NaiveDateTime),
                        graphql_name="startTime",
                        default=None,
                    ),
                ),
                (
                    "timezone",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="timezone",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `account_id` (`Int!`)
    * `end_repeat` (`SyntheticsDateWindowEndConfig`)
    * `end_time` (`NaiveDateTime!`)
    * `maintenance_days` (`[SyntheticsMonitorDowntimeWeekDays]!`)
    * `monitor_guids` (`[EntityGuid]`)
    * `name` (`String!`)
    * `start_time` (`NaiveDateTime!`)
    * `timezone` (`String!`)
    """

    synthetics_delete_monitor = sgqlc.types.Field(
        "SyntheticsMonitorDeleteMutationResult",
        graphql_name="syntheticsDeleteMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_delete_monitor_downtime = sgqlc.types.Field(
        "SyntheticsMonitorDowntimeDeleteResult",
        graphql_name="syntheticsDeleteMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_delete_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationDeleteResult",
        graphql_name="syntheticsDeletePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_delete_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsDeleteSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
            )
        ),
    )

    synthetics_edit_monitor_downtime = sgqlc.types.Field(
        "SyntheticsMonitorDowntimeMutationResult",
        graphql_name="syntheticsEditMonitorDowntime",
        args=sgqlc.types.ArgDict(
            (
                (
                    "daily",
                    sgqlc.types.Arg(
                        SyntheticsMonitorDowntimeDailyConfig,
                        graphql_name="daily",
                        default=None,
                    ),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor_guids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(EntityGuid),
                        graphql_name="monitorGuids",
                        default=None,
                    ),
                ),
                (
                    "monthly",
                    sgqlc.types.Arg(
                        SyntheticsMonitorDowntimeMonthlyConfig,
                        graphql_name="monthly",
                        default=None,
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "once",
                    sgqlc.types.Arg(
                        SyntheticsMonitorDowntimeOnceConfig,
                        graphql_name="once",
                        default=None,
                    ),
                ),
                (
                    "weekly",
                    sgqlc.types.Arg(
                        SyntheticsMonitorDowntimeWeeklyConfig,
                        graphql_name="weekly",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `daily` (`SyntheticsMonitorDowntimeDailyConfig`)
    * `guid` (`EntityGuid!`)
    * `monitor_guids` (`[EntityGuid]`)
    * `monthly` (`SyntheticsMonitorDowntimeMonthlyConfig`)
    * `name` (`String`)
    * `once` (`SyntheticsMonitorDowntimeOnceConfig`)
    * `weekly` (`SyntheticsMonitorDowntimeWeeklyConfig`)
    """

    synthetics_purge_private_location_queue = sgqlc.types.Field(
        "SyntheticsPrivateLocationPurgeQueueResult",
        graphql_name="syntheticsPurgePrivateLocationQueue",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_broken_links_monitor = sgqlc.types.Field(
        "SyntheticsBrokenLinksMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateBrokenLinksMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateBrokenLinksMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_cert_check_monitor = sgqlc.types.Field(
        "SyntheticsCertCheckMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateCertCheckMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateCertCheckMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_private_location = sgqlc.types.Field(
        "SyntheticsPrivateLocationMutationResult",
        graphql_name="syntheticsUpdatePrivateLocation",
        args=sgqlc.types.ArgDict(
            (
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "shared",
                    sgqlc.types.Arg(Boolean, graphql_name="shared", default=None),
                ),
                (
                    "verified_script_execution",
                    sgqlc.types.Arg(
                        Boolean, graphql_name="verifiedScriptExecution", default=None
                    ),
                ),
            )
        ),
    )

    synthetics_update_script_api_monitor = sgqlc.types.Field(
        "SyntheticsScriptApiMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateScriptApiMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateScriptApiMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_script_browser_monitor = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateScriptBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateScriptBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_secure_credential = sgqlc.types.Field(
        "SyntheticsSecureCredentialMutationResult",
        graphql_name="syntheticsUpdateSecureCredential",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "description",
                    sgqlc.types.Arg(String, graphql_name="description", default=None),
                ),
                (
                    "key",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="key", default=None
                    ),
                ),
                (
                    "value",
                    sgqlc.types.Arg(SecureValue, graphql_name="value", default=None),
                ),
            )
        ),
    )

    synthetics_update_simple_browser_monitor = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateSimpleBrowserMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateSimpleBrowserMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_simple_monitor = sgqlc.types.Field(
        "SyntheticsSimpleMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateSimpleMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateSimpleMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    synthetics_update_step_monitor = sgqlc.types.Field(
        "SyntheticsStepMonitorUpdateMutationResult",
        graphql_name="syntheticsUpdateStepMonitor",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "monitor",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(SyntheticsUpdateStepMonitorInput),
                        graphql_name="monitor",
                        default=None,
                    ),
                ),
            )
        ),
    )

    system_identity_add_to_groups = sgqlc.types.Field(
        "SystemIdentityGroupList",
        graphql_name="systemIdentityAddToGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "system_identity_group_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="systemIdentityGroupIds",
                        default=None,
                    ),
                ),
                (
                    "system_identity_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="systemIdentityIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `system_identity_group_ids` (`[ID!]!`)
    * `system_identity_ids` (`[ID!]!`)
    """

    system_identity_create = sgqlc.types.Field(
        "SystemIdentityCreatedSystemIdentity",
        graphql_name="systemIdentityCreate",
        args=sgqlc.types.ArgDict(
            (
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "organization_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="organizationId",
                        default=None,
                    ),
                ),
                (
                    "public_key",
                    sgqlc.types.Arg(String, graphql_name="publicKey", default=None),
                ),
            )
        ),
    )

    system_identity_create_group = sgqlc.types.Field(
        "SystemIdentityGroupType",
        graphql_name="systemIdentityCreateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "name",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String), graphql_name="name", default=None
                    ),
                ),
                (
                    "organization_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID),
                        graphql_name="organizationId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    system_identity_delete = sgqlc.types.Field(
        "SystemIdentityType",
        graphql_name="systemIdentityDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    system_identity_delete_group = sgqlc.types.Field(
        "SystemIdentityGroupType",
        graphql_name="systemIdentityDeleteGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    system_identity_remove_from_groups = sgqlc.types.Field(
        "SystemIdentityGroupList",
        graphql_name="systemIdentityRemoveFromGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "system_identity_group_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="systemIdentityGroupIds",
                        default=None,
                    ),
                ),
                (
                    "system_identity_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(ID))
                        ),
                        graphql_name="systemIdentityIds",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `system_identity_group_ids` (`[ID!]!`)
    * `system_identity_ids` (`[ID!]!`)
    """

    system_identity_update = sgqlc.types.Field(
        "SystemIdentityType",
        graphql_name="systemIdentityUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
                (
                    "public_key",
                    sgqlc.types.Arg(String, graphql_name="publicKey", default=None),
                ),
            )
        ),
    )

    system_identity_update_group = sgqlc.types.Field(
        "SystemIdentityGroupType",
        graphql_name="systemIdentityUpdateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
                ("name", sgqlc.types.Arg(String, graphql_name="name", default=None)),
            )
        ),
    )

    tagging_add_tags_to_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingAddTagsToEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(TaggingTagInput))
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `tags` (`[TaggingTagInput!]!`)
    """

    tagging_delete_tag_from_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingDeleteTagFromEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tag_keys",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(String))
                        ),
                        graphql_name="tagKeys",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `tag_keys` (`[String!]!`)
    """

    tagging_delete_tag_values_from_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingDeleteTagValuesFromEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tag_values",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(
                                sgqlc.types.non_null(TaggingTagValueInput)
                            )
                        ),
                        graphql_name="tagValues",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `tag_values` (`[TaggingTagValueInput!]!`)
    """

    tagging_replace_tags_on_entity = sgqlc.types.Field(
        "TaggingMutationResult",
        graphql_name="taggingReplaceTagsOnEntity",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "tags",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(
                            sgqlc.types.list_of(sgqlc.types.non_null(TaggingTagInput))
                        ),
                        graphql_name="tags",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `tags` (`[TaggingTagInput!]!`)
    """

    user_management_add_users_to_groups = sgqlc.types.Field(
        "UserManagementAddUsersToGroupsPayload",
        graphql_name="userManagementAddUsersToGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "add_users_to_groups_options",
                    sgqlc.types.Arg(
                        UserManagementUsersGroupsInput,
                        graphql_name="addUsersToGroupsOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_create_group = sgqlc.types.Field(
        "UserManagementCreateGroupPayload",
        graphql_name="userManagementCreateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "create_group_options",
                    sgqlc.types.Arg(
                        UserManagementCreateGroup,
                        graphql_name="createGroupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_create_user = sgqlc.types.Field(
        "UserManagementCreateUserPayload",
        graphql_name="userManagementCreateUser",
        args=sgqlc.types.ArgDict(
            (
                (
                    "create_user_options",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(UserManagementCreateUser),
                        graphql_name="createUserOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_delete_group = sgqlc.types.Field(
        "UserManagementDeleteGroupPayload",
        graphql_name="userManagementDeleteGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "group_options",
                    sgqlc.types.Arg(
                        UserManagementDeleteGroup,
                        graphql_name="groupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_delete_user = sgqlc.types.Field(
        "UserManagementDeleteUserPayload",
        graphql_name="userManagementDeleteUser",
        args=sgqlc.types.ArgDict(
            (
                (
                    "delete_user_options",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(UserManagementDeleteUser),
                        graphql_name="deleteUserOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_remove_users_from_groups = sgqlc.types.Field(
        "UserManagementRemoveUsersFromGroupsPayload",
        graphql_name="userManagementRemoveUsersFromGroups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "remove_users_from_groups_options",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(UserManagementUsersGroupsInput),
                        graphql_name="removeUsersFromGroupsOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_update_group = sgqlc.types.Field(
        "UserManagementUpdateGroupPayload",
        graphql_name="userManagementUpdateGroup",
        args=sgqlc.types.ArgDict(
            (
                (
                    "update_group_options",
                    sgqlc.types.Arg(
                        UserManagementUpdateGroup,
                        graphql_name="updateGroupOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    user_management_update_user = sgqlc.types.Field(
        "UserManagementUpdateUserPayload",
        graphql_name="userManagementUpdateUser",
        args=sgqlc.types.ArgDict(
            (
                (
                    "update_user_options",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(UserManagementUpdateUser),
                        graphql_name="updateUserOptions",
                        default=None,
                    ),
                ),
            )
        ),
    )

    whats_new_set_last_read_date = sgqlc.types.Field(
        EpochMilliseconds,
        graphql_name="whatsNewSetLastReadDate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "date",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EpochMilliseconds),
                        graphql_name="date",
                        default=None,
                    ),
                ),
            )
        ),
    )

    workload_create = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadCreate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadCreateInput),
                        graphql_name="workload",
                        default=None,
                    ),
                ),
            )
        ),
    )

    workload_delete = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadDelete",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    workload_duplicate = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadDuplicate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "account_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="accountId",
                        default=None,
                    ),
                ),
                (
                    "source_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="sourceGuid",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        WorkloadDuplicateInput, graphql_name="workload", default=None
                    ),
                ),
            )
        ),
    )

    workload_update = sgqlc.types.Field(
        "WorkloadCollection",
        graphql_name="workloadUpdate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="guid",
                        default=None,
                    ),
                ),
                (
                    "workload",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(WorkloadUpdateInput),
                        graphql_name="workload",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `guid` (`EntityGuid!`)
    * `workload` (`WorkloadUpdateInput!`)
    """


class RootQueryType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("actor", "customer_administration", "docs", "request_context")
    actor = sgqlc.types.Field(Actor, graphql_name="actor")

    customer_administration = sgqlc.types.Field(
        CustomerAdministration, graphql_name="customerAdministration"
    )

    docs = sgqlc.types.Field(DocumentationFields, graphql_name="docs")

    request_context = sgqlc.types.Field(RequestContext, graphql_name="requestContext")


class SecretsManagementCreateSecretResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "key",
        "latest_version",
        "metadata",
        "namespace",
        "scope",
        "tags",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    metadata = sgqlc.types.Field(
        "SecretsManagementSecretMetadataResponse", graphql_name="metadata"
    )

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("SecretsManagementScopeResponse"), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of("SecretsManagementTag"), graphql_name="tags"
    )


class SecretsManagementDeleteSecretResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "namespace", "scope")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("SecretsManagementScopeResponse"), graphql_name="scope"
    )


class SecretsManagementDeleteSecretVersionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "latest_version", "namespace", "scope")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("SecretsManagementScopeResponse"), graphql_name="scope"
    )


class SecretsManagementRecoverSecretResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "latest_version", "namespace", "scope")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("SecretsManagementScopeResponse"), graphql_name="scope"
    )


class SecretsManagementRecoverSecretVersionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "latest_version", "namespace", "scope")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null("SecretsManagementScopeResponse"), graphql_name="scope"
    )


class SecretsManagementRetrievedValue(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("value", "version")
    value = sgqlc.types.Field(SecureValue, graphql_name="value")

    version = sgqlc.types.Field(Int, graphql_name="version")


class SecretsManagementScopeResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SecretsManagementScopeType), graphql_name="type"
    )


class SecretsManagementSecretMetadataResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "updated_at")
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")


class SecretsManagementSecretQueryResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "key",
        "metadata",
        "namespace",
        "retrieved_value",
        "scope",
        "tags",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    metadata = sgqlc.types.Field(
        SecretsManagementSecretMetadataResponse, graphql_name="metadata"
    )

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    retrieved_value = sgqlc.types.Field(
        SecretsManagementRetrievedValue, graphql_name="retrievedValue"
    )

    scope = sgqlc.types.Field(
        sgqlc.types.non_null(SecretsManagementScopeResponse), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of("SecretsManagementTag"), graphql_name="tags"
    )


class SecretsManagementSecretVersionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "is_deleted", "version")
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    is_deleted = sgqlc.types.Field(Boolean, graphql_name="isDeleted")

    version = sgqlc.types.Field(Int, graphql_name="version")


class SecretsManagementSecretVersionsQueryResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "latest_version", "namespace", "scope", "secret_versions")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null(SecretsManagementScopeResponse), graphql_name="scope"
    )

    secret_versions = sgqlc.types.Field(
        sgqlc.types.list_of(SecretsManagementSecretVersionResponse),
        graphql_name="secretVersions",
    )


class SecretsManagementSecretsCollectionItem(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "is_deleted",
        "key",
        "latest_version",
        "metadata",
        "namespace",
        "tags",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    is_deleted = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="isDeleted"
    )

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    metadata = sgqlc.types.Field(
        SecretsManagementSecretMetadataResponse, graphql_name="metadata"
    )

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    tags = sgqlc.types.Field(
        sgqlc.types.list_of("SecretsManagementTag"), graphql_name="tags"
    )


class SecretsManagementSecretsCollectionQueryResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "scope", "secrets", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null(SecretsManagementScopeResponse), graphql_name="scope"
    )

    secrets = sgqlc.types.Field(
        sgqlc.types.list_of(SecretsManagementSecretsCollectionItem),
        graphql_name="secrets",
    )

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SecretsManagementTag(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("key", "value")
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class SecretsManagementUpdateSecretResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "key",
        "latest_version",
        "metadata",
        "namespace",
        "scope",
        "tags",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="key")

    latest_version = sgqlc.types.Field(Int, graphql_name="latestVersion")

    metadata = sgqlc.types.Field(
        SecretsManagementSecretMetadataResponse, graphql_name="metadata"
    )

    namespace = sgqlc.types.Field(String, graphql_name="namespace")

    scope = sgqlc.types.Field(
        sgqlc.types.non_null(SecretsManagementScopeResponse), graphql_name="scope"
    )

    tags = sgqlc.types.Field(
        sgqlc.types.list_of(SecretsManagementTag), graphql_name="tags"
    )


class SecureCredentialSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class ServiceLevelDefinition(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("indicators",)
    indicators = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelIndicator")),
        graphql_name="indicators",
    )


class ServiceLevelEvents(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account", "bad_events", "good_events", "valid_events")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    bad_events = sgqlc.types.Field("ServiceLevelEventsQuery", graphql_name="badEvents")

    good_events = sgqlc.types.Field(
        "ServiceLevelEventsQuery", graphql_name="goodEvents"
    )

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelEventsQuery"), graphql_name="validEvents"
    )


class ServiceLevelEventsQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("from_", "select", "where")
    from_ = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="from")

    select = sgqlc.types.Field("ServiceLevelEventsQuerySelect", graphql_name="select")

    where = sgqlc.types.Field(Nrql, graphql_name="where")


class ServiceLevelEventsQuerySelect(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attribute", "function", "threshold")
    attribute = sgqlc.types.Field(String, graphql_name="attribute")

    function = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelEventsQuerySelectFunction),
        graphql_name="function",
    )

    threshold = sgqlc.types.Field(Float, graphql_name="threshold")


class ServiceLevelIndicator(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "created_by",
        "description",
        "entity_guid",
        "events",
        "guid",
        "id",
        "name",
        "objectives",
        "result_queries",
        "updated_at",
        "updated_by",
    )
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field("UserReference", graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    entity_guid = sgqlc.types.Field(
        sgqlc.types.non_null(EntityGuid), graphql_name="entityGuid"
    )

    events = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelEvents), graphql_name="events"
    )

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    objectives = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("ServiceLevelObjective")),
        graphql_name="objectives",
    )

    result_queries = sgqlc.types.Field(
        "ServiceLevelIndicatorResultQueries", graphql_name="resultQueries"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field("UserReference", graphql_name="updatedBy")


class ServiceLevelIndicatorResultQueries(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("good_events", "indicator", "valid_events")
    good_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="goodEvents"
    )

    indicator = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="indicator"
    )

    valid_events = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="validEvents"
    )


class ServiceLevelObjective(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "name", "result_queries", "target", "time_window")
    description = sgqlc.types.Field(String, graphql_name="description")

    name = sgqlc.types.Field(String, graphql_name="name")

    result_queries = sgqlc.types.Field(
        "ServiceLevelObjectiveResultQueries", graphql_name="resultQueries"
    )

    target = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name="target")

    time_window = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelObjectiveTimeWindow"),
        graphql_name="timeWindow",
    )


class ServiceLevelObjectiveResultQueries(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("attainment",)
    attainment = sgqlc.types.Field(
        sgqlc.types.non_null("ServiceLevelResultQuery"), graphql_name="attainment"
    )


class ServiceLevelObjectiveRollingTimeWindow(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("count", "unit")
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="count")

    unit = sgqlc.types.Field(
        sgqlc.types.non_null(ServiceLevelObjectiveRollingTimeWindowUnit),
        graphql_name="unit",
    )


class ServiceLevelObjectiveTimeWindow(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("rolling",)
    rolling = sgqlc.types.Field(
        ServiceLevelObjectiveRollingTimeWindow, graphql_name="rolling"
    )


class ServiceLevelResultQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("nrql",)
    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")


class SessionsClient(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("client_type", "id", "name")
    client_type = sgqlc.types.Field(
        sgqlc.types.non_null(SessionsClientType), graphql_name="clientType"
    )

    id = sgqlc.types.Field(ID, graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")


class SessionsPrincipal(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SessionsPrincipalType), graphql_name="type"
    )


class SessionsRevokeSessionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("ids",)
    ids = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name="ids"
    )


class SessionsSessionCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of("SessionsSessionResponse"), graphql_name="items"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SessionsSessionResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("client", "created_at", "expires_at", "principal", "session_id")
    client = sgqlc.types.Field(
        sgqlc.types.non_null(SessionsClient), graphql_name="client"
    )

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="createdAt"
    )

    expires_at = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="expiresAt"
    )

    principal = sgqlc.types.Field(
        sgqlc.types.non_null(SessionsPrincipal), graphql_name="principal"
    )

    session_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="sessionId")


class StackTraceApmException(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "stack_trace")
    message = sgqlc.types.Field(String, graphql_name="message")

    stack_trace = sgqlc.types.Field(
        "StackTraceApmStackTrace", graphql_name="stackTrace"
    )


class StackTraceApmStackTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceApmStackTraceFrame"), graphql_name="frames"
    )


class StackTraceApmStackTraceFrame(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )

    line = sgqlc.types.Field(Int, graphql_name="line")

    name = sgqlc.types.Field(String, graphql_name="name")


class StackTraceBrowserException(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "stack_trace")
    message = sgqlc.types.Field(String, graphql_name="message")

    stack_trace = sgqlc.types.Field(
        "StackTraceBrowserStackTrace", graphql_name="stackTrace"
    )


class StackTraceBrowserStackTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceBrowserStackTraceFrame"), graphql_name="frames"
    )


class StackTraceBrowserStackTraceFrame(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("column", "formatted", "line", "name")
    column = sgqlc.types.Field(Int, graphql_name="column")

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )

    line = sgqlc.types.Field(Int, graphql_name="line")

    name = sgqlc.types.Field(String, graphql_name="name")


class StackTraceMobileCrash(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("stack_trace",)
    stack_trace = sgqlc.types.Field(
        "StackTraceMobileCrashStackTrace", graphql_name="stackTrace"
    )


class StackTraceMobileCrashStackTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceMobileCrashStackTraceFrame"),
        graphql_name="frames",
    )


class StackTraceMobileCrashStackTraceFrame(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )

    line = sgqlc.types.Field(Int, graphql_name="line")

    name = sgqlc.types.Field(String, graphql_name="name")


class StackTraceMobileException(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("stack_trace",)
    stack_trace = sgqlc.types.Field(
        "StackTraceMobileExceptionStackTrace", graphql_name="stackTrace"
    )


class StackTraceMobileExceptionStackTrace(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("frames",)
    frames = sgqlc.types.Field(
        sgqlc.types.list_of("StackTraceMobileExceptionStackTraceFrame"),
        graphql_name="frames",
    )


class StackTraceMobileExceptionStackTraceFrame(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("filepath", "formatted", "line", "name")
    filepath = sgqlc.types.Field(String, graphql_name="filepath")

    formatted = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="formatted"
    )

    line = sgqlc.types.Field(Int, graphql_name="line")

    name = sgqlc.types.Field(String, graphql_name="name")


class StreamingExportAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("streaming_rule", "streaming_rules")
    streaming_rule = sgqlc.types.Field(
        "StreamingExportRule",
        graphql_name="streamingRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    streaming_rules = sgqlc.types.Field(
        sgqlc.types.list_of("StreamingExportRule"), graphql_name="streamingRules"
    )


class StreamingExportAwsDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("aws_account_id", "delivery_stream_name", "region", "role")
    aws_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="awsAccountId"
    )

    delivery_stream_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="deliveryStreamName"
    )

    region = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="region")

    role = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="role")


class StreamingExportAzureDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("event_hub_connection_string", "event_hub_name")
    event_hub_connection_string = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="eventHubConnectionString"
    )

    event_hub_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="eventHubName"
    )


class StreamingExportGcpDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("gcp_project_id", "pubsub_topic_id")
    gcp_project_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="gcpProjectId"
    )

    pubsub_topic_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="pubsubTopicId"
    )


class StreamingExportRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "aws",
        "azure",
        "created_at",
        "description",
        "gcp",
        "id",
        "message",
        "name",
        "nrql",
        "payload_compression",
        "status",
        "updated_at",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    aws = sgqlc.types.Field(StreamingExportAwsDetails, graphql_name="aws")

    azure = sgqlc.types.Field(StreamingExportAzureDetails, graphql_name="azure")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    gcp = sgqlc.types.Field(StreamingExportGcpDetails, graphql_name="gcp")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    message = sgqlc.types.Field(String, graphql_name="message")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    nrql = sgqlc.types.Field(Nrql, graphql_name="nrql")

    payload_compression = sgqlc.types.Field(
        StreamingExportPayloadCompression, graphql_name="payloadCompression"
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null(StreamingExportStatus), graphql_name="status"
    )

    updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="updatedAt"
    )


class SuggestedNrqlQueryAnomaly(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("time_window",)
    time_window = sgqlc.types.Field(
        sgqlc.types.non_null("TimeWindow"), graphql_name="timeWindow"
    )


class SuggestedNrqlQueryResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("suggestions",)
    suggestions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(SuggestedNrqlQuery)),
        graphql_name="suggestions",
    )


class SyntheticMonitorSummaryData(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "locations_failing",
        "locations_running",
        "status",
        "success_rate",
    )
    locations_failing = sgqlc.types.Field(Int, graphql_name="locationsFailing")

    locations_running = sgqlc.types.Field(Int, graphql_name="locationsRunning")

    status = sgqlc.types.Field(SyntheticMonitorStatus, graphql_name="status")

    success_rate = sgqlc.types.Field(Float, graphql_name="successRate")


class SyntheticsAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("script", "steps")
    script = sgqlc.types.Field(
        "SyntheticsMonitorScriptQueryResponse",
        graphql_name="script",
        args=sgqlc.types.ArgDict(
            (
                (
                    "monitor_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="monitorGuid",
                        default=None,
                    ),
                ),
            )
        ),
    )

    steps = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("SyntheticsStep")),
        graphql_name="steps",
        args=sgqlc.types.ArgDict(
            (
                (
                    "monitor_guid",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(EntityGuid),
                        graphql_name="monitorGuid",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `monitor_guid` (`EntityGuid!`)
    """


class SyntheticsBrokenLinksMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
        "uri",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field("SyntheticsLocations", graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(
        "SyntheticsExtendedTypeMonitorRuntime", graphql_name="runtime"
    )

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")

    uri = sgqlc.types.Field(String, graphql_name="uri")


class SyntheticsBrokenLinksMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorCreateError")),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsBrokenLinksMonitor, graphql_name="monitor")


class SyntheticsBrokenLinksMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorUpdateError")),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsBrokenLinksMonitor, graphql_name="monitor")


class SyntheticsCertCheckMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "domain",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "number_days_to_fail_before_cert_expires",
        "period",
        "runtime",
        "status",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    domain = sgqlc.types.Field(String, graphql_name="domain")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field("SyntheticsLocations", graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    number_days_to_fail_before_cert_expires = sgqlc.types.Field(
        Int, graphql_name="numberDaysToFailBeforeCertExpires"
    )

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(
        "SyntheticsExtendedTypeMonitorRuntime", graphql_name="runtime"
    )

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")


class SyntheticsCertCheckMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorCreateError")),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsCertCheckMonitor, graphql_name="monitor")


class SyntheticsCertCheckMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of("SyntheticsMonitorUpdateError")),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsCertCheckMonitor, graphql_name="monitor")


class SyntheticsCustomHeader(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "value")
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="value")


class SyntheticsDailyMonitorDowntimeMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "end_repeat",
        "end_time",
        "guid",
        "monitor_guids",
        "name",
        "start_time",
        "timezone",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    end_repeat = sgqlc.types.Field(
        "SyntheticsDateWindowEndOutput", graphql_name="endRepeat"
    )

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    monitor_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="monitorGuids"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class SyntheticsDateWindowEndOutput(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("on_date", "on_repeat")
    on_date = sgqlc.types.Field(Date, graphql_name="onDate")

    on_repeat = sgqlc.types.Field(Int, graphql_name="onRepeat")


class SyntheticsDaysOfWeekOutput(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("ordinal_day_of_month", "week_day")
    ordinal_day_of_month = sgqlc.types.Field(
        SyntheticsMonitorDowntimeDayOfMonthOrdinal, graphql_name="ordinalDayOfMonth"
    )

    week_day = sgqlc.types.Field(
        SyntheticsMonitorDowntimeWeekDays, graphql_name="weekDay"
    )


class SyntheticsDeviceEmulation(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("device_orientation", "device_type")
    device_orientation = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsDeviceOrientation),
        graphql_name="deviceOrientation",
    )

    device_type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsDeviceType), graphql_name="deviceType"
    )


class SyntheticsError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(String, graphql_name="description")


class SyntheticsExtendedTypeMonitorRuntime(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("runtime_type", "runtime_type_version")
    runtime_type = sgqlc.types.Field(String, graphql_name="runtimeType")

    runtime_type_version = sgqlc.types.Field(SemVer, graphql_name="runtimeTypeVersion")


class SyntheticsLocations(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("private", "public")
    private = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="private")

    public = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="public")


class SyntheticsMonitorCreateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorCreateErrorType), graphql_name="type"
    )


class SyntheticsMonitorDeleteMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted_guid",)
    deleted_guid = sgqlc.types.Field(EntityGuid, graphql_name="deletedGuid")


class SyntheticsMonitorDowntimeDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid",)
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")


class SyntheticsMonitorDowntimeMonthlyFrequencyOutput(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("days_of_month", "days_of_week")
    days_of_month = sgqlc.types.Field(
        sgqlc.types.list_of(Int), graphql_name="daysOfMonth"
    )

    days_of_week = sgqlc.types.Field(
        SyntheticsDaysOfWeekOutput, graphql_name="daysOfWeek"
    )


class SyntheticsMonitorDowntimeMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "end_repeat",
        "end_time",
        "frequency",
        "guid",
        "maintenance_days",
        "monitor_guids",
        "name",
        "start_time",
        "timezone",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    end_repeat = sgqlc.types.Field(
        SyntheticsDateWindowEndOutput, graphql_name="endRepeat"
    )

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")

    frequency = sgqlc.types.Field(
        SyntheticsMonitorDowntimeMonthlyFrequencyOutput, graphql_name="frequency"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    maintenance_days = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsMonitorDowntimeWeekDays),
        graphql_name="maintenanceDays",
    )

    monitor_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="monitorGuids"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class SyntheticsMonitorScriptQueryResponse(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("text",)
    text = sgqlc.types.Field(String, graphql_name="text")


class SyntheticsMonitorUpdateError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsMonitorUpdateErrorType), graphql_name="type"
    )


class SyntheticsMonthlyMonitorDowntimeMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "end_repeat",
        "end_time",
        "frequency",
        "guid",
        "monitor_guids",
        "name",
        "start_time",
        "timezone",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    end_repeat = sgqlc.types.Field(
        SyntheticsDateWindowEndOutput, graphql_name="endRepeat"
    )

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")

    frequency = sgqlc.types.Field(
        SyntheticsMonitorDowntimeMonthlyFrequencyOutput, graphql_name="frequency"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    monitor_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="monitorGuids"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class SyntheticsOnceMonitorDowntimeMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "end_time",
        "guid",
        "monitor_guids",
        "name",
        "start_time",
        "timezone",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    monitor_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="monitorGuids"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class SyntheticsPrivateLocationDeleteResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of("SyntheticsPrivateLocationMutationError"),
        graphql_name="errors",
    )


class SyntheticsPrivateLocationMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "type")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsPrivateLocationMutationErrorType),
        graphql_name="type",
    )


class SyntheticsPrivateLocationMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "description",
        "domain_id",
        "errors",
        "guid",
        "key",
        "location_id",
        "name",
        "shared",
        "verified_script_execution",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    description = sgqlc.types.Field(String, graphql_name="description")

    domain_id = sgqlc.types.Field(String, graphql_name="domainId")

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsPrivateLocationMutationError),
        graphql_name="errors",
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    key = sgqlc.types.Field(String, graphql_name="key")

    location_id = sgqlc.types.Field(String, graphql_name="locationId")

    name = sgqlc.types.Field(String, graphql_name="name")

    shared = sgqlc.types.Field(Boolean, graphql_name="shared")

    verified_script_execution = sgqlc.types.Field(
        Boolean, graphql_name="verifiedScriptExecution"
    )


class SyntheticsPrivateLocationPurgeQueueResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsPrivateLocationMutationError),
        graphql_name="errors",
    )


class SyntheticsRuntime(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("runtime_type", "runtime_type_version", "script_language")
    runtime_type = sgqlc.types.Field(String, graphql_name="runtimeType")

    runtime_type_version = sgqlc.types.Field(
        sgqlc.types.non_null(SemVer), graphql_name="runtimeTypeVersion"
    )

    script_language = sgqlc.types.Field(String, graphql_name="scriptLanguage")


class SyntheticsScriptApiMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
    )
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")


class SyntheticsScriptApiMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsScriptApiMonitor, graphql_name="monitor")


class SyntheticsScriptApiMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsScriptApiMonitor, graphql_name="monitor")


class SyntheticsScriptBrowserMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "browsers",
        "created_at",
        "devices",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsScriptBrowserMonitorAdvancedOptions", graphql_name="advancedOptions"
    )

    browsers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsBrowser), graphql_name="browsers"
    )

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    devices = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsDevice), graphql_name="devices"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")


class SyntheticsScriptBrowserMonitorAdvancedOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("device_emulation", "enable_screenshot_on_failure_and_script")
    device_emulation = sgqlc.types.Field(
        SyntheticsDeviceEmulation, graphql_name="deviceEmulation"
    )

    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )


class SyntheticsScriptBrowserMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsScriptBrowserMonitor, graphql_name="monitor")


class SyntheticsScriptBrowserMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsScriptBrowserMonitor, graphql_name="monitor")


class SyntheticsSecureCredentialMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "description", "errors", "key", "last_update")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    description = sgqlc.types.Field(String, graphql_name="description")

    errors = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsError), graphql_name="errors"
    )

    key = sgqlc.types.Field(String, graphql_name="key")

    last_update = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastUpdate")


class SyntheticsSimpleBrowserMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "browsers",
        "created_at",
        "devices",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleBrowserMonitorAdvancedOptions", graphql_name="advancedOptions"
    )

    browsers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsBrowser), graphql_name="browsers"
    )

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    devices = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsDevice), graphql_name="devices"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(SyntheticsRuntime, graphql_name="runtime")

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")

    uri = sgqlc.types.Field(String, graphql_name="uri")


class SyntheticsSimpleBrowserMonitorAdvancedOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "device_emulation",
        "enable_screenshot_on_failure_and_script",
        "response_validation_text",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeader), graphql_name="customHeaders"
    )

    device_emulation = sgqlc.types.Field(
        SyntheticsDeviceEmulation, graphql_name="deviceEmulation"
    )

    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")


class SyntheticsSimpleBrowserMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsSimpleBrowserMonitor, graphql_name="monitor")


class SyntheticsSimpleBrowserMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsSimpleBrowserMonitor, graphql_name="monitor")


class SyntheticsSimpleMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "created_at",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "status",
        "uri",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsSimpleMonitorAdvancedOptions", graphql_name="advancedOptions"
    )

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")

    uri = sgqlc.types.Field(String, graphql_name="uri")


class SyntheticsSimpleMonitorAdvancedOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "custom_headers",
        "redirect_is_failure",
        "response_validation_text",
        "should_bypass_head_request",
        "use_tls_validation",
    )
    custom_headers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsCustomHeader), graphql_name="customHeaders"
    )

    redirect_is_failure = sgqlc.types.Field(Boolean, graphql_name="redirectIsFailure")

    response_validation_text = sgqlc.types.Field(
        String, graphql_name="responseValidationText"
    )

    should_bypass_head_request = sgqlc.types.Field(
        Boolean, graphql_name="shouldBypassHeadRequest"
    )

    use_tls_validation = sgqlc.types.Field(Boolean, graphql_name="useTlsValidation")


class SyntheticsSimpleMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsSimpleMonitor, graphql_name="monitor")


class SyntheticsStep(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("ordinal", "type", "values")
    ordinal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="ordinal")

    type = sgqlc.types.Field(
        sgqlc.types.non_null(SyntheticsStepType), graphql_name="type"
    )

    values = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="values"
    )


class SyntheticsStepMonitor(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "advanced_options",
        "browsers",
        "created_at",
        "devices",
        "guid",
        "id",
        "locations",
        "modified_at",
        "name",
        "period",
        "runtime",
        "status",
        "steps",
    )
    advanced_options = sgqlc.types.Field(
        "SyntheticsStepMonitorAdvancedOptions", graphql_name="advancedOptions"
    )

    browsers = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsBrowser), graphql_name="browsers"
    )

    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    devices = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsDevice), graphql_name="devices"
    )

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    id = sgqlc.types.Field(ID, graphql_name="id")

    locations = sgqlc.types.Field(SyntheticsLocations, graphql_name="locations")

    modified_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="modifiedAt")

    name = sgqlc.types.Field(String, graphql_name="name")

    period = sgqlc.types.Field(SyntheticsMonitorPeriod, graphql_name="period")

    runtime = sgqlc.types.Field(
        SyntheticsExtendedTypeMonitorRuntime, graphql_name="runtime"
    )

    status = sgqlc.types.Field(SyntheticsMonitorStatus, graphql_name="status")

    steps = sgqlc.types.Field(sgqlc.types.list_of(SyntheticsStep), graphql_name="steps")


class SyntheticsStepMonitorAdvancedOptions(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enable_screenshot_on_failure_and_script",)
    enable_screenshot_on_failure_and_script = sgqlc.types.Field(
        Boolean, graphql_name="enableScreenshotOnFailureAndScript"
    )


class SyntheticsStepMonitorCreateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorCreateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsStepMonitor, graphql_name="monitor")


class SyntheticsStepMonitorUpdateMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors", "monitor")
    errors = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(SyntheticsMonitorUpdateError)),
        graphql_name="errors",
    )

    monitor = sgqlc.types.Field(SyntheticsStepMonitor, graphql_name="monitor")


class SyntheticsSyntheticMonitorAsset(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("type", "url")
    type = sgqlc.types.Field(String, graphql_name="type")

    url = sgqlc.types.Field(String, graphql_name="url")


class SyntheticsWeeklyMonitorDowntimeMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account_id",
        "end_repeat",
        "end_time",
        "guid",
        "maintenance_days",
        "monitor_guids",
        "name",
        "start_time",
        "timezone",
    )
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    end_repeat = sgqlc.types.Field(
        SyntheticsDateWindowEndOutput, graphql_name="endRepeat"
    )

    end_time = sgqlc.types.Field(NaiveDateTime, graphql_name="endTime")

    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")

    maintenance_days = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsMonitorDowntimeWeekDays),
        graphql_name="maintenanceDays",
    )

    monitor_guids = sgqlc.types.Field(
        sgqlc.types.list_of(EntityGuid), graphql_name="monitorGuids"
    )

    name = sgqlc.types.Field(String, graphql_name="name")

    start_time = sgqlc.types.Field(NaiveDateTime, graphql_name="startTime")

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class SystemIdentityCreatedSystemIdentity(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "client_id",
        "client_secret",
        "credential_expiration",
        "id",
        "name",
        "organization_id",
        "public_key",
    )
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="clientId")

    client_secret = sgqlc.types.Field(SecureValue, graphql_name="clientSecret")

    credential_expiration = sgqlc.types.Field(
        String, graphql_name="credentialExpiration"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    public_key = sgqlc.types.Field(String, graphql_name="publicKey")


class SystemIdentityGroupCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of("SystemIdentityGroupResponseType"), graphql_name="items"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SystemIdentityGroupList(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("system_identity_groups",)
    system_identity_groups = sgqlc.types.Field(
        sgqlc.types.list_of("SystemIdentityGroupType"),
        graphql_name="systemIdentityGroups",
    )


class SystemIdentityGroupResponseType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "organization_id", "system_identities")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    system_identities = sgqlc.types.Field(
        "SystemIdentityNestedIdentityCollection", graphql_name="systemIdentities"
    )


class SystemIdentityGroupType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "name", "organization_id")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )


class SystemIdentityIdentityCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of("SystemIdentityResponseType"), graphql_name="items"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SystemIdentityNestedGroupCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of(SystemIdentityGroupType), graphql_name="items"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SystemIdentityNestedIdentityCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("items", "next_cursor", "total_count")
    items = sgqlc.types.Field(
        sgqlc.types.list_of("SystemIdentityType"), graphql_name="items"
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(Int, graphql_name="totalCount")


class SystemIdentityResponseType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "client_id",
        "id",
        "name",
        "organization_id",
        "system_identity_groups",
    )
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="clientId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )

    system_identity_groups = sgqlc.types.Field(
        SystemIdentityNestedGroupCollection, graphql_name="systemIdentityGroups"
    )


class SystemIdentityType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("client_id", "id", "name", "organization_id")
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="clientId")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    organization_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="organizationId"
    )


class TaggingMutationError(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("message", "type")
    message = sgqlc.types.Field(String, graphql_name="message")

    type = sgqlc.types.Field(TaggingMutationErrorType, graphql_name="type")


class TaggingMutationResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("errors",)
    errors = sgqlc.types.Field(
        sgqlc.types.list_of(TaggingMutationError), graphql_name="errors"
    )


class TimeWindow(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("end_time", "start_time")
    end_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="endTime")

    start_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="startTime")


class TimeZoneInfo(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("name", "offset")
    name = sgqlc.types.Field(String, graphql_name="name")

    offset = sgqlc.types.Field(Seconds, graphql_name="offset")


class User(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "email", "id", "name", "time_zone_name")
    created_at = sgqlc.types.Field(Int, graphql_name="createdAt")

    email = sgqlc.types.Field(String, graphql_name="email")

    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")

    time_zone_name = sgqlc.types.Field(String, graphql_name="timeZoneName")


class UserManagementAddUsersToGroupsPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups",)
    groups = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("UserManagementGroup")),
        graphql_name="groups",
    )


class UserManagementAuthenticationDomain(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups", "id", "name", "provisioning_type", "users")
    groups = sgqlc.types.Field(
        "UserManagementGroups",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        UserManagementGroupFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
                (
                    "sort",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(
                            sgqlc.types.non_null(UserManagementGroupSortInput)
                        ),
                        graphql_name="sort",
                        default=(),
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`UserManagementGroupFilterInput`)
    * `id` (`[ID!]`)
    * `sort` (`[UserManagementGroupSortInput!]`) (default: `[]`)
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    provisioning_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="provisioningType"
    )

    users = sgqlc.types.Field(
        "UserManagementUsers",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "filter",
                    sgqlc.types.Arg(
                        UserManagementUserFilterInput,
                        graphql_name="filter",
                        default=None,
                    ),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `filter` (`UserManagementUserFilterInput`)
    * `id` (`[ID!]`)
    """


class UserManagementAuthenticationDomains(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "next_cursor", "total_count")
    authentication_domains = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(
                sgqlc.types.non_null(UserManagementAuthenticationDomain)
            )
        ),
        graphql_name="authenticationDomains",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class UserManagementCreateGroupPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field("UserManagementGroup", graphql_name="group")


class UserManagementCreateUserPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_user",)
    created_user = sgqlc.types.Field(
        "UserManagementCreatedUser", graphql_name="createdUser"
    )


class UserManagementCreatedUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domain_id", "email", "id", "name", "type")
    authentication_domain_id = sgqlc.types.Field(
        ID, graphql_name="authenticationDomainId"
    )

    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="email")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    type = sgqlc.types.Field(
        sgqlc.types.non_null("UserManagementUserType"), graphql_name="type"
    )


class UserManagementDeleteGroupPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field("UserManagementGroup", graphql_name="group")


class UserManagementDeleteUserPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("deleted_user",)
    deleted_user = sgqlc.types.Field(
        "UserManagementDeletedUser", graphql_name="deletedUser"
    )


class UserManagementDeletedUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class UserManagementGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id", "users")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    users = sgqlc.types.Field(
        "UserManagementGroupUsers",
        graphql_name="users",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """


class UserManagementGroupUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "id", "name", "time_zone")
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="email")

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    time_zone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timeZone")


class UserManagementGroupUsers(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroupUser))
        ),
        graphql_name="users",
    )


class UserManagementGroups(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroup))
        ),
        graphql_name="groups",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class UserManagementOrganizationStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("authentication_domains", "types")
    authentication_domains = sgqlc.types.Field(
        UserManagementAuthenticationDomains,
        graphql_name="authenticationDomains",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """

    types = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("UserManagementOrganizationUserType")),
        graphql_name="types",
    )


class UserManagementOrganizationUserType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class UserManagementPendingUpgradeRequest(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("id", "message", "requested_user_type")
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    message = sgqlc.types.Field(String, graphql_name="message")

    requested_user_type = sgqlc.types.Field(
        "UserManagementUserType", graphql_name="requestedUserType"
    )


class UserManagementRemoveUsersFromGroupsPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups",)
    groups = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(UserManagementGroup)),
        graphql_name="groups",
    )


class UserManagementUpdateGroupPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("group",)
    group = sgqlc.types.Field(UserManagementGroup, graphql_name="group")


class UserManagementUpdateUserPayload(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("user",)
    user = sgqlc.types.Field("UserManagementUser", graphql_name="user")


class UserManagementUser(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "email",
        "email_verification_state",
        "groups",
        "id",
        "last_active",
        "name",
        "pending_upgrade_request",
        "time_zone",
        "type",
    )
    email = sgqlc.types.Field(String, graphql_name="email")

    email_verification_state = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="emailVerificationState"
    )

    groups = sgqlc.types.Field(
        "UserManagementUserGroups",
        graphql_name="groups",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(sgqlc.types.non_null(ID)),
                        graphql_name="id",
                        default=None,
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `id` (`[ID!]`)
    """

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")

    last_active = sgqlc.types.Field(DateTime, graphql_name="lastActive")

    name = sgqlc.types.Field(String, graphql_name="name")

    pending_upgrade_request = sgqlc.types.Field(
        UserManagementPendingUpgradeRequest, graphql_name="pendingUpgradeRequest"
    )

    time_zone = sgqlc.types.Field(String, graphql_name="timeZone")

    type = sgqlc.types.Field(
        sgqlc.types.non_null("UserManagementUserType"), graphql_name="type"
    )


class UserManagementUserGroup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class UserManagementUserGroups(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("groups", "next_cursor", "total_count")
    groups = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementUserGroup))
        ),
        graphql_name="groups",
    )

    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class UserManagementUserType(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("display_name", "id")
    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )

    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class UserManagementUsers(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UserManagementUser))
        ),
        graphql_name="users",
    )


class UserReference(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "gravatar", "id", "name")
    email = sgqlc.types.Field(String, graphql_name="email")

    gravatar = sgqlc.types.Field(String, graphql_name="gravatar")

    id = sgqlc.types.Field(Int, graphql_name="id")

    name = sgqlc.types.Field(String, graphql_name="name")


class UsersActorStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("user_search",)
    user_search = sgqlc.types.Field(
        "UsersUserSearchResult",
        graphql_name="userSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        UsersUserSearchQuery, graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `query` (`UsersUserSearchQuery`)
    """


class UsersUserSearch(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("email", "name", "user_id")
    email = sgqlc.types.Field(String, graphql_name="email")

    name = sgqlc.types.Field(String, graphql_name="name")

    user_id = sgqlc.types.Field(ID, graphql_name="userId")


class UsersUserSearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "total_count", "users")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )

    users = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(UsersUserSearch))
        ),
        graphql_name="users",
    )


class WhatsNewDocsStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("announcement", "eol_announcement", "news_search")
    announcement = sgqlc.types.Field(
        "WhatsNewAnnouncementContent",
        graphql_name="announcement",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    eol_announcement = sgqlc.types.Field(
        "WhatsNewEolAnnouncementContent",
        graphql_name="eolAnnouncement",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(ID), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    news_search = sgqlc.types.Field(
        "WhatsNewSearchResult",
        graphql_name="newsSearch",
        args=sgqlc.types.ArgDict(
            (
                (
                    "cursor",
                    sgqlc.types.Arg(String, graphql_name="cursor", default=None),
                ),
                (
                    "query",
                    sgqlc.types.Arg(
                        WhatsNewContentSearchQuery, graphql_name="query", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `cursor` (`String`)
    * `query` (`WhatsNewContentSearchQuery`)
    """


class WhatsNewSearchResult(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("next_cursor", "results", "total_count")
    next_cursor = sgqlc.types.Field(String, graphql_name="nextCursor")

    results = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WhatsNewContent)),
        graphql_name="results",
    )

    total_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="totalCount"
    )


class WorkloadAccountStitchedFields(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ()


class WorkloadAutomaticStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("enabled", "remaining_entities_rule", "rules")
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    remaining_entities_rule = sgqlc.types.Field(
        "WorkloadRemainingEntitiesRule", graphql_name="remainingEntitiesRule"
    )

    rules = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null("WorkloadRegularRule"))
        ),
        graphql_name="rules",
    )


class WorkloadCollection(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_at",
        "created_by",
        "description",
        "entities",
        "entity_search_queries",
        "entity_search_query",
        "guid",
        "id",
        "name",
        "permalink",
        "scope_accounts",
        "status",
        "status_config",
        "updated_at",
        "updated_by",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntityRef")),
        graphql_name="entities",
    )

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntitySearchQuery")),
        graphql_name="entitySearchQueries",
    )

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    permalink = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="permalink"
    )

    scope_accounts = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadScopeAccounts"), graphql_name="scopeAccounts"
    )

    status = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadWorkloadStatus"), graphql_name="status"
    )

    status_config = sgqlc.types.Field(
        "WorkloadStatusConfig", graphql_name="statusConfig"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field(UserReference, graphql_name="updatedBy")


class WorkloadCollectionWithoutStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "account",
        "created_at",
        "created_by",
        "description",
        "entities",
        "entity_search_queries",
        "entity_search_query",
        "guid",
        "id",
        "name",
        "permalink",
        "scope_accounts",
        "status_config",
        "updated_at",
        "updated_by",
    )
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")

    description = sgqlc.types.Field(String, graphql_name="description")

    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntityRef")),
        graphql_name="entities",
    )

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("WorkloadEntitySearchQuery")),
        graphql_name="entitySearchQueries",
    )

    entity_search_query = sgqlc.types.Field(String, graphql_name="entitySearchQuery")

    guid = sgqlc.types.Field(sgqlc.types.non_null(EntityGuid), graphql_name="guid")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="name")

    permalink = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="permalink"
    )

    scope_accounts = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadScopeAccounts"), graphql_name="scopeAccounts"
    )

    status_config = sgqlc.types.Field(
        "WorkloadStatusConfig", graphql_name="statusConfig"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    updated_by = sgqlc.types.Field(UserReference, graphql_name="updatedBy")


class WorkloadEntityRef(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("guid",)
    guid = sgqlc.types.Field(EntityGuid, graphql_name="guid")


class WorkloadEntitySearchQuery(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by", "id", "query", "updated_at")
    created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="createdAt"
    )

    created_by = sgqlc.types.Field(UserReference, graphql_name="createdBy")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")


class WorkloadRegularRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("entities", "entity_search_queries", "id", "rollup")
    entities = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadEntityRef)),
        graphql_name="entities",
    )

    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadEntitySearchQuery)),
        graphql_name="entitySearchQueries",
    )

    id = sgqlc.types.Field(Int, graphql_name="id")

    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRollup"), graphql_name="rollup"
    )


class WorkloadRemainingEntitiesRule(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("rollup",)
    rollup = sgqlc.types.Field(
        sgqlc.types.non_null("WorkloadRemainingEntitiesRuleRollup"),
        graphql_name="rollup",
    )


class WorkloadRemainingEntitiesRuleRollup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("group_by", "strategy", "threshold_type", "threshold_value")
    group_by = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadGroupRemainingEntitiesRuleBy),
        graphql_name="groupBy",
    )

    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")


class WorkloadRollup(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("strategy", "threshold_type", "threshold_value")
    strategy = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadRollupStrategy), graphql_name="strategy"
    )

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )

    threshold_value = sgqlc.types.Field(Int, graphql_name="thresholdValue")


class WorkloadRollupRuleDetails(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = (
        "entity_search_queries",
        "has_individual_entities",
        "not_operational_entities",
        "operational_entities",
        "resulting_group_type",
        "threshold_type",
        "unknown_status_entities",
    )
    entity_search_queries = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)),
        graphql_name="entitySearchQueries",
    )

    has_individual_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="hasIndividualEntities"
    )

    not_operational_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="notOperationalEntities"
    )

    operational_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="operationalEntities"
    )

    resulting_group_type = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadResultingGroupType),
        graphql_name="resultingGroupType",
    )

    threshold_type = sgqlc.types.Field(
        WorkloadRuleThresholdType, graphql_name="thresholdType"
    )

    unknown_status_entities = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="unknownStatusEntities"
    )


class WorkloadScopeAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("account_ids",)
    account_ids = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="accountIds",
    )


class WorkloadStaticStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "enabled", "id", "status", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="id")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="status"
    )

    summary = sgqlc.types.Field(String, graphql_name="summary")


class WorkloadStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "status_source", "status_value", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")

    status_source = sgqlc.types.Field(WorkloadStatusSource, graphql_name="statusSource")

    status_value = sgqlc.types.Field(WorkloadStatusValue, graphql_name="statusValue")

    summary = sgqlc.types.Field(String, graphql_name="summary")


class WorkloadStatusConfig(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("automatic", "static")
    automatic = sgqlc.types.Field(WorkloadAutomaticStatus, graphql_name="automatic")

    static = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadStaticStatus)),
        graphql_name="static",
    )


class WorkloadValidAccounts(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("accounts",)
    accounts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AccountReference)),
        graphql_name="accounts",
    )


class WorkloadWorkloadStatus(sgqlc.types.Type):
    __schema__ = nerdgraph
    __field_names__ = ("description", "source", "status_details", "summary", "value")
    description = sgqlc.types.Field(String, graphql_name="description")

    source = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusSource), graphql_name="source"
    )

    status_details = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(WorkloadStatusResult)),
        graphql_name="statusDetails",
    )

    summary = sgqlc.types.Field(String, graphql_name="summary")

    value = sgqlc.types.Field(
        sgqlc.types.non_null(WorkloadStatusValue), graphql_name="value"
    )


class AiIssuesAnomalyIncident(sgqlc.types.Type, AiIssuesIIncident):
    __schema__ = nerdgraph
    __field_names__ = ("anomaly_id",)
    anomaly_id = sgqlc.types.Field(String, graphql_name="anomalyId")


class AiIssuesNewRelicIncident(sgqlc.types.Type, AiIssuesIIncident):
    __schema__ = nerdgraph
    __field_names__ = ("condition_family_id", "policy_ids")
    condition_family_id = sgqlc.types.Field(String, graphql_name="conditionFamilyId")

    policy_ids = sgqlc.types.Field(String, graphql_name="policyIds")


class AiIssuesRestIncident(sgqlc.types.Type, AiIssuesIIncident):
    __schema__ = nerdgraph
    __field_names__ = ("aggregation_tags",)
    aggregation_tags = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AiIssuesKeyValue)),
        graphql_name="aggregationTags",
    )


class AiWorkflowsBatchCreateMigratedWorkflowsResponseError(
    sgqlc.types.Type, AiWorkflowsResponseError
):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsBatchCreateMigratedWorkflowsErrorType),
        graphql_name="type",
    )


class AiWorkflowsBatchDeleteMigratedWorkflowsResponseError(
    sgqlc.types.Type, AiWorkflowsResponseError
):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsBatchDeleteMigratedWorkflowsErrorType),
        graphql_name="type",
    )


class AiWorkflowsCreateResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsCreateErrorType), graphql_name="type"
    )


class AiWorkflowsDeleteResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsDeleteErrorType), graphql_name="type"
    )


class AiWorkflowsFetchWorkflowsByIssuesFilterResponseError(
    sgqlc.types.Type, AiWorkflowsResponseError
):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsFetchWorkflowsByIssuesFilterErrorType),
        graphql_name="type",
    )


class AiWorkflowsTestResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsTestErrorType), graphql_name="type"
    )


class AiWorkflowsUpdateResponseError(sgqlc.types.Type, AiWorkflowsResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(AiWorkflowsUpdateErrorType), graphql_name="type"
    )


class AlertsAsNrqlBaselineCondition(sgqlc.types.Type, AlertsAsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ("baseline_direction", "signal_seasonality")
    baseline_direction = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlBaselineDirection),
        graphql_name="baselineDirection",
    )

    signal_seasonality = sgqlc.types.Field(
        AlertsNrqlSignalSeasonality, graphql_name="signalSeasonality"
    )


class AlertsAsNrqlOutlierCondition(sgqlc.types.Type, AlertsAsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ("expected_groups", "open_violation_on_group_overlap")
    expected_groups = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="expectedGroups"
    )

    open_violation_on_group_overlap = sgqlc.types.Field(
        sgqlc.types.non_null(Boolean), graphql_name="openViolationOnGroupOverlap"
    )


class AlertsAsNrqlStaticCondition(sgqlc.types.Type, AlertsAsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsCampfireNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsEmailNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsEmailNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsHipChatNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsNrqlBaselineCondition(sgqlc.types.Type, AlertsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ("baseline_direction", "signal_seasonality")
    baseline_direction = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsNrqlBaselineDirection),
        graphql_name="baselineDirection",
    )

    signal_seasonality = sgqlc.types.Field(
        AlertsNrqlSignalSeasonality, graphql_name="signalSeasonality"
    )


class AlertsNrqlConditionTerms(sgqlc.types.Type, AlertsNrqlTerms):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsNrqlConditionTermsWithPrediction(sgqlc.types.Type, AlertsNrqlTerms):
    __schema__ = nerdgraph
    __field_names__ = ("prediction",)
    prediction = sgqlc.types.Field(
        AlertsNrqlConditionPrediction, graphql_name="prediction"
    )


class AlertsNrqlOutlierCondition(sgqlc.types.Type, AlertsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsNrqlStaticCondition(sgqlc.types.Type, AlertsNrqlCondition):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsOpsGenieNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsOpsGenieNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsPagerDutyNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsPagerDutyNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsSlackNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsSlackNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsUserNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ()


class AlertsVictorOpsNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsVictorOpsNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsWebhookNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsWebhookNotificationChannelConfig),
        graphql_name="config",
    )


class AlertsXMattersNotificationChannel(sgqlc.types.Type, AlertsNotificationChannel):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(
        sgqlc.types.non_null(AlertsXMattersNotificationChannelConfig),
        graphql_name="config",
    )


class ApiAccessIngestKey(sgqlc.types.Type, ApiAccessKey):
    __schema__ = nerdgraph
    __field_names__ = ("account", "account_id", "ingest_type")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    ingest_type = sgqlc.types.Field(ApiAccessIngestKeyType, graphql_name="ingestType")


class ApiAccessIngestKeyError(sgqlc.types.Type, ApiAccessKeyError):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "error_type", "id", "ingest_type")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    error_type = sgqlc.types.Field(
        ApiAccessIngestKeyErrorType, graphql_name="errorType"
    )

    id = sgqlc.types.Field(String, graphql_name="id")

    ingest_type = sgqlc.types.Field(ApiAccessIngestKeyType, graphql_name="ingestType")


class ApiAccessUserKey(sgqlc.types.Type, ApiAccessKey):
    __schema__ = nerdgraph
    __field_names__ = ("account", "account_id", "user", "user_id")
    account = sgqlc.types.Field(AccountReference, graphql_name="account")

    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    user = sgqlc.types.Field(UserReference, graphql_name="user")

    user_id = sgqlc.types.Field(Int, graphql_name="userId")


class ApiAccessUserKeyError(sgqlc.types.Type, ApiAccessKeyError):
    __schema__ = nerdgraph
    __field_names__ = ("account_id", "error_type", "id", "user_id")
    account_id = sgqlc.types.Field(Int, graphql_name="accountId")

    error_type = sgqlc.types.Field(ApiAccessUserKeyErrorType, graphql_name="errorType")

    id = sgqlc.types.Field(String, graphql_name="id")

    user_id = sgqlc.types.Field(Int, graphql_name="userId")


class ApmApplicationEntity(
    sgqlc.types.Type, AlertableEntity, ApmBrowserApplicationEntity, Entity
):
    __schema__ = nerdgraph
    __field_names__ = (
        "apm_settings",
        "apm_summary",
        "application_id",
        "application_instances",
        "application_instances_v2",
        "exception",
        "language",
        "metric_grouping_issues",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "running_agent_versions",
        "settings",
    )
    apm_settings = sgqlc.types.Field(
        AgentApplicationSettingsApmBase, graphql_name="apmSettings"
    )

    apm_summary = sgqlc.types.Field(
        ApmApplicationSummaryData, graphql_name="apmSummary"
    )

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    application_instances = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(AgentEnvironmentApplicationInstance)),
        graphql_name="applicationInstances",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                ("host", sgqlc.types.Arg(String, graphql_name="host", default=None)),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="startTime", default=None
                    ),
                ),
            )
        ),
    )

    application_instances_v2 = sgqlc.types.Field(
        sgqlc.types.non_null(AgentEnvironmentApplicationInstancesResult),
        graphql_name="applicationInstancesV2",
        args=sgqlc.types.ArgDict(
            (("cursor", sgqlc.types.Arg(String, graphql_name="cursor", default=None)),)
        ),
    )

    exception = sgqlc.types.Field(
        StackTraceApmException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "occurrence_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="occurrenceId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    language = sgqlc.types.Field(String, graphql_name="language")

    metric_grouping_issues = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(MetricNormalizationRuleMetricGroupingIssue)
        ),
        graphql_name="metricGroupingIssues",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                (
                    "metric_normalization_rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(Int),
                        graphql_name="metricNormalizationRuleIds",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="startTime", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `end_time` (`EpochMilliseconds`)
    * `metric_normalization_rule_ids` (`[Int]`)
    * `start_time` (`EpochMilliseconds`)
    """

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "enabled",
                    sgqlc.types.Arg(Boolean, graphql_name="enabled", default=None),
                ),
            )
        ),
    )

    running_agent_versions = sgqlc.types.Field(
        ApmApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )

    settings = sgqlc.types.Field(ApmApplicationSettings, graphql_name="settings")


class ApmApplicationEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    ApmBrowserApplicationEntityOutline,
    EntityOutline,
):
    __schema__ = nerdgraph
    __field_names__ = (
        "apm_summary",
        "application_id",
        "language",
        "running_agent_versions",
        "settings",
    )
    apm_summary = sgqlc.types.Field(
        ApmApplicationSummaryData, graphql_name="apmSummary"
    )

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    language = sgqlc.types.Field(String, graphql_name="language")

    running_agent_versions = sgqlc.types.Field(
        ApmApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )

    settings = sgqlc.types.Field(ApmApplicationSettings, graphql_name="settings")


class ApmDatabaseInstanceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ("host", "port_or_path", "vendor")
    host = sgqlc.types.Field(String, graphql_name="host")

    port_or_path = sgqlc.types.Field(String, graphql_name="portOrPath")

    vendor = sgqlc.types.Field(String, graphql_name="vendor")


class ApmDatabaseInstanceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ("host", "port_or_path", "vendor")
    host = sgqlc.types.Field(String, graphql_name="host")

    port_or_path = sgqlc.types.Field(String, graphql_name="portOrPath")

    vendor = sgqlc.types.Field(String, graphql_name="vendor")


class ApmExternalServiceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ("host",)
    host = sgqlc.types.Field(String, graphql_name="host")


class ApmExternalServiceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ("host",)
    host = sgqlc.types.Field(String, graphql_name="host")


class BrowserApplicationEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_install_type",
        "application_id",
        "browser_properties",
        "browser_settings",
        "browser_summary",
        "exception",
        "metric_grouping_issues",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "running_agent_versions",
        "segment_allow_list_aggregate",
        "serving_apm_application_id",
        "settings",
    )
    agent_install_type = sgqlc.types.Field(
        BrowserAgentInstallType, graphql_name="agentInstallType"
    )

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    browser_properties = sgqlc.types.Field(
        AgentApplicationSettingsBrowserProperties, graphql_name="browserProperties"
    )

    browser_settings = sgqlc.types.Field(
        AgentApplicationSettingsBrowserBase, graphql_name="browserSettings"
    )

    browser_summary = sgqlc.types.Field(
        BrowserApplicationSummaryData, graphql_name="browserSummary"
    )

    exception = sgqlc.types.Field(
        StackTraceBrowserException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fingerprint",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int),
                        graphql_name="fingerprint",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    metric_grouping_issues = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(MetricNormalizationRuleMetricGroupingIssue)
        ),
        graphql_name="metricGroupingIssues",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                (
                    "metric_normalization_rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(Int),
                        graphql_name="metricNormalizationRuleIds",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="startTime", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `end_time` (`EpochMilliseconds`)
    * `metric_normalization_rule_ids` (`[Int]`)
    * `start_time` (`EpochMilliseconds`)
    """

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "enabled",
                    sgqlc.types.Arg(Boolean, graphql_name="enabled", default=None),
                ),
            )
        ),
    )

    running_agent_versions = sgqlc.types.Field(
        BrowserApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )

    segment_allow_list_aggregate = sgqlc.types.Field(
        AgentApplicationSegmentsBrowserSegmentAllowList,
        graphql_name="segmentAllowListAggregate",
        args=sgqlc.types.ArgDict(
            (
                (
                    "filters",
                    sgqlc.types.Arg(
                        AgentApplicationSegmentsSegmentAllowListFilters,
                        graphql_name="filters",
                        default=None,
                    ),
                ),
            )
        ),
    )

    serving_apm_application_id = sgqlc.types.Field(
        Int, graphql_name="servingApmApplicationId"
    )

    settings = sgqlc.types.Field(BrowserApplicationSettings, graphql_name="settings")


class BrowserApplicationEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_install_type",
        "application_id",
        "browser_summary",
        "running_agent_versions",
        "serving_apm_application_id",
        "settings",
    )
    agent_install_type = sgqlc.types.Field(
        BrowserAgentInstallType, graphql_name="agentInstallType"
    )

    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    browser_summary = sgqlc.types.Field(
        BrowserApplicationSummaryData, graphql_name="browserSummary"
    )

    running_agent_versions = sgqlc.types.Field(
        BrowserApplicationRunningAgentVersions, graphql_name="runningAgentVersions"
    )

    serving_apm_application_id = sgqlc.types.Field(
        Int, graphql_name="servingApmApplicationId"
    )

    settings = sgqlc.types.Field(BrowserApplicationSettings, graphql_name="settings")


class ChangeTrackingDeploymentEvent(sgqlc.types.Type, ChangeTrackingEvent):
    __schema__ = nerdgraph
    __field_names__ = ("changelog", "commit", "deep_link", "version")
    changelog = sgqlc.types.Field(String, graphql_name="changelog")

    commit = sgqlc.types.Field(String, graphql_name="commit")

    deep_link = sgqlc.types.Field(String, graphql_name="deepLink")

    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="version")


class ChangeTrackingFeatureFlagEvent(sgqlc.types.Type, ChangeTrackingEvent):
    __schema__ = nerdgraph
    __field_names__ = ("feature_flag_id",)
    feature_flag_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="featureFlagId"
    )


class ChangeTrackingGenericEvent(sgqlc.types.Type, ChangeTrackingEvent):
    __schema__ = nerdgraph
    __field_names__ = ()


class CloudAlbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "load_balancer_prefixes",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    load_balancer_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="loadBalancerPrefixes"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudApigatewayIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "metrics_polling_interval",
        "stage_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    stage_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="stagePrefixes"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudAutoscalingIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsAppsyncIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsAthenaIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsAutoDiscoveryIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsCognitoIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsConnectIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsDirectconnectIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsDocdbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsFsxIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsGlueIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsGovCloudProvider(sgqlc.types.Type, CloudProvider):
    __schema__ = nerdgraph
    __field_names__ = ("aws_account_id",)
    aws_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="awsAccountId"
    )


class CloudAwsKinesisanalyticsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMediaconvertIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMediapackagevodIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMetadataGovIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMetadataIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMqIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMsElasticacheGovIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMsElasticacheIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsMskIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsNeptuneIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsProvider(sgqlc.types.Type, CloudProvider):
    __schema__ = nerdgraph
    __field_names__ = ("role_account_id", "role_external_id")
    role_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="roleAccountId"
    )

    role_external_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="roleExternalId"
    )


class CloudAwsQldbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsRoute53resolverIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsStatesIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsTagsGlobalGovIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsTagsGlobalIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsTransitgatewayIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsWafIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsWafv2Integration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAwsXrayIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAzureApimanagementIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureAppgatewayIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureAppserviceIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureAutoDiscoveryIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "enabled",
        "inventory_polling_interval",
        "metrics_polling_interval",
    )
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudAzureContainersIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureCosmosdbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureCostmanagementIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "tag_keys")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_keys = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name="tagKeys")


class CloudAzureDatafactoryIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureEventhubIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureExpressrouteIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureFirewallsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureFrontdoorIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureFunctionsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureKeyvaultIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureLoadbalancerIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureLogicappsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureMachinelearningIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureMariadbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureMonitorIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "enabled",
        "exclude_tags",
        "include_tags",
        "inventory_polling_interval",
        "metrics_polling_interval",
        "resource_groups",
        "resource_types",
    )
    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    exclude_tags = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="excludeTags"
    )

    include_tags = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="includeTags"
    )

    inventory_polling_interval = sgqlc.types.Field(
        Int, graphql_name="inventoryPollingInterval"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )

    resource_types = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceTypes"
    )


class CloudAzureMysqlIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureMysqlflexibleIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzurePostgresqlIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzurePostgresqlflexibleIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzurePowerbidedicatedIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureRediscacheIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureServicebusIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureSqlIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureSqlmanagedIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureStorageIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureVirtualmachineIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureVirtualnetworksIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureVmsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudAzureVpngatewaysIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "resource_groups")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    resource_groups = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="resourceGroups"
    )


class CloudBaseIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ()


class CloudBaseProvider(sgqlc.types.Type, CloudProvider):
    __schema__ = nerdgraph
    __field_names__ = ()


class CloudBillingIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudCciAwsS3Integration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "metrics_polling_interval",
        "s3_bucket_name",
        "s3_bucket_path",
        "s3_bucket_region",
    )
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    s3_bucket_name = sgqlc.types.Field(String, graphql_name="s3BucketName")

    s3_bucket_path = sgqlc.types.Field(String, graphql_name="s3BucketPath")

    s3_bucket_region = sgqlc.types.Field(String, graphql_name="s3BucketRegion")


class CloudCloudfrontIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_lambdas_at_edge",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_lambdas_at_edge = sgqlc.types.Field(
        Boolean, graphql_name="fetchLambdasAtEdge"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudCloudtrailIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudConfluentKafkaConnectorResourceIntegration(
    sgqlc.types.Type, CloudIntegration
):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudConfluentKafkaKsqlResourceIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudConfluentKafkaResourceIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudDynamodbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudEbsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudEc2Integration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "duplicate_ec2_tags",
        "fetch_ip_addresses",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    duplicate_ec2_tags = sgqlc.types.Field(Boolean, graphql_name="duplicateEc2Tags")

    fetch_ip_addresses = sgqlc.types.Field(Boolean, graphql_name="fetchIpAddresses")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudEcsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudEfsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudElasticacheIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudElasticbeanstalkIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudElasticsearchIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nodes",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_nodes = sgqlc.types.Field(Boolean, graphql_name="fetchNodes")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudElbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudEmrIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudFossaIssuesIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpAiplatformIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpAlloydbIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpAppengineIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpBigqueryIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("fetch_table_metrics", "fetch_tags", "metrics_polling_interval")
    fetch_table_metrics = sgqlc.types.Field(Boolean, graphql_name="fetchTableMetrics")

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpBigtableIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpComposerIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpDataflowIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpDataprocIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpDatastoreIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpFirebasedatabaseIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpFirebasehostingIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpFirebasestorageIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpFirestoreIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpFunctionsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpInterconnectIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpKubernetesIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpLoadbalancingIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpMemcacheIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpProvider(sgqlc.types.Type, CloudProvider):
    __schema__ = nerdgraph
    __field_names__ = ("service_account_id",)
    service_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="serviceAccountId"
    )


class CloudGcpPubsubIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("fetch_tags", "metrics_polling_interval")
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpRedisIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpRouterIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpRunIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpSpannerIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("fetch_tags", "metrics_polling_interval")
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpSqlIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpStorageIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("fetch_tags", "metrics_polling_interval")
    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpVmsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudGcpVpcaccessIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudHealthIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudIamIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval", "tag_key", "tag_value")
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudIotIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudKinesisFirehoseIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudKinesisIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_shards",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_shards = sgqlc.types.Field(Boolean, graphql_name="fetchShards")

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudLambdaIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudOciLogsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "instrumentation_type",
        "logging_stacks",
        "metric_stacks",
        "metrics_polling_interval",
    )
    instrumentation_type = sgqlc.types.Field(String, graphql_name="instrumentationType")

    logging_stacks = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="loggingStacks"
    )

    metric_stacks = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="metricStacks"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudOciMetadataAndTagsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "instrumentation_type",
        "logging_stacks",
        "metric_stacks",
        "metrics_polling_interval",
    )
    instrumentation_type = sgqlc.types.Field(String, graphql_name="instrumentationType")

    logging_stacks = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="loggingStacks"
    )

    metric_stacks = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="metricStacks"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudRdsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudRedshiftIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudRoute53Integration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("fetch_extended_inventory", "metrics_polling_interval")
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudS3Integration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "fetch_extended_inventory",
        "fetch_tags",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudSecurityHubIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudSesIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("aws_regions", "metrics_polling_interval")
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudSnsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "metrics_polling_interval",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudSqsIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_extended_inventory",
        "fetch_tags",
        "metrics_polling_interval",
        "queue_prefixes",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_extended_inventory = sgqlc.types.Field(
        Boolean, graphql_name="fetchExtendedInventory"
    )

    fetch_tags = sgqlc.types.Field(Boolean, graphql_name="fetchTags")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    queue_prefixes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="queuePrefixes"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class CloudTrustedadvisorIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = ("metrics_polling_interval",)
    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )


class CloudVpcIntegration(sgqlc.types.Type, CloudIntegration):
    __schema__ = nerdgraph
    __field_names__ = (
        "aws_regions",
        "fetch_nat_gateway",
        "fetch_vpn",
        "metrics_polling_interval",
        "tag_key",
        "tag_value",
    )
    aws_regions = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="awsRegions"
    )

    fetch_nat_gateway = sgqlc.types.Field(Boolean, graphql_name="fetchNatGateway")

    fetch_vpn = sgqlc.types.Field(Boolean, graphql_name="fetchVpn")

    metrics_polling_interval = sgqlc.types.Field(
        Int, graphql_name="metricsPollingInterval"
    )

    tag_key = sgqlc.types.Field(String, graphql_name="tagKey")

    tag_value = sgqlc.types.Field(String, graphql_name="tagValue")


class DashboardEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "dashboard_parent_guid",
        "description",
        "owner",
        "pages",
        "permissions",
        "updated_at",
        "variables",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    dashboard_parent_guid = sgqlc.types.Field(
        EntityGuid, graphql_name="dashboardParentGuid"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    owner = sgqlc.types.Field(DashboardEntityOwnerInfo, graphql_name="owner")

    pages = sgqlc.types.Field(sgqlc.types.list_of(DashboardPage), graphql_name="pages")

    permissions = sgqlc.types.Field(
        DashboardEntityPermissions, graphql_name="permissions"
    )

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")

    variables = sgqlc.types.Field(
        sgqlc.types.list_of(DashboardVariable), graphql_name="variables"
    )


class DashboardEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = (
        "created_at",
        "dashboard_parent_guid",
        "owner",
        "permissions",
        "updated_at",
    )
    created_at = sgqlc.types.Field(DateTime, graphql_name="createdAt")

    dashboard_parent_guid = sgqlc.types.Field(
        EntityGuid, graphql_name="dashboardParentGuid"
    )

    owner = sgqlc.types.Field(DashboardEntityOwnerInfo, graphql_name="owner")

    permissions = sgqlc.types.Field(
        DashboardEntityPermissions, graphql_name="permissions"
    )

    updated_at = sgqlc.types.Field(DateTime, graphql_name="updatedAt")


class EdgeAgentEndpointDetail(sgqlc.types.Type, EdgeEndpointDetail):
    __schema__ = nerdgraph
    __field_names__ = ()


class EdgeHttpsEndpointDetail(sgqlc.types.Type, EdgeEndpointDetail):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementAgentConfigurationEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("agent_type", "managed_entity_type", "version_count")
    agent_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="agentType"
    )

    managed_entity_type = sgqlc.types.Field(
        EntityManagementManagedEntityType, graphql_name="managedEntityType"
    )

    version_count = sgqlc.types.Field(Int, graphql_name="versionCount")


class EntityManagementAgentConfigurationVersionEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("agent_configuration", "blob", "version")
    agent_configuration = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="agentConfiguration"
    )

    blob = sgqlc.types.Field(EntityManagementBlob, graphql_name="blob")

    version = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="version")


class EntityManagementAgentEffectiveConfigurationEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("blob",)
    blob = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementBlob), graphql_name="blob"
    )


class EntityManagementAgentEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "agent_type",
        "fleet_control_properties",
        "infrastructure_managers",
        "version",
    )
    agent_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="agentType"
    )

    fleet_control_properties = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementFleetControlProperties),
        graphql_name="fleetControlProperties",
    )

    infrastructure_managers = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementInfrastructureManager),
        graphql_name="infrastructureManagers",
    )

    version = sgqlc.types.Field(String, graphql_name="version")


class EntityManagementAgentTypeDefinitionEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("agent_type", "display_name")
    agent_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="agentType"
    )

    display_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="displayName"
    )


class EntityManagementAiAgentEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "agents",
        "category",
        "description",
        "llm_config",
        "prompt",
        "tools",
    )
    agents = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementEntity)),
        graphql_name="agents",
    )

    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="category")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    llm_config = sgqlc.types.Field(EntityManagementLlmConfig, graphql_name="llmConfig")

    prompt = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="prompt")

    tools = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementAiAgentToolConfig)),
        graphql_name="tools",
    )


class EntityManagementAiCapableEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("category", "language", "last_seen", "tool_type", "tool_version")
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="category")

    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="language")

    last_seen = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="lastSeen"
    )

    tool_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="toolType")

    tool_version = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="toolVersion"
    )


class EntityManagementAiToolEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description", "parameters", "url")
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    parameters = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementAiToolParameter)),
        graphql_name="parameters",
    )

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementBudgetEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "budget_alert_policies",
        "budget_limits",
        "budget_segment",
        "organization_budget",
    )
    budget_alert_policies = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementBudgetAlertPolicy),
        graphql_name="budgetAlertPolicies",
    )

    budget_limits = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementBudgetLimit), graphql_name="budgetLimits"
    )

    budget_segment = sgqlc.types.Field(
        EntityManagementBudgetSegment, graphql_name="budgetSegment"
    )

    organization_budget = sgqlc.types.Field(Boolean, graphql_name="organizationBudget")


class EntityManagementCollectionEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityManagementComponentEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(String, graphql_name="description")


class EntityManagementConfluenceIntegration(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("confluence_user_id", "secret_key", "url")
    confluence_user_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="confluenceUserId"
    )

    secret_key = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="secretKey"
    )

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementConfluenceRagSettingsEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = (
        "character_text_splitter_options",
        "chunk_overlap",
        "chunk_size",
        "confluence_integration_id",
        "confluence_query",
        "interval_seconds",
        "last_pull_time",
        "markdown_text_splitter_options",
        "next_pull_time",
        "text_splitter_type",
        "token_text_splitter_options",
    )
    character_text_splitter_options = sgqlc.types.Field(
        EntityManagementCharacterTextSplitterOptions,
        graphql_name="characterTextSplitterOptions",
    )

    chunk_overlap = sgqlc.types.Field(Int, graphql_name="chunkOverlap")

    chunk_size = sgqlc.types.Field(Int, graphql_name="chunkSize")

    confluence_integration_id = sgqlc.types.Field(
        sgqlc.types.non_null(ID), graphql_name="confluenceIntegrationId"
    )

    confluence_query = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="confluenceQuery"
    )

    interval_seconds = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="intervalSeconds"
    )

    last_pull_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="lastPullTime")

    markdown_text_splitter_options = sgqlc.types.Field(
        EntityManagementMarkdownTextSplitterOptions,
        graphql_name="markdownTextSplitterOptions",
    )

    next_pull_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="nextPullTime")

    text_splitter_type = sgqlc.types.Field(
        EntityManagementTextSplitterType, graphql_name="textSplitterType"
    )

    token_text_splitter_options = sgqlc.types.Field(
        EntityManagementTokenTextSplitterOptions,
        graphql_name="tokenTextSplitterOptions",
    )


class EntityManagementCustomerImpactEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("blob", "components", "issue_id")
    blob = sgqlc.types.Field(EntityManagementBlob, graphql_name="blob")

    components = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementComponentEntity)),
        graphql_name="components",
    )

    issue_id = sgqlc.types.Field(ID, graphql_name="issueId")


class EntityManagementCustomerImpactQueryEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("products", "query", "query_account_id")
    products = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementComponentEntity)),
        graphql_name="products",
    )

    query = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="query")

    query_account_id = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="queryAccountId"
    )


class EntityManagementFleetDeploymentEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "configuration_version_list",
        "description",
        "fleet_id",
        "phase",
        "rings_deployment_tracker",
    )
    configuration_version_list = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementDeploymentAgentConfigurationVersion),
        graphql_name="configurationVersionList",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    fleet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetId")

    phase = sgqlc.types.Field(
        EntityManagementFleetDeploymentPhase, graphql_name="phase"
    )

    rings_deployment_tracker = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementRingDeploymentTracker),
        graphql_name="ringsDeploymentTracker",
    )


class EntityManagementFleetEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "managed_entity_rings",
        "managed_entity_type",
        "product",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    managed_entity_rings = sgqlc.types.Field(
        EntityManagementCollectionEntity, graphql_name="managedEntityRings"
    )

    managed_entity_type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementManagedEntityType),
        graphql_name="managedEntityType",
    )

    product = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="product"
    )


class EntityManagementFleetRingEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("fleet_id", "managed_entities")
    fleet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="fleetId")

    managed_entities = sgqlc.types.Field(
        EntityManagementCollectionEntity, graphql_name="managedEntities"
    )


class EntityManagementGenericEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityManagementGitHubIntegrationEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "count",
        "git_hub_sync_options",
        "installation_id",
        "installation_source",
        "installation_status",
        "last_sync_completed_at",
        "next_sync_at",
    )
    count = sgqlc.types.Field(EntityManagementCount, graphql_name="count")

    git_hub_sync_options = sgqlc.types.Field(
        EntityManagementGitHubSyncOptions, graphql_name="gitHubSyncOptions"
    )

    installation_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="installationId"
    )

    installation_source = sgqlc.types.Field(
        EntityManagementInstallationSource, graphql_name="installationSource"
    )

    installation_status = sgqlc.types.Field(
        EntityManagementInstallationStatus, graphql_name="installationStatus"
    )

    last_sync_completed_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastSyncCompletedAt"
    )

    next_sync_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="nextSyncAt")


class EntityManagementGitRepositoryEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "closed_pull_request_count",
        "configuration",
        "description",
        "external_created_at",
        "external_id",
        "external_last_deployed_at",
        "external_owner",
        "external_updated_at",
        "fork_count",
        "hosting_platform",
        "latest_release_version",
        "license",
        "locked_pull_request_count",
        "open_pull_request_count",
        "primary_language",
        "url",
    )
    closed_pull_request_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="closedPullRequestCount"
    )

    configuration = sgqlc.types.Field(
        EntityManagementConfiguration, graphql_name="configuration"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    external_created_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="externalCreatedAt"
    )

    external_id = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="externalId"
    )

    external_last_deployed_at = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="externalLastDeployedAt"
    )

    external_owner = sgqlc.types.Field(
        EntityManagementExternalOwner, graphql_name="externalOwner"
    )

    external_updated_at = sgqlc.types.Field(
        sgqlc.types.non_null(EpochMilliseconds), graphql_name="externalUpdatedAt"
    )

    fork_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="forkCount")

    hosting_platform = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementHostingPlatform),
        graphql_name="hostingPlatform",
    )

    latest_release_version = sgqlc.types.Field(
        String, graphql_name="latestReleaseVersion"
    )

    license = sgqlc.types.Field(
        EntityManagementRepositoryLicense, graphql_name="license"
    )

    locked_pull_request_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="lockedPullRequestCount"
    )

    open_pull_request_count = sgqlc.types.Field(
        sgqlc.types.non_null(Int), graphql_name="openPullRequestCount"
    )

    primary_language = sgqlc.types.Field(String, graphql_name="primaryLanguage")

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementGithubConnection(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "credential",
        "description",
        "enabled",
        "settings",
        "signing_credentials",
        "url",
    )
    credential = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementGithubCredentials),
        graphql_name="credential",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    settings = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConnectionSettings)),
        graphql_name="settings",
    )

    signing_credentials = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSigningCredential)),
        graphql_name="signingCredentials",
    )

    url = sgqlc.types.Field(String, graphql_name="url")


class EntityManagementInboxIssueCategoryEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = (
        "category_scope",
        "category_type",
        "issue_type",
        "message_attributes",
        "name_attributes",
    )
    category_scope = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementCategoryScope),
        graphql_name="categoryScope",
    )

    category_type = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="categoryType"
    )

    issue_type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementIssueType), graphql_name="issueType"
    )

    message_attributes = sgqlc.types.Field(
        sgqlc.types.list_of(String), graphql_name="messageAttributes"
    )

    name_attributes = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(String)), graphql_name="nameAttributes"
    )


class EntityManagementJiraConnection(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "credential",
        "description",
        "enabled",
        "settings",
        "signing_credentials",
        "url",
    )
    credential = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementJiraCredentials), graphql_name="credential"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    settings = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConnectionSettings)),
        graphql_name="settings",
    )

    signing_credentials = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSigningCredential)),
        graphql_name="signingCredentials",
    )

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementJiraSyncConfiguration(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "assignee_query",
        "connection",
        "correlation_field_name",
        "description",
        "direction",
        "enabled",
        "issue_type",
        "mode",
        "project_key",
        "targets",
        "template_fields",
    )
    assignee_query = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="assigneeQuery"
    )

    connection = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="connection")

    correlation_field_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="correlationFieldName"
    )

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    direction = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementDirection), graphql_name="direction"
    )

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    issue_type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementJiraIssueType), graphql_name="issueType"
    )

    mode = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSyncConfigurationMode), graphql_name="mode"
    )

    project_key = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="projectKey"
    )

    targets = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementTag)),
        graphql_name="targets",
    )

    template_fields = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementTemplateField)),
        graphql_name="templateFields",
    )


class EntityManagementMaintenanceWindowEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description", "duration", "rrule", "start_time", "timezone")
    description = sgqlc.types.Field(String, graphql_name="description")

    duration = sgqlc.types.Field(
        sgqlc.types.non_null(Duration), graphql_name="duration"
    )

    rrule = sgqlc.types.Field(String, graphql_name="rrule")

    start_time = sgqlc.types.Field(
        sgqlc.types.non_null(DateTime), graphql_name="startTime"
    )

    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="timezone")


class EntityManagementNewRelicConnection(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "credential",
        "description",
        "enabled",
        "region",
        "settings",
        "signing_credentials",
    )
    credential = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementNewRelicBasicAuthCredential),
        graphql_name="credential",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    region = sgqlc.types.Field(String, graphql_name="region")

    settings = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConnectionSettings)),
        graphql_name="settings",
    )

    signing_credentials = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSigningCredential)),
        graphql_name="signingCredentials",
    )


class EntityManagementNotebookEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("config",)
    config = sgqlc.types.Field(EntityManagementBlob, graphql_name="config")


class EntityManagementNotificationAttachmentEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("blob", "description")
    blob = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementBlob), graphql_name="blob"
    )

    description = sgqlc.types.Field(String, graphql_name="description")


class EntityManagementPerformanceInboxSettingEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("config", "threshold_scope")
    config = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConfig)),
        graphql_name="config",
    )

    threshold_scope = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementThresholdScope),
        graphql_name="thresholdScope",
    )


class EntityManagementPipelineCloudRuleEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description", "nrql")
    description = sgqlc.types.Field(String, graphql_name="description")

    nrql = sgqlc.types.Field(sgqlc.types.non_null(Nrql), graphql_name="nrql")


class EntityManagementRagDocumentEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("author_emails", "blob", "source_identifier")
    author_emails = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="authorEmails"
    )

    blob = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementBlob), graphql_name="blob"
    )

    source_identifier = sgqlc.types.Field(String, graphql_name="sourceIdentifier")


class EntityManagementRagToolEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description",)
    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )


class EntityManagementScorecardEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description", "rules")
    description = sgqlc.types.Field(String, graphql_name="description")

    rules = sgqlc.types.Field(EntityManagementCollectionEntity, graphql_name="rules")


class EntityManagementScorecardRuleEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "enabled",
        "last_execution_status",
        "nrql_engine",
        "schedule",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    last_execution_status = sgqlc.types.Field(
        EntityManagementRuleExecutionStatus, graphql_name="lastExecutionStatus"
    )

    nrql_engine = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementNrqlRuleEngine), graphql_name="nrqlEngine"
    )

    schedule = sgqlc.types.Field(EntityManagementSchedule, graphql_name="schedule")


class EntityManagementServiceNowConnection(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "credential",
        "description",
        "enabled",
        "settings",
        "signing_credentials",
        "url",
    )
    credential = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementServiceNowCredentials),
        graphql_name="credential",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    settings = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConnectionSettings)),
        graphql_name="settings",
    )

    signing_credentials = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSigningCredential)),
        graphql_name="signingCredentials",
    )

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementSlackConnection(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "app_id",
        "description",
        "enabled",
        "settings",
        "signing_credentials",
        "token",
        "workspace",
    )
    app_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="appId")

    description = sgqlc.types.Field(String, graphql_name="description")

    enabled = sgqlc.types.Field(Boolean, graphql_name="enabled")

    settings = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementConnectionSettings)),
        graphql_name="settings",
    )

    signing_credentials = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementSigningCredential)),
        graphql_name="signingCredentials",
    )

    token = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSecretReference), graphql_name="token"
    )

    workspace = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="workspace"
    )


class EntityManagementSlackSyncConfiguration(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "channel_id_payload_path",
        "connection",
        "description",
        "direction",
        "enabled",
        "mode",
        "targets",
        "template_fields",
    )
    channel_id_payload_path = sgqlc.types.Field(
        String, graphql_name="channelIdPayloadPath"
    )

    connection = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="connection")

    description = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="description"
    )

    direction = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementDirection), graphql_name="direction"
    )

    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name="enabled")

    mode = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementSyncConfigurationMode), graphql_name="mode"
    )

    targets = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementTag)),
        graphql_name="targets",
    )

    template_fields = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementTemplateField)),
        graphql_name="templateFields",
    )


class EntityManagementStatusPageAnnouncementEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = (
        "category",
        "communication_logs",
        "description",
        "effective_date",
        "event_url",
        "point_of_contacts",
        "published_date",
        "state",
    )
    category = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementStatusPageAnnouncementCategory),
        graphql_name="category",
    )

    communication_logs = sgqlc.types.Field(
        sgqlc.types.list_of(EntityManagementCommunicationLog),
        graphql_name="communicationLogs",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    effective_date = sgqlc.types.Field(EpochMilliseconds, graphql_name="effectiveDate")

    event_url = sgqlc.types.Field(String, graphql_name="eventUrl")

    point_of_contacts = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null("EntityManagementUserEntity")),
        graphql_name="pointOfContacts",
    )

    published_date = sgqlc.types.Field(EpochMilliseconds, graphql_name="publishedDate")

    state = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementStatusPageAnnouncementState),
        graphql_name="state",
    )


class EntityManagementStatusPageIncidentEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = (
        "communication_logs",
        "description",
        "end_time",
        "incident_id",
        "incident_title",
        "last_updated_time",
        "region",
        "start_time",
        "status",
    )
    communication_logs = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementCommunicationLog)),
        graphql_name="communicationLogs",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    end_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="endTime")

    incident_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="incidentId")

    incident_title = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="incidentTitle"
    )

    last_updated_time = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="lastUpdatedTime"
    )

    region = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementRegion)),
        graphql_name="region",
    )

    start_time = sgqlc.types.Field(EpochMilliseconds, graphql_name="startTime")

    status = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementIncidentStatus), graphql_name="status"
    )


class EntityManagementSystemActor(sgqlc.types.Type, EntityManagementActor):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityManagementTeamEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "aliases",
        "description",
        "external_integration",
        "membership",
        "ownership",
        "resources",
    )
    aliases = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="aliases"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    external_integration = sgqlc.types.Field(
        EntityManagementTeamExternalIntegration, graphql_name="externalIntegration"
    )

    membership = sgqlc.types.Field(
        EntityManagementCollectionEntity, graphql_name="membership"
    )

    ownership = sgqlc.types.Field(
        EntityManagementCollectionEntity, graphql_name="ownership"
    )

    resources = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementTeamResource)),
        graphql_name="resources",
    )


class EntityManagementTeamsHierarchyLevelEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityManagementTeamsOrganizationSettingsEntity(
    sgqlc.types.Type, EntityManagementEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("discovery", "sync_groups")
    discovery = sgqlc.types.Field(
        EntityManagementDiscoverySettings, graphql_name="discovery"
    )

    sync_groups = sgqlc.types.Field(
        EntityManagementSyncGroupsSettings, graphql_name="syncGroups"
    )


class EntityManagementUserActor(sgqlc.types.Type, EntityManagementActor):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityManagementUserEntity(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("user_id",)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name="userId")


class EntityManagementWorkItem(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "assigned_to",
        "attributes",
        "category",
        "description",
        "due_date",
        "external_id",
        "labels",
        "links",
        "messages",
        "priority",
        "status",
    )
    assigned_to = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementWorkItemAssignment),
        graphql_name="assignedTo",
    )

    attributes = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(EntityManagementWorkItemAttribute)),
        graphql_name="attributes",
    )

    category = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementCategory), graphql_name="category"
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    due_date = sgqlc.types.Field(EpochMilliseconds, graphql_name="dueDate")

    external_id = sgqlc.types.Field(String, graphql_name="externalId")

    labels = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name="labels"
    )

    links = sgqlc.types.Field(EntityManagementCollectionEntity, graphql_name="links")

    messages = sgqlc.types.Field(
        EntityManagementCollectionEntity, graphql_name="messages"
    )

    priority = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementPriority), graphql_name="priority"
    )

    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="status")


class EntityManagementWorkItemLink(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("external_id", "source_sync_configuration_id", "url")
    external_id = sgqlc.types.Field(String, graphql_name="externalId")

    source_sync_configuration_id = sgqlc.types.Field(
        ID, graphql_name="sourceSyncConfigurationId"
    )

    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class EntityManagementWorkItemMessage(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "content",
        "content_encoding",
        "content_type",
        "external_id",
        "parent_id",
        "source_sync_configuration_id",
    )
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="content")

    content_encoding = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementEncodingType),
        graphql_name="contentEncoding",
    )

    content_type = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementMessageType), graphql_name="contentType"
    )

    external_id = sgqlc.types.Field(String, graphql_name="externalId")

    parent_id = sgqlc.types.Field(ID, graphql_name="parentId")

    source_sync_configuration_id = sgqlc.types.Field(
        ID, graphql_name="sourceSyncConfigurationId"
    )


class EntityManagementWorkflowDefinition(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = ("description", "versions")
    description = sgqlc.types.Field(String, graphql_name="description")

    versions = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Int))),
        graphql_name="versions",
    )


class EntityManagementWorkflowSchedule(sgqlc.types.Type, EntityManagementEntity):
    __schema__ = nerdgraph
    __field_names__ = (
        "cron_expression",
        "definition",
        "description",
        "overlap_policy",
        "timezone",
    )
    cron_expression = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="cronExpression"
    )

    definition = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementWorkflowDefinitionVersion),
        graphql_name="definition",
    )

    description = sgqlc.types.Field(String, graphql_name="description")

    overlap_policy = sgqlc.types.Field(
        sgqlc.types.non_null(EntityManagementOverlapPolicy),
        graphql_name="overlapPolicy",
    )

    timezone = sgqlc.types.Field(String, graphql_name="timezone")


class EntityRelationshipDetectedEdge(sgqlc.types.Type, EntityRelationshipEdge):
    __schema__ = nerdgraph
    __field_names__ = ()


class EntityRelationshipUserDefinedEdge(sgqlc.types.Type, EntityRelationshipEdge):
    __schema__ = nerdgraph
    __field_names__ = ("created_by_user",)
    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")


class ErrorsInboxAssignErrorGroupError(sgqlc.types.Type, ErrorsInboxResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(ErrorsInboxAssignErrorGroupErrorType), graphql_name="type"
    )


class ErrorsInboxErrorGroup(sgqlc.types.Type, ErrorsInboxErrorGroupBase):
    __schema__ = nerdgraph
    __field_names__ = ("first_seen_versions", "last_seen_versions")
    first_seen_versions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxVersion)),
        graphql_name="firstSeenVersions",
    )

    last_seen_versions = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(ErrorsInboxVersion)),
        graphql_name="lastSeenVersions",
    )


class ErrorsInboxErrorGroupOutline(sgqlc.types.Type, ErrorsInboxErrorGroupBase):
    __schema__ = nerdgraph
    __field_names__ = ()


class ErrorsInboxJiraIssue(sgqlc.types.Type, ErrorsInboxResource):
    __schema__ = nerdgraph
    __field_names__ = ("issue_id",)
    issue_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="issueId")


class ErrorsInboxUpdateErrorGroupStateError(sgqlc.types.Type, ErrorsInboxResponseError):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(ErrorsInboxUpdateErrorGroupStateErrorType),
        graphql_name="type",
    )


class ExternalEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ()


class ExternalEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = ()


class GenericEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ()


class GenericEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = ()


class GenericInfrastructureEntity(
    sgqlc.types.Type, AlertableEntity, Entity, InfrastructureIntegrationEntity
):
    __schema__ = nerdgraph
    __field_names__ = ()


class GenericInfrastructureEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    EntityOutline,
    InfrastructureIntegrationEntityOutline,
):
    __schema__ = nerdgraph
    __field_names__ = ()


class InfrastructureAwsLambdaFunctionEntity(
    sgqlc.types.Type, AlertableEntity, Entity, InfrastructureIntegrationEntity
):
    __schema__ = nerdgraph
    __field_names__ = ("runtime",)
    runtime = sgqlc.types.Field(String, graphql_name="runtime")


class InfrastructureAwsLambdaFunctionEntityOutline(
    sgqlc.types.Type,
    AlertableEntityOutline,
    EntityOutline,
    InfrastructureIntegrationEntityOutline,
):
    __schema__ = nerdgraph
    __field_names__ = ("runtime",)
    runtime = sgqlc.types.Field(String, graphql_name="runtime")


class InfrastructureHostEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ("host_summary",)
    host_summary = sgqlc.types.Field(
        InfrastructureHostSummaryData, graphql_name="hostSummary"
    )


class InfrastructureHostEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ("host_summary",)
    host_summary = sgqlc.types.Field(
        InfrastructureHostSummaryData, graphql_name="hostSummary"
    )


class KeyTransactionEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "apdex_target",
        "application",
        "browser_apdex_target",
        "metric_name",
    )
    apdex_target = sgqlc.types.Field(
        sgqlc.types.non_null(Float), graphql_name="apdexTarget"
    )

    application = sgqlc.types.Field(
        sgqlc.types.non_null(KeyTransactionApplication), graphql_name="application"
    )

    browser_apdex_target = sgqlc.types.Field(Float, graphql_name="browserApdexTarget")

    metric_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="metricName"
    )


class KeyTransactionEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ()


class MobileApplicationEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "application_id",
        "crash",
        "exception",
        "metric_grouping_issues",
        "metric_normalization_rule",
        "metric_normalization_rules",
        "mobile_properties",
        "mobile_settings",
        "mobile_summary",
    )
    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    crash = sgqlc.types.Field(
        StackTraceMobileCrash,
        graphql_name="crash",
        args=sgqlc.types.ArgDict(
            (
                (
                    "occurrence_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="occurrenceId",
                        default=None,
                    ),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    exception = sgqlc.types.Field(
        StackTraceMobileException,
        graphql_name="exception",
        args=sgqlc.types.ArgDict(
            (
                (
                    "fingerprint",
                    sgqlc.types.Arg(String, graphql_name="fingerprint", default=None),
                ),
                (
                    "occurrence_id",
                    sgqlc.types.Arg(String, graphql_name="occurrenceId", default=None),
                ),
                (
                    "time_window",
                    sgqlc.types.Arg(
                        TimeWindowInput, graphql_name="timeWindow", default=None
                    ),
                ),
            )
        ),
    )

    metric_grouping_issues = sgqlc.types.Field(
        sgqlc.types.list_of(
            sgqlc.types.non_null(MetricNormalizationRuleMetricGroupingIssue)
        ),
        graphql_name="metricGroupingIssues",
        args=sgqlc.types.ArgDict(
            (
                (
                    "end_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="endTime", default=None
                    ),
                ),
                (
                    "metric_normalization_rule_ids",
                    sgqlc.types.Arg(
                        sgqlc.types.list_of(Int),
                        graphql_name="metricNormalizationRuleIds",
                        default=None,
                    ),
                ),
                (
                    "start_time",
                    sgqlc.types.Arg(
                        EpochMilliseconds, graphql_name="startTime", default=None
                    ),
                ),
            )
        ),
    )
    """Arguments:

    * `end_time` (`EpochMilliseconds`)
    * `metric_normalization_rule_ids` (`[Int]`)
    * `start_time` (`EpochMilliseconds`)
    """

    metric_normalization_rule = sgqlc.types.Field(
        MetricNormalizationRule,
        graphql_name="metricNormalizationRule",
        args=sgqlc.types.ArgDict(
            (
                (
                    "id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(Int), graphql_name="id", default=None
                    ),
                ),
            )
        ),
    )

    metric_normalization_rules = sgqlc.types.Field(
        sgqlc.types.list_of(sgqlc.types.non_null(MetricNormalizationRule)),
        graphql_name="metricNormalizationRules",
        args=sgqlc.types.ArgDict(
            (
                (
                    "enabled",
                    sgqlc.types.Arg(Boolean, graphql_name="enabled", default=None),
                ),
            )
        ),
    )

    mobile_properties = sgqlc.types.Field(
        AgentApplicationSettingsMobileProperties, graphql_name="mobileProperties"
    )

    mobile_settings = sgqlc.types.Field(
        AgentApplicationSettingsMobileBase, graphql_name="mobileSettings"
    )

    mobile_summary = sgqlc.types.Field(
        MobileAppSummaryData, graphql_name="mobileSummary"
    )


class MobileApplicationEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ("application_id", "mobile_summary")
    application_id = sgqlc.types.Field(Int, graphql_name="applicationId")

    mobile_summary = sgqlc.types.Field(
        MobileAppSummaryData, graphql_name="mobileSummary"
    )


class Nr1CatalogAllSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogInstallPlan(sgqlc.types.Type, Nr1CatalogInstaller):
    __schema__ = nerdgraph
    __field_names__ = ("steps",)
    steps = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogInstallPlanStep))
        ),
        graphql_name="steps",
    )


class Nr1CatalogLauncher(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogLauncherMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    __schema__ = nerdgraph
    __field_names__ = ("icon",)
    icon = sgqlc.types.Field(Nr1CatalogIcon, graphql_name="icon")


class Nr1CatalogLinkInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogNerdlet(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogNerdletInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    __schema__ = nerdgraph
    __field_names__ = ("nerdlet_id", "nerdlet_state")
    nerdlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="nerdletId")

    nerdlet_state = sgqlc.types.Field(
        Nr1CatalogRawNerdletState, graphql_name="nerdletState"
    )


class Nr1CatalogNerdletMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    __schema__ = nerdgraph
    __field_names__ = ("supported_entity_types",)
    supported_entity_types = sgqlc.types.Field(
        Nr1CatalogSupportedEntityTypes, graphql_name="supportedEntityTypes"
    )


class Nr1CatalogNoSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartAlert(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartAlertCondition(
    sgqlc.types.Type, Nr1CatalogQuickstartComponent
):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class Nr1CatalogQuickstartAlertConditionMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    __schema__ = nerdgraph
    __field_names__ = ("type",)
    type = sgqlc.types.Field(
        sgqlc.types.non_null(Nr1CatalogQuickstartAlertConditionType),
        graphql_name="type",
    )


class Nr1CatalogQuickstartAlertMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartDashboard(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    __schema__ = nerdgraph
    __field_names__ = ("id",)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name="id")


class Nr1CatalogQuickstartDashboardMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    __schema__ = nerdgraph
    __field_names__ = ("previews",)
    previews = sgqlc.types.Field(
        sgqlc.types.non_null(
            sgqlc.types.list_of(sgqlc.types.non_null(Nr1CatalogPreview))
        ),
        graphql_name="previews",
    )


class Nr1CatalogQuickstartDocumentation(
    sgqlc.types.Type, Nr1CatalogQuickstartComponent
):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartDocumentationMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    __schema__ = nerdgraph
    __field_names__ = ("url",)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name="url")


class Nr1CatalogQuickstartInstallPlan(sgqlc.types.Type, Nr1CatalogQuickstartComponent):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogQuickstartInstallPlanMetadata(
    sgqlc.types.Type, Nr1CatalogQuickstartComponentMetadata
):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogScreenshot(sgqlc.types.Type, Nr1CatalogPreview):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogSpecificSupportedEntityTypes(
    sgqlc.types.Type, Nr1CatalogSupportedEntityTypes
):
    __schema__ = nerdgraph
    __field_names__ = ("entity_types",)
    entity_types = sgqlc.types.Field(
        sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DomainType))),
        graphql_name="entityTypes",
    )


class Nr1CatalogTargetedInstallPlanDirective(
    sgqlc.types.Type, Nr1CatalogInstallPlanDirective
):
    __schema__ = nerdgraph
    __field_names__ = ("recipe_name",)
    recipe_name = sgqlc.types.Field(
        sgqlc.types.non_null(String), graphql_name="recipeName"
    )


class Nr1CatalogVisualization(sgqlc.types.Type, Nr1CatalogNerdpackItem):
    __schema__ = nerdgraph
    __field_names__ = ()


class Nr1CatalogVisualizationMetadata(sgqlc.types.Type, Nr1CatalogNerdpackItemMetadata):
    __schema__ = nerdgraph
    __field_names__ = ()


class SecureCredentialEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "secure_credential_id",
        "secure_credential_summary",
        "updated_at",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    secure_credential_id = sgqlc.types.Field(ID, graphql_name="secureCredentialId")

    secure_credential_summary = sgqlc.types.Field(
        SecureCredentialSummaryData, graphql_name="secureCredentialSummary"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")


class SecureCredentialEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = (
        "description",
        "secure_credential_id",
        "secure_credential_summary",
        "updated_at",
    )
    description = sgqlc.types.Field(String, graphql_name="description")

    secure_credential_id = sgqlc.types.Field(ID, graphql_name="secureCredentialId")

    secure_credential_summary = sgqlc.types.Field(
        SecureCredentialSummaryData, graphql_name="secureCredentialSummary"
    )

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")


class SuggestedAnomalyBasedNrqlQuery(sgqlc.types.Type, SuggestedNrqlQuery):
    __schema__ = nerdgraph
    __field_names__ = ("anomaly",)
    anomaly = sgqlc.types.Field(
        sgqlc.types.non_null(SuggestedNrqlQueryAnomaly), graphql_name="anomaly"
    )


class SuggestedHistoryBasedNrqlQuery(sgqlc.types.Type, SuggestedNrqlQuery):
    __schema__ = nerdgraph
    __field_names__ = ()


class SyntheticMonitorEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = (
        "assets",
        "monitor_id",
        "monitor_summary",
        "monitor_type",
        "monitored_url",
        "period",
    )
    assets = sgqlc.types.Field(
        sgqlc.types.list_of(SyntheticsSyntheticMonitorAsset),
        graphql_name="assets",
        args=sgqlc.types.ArgDict(
            (
                (
                    "check_id",
                    sgqlc.types.Arg(
                        sgqlc.types.non_null(String),
                        graphql_name="checkId",
                        default=None,
                    ),
                ),
            )
        ),
    )

    monitor_id = sgqlc.types.Field(ID, graphql_name="monitorId")

    monitor_summary = sgqlc.types.Field(
        SyntheticMonitorSummaryData, graphql_name="monitorSummary"
    )

    monitor_type = sgqlc.types.Field(SyntheticMonitorType, graphql_name="monitorType")

    monitored_url = sgqlc.types.Field(String, graphql_name="monitoredUrl")

    period = sgqlc.types.Field(Minutes, graphql_name="period")


class SyntheticMonitorEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = (
        "monitor_id",
        "monitor_summary",
        "monitor_type",
        "monitored_url",
        "period",
    )
    monitor_id = sgqlc.types.Field(ID, graphql_name="monitorId")

    monitor_summary = sgqlc.types.Field(
        SyntheticMonitorSummaryData, graphql_name="monitorSummary"
    )

    monitor_type = sgqlc.types.Field(SyntheticMonitorType, graphql_name="monitorType")

    monitored_url = sgqlc.types.Field(String, graphql_name="monitoredUrl")

    period = sgqlc.types.Field(Minutes, graphql_name="period")


class TeamEntity(sgqlc.types.Type, AlertableEntity, CollectionEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ()


class TeamEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = ()


class ThirdPartyServiceEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ()


class ThirdPartyServiceEntityOutline(
    sgqlc.types.Type, AlertableEntityOutline, EntityOutline
):
    __schema__ = nerdgraph
    __field_names__ = ()


class UnavailableEntity(sgqlc.types.Type, AlertableEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ()


class UnavailableEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = ()


class WhatsNewAnnouncementContent(sgqlc.types.Type, WhatsNewContent):
    __schema__ = nerdgraph
    __field_names__ = (
        "body",
        "doc_url",
        "getting_started_url",
        "is_featured",
        "learn_more_url",
        "requirements",
    )
    body = sgqlc.types.Field(String, graphql_name="body")

    doc_url = sgqlc.types.Field(String, graphql_name="docUrl")

    getting_started_url = sgqlc.types.Field(String, graphql_name="gettingStartedUrl")

    is_featured = sgqlc.types.Field(Boolean, graphql_name="isFeatured")

    learn_more_url = sgqlc.types.Field(String, graphql_name="learnMoreUrl")

    requirements = sgqlc.types.Field(String, graphql_name="requirements")


class WhatsNewEolAnnouncementContent(sgqlc.types.Type, WhatsNewContent):
    __schema__ = nerdgraph
    __field_names__ = ("body", "doc_url", "eol_effective_date", "learn_more_url")
    body = sgqlc.types.Field(String, graphql_name="body")

    doc_url = sgqlc.types.Field(String, graphql_name="docUrl")

    eol_effective_date = sgqlc.types.Field(
        EpochMilliseconds, graphql_name="eolEffectiveDate"
    )

    learn_more_url = sgqlc.types.Field(String, graphql_name="learnMoreUrl")


class WorkloadEntity(sgqlc.types.Type, AlertableEntity, CollectionEntity, Entity):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by_user", "updated_at", "workload_status")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    workload_status = sgqlc.types.Field(WorkloadStatus, graphql_name="workloadStatus")


class WorkloadEntityOutline(sgqlc.types.Type, AlertableEntityOutline, EntityOutline):
    __schema__ = nerdgraph
    __field_names__ = ("created_at", "created_by_user", "updated_at", "workload_status")
    created_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="createdAt")

    created_by_user = sgqlc.types.Field(UserReference, graphql_name="createdByUser")

    updated_at = sgqlc.types.Field(EpochMilliseconds, graphql_name="updatedAt")

    workload_status = sgqlc.types.Field(WorkloadStatus, graphql_name="workloadStatus")


class WorkloadRollupRuleStatusResult(sgqlc.types.Type, WorkloadStatusResult):
    __schema__ = nerdgraph
    __field_names__ = ("rollup_rule_details",)
    rollup_rule_details = sgqlc.types.Field(
        WorkloadRollupRuleDetails, graphql_name="rollupRuleDetails"
    )


class WorkloadStaticStatusResult(sgqlc.types.Type, WorkloadStatusResult):
    __schema__ = nerdgraph
    __field_names__ = ("description", "summary")
    description = sgqlc.types.Field(String, graphql_name="description")

    summary = sgqlc.types.Field(String, graphql_name="summary")


class AiNotificationsAuth(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (
        AiNotificationsBasicAuth,
        AiNotificationsCustomHeadersAuth,
        AiNotificationsOAuth2Auth,
        AiNotificationsTokenAuth,
    )


class AiNotificationsError(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (
        AiNotificationsConstraintsError,
        AiNotificationsDataValidationError,
        AiNotificationsResponseError,
        AiNotificationsSuggestionError,
    )


class AiWorkflowsConfiguration(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (AiWorkflowsNrqlConfiguration,)


class AlertsNotificationChannelMutation(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (
        AlertsEmailNotificationChannel,
        AlertsOpsGenieNotificationChannel,
        AlertsPagerDutyNotificationChannel,
        AlertsSlackNotificationChannel,
        AlertsVictorOpsNotificationChannel,
        AlertsWebhookNotificationChannel,
        AlertsXMattersNotificationChannel,
    )


class IncidentIntelligenceEnvironmentCreateEnvironmentResultDetails(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (
        IncidentIntelligenceEnvironmentEnvironmentAlreadyExists,
        IncidentIntelligenceEnvironmentEnvironmentCreated,
    )


class IncidentIntelligenceEnvironmentCurrentEnvironmentResultReasonDetails(
    sgqlc.types.Union
):
    __schema__ = nerdgraph
    __types__ = (
        IncidentIntelligenceEnvironmentMultipleEnvironmentsAvailable,
        IncidentIntelligenceEnvironmentUserNotAuthorizedForAccount,
        IncidentIntelligenceEnvironmentUserNotCapableToOperateOnAccount,
    )


class Nr1CatalogDataSourceInstallDirective(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (Nr1CatalogLinkInstallDirective, Nr1CatalogNerdletInstallDirective)


class Nr1CatalogSearchResult(sgqlc.types.Union):
    __schema__ = nerdgraph
    __types__ = (
        Nr1CatalogAlertPolicyTemplate,
        Nr1CatalogDashboardTemplate,
        Nr1CatalogDataSource,
        Nr1CatalogNerdpack,
        Nr1CatalogQuickstart,
    )

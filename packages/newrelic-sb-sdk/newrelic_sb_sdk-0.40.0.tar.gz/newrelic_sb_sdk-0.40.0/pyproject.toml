[tool.poetry]
name = "newrelic-sb-sdk"
version = "0.40.0"
description = "New Relic SDK to interact with Nerdgraph API."
authors = [
  "SoftButterfly Development Team <dev@softbutterfly.io>",
  "zodiacfireworks <martin.vuelta@gmail.com>"
]
license = "MIT License"
readme = "README.md"
homepage = "https://github.com/dynovaio/newrelic-sb-sdk"
repository = "https://github.com/dynovaio/newrelic-sb-sdk"
documentation = "https://dynovaio.github.io/newrelic-sb-sdk"
keywords = [
  "Softbutterfly",
  "New Relic",
  "SDK",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Information Technology",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Networking :: Monitoring",
]
packages = [
    { include = "newrelic_sb_sdk", from = "src" },
]
include = [
  "LICENSE.txt",
  "CHANGELOG.md",
]

[tool.poetry.urls]
"Download" = "https://github.com/dynovaio/newrelic-sb-sdk/archive/refs/tags/v0.40.0.zip"
"Bug Tracker" = "https://github.com/dynovaio/newrelic-sb-sdk/issues"

[tool.poetry.dependencies]
python = ">=3.9.0,<4.0.0"
python-dotenv = "<2.0.0"
requests = "<3.0.0"
sgqlc = "<17.0.0"

[tool.poetry.group.dev.dependencies]
autopep8 = "^2.3.2"
bandit = "^1.8.2"
black = "^25.1.0"
coverage = "^7.6.11"
deepdiff = {extras = ["optimize"], version = "^8.2.0"}
flake8 = "^7.1.1"
flake8-black = "^0.3.6"
importnb = "^2023.11.1"
isort = "^6.0.0"
jupyter-book = "^1.0.3"
jupyterlab = "^4.3.5"
mypy = "^1.15.0"
nbdev = "^2.3.34"
nbmake = "^1.5.5"
nbqa = {extras = ["toolchain"], version = "^1.9.1"}
poethepoet = "^0.32.2"
pre-commit = "^4.1.0"
pycodestyle = "^2.12.1"
pydocstyle = "^6.3.0"
pygments-sb-nrql = "^0.2.0"
pylint = "^3.3.4"
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
pytest-vcr = "^1.0.2"
ruff = "^0.9.5"
tbump = "^6.11.0"
tox = "^4.24.1"
types-requests = "^2.32.0.20241016"

[tool.black]
target_version = ['py311']
include = '\.pyi?$'
exclude = '''
/(\.git/
  |\.eggs
  |\.hg
  |__pycache__
  |\.cache
  |\.ipynb_checkpoints
  |\.mypy_cache
  |\.pytest_cache
  |\.tox
  |\.venv
  |_build
  |buck-out
  |build
  |dist
  |legacy
)/
'''

[tool.poe.tasks]
"lint"            = "poetry run pre-commit run --all"
"test"            = "poetry run pytest --cov newrelic_sb_sdk --cov-report xml:cobertura.xml --cov-report term --junitxml report.xml"
"schema:update"   = "poetry run jupyter nbconvert --to notebook --inplace --execute 'notebooks/GraphQL/NerdGraph Schema to Notebooks.ipynb'"
"schema:checkout" = "git checkout 'notebooks/GraphQL/NerdGraph Schema to Notebooks.ipynb'"
"schema:stage"    = "git add notebooks/GraphQL"
"schema:commit"   = "git commit -m 'Update: generate GraphQL notebooks with new schema'"
"package:update"  = "poetry run nbdev_export"
"package:stage"   = "git add src"
"package:commit"  = "git commit -m 'Update: refresh src module from notebooks'"
"version:update"  = "poetry run tbump --no-push --no-tag"
"freeze"          = "poetry export --without-hashes --format requirements.txt --output requirements.txt"
"freeze:dev"      = "poetry export --without-hashes --format requirements.txt --output requirements.dev.txt --with=dev"

[tool.poe.tasks."schema:upgrade"]
sequence = [
  { ref = "schema:update"},
  { ref = "schema:checkout"},
  { ref = "lint"},
  { ref = "schema:stage"},
  { ref = "schema:commit"},
]
ignore_fail = true

[tool.poe.tasks."package:upgrade"]
sequence = [
  { ref = "package:update"},
  { ref = "lint"},
  { ref = "package:stage" },
  { ref = "package:commit" },
  { cmd = "git --no-pager diff HEAD~1 HEAD -- > .diff.txt" },
]
ignore_fail = true

[tool.poe.tasks."package:release"]
sequence = [
  { cmd = "git flow release start ${version}"},
  { cmd = "poetry run tbump --no-push --no-tag --non-interactive ${version}" },
  { cmd = "env GIT_EDITOR=: git flow release finish -m 'Release'"},
]
args = [{name = "version", positional = true}]

[tool.pytest.ini_options]
testpaths = "tests"
python_files = [
  "**/test_*.py",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning"
]
addopts = [
  "--cov=newrelic_sb_sdk",
  "--cov-report=xml:cobertura.xml",
  "--cov-report=term",
  "--import-mode=importlib",
  "--junitxml=report.xml",
  "--nbmake",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

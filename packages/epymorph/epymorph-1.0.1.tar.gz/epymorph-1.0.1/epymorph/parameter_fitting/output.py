from dataclasses import dataclass
from typing import Dict, List

import numpy as np


@dataclass(frozen=True)
class ParticleFilterOutput:
    """
    Encapulates the particle filter output.

    Attributes
    ----------
    num_particles : int
        The number of particles used in the particle filter.
    parameters_estimated : list
        The parameters which were estimated.
    duration : str
        The total duration of the particle filter simulation.
    param_quantiles : Dict[str, List[float]]
        The estimated quantiles of each parameter at each observation time.
    param_values : Dict[str, List[float]]
        The estimated average of each parameter at each observation time.
    true_data : np.ndarray
        The observed data which was used by the particle filter.
    model_data : np.ndarray
        The prediced data from the particle filter.
    """

    num_particles: int
    parameters_estimated: list
    duration: str
    param_quantiles: Dict[str, List[float]]
    param_values: Dict[str, List[float]]
    true_data: np.ndarray
    model_data: np.ndarray

    def __str__(self) -> str:
        output = []

        # General Header Information
        output.append("Particle Filter Output")
        output.append("-----------------------")
        output.append(f"\nNumber of Particles: {self.num_particles}")
        output.append(f"\nDuration: {self.duration}")
        output.append(f"\nParameters estimated: {self.parameters_estimated}")

        # General description of parameter quantiles
        output.append(
            "\nParameter Quantiles: represent the statistical range of parameter "
            "estimates at different percentiles (e.g., 5th, 50th, 95th percentiles)."
        )

        # General description of parameter values
        output.append(
            "\nParameter Values: represent the values of model parameters"
            "estimated in the simulation."
        )

        # True Data description
        output.append(
            "\nTrue Data: represents the actual observed data used for comparison."
        )
        output.append(f"  Data length: {len(self.true_data)} entries.")

        # Model Data description
        output.append(
            "\nModel Estimated Data: represents the data generated by the model for"
            "comparison against the true data."
        )
        output.append(f"  Data length: {len(self.model_data)} entries.")

        return "\n".join(output)

import numpy as np
import pytest

from epymorph.adrio import humidity
from epymorph.error import DataAttributeError, DimensionError
from epymorph.geography.us_census import CountyScope
from epymorph.time import TimeFrame

# fmt: off
_TEMPERATURE = np.array([
    [-5.7670002 ,  5.57000017, -5.06700039,  1.6730001 ,  4.37000036,
      3.0940001 ,  9.59200001,  9.64100075,  1.15100002, -3.37700009,
      8.11100006,  9.20000076,  6.47800016,  0.33400002, 12.64000034],
    [-4.22100019,  5.57400036, -3.33200026,  4.33300018,  4.28800011,
      4.87200022,  8.3760004 ,  8.2140007 ,  2.31200004, -1.82500005,
      7.69900036,  8.34300041,  6.40400028,  0.53400004, 10.26300049],
    [-5.29800034,  3.21400023, -3.79300022,  5.3130002 ,  5.79200029,
      2.4460001 , 10.18500042,  9.92900085,  3.5630002 , -0.79600006,
      5.88500023,  8.92400074,  3.85000014,  1.273     , 11.23600006],
    [-4.0880003 ,  4.41500044, -1.72000003,  5.40400028,  4.9000001 ,
      3.82500029, 10.5180006 ,  9.72300053,  6.57700014, -0.41800001,
      7.83700037,  8.91300011,  4.89700031,  3.05800009, 10.13500023],
    [ 0.324     ,  8.73099995,  1.59500003,  7.28900051,  6.55600023,
      7.98700047, 10.87000084, 10.82600021,  6.62700033,  2.54500008,
      11.04900074, 10.47500038, 10.11900043,  5.72700024, 10.48600006],
    [ 1.20200002, 10.61500072,  0.46700001,  7.69500017,  6.77900028,
      9.64100075, 10.96500015, 10.92000008,  5.22200012,  3.8690002 ,
      12.06400013, 10.67800045, 10.98700047,  4.90100002, 10.94800091],
], dtype=np.float64)

_DEWPOINT = np.array([
    [-10.97999954,  -2.29500008, -10.85999966,  -3.94300008,
      -3.85400009,  -5.95599985,  -1.94299996,   1.29200006,
      -6.29899979,  -8.37699986,  -2.25600004,   0.329     ,
      -1.27199996,  -7.62099981,  -0.71399999],
    [ -7.23099995,  -0.63499999,  -7.48500013,  -1.28600001,
      -0.79299998,  -3.80699992,  -0.308     ,   2.75200009,
      -4.65399981,  -4.96299982,  -0.025     ,   2.27399993,
      -0.176     ,  -5.4829998 ,   0.77399999],
    [ -9.51099968,  -2.2249999 , -10.62100029,  -3.81699991,
      -3.15799999,  -7.44000006,  -3.07800007,   1.54799998,
      -6.38999987,  -6.88500023,  -1.53900003,   1.55900002,
      -2.78999996,  -9.02200031,  -2.21799994],
    [ -9.69699955,  -5.22100019,  -8.375     ,  -4.33599997,
      -4.55499983,  -8.9659996 ,  -2.44899988,   1.01999998,
      -4.98500013,  -6.63199997,  -3.58599997,   0.108     ,
      -4.98000002,  -7.43400002,  -0.866     ],
    [ -8.03299999,  -4.67299986,  -7.79400015,  -2.727     ,
      -3.49600005,  -6.56599998,  -0.169     ,   2.52200007,
      -4.79899979,  -5.15600014,  -2.79999995,   1.102     ,
      -4.91599989,  -6.81099987,   0.93800002],
    [ -7.98500013,  -4.51900005,  -8.85499954,  -2.80299997,
      -3.20499992,  -8.65400028,  -0.208     ,   3.21499991,
      -6.32700014,  -5.56899977,  -2.02800012,   1.96500003,
      -5.65100002,  -8.39099979,   1.13800001],
], dtype=np.float64)
# fmt: on


def test_relative_humidity_01():
    # fmt: off
    expected = np.array([
        [66.66091177, 56.95560613, 63.81925023, 66.2885902 , 55.13962758,
         51.46199869, 44.43109698, 56.03017085, 57.57817427, 68.32939779,
         47.98218234, 53.84752575, 57.67706272, 55.17028043, 39.72241185],
        [79.53668576, 64.31817548, 72.97447299, 66.86624012, 69.54016417,
         53.4276497 , 54.35973898, 68.46419681, 60.0389923 , 79.1309714 ,
         58.10067195, 65.60185383, 62.79712248, 64.05430929, 51.7805654 ],
        [72.24904864, 67.51102438, 59.09665906, 51.77452733, 52.60902902,
         48.08533971, 39.2596005 , 55.9769502 , 48.16390877, 63.38551946,
         58.91926209, 59.93547499, 61.90795588, 46.23999829, 39.01806228],
        [64.99172432, 49.58944486, 60.44718925, 49.4839441 , 50.41139431,
         38.74388606, 40.23147773, 54.64467836, 43.45401367, 62.87180064,
         44.2849873 , 54.02803039, 48.83073755, 46.06470241, 46.36696661],
        [53.47681957, 38.41469383, 49.71555688, 49.00722794, 48.66683614,
         34.98816634, 46.44978407, 56.51886311, 43.91758932, 56.8553478 ,
         37.83867048, 52.27284227, 34.3574756 , 40.09485833, 51.62210491],
        [50.38515239, 34.2495735 , 49.64673231, 47.39992767, 48.97819966,
         26.62740687, 46.02706237, 58.99301647, 43.09257966, 50.1822872 ,
         37.4635671 , 54.85863111, 30.67064714, 37.58157806, 50.78479616],
    ], dtype=np.float64)
    # fmt: on

    actual = (
        humidity.RelativeHumidity()
        .with_context(
            scope=CountyScope.in_states(["AZ"], year=2020),
            time_frame=TimeFrame.rangex("2020-01-01", "2020-01-07"),
            params={
                "temperature": _TEMPERATURE,
                "dewpoint": _DEWPOINT,
            },
        )
        .evaluate()
    )

    assert actual.dtype == expected.dtype
    assert np.allclose(actual, expected)


def test_relative_humidity_02():
    # Error: missing data attributes
    with pytest.raises(DataAttributeError):
        (
            humidity.RelativeHumidity()
            .with_context(
                scope=CountyScope.in_states(["AZ"], year=2020),
                time_frame=TimeFrame.rangex("2020-01-01", "2020-01-07"),
                params={
                    "temperature": _TEMPERATURE,
                },
            )
            .evaluate()
        )


def test_relative_humidity_03():
    # Error: missing context

    # NOTE: the error handling for the following cases is somewhat unfortunate.
    # A missing scope or time_frame also causes attribute evaluation to fail because
    # that process needs the shape info. Because this happens before context validation
    # we can't raise a more appropriate ADRIOContextError.
    # Need to rethink the sequencing of parameter evaluation... maybe do it lazily upon
    # first `self.data()` access.

    with pytest.raises(DimensionError):
        (
            humidity.RelativeHumidity()
            .with_context(
                scope=CountyScope.in_states(["AZ"], year=2020),
                # no time_frame
                params={
                    "temperature": _TEMPERATURE,
                    "dewpoint": _DEWPOINT,
                },
            )
            .evaluate()
        )

    with pytest.raises(DimensionError):
        (
            humidity.RelativeHumidity()
            .with_context(
                # no scope
                time_frame=TimeFrame.rangex("2020-01-01", "2020-01-07"),
                params={
                    "temperature": _TEMPERATURE,
                    "dewpoint": _DEWPOINT,
                },
            )
            .evaluate()
        )


def test_absolute_humidity():
    # fmt: off
    expected = np.array([
        [0.00215126, 0.00401664, 0.00216622, 0.00360343, 0.00359228,
         0.00307903, 0.00406371, 0.00514056, 0.00302072, 0.0026167 ,
         0.00399184, 0.00480353, 0.00431666, 0.00273702, 0.00439946],
        [0.00286841, 0.00453706, 0.00280351, 0.00434557, 0.00450586,
         0.00359843, 0.00460012, 0.00573369, 0.00340801, 0.00338022,
         0.00470695, 0.00553971, 0.00467722, 0.00322166, 0.00494174],
        [0.00241191, 0.00407189, 0.00219726, 0.00359004, 0.00376458,
         0.00275428, 0.00372835, 0.00523043, 0.00297362, 0.00290874,
         0.00424192, 0.0052532 , 0.0038961 , 0.00244614, 0.00395907],
        [0.00236621, 0.00324035, 0.00260113, 0.00345183, 0.00340157,
         0.00243424, 0.00390189, 0.00503963, 0.00327324, 0.00296164,
         0.00361979, 0.0047321 , 0.00329426, 0.00274945, 0.0043894 ],
        [0.00265119, 0.00332564, 0.00268825, 0.00386635, 0.00366089,
         0.00288767, 0.00460601, 0.00558897, 0.00331895, 0.00327843,
         0.00379459, 0.00505599, 0.00324921, 0.00285689, 0.00499651],
        [0.00265256, 0.00334211, 0.00248558, 0.00383905, 0.00373821,
         0.00244297, 0.00459145, 0.00586824, 0.00297018, 0.00316216,
         0.00400333, 0.00537447, 0.0030638 , 0.00253603, 0.00506064],
    ], dtype=np.float64)
    # fmt: on

    actual = (
        humidity.AbsoluteHumidity()
        .with_context(
            scope=CountyScope.in_states(["AZ"], year=2020),
            time_frame=TimeFrame.rangex("2020-01-01", "2020-01-07"),
            params={
                "temperature": _TEMPERATURE,
                "dewpoint": _DEWPOINT,
            },
        )
        .evaluate()
    )

    assert actual.dtype == expected.dtype
    assert np.allclose(actual, expected)

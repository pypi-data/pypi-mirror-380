[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }  # Test PyPI lacks support for this

[project]
name = "typed-settings"
description = "Typed settings based on attrs classes"
dynamic = ["version"]
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.9"
authors = [
    { name = "Stefan Scherfke", email = "stefan@sofa-rockers.org" },
]
keywords = [
    "configuration",
    "options",
    "settings",
    "types",
    "validation",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "tomli>=2; python_version<'3.11'",
    "exceptiongroup>=1.3.0; python_version<'3.11'",
]

[project.optional-dependencies]
attrs = [
    "attrs>=23.1",
]
cattrs = [
    "cattrs>=24.1",
]
click = [
    "click>=7",
]
option-groups = [
    "click-option-group",
    "click>=7",
]
jinja = [
    "jinja2",
]
pydantic = [
    "pydantic>=2; python_version<'3.14'",
    "pydantic>=2.12.0a1; python_version>='3.14'",
]
all = [  # All features
    "typed-settings[attrs,cattrs,click,option-groups,jinja,pydantic]",
]

[dependency-groups]
docs = [
    "furo",
    "myst-parser",
    "sphinx",
    "sphinx-copybutton",
    "sphinx_inline_tabs",
]
lint = [
    "ruff",
    "mypy",
]
test = [
    "coverage[toml]",
    "hypothesis",
    "pytest-cov",
    "pytest",
    "rich-click",
    "sybil",
    "typing-extensions; python_version<'3.11'",
]
dev = [
    "nox",
    "pip-audit",
    {include-group = "docs"},
    {include-group = "lint"},
    {include-group = "test"},
]

[project.urls]
Homepage = "https://gitlab.com/sscherfke/typed-settings"
Documentation = "https://typed-settings.readthedocs.io"
Changelog = "https://typed-settings.readthedocs.io/en/latest/changelog.html"
Issues = "https://gitlab.com/sscherfke/typed-settings/-/issues"
"Source Code" = "https://gitlab.com/sscherfke/typed-settings"

[tool.coverage.paths]
source = [
    "src",
    ".nox/test*/**/site-packages",
    "tests",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "\\.\\.\\.",
    "if TYPE_CHECKING",
    "pytest.fail",
    "assert_never\\(.*\\)"
]
fail_under = 100
omit = [  # This is also (dynamically) set/overridden in noxfile.py!
    "src/typed_settings/_onepassword.py",
    "tests/test_onepassword.py",
]
show_missing = true

[tool.coverage.run]
branch = true
parallel = true
source_pkgs = [
    "typed_settings",
    "tests",
]

[tool.mypy]
ignore_missing_imports = true
plugins = ["typed_settings.mypy"]
show_error_codes = true

[[tool.mypy.overrides]]
module = "typed_settings.*"
disallow_untyped_defs = true

[tool.pytest.ini_options]
addopts = "--ignore=README.md --ignore=docs/_build"
filterwarnings = [
    # "error",
    "ignore:.*\\-\\-a is used more than once.*:UserWarning"
]

[tool.ruff]
line-length = 88
src = ["src", "tests"]
target-version = "py39"

[tool.ruff.lint]
select = [  # see: https://beta.ruff.rs/docs/rules/
    "F",  # pyflakes
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "C90",  # mccabe
    "I",  # isort
    "D",  # pydocstyle
    "S",  # bandit
    "B",  # bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF",  # Ruff-specific
]
ignore = [
    "S101",  # assert needed in tests, useful in src for documenting invariants
    # Docstyle is a bit too strict:
    "D107",  # I never document __init__()
    "D102",
    "D105",  # I don't always write docstrings for __ meths, esp. for __str__.
    "D200",  # Allow putting the """ in separate lines in one-line docstrings
    "D205",  # Allow the first line spanning another line.
    "D212",  # Allow putting the """ in separate lines in multi-line docstrings
]

[tool.ruff.lint.per-file-ignores]
"docs/examples/*" = ["D100", "D101", "D103", "D415"]
"examples/*" = ["D101"]
"tests/*" = ["RUF012"]
"tests/op" = ["D100"]
"tests/test_cli_param_types.py" = ["D106"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

stages:
  - build
  - test
  - post-test
  - deploy

variables:
  FORCE_COLOR: '1'
  # Check "https://ghcr.io/astral-sh/uv" for updates
  IMAGE_BASE_LAYER: 'bookworm'  # "bookworm-slim" doesn't come with git installed
  IMAGE_PY_VERSION: '3.13'
  IMAGE_UV_VERSION: '0.8.2'
  NOX_DEFAULT_VENV_BACKEND: 'uv'
  # Use local cache dir so that we can use the GitLab cache.
  # This way, we can also keep the default "link-mode".
  UV_CACHE_DIR: '$CI_PROJECT_DIR/.cache/uv'

default:
  image: 'ghcr.io/astral-sh/uv:$IMAGE_UV_VERSION-python$IMAGE_PY_VERSION-$IMAGE_BASE_LAYER'
  before_script:
    - 'uv --version'
    - 'uv tool install --with=packaging --with=rich nox'

build:
  stage: 'build'
  script:
    - 'nox -s build'
  artifacts:
    paths:
      - 'dist/'

lint:
  stage: 'test'
  script:
    - 'nox -s lint'

mypy:
  stage: 'test'
  script:
    - 'nox -s mypy'

sec-check:
  stage: 'test'
  script:
    - 'nox -s sec-check'

.test:
  stage: 'test'
  artifacts:
    paths:
      - '.coverage'
      - '.coverage.*'
    reports:
      junit: 'report-*.xml'

test:
  extends: '.test'
  parallel:
    matrix:
      - PY: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
        DEPS_VERSION: ['min_deps_version', 'latest_deps_version']
  # rules:
  #   # Adding rules without checking for a branch/tag will enable
  #   # Merge Request pipelines.  We only want normal branch/tag pipelines.
  #   # See: https://docs.gitlab.com/ee/ci/jobs/job_rules.html#avoid-duplicate-pipelines
  #   - if: $CI_COMMIT_BRANCH == null && $CI_COMMIT_TAG == null
  #     when: never
  #   - if: $PY == '3.14'
  #     allow_failure: true
  #   - when: 'on_success'
  script:
    # "%%-*" strips the longest possible match of "-*" from the right:
    - 'nox -s "test-${PY%%-*}($DEPS_VERSION)" -- --junit-xml=report-${PY%%-*}-${DEPS_VERSION}.xml'

test-no-optionals:
  extends: '.test'
  script:
    - 'nox -s test_no_optionals -- --junit-xml=report-no-optionals.xml'

test-coverage:
  stage: 'post-test'
  script:
    - 'nox -s coverage-report'
  coverage: '/^TOTAL.*\s+(\d+\%)\s*$/'
  artifacts:
    paths:
      - 'htmlcov'
    reports:
      coverage_report:
        coverage_format: 'cobertura'
        path: 'coverage.xml'

.release-base:
  # Abstract base step for "release" steps.
  # Extending steps must define the following variables:
  # - PYPI_OIDC_AUD: Audience for the ID token that GitLab issues to the pipeline step
  # - PYPI_OIDC_URL: PyPI endpoint for retrieving a publish token with GitLabâ€™s ID token
  # - UV_PUBLISH_URL: PyPI endpoint for the actual upload
  stage: 'deploy'
  id_tokens:
    PYPI_ID_TOKEN:
      aud: '$PYPI_OIDC_AUD'
  script:
    - >-
      resp="$(curl -X POST "${PYPI_OIDC_URL}" -d "{\"token\":\"${PYPI_ID_TOKEN}\"}")"
    - >-
      publish_token="$(python -c 'import json, sys; print(json.load(sys.stdin)["token"])' <<< "${resp}")"
    - 'uv publish --token "$publish_token" dist/*'
    - 'version="$(uv run --with hatch-vcs hatchling version)"'
    - 'echo -e "\033[34;1mPackage on PyPI:\033[0m ${CI_ENVIRONMENT_URL}${version}/"'

release-test:
  extends: '.release-base'
  rules:
    # Do not run if source is not one of {api, push, web, webide}
    - if: >-
        $CI_PIPELINE_SOURCE != "api" &&
        $CI_PIPELINE_SOURCE != "push" &&
        $CI_PIPELINE_SOURCE != "web" &&
        $CI_PIPELINE_SOURCE != "webide"
      when: 'never'
    # Do not run if MR from a fork's 'main' branch
    - if: '$CI_OPEN_MERGE_REQUESTS != null || $CI_PROJECT_NAMESPACE != "sscherfke"'
      when: 'never'
    # Only in 'main' branch and tag pipelines
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'
  environment:
    name: 'release-test'
    url: 'https://test.pypi.org/project/typed-settings/'
  variables:
    PYPI_OIDC_AUD: 'testpypi'
    PYPI_OIDC_URL: 'https://test.pypi.org/_/oidc/mint-token'
    UV_PUBLISH_URL: 'https://test.pypi.org/legacy/'

release:
  extends: '.release-base'
  rules:
    # Do not run if source is not one of {api, push, web, webide}
    - if: >-
        $CI_PIPELINE_SOURCE != "api" &&
        $CI_PIPELINE_SOURCE != "push" &&
        $CI_PIPELINE_SOURCE != "web" &&
        $CI_PIPELINE_SOURCE != "webide"
      when: 'never'
    # Do not run if MR from a fork's 'main' branch
    - if: '$CI_OPEN_MERGE_REQUESTS != null || $CI_PROJECT_NAMESPACE != "sscherfke"'
      when: 'never'
    # Only run in tag pipelines
    - if: '$CI_COMMIT_TAG'
  environment:
    name: 'release'
    url: 'https://pypi.org/project/typed-settings/'
  variables:
    PYPI_OIDC_AUD: 'pypi'
    PYPI_OIDC_URL: 'https://pypi.org/_/oidc/mint-token'
    UV_PUBLISH_URL: 'https://upload.pypi.org/legacy/'

Metadata-Version: 2.4
Name: meteoplots
Version: 0.1.3
Summary: Fun√ß√µes para plotagem meteorol√≥gica
Author: Jose Flores
Description-Content-Type: text/markdown
Requires-Dist: xarray
Requires-Dist: matplotlib
Requires-Dist: cartopy==0.24.1
Requires-Dist: numpy==1.26.4
Requires-Dist: netcdf4
Requires-Dist: eccodes
Requires-Dist: geopandas==0.13.2
Requires-Dist: pandas
Requires-Dist: regionmask==0.9.0
Requires-Dist: Shapely==1.8.5.post1
Requires-Dist: fiona==1.9.6
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Requires-Dist: Pillow>=9.0.0; extra == "test"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: Pillow>=9.0.0; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"

# meteoplots

Biblioteca para gera√ß√£o de gr√°ficos meteorol√≥gicos (chuva, vento, SST, etc.) em Python.

---

## üì¶ Instala√ß√£o

Voc√™ pode instalar diretamente a partir do GitHub:

```bash
pip install git+https://github.com/josepaulo1233/meteoplots.git
```

```bash
pip install --upgrade --force-reinstall --no-cache-dir git+https://github.com/josepaulo1233/meteoplots.git@main
```

---

## üìä **Trabalhando com Dados xarray**

A biblioteca meteoplots trabalha exclusivamente com objetos **`xarray.DataArray`** para dados meteorol√≥gicos. O xarray √© a biblioteca padr√£o para manipula√ß√£o de dados cient√≠ficos multidimensionais em Python.

### O que √© xarray.DataArray?
Um `xarray.DataArray` √© uma estrutura de dados que combina:
- **Valores num√©ricos** (dados meteorol√≥gicos)
- **Coordenadas** (latitude, longitude, tempo, n√≠veis)
- **Metadados** (atributos, unidades, descri√ß√µes)

### Carregando Dados Meteorol√≥gicos
```python
import xarray as xr
import numpy as np

# M√©todo 1: Carregar de arquivo NetCDF
temperatura = xr.open_dataarray('temperatura_2m.nc')
precipitacao = xr.open_dataset('precipitacao.nc')['tp']  # Extrair vari√°vel espec√≠fica

# M√©todo 2: Criar dados sint√©ticos para testes
lat = np.arange(-35, 10, 0.5)
lon = np.arange(-75, -30, 0.5)
temp_data = 20 + 10 * np.random.random((len(lat), len(lon)))

temperatura = xr.DataArray(
    temp_data,
    coords=[('latitude', lat), ('longitude', lon)],
    attrs={'units': '¬∞C', 'long_name': 'Temperatura do Ar 2m'}
)

# M√©todo 3: Converter de outros formatos
import pandas as pd
# De pandas DataFrame para xarray
df = pd.read_csv('dados_estacoes.csv')
data_xr = df.set_index(['lat', 'lon']).to_xarray()
```

### Estrutura T√≠pica de Dados Meteorol√≥gicos
```python
# Visualizar estrutura do DataArray
print(temperatura)
# Output:
# <xarray.DataArray 'temperature' (latitude: 90, longitude: 90)>
# array([[15.2, 15.4, ...],
#        [16.1, 16.3, ...], ...])
# Coordinates:
#   * latitude   (latitude) float64 -35.0 -34.5 ... 9.0 9.5
#   * longitude  (longitude) float64 -75.0 -74.5 ... -30.5 -30.0
# Attributes:
#     units:      ¬∞C
#     long_name:  Temperatura do Ar 2m
```

### Verificando Dimens√µes e Coordenadas
```python
# Verificar dimens√µes necess√°rias para meteoplots
print("Dimens√µes:", list(temperatura.dims))  # Deve incluir 'latitude' e 'longitude'
print("Coordenadas:", list(temperatura.coords))
print("Shape:", temperatura.shape)

# Renomear dimens√µes se necess√°rio
if 'lat' in temperatura.dims:
    temperatura = temperatura.rename({'lat': 'latitude', 'lon': 'longitude'})
```

### Preparando Dados para M√∫ltiplos Plots
```python
# Para plot_multipletypes_from_xarray, organize como dicion√°rio
dados_multiplos = {
    'contourf': temperatura,      # Para plot preenchido
    'contour': pressao,           # Para linhas de contorno  
    'u_quiver': componente_u,     # Componente U do vento
    'v_quiver': componente_v      # Componente V do vento
}
```

### Dicas Importantes
- **Coordenadas obrigat√≥rias**: `latitude/lat` e `longitude/lon` ou 
- **Ordem das dimens√µes**: N√£o importa, o xarray gerencia automaticamente
- **Sistemas de coordenadas**: A biblioteca aceita lon 0-360¬∞ ou -180-180¬∞

---

## üéØ Fun√ß√µes Principais

### üìä **Fun√ß√µes de Plotagem**

#### `plot_contourf_from_xarray()`
Cria gr√°ficos preenchidos (contourf) a partir de dados xarray.

```python
from meteoplots.plots import plot_contourf_from_xarray

# Exemplo b√°sico
fig, ax = plot_contourf_from_xarray(
    xarray_data=temperatura_data,
    plot_var_colorbar='temperature',
    title='Temperatura do Ar - 2m',
    extent=[-60, -30, -35, 5],  # [lon_min, lon_max, lat_min, lat_max]
    figsize=(12, 8)
)
```

**Par√¢metros principais:**
- `xarray_data`: Dados em formato xarray DataArray
- `plot_var_colorbar`: Vari√°vel meteorol√≥gica para colorbar autom√°tica
- `dim_lat/dim_lon`: Nomes das dimens√µes de latitude/longitude
- `extent`: Extens√£o geogr√°fica [lon_min, lon_max, lat_min, lat_max]
- `normalize_colorbar`: Normaliza√ß√£o da barra de cores
- `shapefiles`: Lista de shapefiles para sobreposi√ß√£o

**Par√¢metros para an√°lise de bacias:**
- `shp_path_bacias`: Caminho para shapefile de bacias hidrogr√°ficas
- `add_values_from_shapefile`: Se `True`, adiciona valores m√©dios das bacias no mapa
- `basin_column_name`: Nome da coluna com identifica√ß√£o das bacias (padr√£o: 'Nome_Bacia')

#### Exemplo com An√°lise de Bacias
```python
# Exemplo com c√°lculo de valores m√©dios por bacia
fig, ax = plot_contourf_from_xarray(
    xarray_data=precipitacao_data,
    plot_var_colorbar='tp',
    title='Precipita√ß√£o por Bacia Hidrogr√°fica',
    extent=[-60, -30, -35, 5],
    
    # Par√¢metros para an√°lise de bacias
    shp_path_bacias='path/to/bacias_hidrograficas.shp',
    add_values_from_shapefile=True,
    basin_column_name='Nome_Bacia',  # Nome da coluna com ID das bacias
    
    figsize=(12, 8)
)
```

**Funcionalidade de Bacias:**
- Calcula automaticamente o valor m√©dio de cada bacia
- Adiciona anota√ß√µes no centr√≥ide de cada bacia
- √ötil para an√°lise hidrol√≥gica e climatol√≥gica regional

#### `plot_contour_from_xarray()`
Cria linhas de contorno a partir de dados xarray.

```python
from meteoplots.plots import plot_contour_from_xarray

# Linhas de contorno para press√£o
fig, ax = plot_contour_from_xarray(
    xarray_data=pressao_data,
    contour_levels=[np.arange(1000, 1020, 2)],
    colors_levels=['red'],
    title='Linhas de Press√£o (hPa)'
)
```

**Par√¢metros espec√≠ficos:**
- `contour_levels`: Lista de n√≠veis para contorno
- `colors_levels`: Cores das linhas de contorno
- `styles_levels`: Estilos das linhas

#### `plot_quiver_from_xarray()`
Cria gr√°ficos de vetores de vento (quiver plots).

```python
from meteoplots.plots import plot_quiver_from_xarray

# Vetores de vento
fig, ax = plot_quiver_from_xarray(
    xarray_u=u_component,
    xarray_v=v_component,
    quiver_skip=3,  # Skip pontos para visualiza√ß√£o mais limpa
    quiver_kwargs={'scale': 400, 'headwidth': 3},
    quiver_key={'length': 10, 'label': '10 m/s'}
)
```

**Par√¢metros espec√≠ficos:**
- `xarray_u/xarray_v`: Componentes U e V do vento
- `quiver_skip`: Subsampling para visualiza√ß√£o mais limpa
- `quiver_kwargs`: Par√¢metros do matplotlib quiver
- `quiver_key`: Configura√ß√£o da legenda de escala

#### `plot_streamplot_from_xarray()`
Cria linhas de fluxo (streamlines) para campos de vento.

```python
from meteoplots.plots import plot_streamplot_from_xarray

# Linhas de fluxo
fig, ax = plot_streamplot_from_xarray(
    xarray_u=u_component,
    xarray_v=v_component,
    stream_kwargs={'density': 2, 'color': 'blue', 'linewidth': 1.5},
    stream_color_by_magnitude=True,  # Cor baseada na magnitude
    stream_cmap='viridis'
)
```

**Par√¢metros espec√≠ficos:**
- `stream_kwargs`: Par√¢metros do matplotlib streamplot
- `stream_color_by_magnitude`: Colorir por magnitude do vento
- `stream_cmap`: Colormap para magnitude
- `stream_colorbar`: Mostrar barra de cores

#### `plot_multipletypes_from_xarray()`
**üåü Fun√ß√£o principal** - Combina m√∫ltiplos tipos de plot em um √∫nico gr√°fico.

```python
from meteoplots.plots import plot_multipletypes_from_xarray

# Exemplo completo combinando m√∫ltiplos plots
fig, ax = plot_multipletypes_from_xarray(
    xarray_data={
        'contourf': temperatura_data,
        'contour': pressao_data,
        'u_quiver': u_component,
        'v_quiver': v_component
    },
    plot_var_colorbar='temperature',
    plot_types=['contourf', 'contour', 'quiver', 'streamplot'],
    title='An√°lise Meteorol√≥gica Completa',
    extent=[-60, -30, -35, 5],
    figsize=(15, 10),
    
    # Par√¢metros espec√≠ficos para cada tipo
    contour_levels=[np.arange(1010, 1025, 2)],
    colors_levels=['black'],
    quiver_skip=4,
    streamplot_kwargs={'density': 1.5, 'color': 'white', 'alpha': 0.7}
)
```

**Tipos de plot dispon√≠veis:**
- `'contourf'`: Dados preenchidos com cores
- `'contour'`: Linhas de contorno
- `'quiver'`: Vetores de vento
- `'streamplot'`: Linhas de fluxo

### üî≤ **Fun√ß√£o Utilit√°ria**

#### `add_box_to_plot()`
Adiciona caixas retangulares (boxes) em plots existentes para destacar √°reas de interesse.

```python
from meteoplots.plots import add_box_to_plot

# Criar plot base
fig, ax = plot_contourf_from_xarray(
    xarray_data=temperatura_data,
    plot_var_colorbar='temperature',
    title='Temperatura com √Årea de Interesse'
)

# Adicionar caixas retangulares
extent_boxes = [
    [-55, -45, -25, -15],  # Box 1: [lon_min, lon_max, lat_min, lat_max]
    [-50, -40, -30, -20]   # Box 2: Outra √°rea de interesse
]

add_box_to_plot(
    ax=ax,
    extent_boxes=extent_boxes,
    edgecolor_box='red',
    linewidth_box=2,
    linestyle_box='--',
    alpha_box=0.8
)
```

**Par√¢metros:**
- `ax`: Eixo matplotlib onde adicionar as caixas
- `extent_boxes`: Lista de extens√µes geogr√°ficas [lon_min, lon_max, lat_min, lat_max]
- `edgecolor_box`: Cor da borda (padr√£o: 'black')
- `facecolor_box`: Cor de preenchimento (padr√£o: 'none')
- `linewidth_box`: Espessura da linha (padr√£o: 1)
- `linestyle_box`: Estilo da linha (padr√£o: '-')
- `alpha_box`: Transpar√™ncia (padr√£o: 1.0)

**Casos de uso t√≠picos:**
- Destacar regi√µes de estudo espec√≠ficas
- Marcar √°reas com eventos meteorol√≥gicos importantes
- Delimitar zonas de interesse em an√°lises clim√°ticas
- Sobrepor m√∫ltiplas √°reas para compara√ß√£o regional

---

## ‚öôÔ∏è **Par√¢metros Comuns**

### üó∫Ô∏è **Configura√ß√£o Geogr√°fica**
```python
# Configura√ß√µes de mapa
extent = [-60, -30, -35, 5]  # Brasil: [lon_min, lon_max, lat_min, lat_max]
central_longitude = 0  # Longitude central da proje√ß√£o
figsize = (12, 8)  # Tamanho da figura
```

### üé® **Personaliza√ß√£o Visual**
```python
# T√≠tulos e labels
title = 'Meu Gr√°fico Meteorol√≥gico'
title_size = 16
label_colorbar = 'Temperatura (¬∞C)'
colorbar_position = 'horizontal'  # ou 'vertical'

# Salvamento
savefigure = True
path_save = './figuras'
output_filename = 'meu_grafico.png'
```

### üõ°Ô∏è **Configura√ß√£o de Colorbars**
```python
# M√©todo 1: Usar colorbar pr√©-configurada (recomendado)
plot_contourf_from_xarray(data, plot_var_colorbar='tp')

# M√©todo 2: Configura√ß√£o manual com levels e colors
plot_contourf_from_xarray(
    data, 
    levels=[0, 5, 10, 15, 20], 
    colors=['blue', 'green', 'yellow', 'red']
)

# M√©todo 3: Configura√ß√£o manual com levels e cmap
plot_contourf_from_xarray(
    data, 
    levels=[0, 5, 10, 15, 20], 
    cmap='viridis'
)

# ‚ùå Erro: sem plot_var_colorbar nem configura√ß√£o manual
# plot_contourf_from_xarray(data)  # Gerar√° ValueError
```

**Importante:** Se `plot_var_colorbar=None`, voc√™ **deve** fornecer:
- `levels` **E** `colors`, ou
- `levels` **E** `cmap`

### üìÇ **Shapefiles**
```python
# Adicionar contornos de pa√≠ses/estados
shapefiles = [
    'path/to/brazil_states.shp',
    'path/to/south_america.shp'
]
```

---

## üí° **Exemplos Pr√°ticos**

### Exemplo 1: Temperatura com Contornos de Press√£o
```python
import xarray as xr
from meteoplots.plots import plot_multipletypes_from_xarray

# Carregar dados
temp_data = xr.open_dataarray('temperatura.nc')
pres_data = xr.open_dataarray('pressao.nc')

# Plotar
plot_multipletypes_from_xarray(
    xarray_data={'contourf': temp_data, 'contour': pres_data},
    plot_var_colorbar='temperature',
    plot_types=['contourf', 'contour'],
    title='Temperatura + Press√£o',
    extent=[-75, -30, -35, 10],
    contour_levels=[np.arange(1000, 1030, 4)],
    colors_levels=['black']
)
```

### Exemplo 2: Campo de Vento Completo
```python
# Dados de vento
u_wind = xr.open_dataarray('u_component.nc')
v_wind = xr.open_dataarray('v_component.nc')

# Plotar vetores e linhas de fluxo
plot_multipletypes_from_xarray(
    xarray_data={'u_quiver': u_wind, 'v_quiver': v_wind},
    plot_types=['quiver', 'streamplot'],
    title='Campo de Vento - 850 hPa',
    quiver_skip=5,
    streamplot_kwargs={'density': 2, 'color': 'red', 'alpha': 0.6}
)
```

### Exemplo 3: An√°lise de Bacias Hidrogr√°ficas
```python
from meteoplots.plots import plot_contourf_from_xarray
import xarray as xr

# Carregar dados de precipita√ß√£o
precip_data = xr.open_dataarray('precipitacao_mensal.nc')

# An√°lise por bacias com valores m√©dios
fig, ax = plot_contourf_from_xarray(
    xarray_data=precip_data,
    plot_var_colorbar='tp',  # Colorbar de precipita√ß√£o
    title='Precipita√ß√£o M√©dia por Bacia Hidrogr√°fica',
    extent=[-75, -30, -35, 10],  # Brasil
    
    # Configura√ß√£o de bacias
    shp_path_bacias='data/bacias_hidrograficas_brasil.shp',
    add_values_from_shapefile=True,
    basin_column_name='Nome_Bacia',
    
    # Sobreposi√ß√£o de estados
    shapefiles=['data/estados_brasil.shp'],
    
    # Configura√ß√µes visuais
    colorbar_position='horizontal',
    label_colorbar='Precipita√ß√£o (mm/m√™s)',
    figsize=(15, 10)
)
```

### Exemplo 4: Usando Fun√ß√µes Utilit√°rias
```python
from meteoplots.plots import plot_contourf_from_xarray
from meteoplots.colorbars import custom_colorbar
from meteoplots.utils.titles import gerar_titulo
import datetime

# Carregar dados
temp_data = xr.open_dataarray('temperatura.nc')

# Gerar t√≠tulo profissional
titulo = gerar_titulo(
    titulo_principal="Temperatura do Ar",
    nivel="850 hPa",
    unidade="¬∞C",
    modelo="GFS",
    data=datetime.datetime(2024, 1, 15, 12, 0),
    subtitulo="An√°lise"
)

# Verificar colorbars dispon√≠veis
custom_colorbar(help=True)

# Plotar com colorbar autom√°tica
plot_contourf_from_xarray(
    xarray_data=temp_data,
    plot_var_colorbar='temp850',  # Usar colorbar pr√©-configurada
    title=titulo,
    extent=[-60, -30, -35, 5],
    label_colorbar='Temperatura (¬∞C)'
)
```

---

## üåä **An√°lise de Bacias Hidrogr√°ficas**

A fun√ß√£o `plot_contourf_from_xarray()` inclui funcionalidade especial para an√°lise de bacias hidrogr√°ficas, calculando automaticamente valores m√©dios por bacia e exibindo-os no mapa.

### Como Funciona
```python
# Ativar an√°lise de bacias
plot_contourf_from_xarray(
    xarray_data=data,
    plot_var_colorbar='tp',
    
    # Par√¢metros para bacias
    shp_path_bacias='caminho/para/bacias.shp',
    add_values_from_shapefile=True,
    basin_column_name='Nome_Bacia'  # Coluna com ID das bacias
)
```

### Funcionalidades da An√°lise de Bacias
- **C√°lculo autom√°tico**: Valor m√©dio espacial para cada bacia
- **Anota√ß√µes no mapa**: Valores exibidos no centr√≥ide de cada bacia
- **Flexibilidade**: Funciona com qualquer shapefile de pol√≠gonos
- **Precis√£o**: Considera apenas pixels dentro de cada bacia

### Requisitos do Shapefile
- **Geometria**: Pol√≠gonos representando as bacias
- **Coluna de identifica√ß√£o**: Nome ou c√≥digo √∫nico para cada bacia
- **Sistema de coordenadas**: Preferencialmente EPSG:4326 (lat/lon)

### Exemplo Pr√°tico
```python
# An√°lise de precipita√ß√£o por sub-bacias do S√£o Francisco
plot_contourf_from_xarray(
    xarray_data=precipitacao_mensal,
    plot_var_colorbar='tp',
    title='Precipita√ß√£o - Sub-bacias do Rio S√£o Francisco',
    
    # Configura√ß√£o das bacias
    shp_path_bacias='dados/sub_bacias_sao_francisco.shp',
    add_values_from_shapefile=True,
    basin_column_name='CODIGO_BACIA',
    
    # Regi√£o de interesse
    extent=[-50, -37, -18, -8],
    label_colorbar='Precipita√ß√£o (mm/m√™s)'
)
```

### Casos de Uso
- **Hidrologia**: An√°lise de precipita√ß√£o por bacia
- **Planejamento h√≠drico**: Distribui√ß√£o de recursos
- **Climatologia regional**: Padr√µes por regi√£o
- **Agricultura**: Monitoramento de chuva por fazenda/regi√£o

---

## üé® **Colorbars Autom√°ticas**

A biblioteca inclui colorbars pr√©-configuradas para vari√°veis meteorol√≥gicas atrav√©s da fun√ß√£o `custom_colorbar()`.

### `custom_colorbar()`
Gera automaticamente n√≠veis, cores e colormaps para vari√°veis meteorol√≥gicas espec√≠ficas.

```python
from meteoplots.colorbars import custom_colorbar

# Obter configura√ß√£o de colorbar para precipita√ß√£o
levels, colors, cmap, cbar_ticks = custom_colorbar('tp')

# Ver todas as vari√°veis dispon√≠veis
custom_colorbar(help=True)
```

**Vari√°veis dispon√≠veis incluem:**
- **Precipita√ß√£o**: `tp`, `chuva_ons`, `chuva_pnmm`, `tp_anomalia`, `tp_anomalia_mensal`
- **Temperatura**: `temp850`, `temp_anomalia`
- **Vento**: `wind200`, `mag_vento100`, `mag_vento100_anomalia`
- **Press√£o**: `pnmm_vento`, `geop_500`, `geop_500_anomalia`
- **Oceanografia**: `sst_anomalia`
- **Campos din√¢micos**: `psi`, `chi`, `vorticidade`, `divergencia850`
- **Outros**: `olr`, `ivt`, `frentes`, `probabilidade`, `geada-inmet`

**Par√¢metros:**
- `variavel_plotagem`: Nome da vari√°vel meteorol√≥gica
- `help`: Se `True`, mostra todas as vari√°veis dispon√≠veis com preview visual

**Retorna:**
- `levels`: N√≠veis para contorno/colorbar
- `colors`: Lista de cores (se aplic√°vel)
- `cmap`: Colormap do matplotlib
- `cbar_ticks`: Posi√ß√µes dos ticks na colorbar

---

## üìù **Gera√ß√£o de T√≠tulos**

### `gerar_titulo()`
Gera t√≠tulos formatados e informativos para gr√°ficos meteorol√≥gicos.

```python
from meteoplots.utils.titles import gerar_titulo

# T√≠tulo simples
titulo = gerar_titulo(
    titulo_principal="Temperatura do Ar",
    nivel="2m",
    unidade="¬∞C"
)

# T√≠tulo completo com metadados
titulo = gerar_titulo(
    titulo_principal="Precipita√ß√£o Acumulada",
    subtitulo="Previs√£o 24h",
    data="15/01/2024 12:00",
    nivel="Superf√≠cie", 
    unidade="mm",
    modelo="GFS",
    fonte="NOAA"
)
```

**Par√¢metros principais:**
- `titulo_principal`: T√≠tulo principal (ex: "Temperatura do Ar")
- `subtitulo`: Informa√ß√£o adicional
- `data`: Data/hora (string ou datetime)
- `nivel`: N√≠vel atmosf√©rico (ex: "850 hPa", "Superf√≠cie")
- `unidade`: Unidade de medida (ex: "¬∞C", "mm/h")
- `modelo`: Nome do modelo (ex: "GFS", "ERA5")
- `fonte`: Fonte dos dados
- `bold_subtitle`: Formata√ß√£o em negrito (LaTeX)
- `include_datetime`: Incluir timestamp de gera√ß√£o

**Exemplo de sa√≠da:**
```
Temperatura do Ar - 2m (¬∞C)
ùêÄùêß√°ùê•ùê¢ùê¨ùêû\ |\ ùêåùê®ùêùùêûùê•ùê®:\ ùêÜùêÖùêí\ |\ ùêÉùêöùê≠ùêö:\ ùüèùüì/ùüéùüè/ùüêùüéùüêùüí\ |\ ùêÜùêûùê´ùêöùêùùê®\ ùêûùê¶:\ ùüèùüñ/ùüéùüó/ùüêùüéùüêùüì
```

**Caracter√≠sticas:**
- **Formata√ß√£o autom√°tica**: LaTeX para texto em negrito
- **Timestamp autom√°tico**: Data/hora de gera√ß√£o
- **Flex√≠vel**: Combine apenas os par√¢metros necess√°rios
- **Padr√£o profissional**: Adequado para relat√≥rios cient√≠ficos

---

# Text Annotation Feature Documentation

## Overview
The meteoplots library now supports text annotations on all plot functions. You can add custom text labels to your meteorological plots with flexible positioning and styling options.

## Usage

### Basic Text Annotations

```python
import numpy as np
import xarray as xr
from meteoplots.plots import plot_contourf_from_xarray

# Create sample data
lon = np.linspace(-10, 10, 20)
lat = np.linspace(30, 50, 15)
temperature = 20 + 5 * np.random.randn(len(lat), len(lon))

temp_data = xr.DataArray(
    temperature,
    coords=[('latitude', lat), ('longitude', lon)],
    attrs={'units': '¬∞C'}
)

# Define text annotations
texts = [
    {'text': 'High Temperature Zone', 'lon': 5, 'lat': 40},
    {'text': 'Low Temperature Zone', 'lon': -5, 'lat': 35}
]

# Create plot with text annotations
fig, ax = plot_contourf_from_xarray(
    temp_data,
    plot_var_colorbar='temperature',
    title='Temperature Analysis with Annotations',
    texts=texts  # Add this parameter
)
```

### Advanced Styling Options

```python
# Text annotations with advanced styling
texts = [
    {
        'text': 'Critical Area',
        'lon': 0, 'lat': 40,
        'fontsize': 14,
        'color': 'red',
        'weight': 'bold',
        'ha': 'center',
        'va': 'center',
        'bbox': {
            'boxstyle': 'round,pad=0.3',
            'facecolor': 'yellow',
            'alpha': 0.7,
            'edgecolor': 'black'
        }
    },
    {
        'text': 'Station A',
        'lon': -3, 'lat': 45,
        'fontsize': 12,
        'color': 'blue',
        'rotation': 45,
        'alpha': 0.8
    }
]
```

### Coordinate Systems

The text annotation feature supports multiple coordinate naming conventions:

1. **Longitude/Latitude**: `'lon'`, `'lat'`
2. **Full names**: `'longitude'`, `'latitude'`  
3. **Cartesian**: `'x'`, `'y'`

```python
# Different coordinate systems
texts = [
    {'text': 'Point 1', 'lon': 5, 'lat': 40},           # lon/lat
    {'text': 'Point 2', 'longitude': -5, 'latitude': 35}, # full names
    {'text': 'Point 3', 'x': 0, 'y': 42}                # x/y
]
```

### Available Styling Parameters

- **`fontsize`**: Text size (default: 12)
- **`color`**: Text color (default: 'black')
- **`weight`** or **`fontweight`**: Font weight ('normal', 'bold', etc.)
- **`ha`**: Horizontal alignment ('left', 'center', 'right')
- **`va`**: Vertical alignment ('top', 'center', 'bottom')
- **`rotation`**: Text rotation angle in degrees
- **`alpha`**: Text transparency (0-1)
- **`bbox`**: Background box styling (dictionary)
- **`style`**: Font style ('normal', 'italic', 'oblique')
- **`family`**: Font family ('serif', 'sans-serif', 'monospace')

### Supported Plot Functions

Text annotations work with all meteoplots functions:

- `plot_contourf_from_xarray()`
- `plot_contour_from_xarray()`
- `plot_quiver_from_xarray()`
- `plot_streamplot_from_xarray()`
- `plot_multipletypes_from_xarray()`

### Example: Weather Analysis with Annotations

```python
# Complete example for weather analysis
texts = [
    {
        'text': 'High Pressure\n1025 hPa',
        'lon': -2, 'lat': 45,
        'fontsize': 11,
        'color': 'darkred',
        'weight': 'bold',
        'ha': 'center',
        'bbox': {
            'boxstyle': 'round,pad=0.4',
            'facecolor': 'lightblue',
            'alpha': 0.8
        }
    },
    {
        'text': 'Low Pressure\n995 hPa',
        'lon': 7, 'lat': 38,
        'fontsize': 11,
        'color': 'darkblue',
        'weight': 'bold',
        'ha': 'center',
        'bbox': {
            'boxstyle': 'round,pad=0.4',
            'facecolor': 'lightcoral',
            'alpha': 0.8
        }
    },
    {
        'text': 'Cold Front',
        'lon': 0, 'lat': 35,
        'fontsize': 10,
        'color': 'blue',
        'rotation': -30,
        'weight': 'bold'
    }
]

fig, ax = plot_contourf_from_xarray(
    pressure_data,
    plot_var_colorbar='slp',
    title='Synoptic Analysis with Pressure Systems',
    texts=texts,
    figsize=(12, 8)
)
```

## Notes

- Text coordinates use the same coordinate system as your data
- All text is rendered using Cartopy's PlateCarree projection by default
- The `bbox` parameter accepts any matplotlib bbox properties
- Text annotations are added after the main plot but before saving
- Multiple text annotations can be added in a single plot

## Error Handling

If required coordinates are missing, a warning will be printed:
```
Warning: Text annotation missing required keys (x,y or lon,lat or longitude,latitude) and text: {...}
```

The missing annotation will be skipped, and the rest of the plot will render normally.

## üß™ **Testes**

A biblioteca meteoplots inclui uma su√≠te abrangente de testes para garantir qualidade e confiabilidade.

### Estrutura dos Testes
```
tests/
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ conftest.py           # Fixtures compartilhadas
‚îú‚îÄ‚îÄ test_colorbars.py     # Testes para colorbars autom√°ticas
‚îú‚îÄ‚îÄ test_plots.py         # Testes para fun√ß√µes de plotagem
‚îú‚îÄ‚îÄ test_utils.py         # Testes para utilit√°rios
‚îî‚îÄ‚îÄ test_integration.py   # Testes de integra√ß√£o
```

### Instala√ß√£o das Depend√™ncias de Teste
```bash
# Instalar depend√™ncias b√°sicas + testes
pip install -e ".[test]"

# Ou instalar depend√™ncias de desenvolvimento
pip install -e ".[dev]"
```

### Executando os Testes

#### M√©todo 1: Script de Teste Simples
```bash
# Executar todos os testes
python run_tests.py

# Executar com cobertura
python run_tests.py --coverage

# Executar apenas testes r√°pidos
python run_tests.py --fast

# Executar com sa√≠da detalhada
python run_tests.py --verbose
```

#### M√©todo 2: Pytest Direto
```bash
# Todos os testes
pytest

# Com cobertura
pytest --cov=meteoplots --cov-report=html

# Testes espec√≠ficos
pytest tests/test_colorbars.py
pytest tests/test_plots.py::TestPlotContourfFromXarray

# Pular testes lentos
pytest -m "not slow"
```

### Tipos de Teste

#### üîß **Testes Unit√°rios**
- **Colorbars**: Valida√ß√£o de configura√ß√µes, formatos, compatibilidade
- **Plots**: Cada fun√ß√£o de plotagem individualmente
- **Utils**: C√°lculos de bacia, gera√ß√£o de t√≠tulos, cria√ß√£o de pain√©is

#### üîó **Testes de Integra√ß√£o**
- **Workflows completos**: An√°lise meteorol√≥gica end-to-end
- **An√°lise de bacias**: Integra√ß√£o com shapefiles
- **Gera√ß√£o de pain√©is**: Combina√ß√£o de m√∫ltiplas figuras
- **Cen√°rios reais**: Casos de uso t√≠picos

#### üìä **Cobertura de C√≥digo**
```bash
# Gerar relat√≥rio de cobertura
pytest --cov=meteoplots --cov-report=html

# Visualizar no navegador
open htmlcov/index.html  # Linux/Mac
start htmlcov/index.html # Windows
```

### Fixtures Dispon√≠veis

#### üìà **Dados de Teste**
- `sample_temperature_data`: Dados de temperatura sint√©ticos
- `sample_precipitation_data`: Dados de precipita√ß√£o sint√©ticos 
- `sample_pressure_data`: Dados de press√£o sint√©ticos
- `sample_wind_components`: Componentes U/V de vento
- `sample_shapefile`: Shapefile tempor√°rio para testes

#### üõ†Ô∏è **Utilit√°rios**
- `test_output_dir`: Diret√≥rio tempor√°rio para sa√≠das
- `matplotlib_backend`: Backend Agg para testes sem display
- `data_generator`: Gerador de dados customizados

### Exemplo de Teste Personalizado
```python
import pytest
from meteoplots.plots import plot_contourf_from_xarray

def test_custom_scenario(sample_temperature_data, test_output_dir):
    """Teste para cen√°rio espec√≠fico."""
    
    fig, ax = plot_contourf_from_xarray(
        xarray_data=sample_temperature_data,
        plot_var_colorbar='temperature',
        title='Teste Customizado',
        savefigure=True,
        path_save=test_output_dir,
        output_filename='test_custom'
    )
    
    # Verifica√ß√µes
    assert fig is not None
    assert len(ax.collections) > 0
    
    # Verificar arquivo salvo
    import os
    output_file = os.path.join(test_output_dir, 'test_custom.png')
    assert os.path.exists(output_file)
```

### Configura√ß√£o de CI/CD
```yaml
# .github/workflows/tests.yml
name: Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Run tests
      run: pytest --cov=meteoplots --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
```

### Benchmarks de Performance
```bash
# Testar performance com datasets maiores
pytest tests/test_integration.py::TestPerformanceIntegration -v

# Profile de mem√≥ria (requer memory_profiler)
python -m memory_profiler tests/profile_memory.py
```

### Testes de Regress√£o
```bash
# Verificar compatibilidade com vers√µes anteriores
pytest tests/test_regression.py

# Comparar sa√≠das visuais
pytest tests/test_visual_regression.py --baseline-dir=tests/baseline/
```

### Dicas para Desenvolvedores

#### üêõ **Debug de Testes**
```bash
# Executar com pdb
pytest --pdb

# Manter arquivos tempor√°rios para inspe√ß√£o
pytest --basetemp=debug_temp

# Logs detalhados
pytest -v -s --log-cli-level=DEBUG
```

#### üìù **Adicionando Novos Testes**
1. **Use fixtures existentes** sempre que poss√≠vel
2. **Isole testes** - cada teste deve ser independente
3. **Mock opera√ß√µes complexas** (I/O, geospatial operations)
4. **Teste casos extremos** e condi√ß√µes de erro
5. **Documente comportamentos esperados**

#### üéØ **Melhores Pr√°ticas**
- Testes devem ser **r√°pidos** (< 1s por teste unit√°rio)
- Use **nomes descritivos** para fun√ß√µes de teste
- **Asserte comportamentos espec√≠ficos**, n√£o apenas aus√™ncia de erros
- **Cleanup autom√°tico** de arquivos tempor√°rios
- **Mock depend√™ncias externas** (APIs, arquivos grandes)

---

## üìö **Depend√™ncias**

- `matplotlib`
- `cartopy` == 0.24.1 (vers√£o necess√°rio para An√°lise de Bacias Hidrogr√°ficas)
- `xarray`
- `numpy` == 1.26.4 (vers√£o necess√°ria para An√°lise de Bacias Hidrogr√°ficas)
- `geopandas` == 0.13.2 (vers√£o necess√°ria para An√°lise de Bacias Hidrogr√°ficas)
- `regionmask` == 1.8.5.post1 (vers√£o necess√°ria para An√°lise de Bacias Hidrogr√°ficas)
- `Shapely` == 0.9.0 (vers√£o necess√°ria para An√°lise de Bacias Hidrogr√°ficas)
- `fiona` == 1.9.6 (vers√£o necess√°ria para An√°lise de Bacias Hidrogr√°ficas)

---

## ü§ù **Contribui√ß√µes**

Contribui√ß√µes s√£o bem-vindas! Por favor, abra issues ou pull requests no reposit√≥rio do GitHub.

---

## üìÑ **Licen√ßa**

Este projeto est√° licenciado sob a licen√ßa MIT.

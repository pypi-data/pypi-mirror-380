"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–µ—Ç–µ–π
"""

from typing import Optional, List, Dict
import traceback


class PyLiteError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ PyLite"""
    
    def __init__(self, message: str, line: int = 0, column: int = 0):
        self.message = message
        self.line = line
        self.column = column
        super().__init__(self.message)


class LexerError(PyLiteError):
    """–û—à–∏–±–∫–∞ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    pass


class ParserError(PyLiteError):
    """–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    pass


class RuntimeError(PyLiteError):
    """–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    pass


class ValidationError(PyLiteError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π PyLite"""
    pass


class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_messages = self._init_error_messages()
    
    def _init_error_messages(self) -> Dict[str, str]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
        return {
            # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            'unclosed_string': "–û–π! –¢—ã –∑–∞–±—ã–ª –∑–∞–∫—Ä—ã—Ç—å –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {line}.",
            'invalid_character': "–°—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª '{char}' –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ –æ–ø–µ—á–∞—Ç–∫–∞ –ª–∏ —ç—Ç–æ?",
            'invalid_number': "–ß–∏—Å–ª–æ '{value}' –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
            
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            'missing_colon': "–¢—ã –∑–∞–±—ã–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ ':' –ø–æ—Å–ª–µ {keyword} –≤ —Å—Ç—Ä–æ–∫–µ {line}.",
            'missing_paren': "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ ')' –≤ —Å—Ç—Ä–æ–∫–µ {line}.",
            'missing_bracket': "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏ ']' –≤ —Å—Ç—Ä–æ–∫–µ {line}.",
            'missing_brace': "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Ñ–∏–≥—É—Ä–Ω–æ–π —Å–∫–æ–±–∫–∏ '}}' –≤ —Å—Ç—Ä–æ–∫–µ {line}.",
            'unexpected_token': "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '{token}' –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ!",
            'invalid_indentation': "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –≤ —Å—Ç—Ä–æ–∫–µ {line}. –í Python –æ—Ç—Å—Ç—É–ø—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã!",
            
            # –û—à–∏–±–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            'undefined_variable': "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –¢—ã –∑–∞–±—ã–ª –µ—ë —Å–æ–∑–¥–∞—Ç—å?",
            'division_by_zero': "–ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å! –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —ç—Ç–æ –Ω–µ –ª—é–±–∏—Ç.",
            'type_error': "–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '{operation}' —Å —Ç–∏–ø–∞–º–∏ {type1} –∏ {type2}.",
            'index_error': "–ò–Ω–¥–µ–∫—Å {index} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–ª–∏–Ω–æ–π {length}.",
            'key_error': "–ö–ª—é—á–∞ '{key}' –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.",
            'attribute_error': "–£ –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞ {type} –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ '{attr}'.",
            'function_not_found': "–§—É–Ω–∫—Ü–∏—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –¢—ã –µ—ë –æ–ø—Ä–µ–¥–µ–ª–∏–ª?",
            'wrong_arguments': "–§—É–Ω–∫—Ü–∏–∏ '{name}' –Ω—É–∂–Ω–æ {expected} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∞ —Ç—ã –¥–∞–ª {actual}.",
            
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            'too_deep_nesting': "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–µ 3). –ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥.",
            'line_too_long': "–°—Ç—Ä–æ–∫–∞ {line} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –µ—ë –Ω–∞ —á–∞—Å—Ç–∏.",
            'too_many_lines': "–í –ø—Ä–æ–≥—Ä–∞–º–º–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 500). –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –µ—ë –∫–æ—Ä–æ—á–µ.",
        }
    
    def format_error(self, error: PyLiteError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if isinstance(error, LexerError):
            return self._format_lexer_error(error)
        elif isinstance(error, ParserError):
            return self._format_parser_error(error)
        elif isinstance(error, RuntimeError):
            return self._format_runtime_error(error)
        elif isinstance(error, ValidationError):
            return self._format_validation_error(error)
        else:
            return f"–û—à–∏–±–∫–∞: {error.message}"
    
    def _format_lexer_error(self, error: LexerError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–µ–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
        return f"üìù {error.message}"
    
    def _format_parser_error(self, error: ParserError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
        return f"üîç {error.message}"
    
    def _format_runtime_error(self, error: RuntimeError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"üöÄ {error.message}"
    
    def _format_validation_error(self, error: ValidationError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return f"üìè {error.message}"
    
    def create_friendly_message(self, error_type: str, **kwargs) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        template = self.error_messages.get(error_type, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_type}")
        try:
            return template.format(**kwargs)
        except KeyError as e:
            return f"–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ: {e}"
    
    def handle_exception(self, exception: Exception, source_code: str = "") -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if isinstance(exception, PyLiteError):
            return self.format_error(exception)
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Python
            error_type = type(exception).__name__
            error_message = str(exception)
            first_line = source_code.split('\n')[0].strip()
            if first_line:
                return f"ÔøΩ –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {error_message}\n   –≤ –∫–æ–¥–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–º—Å—è —Å: {first_line}"
            else:
                return f"üí• –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {error_message}"

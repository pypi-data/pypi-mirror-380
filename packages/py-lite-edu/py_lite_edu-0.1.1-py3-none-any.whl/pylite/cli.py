"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è PyLite
"""

import sys
import os
import argparse
from typing import Optional, List
from .lexer import Lexer
from .parser import Parser
from .interpreter import Interpreter
from .error_handler import ErrorHandler, PyLiteError


class REPL:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ PyLite (Read-Eval-Print Loop)"""
    
    def __init__(self, mode: str = 'basic'):
        self.interpreter = Interpreter(mode)
        self.error_handler = ErrorHandler()
        self.mode = mode
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        print("üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PyLite!")
        print(f"–†–µ–∂–∏–º: {'–±–∞–∑–æ–≤—ã–π' if self.mode == 'basic' else '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π'}")
        print("–ù–∞–±–µ—Ä–∏—Ç–µ 'quit()' –∏–ª–∏ 'exit()' –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                line = input("pylite> ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
                if line.strip().lower() in ['quit()', 'exit()', 'quit', 'exit']:
                    print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                    break
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not line.strip():
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
                result = self._execute_line(line)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ None
                if result is not None:
                    print(result)
                    
            except KeyboardInterrupt:
                print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ quit() –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
            except EOFError:
                print("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
    
    def _execute_line(self, line: str) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞"""
        try:
            # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            lexer = Lexer(line)
            tokens = lexer.tokenize()
            
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            parser = Parser(tokens)
            program = parser.parse()
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            result = self.interpreter.interpret(program)
            
            return result
            
        except PyLiteError as e:
            return self.error_handler.format_error(e)
        except Exception as e:
            return self.error_handler.handle_exception(e, line)


class PyLiteRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è .pyl —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, mode: str = 'basic'):
        self.interpreter = Interpreter(mode)
        self.error_handler = ErrorHandler()
        self.mode = mode
    
    def run_file(self, filename: str) -> int:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–π–ª .pyl"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(filename):
                print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return 1
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(filename, 'r', encoding='utf-8') as f:
                source_code = f.read()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            self._execute_code(source_code)
            return 0
            
        except PyLiteError as e:
            print(self.error_handler.format_error(e))
            return 1
        except Exception as e:
            print(self.error_handler.handle_exception(e, source_code))
            return 1
    
    def _execute_code(self, source_code: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"""
        # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        lexer = Lexer(source_code)
        tokens = lexer.tokenize()
        
        # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        parser = Parser(tokens)
        program = parser.parse()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = self.interpreter.interpret(program)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description='PyLite - —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π Python –¥–ª—è –¥–µ—Ç–µ–π',
        prog='pylite'
    )
    
    parser.add_argument(
        'file',
        nargs='?',
        help='–§–∞–π–ª .pyl –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è REPL)'
    )
    
    parser.add_argument(
        '--mode',
        choices=['basic', 'extended'],
        default='basic',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: basic (–±–∞–∑–æ–≤—ã–π) –∏–ª–∏ extended (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='PyLite 0.1.0'
    )
    
    args = parser.parse_args()
    
    if args.file:
        # –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        runner = PyLiteRunner(args.mode)
        return runner.run_file(args.file)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (REPL)
        repl = REPL(args.mode)
        repl.run()
        return 0


if __name__ == '__main__':
    sys.exit(main())

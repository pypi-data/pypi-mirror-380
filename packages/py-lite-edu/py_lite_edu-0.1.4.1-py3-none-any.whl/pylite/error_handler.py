"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–µ—Ç–µ–π
"""

from typing import Optional, List, Dict
import traceback


class PyLiteError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ PyLite"""
    
    def __init__(self, message: str, line: int = 0, column: int = 0):
        self.message = message
        self.line = line
        self.column = column
        super().__init__(self.message)


class LexerError(PyLiteError):
    """–û—à–∏–±–∫–∞ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    pass


class ParserError(PyLiteError):
    """–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    pass


class RuntimeError(PyLiteError):
    """–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    pass


class ValidationError(PyLiteError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π PyLite"""
    pass


class ErrorHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.error_messages = self._init_error_messages()
    
    def _init_error_messages(self) -> Dict[str, str]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
        return {
            # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            'unclosed_string': "–û–π! –ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–∞–±—ã–ª –∑–∞–∫—Ä—ã—Ç—å –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–≤–æ–π —Ç–µ–∫—Å—Ç. ‚úçÔ∏è",
            'invalid_character': "–•–º... –Ø –Ω–∞—à—ë–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª '{char}' –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —ç—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∞? ü§î",
            'invalid_number': "–ö–∞–∂–µ—Ç—Å—è, —á–∏—Å–ª–æ '{value}' –≤ —Å—Ç—Ä–æ–∫–µ {line} –Ω–∞–ø–∏—Å–∞–Ω–æ —Å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123 –∏–ª–∏ 3.14. üî¢",
            
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
            'missing_colon': "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –¢—ã –∑–∞–±—ã–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ ':' –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '{keyword}' –≤ —Å—Ç—Ä–æ–∫–µ {line}. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ–º–∞–Ω–¥. üéØ",
            'missing_paren': "–ö–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ ')'. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫—É {line} –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ. ü§ù",
            'missing_bracket': "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–∏ ']'. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫—É {line}. üì¶",
            'missing_brace': "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Ñ–∏–≥—É—Ä–Ω–æ–π —Å–∫–æ–±–∫–∏ '}}'. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä–æ–∫—É {line}. üè∫",
            'unexpected_token': "–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —É–≤–∏–¥–µ—Ç—å '{token}' –≤ —Å—Ç—Ä–æ–∫–µ {line}. –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ, –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª? üßê",
            'invalid_indentation': "–û–π, –æ—Ç—Å—Ç—É–ø—ã! –í —Å—Ç—Ä–æ–∫–µ {line} —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏. –í PyLite –æ–Ω–∏ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞. üìè",
            
            # –û—à–∏–±–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            'undefined_variable': "–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∏–º–µ–Ω–µ–º '{name}'. –¢—ã —Ç–æ—á–Ω–æ –µ—ë —Å–æ–∑–¥–∞–ª —Å –ø–æ–º–æ—â—å—é –∑–Ω–∞–∫–∞ '='? üîç",
            'division_by_zero': "–û–≥–æ! –¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å, –∞ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç '–Ω–µ—Ç-–Ω–µ—Ç-–Ω–µ—Ç'! üö´",
            'type_error': "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Å–¥–µ–ª–∞—Ç—å '{operation}' —Å –≤–µ—â–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã, –∫–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–∂–∏—Ç—å —è–±–ª–æ–∫–æ –∏ —á–∏—Å–ª–æ. üçé + üî¢ = ?",
            'index_error': "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –¥–æ—Å—Ç–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É {index}, –Ω–æ –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ–≥–æ {length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–º–Ω–∏, —á—Ç–æ —Å—á—ë—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0! üìä",
            'key_error': "–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –∫–ª—é—á–∞ '{key}'. –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –∫–ª—é—á, –∏ –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ. üîë",
            'attribute_error': "–£ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ '{attr}'. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ? üè∑Ô∏è",
            'function_not_found': "–Ø –Ω–µ –Ω–∞—à—ë–ª —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º '{name}'. –¢—ã —Ç–æ—á–Ω–æ –µ—ë —Å–æ–∑–¥–∞–ª —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞ 'def'? üßë‚Äçüíª",
            'wrong_arguments': "–§—É–Ω–∫—Ü–∏—è '{name}' –∂–¥—ë—Ç {expected} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∞ —Ç—ã –ø–µ—Ä–µ–¥–∞–ª {actual}. –ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ. üì¶",
            
            # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            'too_deep_nesting': "–£—Ö —Ç—ã, –∫–∞–∫ –≥–ª—É–±–æ–∫–æ! –£ —Ç–µ–±—è –±–æ–ª—å—à–µ 3 —É—Ä–æ–≤–Ω–µ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ–Ω—è—Ç–Ω–µ–µ. üå≥",
            'line_too_long': "–°—Ç—Ä–æ–∫–∞ {line} –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å –µ—ë –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫, —Ç–∞–∫ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ —á–∏—Ç–∞—Ç—å. ‚úÇÔ∏è",
            'too_many_lines': "–¢–≤–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–ª–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (–±–æ–ª—å—à–µ 500 —Å—Ç—Ä–æ–∫)! –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ—ë –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å. üìú",
        }
    
    def format_error(self, error: PyLiteError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if isinstance(error, LexerError):
            return self._format_lexer_error(error)
        elif isinstance(error, ParserError):
            return self._format_parser_error(error)
        elif isinstance(error, RuntimeError):
            return self._format_runtime_error(error)
        elif isinstance(error, ValidationError):
            return self._format_validation_error(error)
        else:
            return f"–û—à–∏–±–∫–∞: {error.message}"
    
    def _format_lexer_error(self, error: LexerError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–µ–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
        return f"üìù {error.message}"
    
    def _format_parser_error(self, error: ParserError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
        return f"üîç {error.message}"
    
    def _format_runtime_error(self, error: RuntimeError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"üöÄ {error.message}"
    
    def _format_validation_error(self, error: ValidationError) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return f"üìè {error.message}"
    
    def create_friendly_message(self, error_type: str, **kwargs) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        template = self.error_messages.get(error_type, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_type}")
        try:
            return template.format(**kwargs)
        except KeyError as e:
            return f"–û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ: {e}"
    
    def handle_exception(self, exception: Exception, source_code: str = "") -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if isinstance(exception, PyLiteError):
            return self.format_error(exception)
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Python
            error_type = type(exception).__name__
            error_message = str(exception)
            first_line = source_code.split('\n')[0].strip()
            if first_line:
                return f"üí• –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {error_message}\n   –≤ –∫–æ–¥–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–º—Å—è —Å: {first_line}"
            else:
                return f"üí• –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {error_type}: {error_message}"

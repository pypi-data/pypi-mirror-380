[build-system]
requires = ["setuptools>=61.0,<70", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "reghelp-client"
version = "1.3.1"
description = "Современная асинхронная Python библиотека для работы с REGHelp Key API"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "REGHelp Team", email = "support@reghelp.net"}
]
maintainers = [
    {name = "REGHelp Team", email = "support@reghelp.net"}
]
keywords = [
    "reghelp",
    "api",
    "client", 
    "async",
    "push",
    "email",
    "telegram",
    "integrity",
    "recaptcha",
    "turnstile",
    "voip"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Email",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.5.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-httpx>=0.21.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "coverage>=7.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
"Homepage" = "https://github.com/REGHELPNET/reghelp_client"
"Bug Reports" = "https://github.com/REGHELPNET/reghelp_client/issues"
"Source" = "https://github.com/REGHELPNET/reghelp_client"
"Documentation" = "https://docs.reghelp.net/"

[tool.setuptools]
packages = ["reghelp_client"]
package-dir = {"reghelp_client" = "reghelp_client"}

[tool.setuptools.package-data]
reghelp_client = ["py.typed"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["reghelp_client"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "PHITS-Tools"
dynamic = ["version"]
description = 'Python module for parsing and post-processing output from the PHITS code'
readme = "README.md"
license = "MPL-2.0"
license-files = ["LICENSE"]
keywords = []
authors = [
  { name = "Hunter Ratliff", email = "Lindt8@users.noreply.github.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
]
dependencies = [
  "numpy>=2.2", 
  "pandas>=2.2", 
  "scipy>=1.14", 
  "matplotlib>=3.10", 
  "seaborn>=0.13"
]

[project.optional-dependencies]
extras = [
  'munch>=2.5',
  'pyvista>=0.44'
]
test = [
	"pytest>=6.0", 
	"pytest-cov",
    "flake8",
]
build = [
	"hatchling",
]
doc = [
  "pdoc3==0.10.0"
]
develop = [
	"PHITS-Tools[test,doc]",
    "codecov-cli",
]

[project.scripts]
PHITS-Tools = "PHITS_tools:run_PHITS_tools_CLI_or_GUI"
PHITS_tools = "PHITS_tools:run_PHITS_tools_CLI_or_GUI"
phits-tools = "PHITS_tools:run_PHITS_tools_CLI_or_GUI"

[project.gui-scripts]
PHITS-Tools-GUI = "PHITS_tools:run_PHITS_tools_GUI"

[project.urls]
Documentation = "https://github.com/Lindt8/PHITS-Tools#readme"
Issues = "https://github.com/Lindt8/PHITS-Tools/issues"
Source = "https://github.com/Lindt8/PHITS-Tools"

[tool.hatch.version]
path = "PHITS_tools/PHITS_tools.py"

[tool.hatch.build]
packages = ["PHITS_tools"]
exclude = [
  "/.github",
  "/.idea",
  "/prepare_release.py",
  "/test/*.pdf",
  "/example/*.pdf",
  "/example/*.pickle*",
  "/example/*.png",
  "/example/*.out",
  "/example/*.eps",
  "/MC_materials/*.txt"
]

[tool.hatch.build.targets.wheel.force-include]
  "DCHAIN-Tools/dchain_tools.py" = "PHITS_tools/DCHAIN-Tools/dchain_tools.py"
  "DCHAIN-Tools/readme.md" = "PHITS_tools/DCHAIN-Tools/readme.md"
  "MC_materials/manage_mc_materials.py" = "PHITS_tools/MC_materials/manage_mc_materials.py"
  "MC_materials/README.md" = "PHITS_tools/MC_materials/README.md"
  "MC_materials/PNNL_materials_compendium.json" = "PHITS_tools/MC_materials/PNNL_materials_compendium.json"
  "MC_materials/Compiled_MC_materials.json" = "PHITS_tools/MC_materials/Compiled_MC_materials.json" 
  "MC_materials/materials_compendium.csv" = "PHITS_tools/MC_materials/materials_compendium.csv"

[tool.hatch.build.targets.sdist.force-include]
  "DCHAIN-Tools/dchain_tools.py" = "DCHAIN-Tools/dchain_tools.py"
  "DCHAIN-Tools/readme.md" = "DCHAIN-Tools/readme.md"
  "MC_materials/manage_mc_materials.py" = "MC_materials/manage_mc_materials.py"
  "MC_materials/README.md" = "MC_materials/README.md"
  "MC_materials/PNNL_materials_compendium.json" = "MC_materials/PNNL_materials_compendium.json"
  "MC_materials/Compiled_MC_materials.json" = "MC_materials/Compiled_MC_materials.json" 
  "MC_materials/materials_compendium.csv" = "MC_materials/materials_compendium"




# Testing
[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]  # Only run unit tests by default
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Add useful markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "deprecated: marks tests for deprecated functions that issue warnings",
]
# Minimum version requirement
minversion = "6.0"
# Add useful command line options by default
addopts = [
    "--strict-markers",  # Treat unregistered markers as errors
    "--strict-config",   # Treat config issues as errors
    "--verbose",         # Verbose output
    "-ra",              # Show extra test summary for all except passed
]
# Filter warnings 
filterwarnings = [
    "error",  # Treat warnings as errors (remove if too strict)
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::FutureWarning:PHITS_tools.*", # Only ignore from PHITS_tools module
]

[tool.coverage.run]
source = ["PHITS_tools"]
branch = true
# Omit test files from coverage
omit = [
    "tests/*",
    "test/*",
    "*/tests/*",
    "*/test/*",
    "build_docs.py",
]

[tool.coverage.report]
# Terminal report settings
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "if __name__ == '__main__':",
    "if False:",
    "if in_debug_mode:",
    "raise ValueError",
]
# Set coverage thresholds
# Note: This is overridden in CI with --cov-fail-under=0
# Local development can use full integration tests (89% coverage)
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
title = "PHITS-Tools Test Coverage"
skip_covered = false
skip_empty = false
#show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"
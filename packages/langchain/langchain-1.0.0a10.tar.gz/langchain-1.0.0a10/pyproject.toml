[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
authors = []
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=0.3.75,<2.0.0",
    "langchain-text-splitters>=0.3.11,<2.0.0",
    "langgraph==1.0.0a4",
    "pydantic>=2.7.4,<3.0.0",
]
name = "langchain"
version = "1.0.0a10"
description = "Building applications with LLMs through composability"
readme = "README.md"

[project.license]
text = "MIT"

[project.optional-dependencies]
community = [
    "langchain-community",
]
anthropic = [
    "langchain-anthropic",
]
openai = [
    "langchain-openai",
]
azure-ai = [
    "langchain-azure-ai",
]
cohere = [
    "langchain-cohere",
]
google-vertexai = [
    "langchain-google-vertexai",
]
google-genai = [
    "langchain-google-genai",
]
fireworks = [
    "langchain-fireworks",
]
ollama = [
    "langchain-ollama",
]
together = [
    "langchain-together",
]
mistralai = [
    "langchain-mistralai",
]
huggingface = [
    "langchain-huggingface",
]
groq = [
    "langchain-groq",
]
aws = [
    "langchain-aws",
]
deepseek = [
    "langchain-deepseek",
]
xai = [
    "langchain-xai",
]
perplexity = [
    "langchain-perplexity",
]

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/langchain"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain"

[dependency-groups]
test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=4.0.0,<8.0.0",
    "pytest-watcher>=0.2.6,<1.0.0",
    "pytest-asyncio>=0.23.2,<2.0.0",
    "pytest-socket>=0.6.0,<1.0.0",
    "pytest-xdist<4.0.0,>=3.6.1",
    "pytest-mock",
    "syrupy>=4.0.2,<5.0.0",
    "toml>=0.10.2,<1.0.0",
    "langchain-tests",
    "langchain-text-splitters",
    "langchain-openai",
]
lint = [
    "ruff>=0.12.2,<0.13.0",
]
typing = [
    "mypy>=1.18.1,<1.19.0",
    "types-toml>=0.10.8.20240310,<1.0.0.0",
]
test_integration = [
    "vcrpy>=7.0.0,<8.0.0",
    "wrapt>=1.15.0,<2.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "cassio>=0.1.0,<1.0.0",
    "langchainhub>=0.1.16,<1.0.0",
    "langchain-core",
    "langchain-text-splitters",
]

[tool.uv]
prerelease = "allow"

[tool.uv.sources.langchain-core]
path = "../core"
editable = true

[tool.uv.sources.langchain-tests]
path = "../standard-tests"
editable = true

[tool.uv.sources.langchain-text-splitters]
path = "../text-splitters"
editable = true

[tool.uv.sources.langchain-openai]
path = "../partners/openai"
editable = true

[tool.ruff]
exclude = [
    "tests/integration_tests/examples/non-utf8-encoding.py",
]
line-length = 100

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "COM812",
    "ISC001",
    "PERF203",
    "SLF001",
    "PLC0415",
    "PLR0913",
    "PLC0414",
]
unfixable = [
    "B028",
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-var-parameters = true

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D1",
    "PLC0415",
]
"langchain/agents/*" = [
    "ANN401",
    "A002",
    "A001",
    "B904",
    "PLR2004",
    "C901",
    "TRY004",
    "PLR0912",
    "PLR0911",
]
"tests/unit_tests/agents/*" = [
    "ALL",
]
"tests/integration_tests/agents/*" = [
    "ALL",
]

[tool.ruff.lint.extend-per-file-ignores]
"scripts/check_imports.py" = [
    "ALL",
]
"langchain/chat_models/base.py" = [
    "ANN",
    "C901",
    "FIX002",
    "N802",
    "PLR0911",
    "PLR0912",
    "PLR0915",
]
"langchain/embeddings/base.py" = [
    "PLR0911",
    "PLR0913",
]
"tests/**/*.py" = [
    "S101",
    "S311",
    "SLF001",
    "PLR2004",
    "C901",
    "ANN401",
    "N802",
    "PLW1641",
    "ARG002",
    "BLE001",
    "N801",
]
"langchain/tools/tool_node.py" = [
    "ANN401",
    "A002",
    "A001",
    "B904",
    "PLR2004",
    "C901",
    "TRY004",
]

[tool.mypy]
strict = true
ignore_missing_imports = true
enable_error_code = "deprecated"
exclude = [
    "tests/unit_tests/agents/*",
    "tests/integration_tests/agents/*",
]
disallow_any_generics = false
warn_return_any = false

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:tests",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:tests",
]

from .splitend_node import SENode
from collections.abc import Callable, Iterator
from pythonic_fp.gadgets.sentinels.flavored import Sentinel
from typing import overload

__all__ = ['SplitEnd']

type _SecretType = tuple[str, str, str]
type _Sentinel = Sentinel[_SecretType]
class SplitEnd[D]:
    def __init__(self, *ds: D, root: SENode[D] | _Sentinel = ...) -> None: ...
    def __iter__(self) -> Iterator[D]: ...
    def __reversed__(self) -> Iterator[D]: ...
    def __bool__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def cut(self, num: int | None = None) -> tuple[D, ...]: ...
    def extend(self, *ds: D) -> None: ...
    def peak(self) -> D: ...
    def root(self) -> SENode[D]: ...
    def reroot(self, root: SENode[D]) -> SplitEnd[D]: ...
    def snip(self) -> D: ...
    def split(self, *ds: D) -> SplitEnd[D]: ...
    @overload
    def fold[T](self, f: Callable[[D, D], D]) -> D: ...
    @overload
    def fold[T](self, f: Callable[[T, D], T], init: T) -> T: ...
    @overload
    def rev_fold[T](self, f: Callable[[D, D], D]) -> D: ...
    @overload
    def rev_fold[T](self, f: Callable[[T, D], T], init: T) -> T: ...

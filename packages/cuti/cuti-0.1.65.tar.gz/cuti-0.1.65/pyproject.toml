[build-system]
build-backend = "hatchling.build"
requires      = ["hatchling"]

[project]
authors = [{ name = "claude-code" }, { name = "nociza" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "aiofiles>=23.0.0",
    "anyio>=4.10.0",
    "claude-code-sdk>=0.0.20",
    "claude-monitor>=3.1.0",
    "fastapi>=0.104.0",
    "httpx>=0.25.0",
    "jinja2>=3.1.0",
    "psutil>=5.9.0",
    "python-multipart>=0.0.6",
    "pyyaml>=6.0",
    "requests>=2.32.4",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
]
description = "Production-ready Claude Code utilities with command queuing, prompt aliases, web interface, and monitoring."
keywords = ["ai", "automation", "claude", "cli", "orchestration", "queue"]
license = "Apache-2.0"
name = "cuti"
readme = "README.md"
requires-python = ">=3.10"
version = "0.1.65"

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "pytest-asyncio>=0.21.0",
    "pytest>=7.4.0",
    "ruff>=0.1.0",
]

container = ["docker>=6.0.0"]

[project.scripts]
cuti     = "cuti.cli.app:app"
cuti-web = "cuti.web.app:main"

[project.urls]
Documentation = "https://github.com/nociza/cuti/blob/main/README.md"
Homepage      = "https://github.com/nociza/cuti"
Issues        = "https://github.com/nociza/cuti/issues"
Repository    = "https://github.com/nociza/cuti"

[tool.hatch.build.targets.wheel]
packages = ["src/cuti"]

[tool.hatch.build.targets.sdist]
include = ["/LICENSE", "/README.md", "/docs", "/src"]

[tool.black]
line-length               = 88
skip-string-normalization = true
target-version            = ["py39"]

[tool.ruff]
line-length    = 88
target-version = "py39"

select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
]

ignore = [
    "B008", # do not perform function calls in argument defaults
    "E501", # line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
check_untyped_defs       = true
disallow_any_generics    = true
disallow_incomplete_defs = true
disallow_untyped_defs    = true
no_implicit_optional     = true
python_version           = "3.9"
warn_redundant_casts     = true
warn_unused_ignores      = true

[tool.pytest.ini_options]
addopts          = "-v --tb=short"
asyncio_mode     = "auto"
python_classes   = ["Test*"]
python_files     = ["*_test.py", "test_*.py"]
python_functions = ["test_*"]
testpaths        = ["tests"]

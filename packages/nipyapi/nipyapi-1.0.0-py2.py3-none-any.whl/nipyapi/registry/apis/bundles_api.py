"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class BundlesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_bundle(self, bundle_id, **kwargs):
        """
        Delete bundle.

        Deletes the given extension bundle and all of it's versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_bundle_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.Bundle`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_bundle_with_http_info(bundle_id, **kwargs)
        else:
            (data) = self.delete_bundle_with_http_info(bundle_id, **kwargs)
            return data

    def delete_bundle_with_http_info(self, bundle_id, **kwargs):
        """
        Delete bundle.

        Deletes the given extension bundle and all of it's versions.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_bundle()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.Bundle`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `delete_bundle`")

 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Bundle',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_bundle_version(self, bundle_id, version, **kwargs):
        """
        Delete bundle version.

        Deletes the given extension bundle version and it's associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_bundle_version_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            :class:`~nipyapi.registry.models.BundleVersion`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_bundle_version_with_http_info(bundle_id, version, **kwargs)
        else:
            (data) = self.delete_bundle_version_with_http_info(bundle_id, version, **kwargs)
            return data

    def delete_bundle_version_with_http_info(self, bundle_id, version, **kwargs):
        """
        Delete bundle version.

        Deletes the given extension bundle version and it's associated binary content.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_bundle_version()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.BundleVersion`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_bundle_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `delete_bundle_version`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_bundle_version`")

 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BundleVersion',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle(self, bundle_id, **kwargs):
        """
        Get bundle.

        Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.Bundle`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_with_http_info(bundle_id, **kwargs)
        else:
            (data) = self.get_bundle_with_http_info(bundle_id, **kwargs)
            return data

    def get_bundle_with_http_info(self, bundle_id, **kwargs):
        """
        Get bundle.

        Gets the metadata about an extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.Bundle`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle`")

 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Bundle',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version(self, bundle_id, version, **kwargs):
        """
        Get bundle version.

        Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            :class:`~nipyapi.registry.models.BundleVersion`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_with_http_info(bundle_id, version, **kwargs)
        else:
            (data) = self.get_bundle_version_with_http_info(bundle_id, version, **kwargs)
            return data

    def get_bundle_version_with_http_info(self, bundle_id, version, **kwargs):
        """
        Get bundle version.

        Gets the descriptor for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.BundleVersion`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version`")

 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BundleVersion',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version_content(self, bundle_id, version, **kwargs):
        """
        Get bundle version content.

        Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_content_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            str: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_content_with_http_info(bundle_id, version, **kwargs)
        else:
            (data) = self.get_bundle_version_content_with_http_info(bundle_id, version, **kwargs)
            return data

    def get_bundle_version_content_with_http_info(self, bundle_id, version, **kwargs):
        """
        Get bundle version content.

        Gets the binary content for the given version of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version_content()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            tuple: (str, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version_content`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version_content`")

 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/octet-stream'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}/content', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version_extension(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension.

        Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_extension_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            :class:`~nipyapi.registry.models.list[Extension]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_extension_with_http_info(bundle_id, version, name, **kwargs)
        else:
            (data) = self.get_bundle_version_extension_with_http_info(bundle_id, version, name, **kwargs)
            return data

    def get_bundle_version_extension_with_http_info(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension.

        Gets the metadata about the extension with the given name in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version_extension()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[Extension]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version', 'name']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version_extension" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version_extension`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version_extension`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_bundle_version_extension`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}/extensions/{name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Extension]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version_extension_additional_details_docs(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension docs details.

        Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_extension_additional_details_docs_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            None
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_extension_additional_details_docs_with_http_info(bundle_id, version, name, **kwargs)
        else:
            (data) = self.get_bundle_version_extension_additional_details_docs_with_http_info(bundle_id, version, name, **kwargs)
            return data

    def get_bundle_version_extension_additional_details_docs_with_http_info(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension docs details.

        Gets the additional details documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version_extension_additional_details_docs()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            tuple: (None, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version', 'name']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version_extension_additional_details_docs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version_extension_additional_details_docs`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version_extension_additional_details_docs`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_bundle_version_extension_additional_details_docs`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}/extensions/{name}/docs/additional-details', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version_extension_docs(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension docs.

        Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_extension_docs_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            None
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_extension_docs_with_http_info(bundle_id, version, name, **kwargs)
        else:
            (data) = self.get_bundle_version_extension_docs_with_http_info(bundle_id, version, name, **kwargs)
            return data

    def get_bundle_version_extension_docs_with_http_info(self, bundle_id, version, name, **kwargs):
        """
        Get bundle version extension docs.

        Gets the documentation for the given extension in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version_extension_docs()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
            name (str): 
                The fully qualified name of the extension (required)
                
        Returns:
            tuple: (None, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version', 'name']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version_extension_docs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version_extension_docs`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version_extension_docs`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_bundle_version_extension_docs`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}/extensions/{name}/docs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_version_extensions(self, bundle_id, version, **kwargs):
        """
        Get bundle version extensions.

        Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_version_extensions_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            :class:`~nipyapi.registry.models.list[ExtensionMetadata]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_version_extensions_with_http_info(bundle_id, version, **kwargs)
        else:
            (data) = self.get_bundle_version_extensions_with_http_info(bundle_id, version, **kwargs)
            return data

    def get_bundle_version_extensions_with_http_info(self, bundle_id, version, **kwargs):
        """
        Get bundle version extensions.

        Gets the metadata about the extensions in the given extension bundle version.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_version_extensions()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
            version (str): 
                The version of the bundle (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[ExtensionMetadata]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id', 'version']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_version_extensions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_version_extensions`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_bundle_version_extensions`")

 
 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions/{version}/extensions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ExtensionMetadata]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_versions(self, bundle_id, **kwargs):
        """
        Get bundle versions.

        Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_versions_with_http_info()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.list[BundleVersionMetadata]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_versions_with_http_info(bundle_id, **kwargs)
        else:
            (data) = self.get_bundle_versions_with_http_info(bundle_id, **kwargs)
            return data

    def get_bundle_versions_with_http_info(self, bundle_id, **kwargs):
        """
        Get bundle versions.

        Gets the metadata for the versions of the given extension bundle.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_versions()`` method instead.
        
        Args:
            bundle_id (str): 
                The extension bundle identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[BundleVersionMetadata]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bundle_id' is set
        if ('bundle_id' not in params) or (params['bundle_id'] is None):
            raise ValueError("Missing the required parameter `bundle_id` when calling `get_bundle_versions`")

 
        collection_formats = {}

        path_params = {}
        if 'bundle_id' in params:
            path_params['bundleId'] = params['bundle_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/{bundleId}/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BundleVersionMetadata]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundle_versions1(self, **kwargs):
        """
        Get all bundle versions.

        Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundle_versions1_with_http_info()`` method instead.
        
        Args:
            group_id (str): 
                Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundle versions where the groupId starts with 'com.'.
            artifact_id (str): 
                Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundle versions where the artifactId starts with 'nifi-'.
            version (str): 
                Optional version to filter results. The value maye be an exact match, or a wildcard, such as '1.0.%' to select all bundle versions where the version starts with '1.0.'.
                
        Returns:
            :class:`~nipyapi.registry.models.list[BundleVersionMetadata]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundle_versions1_with_http_info(**kwargs)
        else:
            (data) = self.get_bundle_versions1_with_http_info(**kwargs)
            return data

    def get_bundle_versions1_with_http_info(self, **kwargs):
        """
        Get all bundle versions.

        Gets the metadata about extension bundle versions across all authorized buckets with optional filters applied. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundle_versions1()`` method instead.
        
        Args:
            group_id (str): 
                Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundle versions where the groupId starts with 'com.'.
            artifact_id (str): 
                Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundle versions where the artifactId starts with 'nifi-'.
            version (str): 
                Optional version to filter results. The value maye be an exact match, or a wildcard, such as '1.0.%' to select all bundle versions where the version starts with '1.0.'.
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[BundleVersionMetadata]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group_id', 'artifact_id', 'version']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundle_versions1" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))
        if 'artifact_id' in params:
            query_params.append(('artifactId', params['artifact_id']))
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[BundleVersionMetadata]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bundles(self, **kwargs):
        """
        Get all bundles.

        Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bundles_with_http_info()`` method instead.
        
        Args:
            bucket_name (str): 
                Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as 'My Bucket%' to select all bundles where the bucket name starts with 'My Bucket'.
            group_id (str): 
                Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundles where the groupId starts with 'com.'.
            artifact_id (str): 
                Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundles where the artifactId starts with 'nifi-'.
                
        Returns:
            :class:`~nipyapi.registry.models.list[Bundle]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bundles_with_http_info(**kwargs)
        else:
            (data) = self.get_bundles_with_http_info(**kwargs)
            return data

    def get_bundles_with_http_info(self, **kwargs):
        """
        Get all bundles.

        Gets the metadata for all bundles across all authorized buckets with optional filters applied. The returned results will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.   NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bundles()`` method instead.
        
        Args:
            bucket_name (str): 
                Optional bucket name to filter results. The value may be an exact match, or a wildcard, such as 'My Bucket%' to select all bundles where the bucket name starts with 'My Bucket'.
            group_id (str): 
                Optional groupId to filter results. The value may be an exact match, or a wildcard, such as 'com.%' to select all bundles where the groupId starts with 'com.'.
            artifact_id (str): 
                Optional artifactId to filter results. The value may be an exact match, or a wildcard, such as 'nifi-%' to select all bundles where the artifactId starts with 'nifi-'.
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[Bundle]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bucket_name', 'group_id', 'artifact_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bundles" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bucket_name' in params:
            query_params.append(('bucketName', params['bucket_name']))
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))
        if 'artifact_id' in params:
            query_params.append(('artifactId', params['artifact_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/bundles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Bundle]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

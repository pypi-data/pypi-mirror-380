"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class TenantsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_user(self, body, **kwargs):
        """
        Create user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``create_user_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.User`): 
                The user configuration details. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.User`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_user_with_http_info(body, **kwargs)
        else:
            (data) = self.create_user_with_http_info(body, **kwargs)
            return data

    def create_user_with_http_info(self, body, **kwargs):
        """
        Create user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``create_user()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.User`): 
                The user configuration details. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.User`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/users', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_user_group(self, body, **kwargs):
        """
        Create user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``create_user_group_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.UserGroup`): 
                The user group configuration details. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.UserGroup`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_user_group_with_http_info(body, **kwargs)
        else:
            (data) = self.create_user_group_with_http_info(body, **kwargs)
            return data

    def create_user_group_with_http_info(self, body, **kwargs):
        """
        Create user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``create_user_group()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.UserGroup`): 
                The user group configuration details. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.UserGroup`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_user_group`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/user-groups', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserGroup',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user(self, id, **kwargs):
        """
        Get user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_user_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The user id. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.User`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_with_http_info(id, **kwargs)
        else:
            (data) = self.get_user_with_http_info(id, **kwargs)
            return data

    def get_user_with_http_info(self, id, **kwargs):
        """
        Get user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_user()`` method instead.
        
        Args:
            id (str): 
                The user id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.User`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/users/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_group(self, id, **kwargs):
        """
        Get user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_user_group_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The user group id. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.UserGroup`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_group_with_http_info(id, **kwargs)
        else:
            (data) = self.get_user_group_with_http_info(id, **kwargs)
            return data

    def get_user_group_with_http_info(self, id, **kwargs):
        """
        Get user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_user_group()`` method instead.
        
        Args:
            id (str): 
                The user group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.UserGroup`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_user_group`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/user-groups/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserGroup',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_groups(self, **kwargs):
        """
        Get user groups.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_user_groups_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.registry.models.list[UserGroup]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_groups_with_http_info(**kwargs)
        else:
            (data) = self.get_user_groups_with_http_info(**kwargs)
            return data

    def get_user_groups_with_http_info(self, **kwargs):
        """
        Get user groups.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_user_groups()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[UserGroup]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/user-groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[UserGroup]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_users(self, **kwargs):
        """
        Get all users.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_users_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.registry.models.list[User]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_users_with_http_info(**kwargs)
        else:
            (data) = self.get_users_with_http_info(**kwargs)
            return data

    def get_users_with_http_info(self, **kwargs):
        """
        Get all users.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_users()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[User]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/users', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[User]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_user(self, version, id, **kwargs):
        """
        Delete user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``remove_user_with_http_info()`` method instead.
        
        Args:
            version (:class:`~nipyapi.registry.models.LongParameter`): 
                The version is used to verify the client is working with the latest version of the entity. (required)
            id (str): 
                The user id. (required)
            client_id (:class:`~nipyapi.registry.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
                
        Returns:
            :class:`~nipyapi.registry.models.User`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_user_with_http_info(version, id, **kwargs)
        else:
            (data) = self.remove_user_with_http_info(version, id, **kwargs)
            return data

    def remove_user_with_http_info(self, version, id, **kwargs):
        """
        Delete user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``remove_user()`` method instead.
        
        Args:
            version (:class:`~nipyapi.registry.models.LongParameter`): 
                The version is used to verify the client is working with the latest version of the entity. (required)
            id (str): 
                The user id. (required)
            client_id (:class:`~nipyapi.registry.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.User`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['version', 'id', 'client_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_user`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/users/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_user_group(self, version, id, **kwargs):
        """
        Delete user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``remove_user_group_with_http_info()`` method instead.
        
        Args:
            version (:class:`~nipyapi.registry.models.LongParameter`): 
                The version is used to verify the client is working with the latest version of the entity. (required)
            id (str): 
                The user group id. (required)
            client_id (:class:`~nipyapi.registry.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
                
        Returns:
            :class:`~nipyapi.registry.models.UserGroup`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_user_group_with_http_info(version, id, **kwargs)
        else:
            (data) = self.remove_user_group_with_http_info(version, id, **kwargs)
            return data

    def remove_user_group_with_http_info(self, version, id, **kwargs):
        """
        Delete user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``remove_user_group()`` method instead.
        
        Args:
            version (:class:`~nipyapi.registry.models.LongParameter`): 
                The version is used to verify the client is working with the latest version of the entity. (required)
            id (str): 
                The user group id. (required)
            client_id (:class:`~nipyapi.registry.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.UserGroup`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['version', 'id', 'client_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `remove_user_group`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_user_group`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/user-groups/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserGroup',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_user(self, body, id, **kwargs):
        """
        Update user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``update_user_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.User`): 
                The user configuration details. (required)
            id (str): 
                The user id. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.User`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_user_with_http_info(body, id, **kwargs)
        else:
            (data) = self.update_user_with_http_info(body, id, **kwargs)
            return data

    def update_user_with_http_info(self, body, id, **kwargs):
        """
        Update user.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``update_user()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.User`): 
                The user configuration details. (required)
            id (str): 
                The user id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.User`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_user`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/users/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='User',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_user_group(self, body, id, **kwargs):
        """
        Update user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``update_user_group_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.UserGroup`): 
                The user group configuration details. (required)
            id (str): 
                The user group id. (required)
                
        Returns:
            :class:`~nipyapi.registry.models.UserGroup`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_user_group_with_http_info(body, id, **kwargs)
        else:
            (data) = self.update_user_group_with_http_info(body, id, **kwargs)
            return data

    def update_user_group_with_http_info(self, body, id, **kwargs):
        """
        Update user group.

          NOTE: This endpoint is subject to change as NiFi Registry and its REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``update_user_group()`` method instead.
        
        Args:
            body (:class:`~nipyapi.registry.models.UserGroup`): 
                The user group configuration details. (required)
            id (str): 
                The user group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.UserGroup`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_user_group`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_user_group`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/tenants/user-groups/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserGroup',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

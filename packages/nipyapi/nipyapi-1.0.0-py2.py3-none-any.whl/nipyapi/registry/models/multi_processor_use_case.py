"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class MultiProcessorUseCase(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
'keywords': 'list[str]',
'notes': 'str',
'processor_configurations': 'list[ProcessorConfiguration]'    }

    attribute_map = {
        'description': 'description',
'keywords': 'keywords',
'notes': 'notes',
'processor_configurations': 'processorConfigurations'    }

    def __init__(self, description=None, keywords=None, notes=None, processor_configurations=None):
        """
        MultiProcessorUseCase - a model defined in Swagger
        """

        self._description = None
        self._keywords = None
        self._notes = None
        self._processor_configurations = None

        if description is not None:
          self.description = description
        if keywords is not None:
          self.keywords = keywords
        if notes is not None:
          self.notes = notes
        if processor_configurations is not None:
          self.processor_configurations = processor_configurations

    @property
    def description(self):
        """
        Gets the description of this MultiProcessorUseCase.

        :return: The description of this MultiProcessorUseCase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MultiProcessorUseCase.

        :param description: The description of this MultiProcessorUseCase.
        :type: str
        """

        self._description = description

    @property
    def keywords(self):
        """
        Gets the keywords of this MultiProcessorUseCase.

        :return: The keywords of this MultiProcessorUseCase.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this MultiProcessorUseCase.

        :param keywords: The keywords of this MultiProcessorUseCase.
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def notes(self):
        """
        Gets the notes of this MultiProcessorUseCase.

        :return: The notes of this MultiProcessorUseCase.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this MultiProcessorUseCase.

        :param notes: The notes of this MultiProcessorUseCase.
        :type: str
        """

        self._notes = notes

    @property
    def processor_configurations(self):
        """
        Gets the processor_configurations of this MultiProcessorUseCase.

        :return: The processor_configurations of this MultiProcessorUseCase.
        :rtype: list[ProcessorConfiguration]
        """
        return self._processor_configurations

    @processor_configurations.setter
    def processor_configurations(self, processor_configurations):
        """
        Sets the processor_configurations of this MultiProcessorUseCase.

        :param processor_configurations: The processor_configurations of this MultiProcessorUseCase.
        :type: list[ProcessorConfiguration]
        """

        self._processor_configurations = processor_configurations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MultiProcessorUseCase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

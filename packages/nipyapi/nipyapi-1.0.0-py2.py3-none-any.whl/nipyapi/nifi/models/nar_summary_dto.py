"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class NarSummaryDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'build_time': 'str',
'coordinate': 'NarCoordinateDTO',
'created_by': 'str',
'dependency_coordinate': 'NarCoordinateDTO',
'digest': 'str',
'extension_count': 'int',
'failure_message': 'str',
'identifier': 'str',
'install_complete': 'bool',
'source_identifier': 'str',
'source_type': 'str',
'state': 'str'    }

    attribute_map = {
        'build_time': 'buildTime',
'coordinate': 'coordinate',
'created_by': 'createdBy',
'dependency_coordinate': 'dependencyCoordinate',
'digest': 'digest',
'extension_count': 'extensionCount',
'failure_message': 'failureMessage',
'identifier': 'identifier',
'install_complete': 'installComplete',
'source_identifier': 'sourceIdentifier',
'source_type': 'sourceType',
'state': 'state'    }

    def __init__(self, build_time=None, coordinate=None, created_by=None, dependency_coordinate=None, digest=None, extension_count=None, failure_message=None, identifier=None, install_complete=None, source_identifier=None, source_type=None, state=None):
        """
        NarSummaryDTO - a model defined in Swagger
        """

        self._build_time = None
        self._coordinate = None
        self._created_by = None
        self._dependency_coordinate = None
        self._digest = None
        self._extension_count = None
        self._failure_message = None
        self._identifier = None
        self._install_complete = None
        self._source_identifier = None
        self._source_type = None
        self._state = None

        if build_time is not None:
          self.build_time = build_time
        if coordinate is not None:
          self.coordinate = coordinate
        if created_by is not None:
          self.created_by = created_by
        if dependency_coordinate is not None:
          self.dependency_coordinate = dependency_coordinate
        if digest is not None:
          self.digest = digest
        if extension_count is not None:
          self.extension_count = extension_count
        if failure_message is not None:
          self.failure_message = failure_message
        if identifier is not None:
          self.identifier = identifier
        if install_complete is not None:
          self.install_complete = install_complete
        if source_identifier is not None:
          self.source_identifier = source_identifier
        if source_type is not None:
          self.source_type = source_type
        if state is not None:
          self.state = state

    @property
    def build_time(self):
        """
        Gets the build_time of this NarSummaryDTO.
        The time the NAR was built according to it's MANIFEST

        :return: The build_time of this NarSummaryDTO.
        :rtype: str
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """
        Sets the build_time of this NarSummaryDTO.
        The time the NAR was built according to it's MANIFEST

        :param build_time: The build_time of this NarSummaryDTO.
        :type: str
        """

        self._build_time = build_time

    @property
    def coordinate(self):
        """
        Gets the coordinate of this NarSummaryDTO.

        :return: The coordinate of this NarSummaryDTO.
        :rtype: NarCoordinateDTO
        """
        return self._coordinate

    @coordinate.setter
    def coordinate(self, coordinate):
        """
        Sets the coordinate of this NarSummaryDTO.

        :param coordinate: The coordinate of this NarSummaryDTO.
        :type: NarCoordinateDTO
        """

        self._coordinate = coordinate

    @property
    def created_by(self):
        """
        Gets the created_by of this NarSummaryDTO.
        The plugin that created the NAR according to it's MANIFEST

        :return: The created_by of this NarSummaryDTO.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this NarSummaryDTO.
        The plugin that created the NAR according to it's MANIFEST

        :param created_by: The created_by of this NarSummaryDTO.
        :type: str
        """

        self._created_by = created_by

    @property
    def dependency_coordinate(self):
        """
        Gets the dependency_coordinate of this NarSummaryDTO.

        :return: The dependency_coordinate of this NarSummaryDTO.
        :rtype: NarCoordinateDTO
        """
        return self._dependency_coordinate

    @dependency_coordinate.setter
    def dependency_coordinate(self, dependency_coordinate):
        """
        Sets the dependency_coordinate of this NarSummaryDTO.

        :param dependency_coordinate: The dependency_coordinate of this NarSummaryDTO.
        :type: NarCoordinateDTO
        """

        self._dependency_coordinate = dependency_coordinate

    @property
    def digest(self):
        """
        Gets the digest of this NarSummaryDTO.
        The hex digest of the NAR contents

        :return: The digest of this NarSummaryDTO.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """
        Sets the digest of this NarSummaryDTO.
        The hex digest of the NAR contents

        :param digest: The digest of this NarSummaryDTO.
        :type: str
        """

        self._digest = digest

    @property
    def extension_count(self):
        """
        Gets the extension_count of this NarSummaryDTO.
        The number of extensions contained in this NAR

        :return: The extension_count of this NarSummaryDTO.
        :rtype: int
        """
        return self._extension_count

    @extension_count.setter
    def extension_count(self, extension_count):
        """
        Sets the extension_count of this NarSummaryDTO.
        The number of extensions contained in this NAR

        :param extension_count: The extension_count of this NarSummaryDTO.
        :type: int
        """

        self._extension_count = extension_count

    @property
    def failure_message(self):
        """
        Gets the failure_message of this NarSummaryDTO.
        Information about why the installation failed, only populated when the state is failed

        :return: The failure_message of this NarSummaryDTO.
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """
        Sets the failure_message of this NarSummaryDTO.
        Information about why the installation failed, only populated when the state is failed

        :param failure_message: The failure_message of this NarSummaryDTO.
        :type: str
        """

        self._failure_message = failure_message

    @property
    def identifier(self):
        """
        Gets the identifier of this NarSummaryDTO.
        The identifier of the NAR.

        :return: The identifier of this NarSummaryDTO.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this NarSummaryDTO.
        The identifier of the NAR.

        :param identifier: The identifier of this NarSummaryDTO.
        :type: str
        """

        self._identifier = identifier

    @property
    def install_complete(self):
        """
        Gets the install_complete of this NarSummaryDTO.
        Indicates if the install task has completed

        :return: The install_complete of this NarSummaryDTO.
        :rtype: bool
        """
        return self._install_complete

    @install_complete.setter
    def install_complete(self, install_complete):
        """
        Sets the install_complete of this NarSummaryDTO.
        Indicates if the install task has completed

        :param install_complete: The install_complete of this NarSummaryDTO.
        :type: bool
        """

        self._install_complete = install_complete

    @property
    def source_identifier(self):
        """
        Gets the source_identifier of this NarSummaryDTO.
        The identifier of the source of this NAR

        :return: The source_identifier of this NarSummaryDTO.
        :rtype: str
        """
        return self._source_identifier

    @source_identifier.setter
    def source_identifier(self, source_identifier):
        """
        Sets the source_identifier of this NarSummaryDTO.
        The identifier of the source of this NAR

        :param source_identifier: The source_identifier of this NarSummaryDTO.
        :type: str
        """

        self._source_identifier = source_identifier

    @property
    def source_type(self):
        """
        Gets the source_type of this NarSummaryDTO.
        The source of this NAR

        :return: The source_type of this NarSummaryDTO.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """
        Sets the source_type of this NarSummaryDTO.
        The source of this NAR

        :param source_type: The source_type of this NarSummaryDTO.
        :type: str
        """

        self._source_type = source_type

    @property
    def state(self):
        """
        Gets the state of this NarSummaryDTO.
        The state of the NAR (i.e. Installed, or not)

        :return: The state of this NarSummaryDTO.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this NarSummaryDTO.
        The state of the NAR (i.e. Installed, or not)

        :param state: The state of this NarSummaryDTO.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NarSummaryDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

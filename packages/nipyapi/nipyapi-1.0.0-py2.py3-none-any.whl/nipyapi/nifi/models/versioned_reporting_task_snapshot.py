"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class VersionedReportingTaskSnapshot(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controller_services': 'list[VersionedControllerService]',
'reporting_tasks': 'list[VersionedReportingTask]'    }

    attribute_map = {
        'controller_services': 'controllerServices',
'reporting_tasks': 'reportingTasks'    }

    def __init__(self, controller_services=None, reporting_tasks=None):
        """
        VersionedReportingTaskSnapshot - a model defined in Swagger
        """

        self._controller_services = None
        self._reporting_tasks = None

        if controller_services is not None:
          self.controller_services = controller_services
        if reporting_tasks is not None:
          self.reporting_tasks = reporting_tasks

    @property
    def controller_services(self):
        """
        Gets the controller_services of this VersionedReportingTaskSnapshot.
        The controller services

        :return: The controller_services of this VersionedReportingTaskSnapshot.
        :rtype: list[VersionedControllerService]
        """
        return self._controller_services

    @controller_services.setter
    def controller_services(self, controller_services):
        """
        Sets the controller_services of this VersionedReportingTaskSnapshot.
        The controller services

        :param controller_services: The controller_services of this VersionedReportingTaskSnapshot.
        :type: list[VersionedControllerService]
        """

        self._controller_services = controller_services

    @property
    def reporting_tasks(self):
        """
        Gets the reporting_tasks of this VersionedReportingTaskSnapshot.
        The reporting tasks

        :return: The reporting_tasks of this VersionedReportingTaskSnapshot.
        :rtype: list[VersionedReportingTask]
        """
        return self._reporting_tasks

    @reporting_tasks.setter
    def reporting_tasks(self, reporting_tasks):
        """
        Sets the reporting_tasks of this VersionedReportingTaskSnapshot.
        The reporting tasks

        :param reporting_tasks: The reporting_tasks of this VersionedReportingTaskSnapshot.
        :type: list[VersionedReportingTask]
        """

        self._reporting_tasks = reporting_tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionedReportingTaskSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

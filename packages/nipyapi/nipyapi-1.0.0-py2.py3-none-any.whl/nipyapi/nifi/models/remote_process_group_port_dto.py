"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class RemoteProcessGroupPortDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_settings': 'BatchSettingsDTO',
'comments': 'str',
'concurrently_schedulable_task_count': 'int',
'connected': 'bool',
'exists': 'bool',
'group_id': 'str',
'id': 'str',
'name': 'str',
'target_id': 'str',
'target_running': 'bool',
'transmitting': 'bool',
'use_compression': 'bool',
'versioned_component_id': 'str'    }

    attribute_map = {
        'batch_settings': 'batchSettings',
'comments': 'comments',
'concurrently_schedulable_task_count': 'concurrentlySchedulableTaskCount',
'connected': 'connected',
'exists': 'exists',
'group_id': 'groupId',
'id': 'id',
'name': 'name',
'target_id': 'targetId',
'target_running': 'targetRunning',
'transmitting': 'transmitting',
'use_compression': 'useCompression',
'versioned_component_id': 'versionedComponentId'    }

    def __init__(self, batch_settings=None, comments=None, concurrently_schedulable_task_count=None, connected=None, exists=None, group_id=None, id=None, name=None, target_id=None, target_running=None, transmitting=None, use_compression=None, versioned_component_id=None):
        """
        RemoteProcessGroupPortDTO - a model defined in Swagger
        """

        self._batch_settings = None
        self._comments = None
        self._concurrently_schedulable_task_count = None
        self._connected = None
        self._exists = None
        self._group_id = None
        self._id = None
        self._name = None
        self._target_id = None
        self._target_running = None
        self._transmitting = None
        self._use_compression = None
        self._versioned_component_id = None

        if batch_settings is not None:
          self.batch_settings = batch_settings
        if comments is not None:
          self.comments = comments
        if concurrently_schedulable_task_count is not None:
          self.concurrently_schedulable_task_count = concurrently_schedulable_task_count
        if connected is not None:
          self.connected = connected
        if exists is not None:
          self.exists = exists
        if group_id is not None:
          self.group_id = group_id
        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if target_id is not None:
          self.target_id = target_id
        if target_running is not None:
          self.target_running = target_running
        if transmitting is not None:
          self.transmitting = transmitting
        if use_compression is not None:
          self.use_compression = use_compression
        if versioned_component_id is not None:
          self.versioned_component_id = versioned_component_id

    @property
    def batch_settings(self):
        """
        Gets the batch_settings of this RemoteProcessGroupPortDTO.

        :return: The batch_settings of this RemoteProcessGroupPortDTO.
        :rtype: BatchSettingsDTO
        """
        return self._batch_settings

    @batch_settings.setter
    def batch_settings(self, batch_settings):
        """
        Sets the batch_settings of this RemoteProcessGroupPortDTO.

        :param batch_settings: The batch_settings of this RemoteProcessGroupPortDTO.
        :type: BatchSettingsDTO
        """

        self._batch_settings = batch_settings

    @property
    def comments(self):
        """
        Gets the comments of this RemoteProcessGroupPortDTO.
        The comments as configured on the target port.

        :return: The comments of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this RemoteProcessGroupPortDTO.
        The comments as configured on the target port.

        :param comments: The comments of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._comments = comments

    @property
    def concurrently_schedulable_task_count(self):
        """
        Gets the concurrently_schedulable_task_count of this RemoteProcessGroupPortDTO.
        The number of task that may transmit flowfiles to the target port concurrently.

        :return: The concurrently_schedulable_task_count of this RemoteProcessGroupPortDTO.
        :rtype: int
        """
        return self._concurrently_schedulable_task_count

    @concurrently_schedulable_task_count.setter
    def concurrently_schedulable_task_count(self, concurrently_schedulable_task_count):
        """
        Sets the concurrently_schedulable_task_count of this RemoteProcessGroupPortDTO.
        The number of task that may transmit flowfiles to the target port concurrently.

        :param concurrently_schedulable_task_count: The concurrently_schedulable_task_count of this RemoteProcessGroupPortDTO.
        :type: int
        """

        self._concurrently_schedulable_task_count = concurrently_schedulable_task_count

    @property
    def connected(self):
        """
        Gets the connected of this RemoteProcessGroupPortDTO.
        Whether the port has either an incoming or outgoing connection.

        :return: The connected of this RemoteProcessGroupPortDTO.
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """
        Sets the connected of this RemoteProcessGroupPortDTO.
        Whether the port has either an incoming or outgoing connection.

        :param connected: The connected of this RemoteProcessGroupPortDTO.
        :type: bool
        """

        self._connected = connected

    @property
    def exists(self):
        """
        Gets the exists of this RemoteProcessGroupPortDTO.
        Whether the target port exists.

        :return: The exists of this RemoteProcessGroupPortDTO.
        :rtype: bool
        """
        return self._exists

    @exists.setter
    def exists(self, exists):
        """
        Sets the exists of this RemoteProcessGroupPortDTO.
        Whether the target port exists.

        :param exists: The exists of this RemoteProcessGroupPortDTO.
        :type: bool
        """

        self._exists = exists

    @property
    def group_id(self):
        """
        Gets the group_id of this RemoteProcessGroupPortDTO.
        The id of the remote process group that the port resides in.

        :return: The group_id of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this RemoteProcessGroupPortDTO.
        The id of the remote process group that the port resides in.

        :param group_id: The group_id of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._group_id = group_id

    @property
    def id(self):
        """
        Gets the id of this RemoteProcessGroupPortDTO.
        The id of the port.

        :return: The id of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RemoteProcessGroupPortDTO.
        The id of the port.

        :param id: The id of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this RemoteProcessGroupPortDTO.
        The name of the target port.

        :return: The name of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RemoteProcessGroupPortDTO.
        The name of the target port.

        :param name: The name of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._name = name

    @property
    def target_id(self):
        """
        Gets the target_id of this RemoteProcessGroupPortDTO.
        The id of the target port.

        :return: The target_id of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """
        Sets the target_id of this RemoteProcessGroupPortDTO.
        The id of the target port.

        :param target_id: The target_id of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._target_id = target_id

    @property
    def target_running(self):
        """
        Gets the target_running of this RemoteProcessGroupPortDTO.
        Whether the target port is running.

        :return: The target_running of this RemoteProcessGroupPortDTO.
        :rtype: bool
        """
        return self._target_running

    @target_running.setter
    def target_running(self, target_running):
        """
        Sets the target_running of this RemoteProcessGroupPortDTO.
        Whether the target port is running.

        :param target_running: The target_running of this RemoteProcessGroupPortDTO.
        :type: bool
        """

        self._target_running = target_running

    @property
    def transmitting(self):
        """
        Gets the transmitting of this RemoteProcessGroupPortDTO.
        Whether the remote port is configured for transmission.

        :return: The transmitting of this RemoteProcessGroupPortDTO.
        :rtype: bool
        """
        return self._transmitting

    @transmitting.setter
    def transmitting(self, transmitting):
        """
        Sets the transmitting of this RemoteProcessGroupPortDTO.
        Whether the remote port is configured for transmission.

        :param transmitting: The transmitting of this RemoteProcessGroupPortDTO.
        :type: bool
        """

        self._transmitting = transmitting

    @property
    def use_compression(self):
        """
        Gets the use_compression of this RemoteProcessGroupPortDTO.
        Whether the flowfiles are compressed when sent to the target port.

        :return: The use_compression of this RemoteProcessGroupPortDTO.
        :rtype: bool
        """
        return self._use_compression

    @use_compression.setter
    def use_compression(self, use_compression):
        """
        Sets the use_compression of this RemoteProcessGroupPortDTO.
        Whether the flowfiles are compressed when sent to the target port.

        :param use_compression: The use_compression of this RemoteProcessGroupPortDTO.
        :type: bool
        """

        self._use_compression = use_compression

    @property
    def versioned_component_id(self):
        """
        Gets the versioned_component_id of this RemoteProcessGroupPortDTO.
        The ID of the corresponding component that is under version control

        :return: The versioned_component_id of this RemoteProcessGroupPortDTO.
        :rtype: str
        """
        return self._versioned_component_id

    @versioned_component_id.setter
    def versioned_component_id(self, versioned_component_id):
        """
        Sets the versioned_component_id of this RemoteProcessGroupPortDTO.
        The ID of the corresponding component that is under version control

        :param versioned_component_id: The versioned_component_id of this RemoteProcessGroupPortDTO.
        :type: str
        """

        self._versioned_component_id = versioned_component_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RemoteProcessGroupPortDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

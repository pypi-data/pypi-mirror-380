"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class VersionedReportingTaskImportRequestEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disconnected_node_acknowledged': 'bool',
'reporting_task_snapshot': 'VersionedReportingTaskSnapshot'    }

    attribute_map = {
        'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'reporting_task_snapshot': 'reportingTaskSnapshot'    }

    def __init__(self, disconnected_node_acknowledged=None, reporting_task_snapshot=None):
        """
        VersionedReportingTaskImportRequestEntity - a model defined in Swagger
        """

        self._disconnected_node_acknowledged = None
        self._reporting_task_snapshot = None

        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if reporting_task_snapshot is not None:
          self.reporting_task_snapshot = reporting_task_snapshot

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this VersionedReportingTaskImportRequestEntity.
        The disconnected node acknowledged flag

        :return: The disconnected_node_acknowledged of this VersionedReportingTaskImportRequestEntity.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this VersionedReportingTaskImportRequestEntity.
        The disconnected node acknowledged flag

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this VersionedReportingTaskImportRequestEntity.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def reporting_task_snapshot(self):
        """
        Gets the reporting_task_snapshot of this VersionedReportingTaskImportRequestEntity.

        :return: The reporting_task_snapshot of this VersionedReportingTaskImportRequestEntity.
        :rtype: VersionedReportingTaskSnapshot
        """
        return self._reporting_task_snapshot

    @reporting_task_snapshot.setter
    def reporting_task_snapshot(self, reporting_task_snapshot):
        """
        Sets the reporting_task_snapshot of this VersionedReportingTaskImportRequestEntity.

        :param reporting_task_snapshot: The reporting_task_snapshot of this VersionedReportingTaskImportRequestEntity.
        :type: VersionedReportingTaskSnapshot
        """

        self._reporting_task_snapshot = reporting_task_snapshot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionedReportingTaskImportRequestEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

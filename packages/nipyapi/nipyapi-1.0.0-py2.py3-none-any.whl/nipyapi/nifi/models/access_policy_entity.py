"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class AccessPolicyEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulletins': 'list[BulletinEntity]',
'component': 'AccessPolicyDTO',
'disconnected_node_acknowledged': 'bool',
'generated': 'str',
'id': 'str',
'permissions': 'PermissionsDTO',
'position': 'PositionDTO',
'revision': 'RevisionDTO',
'uri': 'str'    }

    attribute_map = {
        'bulletins': 'bulletins',
'component': 'component',
'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'generated': 'generated',
'id': 'id',
'permissions': 'permissions',
'position': 'position',
'revision': 'revision',
'uri': 'uri'    }

    def __init__(self, bulletins=None, component=None, disconnected_node_acknowledged=None, generated=None, id=None, permissions=None, position=None, revision=None, uri=None):
        """
        AccessPolicyEntity - a model defined in Swagger
        """

        self._bulletins = None
        self._component = None
        self._disconnected_node_acknowledged = None
        self._generated = None
        self._id = None
        self._permissions = None
        self._position = None
        self._revision = None
        self._uri = None

        if bulletins is not None:
          self.bulletins = bulletins
        if component is not None:
          self.component = component
        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if generated is not None:
          self.generated = generated
        if id is not None:
          self.id = id
        if permissions is not None:
          self.permissions = permissions
        if position is not None:
          self.position = position
        if revision is not None:
          self.revision = revision
        if uri is not None:
          self.uri = uri

    @property
    def bulletins(self):
        """
        Gets the bulletins of this AccessPolicyEntity.
        The bulletins for this component.

        :return: The bulletins of this AccessPolicyEntity.
        :rtype: list[BulletinEntity]
        """
        return self._bulletins

    @bulletins.setter
    def bulletins(self, bulletins):
        """
        Sets the bulletins of this AccessPolicyEntity.
        The bulletins for this component.

        :param bulletins: The bulletins of this AccessPolicyEntity.
        :type: list[BulletinEntity]
        """

        self._bulletins = bulletins

    @property
    def component(self):
        """
        Gets the component of this AccessPolicyEntity.

        :return: The component of this AccessPolicyEntity.
        :rtype: AccessPolicyDTO
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this AccessPolicyEntity.

        :param component: The component of this AccessPolicyEntity.
        :type: AccessPolicyDTO
        """

        self._component = component

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this AccessPolicyEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :return: The disconnected_node_acknowledged of this AccessPolicyEntity.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this AccessPolicyEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this AccessPolicyEntity.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def generated(self):
        """
        Gets the generated of this AccessPolicyEntity.
        When this content was generated.

        :return: The generated of this AccessPolicyEntity.
        :rtype: str
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """
        Sets the generated of this AccessPolicyEntity.
        When this content was generated.

        :param generated: The generated of this AccessPolicyEntity.
        :type: str
        """

        self._generated = generated

    @property
    def id(self):
        """
        Gets the id of this AccessPolicyEntity.
        The id of the component.

        :return: The id of this AccessPolicyEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccessPolicyEntity.
        The id of the component.

        :param id: The id of this AccessPolicyEntity.
        :type: str
        """

        self._id = id

    @property
    def permissions(self):
        """
        Gets the permissions of this AccessPolicyEntity.

        :return: The permissions of this AccessPolicyEntity.
        :rtype: PermissionsDTO
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this AccessPolicyEntity.

        :param permissions: The permissions of this AccessPolicyEntity.
        :type: PermissionsDTO
        """

        self._permissions = permissions

    @property
    def position(self):
        """
        Gets the position of this AccessPolicyEntity.

        :return: The position of this AccessPolicyEntity.
        :rtype: PositionDTO
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this AccessPolicyEntity.

        :param position: The position of this AccessPolicyEntity.
        :type: PositionDTO
        """

        self._position = position

    @property
    def revision(self):
        """
        Gets the revision of this AccessPolicyEntity.

        :return: The revision of this AccessPolicyEntity.
        :rtype: RevisionDTO
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this AccessPolicyEntity.

        :param revision: The revision of this AccessPolicyEntity.
        :type: RevisionDTO
        """

        self._revision = revision

    @property
    def uri(self):
        """
        Gets the uri of this AccessPolicyEntity.
        The URI for futures requests to the component.

        :return: The uri of this AccessPolicyEntity.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this AccessPolicyEntity.
        The URI for futures requests to the component.

        :param uri: The uri of this AccessPolicyEntity.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccessPolicyEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ReplayLastEventSnapshotDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_available': 'bool',
'events_replayed': 'list[int]',
'failure_explanation': 'str'    }

    attribute_map = {
        'event_available': 'eventAvailable',
'events_replayed': 'eventsReplayed',
'failure_explanation': 'failureExplanation'    }

    def __init__(self, event_available=None, events_replayed=None, failure_explanation=None):
        """
        ReplayLastEventSnapshotDTO - a model defined in Swagger
        """

        self._event_available = None
        self._events_replayed = None
        self._failure_explanation = None

        if event_available is not None:
          self.event_available = event_available
        if events_replayed is not None:
          self.events_replayed = events_replayed
        if failure_explanation is not None:
          self.failure_explanation = failure_explanation

    @property
    def event_available(self):
        """
        Gets the event_available of this ReplayLastEventSnapshotDTO.
        Whether or not an event was available. This may not be populated if there was a failure.

        :return: The event_available of this ReplayLastEventSnapshotDTO.
        :rtype: bool
        """
        return self._event_available

    @event_available.setter
    def event_available(self, event_available):
        """
        Sets the event_available of this ReplayLastEventSnapshotDTO.
        Whether or not an event was available. This may not be populated if there was a failure.

        :param event_available: The event_available of this ReplayLastEventSnapshotDTO.
        :type: bool
        """

        self._event_available = event_available

    @property
    def events_replayed(self):
        """
        Gets the events_replayed of this ReplayLastEventSnapshotDTO.
        The IDs of the events that were successfully replayed

        :return: The events_replayed of this ReplayLastEventSnapshotDTO.
        :rtype: list[int]
        """
        return self._events_replayed

    @events_replayed.setter
    def events_replayed(self, events_replayed):
        """
        Sets the events_replayed of this ReplayLastEventSnapshotDTO.
        The IDs of the events that were successfully replayed

        :param events_replayed: The events_replayed of this ReplayLastEventSnapshotDTO.
        :type: list[int]
        """

        self._events_replayed = events_replayed

    @property
    def failure_explanation(self):
        """
        Gets the failure_explanation of this ReplayLastEventSnapshotDTO.
        If unable to replay an event, specifies why the event could not be replayed

        :return: The failure_explanation of this ReplayLastEventSnapshotDTO.
        :rtype: str
        """
        return self._failure_explanation

    @failure_explanation.setter
    def failure_explanation(self, failure_explanation):
        """
        Sets the failure_explanation of this ReplayLastEventSnapshotDTO.
        If unable to replay an event, specifies why the event could not be replayed

        :param failure_explanation: The failure_explanation of this ReplayLastEventSnapshotDTO.
        :type: str
        """

        self._failure_explanation = failure_explanation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReplayLastEventSnapshotDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

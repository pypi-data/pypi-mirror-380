"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class VersionedFlowSnapshotEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disconnected_node_acknowledged': 'bool',
'process_group_revision': 'RevisionDTO',
'registry_id': 'str',
'update_descendant_versioned_flows': 'bool',
'versioned_flow': 'RegisteredFlowSnapshot',
'versioned_flow_snapshot': 'RegisteredFlowSnapshot'    }

    attribute_map = {
        'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'process_group_revision': 'processGroupRevision',
'registry_id': 'registryId',
'update_descendant_versioned_flows': 'updateDescendantVersionedFlows',
'versioned_flow': 'versionedFlow',
'versioned_flow_snapshot': 'versionedFlowSnapshot'    }

    def __init__(self, disconnected_node_acknowledged=None, process_group_revision=None, registry_id=None, update_descendant_versioned_flows=None, versioned_flow=None, versioned_flow_snapshot=None):
        """
        VersionedFlowSnapshotEntity - a model defined in Swagger
        """

        self._disconnected_node_acknowledged = None
        self._process_group_revision = None
        self._registry_id = None
        self._update_descendant_versioned_flows = None
        self._versioned_flow = None
        self._versioned_flow_snapshot = None

        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if process_group_revision is not None:
          self.process_group_revision = process_group_revision
        if registry_id is not None:
          self.registry_id = registry_id
        if update_descendant_versioned_flows is not None:
          self.update_descendant_versioned_flows = update_descendant_versioned_flows
        if versioned_flow is not None:
          self.versioned_flow = versioned_flow
        if versioned_flow_snapshot is not None:
          self.versioned_flow_snapshot = versioned_flow_snapshot

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this VersionedFlowSnapshotEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :return: The disconnected_node_acknowledged of this VersionedFlowSnapshotEntity.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this VersionedFlowSnapshotEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this VersionedFlowSnapshotEntity.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def process_group_revision(self):
        """
        Gets the process_group_revision of this VersionedFlowSnapshotEntity.

        :return: The process_group_revision of this VersionedFlowSnapshotEntity.
        :rtype: RevisionDTO
        """
        return self._process_group_revision

    @process_group_revision.setter
    def process_group_revision(self, process_group_revision):
        """
        Sets the process_group_revision of this VersionedFlowSnapshotEntity.

        :param process_group_revision: The process_group_revision of this VersionedFlowSnapshotEntity.
        :type: RevisionDTO
        """

        self._process_group_revision = process_group_revision

    @property
    def registry_id(self):
        """
        Gets the registry_id of this VersionedFlowSnapshotEntity.
        The ID of the Registry that this flow belongs to

        :return: The registry_id of this VersionedFlowSnapshotEntity.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """
        Sets the registry_id of this VersionedFlowSnapshotEntity.
        The ID of the Registry that this flow belongs to

        :param registry_id: The registry_id of this VersionedFlowSnapshotEntity.
        :type: str
        """

        self._registry_id = registry_id

    @property
    def update_descendant_versioned_flows(self):
        """
        Gets the update_descendant_versioned_flows of this VersionedFlowSnapshotEntity.
        If the Process Group to be updated has a child or descendant Process Group that is also under Version Control, this specifies whether or not the contents of that child/descendant Process Group should be updated.

        :return: The update_descendant_versioned_flows of this VersionedFlowSnapshotEntity.
        :rtype: bool
        """
        return self._update_descendant_versioned_flows

    @update_descendant_versioned_flows.setter
    def update_descendant_versioned_flows(self, update_descendant_versioned_flows):
        """
        Sets the update_descendant_versioned_flows of this VersionedFlowSnapshotEntity.
        If the Process Group to be updated has a child or descendant Process Group that is also under Version Control, this specifies whether or not the contents of that child/descendant Process Group should be updated.

        :param update_descendant_versioned_flows: The update_descendant_versioned_flows of this VersionedFlowSnapshotEntity.
        :type: bool
        """

        self._update_descendant_versioned_flows = update_descendant_versioned_flows

    @property
    def versioned_flow(self):
        """
        Gets the versioned_flow of this VersionedFlowSnapshotEntity.

        :return: The versioned_flow of this VersionedFlowSnapshotEntity.
        :rtype: RegisteredFlowSnapshot
        """
        return self._versioned_flow

    @versioned_flow.setter
    def versioned_flow(self, versioned_flow):
        """
        Sets the versioned_flow of this VersionedFlowSnapshotEntity.

        :param versioned_flow: The versioned_flow of this VersionedFlowSnapshotEntity.
        :type: RegisteredFlowSnapshot
        """

        self._versioned_flow = versioned_flow

    @property
    def versioned_flow_snapshot(self):
        """
        Gets the versioned_flow_snapshot of this VersionedFlowSnapshotEntity.

        :return: The versioned_flow_snapshot of this VersionedFlowSnapshotEntity.
        :rtype: RegisteredFlowSnapshot
        """
        return self._versioned_flow_snapshot

    @versioned_flow_snapshot.setter
    def versioned_flow_snapshot(self, versioned_flow_snapshot):
        """
        Sets the versioned_flow_snapshot of this VersionedFlowSnapshotEntity.

        :param versioned_flow_snapshot: The versioned_flow_snapshot of this VersionedFlowSnapshotEntity.
        :type: RegisteredFlowSnapshot
        """

        self._versioned_flow_snapshot = versioned_flow_snapshot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionedFlowSnapshotEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

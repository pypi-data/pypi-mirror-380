"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class FlowAnalysisRuleViolationDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
'enforcement_policy': 'str',
'group_id': 'str',
'issue_id': 'str',
'rule_id': 'str',
'scope': 'str',
'subject_component_type': 'str',
'subject_display_name': 'str',
'subject_id': 'str',
'subject_permission_dto': 'PermissionsDTO',
'violation_message': 'str'    }

    attribute_map = {
        'enabled': 'enabled',
'enforcement_policy': 'enforcementPolicy',
'group_id': 'groupId',
'issue_id': 'issueId',
'rule_id': 'ruleId',
'scope': 'scope',
'subject_component_type': 'subjectComponentType',
'subject_display_name': 'subjectDisplayName',
'subject_id': 'subjectId',
'subject_permission_dto': 'subjectPermissionDto',
'violation_message': 'violationMessage'    }

    def __init__(self, enabled=None, enforcement_policy=None, group_id=None, issue_id=None, rule_id=None, scope=None, subject_component_type=None, subject_display_name=None, subject_id=None, subject_permission_dto=None, violation_message=None):
        """
        FlowAnalysisRuleViolationDTO - a model defined in Swagger
        """

        self._enabled = None
        self._enforcement_policy = None
        self._group_id = None
        self._issue_id = None
        self._rule_id = None
        self._scope = None
        self._subject_component_type = None
        self._subject_display_name = None
        self._subject_id = None
        self._subject_permission_dto = None
        self._violation_message = None

        if enabled is not None:
          self.enabled = enabled
        if enforcement_policy is not None:
          self.enforcement_policy = enforcement_policy
        if group_id is not None:
          self.group_id = group_id
        if issue_id is not None:
          self.issue_id = issue_id
        if rule_id is not None:
          self.rule_id = rule_id
        if scope is not None:
          self.scope = scope
        if subject_component_type is not None:
          self.subject_component_type = subject_component_type
        if subject_display_name is not None:
          self.subject_display_name = subject_display_name
        if subject_id is not None:
          self.subject_id = subject_id
        if subject_permission_dto is not None:
          self.subject_permission_dto = subject_permission_dto
        if violation_message is not None:
          self.violation_message = violation_message

    @property
    def enabled(self):
        """
        Gets the enabled of this FlowAnalysisRuleViolationDTO.

        :return: The enabled of this FlowAnalysisRuleViolationDTO.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this FlowAnalysisRuleViolationDTO.

        :param enabled: The enabled of this FlowAnalysisRuleViolationDTO.
        :type: bool
        """

        self._enabled = enabled

    @property
    def enforcement_policy(self):
        """
        Gets the enforcement_policy of this FlowAnalysisRuleViolationDTO.

        :return: The enforcement_policy of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._enforcement_policy

    @enforcement_policy.setter
    def enforcement_policy(self, enforcement_policy):
        """
        Sets the enforcement_policy of this FlowAnalysisRuleViolationDTO.

        :param enforcement_policy: The enforcement_policy of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._enforcement_policy = enforcement_policy

    @property
    def group_id(self):
        """
        Gets the group_id of this FlowAnalysisRuleViolationDTO.

        :return: The group_id of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this FlowAnalysisRuleViolationDTO.

        :param group_id: The group_id of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._group_id = group_id

    @property
    def issue_id(self):
        """
        Gets the issue_id of this FlowAnalysisRuleViolationDTO.

        :return: The issue_id of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """
        Sets the issue_id of this FlowAnalysisRuleViolationDTO.

        :param issue_id: The issue_id of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._issue_id = issue_id

    @property
    def rule_id(self):
        """
        Gets the rule_id of this FlowAnalysisRuleViolationDTO.

        :return: The rule_id of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """
        Sets the rule_id of this FlowAnalysisRuleViolationDTO.

        :param rule_id: The rule_id of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._rule_id = rule_id

    @property
    def scope(self):
        """
        Gets the scope of this FlowAnalysisRuleViolationDTO.

        :return: The scope of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this FlowAnalysisRuleViolationDTO.

        :param scope: The scope of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._scope = scope

    @property
    def subject_component_type(self):
        """
        Gets the subject_component_type of this FlowAnalysisRuleViolationDTO.

        :return: The subject_component_type of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._subject_component_type

    @subject_component_type.setter
    def subject_component_type(self, subject_component_type):
        """
        Sets the subject_component_type of this FlowAnalysisRuleViolationDTO.

        :param subject_component_type: The subject_component_type of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._subject_component_type = subject_component_type

    @property
    def subject_display_name(self):
        """
        Gets the subject_display_name of this FlowAnalysisRuleViolationDTO.

        :return: The subject_display_name of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._subject_display_name

    @subject_display_name.setter
    def subject_display_name(self, subject_display_name):
        """
        Sets the subject_display_name of this FlowAnalysisRuleViolationDTO.

        :param subject_display_name: The subject_display_name of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._subject_display_name = subject_display_name

    @property
    def subject_id(self):
        """
        Gets the subject_id of this FlowAnalysisRuleViolationDTO.

        :return: The subject_id of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """
        Sets the subject_id of this FlowAnalysisRuleViolationDTO.

        :param subject_id: The subject_id of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._subject_id = subject_id

    @property
    def subject_permission_dto(self):
        """
        Gets the subject_permission_dto of this FlowAnalysisRuleViolationDTO.

        :return: The subject_permission_dto of this FlowAnalysisRuleViolationDTO.
        :rtype: PermissionsDTO
        """
        return self._subject_permission_dto

    @subject_permission_dto.setter
    def subject_permission_dto(self, subject_permission_dto):
        """
        Sets the subject_permission_dto of this FlowAnalysisRuleViolationDTO.

        :param subject_permission_dto: The subject_permission_dto of this FlowAnalysisRuleViolationDTO.
        :type: PermissionsDTO
        """

        self._subject_permission_dto = subject_permission_dto

    @property
    def violation_message(self):
        """
        Gets the violation_message of this FlowAnalysisRuleViolationDTO.

        :return: The violation_message of this FlowAnalysisRuleViolationDTO.
        :rtype: str
        """
        return self._violation_message

    @violation_message.setter
    def violation_message(self, violation_message):
        """
        Sets the violation_message of this FlowAnalysisRuleViolationDTO.

        :param violation_message: The violation_message of this FlowAnalysisRuleViolationDTO.
        :type: str
        """

        self._violation_message = violation_message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowAnalysisRuleViolationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

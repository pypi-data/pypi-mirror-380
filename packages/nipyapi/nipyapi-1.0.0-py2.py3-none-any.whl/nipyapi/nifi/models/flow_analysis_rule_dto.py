"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class FlowAnalysisRuleDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bundle': 'BundleDTO',
'comments': 'str',
'deprecated': 'bool',
'descriptors': 'dict(str, PropertyDescriptorDTO)',
'enforcement_policy': 'str',
'extension_missing': 'bool',
'id': 'str',
'multiple_versions_available': 'bool',
'name': 'str',
'parent_group_id': 'str',
'persists_state': 'bool',
'position': 'PositionDTO',
'properties': 'dict(str, str)',
'restricted': 'bool',
'sensitive_dynamic_property_names': 'list[str]',
'state': 'str',
'supports_sensitive_dynamic_properties': 'bool',
'type': 'str',
'validation_errors': 'list[str]',
'validation_status': 'str',
'versioned_component_id': 'str'    }

    attribute_map = {
        'bundle': 'bundle',
'comments': 'comments',
'deprecated': 'deprecated',
'descriptors': 'descriptors',
'enforcement_policy': 'enforcementPolicy',
'extension_missing': 'extensionMissing',
'id': 'id',
'multiple_versions_available': 'multipleVersionsAvailable',
'name': 'name',
'parent_group_id': 'parentGroupId',
'persists_state': 'persistsState',
'position': 'position',
'properties': 'properties',
'restricted': 'restricted',
'sensitive_dynamic_property_names': 'sensitiveDynamicPropertyNames',
'state': 'state',
'supports_sensitive_dynamic_properties': 'supportsSensitiveDynamicProperties',
'type': 'type',
'validation_errors': 'validationErrors',
'validation_status': 'validationStatus',
'versioned_component_id': 'versionedComponentId'    }

    def __init__(self, bundle=None, comments=None, deprecated=None, descriptors=None, enforcement_policy=None, extension_missing=None, id=None, multiple_versions_available=None, name=None, parent_group_id=None, persists_state=None, position=None, properties=None, restricted=None, sensitive_dynamic_property_names=None, state=None, supports_sensitive_dynamic_properties=None, type=None, validation_errors=None, validation_status=None, versioned_component_id=None):
        """
        FlowAnalysisRuleDTO - a model defined in Swagger
        """

        self._bundle = None
        self._comments = None
        self._deprecated = None
        self._descriptors = None
        self._enforcement_policy = None
        self._extension_missing = None
        self._id = None
        self._multiple_versions_available = None
        self._name = None
        self._parent_group_id = None
        self._persists_state = None
        self._position = None
        self._properties = None
        self._restricted = None
        self._sensitive_dynamic_property_names = None
        self._state = None
        self._supports_sensitive_dynamic_properties = None
        self._type = None
        self._validation_errors = None
        self._validation_status = None
        self._versioned_component_id = None

        if bundle is not None:
          self.bundle = bundle
        if comments is not None:
          self.comments = comments
        if deprecated is not None:
          self.deprecated = deprecated
        if descriptors is not None:
          self.descriptors = descriptors
        if enforcement_policy is not None:
          self.enforcement_policy = enforcement_policy
        if extension_missing is not None:
          self.extension_missing = extension_missing
        if id is not None:
          self.id = id
        if multiple_versions_available is not None:
          self.multiple_versions_available = multiple_versions_available
        if name is not None:
          self.name = name
        if parent_group_id is not None:
          self.parent_group_id = parent_group_id
        if persists_state is not None:
          self.persists_state = persists_state
        if position is not None:
          self.position = position
        if properties is not None:
          self.properties = properties
        if restricted is not None:
          self.restricted = restricted
        if sensitive_dynamic_property_names is not None:
          self.sensitive_dynamic_property_names = sensitive_dynamic_property_names
        if state is not None:
          self.state = state
        if supports_sensitive_dynamic_properties is not None:
          self.supports_sensitive_dynamic_properties = supports_sensitive_dynamic_properties
        if type is not None:
          self.type = type
        if validation_errors is not None:
          self.validation_errors = validation_errors
        if validation_status is not None:
          self.validation_status = validation_status
        if versioned_component_id is not None:
          self.versioned_component_id = versioned_component_id

    @property
    def bundle(self):
        """
        Gets the bundle of this FlowAnalysisRuleDTO.

        :return: The bundle of this FlowAnalysisRuleDTO.
        :rtype: BundleDTO
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """
        Sets the bundle of this FlowAnalysisRuleDTO.

        :param bundle: The bundle of this FlowAnalysisRuleDTO.
        :type: BundleDTO
        """

        self._bundle = bundle

    @property
    def comments(self):
        """
        Gets the comments of this FlowAnalysisRuleDTO.
        The comments of the flow analysis rule.

        :return: The comments of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this FlowAnalysisRuleDTO.
        The comments of the flow analysis rule.

        :param comments: The comments of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._comments = comments

    @property
    def deprecated(self):
        """
        Gets the deprecated of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule has been deprecated.

        :return: The deprecated of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """
        Sets the deprecated of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule has been deprecated.

        :param deprecated: The deprecated of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def descriptors(self):
        """
        Gets the descriptors of this FlowAnalysisRuleDTO.
        The descriptors for the flow analysis rules properties.

        :return: The descriptors of this FlowAnalysisRuleDTO.
        :rtype: dict(str, PropertyDescriptorDTO)
        """
        return self._descriptors

    @descriptors.setter
    def descriptors(self, descriptors):
        """
        Sets the descriptors of this FlowAnalysisRuleDTO.
        The descriptors for the flow analysis rules properties.

        :param descriptors: The descriptors of this FlowAnalysisRuleDTO.
        :type: dict(str, PropertyDescriptorDTO)
        """

        self._descriptors = descriptors

    @property
    def enforcement_policy(self):
        """
        Gets the enforcement_policy of this FlowAnalysisRuleDTO.
        Enforcement Policy.

        :return: The enforcement_policy of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._enforcement_policy

    @enforcement_policy.setter
    def enforcement_policy(self, enforcement_policy):
        """
        Sets the enforcement_policy of this FlowAnalysisRuleDTO.
        Enforcement Policy.

        :param enforcement_policy: The enforcement_policy of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._enforcement_policy = enforcement_policy

    @property
    def extension_missing(self):
        """
        Gets the extension_missing of this FlowAnalysisRuleDTO.
        Whether the underlying extension is missing.

        :return: The extension_missing of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._extension_missing

    @extension_missing.setter
    def extension_missing(self, extension_missing):
        """
        Sets the extension_missing of this FlowAnalysisRuleDTO.
        Whether the underlying extension is missing.

        :param extension_missing: The extension_missing of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._extension_missing = extension_missing

    @property
    def id(self):
        """
        Gets the id of this FlowAnalysisRuleDTO.
        The id of the component.

        :return: The id of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FlowAnalysisRuleDTO.
        The id of the component.

        :param id: The id of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._id = id

    @property
    def multiple_versions_available(self):
        """
        Gets the multiple_versions_available of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule has multiple versions available.

        :return: The multiple_versions_available of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._multiple_versions_available

    @multiple_versions_available.setter
    def multiple_versions_available(self, multiple_versions_available):
        """
        Sets the multiple_versions_available of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule has multiple versions available.

        :param multiple_versions_available: The multiple_versions_available of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._multiple_versions_available = multiple_versions_available

    @property
    def name(self):
        """
        Gets the name of this FlowAnalysisRuleDTO.
        The name of the flow analysis rule.

        :return: The name of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FlowAnalysisRuleDTO.
        The name of the flow analysis rule.

        :param name: The name of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._name = name

    @property
    def parent_group_id(self):
        """
        Gets the parent_group_id of this FlowAnalysisRuleDTO.
        The id of parent process group of this component if applicable.

        :return: The parent_group_id of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """
        Sets the parent_group_id of this FlowAnalysisRuleDTO.
        The id of parent process group of this component if applicable.

        :param parent_group_id: The parent_group_id of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._parent_group_id = parent_group_id

    @property
    def persists_state(self):
        """
        Gets the persists_state of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule persists state.

        :return: The persists_state of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._persists_state

    @persists_state.setter
    def persists_state(self, persists_state):
        """
        Sets the persists_state of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule persists state.

        :param persists_state: The persists_state of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._persists_state = persists_state

    @property
    def position(self):
        """
        Gets the position of this FlowAnalysisRuleDTO.

        :return: The position of this FlowAnalysisRuleDTO.
        :rtype: PositionDTO
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this FlowAnalysisRuleDTO.

        :param position: The position of this FlowAnalysisRuleDTO.
        :type: PositionDTO
        """

        self._position = position

    @property
    def properties(self):
        """
        Gets the properties of this FlowAnalysisRuleDTO.
        The properties of the flow analysis rule.

        :return: The properties of this FlowAnalysisRuleDTO.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this FlowAnalysisRuleDTO.
        The properties of the flow analysis rule.

        :param properties: The properties of this FlowAnalysisRuleDTO.
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def restricted(self):
        """
        Gets the restricted of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule requires elevated privileges.

        :return: The restricted of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """
        Sets the restricted of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule requires elevated privileges.

        :param restricted: The restricted of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._restricted = restricted

    @property
    def sensitive_dynamic_property_names(self):
        """
        Gets the sensitive_dynamic_property_names of this FlowAnalysisRuleDTO.
        Set of sensitive dynamic property names

        :return: The sensitive_dynamic_property_names of this FlowAnalysisRuleDTO.
        :rtype: list[str]
        """
        return self._sensitive_dynamic_property_names

    @sensitive_dynamic_property_names.setter
    def sensitive_dynamic_property_names(self, sensitive_dynamic_property_names):
        """
        Sets the sensitive_dynamic_property_names of this FlowAnalysisRuleDTO.
        Set of sensitive dynamic property names

        :param sensitive_dynamic_property_names: The sensitive_dynamic_property_names of this FlowAnalysisRuleDTO.
        :type: list[str]
        """

        self._sensitive_dynamic_property_names = sensitive_dynamic_property_names

    @property
    def state(self):
        """
        Gets the state of this FlowAnalysisRuleDTO.
        The state of the flow analysis rule.

        :return: The state of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this FlowAnalysisRuleDTO.
        The state of the flow analysis rule.

        :param state: The state of this FlowAnalysisRuleDTO.
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", ]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def supports_sensitive_dynamic_properties(self):
        """
        Gets the supports_sensitive_dynamic_properties of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule supports sensitive dynamic properties.

        :return: The supports_sensitive_dynamic_properties of this FlowAnalysisRuleDTO.
        :rtype: bool
        """
        return self._supports_sensitive_dynamic_properties

    @supports_sensitive_dynamic_properties.setter
    def supports_sensitive_dynamic_properties(self, supports_sensitive_dynamic_properties):
        """
        Sets the supports_sensitive_dynamic_properties of this FlowAnalysisRuleDTO.
        Whether the flow analysis rule supports sensitive dynamic properties.

        :param supports_sensitive_dynamic_properties: The supports_sensitive_dynamic_properties of this FlowAnalysisRuleDTO.
        :type: bool
        """

        self._supports_sensitive_dynamic_properties = supports_sensitive_dynamic_properties

    @property
    def type(self):
        """
        Gets the type of this FlowAnalysisRuleDTO.
        The fully qualified type of the flow analysis rule.

        :return: The type of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FlowAnalysisRuleDTO.
        The fully qualified type of the flow analysis rule.

        :param type: The type of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._type = type

    @property
    def validation_errors(self):
        """
        Gets the validation_errors of this FlowAnalysisRuleDTO.
        Gets the validation errors from the flow analysis rule. These validation errors represent the problems with the flow analysis rule that must be resolved before it can be scheduled to run.

        :return: The validation_errors of this FlowAnalysisRuleDTO.
        :rtype: list[str]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """
        Sets the validation_errors of this FlowAnalysisRuleDTO.
        Gets the validation errors from the flow analysis rule. These validation errors represent the problems with the flow analysis rule that must be resolved before it can be scheduled to run.

        :param validation_errors: The validation_errors of this FlowAnalysisRuleDTO.
        :type: list[str]
        """

        self._validation_errors = validation_errors

    @property
    def validation_status(self):
        """
        Gets the validation_status of this FlowAnalysisRuleDTO.
        Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)

        :return: The validation_status of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """
        Sets the validation_status of this FlowAnalysisRuleDTO.
        Indicates whether the Flow Analysis Rule is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Flow Analysis Rule is valid)

        :param validation_status: The validation_status of this FlowAnalysisRuleDTO.
        :type: str
        """
        allowed_values = ["VALID", "INVALID", "VALIDATING", ]
        if validation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_status` ({0}), must be one of {1}"
                .format(validation_status, allowed_values)
            )

        self._validation_status = validation_status

    @property
    def versioned_component_id(self):
        """
        Gets the versioned_component_id of this FlowAnalysisRuleDTO.
        The ID of the corresponding component that is under version control

        :return: The versioned_component_id of this FlowAnalysisRuleDTO.
        :rtype: str
        """
        return self._versioned_component_id

    @versioned_component_id.setter
    def versioned_component_id(self, versioned_component_id):
        """
        Sets the versioned_component_id of this FlowAnalysisRuleDTO.
        The ID of the corresponding component that is under version control

        :param versioned_component_id: The versioned_component_id of this FlowAnalysisRuleDTO.
        :type: str
        """

        self._versioned_component_id = versioned_component_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowAnalysisRuleDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

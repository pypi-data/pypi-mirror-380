"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class VersionedReportingTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation_data': 'str',
'bundle': 'Bundle',
'comments': 'str',
'component_type': 'str',
'group_identifier': 'str',
'identifier': 'str',
'instance_identifier': 'str',
'name': 'str',
'position': 'Position',
'properties': 'dict(str, str)',
'property_descriptors': 'dict(str, VersionedPropertyDescriptor)',
'scheduled_state': 'str',
'scheduling_period': 'str',
'scheduling_strategy': 'str',
'type': 'str'    }

    attribute_map = {
        'annotation_data': 'annotationData',
'bundle': 'bundle',
'comments': 'comments',
'component_type': 'componentType',
'group_identifier': 'groupIdentifier',
'identifier': 'identifier',
'instance_identifier': 'instanceIdentifier',
'name': 'name',
'position': 'position',
'properties': 'properties',
'property_descriptors': 'propertyDescriptors',
'scheduled_state': 'scheduledState',
'scheduling_period': 'schedulingPeriod',
'scheduling_strategy': 'schedulingStrategy',
'type': 'type'    }

    def __init__(self, annotation_data=None, bundle=None, comments=None, component_type=None, group_identifier=None, identifier=None, instance_identifier=None, name=None, position=None, properties=None, property_descriptors=None, scheduled_state=None, scheduling_period=None, scheduling_strategy=None, type=None):
        """
        VersionedReportingTask - a model defined in Swagger
        """

        self._annotation_data = None
        self._bundle = None
        self._comments = None
        self._component_type = None
        self._group_identifier = None
        self._identifier = None
        self._instance_identifier = None
        self._name = None
        self._position = None
        self._properties = None
        self._property_descriptors = None
        self._scheduled_state = None
        self._scheduling_period = None
        self._scheduling_strategy = None
        self._type = None

        if annotation_data is not None:
          self.annotation_data = annotation_data
        if bundle is not None:
          self.bundle = bundle
        if comments is not None:
          self.comments = comments
        if component_type is not None:
          self.component_type = component_type
        if group_identifier is not None:
          self.group_identifier = group_identifier
        if identifier is not None:
          self.identifier = identifier
        if instance_identifier is not None:
          self.instance_identifier = instance_identifier
        if name is not None:
          self.name = name
        if position is not None:
          self.position = position
        if properties is not None:
          self.properties = properties
        if property_descriptors is not None:
          self.property_descriptors = property_descriptors
        if scheduled_state is not None:
          self.scheduled_state = scheduled_state
        if scheduling_period is not None:
          self.scheduling_period = scheduling_period
        if scheduling_strategy is not None:
          self.scheduling_strategy = scheduling_strategy
        if type is not None:
          self.type = type

    @property
    def annotation_data(self):
        """
        Gets the annotation_data of this VersionedReportingTask.
        The annotation for the reporting task. This is how the custom UI relays configuration to the reporting task.

        :return: The annotation_data of this VersionedReportingTask.
        :rtype: str
        """
        return self._annotation_data

    @annotation_data.setter
    def annotation_data(self, annotation_data):
        """
        Sets the annotation_data of this VersionedReportingTask.
        The annotation for the reporting task. This is how the custom UI relays configuration to the reporting task.

        :param annotation_data: The annotation_data of this VersionedReportingTask.
        :type: str
        """

        self._annotation_data = annotation_data

    @property
    def bundle(self):
        """
        Gets the bundle of this VersionedReportingTask.

        :return: The bundle of this VersionedReportingTask.
        :rtype: Bundle
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """
        Sets the bundle of this VersionedReportingTask.

        :param bundle: The bundle of this VersionedReportingTask.
        :type: Bundle
        """

        self._bundle = bundle

    @property
    def comments(self):
        """
        Gets the comments of this VersionedReportingTask.
        The user-supplied comments for the component

        :return: The comments of this VersionedReportingTask.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this VersionedReportingTask.
        The user-supplied comments for the component

        :param comments: The comments of this VersionedReportingTask.
        :type: str
        """

        self._comments = comments

    @property
    def component_type(self):
        """
        Gets the component_type of this VersionedReportingTask.

        :return: The component_type of this VersionedReportingTask.
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """
        Sets the component_type of this VersionedReportingTask.

        :param component_type: The component_type of this VersionedReportingTask.
        :type: str
        """
        allowed_values = ["CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE", "REPORTING_TASK", "FLOW_ANALYSIS_RULE", "PARAMETER_CONTEXT", "PARAMETER_PROVIDER", "FLOW_REGISTRY_CLIENT", ]
        if component_type not in allowed_values:
            raise ValueError(
                "Invalid value for `component_type` ({0}), must be one of {1}"
                .format(component_type, allowed_values)
            )

        self._component_type = component_type

    @property
    def group_identifier(self):
        """
        Gets the group_identifier of this VersionedReportingTask.
        The ID of the Process Group that this component belongs to

        :return: The group_identifier of this VersionedReportingTask.
        :rtype: str
        """
        return self._group_identifier

    @group_identifier.setter
    def group_identifier(self, group_identifier):
        """
        Sets the group_identifier of this VersionedReportingTask.
        The ID of the Process Group that this component belongs to

        :param group_identifier: The group_identifier of this VersionedReportingTask.
        :type: str
        """

        self._group_identifier = group_identifier

    @property
    def identifier(self):
        """
        Gets the identifier of this VersionedReportingTask.
        The component's unique identifier

        :return: The identifier of this VersionedReportingTask.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this VersionedReportingTask.
        The component's unique identifier

        :param identifier: The identifier of this VersionedReportingTask.
        :type: str
        """

        self._identifier = identifier

    @property
    def instance_identifier(self):
        """
        Gets the instance_identifier of this VersionedReportingTask.
        The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component

        :return: The instance_identifier of this VersionedReportingTask.
        :rtype: str
        """
        return self._instance_identifier

    @instance_identifier.setter
    def instance_identifier(self, instance_identifier):
        """
        Sets the instance_identifier of this VersionedReportingTask.
        The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component

        :param instance_identifier: The instance_identifier of this VersionedReportingTask.
        :type: str
        """

        self._instance_identifier = instance_identifier

    @property
    def name(self):
        """
        Gets the name of this VersionedReportingTask.
        The component's name

        :return: The name of this VersionedReportingTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VersionedReportingTask.
        The component's name

        :param name: The name of this VersionedReportingTask.
        :type: str
        """

        self._name = name

    @property
    def position(self):
        """
        Gets the position of this VersionedReportingTask.

        :return: The position of this VersionedReportingTask.
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this VersionedReportingTask.

        :param position: The position of this VersionedReportingTask.
        :type: Position
        """

        self._position = position

    @property
    def properties(self):
        """
        Gets the properties of this VersionedReportingTask.
        The properties for the component. Properties whose value is not set will only contain the property name.

        :return: The properties of this VersionedReportingTask.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this VersionedReportingTask.
        The properties for the component. Properties whose value is not set will only contain the property name.

        :param properties: The properties of this VersionedReportingTask.
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def property_descriptors(self):
        """
        Gets the property_descriptors of this VersionedReportingTask.
        The property descriptors for the component.

        :return: The property_descriptors of this VersionedReportingTask.
        :rtype: dict(str, VersionedPropertyDescriptor)
        """
        return self._property_descriptors

    @property_descriptors.setter
    def property_descriptors(self, property_descriptors):
        """
        Sets the property_descriptors of this VersionedReportingTask.
        The property descriptors for the component.

        :param property_descriptors: The property_descriptors of this VersionedReportingTask.
        :type: dict(str, VersionedPropertyDescriptor)
        """

        self._property_descriptors = property_descriptors

    @property
    def scheduled_state(self):
        """
        Gets the scheduled_state of this VersionedReportingTask.
        Indicates the scheduled state for the Reporting Task

        :return: The scheduled_state of this VersionedReportingTask.
        :rtype: str
        """
        return self._scheduled_state

    @scheduled_state.setter
    def scheduled_state(self, scheduled_state):
        """
        Sets the scheduled_state of this VersionedReportingTask.
        Indicates the scheduled state for the Reporting Task

        :param scheduled_state: The scheduled_state of this VersionedReportingTask.
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "RUNNING", ]
        if scheduled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `scheduled_state` ({0}), must be one of {1}"
                .format(scheduled_state, allowed_values)
            )

        self._scheduled_state = scheduled_state

    @property
    def scheduling_period(self):
        """
        Gets the scheduling_period of this VersionedReportingTask.
        The frequency with which to schedule the reporting task. The format of the value will depend on the value of schedulingStrategy.

        :return: The scheduling_period of this VersionedReportingTask.
        :rtype: str
        """
        return self._scheduling_period

    @scheduling_period.setter
    def scheduling_period(self, scheduling_period):
        """
        Sets the scheduling_period of this VersionedReportingTask.
        The frequency with which to schedule the reporting task. The format of the value will depend on the value of schedulingStrategy.

        :param scheduling_period: The scheduling_period of this VersionedReportingTask.
        :type: str
        """

        self._scheduling_period = scheduling_period

    @property
    def scheduling_strategy(self):
        """
        Gets the scheduling_strategy of this VersionedReportingTask.
        Indicates scheduling strategy that should dictate how the reporting task is triggered.

        :return: The scheduling_strategy of this VersionedReportingTask.
        :rtype: str
        """
        return self._scheduling_strategy

    @scheduling_strategy.setter
    def scheduling_strategy(self, scheduling_strategy):
        """
        Sets the scheduling_strategy of this VersionedReportingTask.
        Indicates scheduling strategy that should dictate how the reporting task is triggered.

        :param scheduling_strategy: The scheduling_strategy of this VersionedReportingTask.
        :type: str
        """

        self._scheduling_strategy = scheduling_strategy

    @property
    def type(self):
        """
        Gets the type of this VersionedReportingTask.
        The type of the extension component

        :return: The type of this VersionedReportingTask.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VersionedReportingTask.
        The type of the extension component

        :param type: The type of this VersionedReportingTask.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionedReportingTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ProcessorConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration': 'str',
'processor_class_name': 'str'    }

    attribute_map = {
        'configuration': 'configuration',
'processor_class_name': 'processorClassName'    }

    def __init__(self, configuration=None, processor_class_name=None):
        """
        ProcessorConfiguration - a model defined in Swagger
        """

        self._configuration = None
        self._processor_class_name = None

        if configuration is not None:
          self.configuration = configuration
        if processor_class_name is not None:
          self.processor_class_name = processor_class_name

    @property
    def configuration(self):
        """
        Gets the configuration of this ProcessorConfiguration.
        A description of how the Processor should be configured in order to accomplish the use case

        :return: The configuration of this ProcessorConfiguration.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """
        Sets the configuration of this ProcessorConfiguration.
        A description of how the Processor should be configured in order to accomplish the use case

        :param configuration: The configuration of this ProcessorConfiguration.
        :type: str
        """

        self._configuration = configuration

    @property
    def processor_class_name(self):
        """
        Gets the processor_class_name of this ProcessorConfiguration.
        The fully qualified classname of the Processor that should be used to accomplish the use case

        :return: The processor_class_name of this ProcessorConfiguration.
        :rtype: str
        """
        return self._processor_class_name

    @processor_class_name.setter
    def processor_class_name(self, processor_class_name):
        """
        Sets the processor_class_name of this ProcessorConfiguration.
        The fully qualified classname of the Processor that should be used to accomplish the use case

        :param processor_class_name: The processor_class_name of this ProcessorConfiguration.
        :type: str
        """

        self._processor_class_name = processor_class_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProcessorConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class GarbageCollectionDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_count': 'int',
'collection_millis': 'int',
'collection_time': 'str',
'name': 'str'    }

    attribute_map = {
        'collection_count': 'collectionCount',
'collection_millis': 'collectionMillis',
'collection_time': 'collectionTime',
'name': 'name'    }

    def __init__(self, collection_count=None, collection_millis=None, collection_time=None, name=None):
        """
        GarbageCollectionDTO - a model defined in Swagger
        """

        self._collection_count = None
        self._collection_millis = None
        self._collection_time = None
        self._name = None

        if collection_count is not None:
          self.collection_count = collection_count
        if collection_millis is not None:
          self.collection_millis = collection_millis
        if collection_time is not None:
          self.collection_time = collection_time
        if name is not None:
          self.name = name

    @property
    def collection_count(self):
        """
        Gets the collection_count of this GarbageCollectionDTO.
        The number of times garbage collection has run.

        :return: The collection_count of this GarbageCollectionDTO.
        :rtype: int
        """
        return self._collection_count

    @collection_count.setter
    def collection_count(self, collection_count):
        """
        Sets the collection_count of this GarbageCollectionDTO.
        The number of times garbage collection has run.

        :param collection_count: The collection_count of this GarbageCollectionDTO.
        :type: int
        """

        self._collection_count = collection_count

    @property
    def collection_millis(self):
        """
        Gets the collection_millis of this GarbageCollectionDTO.
        The total number of milliseconds spent garbage collecting.

        :return: The collection_millis of this GarbageCollectionDTO.
        :rtype: int
        """
        return self._collection_millis

    @collection_millis.setter
    def collection_millis(self, collection_millis):
        """
        Sets the collection_millis of this GarbageCollectionDTO.
        The total number of milliseconds spent garbage collecting.

        :param collection_millis: The collection_millis of this GarbageCollectionDTO.
        :type: int
        """

        self._collection_millis = collection_millis

    @property
    def collection_time(self):
        """
        Gets the collection_time of this GarbageCollectionDTO.
        The total amount of time spent garbage collecting.

        :return: The collection_time of this GarbageCollectionDTO.
        :rtype: str
        """
        return self._collection_time

    @collection_time.setter
    def collection_time(self, collection_time):
        """
        Sets the collection_time of this GarbageCollectionDTO.
        The total amount of time spent garbage collecting.

        :param collection_time: The collection_time of this GarbageCollectionDTO.
        :type: str
        """

        self._collection_time = collection_time

    @property
    def name(self):
        """
        Gets the name of this GarbageCollectionDTO.
        The name of the garbage collector.

        :return: The name of this GarbageCollectionDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this GarbageCollectionDTO.
        The name of the garbage collector.

        :param name: The name of this GarbageCollectionDTO.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GarbageCollectionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

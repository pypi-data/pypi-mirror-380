"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ProcessGroupUploadEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disconnected_node_acknowledged': 'bool',
'flow_snapshot': 'RegisteredFlowSnapshot',
'group_id': 'str',
'group_name': 'str',
'position_dto': 'PositionDTO',
'revision_dto': 'RevisionDTO'    }

    attribute_map = {
        'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'flow_snapshot': 'flowSnapshot',
'group_id': 'groupId',
'group_name': 'groupName',
'position_dto': 'positionDTO',
'revision_dto': 'revisionDTO'    }

    def __init__(self, disconnected_node_acknowledged=None, flow_snapshot=None, group_id=None, group_name=None, position_dto=None, revision_dto=None):
        """
        ProcessGroupUploadEntity - a model defined in Swagger
        """

        self._disconnected_node_acknowledged = None
        self._flow_snapshot = None
        self._group_id = None
        self._group_name = None
        self._position_dto = None
        self._revision_dto = None

        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if flow_snapshot is not None:
          self.flow_snapshot = flow_snapshot
        if group_id is not None:
          self.group_id = group_id
        if group_name is not None:
          self.group_name = group_name
        if position_dto is not None:
          self.position_dto = position_dto
        if revision_dto is not None:
          self.revision_dto = revision_dto

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this ProcessGroupUploadEntity.

        :return: The disconnected_node_acknowledged of this ProcessGroupUploadEntity.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this ProcessGroupUploadEntity.

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this ProcessGroupUploadEntity.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def flow_snapshot(self):
        """
        Gets the flow_snapshot of this ProcessGroupUploadEntity.

        :return: The flow_snapshot of this ProcessGroupUploadEntity.
        :rtype: RegisteredFlowSnapshot
        """
        return self._flow_snapshot

    @flow_snapshot.setter
    def flow_snapshot(self, flow_snapshot):
        """
        Sets the flow_snapshot of this ProcessGroupUploadEntity.

        :param flow_snapshot: The flow_snapshot of this ProcessGroupUploadEntity.
        :type: RegisteredFlowSnapshot
        """

        self._flow_snapshot = flow_snapshot

    @property
    def group_id(self):
        """
        Gets the group_id of this ProcessGroupUploadEntity.

        :return: The group_id of this ProcessGroupUploadEntity.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this ProcessGroupUploadEntity.

        :param group_id: The group_id of this ProcessGroupUploadEntity.
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """
        Gets the group_name of this ProcessGroupUploadEntity.

        :return: The group_name of this ProcessGroupUploadEntity.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this ProcessGroupUploadEntity.

        :param group_name: The group_name of this ProcessGroupUploadEntity.
        :type: str
        """

        self._group_name = group_name

    @property
    def position_dto(self):
        """
        Gets the position_dto of this ProcessGroupUploadEntity.

        :return: The position_dto of this ProcessGroupUploadEntity.
        :rtype: PositionDTO
        """
        return self._position_dto

    @position_dto.setter
    def position_dto(self, position_dto):
        """
        Sets the position_dto of this ProcessGroupUploadEntity.

        :param position_dto: The position_dto of this ProcessGroupUploadEntity.
        :type: PositionDTO
        """

        self._position_dto = position_dto

    @property
    def revision_dto(self):
        """
        Gets the revision_dto of this ProcessGroupUploadEntity.

        :return: The revision_dto of this ProcessGroupUploadEntity.
        :rtype: RevisionDTO
        """
        return self._revision_dto

    @revision_dto.setter
    def revision_dto(self, revision_dto):
        """
        Sets the revision_dto of this ProcessGroupUploadEntity.

        :param revision_dto: The revision_dto of this ProcessGroupUploadEntity.
        :type: RevisionDTO
        """

        self._revision_dto = revision_dto

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProcessGroupUploadEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

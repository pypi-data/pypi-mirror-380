"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ControllerConfigurationEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'ControllerConfigurationDTO',
'disconnected_node_acknowledged': 'bool',
'permissions': 'PermissionsDTO',
'revision': 'RevisionDTO'    }

    attribute_map = {
        'component': 'component',
'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'permissions': 'permissions',
'revision': 'revision'    }

    def __init__(self, component=None, disconnected_node_acknowledged=None, permissions=None, revision=None):
        """
        ControllerConfigurationEntity - a model defined in Swagger
        """

        self._component = None
        self._disconnected_node_acknowledged = None
        self._permissions = None
        self._revision = None

        if component is not None:
          self.component = component
        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if permissions is not None:
          self.permissions = permissions
        if revision is not None:
          self.revision = revision

    @property
    def component(self):
        """
        Gets the component of this ControllerConfigurationEntity.

        :return: The component of this ControllerConfigurationEntity.
        :rtype: ControllerConfigurationDTO
        """
        return self._component

    @component.setter
    def component(self, component):
        """
        Sets the component of this ControllerConfigurationEntity.

        :param component: The component of this ControllerConfigurationEntity.
        :type: ControllerConfigurationDTO
        """

        self._component = component

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this ControllerConfigurationEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :return: The disconnected_node_acknowledged of this ControllerConfigurationEntity.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this ControllerConfigurationEntity.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this ControllerConfigurationEntity.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def permissions(self):
        """
        Gets the permissions of this ControllerConfigurationEntity.

        :return: The permissions of this ControllerConfigurationEntity.
        :rtype: PermissionsDTO
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this ControllerConfigurationEntity.

        :param permissions: The permissions of this ControllerConfigurationEntity.
        :type: PermissionsDTO
        """

        self._permissions = permissions

    @property
    def revision(self):
        """
        Gets the revision of this ControllerConfigurationEntity.

        :return: The revision of this ControllerConfigurationEntity.
        :rtype: RevisionDTO
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this ControllerConfigurationEntity.

        :param revision: The revision of this ControllerConfigurationEntity.
        :type: RevisionDTO
        """

        self._revision = revision

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ControllerConfigurationEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ParameterProviderDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_components': 'list[AffectedComponentEntity]',
'annotation_data': 'str',
'bundle': 'BundleDTO',
'comments': 'str',
'custom_ui_url': 'str',
'deprecated': 'bool',
'descriptors': 'dict(str, PropertyDescriptorDTO)',
'extension_missing': 'bool',
'id': 'str',
'multiple_versions_available': 'bool',
'name': 'str',
'parameter_group_configurations': 'list[ParameterGroupConfigurationEntity]',
'parameter_status': 'list[ParameterStatusDTO]',
'parent_group_id': 'str',
'persists_state': 'bool',
'position': 'PositionDTO',
'properties': 'dict(str, str)',
'referencing_parameter_contexts': 'list[ParameterProviderReferencingComponentEntity]',
'restricted': 'bool',
'type': 'str',
'validation_errors': 'list[str]',
'validation_status': 'str',
'versioned_component_id': 'str'    }

    attribute_map = {
        'affected_components': 'affectedComponents',
'annotation_data': 'annotationData',
'bundle': 'bundle',
'comments': 'comments',
'custom_ui_url': 'customUiUrl',
'deprecated': 'deprecated',
'descriptors': 'descriptors',
'extension_missing': 'extensionMissing',
'id': 'id',
'multiple_versions_available': 'multipleVersionsAvailable',
'name': 'name',
'parameter_group_configurations': 'parameterGroupConfigurations',
'parameter_status': 'parameterStatus',
'parent_group_id': 'parentGroupId',
'persists_state': 'persistsState',
'position': 'position',
'properties': 'properties',
'referencing_parameter_contexts': 'referencingParameterContexts',
'restricted': 'restricted',
'type': 'type',
'validation_errors': 'validationErrors',
'validation_status': 'validationStatus',
'versioned_component_id': 'versionedComponentId'    }

    def __init__(self, affected_components=None, annotation_data=None, bundle=None, comments=None, custom_ui_url=None, deprecated=None, descriptors=None, extension_missing=None, id=None, multiple_versions_available=None, name=None, parameter_group_configurations=None, parameter_status=None, parent_group_id=None, persists_state=None, position=None, properties=None, referencing_parameter_contexts=None, restricted=None, type=None, validation_errors=None, validation_status=None, versioned_component_id=None):
        """
        ParameterProviderDTO - a model defined in Swagger
        """

        self._affected_components = None
        self._annotation_data = None
        self._bundle = None
        self._comments = None
        self._custom_ui_url = None
        self._deprecated = None
        self._descriptors = None
        self._extension_missing = None
        self._id = None
        self._multiple_versions_available = None
        self._name = None
        self._parameter_group_configurations = None
        self._parameter_status = None
        self._parent_group_id = None
        self._persists_state = None
        self._position = None
        self._properties = None
        self._referencing_parameter_contexts = None
        self._restricted = None
        self._type = None
        self._validation_errors = None
        self._validation_status = None
        self._versioned_component_id = None

        if affected_components is not None:
          self.affected_components = affected_components
        if annotation_data is not None:
          self.annotation_data = annotation_data
        if bundle is not None:
          self.bundle = bundle
        if comments is not None:
          self.comments = comments
        if custom_ui_url is not None:
          self.custom_ui_url = custom_ui_url
        if deprecated is not None:
          self.deprecated = deprecated
        if descriptors is not None:
          self.descriptors = descriptors
        if extension_missing is not None:
          self.extension_missing = extension_missing
        if id is not None:
          self.id = id
        if multiple_versions_available is not None:
          self.multiple_versions_available = multiple_versions_available
        if name is not None:
          self.name = name
        if parameter_group_configurations is not None:
          self.parameter_group_configurations = parameter_group_configurations
        if parameter_status is not None:
          self.parameter_status = parameter_status
        if parent_group_id is not None:
          self.parent_group_id = parent_group_id
        if persists_state is not None:
          self.persists_state = persists_state
        if position is not None:
          self.position = position
        if properties is not None:
          self.properties = properties
        if referencing_parameter_contexts is not None:
          self.referencing_parameter_contexts = referencing_parameter_contexts
        if restricted is not None:
          self.restricted = restricted
        if type is not None:
          self.type = type
        if validation_errors is not None:
          self.validation_errors = validation_errors
        if validation_status is not None:
          self.validation_status = validation_status
        if versioned_component_id is not None:
          self.versioned_component_id = versioned_component_id

    @property
    def affected_components(self):
        """
        Gets the affected_components of this ParameterProviderDTO.
        The set of all components in the flow that are referencing Parameters provided by this provider

        :return: The affected_components of this ParameterProviderDTO.
        :rtype: list[AffectedComponentEntity]
        """
        return self._affected_components

    @affected_components.setter
    def affected_components(self, affected_components):
        """
        Sets the affected_components of this ParameterProviderDTO.
        The set of all components in the flow that are referencing Parameters provided by this provider

        :param affected_components: The affected_components of this ParameterProviderDTO.
        :type: list[AffectedComponentEntity]
        """

        self._affected_components = affected_components

    @property
    def annotation_data(self):
        """
        Gets the annotation_data of this ParameterProviderDTO.
        The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.

        :return: The annotation_data of this ParameterProviderDTO.
        :rtype: str
        """
        return self._annotation_data

    @annotation_data.setter
    def annotation_data(self, annotation_data):
        """
        Sets the annotation_data of this ParameterProviderDTO.
        The annotation data for the parameter provider. This is how the custom UI relays configuration to the parameter provider.

        :param annotation_data: The annotation_data of this ParameterProviderDTO.
        :type: str
        """

        self._annotation_data = annotation_data

    @property
    def bundle(self):
        """
        Gets the bundle of this ParameterProviderDTO.

        :return: The bundle of this ParameterProviderDTO.
        :rtype: BundleDTO
        """
        return self._bundle

    @bundle.setter
    def bundle(self, bundle):
        """
        Sets the bundle of this ParameterProviderDTO.

        :param bundle: The bundle of this ParameterProviderDTO.
        :type: BundleDTO
        """

        self._bundle = bundle

    @property
    def comments(self):
        """
        Gets the comments of this ParameterProviderDTO.
        The comments of the parameter provider.

        :return: The comments of this ParameterProviderDTO.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this ParameterProviderDTO.
        The comments of the parameter provider.

        :param comments: The comments of this ParameterProviderDTO.
        :type: str
        """

        self._comments = comments

    @property
    def custom_ui_url(self):
        """
        Gets the custom_ui_url of this ParameterProviderDTO.
        The URL for the custom configuration UI for the parameter provider.

        :return: The custom_ui_url of this ParameterProviderDTO.
        :rtype: str
        """
        return self._custom_ui_url

    @custom_ui_url.setter
    def custom_ui_url(self, custom_ui_url):
        """
        Sets the custom_ui_url of this ParameterProviderDTO.
        The URL for the custom configuration UI for the parameter provider.

        :param custom_ui_url: The custom_ui_url of this ParameterProviderDTO.
        :type: str
        """

        self._custom_ui_url = custom_ui_url

    @property
    def deprecated(self):
        """
        Gets the deprecated of this ParameterProviderDTO.
        Whether the parameter provider has been deprecated.

        :return: The deprecated of this ParameterProviderDTO.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """
        Sets the deprecated of this ParameterProviderDTO.
        Whether the parameter provider has been deprecated.

        :param deprecated: The deprecated of this ParameterProviderDTO.
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def descriptors(self):
        """
        Gets the descriptors of this ParameterProviderDTO.
        The descriptors for the parameter providers properties.

        :return: The descriptors of this ParameterProviderDTO.
        :rtype: dict(str, PropertyDescriptorDTO)
        """
        return self._descriptors

    @descriptors.setter
    def descriptors(self, descriptors):
        """
        Sets the descriptors of this ParameterProviderDTO.
        The descriptors for the parameter providers properties.

        :param descriptors: The descriptors of this ParameterProviderDTO.
        :type: dict(str, PropertyDescriptorDTO)
        """

        self._descriptors = descriptors

    @property
    def extension_missing(self):
        """
        Gets the extension_missing of this ParameterProviderDTO.
        Whether the underlying extension is missing.

        :return: The extension_missing of this ParameterProviderDTO.
        :rtype: bool
        """
        return self._extension_missing

    @extension_missing.setter
    def extension_missing(self, extension_missing):
        """
        Sets the extension_missing of this ParameterProviderDTO.
        Whether the underlying extension is missing.

        :param extension_missing: The extension_missing of this ParameterProviderDTO.
        :type: bool
        """

        self._extension_missing = extension_missing

    @property
    def id(self):
        """
        Gets the id of this ParameterProviderDTO.
        The id of the component.

        :return: The id of this ParameterProviderDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ParameterProviderDTO.
        The id of the component.

        :param id: The id of this ParameterProviderDTO.
        :type: str
        """

        self._id = id

    @property
    def multiple_versions_available(self):
        """
        Gets the multiple_versions_available of this ParameterProviderDTO.
        Whether the parameter provider has multiple versions available.

        :return: The multiple_versions_available of this ParameterProviderDTO.
        :rtype: bool
        """
        return self._multiple_versions_available

    @multiple_versions_available.setter
    def multiple_versions_available(self, multiple_versions_available):
        """
        Sets the multiple_versions_available of this ParameterProviderDTO.
        Whether the parameter provider has multiple versions available.

        :param multiple_versions_available: The multiple_versions_available of this ParameterProviderDTO.
        :type: bool
        """

        self._multiple_versions_available = multiple_versions_available

    @property
    def name(self):
        """
        Gets the name of this ParameterProviderDTO.
        The name of the parameter provider.

        :return: The name of this ParameterProviderDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ParameterProviderDTO.
        The name of the parameter provider.

        :param name: The name of this ParameterProviderDTO.
        :type: str
        """

        self._name = name

    @property
    def parameter_group_configurations(self):
        """
        Gets the parameter_group_configurations of this ParameterProviderDTO.
        Configuration for any fetched parameter groups.

        :return: The parameter_group_configurations of this ParameterProviderDTO.
        :rtype: list[ParameterGroupConfigurationEntity]
        """
        return self._parameter_group_configurations

    @parameter_group_configurations.setter
    def parameter_group_configurations(self, parameter_group_configurations):
        """
        Sets the parameter_group_configurations of this ParameterProviderDTO.
        Configuration for any fetched parameter groups.

        :param parameter_group_configurations: The parameter_group_configurations of this ParameterProviderDTO.
        :type: list[ParameterGroupConfigurationEntity]
        """

        self._parameter_group_configurations = parameter_group_configurations

    @property
    def parameter_status(self):
        """
        Gets the parameter_status of this ParameterProviderDTO.
        The status of all provided parameters for this parameter provider

        :return: The parameter_status of this ParameterProviderDTO.
        :rtype: list[ParameterStatusDTO]
        """
        return self._parameter_status

    @parameter_status.setter
    def parameter_status(self, parameter_status):
        """
        Sets the parameter_status of this ParameterProviderDTO.
        The status of all provided parameters for this parameter provider

        :param parameter_status: The parameter_status of this ParameterProviderDTO.
        :type: list[ParameterStatusDTO]
        """

        self._parameter_status = parameter_status

    @property
    def parent_group_id(self):
        """
        Gets the parent_group_id of this ParameterProviderDTO.
        The id of parent process group of this component if applicable.

        :return: The parent_group_id of this ParameterProviderDTO.
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """
        Sets the parent_group_id of this ParameterProviderDTO.
        The id of parent process group of this component if applicable.

        :param parent_group_id: The parent_group_id of this ParameterProviderDTO.
        :type: str
        """

        self._parent_group_id = parent_group_id

    @property
    def persists_state(self):
        """
        Gets the persists_state of this ParameterProviderDTO.
        Whether the parameter provider persists state.

        :return: The persists_state of this ParameterProviderDTO.
        :rtype: bool
        """
        return self._persists_state

    @persists_state.setter
    def persists_state(self, persists_state):
        """
        Sets the persists_state of this ParameterProviderDTO.
        Whether the parameter provider persists state.

        :param persists_state: The persists_state of this ParameterProviderDTO.
        :type: bool
        """

        self._persists_state = persists_state

    @property
    def position(self):
        """
        Gets the position of this ParameterProviderDTO.

        :return: The position of this ParameterProviderDTO.
        :rtype: PositionDTO
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this ParameterProviderDTO.

        :param position: The position of this ParameterProviderDTO.
        :type: PositionDTO
        """

        self._position = position

    @property
    def properties(self):
        """
        Gets the properties of this ParameterProviderDTO.
        The properties of the parameter provider.

        :return: The properties of this ParameterProviderDTO.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this ParameterProviderDTO.
        The properties of the parameter provider.

        :param properties: The properties of this ParameterProviderDTO.
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def referencing_parameter_contexts(self):
        """
        Gets the referencing_parameter_contexts of this ParameterProviderDTO.
        The Parameter Contexts that reference this Parameter Provider

        :return: The referencing_parameter_contexts of this ParameterProviderDTO.
        :rtype: list[ParameterProviderReferencingComponentEntity]
        """
        return self._referencing_parameter_contexts

    @referencing_parameter_contexts.setter
    def referencing_parameter_contexts(self, referencing_parameter_contexts):
        """
        Sets the referencing_parameter_contexts of this ParameterProviderDTO.
        The Parameter Contexts that reference this Parameter Provider

        :param referencing_parameter_contexts: The referencing_parameter_contexts of this ParameterProviderDTO.
        :type: list[ParameterProviderReferencingComponentEntity]
        """

        self._referencing_parameter_contexts = referencing_parameter_contexts

    @property
    def restricted(self):
        """
        Gets the restricted of this ParameterProviderDTO.
        Whether the parameter provider requires elevated privileges.

        :return: The restricted of this ParameterProviderDTO.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """
        Sets the restricted of this ParameterProviderDTO.
        Whether the parameter provider requires elevated privileges.

        :param restricted: The restricted of this ParameterProviderDTO.
        :type: bool
        """

        self._restricted = restricted

    @property
    def type(self):
        """
        Gets the type of this ParameterProviderDTO.
        The fully qualified type of the parameter provider.

        :return: The type of this ParameterProviderDTO.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ParameterProviderDTO.
        The fully qualified type of the parameter provider.

        :param type: The type of this ParameterProviderDTO.
        :type: str
        """

        self._type = type

    @property
    def validation_errors(self):
        """
        Gets the validation_errors of this ParameterProviderDTO.
        Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.

        :return: The validation_errors of this ParameterProviderDTO.
        :rtype: list[str]
        """
        return self._validation_errors

    @validation_errors.setter
    def validation_errors(self, validation_errors):
        """
        Sets the validation_errors of this ParameterProviderDTO.
        Gets the validation errors from the parameter provider. These validation errors represent the problems with the parameter provider that must be resolved before it can be scheduled to run.

        :param validation_errors: The validation_errors of this ParameterProviderDTO.
        :type: list[str]
        """

        self._validation_errors = validation_errors

    @property
    def validation_status(self):
        """
        Gets the validation_status of this ParameterProviderDTO.
        Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)

        :return: The validation_status of this ParameterProviderDTO.
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """
        Sets the validation_status of this ParameterProviderDTO.
        Indicates whether the Parameter Provider is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Parameter Provider is valid)

        :param validation_status: The validation_status of this ParameterProviderDTO.
        :type: str
        """
        allowed_values = ["VALID", "INVALID", "VALIDATING", ]
        if validation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_status` ({0}), must be one of {1}"
                .format(validation_status, allowed_values)
            )

        self._validation_status = validation_status

    @property
    def versioned_component_id(self):
        """
        Gets the versioned_component_id of this ParameterProviderDTO.
        The ID of the corresponding component that is under version control

        :return: The versioned_component_id of this ParameterProviderDTO.
        :rtype: str
        """
        return self._versioned_component_id

    @versioned_component_id.setter
    def versioned_component_id(self, versioned_component_id):
        """
        Sets the versioned_component_id of this ParameterProviderDTO.
        The ID of the corresponding component that is under version control

        :param versioned_component_id: The versioned_component_id of this ParameterProviderDTO.
        :type: str
        """

        self._versioned_component_id = versioned_component_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParameterProviderDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class BuildInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compiler': 'str',
'compiler_flags': 'str',
'revision': 'str',
'target_arch': 'str',
'timestamp': 'int',
'version': 'str'    }

    attribute_map = {
        'compiler': 'compiler',
'compiler_flags': 'compilerFlags',
'revision': 'revision',
'target_arch': 'targetArch',
'timestamp': 'timestamp',
'version': 'version'    }

    def __init__(self, compiler=None, compiler_flags=None, revision=None, target_arch=None, timestamp=None, version=None):
        """
        BuildInfo - a model defined in Swagger
        """

        self._compiler = None
        self._compiler_flags = None
        self._revision = None
        self._target_arch = None
        self._timestamp = None
        self._version = None

        if compiler is not None:
          self.compiler = compiler
        if compiler_flags is not None:
          self.compiler_flags = compiler_flags
        if revision is not None:
          self.revision = revision
        if target_arch is not None:
          self.target_arch = target_arch
        if timestamp is not None:
          self.timestamp = timestamp
        if version is not None:
          self.version = version

    @property
    def compiler(self):
        """
        Gets the compiler of this BuildInfo.
        The compiler used for the build

        :return: The compiler of this BuildInfo.
        :rtype: str
        """
        return self._compiler

    @compiler.setter
    def compiler(self, compiler):
        """
        Sets the compiler of this BuildInfo.
        The compiler used for the build

        :param compiler: The compiler of this BuildInfo.
        :type: str
        """

        self._compiler = compiler

    @property
    def compiler_flags(self):
        """
        Gets the compiler_flags of this BuildInfo.
        The compiler flags used for the build.

        :return: The compiler_flags of this BuildInfo.
        :rtype: str
        """
        return self._compiler_flags

    @compiler_flags.setter
    def compiler_flags(self, compiler_flags):
        """
        Sets the compiler_flags of this BuildInfo.
        The compiler flags used for the build.

        :param compiler_flags: The compiler_flags of this BuildInfo.
        :type: str
        """

        self._compiler_flags = compiler_flags

    @property
    def revision(self):
        """
        Gets the revision of this BuildInfo.
        The SCM revision id of the source code used for this build.

        :return: The revision of this BuildInfo.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this BuildInfo.
        The SCM revision id of the source code used for this build.

        :param revision: The revision of this BuildInfo.
        :type: str
        """

        self._revision = revision

    @property
    def target_arch(self):
        """
        Gets the target_arch of this BuildInfo.
        The target architecture of the built component.

        :return: The target_arch of this BuildInfo.
        :rtype: str
        """
        return self._target_arch

    @target_arch.setter
    def target_arch(self, target_arch):
        """
        Sets the target_arch of this BuildInfo.
        The target architecture of the built component.

        :param target_arch: The target_arch of this BuildInfo.
        :type: str
        """

        self._target_arch = target_arch

    @property
    def timestamp(self):
        """
        Gets the timestamp of this BuildInfo.
        The timestamp (milliseconds since Epoch) of the build.

        :return: The timestamp of this BuildInfo.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this BuildInfo.
        The timestamp (milliseconds since Epoch) of the build.

        :param timestamp: The timestamp of this BuildInfo.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def version(self):
        """
        Gets the version of this BuildInfo.
        The version number of the built component.

        :return: The version of this BuildInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this BuildInfo.
        The version number of the built component.

        :param version: The version of this BuildInfo.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BuildInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

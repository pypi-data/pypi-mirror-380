"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class FlowsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_available_flow_fields(self, **kwargs):
        """
        Get flow fields.

        Retrieves the flow field names that can be used for searching or sorting on flows.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_available_flow_fields_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.registry.models.Fields`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_available_flow_fields_with_http_info(**kwargs)
        else:
            (data) = self.get_available_flow_fields_with_http_info(**kwargs)
            return data

    def get_available_flow_fields_with_http_info(self, **kwargs):
        """
        Get flow fields.

        Retrieves the flow field names that can be used for searching or sorting on flows.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_available_flow_fields()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.Fields`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_available_flow_fields" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/fields', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Fields',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow1(self, flow_id, **kwargs):
        """
        Get flow.

        Gets a flow by id.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow1_with_http_info()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.VersionedFlow`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow1_with_http_info(flow_id, **kwargs)
        else:
            (data) = self.get_flow1_with_http_info(flow_id, **kwargs)
            return data

    def get_flow1_with_http_info(self, flow_id, **kwargs):
        """
        Get flow.

        Gets a flow by id.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow1()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.VersionedFlow`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['flow_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow1`")

 
        collection_formats = {}

        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/{flowId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlow',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_version1(self, flow_id, version_number, **kwargs):
        """
        Get flow version.

        Gets the given version of a flow, including metadata and flow content.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_version1_with_http_info()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
            version_number (int): 
                The version number (required)
                
        Returns:
            :class:`~nipyapi.registry.models.VersionedFlowSnapshot`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_version1_with_http_info(flow_id, version_number, **kwargs)
        else:
            (data) = self.get_flow_version1_with_http_info(flow_id, version_number, **kwargs)
            return data

    def get_flow_version1_with_http_info(self, flow_id, version_number, **kwargs):
        """
        Get flow version.

        Gets the given version of a flow, including metadata and flow content.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_version1()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
            version_number (int): 
                The version number (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.VersionedFlowSnapshot`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['flow_id', 'version_number']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_version1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_version1`")
        # verify the required parameter 'version_number' is set
        if ('version_number' not in params) or (params['version_number'] is None):
            raise ValueError("Missing the required parameter `version_number` when calling `get_flow_version1`")

 
 
        collection_formats = {}

        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']
        if 'version_number' in params:
            path_params['versionNumber'] = params['version_number']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/{flowId}/versions/{versionNumber}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowSnapshot',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_versions1(self, flow_id, **kwargs):
        """
        Get flow versions.

        Gets summary information for all versions of a given flow. Versions are ordered newest->oldest.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_versions1_with_http_info()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.list[VersionedFlowSnapshotMetadata]`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_versions1_with_http_info(flow_id, **kwargs)
        else:
            (data) = self.get_flow_versions1_with_http_info(flow_id, **kwargs)
            return data

    def get_flow_versions1_with_http_info(self, flow_id, **kwargs):
        """
        Get flow versions.

        Gets summary information for all versions of a given flow. Versions are ordered newest->oldest.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_versions1()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.list[VersionedFlowSnapshotMetadata]`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['flow_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_versions1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_flow_versions1`")

 
        collection_formats = {}

        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/{flowId}/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[VersionedFlowSnapshotMetadata]',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_latest_flow_version1(self, flow_id, **kwargs):
        """
        Get latest flow version.

        Gets the latest version of a flow, including metadata and flow content.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_latest_flow_version1_with_http_info()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.VersionedFlowSnapshot`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_latest_flow_version1_with_http_info(flow_id, **kwargs)
        else:
            (data) = self.get_latest_flow_version1_with_http_info(flow_id, **kwargs)
            return data

    def get_latest_flow_version1_with_http_info(self, flow_id, **kwargs):
        """
        Get latest flow version.

        Gets the latest version of a flow, including metadata and flow content.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_latest_flow_version1()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.VersionedFlowSnapshot`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['flow_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_flow_version1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_latest_flow_version1`")

 
        collection_formats = {}

        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/{flowId}/versions/latest', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowSnapshot',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_latest_flow_version_metadata1(self, flow_id, **kwargs):
        """
        Get latest flow version metadata.

        Gets the metadata for the latest version of a flow.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_latest_flow_version_metadata1_with_http_info()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            :class:`~nipyapi.registry.models.VersionedFlowSnapshotMetadata`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_latest_flow_version_metadata1_with_http_info(flow_id, **kwargs)
        else:
            (data) = self.get_latest_flow_version_metadata1_with_http_info(flow_id, **kwargs)
            return data

    def get_latest_flow_version_metadata1_with_http_info(self, flow_id, **kwargs):
        """
        Get latest flow version metadata.

        Gets the metadata for the latest version of a flow.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_latest_flow_version_metadata1()`` method instead.
        
        Args:
            flow_id (str): 
                The flow identifier (required)
                
        Returns:
            tuple: (:class:`~nipyapi.registry.models.VersionedFlowSnapshotMetadata`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['flow_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_flow_version_metadata1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_latest_flow_version_metadata1`")

 
        collection_formats = {}

        path_params = {}
        if 'flow_id' in params:
            path_params['flowId'] = params['flow_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flows/{flowId}/versions/latest/metadata', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowSnapshotMetadata',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

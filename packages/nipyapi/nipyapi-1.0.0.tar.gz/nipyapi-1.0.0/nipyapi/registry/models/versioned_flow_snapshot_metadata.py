"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class VersionedFlowSnapshotMetadata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author': 'str',
'bucket_identifier': 'str',
'comments': 'str',
'flow_identifier': 'str',
'link': 'Link',
'timestamp': 'int',
'version': 'int'    }

    attribute_map = {
        'author': 'author',
'bucket_identifier': 'bucketIdentifier',
'comments': 'comments',
'flow_identifier': 'flowIdentifier',
'link': 'link',
'timestamp': 'timestamp',
'version': 'version'    }

    def __init__(self, author=None, bucket_identifier=None, comments=None, flow_identifier=None, link=None, timestamp=None, version=None):
        """
        VersionedFlowSnapshotMetadata - a model defined in Swagger
        """

        self._author = None
        self._bucket_identifier = None
        self._comments = None
        self._flow_identifier = None
        self._link = None
        self._timestamp = None
        self._version = None

        self.author = author
        self.bucket_identifier = bucket_identifier
        if comments is not None:
          self.comments = comments
        self.flow_identifier = flow_identifier
        if link is not None:
          self.link = link
        if timestamp is not None:
          self.timestamp = timestamp
        if version is not None:
          self.version = version

    @property
    def author(self):
        """
        Gets the author of this VersionedFlowSnapshotMetadata.
        The user that created this snapshot of the flow.

        :return: The author of this VersionedFlowSnapshotMetadata.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this VersionedFlowSnapshotMetadata.
        The user that created this snapshot of the flow.

        :param author: The author of this VersionedFlowSnapshotMetadata.
        :type: str
        """

        self._author = author

    @property
    def bucket_identifier(self):
        """
        Gets the bucket_identifier of this VersionedFlowSnapshotMetadata.
        The identifier of the bucket this snapshot belongs to.

        :return: The bucket_identifier of this VersionedFlowSnapshotMetadata.
        :rtype: str
        """
        return self._bucket_identifier

    @bucket_identifier.setter
    def bucket_identifier(self, bucket_identifier):
        """
        Sets the bucket_identifier of this VersionedFlowSnapshotMetadata.
        The identifier of the bucket this snapshot belongs to.

        :param bucket_identifier: The bucket_identifier of this VersionedFlowSnapshotMetadata.
        :type: str
        """
        if bucket_identifier is None:
            raise ValueError("Invalid value for `bucket_identifier`, must not be `None`")

        self._bucket_identifier = bucket_identifier

    @property
    def comments(self):
        """
        Gets the comments of this VersionedFlowSnapshotMetadata.
        The comments provided by the user when creating the snapshot.

        :return: The comments of this VersionedFlowSnapshotMetadata.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this VersionedFlowSnapshotMetadata.
        The comments provided by the user when creating the snapshot.

        :param comments: The comments of this VersionedFlowSnapshotMetadata.
        :type: str
        """

        self._comments = comments

    @property
    def flow_identifier(self):
        """
        Gets the flow_identifier of this VersionedFlowSnapshotMetadata.
        The identifier of the flow this snapshot belongs to.

        :return: The flow_identifier of this VersionedFlowSnapshotMetadata.
        :rtype: str
        """
        return self._flow_identifier

    @flow_identifier.setter
    def flow_identifier(self, flow_identifier):
        """
        Sets the flow_identifier of this VersionedFlowSnapshotMetadata.
        The identifier of the flow this snapshot belongs to.

        :param flow_identifier: The flow_identifier of this VersionedFlowSnapshotMetadata.
        :type: str
        """
        if flow_identifier is None:
            raise ValueError("Invalid value for `flow_identifier`, must not be `None`")

        self._flow_identifier = flow_identifier

    @property
    def link(self):
        """
        Gets the link of this VersionedFlowSnapshotMetadata.

        :return: The link of this VersionedFlowSnapshotMetadata.
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this VersionedFlowSnapshotMetadata.

        :param link: The link of this VersionedFlowSnapshotMetadata.
        :type: Link
        """

        self._link = link

    @property
    def timestamp(self):
        """
        Gets the timestamp of this VersionedFlowSnapshotMetadata.
        The timestamp when the flow was saved, as milliseconds since epoch.

        :return: The timestamp of this VersionedFlowSnapshotMetadata.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this VersionedFlowSnapshotMetadata.
        The timestamp when the flow was saved, as milliseconds since epoch.

        :param timestamp: The timestamp of this VersionedFlowSnapshotMetadata.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def version(self):
        """
        Gets the version of this VersionedFlowSnapshotMetadata.
        The version of this snapshot of the flow.

        :return: The version of this VersionedFlowSnapshotMetadata.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this VersionedFlowSnapshotMetadata.
        The version of this snapshot of the flow.

        :param version: The version of this VersionedFlowSnapshotMetadata.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionedFlowSnapshotMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

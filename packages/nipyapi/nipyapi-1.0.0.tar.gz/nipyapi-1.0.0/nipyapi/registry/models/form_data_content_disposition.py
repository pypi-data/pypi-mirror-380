"""
    Apache NiFi Registry REST API

    REST API definition for Apache NiFi Registry web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class FormDataContentDisposition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_date': 'datetime',
'file_name': 'str',
'modification_date': 'datetime',
'name': 'str',
'parameters': 'dict(str, str)',
'read_date': 'datetime',
'size': 'int',
'type': 'str'    }

    attribute_map = {
        'creation_date': 'creationDate',
'file_name': 'fileName',
'modification_date': 'modificationDate',
'name': 'name',
'parameters': 'parameters',
'read_date': 'readDate',
'size': 'size',
'type': 'type'    }

    def __init__(self, creation_date=None, file_name=None, modification_date=None, name=None, parameters=None, read_date=None, size=None, type=None):
        """
        FormDataContentDisposition - a model defined in Swagger
        """

        self._creation_date = None
        self._file_name = None
        self._modification_date = None
        self._name = None
        self._parameters = None
        self._read_date = None
        self._size = None
        self._type = None

        if creation_date is not None:
          self.creation_date = creation_date
        if file_name is not None:
          self.file_name = file_name
        if modification_date is not None:
          self.modification_date = modification_date
        if name is not None:
          self.name = name
        if parameters is not None:
          self.parameters = parameters
        if read_date is not None:
          self.read_date = read_date
        if size is not None:
          self.size = size
        if type is not None:
          self.type = type

    @property
    def creation_date(self):
        """
        Gets the creation_date of this FormDataContentDisposition.

        :return: The creation_date of this FormDataContentDisposition.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this FormDataContentDisposition.

        :param creation_date: The creation_date of this FormDataContentDisposition.
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def file_name(self):
        """
        Gets the file_name of this FormDataContentDisposition.

        :return: The file_name of this FormDataContentDisposition.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """
        Sets the file_name of this FormDataContentDisposition.

        :param file_name: The file_name of this FormDataContentDisposition.
        :type: str
        """

        self._file_name = file_name

    @property
    def modification_date(self):
        """
        Gets the modification_date of this FormDataContentDisposition.

        :return: The modification_date of this FormDataContentDisposition.
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """
        Sets the modification_date of this FormDataContentDisposition.

        :param modification_date: The modification_date of this FormDataContentDisposition.
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def name(self):
        """
        Gets the name of this FormDataContentDisposition.

        :return: The name of this FormDataContentDisposition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FormDataContentDisposition.

        :param name: The name of this FormDataContentDisposition.
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """
        Gets the parameters of this FormDataContentDisposition.

        :return: The parameters of this FormDataContentDisposition.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this FormDataContentDisposition.

        :param parameters: The parameters of this FormDataContentDisposition.
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def read_date(self):
        """
        Gets the read_date of this FormDataContentDisposition.

        :return: The read_date of this FormDataContentDisposition.
        :rtype: datetime
        """
        return self._read_date

    @read_date.setter
    def read_date(self, read_date):
        """
        Sets the read_date of this FormDataContentDisposition.

        :param read_date: The read_date of this FormDataContentDisposition.
        :type: datetime
        """

        self._read_date = read_date

    @property
    def size(self):
        """
        Gets the size of this FormDataContentDisposition.

        :return: The size of this FormDataContentDisposition.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this FormDataContentDisposition.

        :param size: The size of this FormDataContentDisposition.
        :type: int
        """

        self._size = size

    @property
    def type(self):
        """
        Gets the type of this FormDataContentDisposition.

        :return: The type of this FormDataContentDisposition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FormDataContentDisposition.

        :param type: The type of this FormDataContentDisposition.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FormDataContentDisposition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

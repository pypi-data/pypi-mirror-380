"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class LineageResultsDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'errors': 'list[str]',
'links': 'list[ProvenanceLinkDTO]',
'nodes': 'list[ProvenanceNodeDTO]'    }

    attribute_map = {
        'errors': 'errors',
'links': 'links',
'nodes': 'nodes'    }

    def __init__(self, errors=None, links=None, nodes=None):
        """
        LineageResultsDTO - a model defined in Swagger
        """

        self._errors = None
        self._links = None
        self._nodes = None

        if errors is not None:
          self.errors = errors
        if links is not None:
          self.links = links
        if nodes is not None:
          self.nodes = nodes

    @property
    def errors(self):
        """
        Gets the errors of this LineageResultsDTO.
        Any errors that occurred while generating the lineage.

        :return: The errors of this LineageResultsDTO.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this LineageResultsDTO.
        Any errors that occurred while generating the lineage.

        :param errors: The errors of this LineageResultsDTO.
        :type: list[str]
        """

        self._errors = errors

    @property
    def links(self):
        """
        Gets the links of this LineageResultsDTO.
        The links between the nodes in the lineage.

        :return: The links of this LineageResultsDTO.
        :rtype: list[ProvenanceLinkDTO]
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this LineageResultsDTO.
        The links between the nodes in the lineage.

        :param links: The links of this LineageResultsDTO.
        :type: list[ProvenanceLinkDTO]
        """

        self._links = links

    @property
    def nodes(self):
        """
        Gets the nodes of this LineageResultsDTO.
        The nodes in the lineage.

        :return: The nodes of this LineageResultsDTO.
        :rtype: list[ProvenanceNodeDTO]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this LineageResultsDTO.
        The nodes in the lineage.

        :param nodes: The nodes of this LineageResultsDTO.
        :type: list[ProvenanceNodeDTO]
        """

        self._nodes = nodes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LineageResultsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

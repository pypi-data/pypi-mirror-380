"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class FlowAnalysisResultEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flow_analysis_pending': 'bool',
'rule_violations': 'list[FlowAnalysisRuleViolationDTO]',
'rules': 'list[FlowAnalysisRuleDTO]'    }

    attribute_map = {
        'flow_analysis_pending': 'flowAnalysisPending',
'rule_violations': 'ruleViolations',
'rules': 'rules'    }

    def __init__(self, flow_analysis_pending=None, rule_violations=None, rules=None):
        """
        FlowAnalysisResultEntity - a model defined in Swagger
        """

        self._flow_analysis_pending = None
        self._rule_violations = None
        self._rules = None

        if flow_analysis_pending is not None:
          self.flow_analysis_pending = flow_analysis_pending
        if rule_violations is not None:
          self.rule_violations = rule_violations
        if rules is not None:
          self.rules = rules

    @property
    def flow_analysis_pending(self):
        """
        Gets the flow_analysis_pending of this FlowAnalysisResultEntity.

        :return: The flow_analysis_pending of this FlowAnalysisResultEntity.
        :rtype: bool
        """
        return self._flow_analysis_pending

    @flow_analysis_pending.setter
    def flow_analysis_pending(self, flow_analysis_pending):
        """
        Sets the flow_analysis_pending of this FlowAnalysisResultEntity.

        :param flow_analysis_pending: The flow_analysis_pending of this FlowAnalysisResultEntity.
        :type: bool
        """

        self._flow_analysis_pending = flow_analysis_pending

    @property
    def rule_violations(self):
        """
        Gets the rule_violations of this FlowAnalysisResultEntity.

        :return: The rule_violations of this FlowAnalysisResultEntity.
        :rtype: list[FlowAnalysisRuleViolationDTO]
        """
        return self._rule_violations

    @rule_violations.setter
    def rule_violations(self, rule_violations):
        """
        Sets the rule_violations of this FlowAnalysisResultEntity.

        :param rule_violations: The rule_violations of this FlowAnalysisResultEntity.
        :type: list[FlowAnalysisRuleViolationDTO]
        """

        self._rule_violations = rule_violations

    @property
    def rules(self):
        """
        Gets the rules of this FlowAnalysisResultEntity.

        :return: The rules of this FlowAnalysisResultEntity.
        :rtype: list[FlowAnalysisRuleDTO]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this FlowAnalysisResultEntity.

        :param rules: The rules of this FlowAnalysisResultEntity.
        :type: list[FlowAnalysisRuleDTO]
        """

        self._rules = rules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlowAnalysisResultEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ProcessgroupsUploadBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
'disconnected_node_acknowledged': 'bool',
'file': 'object',
'group_name': 'str',
'position_x': 'float',
'position_y': 'float'    }

    attribute_map = {
        'client_id': 'clientId',
'disconnected_node_acknowledged': 'disconnectedNodeAcknowledged',
'file': 'file',
'group_name': 'groupName',
'position_x': 'positionX',
'position_y': 'positionY'    }

    def __init__(self, client_id=None, disconnected_node_acknowledged=False, file=None, group_name=None, position_x=None, position_y=None):
        """
        ProcessgroupsUploadBody - a model defined in Swagger
        """

        self._client_id = None
        self._disconnected_node_acknowledged = None
        self._file = None
        self._group_name = None
        self._position_x = None
        self._position_y = None

        self.client_id = client_id
        if disconnected_node_acknowledged is not None:
          self.disconnected_node_acknowledged = disconnected_node_acknowledged
        if file is not None:
          self.file = file
        self.group_name = group_name
        self.position_x = position_x
        self.position_y = position_y

    @property
    def client_id(self):
        """
        Gets the client_id of this ProcessgroupsUploadBody.
        The client id.

        :return: The client_id of this ProcessgroupsUploadBody.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this ProcessgroupsUploadBody.
        The client id.

        :param client_id: The client_id of this ProcessgroupsUploadBody.
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def disconnected_node_acknowledged(self):
        """
        Gets the disconnected_node_acknowledged of this ProcessgroupsUploadBody.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :return: The disconnected_node_acknowledged of this ProcessgroupsUploadBody.
        :rtype: bool
        """
        return self._disconnected_node_acknowledged

    @disconnected_node_acknowledged.setter
    def disconnected_node_acknowledged(self, disconnected_node_acknowledged):
        """
        Sets the disconnected_node_acknowledged of this ProcessgroupsUploadBody.
        Acknowledges that this node is disconnected to allow for mutable requests to proceed.

        :param disconnected_node_acknowledged: The disconnected_node_acknowledged of this ProcessgroupsUploadBody.
        :type: bool
        """

        self._disconnected_node_acknowledged = disconnected_node_acknowledged

    @property
    def file(self):
        """
        Gets the file of this ProcessgroupsUploadBody.

        :return: The file of this ProcessgroupsUploadBody.
        :rtype: object
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this ProcessgroupsUploadBody.

        :param file: The file of this ProcessgroupsUploadBody.
        :type: object
        """

        self._file = file

    @property
    def group_name(self):
        """
        Gets the group_name of this ProcessgroupsUploadBody.
        The process group name.

        :return: The group_name of this ProcessgroupsUploadBody.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this ProcessgroupsUploadBody.
        The process group name.

        :param group_name: The group_name of this ProcessgroupsUploadBody.
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")

        self._group_name = group_name

    @property
    def position_x(self):
        """
        Gets the position_x of this ProcessgroupsUploadBody.
        The process group X position.

        :return: The position_x of this ProcessgroupsUploadBody.
        :rtype: float
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """
        Sets the position_x of this ProcessgroupsUploadBody.
        The process group X position.

        :param position_x: The position_x of this ProcessgroupsUploadBody.
        :type: float
        """
        if position_x is None:
            raise ValueError("Invalid value for `position_x`, must not be `None`")

        self._position_x = position_x

    @property
    def position_y(self):
        """
        Gets the position_y of this ProcessgroupsUploadBody.
        The process group Y position.

        :return: The position_y of this ProcessgroupsUploadBody.
        :rtype: float
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """
        Sets the position_y of this ProcessgroupsUploadBody.
        The process group Y position.

        :param position_y: The position_y of this ProcessgroupsUploadBody.
        :type: float
        """
        if position_y is None:
            raise ValueError("Invalid value for `position_y`, must not be `None`")

        self._position_y = position_y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProcessgroupsUploadBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

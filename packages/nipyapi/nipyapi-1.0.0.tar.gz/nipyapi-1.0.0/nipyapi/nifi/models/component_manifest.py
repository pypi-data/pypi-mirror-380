"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ComponentManifest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apis': 'list[DefinedType]',
'controller_services': 'list[ControllerServiceDefinition]',
'flow_analysis_rules': 'list[FlowAnalysisRuleDefinition]',
'parameter_providers': 'list[ParameterProviderDefinition]',
'processors': 'list[ProcessorDefinition]',
'reporting_tasks': 'list[ReportingTaskDefinition]'    }

    attribute_map = {
        'apis': 'apis',
'controller_services': 'controllerServices',
'flow_analysis_rules': 'flowAnalysisRules',
'parameter_providers': 'parameterProviders',
'processors': 'processors',
'reporting_tasks': 'reportingTasks'    }

    def __init__(self, apis=None, controller_services=None, flow_analysis_rules=None, parameter_providers=None, processors=None, reporting_tasks=None):
        """
        ComponentManifest - a model defined in Swagger
        """

        self._apis = None
        self._controller_services = None
        self._flow_analysis_rules = None
        self._parameter_providers = None
        self._processors = None
        self._reporting_tasks = None

        if apis is not None:
          self.apis = apis
        if controller_services is not None:
          self.controller_services = controller_services
        if flow_analysis_rules is not None:
          self.flow_analysis_rules = flow_analysis_rules
        if parameter_providers is not None:
          self.parameter_providers = parameter_providers
        if processors is not None:
          self.processors = processors
        if reporting_tasks is not None:
          self.reporting_tasks = reporting_tasks

    @property
    def apis(self):
        """
        Gets the apis of this ComponentManifest.
        Public interfaces defined in this bundle

        :return: The apis of this ComponentManifest.
        :rtype: list[DefinedType]
        """
        return self._apis

    @apis.setter
    def apis(self, apis):
        """
        Sets the apis of this ComponentManifest.
        Public interfaces defined in this bundle

        :param apis: The apis of this ComponentManifest.
        :type: list[DefinedType]
        """

        self._apis = apis

    @property
    def controller_services(self):
        """
        Gets the controller_services of this ComponentManifest.
        Controller Services provided in this bundle

        :return: The controller_services of this ComponentManifest.
        :rtype: list[ControllerServiceDefinition]
        """
        return self._controller_services

    @controller_services.setter
    def controller_services(self, controller_services):
        """
        Sets the controller_services of this ComponentManifest.
        Controller Services provided in this bundle

        :param controller_services: The controller_services of this ComponentManifest.
        :type: list[ControllerServiceDefinition]
        """

        self._controller_services = controller_services

    @property
    def flow_analysis_rules(self):
        """
        Gets the flow_analysis_rules of this ComponentManifest.
        Flow Analysis Rules provided in this bundle

        :return: The flow_analysis_rules of this ComponentManifest.
        :rtype: list[FlowAnalysisRuleDefinition]
        """
        return self._flow_analysis_rules

    @flow_analysis_rules.setter
    def flow_analysis_rules(self, flow_analysis_rules):
        """
        Sets the flow_analysis_rules of this ComponentManifest.
        Flow Analysis Rules provided in this bundle

        :param flow_analysis_rules: The flow_analysis_rules of this ComponentManifest.
        :type: list[FlowAnalysisRuleDefinition]
        """

        self._flow_analysis_rules = flow_analysis_rules

    @property
    def parameter_providers(self):
        """
        Gets the parameter_providers of this ComponentManifest.
        Parameter Providers provided in this bundle

        :return: The parameter_providers of this ComponentManifest.
        :rtype: list[ParameterProviderDefinition]
        """
        return self._parameter_providers

    @parameter_providers.setter
    def parameter_providers(self, parameter_providers):
        """
        Sets the parameter_providers of this ComponentManifest.
        Parameter Providers provided in this bundle

        :param parameter_providers: The parameter_providers of this ComponentManifest.
        :type: list[ParameterProviderDefinition]
        """

        self._parameter_providers = parameter_providers

    @property
    def processors(self):
        """
        Gets the processors of this ComponentManifest.
        Processors provided in this bundle

        :return: The processors of this ComponentManifest.
        :rtype: list[ProcessorDefinition]
        """
        return self._processors

    @processors.setter
    def processors(self, processors):
        """
        Sets the processors of this ComponentManifest.
        Processors provided in this bundle

        :param processors: The processors of this ComponentManifest.
        :type: list[ProcessorDefinition]
        """

        self._processors = processors

    @property
    def reporting_tasks(self):
        """
        Gets the reporting_tasks of this ComponentManifest.
        Reporting Tasks provided in this bundle

        :return: The reporting_tasks of this ComponentManifest.
        :rtype: list[ReportingTaskDefinition]
        """
        return self._reporting_tasks

    @reporting_tasks.setter
    def reporting_tasks(self, reporting_tasks):
        """
        Sets the reporting_tasks of this ComponentManifest.
        Reporting Tasks provided in this bundle

        :param reporting_tasks: The reporting_tasks of this ComponentManifest.
        :type: list[ReportingTaskDefinition]
        """

        self._reporting_tasks = reporting_tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ComponentManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

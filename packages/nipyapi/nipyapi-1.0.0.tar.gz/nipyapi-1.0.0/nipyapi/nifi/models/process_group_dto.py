"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ProcessGroupDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_remote_port_count': 'int',
'comments': 'str',
'contents': 'FlowSnippetDTO',
'default_back_pressure_data_size_threshold': 'str',
'default_back_pressure_object_threshold': 'int',
'default_flow_file_expiration': 'str',
'disabled_count': 'int',
'execution_engine': 'str',
'flowfile_concurrency': 'str',
'flowfile_outbound_policy': 'str',
'id': 'str',
'inactive_remote_port_count': 'int',
'input_port_count': 'int',
'invalid_count': 'int',
'local_input_port_count': 'int',
'local_output_port_count': 'int',
'locally_modified_and_stale_count': 'int',
'locally_modified_count': 'int',
'log_file_suffix': 'str',
'max_concurrent_tasks': 'int',
'name': 'str',
'output_port_count': 'int',
'parameter_context': 'ParameterContextReferenceEntity',
'parent_group_id': 'str',
'position': 'PositionDTO',
'public_input_port_count': 'int',
'public_output_port_count': 'int',
'running_count': 'int',
'stale_count': 'int',
'stateless_flow_timeout': 'str',
'stateless_group_scheduled_state': 'str',
'stopped_count': 'int',
'sync_failure_count': 'int',
'up_to_date_count': 'int',
'version_control_information': 'VersionControlInformationDTO',
'versioned_component_id': 'str'    }

    attribute_map = {
        'active_remote_port_count': 'activeRemotePortCount',
'comments': 'comments',
'contents': 'contents',
'default_back_pressure_data_size_threshold': 'defaultBackPressureDataSizeThreshold',
'default_back_pressure_object_threshold': 'defaultBackPressureObjectThreshold',
'default_flow_file_expiration': 'defaultFlowFileExpiration',
'disabled_count': 'disabledCount',
'execution_engine': 'executionEngine',
'flowfile_concurrency': 'flowfileConcurrency',
'flowfile_outbound_policy': 'flowfileOutboundPolicy',
'id': 'id',
'inactive_remote_port_count': 'inactiveRemotePortCount',
'input_port_count': 'inputPortCount',
'invalid_count': 'invalidCount',
'local_input_port_count': 'localInputPortCount',
'local_output_port_count': 'localOutputPortCount',
'locally_modified_and_stale_count': 'locallyModifiedAndStaleCount',
'locally_modified_count': 'locallyModifiedCount',
'log_file_suffix': 'logFileSuffix',
'max_concurrent_tasks': 'maxConcurrentTasks',
'name': 'name',
'output_port_count': 'outputPortCount',
'parameter_context': 'parameterContext',
'parent_group_id': 'parentGroupId',
'position': 'position',
'public_input_port_count': 'publicInputPortCount',
'public_output_port_count': 'publicOutputPortCount',
'running_count': 'runningCount',
'stale_count': 'staleCount',
'stateless_flow_timeout': 'statelessFlowTimeout',
'stateless_group_scheduled_state': 'statelessGroupScheduledState',
'stopped_count': 'stoppedCount',
'sync_failure_count': 'syncFailureCount',
'up_to_date_count': 'upToDateCount',
'version_control_information': 'versionControlInformation',
'versioned_component_id': 'versionedComponentId'    }

    def __init__(self, active_remote_port_count=None, comments=None, contents=None, default_back_pressure_data_size_threshold=None, default_back_pressure_object_threshold=None, default_flow_file_expiration=None, disabled_count=None, execution_engine=None, flowfile_concurrency=None, flowfile_outbound_policy=None, id=None, inactive_remote_port_count=None, input_port_count=None, invalid_count=None, local_input_port_count=None, local_output_port_count=None, locally_modified_and_stale_count=None, locally_modified_count=None, log_file_suffix=None, max_concurrent_tasks=None, name=None, output_port_count=None, parameter_context=None, parent_group_id=None, position=None, public_input_port_count=None, public_output_port_count=None, running_count=None, stale_count=None, stateless_flow_timeout=None, stateless_group_scheduled_state=None, stopped_count=None, sync_failure_count=None, up_to_date_count=None, version_control_information=None, versioned_component_id=None):
        """
        ProcessGroupDTO - a model defined in Swagger
        """

        self._active_remote_port_count = None
        self._comments = None
        self._contents = None
        self._default_back_pressure_data_size_threshold = None
        self._default_back_pressure_object_threshold = None
        self._default_flow_file_expiration = None
        self._disabled_count = None
        self._execution_engine = None
        self._flowfile_concurrency = None
        self._flowfile_outbound_policy = None
        self._id = None
        self._inactive_remote_port_count = None
        self._input_port_count = None
        self._invalid_count = None
        self._local_input_port_count = None
        self._local_output_port_count = None
        self._locally_modified_and_stale_count = None
        self._locally_modified_count = None
        self._log_file_suffix = None
        self._max_concurrent_tasks = None
        self._name = None
        self._output_port_count = None
        self._parameter_context = None
        self._parent_group_id = None
        self._position = None
        self._public_input_port_count = None
        self._public_output_port_count = None
        self._running_count = None
        self._stale_count = None
        self._stateless_flow_timeout = None
        self._stateless_group_scheduled_state = None
        self._stopped_count = None
        self._sync_failure_count = None
        self._up_to_date_count = None
        self._version_control_information = None
        self._versioned_component_id = None

        if active_remote_port_count is not None:
          self.active_remote_port_count = active_remote_port_count
        if comments is not None:
          self.comments = comments
        if contents is not None:
          self.contents = contents
        if default_back_pressure_data_size_threshold is not None:
          self.default_back_pressure_data_size_threshold = default_back_pressure_data_size_threshold
        if default_back_pressure_object_threshold is not None:
          self.default_back_pressure_object_threshold = default_back_pressure_object_threshold
        if default_flow_file_expiration is not None:
          self.default_flow_file_expiration = default_flow_file_expiration
        if disabled_count is not None:
          self.disabled_count = disabled_count
        if execution_engine is not None:
          self.execution_engine = execution_engine
        if flowfile_concurrency is not None:
          self.flowfile_concurrency = flowfile_concurrency
        if flowfile_outbound_policy is not None:
          self.flowfile_outbound_policy = flowfile_outbound_policy
        if id is not None:
          self.id = id
        if inactive_remote_port_count is not None:
          self.inactive_remote_port_count = inactive_remote_port_count
        if input_port_count is not None:
          self.input_port_count = input_port_count
        if invalid_count is not None:
          self.invalid_count = invalid_count
        if local_input_port_count is not None:
          self.local_input_port_count = local_input_port_count
        if local_output_port_count is not None:
          self.local_output_port_count = local_output_port_count
        if locally_modified_and_stale_count is not None:
          self.locally_modified_and_stale_count = locally_modified_and_stale_count
        if locally_modified_count is not None:
          self.locally_modified_count = locally_modified_count
        if log_file_suffix is not None:
          self.log_file_suffix = log_file_suffix
        if max_concurrent_tasks is not None:
          self.max_concurrent_tasks = max_concurrent_tasks
        if name is not None:
          self.name = name
        if output_port_count is not None:
          self.output_port_count = output_port_count
        if parameter_context is not None:
          self.parameter_context = parameter_context
        if parent_group_id is not None:
          self.parent_group_id = parent_group_id
        if position is not None:
          self.position = position
        if public_input_port_count is not None:
          self.public_input_port_count = public_input_port_count
        if public_output_port_count is not None:
          self.public_output_port_count = public_output_port_count
        if running_count is not None:
          self.running_count = running_count
        if stale_count is not None:
          self.stale_count = stale_count
        if stateless_flow_timeout is not None:
          self.stateless_flow_timeout = stateless_flow_timeout
        if stateless_group_scheduled_state is not None:
          self.stateless_group_scheduled_state = stateless_group_scheduled_state
        if stopped_count is not None:
          self.stopped_count = stopped_count
        if sync_failure_count is not None:
          self.sync_failure_count = sync_failure_count
        if up_to_date_count is not None:
          self.up_to_date_count = up_to_date_count
        if version_control_information is not None:
          self.version_control_information = version_control_information
        if versioned_component_id is not None:
          self.versioned_component_id = versioned_component_id

    @property
    def active_remote_port_count(self):
        """
        Gets the active_remote_port_count of this ProcessGroupDTO.
        The number of active remote ports in the process group.

        :return: The active_remote_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._active_remote_port_count

    @active_remote_port_count.setter
    def active_remote_port_count(self, active_remote_port_count):
        """
        Sets the active_remote_port_count of this ProcessGroupDTO.
        The number of active remote ports in the process group.

        :param active_remote_port_count: The active_remote_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._active_remote_port_count = active_remote_port_count

    @property
    def comments(self):
        """
        Gets the comments of this ProcessGroupDTO.
        The comments for the process group.

        :return: The comments of this ProcessGroupDTO.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this ProcessGroupDTO.
        The comments for the process group.

        :param comments: The comments of this ProcessGroupDTO.
        :type: str
        """

        self._comments = comments

    @property
    def contents(self):
        """
        Gets the contents of this ProcessGroupDTO.

        :return: The contents of this ProcessGroupDTO.
        :rtype: FlowSnippetDTO
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """
        Sets the contents of this ProcessGroupDTO.

        :param contents: The contents of this ProcessGroupDTO.
        :type: FlowSnippetDTO
        """

        self._contents = contents

    @property
    def default_back_pressure_data_size_threshold(self):
        """
        Gets the default_back_pressure_data_size_threshold of this ProcessGroupDTO.
        Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.

        :return: The default_back_pressure_data_size_threshold of this ProcessGroupDTO.
        :rtype: str
        """
        return self._default_back_pressure_data_size_threshold

    @default_back_pressure_data_size_threshold.setter
    def default_back_pressure_data_size_threshold(self, default_back_pressure_data_size_threshold):
        """
        Sets the default_back_pressure_data_size_threshold of this ProcessGroupDTO.
        Default value used in this Process Group for the maximum data size of objects that can be queued before back pressure is applied.

        :param default_back_pressure_data_size_threshold: The default_back_pressure_data_size_threshold of this ProcessGroupDTO.
        :type: str
        """

        self._default_back_pressure_data_size_threshold = default_back_pressure_data_size_threshold

    @property
    def default_back_pressure_object_threshold(self):
        """
        Gets the default_back_pressure_object_threshold of this ProcessGroupDTO.
        Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.

        :return: The default_back_pressure_object_threshold of this ProcessGroupDTO.
        :rtype: int
        """
        return self._default_back_pressure_object_threshold

    @default_back_pressure_object_threshold.setter
    def default_back_pressure_object_threshold(self, default_back_pressure_object_threshold):
        """
        Sets the default_back_pressure_object_threshold of this ProcessGroupDTO.
        Default value used in this Process Group for the maximum number of objects that can be queued before back pressure is applied.

        :param default_back_pressure_object_threshold: The default_back_pressure_object_threshold of this ProcessGroupDTO.
        :type: int
        """

        self._default_back_pressure_object_threshold = default_back_pressure_object_threshold

    @property
    def default_flow_file_expiration(self):
        """
        Gets the default_flow_file_expiration of this ProcessGroupDTO.
        The default FlowFile Expiration for this Process Group.

        :return: The default_flow_file_expiration of this ProcessGroupDTO.
        :rtype: str
        """
        return self._default_flow_file_expiration

    @default_flow_file_expiration.setter
    def default_flow_file_expiration(self, default_flow_file_expiration):
        """
        Sets the default_flow_file_expiration of this ProcessGroupDTO.
        The default FlowFile Expiration for this Process Group.

        :param default_flow_file_expiration: The default_flow_file_expiration of this ProcessGroupDTO.
        :type: str
        """

        self._default_flow_file_expiration = default_flow_file_expiration

    @property
    def disabled_count(self):
        """
        Gets the disabled_count of this ProcessGroupDTO.
        The number of disabled components in the process group.

        :return: The disabled_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._disabled_count

    @disabled_count.setter
    def disabled_count(self, disabled_count):
        """
        Sets the disabled_count of this ProcessGroupDTO.
        The number of disabled components in the process group.

        :param disabled_count: The disabled_count of this ProcessGroupDTO.
        :type: int
        """

        self._disabled_count = disabled_count

    @property
    def execution_engine(self):
        """
        Gets the execution_engine of this ProcessGroupDTO.
        The Execution Engine that should be used to run the flow represented by this Process Group.

        :return: The execution_engine of this ProcessGroupDTO.
        :rtype: str
        """
        return self._execution_engine

    @execution_engine.setter
    def execution_engine(self, execution_engine):
        """
        Sets the execution_engine of this ProcessGroupDTO.
        The Execution Engine that should be used to run the flow represented by this Process Group.

        :param execution_engine: The execution_engine of this ProcessGroupDTO.
        :type: str
        """
        allowed_values = ["STATELESS", "STANDARD", "INHERITED", ]
        if execution_engine not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_engine` ({0}), must be one of {1}"
                .format(execution_engine, allowed_values)
            )

        self._execution_engine = execution_engine

    @property
    def flowfile_concurrency(self):
        """
        Gets the flowfile_concurrency of this ProcessGroupDTO.
        The FlowFile Concurrency for this Process Group.

        :return: The flowfile_concurrency of this ProcessGroupDTO.
        :rtype: str
        """
        return self._flowfile_concurrency

    @flowfile_concurrency.setter
    def flowfile_concurrency(self, flowfile_concurrency):
        """
        Sets the flowfile_concurrency of this ProcessGroupDTO.
        The FlowFile Concurrency for this Process Group.

        :param flowfile_concurrency: The flowfile_concurrency of this ProcessGroupDTO.
        :type: str
        """
        allowed_values = ["UNBOUNDED", "SINGLE_FLOWFILE_PER_NODE", "SINGLE_BATCH_PER_NODE", ]
        if flowfile_concurrency not in allowed_values:
            raise ValueError(
                "Invalid value for `flowfile_concurrency` ({0}), must be one of {1}"
                .format(flowfile_concurrency, allowed_values)
            )

        self._flowfile_concurrency = flowfile_concurrency

    @property
    def flowfile_outbound_policy(self):
        """
        Gets the flowfile_outbound_policy of this ProcessGroupDTO.
        The Outbound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.

        :return: The flowfile_outbound_policy of this ProcessGroupDTO.
        :rtype: str
        """
        return self._flowfile_outbound_policy

    @flowfile_outbound_policy.setter
    def flowfile_outbound_policy(self, flowfile_outbound_policy):
        """
        Sets the flowfile_outbound_policy of this ProcessGroupDTO.
        The Outbound Policy that is used for determining how FlowFiles should be transferred out of the Process Group.

        :param flowfile_outbound_policy: The flowfile_outbound_policy of this ProcessGroupDTO.
        :type: str
        """
        allowed_values = ["STREAM_WHEN_AVAILABLE", "BATCH_OUTPUT", ]
        if flowfile_outbound_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `flowfile_outbound_policy` ({0}), must be one of {1}"
                .format(flowfile_outbound_policy, allowed_values)
            )

        self._flowfile_outbound_policy = flowfile_outbound_policy

    @property
    def id(self):
        """
        Gets the id of this ProcessGroupDTO.
        The id of the component.

        :return: The id of this ProcessGroupDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProcessGroupDTO.
        The id of the component.

        :param id: The id of this ProcessGroupDTO.
        :type: str
        """

        self._id = id

    @property
    def inactive_remote_port_count(self):
        """
        Gets the inactive_remote_port_count of this ProcessGroupDTO.
        The number of inactive remote ports in the process group.

        :return: The inactive_remote_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._inactive_remote_port_count

    @inactive_remote_port_count.setter
    def inactive_remote_port_count(self, inactive_remote_port_count):
        """
        Sets the inactive_remote_port_count of this ProcessGroupDTO.
        The number of inactive remote ports in the process group.

        :param inactive_remote_port_count: The inactive_remote_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._inactive_remote_port_count = inactive_remote_port_count

    @property
    def input_port_count(self):
        """
        Gets the input_port_count of this ProcessGroupDTO.
        The number of input ports in the process group.

        :return: The input_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._input_port_count

    @input_port_count.setter
    def input_port_count(self, input_port_count):
        """
        Sets the input_port_count of this ProcessGroupDTO.
        The number of input ports in the process group.

        :param input_port_count: The input_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._input_port_count = input_port_count

    @property
    def invalid_count(self):
        """
        Gets the invalid_count of this ProcessGroupDTO.
        The number of invalid components in the process group.

        :return: The invalid_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._invalid_count

    @invalid_count.setter
    def invalid_count(self, invalid_count):
        """
        Sets the invalid_count of this ProcessGroupDTO.
        The number of invalid components in the process group.

        :param invalid_count: The invalid_count of this ProcessGroupDTO.
        :type: int
        """

        self._invalid_count = invalid_count

    @property
    def local_input_port_count(self):
        """
        Gets the local_input_port_count of this ProcessGroupDTO.
        The number of local input ports in the process group.

        :return: The local_input_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._local_input_port_count

    @local_input_port_count.setter
    def local_input_port_count(self, local_input_port_count):
        """
        Sets the local_input_port_count of this ProcessGroupDTO.
        The number of local input ports in the process group.

        :param local_input_port_count: The local_input_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._local_input_port_count = local_input_port_count

    @property
    def local_output_port_count(self):
        """
        Gets the local_output_port_count of this ProcessGroupDTO.
        The number of local output ports in the process group.

        :return: The local_output_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._local_output_port_count

    @local_output_port_count.setter
    def local_output_port_count(self, local_output_port_count):
        """
        Sets the local_output_port_count of this ProcessGroupDTO.
        The number of local output ports in the process group.

        :param local_output_port_count: The local_output_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._local_output_port_count = local_output_port_count

    @property
    def locally_modified_and_stale_count(self):
        """
        Gets the locally_modified_and_stale_count of this ProcessGroupDTO.
        The number of locally modified and stale versioned process groups in the process group.

        :return: The locally_modified_and_stale_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._locally_modified_and_stale_count

    @locally_modified_and_stale_count.setter
    def locally_modified_and_stale_count(self, locally_modified_and_stale_count):
        """
        Sets the locally_modified_and_stale_count of this ProcessGroupDTO.
        The number of locally modified and stale versioned process groups in the process group.

        :param locally_modified_and_stale_count: The locally_modified_and_stale_count of this ProcessGroupDTO.
        :type: int
        """

        self._locally_modified_and_stale_count = locally_modified_and_stale_count

    @property
    def locally_modified_count(self):
        """
        Gets the locally_modified_count of this ProcessGroupDTO.
        The number of locally modified versioned process groups in the process group.

        :return: The locally_modified_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._locally_modified_count

    @locally_modified_count.setter
    def locally_modified_count(self, locally_modified_count):
        """
        Sets the locally_modified_count of this ProcessGroupDTO.
        The number of locally modified versioned process groups in the process group.

        :param locally_modified_count: The locally_modified_count of this ProcessGroupDTO.
        :type: int
        """

        self._locally_modified_count = locally_modified_count

    @property
    def log_file_suffix(self):
        """
        Gets the log_file_suffix of this ProcessGroupDTO.
        The log file suffix for this Process Group for dedicated logging.

        :return: The log_file_suffix of this ProcessGroupDTO.
        :rtype: str
        """
        return self._log_file_suffix

    @log_file_suffix.setter
    def log_file_suffix(self, log_file_suffix):
        """
        Sets the log_file_suffix of this ProcessGroupDTO.
        The log file suffix for this Process Group for dedicated logging.

        :param log_file_suffix: The log_file_suffix of this ProcessGroupDTO.
        :type: str
        """

        self._log_file_suffix = log_file_suffix

    @property
    def max_concurrent_tasks(self):
        """
        Gets the max_concurrent_tasks of this ProcessGroupDTO.
        The maximum number of concurrent tasks to use when running the flow using the Stateless Engine

        :return: The max_concurrent_tasks of this ProcessGroupDTO.
        :rtype: int
        """
        return self._max_concurrent_tasks

    @max_concurrent_tasks.setter
    def max_concurrent_tasks(self, max_concurrent_tasks):
        """
        Sets the max_concurrent_tasks of this ProcessGroupDTO.
        The maximum number of concurrent tasks to use when running the flow using the Stateless Engine

        :param max_concurrent_tasks: The max_concurrent_tasks of this ProcessGroupDTO.
        :type: int
        """

        self._max_concurrent_tasks = max_concurrent_tasks

    @property
    def name(self):
        """
        Gets the name of this ProcessGroupDTO.
        The name of the process group.

        :return: The name of this ProcessGroupDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProcessGroupDTO.
        The name of the process group.

        :param name: The name of this ProcessGroupDTO.
        :type: str
        """

        self._name = name

    @property
    def output_port_count(self):
        """
        Gets the output_port_count of this ProcessGroupDTO.
        The number of output ports in the process group.

        :return: The output_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._output_port_count

    @output_port_count.setter
    def output_port_count(self, output_port_count):
        """
        Sets the output_port_count of this ProcessGroupDTO.
        The number of output ports in the process group.

        :param output_port_count: The output_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._output_port_count = output_port_count

    @property
    def parameter_context(self):
        """
        Gets the parameter_context of this ProcessGroupDTO.

        :return: The parameter_context of this ProcessGroupDTO.
        :rtype: ParameterContextReferenceEntity
        """
        return self._parameter_context

    @parameter_context.setter
    def parameter_context(self, parameter_context):
        """
        Sets the parameter_context of this ProcessGroupDTO.

        :param parameter_context: The parameter_context of this ProcessGroupDTO.
        :type: ParameterContextReferenceEntity
        """

        self._parameter_context = parameter_context

    @property
    def parent_group_id(self):
        """
        Gets the parent_group_id of this ProcessGroupDTO.
        The id of parent process group of this component if applicable.

        :return: The parent_group_id of this ProcessGroupDTO.
        :rtype: str
        """
        return self._parent_group_id

    @parent_group_id.setter
    def parent_group_id(self, parent_group_id):
        """
        Sets the parent_group_id of this ProcessGroupDTO.
        The id of parent process group of this component if applicable.

        :param parent_group_id: The parent_group_id of this ProcessGroupDTO.
        :type: str
        """

        self._parent_group_id = parent_group_id

    @property
    def position(self):
        """
        Gets the position of this ProcessGroupDTO.

        :return: The position of this ProcessGroupDTO.
        :rtype: PositionDTO
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this ProcessGroupDTO.

        :param position: The position of this ProcessGroupDTO.
        :type: PositionDTO
        """

        self._position = position

    @property
    def public_input_port_count(self):
        """
        Gets the public_input_port_count of this ProcessGroupDTO.
        The number of public input ports in the process group.

        :return: The public_input_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._public_input_port_count

    @public_input_port_count.setter
    def public_input_port_count(self, public_input_port_count):
        """
        Sets the public_input_port_count of this ProcessGroupDTO.
        The number of public input ports in the process group.

        :param public_input_port_count: The public_input_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._public_input_port_count = public_input_port_count

    @property
    def public_output_port_count(self):
        """
        Gets the public_output_port_count of this ProcessGroupDTO.
        The number of public output ports in the process group.

        :return: The public_output_port_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._public_output_port_count

    @public_output_port_count.setter
    def public_output_port_count(self, public_output_port_count):
        """
        Sets the public_output_port_count of this ProcessGroupDTO.
        The number of public output ports in the process group.

        :param public_output_port_count: The public_output_port_count of this ProcessGroupDTO.
        :type: int
        """

        self._public_output_port_count = public_output_port_count

    @property
    def running_count(self):
        """
        Gets the running_count of this ProcessGroupDTO.
        The number of running components in this process group.

        :return: The running_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._running_count

    @running_count.setter
    def running_count(self, running_count):
        """
        Sets the running_count of this ProcessGroupDTO.
        The number of running components in this process group.

        :param running_count: The running_count of this ProcessGroupDTO.
        :type: int
        """

        self._running_count = running_count

    @property
    def stale_count(self):
        """
        Gets the stale_count of this ProcessGroupDTO.
        The number of stale versioned process groups in the process group.

        :return: The stale_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._stale_count

    @stale_count.setter
    def stale_count(self, stale_count):
        """
        Sets the stale_count of this ProcessGroupDTO.
        The number of stale versioned process groups in the process group.

        :param stale_count: The stale_count of this ProcessGroupDTO.
        :type: int
        """

        self._stale_count = stale_count

    @property
    def stateless_flow_timeout(self):
        """
        Gets the stateless_flow_timeout of this ProcessGroupDTO.
        The maximum amount of time that the flow can be run using the Stateless Engine before the flow times out

        :return: The stateless_flow_timeout of this ProcessGroupDTO.
        :rtype: str
        """
        return self._stateless_flow_timeout

    @stateless_flow_timeout.setter
    def stateless_flow_timeout(self, stateless_flow_timeout):
        """
        Sets the stateless_flow_timeout of this ProcessGroupDTO.
        The maximum amount of time that the flow can be run using the Stateless Engine before the flow times out

        :param stateless_flow_timeout: The stateless_flow_timeout of this ProcessGroupDTO.
        :type: str
        """

        self._stateless_flow_timeout = stateless_flow_timeout

    @property
    def stateless_group_scheduled_state(self):
        """
        Gets the stateless_group_scheduled_state of this ProcessGroupDTO.
        If the Process Group is configured to run in using the Stateless Engine, represents the current state. Otherwise, will be STOPPED.

        :return: The stateless_group_scheduled_state of this ProcessGroupDTO.
        :rtype: str
        """
        return self._stateless_group_scheduled_state

    @stateless_group_scheduled_state.setter
    def stateless_group_scheduled_state(self, stateless_group_scheduled_state):
        """
        Sets the stateless_group_scheduled_state of this ProcessGroupDTO.
        If the Process Group is configured to run in using the Stateless Engine, represents the current state. Otherwise, will be STOPPED.

        :param stateless_group_scheduled_state: The stateless_group_scheduled_state of this ProcessGroupDTO.
        :type: str
        """
        allowed_values = ["STOPPED", "RUNNING", ]
        if stateless_group_scheduled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `stateless_group_scheduled_state` ({0}), must be one of {1}"
                .format(stateless_group_scheduled_state, allowed_values)
            )

        self._stateless_group_scheduled_state = stateless_group_scheduled_state

    @property
    def stopped_count(self):
        """
        Gets the stopped_count of this ProcessGroupDTO.
        The number of stopped components in the process group.

        :return: The stopped_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._stopped_count

    @stopped_count.setter
    def stopped_count(self, stopped_count):
        """
        Sets the stopped_count of this ProcessGroupDTO.
        The number of stopped components in the process group.

        :param stopped_count: The stopped_count of this ProcessGroupDTO.
        :type: int
        """

        self._stopped_count = stopped_count

    @property
    def sync_failure_count(self):
        """
        Gets the sync_failure_count of this ProcessGroupDTO.
        The number of versioned process groups in the process group that are unable to sync to a registry.

        :return: The sync_failure_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._sync_failure_count

    @sync_failure_count.setter
    def sync_failure_count(self, sync_failure_count):
        """
        Sets the sync_failure_count of this ProcessGroupDTO.
        The number of versioned process groups in the process group that are unable to sync to a registry.

        :param sync_failure_count: The sync_failure_count of this ProcessGroupDTO.
        :type: int
        """

        self._sync_failure_count = sync_failure_count

    @property
    def up_to_date_count(self):
        """
        Gets the up_to_date_count of this ProcessGroupDTO.
        The number of up to date versioned process groups in the process group.

        :return: The up_to_date_count of this ProcessGroupDTO.
        :rtype: int
        """
        return self._up_to_date_count

    @up_to_date_count.setter
    def up_to_date_count(self, up_to_date_count):
        """
        Sets the up_to_date_count of this ProcessGroupDTO.
        The number of up to date versioned process groups in the process group.

        :param up_to_date_count: The up_to_date_count of this ProcessGroupDTO.
        :type: int
        """

        self._up_to_date_count = up_to_date_count

    @property
    def version_control_information(self):
        """
        Gets the version_control_information of this ProcessGroupDTO.

        :return: The version_control_information of this ProcessGroupDTO.
        :rtype: VersionControlInformationDTO
        """
        return self._version_control_information

    @version_control_information.setter
    def version_control_information(self, version_control_information):
        """
        Sets the version_control_information of this ProcessGroupDTO.

        :param version_control_information: The version_control_information of this ProcessGroupDTO.
        :type: VersionControlInformationDTO
        """

        self._version_control_information = version_control_information

    @property
    def versioned_component_id(self):
        """
        Gets the versioned_component_id of this ProcessGroupDTO.
        The ID of the corresponding component that is under version control

        :return: The versioned_component_id of this ProcessGroupDTO.
        :rtype: str
        """
        return self._versioned_component_id

    @versioned_component_id.setter
    def versioned_component_id(self, versioned_component_id):
        """
        Sets the versioned_component_id of this ProcessGroupDTO.
        The ID of the corresponding component that is under version control

        :param versioned_component_id: The versioned_component_id of this ProcessGroupDTO.
        :type: str
        """

        self._versioned_component_id = versioned_component_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProcessGroupDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

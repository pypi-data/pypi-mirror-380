"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class NarDetailsEntity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controller_service_types': 'list[DocumentedTypeDTO]',
'dependent_coordinates': 'list[NarCoordinateDTO]',
'flow_analysis_rule_types': 'list[DocumentedTypeDTO]',
'flow_registry_client_types': 'list[DocumentedTypeDTO]',
'nar_summary': 'NarSummaryDTO',
'parameter_provider_types': 'list[DocumentedTypeDTO]',
'processor_types': 'list[DocumentedTypeDTO]',
'reporting_task_types': 'list[DocumentedTypeDTO]'    }

    attribute_map = {
        'controller_service_types': 'controllerServiceTypes',
'dependent_coordinates': 'dependentCoordinates',
'flow_analysis_rule_types': 'flowAnalysisRuleTypes',
'flow_registry_client_types': 'flowRegistryClientTypes',
'nar_summary': 'narSummary',
'parameter_provider_types': 'parameterProviderTypes',
'processor_types': 'processorTypes',
'reporting_task_types': 'reportingTaskTypes'    }

    def __init__(self, controller_service_types=None, dependent_coordinates=None, flow_analysis_rule_types=None, flow_registry_client_types=None, nar_summary=None, parameter_provider_types=None, processor_types=None, reporting_task_types=None):
        """
        NarDetailsEntity - a model defined in Swagger
        """

        self._controller_service_types = None
        self._dependent_coordinates = None
        self._flow_analysis_rule_types = None
        self._flow_registry_client_types = None
        self._nar_summary = None
        self._parameter_provider_types = None
        self._processor_types = None
        self._reporting_task_types = None

        if controller_service_types is not None:
          self.controller_service_types = controller_service_types
        if dependent_coordinates is not None:
          self.dependent_coordinates = dependent_coordinates
        if flow_analysis_rule_types is not None:
          self.flow_analysis_rule_types = flow_analysis_rule_types
        if flow_registry_client_types is not None:
          self.flow_registry_client_types = flow_registry_client_types
        if nar_summary is not None:
          self.nar_summary = nar_summary
        if parameter_provider_types is not None:
          self.parameter_provider_types = parameter_provider_types
        if processor_types is not None:
          self.processor_types = processor_types
        if reporting_task_types is not None:
          self.reporting_task_types = reporting_task_types

    @property
    def controller_service_types(self):
        """
        Gets the controller_service_types of this NarDetailsEntity.
        The ControllerService types contained in the NAR

        :return: The controller_service_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._controller_service_types

    @controller_service_types.setter
    def controller_service_types(self, controller_service_types):
        """
        Sets the controller_service_types of this NarDetailsEntity.
        The ControllerService types contained in the NAR

        :param controller_service_types: The controller_service_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._controller_service_types = controller_service_types

    @property
    def dependent_coordinates(self):
        """
        Gets the dependent_coordinates of this NarDetailsEntity.
        The coordinates of NARs that depend on this NAR

        :return: The dependent_coordinates of this NarDetailsEntity.
        :rtype: list[NarCoordinateDTO]
        """
        return self._dependent_coordinates

    @dependent_coordinates.setter
    def dependent_coordinates(self, dependent_coordinates):
        """
        Sets the dependent_coordinates of this NarDetailsEntity.
        The coordinates of NARs that depend on this NAR

        :param dependent_coordinates: The dependent_coordinates of this NarDetailsEntity.
        :type: list[NarCoordinateDTO]
        """

        self._dependent_coordinates = dependent_coordinates

    @property
    def flow_analysis_rule_types(self):
        """
        Gets the flow_analysis_rule_types of this NarDetailsEntity.
        The FlowAnalysisRule types contained in the NAR

        :return: The flow_analysis_rule_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._flow_analysis_rule_types

    @flow_analysis_rule_types.setter
    def flow_analysis_rule_types(self, flow_analysis_rule_types):
        """
        Sets the flow_analysis_rule_types of this NarDetailsEntity.
        The FlowAnalysisRule types contained in the NAR

        :param flow_analysis_rule_types: The flow_analysis_rule_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._flow_analysis_rule_types = flow_analysis_rule_types

    @property
    def flow_registry_client_types(self):
        """
        Gets the flow_registry_client_types of this NarDetailsEntity.
        The FlowRegistryClient types contained in the NAR

        :return: The flow_registry_client_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._flow_registry_client_types

    @flow_registry_client_types.setter
    def flow_registry_client_types(self, flow_registry_client_types):
        """
        Sets the flow_registry_client_types of this NarDetailsEntity.
        The FlowRegistryClient types contained in the NAR

        :param flow_registry_client_types: The flow_registry_client_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._flow_registry_client_types = flow_registry_client_types

    @property
    def nar_summary(self):
        """
        Gets the nar_summary of this NarDetailsEntity.

        :return: The nar_summary of this NarDetailsEntity.
        :rtype: NarSummaryDTO
        """
        return self._nar_summary

    @nar_summary.setter
    def nar_summary(self, nar_summary):
        """
        Sets the nar_summary of this NarDetailsEntity.

        :param nar_summary: The nar_summary of this NarDetailsEntity.
        :type: NarSummaryDTO
        """

        self._nar_summary = nar_summary

    @property
    def parameter_provider_types(self):
        """
        Gets the parameter_provider_types of this NarDetailsEntity.
        The ParameterProvider types contained in the NAR

        :return: The parameter_provider_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._parameter_provider_types

    @parameter_provider_types.setter
    def parameter_provider_types(self, parameter_provider_types):
        """
        Sets the parameter_provider_types of this NarDetailsEntity.
        The ParameterProvider types contained in the NAR

        :param parameter_provider_types: The parameter_provider_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._parameter_provider_types = parameter_provider_types

    @property
    def processor_types(self):
        """
        Gets the processor_types of this NarDetailsEntity.
        The Processor types contained in the NAR

        :return: The processor_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._processor_types

    @processor_types.setter
    def processor_types(self, processor_types):
        """
        Sets the processor_types of this NarDetailsEntity.
        The Processor types contained in the NAR

        :param processor_types: The processor_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._processor_types = processor_types

    @property
    def reporting_task_types(self):
        """
        Gets the reporting_task_types of this NarDetailsEntity.
        The ReportingTask types contained in the NAR

        :return: The reporting_task_types of this NarDetailsEntity.
        :rtype: list[DocumentedTypeDTO]
        """
        return self._reporting_task_types

    @reporting_task_types.setter
    def reporting_task_types(self, reporting_task_types):
        """
        Sets the reporting_task_types of this NarDetailsEntity.
        The ReportingTask types contained in the NAR

        :param reporting_task_types: The reporting_task_types of this NarDetailsEntity.
        :type: list[DocumentedTypeDTO]
        """

        self._reporting_task_types = reporting_task_types

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NarDetailsEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class ResourceClaimDetailsDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'awaiting_destruction': 'bool',
'claimant_count': 'int',
'container': 'str',
'identifier': 'str',
'in_use': 'bool',
'section': 'str',
'writable': 'bool'    }

    attribute_map = {
        'awaiting_destruction': 'awaitingDestruction',
'claimant_count': 'claimantCount',
'container': 'container',
'identifier': 'identifier',
'in_use': 'inUse',
'section': 'section',
'writable': 'writable'    }

    def __init__(self, awaiting_destruction=None, claimant_count=None, container=None, identifier=None, in_use=None, section=None, writable=None):
        """
        ResourceClaimDetailsDTO - a model defined in Swagger
        """

        self._awaiting_destruction = None
        self._claimant_count = None
        self._container = None
        self._identifier = None
        self._in_use = None
        self._section = None
        self._writable = None

        if awaiting_destruction is not None:
          self.awaiting_destruction = awaiting_destruction
        if claimant_count is not None:
          self.claimant_count = claimant_count
        if container is not None:
          self.container = container
        if identifier is not None:
          self.identifier = identifier
        if in_use is not None:
          self.in_use = in_use
        if section is not None:
          self.section = section
        if writable is not None:
          self.writable = writable

    @property
    def awaiting_destruction(self):
        """
        Gets the awaiting_destruction of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim is awaiting destruction

        :return: The awaiting_destruction of this ResourceClaimDetailsDTO.
        :rtype: bool
        """
        return self._awaiting_destruction

    @awaiting_destruction.setter
    def awaiting_destruction(self, awaiting_destruction):
        """
        Sets the awaiting_destruction of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim is awaiting destruction

        :param awaiting_destruction: The awaiting_destruction of this ResourceClaimDetailsDTO.
        :type: bool
        """

        self._awaiting_destruction = awaiting_destruction

    @property
    def claimant_count(self):
        """
        Gets the claimant_count of this ResourceClaimDetailsDTO.
        The number of FlowFiles that have a claim to the Resource

        :return: The claimant_count of this ResourceClaimDetailsDTO.
        :rtype: int
        """
        return self._claimant_count

    @claimant_count.setter
    def claimant_count(self, claimant_count):
        """
        Sets the claimant_count of this ResourceClaimDetailsDTO.
        The number of FlowFiles that have a claim to the Resource

        :param claimant_count: The claimant_count of this ResourceClaimDetailsDTO.
        :type: int
        """

        self._claimant_count = claimant_count

    @property
    def container(self):
        """
        Gets the container of this ResourceClaimDetailsDTO.
        The container of the Content Repository in which the Resource Claim exists

        :return: The container of this ResourceClaimDetailsDTO.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """
        Sets the container of this ResourceClaimDetailsDTO.
        The container of the Content Repository in which the Resource Claim exists

        :param container: The container of this ResourceClaimDetailsDTO.
        :type: str
        """

        self._container = container

    @property
    def identifier(self):
        """
        Gets the identifier of this ResourceClaimDetailsDTO.
        The identifier of the Resource Claim

        :return: The identifier of this ResourceClaimDetailsDTO.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this ResourceClaimDetailsDTO.
        The identifier of the Resource Claim

        :param identifier: The identifier of this ResourceClaimDetailsDTO.
        :type: str
        """

        self._identifier = identifier

    @property
    def in_use(self):
        """
        Gets the in_use of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim is in use

        :return: The in_use of this ResourceClaimDetailsDTO.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """
        Sets the in_use of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim is in use

        :param in_use: The in_use of this ResourceClaimDetailsDTO.
        :type: bool
        """

        self._in_use = in_use

    @property
    def section(self):
        """
        Gets the section of this ResourceClaimDetailsDTO.
        The section of the Content Repository in which the Resource Claim exists

        :return: The section of this ResourceClaimDetailsDTO.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """
        Sets the section of this ResourceClaimDetailsDTO.
        The section of the Content Repository in which the Resource Claim exists

        :param section: The section of this ResourceClaimDetailsDTO.
        :type: str
        """

        self._section = section

    @property
    def writable(self):
        """
        Gets the writable of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim can still have more data written to it

        :return: The writable of this ResourceClaimDetailsDTO.
        :rtype: bool
        """
        return self._writable

    @writable.setter
    def writable(self, writable):
        """
        Sets the writable of this ResourceClaimDetailsDTO.
        Whether or not the Resource Claim can still have more data written to it

        :param writable: The writable of this ResourceClaimDetailsDTO.
        :type: bool
        """

        self._writable = writable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceClaimDetailsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

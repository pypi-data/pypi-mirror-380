"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class AssetDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'digest': 'str',
'id': 'str',
'missing_content': 'bool',
'name': 'str'    }

    attribute_map = {
        'digest': 'digest',
'id': 'id',
'missing_content': 'missingContent',
'name': 'name'    }

    def __init__(self, digest=None, id=None, missing_content=None, name=None):
        """
        AssetDTO - a model defined in Swagger
        """

        self._digest = None
        self._id = None
        self._missing_content = None
        self._name = None

        if digest is not None:
          self.digest = digest
        if id is not None:
          self.id = id
        if missing_content is not None:
          self.missing_content = missing_content
        if name is not None:
          self.name = name

    @property
    def digest(self):
        """
        Gets the digest of this AssetDTO.
        The digest of the asset, will be null if the asset content is missing.

        :return: The digest of this AssetDTO.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """
        Sets the digest of this AssetDTO.
        The digest of the asset, will be null if the asset content is missing.

        :param digest: The digest of this AssetDTO.
        :type: str
        """

        self._digest = digest

    @property
    def id(self):
        """
        Gets the id of this AssetDTO.
        The identifier of the asset.

        :return: The id of this AssetDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AssetDTO.
        The identifier of the asset.

        :param id: The id of this AssetDTO.
        :type: str
        """

        self._id = id

    @property
    def missing_content(self):
        """
        Gets the missing_content of this AssetDTO.
        Indicates if the content of the asset is missing.

        :return: The missing_content of this AssetDTO.
        :rtype: bool
        """
        return self._missing_content

    @missing_content.setter
    def missing_content(self, missing_content):
        """
        Sets the missing_content of this AssetDTO.
        Indicates if the content of the asset is missing.

        :param missing_content: The missing_content of this AssetDTO.
        :type: bool
        """

        self._missing_content = missing_content

    @property
    def name(self):
        """
        Gets the name of this AssetDTO.
        The name of the asset.

        :return: The name of this AssetDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AssetDTO.
        The name of the asset.

        :param name: The name of this AssetDTO.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AssetDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

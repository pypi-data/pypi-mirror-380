"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
import re


class AuthenticationConfigurationDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_login_required': 'bool',
'login_supported': 'bool',
'login_uri': 'str',
'logout_uri': 'str'    }

    attribute_map = {
        'external_login_required': 'externalLoginRequired',
'login_supported': 'loginSupported',
'login_uri': 'loginUri',
'logout_uri': 'logoutUri'    }

    def __init__(self, external_login_required=None, login_supported=None, login_uri=None, logout_uri=None):
        """
        AuthenticationConfigurationDTO - a model defined in Swagger
        """

        self._external_login_required = None
        self._login_supported = None
        self._login_uri = None
        self._logout_uri = None

        if external_login_required is not None:
          self.external_login_required = external_login_required
        if login_supported is not None:
          self.login_supported = login_supported
        if login_uri is not None:
          self.login_uri = login_uri
        if logout_uri is not None:
          self.logout_uri = logout_uri

    @property
    def external_login_required(self):
        """
        Gets the external_login_required of this AuthenticationConfigurationDTO.
        Whether the system requires login through an external Identity Provider

        :return: The external_login_required of this AuthenticationConfigurationDTO.
        :rtype: bool
        """
        return self._external_login_required

    @external_login_required.setter
    def external_login_required(self, external_login_required):
        """
        Sets the external_login_required of this AuthenticationConfigurationDTO.
        Whether the system requires login through an external Identity Provider

        :param external_login_required: The external_login_required of this AuthenticationConfigurationDTO.
        :type: bool
        """

        self._external_login_required = external_login_required

    @property
    def login_supported(self):
        """
        Gets the login_supported of this AuthenticationConfigurationDTO.
        Whether the system is configured to support login operations

        :return: The login_supported of this AuthenticationConfigurationDTO.
        :rtype: bool
        """
        return self._login_supported

    @login_supported.setter
    def login_supported(self, login_supported):
        """
        Sets the login_supported of this AuthenticationConfigurationDTO.
        Whether the system is configured to support login operations

        :param login_supported: The login_supported of this AuthenticationConfigurationDTO.
        :type: bool
        """

        self._login_supported = login_supported

    @property
    def login_uri(self):
        """
        Gets the login_uri of this AuthenticationConfigurationDTO.
        Location for initiating login processing

        :return: The login_uri of this AuthenticationConfigurationDTO.
        :rtype: str
        """
        return self._login_uri

    @login_uri.setter
    def login_uri(self, login_uri):
        """
        Sets the login_uri of this AuthenticationConfigurationDTO.
        Location for initiating login processing

        :param login_uri: The login_uri of this AuthenticationConfigurationDTO.
        :type: str
        """

        self._login_uri = login_uri

    @property
    def logout_uri(self):
        """
        Gets the logout_uri of this AuthenticationConfigurationDTO.
        Location for initiating logout processing

        :return: The logout_uri of this AuthenticationConfigurationDTO.
        :rtype: str
        """
        return self._logout_uri

    @logout_uri.setter
    def logout_uri(self, logout_uri):
        """
        Sets the logout_uri of this AuthenticationConfigurationDTO.
        Location for initiating logout processing

        :param logout_uri: The logout_uri of this AuthenticationConfigurationDTO.
        :type: str
        """

        self._logout_uri = logout_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuthenticationConfigurationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

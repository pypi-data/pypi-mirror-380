"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class ProvenanceEventsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_input_content(self, id, **kwargs):
        """
        Gets the input content for a provenance event.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_input_content_with_http_info()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            range (str): 
                Range of bytes requested
            cluster_node_id (str): 
                The id of the node where the content exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.StreamingOutput`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_input_content_with_http_info(id, **kwargs)
        else:
            (data) = self.get_input_content_with_http_info(id, **kwargs)
            return data

    def get_input_content_with_http_info(self, id, **kwargs):
        """
        Gets the input content for a provenance event.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_input_content()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            range (str): 
                Range of bytes requested
            cluster_node_id (str): 
                The id of the node where the content exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StreamingOutput`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'range', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_input_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_input_content`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}
        if 'range' in params:
            header_params['Range'] = params['range']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/{id}/content/input', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StreamingOutput',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_latest_provenance_events(self, component_id, **kwargs):
        """
        Retrieves the latest cached Provenance Events for the specified component.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_latest_provenance_events_with_http_info()`` method instead.
        
        Args:
            component_id (str): 
                The ID of the component to retrieve the latest Provenance Events for. (required)
            limit (int): 
                The number of events to limit the response to. Defaults to 10.
                
        Returns:
            :class:`~nipyapi.nifi.models.LatestProvenanceEventsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_latest_provenance_events_with_http_info(component_id, **kwargs)
        else:
            (data) = self.get_latest_provenance_events_with_http_info(component_id, **kwargs)
            return data

    def get_latest_provenance_events_with_http_info(self, component_id, **kwargs):
        """
        Retrieves the latest cached Provenance Events for the specified component.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_latest_provenance_events()`` method instead.
        
        Args:
            component_id (str): 
                The ID of the component to retrieve the latest Provenance Events for. (required)
            limit (int): 
                The number of events to limit the response to. Defaults to 10.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.LatestProvenanceEventsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['component_id', 'limit']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_provenance_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params) or (params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_latest_provenance_events`")

 
 
        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/latest/{componentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LatestProvenanceEventsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_output_content(self, id, **kwargs):
        """
        Gets the output content for a provenance event.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_output_content_with_http_info()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            range (str): 
                Range of bytes requested
            cluster_node_id (str): 
                The id of the node where the content exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.StreamingOutput`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_output_content_with_http_info(id, **kwargs)
        else:
            (data) = self.get_output_content_with_http_info(id, **kwargs)
            return data

    def get_output_content_with_http_info(self, id, **kwargs):
        """
        Gets the output content for a provenance event.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_output_content()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            range (str): 
                Range of bytes requested
            cluster_node_id (str): 
                The id of the node where the content exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StreamingOutput`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'range', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_output_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_output_content`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}
        if 'range' in params:
            header_params['Range'] = params['range']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/{id}/content/output', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StreamingOutput',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_provenance_event(self, id, **kwargs):
        """
        Gets a provenance event.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_provenance_event_with_http_info()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            cluster_node_id (str): 
                The id of the node where this event exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceEventEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_provenance_event_with_http_info(id, **kwargs)
        else:
            (data) = self.get_provenance_event_with_http_info(id, **kwargs)
            return data

    def get_provenance_event_with_http_info(self, id, **kwargs):
        """
        Gets a provenance event.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_provenance_event()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.LongParameter`): 
                The provenance event id. (required)
            cluster_node_id (str): 
                The id of the node where this event exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceEventEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provenance_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_provenance_event`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceEventEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_replay(self, body, **kwargs):
        """
        Replays content from a provenance event.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_replay_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.SubmitReplayRequestEntity`): 
                The replay request. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceEventEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_replay_with_http_info(body, **kwargs)
        else:
            (data) = self.submit_replay_with_http_info(body, **kwargs)
            return data

    def submit_replay_with_http_info(self, body, **kwargs):
        """
        Replays content from a provenance event.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_replay()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.SubmitReplayRequestEntity`): 
                The replay request. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceEventEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_replay" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_replay`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/replays', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceEventEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_replay_latest_event(self, body, **kwargs):
        """
        Replays content from a provenance event.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_replay_latest_event_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ReplayLastEventRequestEntity`): 
                The replay request. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ReplayLastEventResponseEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_replay_latest_event_with_http_info(body, **kwargs)
        else:
            (data) = self.submit_replay_latest_event_with_http_info(body, **kwargs)
            return data

    def submit_replay_latest_event_with_http_info(self, body, **kwargs):
        """
        Replays content from a provenance event.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_replay_latest_event()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ReplayLastEventRequestEntity`): 
                The replay request. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ReplayLastEventResponseEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_replay_latest_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_replay_latest_event`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance-events/latest/replays', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReplayLastEventResponseEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

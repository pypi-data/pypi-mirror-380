"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class ParameterProvidersApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def analyze_configuration1(self, body, id, **kwargs):
        """
        Performs analysis of the component's configuration, providing information about which attributes are referenced..
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``analyze_configuration1_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`): 
                The configuration analysis request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.analyze_configuration1_with_http_info(body, id, **kwargs)
        else:
            (data) = self.analyze_configuration1_with_http_info(body, id, **kwargs)
            return data

    def analyze_configuration1_with_http_info(self, body, id, **kwargs):
        """
        Performs analysis of the component's configuration, providing information about which attributes are referenced..
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``analyze_configuration1()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`): 
                The configuration analysis request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze_configuration1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `analyze_configuration1`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `analyze_configuration1`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/config/analysis', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationAnalysisEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clear_state2(self, id, **kwargs):
        """
        Clears the state for a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``clear_state2_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ComponentStateEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clear_state2_with_http_info(id, **kwargs)
        else:
            (data) = self.clear_state2_with_http_info(id, **kwargs)
            return data

    def clear_state2_with_http_info(self, id, **kwargs):
        """
        Clears the state for a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``clear_state2()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ComponentStateEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_state2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clear_state2`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/state/clear-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComponentStateEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_apply_parameters_request(self, provider_id, request_id, **kwargs):
        """
        Deletes the Apply Parameters Request with the given ID.

        Deletes the Apply Parameters Request with the given ID. After a request is created via a POST to /nifi-api/parameter-providers/apply-parameters-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Apply process has completed. If the request is deleted before the request completes, then the Apply Parameters Request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_apply_parameters_request_with_http_info()`` method instead.
        
        Args:
            provider_id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Apply Parameters Request (required)
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_apply_parameters_request_with_http_info(provider_id, request_id, **kwargs)
        else:
            (data) = self.delete_apply_parameters_request_with_http_info(provider_id, request_id, **kwargs)
            return data

    def delete_apply_parameters_request_with_http_info(self, provider_id, request_id, **kwargs):
        """
        Deletes the Apply Parameters Request with the given ID.

        Deletes the Apply Parameters Request with the given ID. After a request is created via a POST to /nifi-api/parameter-providers/apply-parameters-requests, it is expected that the client will properly clean up the request by DELETE'ing it, once the Apply process has completed. If the request is deleted before the request completes, then the Apply Parameters Request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_apply_parameters_request()`` method instead.
        
        Args:
            provider_id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Apply Parameters Request (required)
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['provider_id', 'request_id', 'disconnected_node_acknowledged']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_apply_parameters_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params) or (params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `delete_apply_parameters_request`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `delete_apply_parameters_request`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []
        if 'disconnected_node_acknowledged' in params:
            query_params.append(('disconnectedNodeAcknowledged', params['disconnected_node_acknowledged']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{providerId}/apply-parameters-requests/{requestId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderApplyParametersRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_verification_request1(self, id, request_id, **kwargs):
        """
        Deletes the Verification Request with the given ID.

        Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_verification_request1_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_verification_request1_with_http_info(id, request_id, **kwargs)
        else:
            (data) = self.delete_verification_request1_with_http_info(id, request_id, **kwargs)
            return data

    def delete_verification_request1_with_http_info(self, id, request_id, **kwargs):
        """
        Deletes the Verification Request with the given ID.

        Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_verification_request1()`` method instead.
        
        Args:
            id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'request_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_verification_request1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_verification_request1`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `delete_verification_request1`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/config/verification-requests/{requestId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def fetch_parameters(self, body, id, **kwargs):
        """
        Fetches and temporarily caches the parameters for a provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``fetch_parameters_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderParameterFetchEntity`): 
                The parameter fetch request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.fetch_parameters_with_http_info(body, id, **kwargs)
        else:
            (data) = self.fetch_parameters_with_http_info(body, id, **kwargs)
            return data

    def fetch_parameters_with_http_info(self, body, id, **kwargs):
        """
        Fetches and temporarily caches the parameters for a provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``fetch_parameters()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderParameterFetchEntity`): 
                The parameter fetch request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `fetch_parameters`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `fetch_parameters`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/parameters/fetch-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_provider(self, id, **kwargs):
        """
        Gets a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_provider_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_provider_with_http_info(id, **kwargs)
        else:
            (data) = self.get_parameter_provider_with_http_info(id, **kwargs)
            return data

    def get_parameter_provider_with_http_info(self, id, **kwargs):
        """
        Gets a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_provider()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_parameter_provider`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_provider_apply_parameters_request(self, provider_id, request_id, **kwargs):
        """
        Returns the Apply Parameters Request with the given ID.

        Returns the Apply Parameters Request with the given ID. Once an Apply Parameters Request has been created by performing a POST to /nifi-api/parameter-providers, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_provider_apply_parameters_request_with_http_info()`` method instead.
        
        Args:
            provider_id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Apply Parameters Request (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_provider_apply_parameters_request_with_http_info(provider_id, request_id, **kwargs)
        else:
            (data) = self.get_parameter_provider_apply_parameters_request_with_http_info(provider_id, request_id, **kwargs)
            return data

    def get_parameter_provider_apply_parameters_request_with_http_info(self, provider_id, request_id, **kwargs):
        """
        Returns the Apply Parameters Request with the given ID.

        Returns the Apply Parameters Request with the given ID. Once an Apply Parameters Request has been created by performing a POST to /nifi-api/parameter-providers, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_provider_apply_parameters_request()`` method instead.
        
        Args:
            provider_id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Apply Parameters Request (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['provider_id', 'request_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_provider_apply_parameters_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params) or (params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `get_parameter_provider_apply_parameters_request`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_parameter_provider_apply_parameters_request`")

 
 
        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{providerId}/apply-parameters-requests/{requestId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderApplyParametersRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_provider_references(self, id, **kwargs):
        """
        Gets all references to a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_provider_references_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderReferencingComponentsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_provider_references_with_http_info(id, **kwargs)
        else:
            (data) = self.get_parameter_provider_references_with_http_info(id, **kwargs)
            return data

    def get_parameter_provider_references_with_http_info(self, id, **kwargs):
        """
        Gets all references to a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_provider_references()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderReferencingComponentsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_provider_references" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_parameter_provider_references`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/references', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderReferencingComponentsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_property_descriptor2(self, id, property_name, **kwargs):
        """
        Gets a parameter provider property descriptor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_property_descriptor2_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
            property_name (str): 
                The property name. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.PropertyDescriptorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_property_descriptor2_with_http_info(id, property_name, **kwargs)
        else:
            (data) = self.get_property_descriptor2_with_http_info(id, property_name, **kwargs)
            return data

    def get_property_descriptor2_with_http_info(self, id, property_name, **kwargs):
        """
        Gets a parameter provider property descriptor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_property_descriptor2()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
            property_name (str): 
                The property name. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.PropertyDescriptorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'property_name']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_descriptor2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_property_descriptor2`")
        # verify the required parameter 'property_name' is set
        if ('property_name' not in params) or (params['property_name'] is None):
            raise ValueError("Missing the required parameter `property_name` when calling `get_property_descriptor2`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'property_name' in params:
            query_params.append(('propertyName', params['property_name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/descriptors', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PropertyDescriptorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_state1(self, id, **kwargs):
        """
        Gets the state for a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_state1_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ComponentStateEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_state1_with_http_info(id, **kwargs)
        else:
            (data) = self.get_state1_with_http_info(id, **kwargs)
            return data

    def get_state1_with_http_info(self, id, **kwargs):
        """
        Gets the state for a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_state1()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ComponentStateEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_state1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_state1`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/state', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComponentStateEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_verification_request1(self, id, request_id, **kwargs):
        """
        Returns the Verification Request with the given ID.

        Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_verification_request1_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_verification_request1_with_http_info(id, request_id, **kwargs)
        else:
            (data) = self.get_verification_request1_with_http_info(id, request_id, **kwargs)
            return data

    def get_verification_request1_with_http_info(self, id, request_id, **kwargs):
        """
        Returns the Verification Request with the given ID.

        Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_verification_request1()`` method instead.
        
        Args:
            id (str): 
                The ID of the Parameter Provider (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'request_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_verification_request1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_verification_request1`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_verification_request1`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/config/verification-requests/{requestId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_parameter_provider(self, id, **kwargs):
        """
        Deletes a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``remove_parameter_provider_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
            version (:class:`~nipyapi.nifi.models.LongParameter`): 
                The revision is used to verify the client is working with the latest version of the flow.
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_parameter_provider_with_http_info(id, **kwargs)
        else:
            (data) = self.remove_parameter_provider_with_http_info(id, **kwargs)
            return data

    def remove_parameter_provider_with_http_info(self, id, **kwargs):
        """
        Deletes a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``remove_parameter_provider()`` method instead.
        
        Args:
            id (str): 
                The parameter provider id. (required)
            version (:class:`~nipyapi.nifi.models.LongParameter`): 
                The revision is used to verify the client is working with the latest version of the flow.
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'version', 'client_id', 'disconnected_node_acknowledged']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_parameter_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_parameter_provider`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))
        if 'disconnected_node_acknowledged' in params:
            query_params.append(('disconnectedNodeAcknowledged', params['disconnected_node_acknowledged']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_apply_parameters(self, body, provider_id, **kwargs):
        """
        Initiate a request to apply the fetched parameters of a Parameter Provider.

        This will initiate the process of applying fetched parameters to all referencing Parameter Contexts. Changing the value of a Parameter may require that one or more components be stopped and restarted, so this action may take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterProviderApplyParametersRequestEntity, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-providers/apply-parameters-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-providers/apply-parameters-requests/{requestId}.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_apply_parameters_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderParameterApplicationEntity`): 
                The apply parameters request. (required)
            provider_id (str): (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_apply_parameters_with_http_info(body, provider_id, **kwargs)
        else:
            (data) = self.submit_apply_parameters_with_http_info(body, provider_id, **kwargs)
            return data

    def submit_apply_parameters_with_http_info(self, body, provider_id, **kwargs):
        """
        Initiate a request to apply the fetched parameters of a Parameter Provider.

        This will initiate the process of applying fetched parameters to all referencing Parameter Contexts. Changing the value of a Parameter may require that one or more components be stopped and restarted, so this action may take significantly more time than many other REST API actions. As a result, this endpoint will immediately return a ParameterProviderApplyParametersRequestEntity, and the process of updating the necessary components will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-providers/apply-parameters-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-providers/apply-parameters-requests/{requestId}.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_apply_parameters()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderParameterApplicationEntity`): 
                The apply parameters request. (required)
            provider_id (str): (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderApplyParametersRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'provider_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_apply_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_apply_parameters`")
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params) or (params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `submit_apply_parameters`")

 
 
        collection_formats = {}

        path_params = {}
        if 'provider_id' in params:
            path_params['providerId'] = params['provider_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{providerId}/apply-parameters-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderApplyParametersRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_config_verification_request1(self, body, id, **kwargs):
        """
        Performs verification of the Parameter Provider's configuration.

        This will initiate the process of verifying a given Parameter Provider configuration. This may be a long-running task. As a result, this endpoint will immediately return a ParameterProviderConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-providers/{serviceId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-providers/{providerId}/verification-requests/{requestId}.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_config_verification_request1_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`): 
                The parameter provider configuration verification request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_config_verification_request1_with_http_info(body, id, **kwargs)
        else:
            (data) = self.submit_config_verification_request1_with_http_info(body, id, **kwargs)
            return data

    def submit_config_verification_request1_with_http_info(self, body, id, **kwargs):
        """
        Performs verification of the Parameter Provider's configuration.

        This will initiate the process of verifying a given Parameter Provider configuration. This may be a long-running task. As a result, this endpoint will immediately return a ParameterProviderConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /parameter-providers/{serviceId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /parameter-providers/{providerId}/verification-requests/{requestId}.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_config_verification_request1()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`): 
                The parameter provider configuration verification request. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_config_verification_request1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_config_verification_request1`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_config_verification_request1`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}/config/verification-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_parameter_provider(self, body, id, **kwargs):
        """
        Updates a parameter provider.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``update_parameter_provider_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderEntity`): 
                The parameter provider configuration details. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_parameter_provider_with_http_info(body, id, **kwargs)
        else:
            (data) = self.update_parameter_provider_with_http_info(body, id, **kwargs)
            return data

    def update_parameter_provider_with_http_info(self, body, id, **kwargs):
        """
        Updates a parameter provider.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``update_parameter_provider()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ParameterProviderEntity`): 
                The parameter provider configuration details. (required)
            id (str): 
                The parameter provider id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_parameter_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_parameter_provider`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_parameter_provider`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/parameter-providers/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

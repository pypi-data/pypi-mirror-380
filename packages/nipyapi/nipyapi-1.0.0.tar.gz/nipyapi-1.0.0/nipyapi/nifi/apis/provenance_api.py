"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class ProvenanceApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_lineage(self, id, **kwargs):
        """
        Deletes a lineage query.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_lineage_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The id of the lineage query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.LineageEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_lineage_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_lineage_with_http_info(id, **kwargs)
            return data

    def delete_lineage_with_http_info(self, id, **kwargs):
        """
        Deletes a lineage query.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_lineage()`` method instead.
        
        Args:
            id (str): 
                The id of the lineage query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.LineageEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_lineage`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/lineage/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LineageEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_provenance(self, id, **kwargs):
        """
        Deletes a provenance query.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_provenance_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The id of the provenance query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_provenance_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_provenance_with_http_info(id, **kwargs)
            return data

    def delete_provenance_with_http_info(self, id, **kwargs):
        """
        Deletes a provenance query.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_provenance()`` method instead.
        
        Args:
            id (str): 
                The id of the provenance query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_provenance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_provenance`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_lineage(self, id, **kwargs):
        """
        Gets a lineage query.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_lineage_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The id of the lineage query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            :class:`~nipyapi.nifi.models.LineageEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_lineage_with_http_info(id, **kwargs)
        else:
            (data) = self.get_lineage_with_http_info(id, **kwargs)
            return data

    def get_lineage_with_http_info(self, id, **kwargs):
        """
        Gets a lineage query.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_lineage()`` method instead.
        
        Args:
            id (str): 
                The id of the lineage query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.LineageEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lineage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_lineage`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/lineage/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LineageEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_provenance(self, id, **kwargs):
        """
        Gets a provenance query.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_provenance_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The id of the provenance query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
            summarize (bool): 
                Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
            incremental_results (bool): 
                Whether or not to summarize provenance events returned. This property is false by default.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_provenance_with_http_info(id, **kwargs)
        else:
            (data) = self.get_provenance_with_http_info(id, **kwargs)
            return data

    def get_provenance_with_http_info(self, id, **kwargs):
        """
        Gets a provenance query.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_provenance()`` method instead.
        
        Args:
            id (str): 
                The id of the provenance query. (required)
            cluster_node_id (str): 
                The id of the node where this query exists if clustered.
            summarize (bool): 
                Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
            incremental_results (bool): 
                Whether or not to summarize provenance events returned. This property is false by default.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'cluster_node_id', 'summarize', 'incremental_results']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_provenance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_provenance`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))
        if 'summarize' in params:
            query_params.append(('summarize', params['summarize']))
        if 'incremental_results' in params:
            query_params.append(('incrementalResults', params['incremental_results']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_search_options(self, **kwargs):
        """
        Gets the searchable attributes for provenance events.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_search_options_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceOptionsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_search_options_with_http_info(**kwargs)
        else:
            (data) = self.get_search_options_with_http_info(**kwargs)
            return data

    def get_search_options_with_http_info(self, **kwargs):
        """
        Gets the searchable attributes for provenance events.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_search_options()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceOptionsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_options" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/search-options', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceOptionsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_lineage_request(self, body, **kwargs):
        """
        Submits a lineage query.

        Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_lineage_request_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.LineageEntity`): 
                The lineage query details. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.LineageEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_lineage_request_with_http_info(body, **kwargs)
        else:
            (data) = self.submit_lineage_request_with_http_info(body, **kwargs)
            return data

    def submit_lineage_request_with_http_info(self, body, **kwargs):
        """
        Submits a lineage query.

        Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_lineage_request()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.LineageEntity`): 
                The lineage query details. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.LineageEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_lineage_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_lineage_request`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance/lineage', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='LineageEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_provenance_request(self, body, **kwargs):
        """
        Submits a provenance query.

        Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_provenance_request_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProvenanceEntity`): 
                The provenance query details. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProvenanceEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_provenance_request_with_http_info(body, **kwargs)
        else:
            (data) = self.submit_provenance_request_with_http_info(body, **kwargs)
            return data

    def submit_provenance_request_with_http_info(self, body, **kwargs):
        """
        Submits a provenance query.

        Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_provenance_request()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProvenanceEntity`): 
                The provenance query details. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProvenanceEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_provenance_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_provenance_request`")

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/provenance', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProvenanceEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

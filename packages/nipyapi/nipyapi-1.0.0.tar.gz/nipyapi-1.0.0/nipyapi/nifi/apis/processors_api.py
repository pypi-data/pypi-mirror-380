"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class ProcessorsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def analyze_configuration2(self, body, id, **kwargs):
        """
        Performs analysis of the component's configuration, providing information about which attributes are referenced..
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``analyze_configuration2_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`): 
                The processor configuration analysis request. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.analyze_configuration2_with_http_info(body, id, **kwargs)
        else:
            (data) = self.analyze_configuration2_with_http_info(body, id, **kwargs)
            return data

    def analyze_configuration2_with_http_info(self, body, id, **kwargs):
        """
        Performs analysis of the component's configuration, providing information about which attributes are referenced..
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``analyze_configuration2()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`): 
                The processor configuration analysis request. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ConfigurationAnalysisEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze_configuration2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `analyze_configuration2`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `analyze_configuration2`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/config/analysis', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationAnalysisEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def clear_state3(self, id, **kwargs):
        """
        Clears the state for a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``clear_state3_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ComponentStateEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.clear_state3_with_http_info(id, **kwargs)
        else:
            (data) = self.clear_state3_with_http_info(id, **kwargs)
            return data

    def clear_state3_with_http_info(self, id, **kwargs):
        """
        Clears the state for a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``clear_state3()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ComponentStateEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_state3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `clear_state3`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/state/clear-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComponentStateEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_processor(self, id, **kwargs):
        """
        Deletes a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_processor_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            version (:class:`~nipyapi.nifi.models.LongParameter`): 
                The revision is used to verify the client is working with the latest version of the flow.
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_processor_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_processor_with_http_info(id, **kwargs)
            return data

    def delete_processor_with_http_info(self, id, **kwargs):
        """
        Deletes a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_processor()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            version (:class:`~nipyapi.nifi.models.LongParameter`): 
                The revision is used to verify the client is working with the latest version of the flow.
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            disconnected_node_acknowledged (bool): 
                Acknowledges that this node is disconnected to allow for mutable requests to proceed.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'version', 'client_id', 'disconnected_node_acknowledged']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_processor`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))
        if 'disconnected_node_acknowledged' in params:
            query_params.append(('disconnectedNodeAcknowledged', params['disconnected_node_acknowledged']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_verification_request2(self, id, request_id, **kwargs):
        """
        Deletes the Verification Request with the given ID.

        Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``delete_verification_request2_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The ID of the Processor (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_verification_request2_with_http_info(id, request_id, **kwargs)
        else:
            (data) = self.delete_verification_request2_with_http_info(id, request_id, **kwargs)
            return data

    def delete_verification_request2_with_http_info(self, id, request_id, **kwargs):
        """
        Deletes the Verification Request with the given ID.

        Deletes the Verification Request with the given ID. After a request is created, it is expected that the client will properly clean up the request by DELETE'ing it, once the Verification process has completed. If the request is deleted before the request completes, then the Verification request will finish the step that it is currently performing and then will cancel any subsequent steps.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``delete_verification_request2()`` method instead.
        
        Args:
            id (str): 
                The ID of the Processor (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'request_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_verification_request2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_verification_request2`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `delete_verification_request2`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/config/verification-requests/{requestId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor(self, id, **kwargs):
        """
        Gets a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_with_http_info(id, **kwargs)
        else:
            (data) = self.get_processor_with_http_info(id, **kwargs)
            return data

    def get_processor_with_http_info(self, id, **kwargs):
        """
        Gets a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_processor`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_diagnostics(self, id, **kwargs):
        """
        Gets diagnostics information about a processor.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_diagnostics_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_diagnostics_with_http_info(id, **kwargs)
        else:
            (data) = self.get_processor_diagnostics_with_http_info(id, **kwargs)
            return data

    def get_processor_diagnostics_with_http_info(self, id, **kwargs):
        """
        Gets diagnostics information about a processor.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_diagnostics()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_diagnostics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_processor_diagnostics`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/diagnostics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_run_status_details(self, **kwargs):
        """
        Submits a query to retrieve the run status details of all processors that are in the given list of Processor IDs.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_run_status_details_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.RunStatusDetailsRequestEntity`): 
                The request for the processors that should be included in the results
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorsRunStatusDetailsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_run_status_details_with_http_info(**kwargs)
        else:
            (data) = self.get_processor_run_status_details_with_http_info(**kwargs)
            return data

    def get_processor_run_status_details_with_http_info(self, **kwargs):
        """
        Submits a query to retrieve the run status details of all processors that are in the given list of Processor IDs.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_run_status_details()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.RunStatusDetailsRequestEntity`): 
                The request for the processors that should be included in the results
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorsRunStatusDetailsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_run_status_details" % key
                )
            params[key] = val
        del params['kwargs']

 
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/run-status-details/queries', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorsRunStatusDetailsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_property_descriptor3(self, id, property_name, **kwargs):
        """
        Gets the descriptor for a processor property.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_property_descriptor3_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            property_name (str): 
                The property name. (required)
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            sensitive (bool): 
                Property Descriptor requested sensitive status
                
        Returns:
            :class:`~nipyapi.nifi.models.PropertyDescriptorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_property_descriptor3_with_http_info(id, property_name, **kwargs)
        else:
            (data) = self.get_property_descriptor3_with_http_info(id, property_name, **kwargs)
            return data

    def get_property_descriptor3_with_http_info(self, id, property_name, **kwargs):
        """
        Gets the descriptor for a processor property.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_property_descriptor3()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            property_name (str): 
                The property name. (required)
            client_id (:class:`~nipyapi.nifi.models.ClientIdParameter`): 
                If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response.
            sensitive (bool): 
                Property Descriptor requested sensitive status
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.PropertyDescriptorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'property_name', 'client_id', 'sensitive']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_descriptor3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_property_descriptor3`")
        # verify the required parameter 'property_name' is set
        if ('property_name' not in params) or (params['property_name'] is None):
            raise ValueError("Missing the required parameter `property_name` when calling `get_property_descriptor3`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'client_id' in params:
            query_params.append(('clientId', params['client_id']))
        if 'property_name' in params:
            query_params.append(('propertyName', params['property_name']))
        if 'sensitive' in params:
            query_params.append(('sensitive', params['sensitive']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/descriptors', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PropertyDescriptorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_state2(self, id, **kwargs):
        """
        Gets the state for a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_state2_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ComponentStateEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_state2_with_http_info(id, **kwargs)
        else:
            (data) = self.get_state2_with_http_info(id, **kwargs)
            return data

    def get_state2_with_http_info(self, id, **kwargs):
        """
        Gets the state for a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_state2()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ComponentStateEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_state2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_state2`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/state', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComponentStateEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_verification_request2(self, id, request_id, **kwargs):
        """
        Returns the Verification Request with the given ID.

        Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_verification_request2_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The ID of the Processor (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_verification_request2_with_http_info(id, request_id, **kwargs)
        else:
            (data) = self.get_verification_request2_with_http_info(id, request_id, **kwargs)
            return data

    def get_verification_request2_with_http_info(self, id, request_id, **kwargs):
        """
        Returns the Verification Request with the given ID.

        Returns the Verification Request with the given ID. Once an Verification Request has been created, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. 

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_verification_request2()`` method instead.
        
        Args:
            id (str): 
                The ID of the Processor (required)
            request_id (str): 
                The ID of the Verification Request (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'request_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_verification_request2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_verification_request2`")
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params) or (params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `get_verification_request2`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'request_id' in params:
            path_params['requestId'] = params['request_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/config/verification-requests/{requestId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def submit_processor_verification_request(self, body, id, **kwargs):
        """
        Performs verification of the Processor's configuration.

        This will initiate the process of verifying a given Processor configuration. This may be a long-running task. As a result, this endpoint will immediately return a ProcessorConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /processors/{processorId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /processors/{processorId}/verification-requests/{requestId}.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``submit_processor_verification_request_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`): 
                The processor configuration verification request. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.submit_processor_verification_request_with_http_info(body, id, **kwargs)
        else:
            (data) = self.submit_processor_verification_request_with_http_info(body, id, **kwargs)
            return data

    def submit_processor_verification_request_with_http_info(self, body, id, **kwargs):
        """
        Performs verification of the Processor's configuration.

        This will initiate the process of verifying a given Processor configuration. This may be a long-running task. As a result, this endpoint will immediately return a ProcessorConfigVerificationRequestEntity, and the process of performing the verification will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /processors/{processorId}/verification-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /processors/{processorId}/verification-requests/{requestId}.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``submit_processor_verification_request()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`): 
                The processor configuration verification request. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VerifyConfigRequestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_processor_verification_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `submit_processor_verification_request`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `submit_processor_verification_request`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/config/verification-requests', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VerifyConfigRequestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def terminate_processor(self, id, **kwargs):
        """
        Terminates a processor, essentially \"deleting\" its threads and any active tasks.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``terminate_processor_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.terminate_processor_with_http_info(id, **kwargs)
        else:
            (data) = self.terminate_processor_with_http_info(id, **kwargs)
            return data

    def terminate_processor_with_http_info(self, id, **kwargs):
        """
        Terminates a processor, essentially \"deleting\" its threads and any active tasks.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``terminate_processor()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method terminate_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `terminate_processor`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/threads', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_processor(self, body, id, **kwargs):
        """
        Updates a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``update_processor_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProcessorEntity`): 
                The processor configuration details. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_processor_with_http_info(body, id, **kwargs)
        else:
            (data) = self.update_processor_with_http_info(body, id, **kwargs)
            return data

    def update_processor_with_http_info(self, body, id, **kwargs):
        """
        Updates a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``update_processor()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProcessorEntity`): 
                The processor configuration details. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_processor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_processor`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_processor`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_run_status4(self, body, id, **kwargs):
        """
        Updates run status of a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``update_run_status4_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProcessorRunStatusEntity`): 
                The processor run status. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_run_status4_with_http_info(body, id, **kwargs)
        else:
            (data) = self.update_run_status4_with_http_info(body, id, **kwargs)
            return data

    def update_run_status4_with_http_info(self, body, id, **kwargs):
        """
        Updates run status of a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``update_run_status4()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ProcessorRunStatusEntity`): 
                The processor run status. (required)
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_status4" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_run_status4`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_run_status4`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/processors/{id}/run-status', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

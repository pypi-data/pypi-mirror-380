"""
    Apache NiFi REST API

    REST API definition for Apache NiFi web services

    OpenAPI spec version: 2.5.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import sys
import os
import re

from ..configuration import Configuration
from ..api_client import ApiClient


class FlowApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def activate_controller_services(self, body, id, **kwargs):
        """
        Enable or disable Controller Services in the specified Process Group..
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``activate_controller_services_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ActivateControllerServicesEntity`): 
                The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
            id (str): 
                The process group id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ActivateControllerServicesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.activate_controller_services_with_http_info(body, id, **kwargs)
        else:
            (data) = self.activate_controller_services_with_http_info(body, id, **kwargs)
            return data

    def activate_controller_services_with_http_info(self, body, id, **kwargs):
        """
        Enable or disable Controller Services in the specified Process Group..
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``activate_controller_services()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ActivateControllerServicesEntity`): 
                The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered. (required)
            id (str): 
                The process group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ActivateControllerServicesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_controller_services" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate_controller_services`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `activate_controller_services`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}/controller-services', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ActivateControllerServicesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def download_reporting_task_snapshot(self, **kwargs):
        """
        Download a snapshot of the given reporting tasks and any controller services they use.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``download_reporting_task_snapshot_with_http_info()`` method instead.
        
        Args:
            reporting_task_id (str): 
                Specifies a reporting task id to export. If not specified, all reporting tasks will be exported.
                
        Returns:
            str: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.download_reporting_task_snapshot_with_http_info(**kwargs)
        else:
            (data) = self.download_reporting_task_snapshot_with_http_info(**kwargs)
            return data

    def download_reporting_task_snapshot_with_http_info(self, **kwargs):
        """
        Download a snapshot of the given reporting tasks and any controller services they use.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``download_reporting_task_snapshot()`` method instead.
        
        Args:
            reporting_task_id (str): 
                Specifies a reporting task id to export. If not specified, all reporting tasks will be exported.
                
        Returns:
            tuple: (str, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['reporting_task_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_reporting_task_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reporting_task_id' in params:
            query_params.append(('reportingTaskId', params['reporting_task_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/reporting-tasks/download', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def generate_client_id(self, **kwargs):
        """
        Generates a client id..
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``generate_client_id_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            str: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.generate_client_id_with_http_info(**kwargs)
        else:
            (data) = self.generate_client_id_with_http_info(**kwargs)
            return data

    def generate_client_id_with_http_info(self, **kwargs):
        """
        Generates a client id..
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``generate_client_id()`` method instead.
        
        Args:
                
        Returns:
            tuple: (str, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_client_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/client-id', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_about_info(self, **kwargs):
        """
        Retrieves details about this NiFi to put in the About dialog.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_about_info_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.AboutEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_about_info_with_http_info(**kwargs)
        else:
            (data) = self.get_about_info_with_http_info(**kwargs)
            return data

    def get_about_info_with_http_info(self, **kwargs):
        """
        Retrieves details about this NiFi to put in the About dialog.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_about_info()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.AboutEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_about_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/about', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AboutEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_action(self, id, **kwargs):
        """
        Gets an action.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_action_with_http_info()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The action id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ActionEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_action_with_http_info(id, **kwargs)
        else:
            (data) = self.get_action_with_http_info(id, **kwargs)
            return data

    def get_action_with_http_info(self, id, **kwargs):
        """
        Gets an action.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_action()`` method instead.
        
        Args:
            id (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The action id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ActionEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_action`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/history/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ActionEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_additional_details(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the additional details for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_additional_details_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The processor type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.AdditionalDetailsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_additional_details_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_additional_details_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_additional_details_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the additional details for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_additional_details()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The processor type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.AdditionalDetailsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_additional_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_additional_details`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_additional_details`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_additional_details`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_additional_details`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/additional-details/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AdditionalDetailsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_flow_analysis_results(self, **kwargs):
        """
        Returns all flow analysis results currently in effect.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_all_flow_analysis_results_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowAnalysisResultEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_flow_analysis_results_with_http_info(**kwargs)
        else:
            (data) = self.get_all_flow_analysis_results_with_http_info(**kwargs)
            return data

    def get_all_flow_analysis_results_with_http_info(self, **kwargs):
        """
        Returns all flow analysis results currently in effect.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_all_flow_analysis_results()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowAnalysisResultEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_flow_analysis_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/flow-analysis/results', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowAnalysisResultEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_banners(self, **kwargs):
        """
        Retrieves the banners for this NiFi.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_banners_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.BannerEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_banners_with_http_info(**kwargs)
        else:
            (data) = self.get_banners_with_http_info(**kwargs)
            return data

    def get_banners_with_http_info(self, **kwargs):
        """
        Retrieves the banners for this NiFi.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_banners()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.BannerEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_banners" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/banners', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BannerEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_branches(self, id, **kwargs):
        """
        Gets the branches from the specified registry for the current user.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_branches_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The registry id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowRegistryBranchesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_branches_with_http_info(id, **kwargs)
        else:
            (data) = self.get_branches_with_http_info(id, **kwargs)
            return data

    def get_branches_with_http_info(self, id, **kwargs):
        """
        Gets the branches from the specified registry for the current user.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_branches()`` method instead.
        
        Args:
            id (str): 
                The registry id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowRegistryBranchesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_branches`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{id}/branches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowRegistryBranchesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_breadcrumbs(self, id, **kwargs):
        """
        Gets the breadcrumbs for a process group.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_breadcrumbs_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowBreadcrumbEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_breadcrumbs_with_http_info(id, **kwargs)
        else:
            (data) = self.get_breadcrumbs_with_http_info(id, **kwargs)
            return data

    def get_breadcrumbs_with_http_info(self, id, **kwargs):
        """
        Gets the breadcrumbs for a process group.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_breadcrumbs()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowBreadcrumbEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_breadcrumbs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_breadcrumbs`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}/breadcrumbs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowBreadcrumbEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_buckets(self, id, **kwargs):
        """
        Gets the buckets from the specified registry for the current user.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_buckets_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The registry id. (required)
            branch (str): 
                The name of a branch to get the buckets from. If not specified the default branch of the registry client will be used.
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowRegistryBucketsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_buckets_with_http_info(id, **kwargs)
        else:
            (data) = self.get_buckets_with_http_info(id, **kwargs)
            return data

    def get_buckets_with_http_info(self, id, **kwargs):
        """
        Gets the buckets from the specified registry for the current user.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_buckets()`` method instead.
        
        Args:
            id (str): 
                The registry id. (required)
            branch (str): 
                The name of a branch to get the buckets from. If not specified the default branch of the registry client will be used.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowRegistryBucketsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'branch']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_buckets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_buckets`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{id}/buckets', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowRegistryBucketsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bulletin_board(self, **kwargs):
        """
        Gets current bulletins.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bulletin_board_with_http_info()`` method instead.
        
        Args:
            after (:class:`~nipyapi.nifi.models.LongParameter`): 
                Includes bulletins with an id after this value.
            source_name (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose name match this regular expression.
            message (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins whose message that match this regular expression.
            source_id (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose id match this regular expression.
            group_id (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose group id match this regular expression.
            limit (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The number of bulletins to limit the response to.
                
        Returns:
            :class:`~nipyapi.nifi.models.BulletinBoardEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bulletin_board_with_http_info(**kwargs)
        else:
            (data) = self.get_bulletin_board_with_http_info(**kwargs)
            return data

    def get_bulletin_board_with_http_info(self, **kwargs):
        """
        Gets current bulletins.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bulletin_board()`` method instead.
        
        Args:
            after (:class:`~nipyapi.nifi.models.LongParameter`): 
                Includes bulletins with an id after this value.
            source_name (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose name match this regular expression.
            message (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins whose message that match this regular expression.
            source_id (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose id match this regular expression.
            group_id (:class:`~nipyapi.nifi.models.BulletinBoardPatternParameter`): 
                Includes bulletins originating from this sources whose group id match this regular expression.
            limit (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The number of bulletins to limit the response to.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.BulletinBoardEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['after', 'source_name', 'message', 'source_id', 'group_id', 'limit']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulletin_board" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'source_name' in params:
            query_params.append(('sourceName', params['source_name']))
        if 'message' in params:
            query_params.append(('message', params['message']))
        if 'source_id' in params:
            query_params.append(('sourceId', params['source_id']))
        if 'group_id' in params:
            query_params.append(('groupId', params['group_id']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/bulletin-board', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BulletinBoardEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_bulletins(self, **kwargs):
        """
        Retrieves Controller level bulletins.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_bulletins_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerBulletinsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_bulletins_with_http_info(**kwargs)
        else:
            (data) = self.get_bulletins_with_http_info(**kwargs)
            return data

    def get_bulletins_with_http_info(self, **kwargs):
        """
        Retrieves Controller level bulletins.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_bulletins()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerBulletinsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulletins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/controller/bulletins', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerBulletinsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_cluster_summary(self, **kwargs):
        """
        The cluster summary for this NiFi.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_cluster_summary_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ClusterSummaryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cluster_summary_with_http_info(**kwargs)
        else:
            (data) = self.get_cluster_summary_with_http_info(**kwargs)
            return data

    def get_cluster_summary_with_http_info(self, **kwargs):
        """
        The cluster summary for this NiFi.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_cluster_summary()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ClusterSummaryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/cluster/summary', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClusterSummaryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_component_history(self, component_id, **kwargs):
        """
        Gets configuration history for a component.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_component_history_with_http_info()`` method instead.
        
        Args:
            component_id (str): 
                The component id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ComponentHistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_component_history_with_http_info(component_id, **kwargs)
        else:
            (data) = self.get_component_history_with_http_info(component_id, **kwargs)
            return data

    def get_component_history_with_http_info(self, component_id, **kwargs):
        """
        Gets configuration history for a component.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_component_history()`` method instead.
        
        Args:
            component_id (str): 
                The component id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ComponentHistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['component_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'component_id' is set
        if ('component_id' not in params) or (params['component_id'] is None):
            raise ValueError("Missing the required parameter `component_id` when calling `get_component_history`")

 
        collection_formats = {}

        path_params = {}
        if 'component_id' in params:
            path_params['componentId'] = params['component_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/history/components/{componentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ComponentHistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_connection_statistics(self, id, **kwargs):
        """
        Gets statistics for a connection.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_connection_statistics_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the statistics.
                
        Returns:
            :class:`~nipyapi.nifi.models.ConnectionStatisticsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_connection_statistics_with_http_info(id, **kwargs)
        else:
            (data) = self.get_connection_statistics_with_http_info(id, **kwargs)
            return data

    def get_connection_statistics_with_http_info(self, id, **kwargs):
        """
        Gets statistics for a connection.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_connection_statistics()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the statistics.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ConnectionStatisticsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_connection_statistics`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/connections/{id}/statistics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConnectionStatisticsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_connection_status(self, id, **kwargs):
        """
        Gets status for a connection.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_connection_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.ConnectionStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_connection_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_connection_status_with_http_info(id, **kwargs)
            return data

    def get_connection_status_with_http_info(self, id, **kwargs):
        """
        Gets status for a connection.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_connection_status()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ConnectionStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_connection_status`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/connections/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConnectionStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_connection_status_history(self, id, **kwargs):
        """
        Gets the status history for a connection.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_connection_status_history_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.StatusHistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_connection_status_history_with_http_info(id, **kwargs)
        else:
            (data) = self.get_connection_status_history_with_http_info(id, **kwargs)
            return data

    def get_connection_status_history_with_http_info(self, id, **kwargs):
        """
        Gets the status history for a connection.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_connection_status_history()`` method instead.
        
        Args:
            id (str): 
                The connection id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StatusHistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection_status_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_connection_status_history`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/connections/{id}/status/history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusHistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_content_viewers(self, **kwargs):
        """
        Retrieves the registered content viewers.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_content_viewers_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ContentViewerEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_content_viewers_with_http_info(**kwargs)
        else:
            (data) = self.get_content_viewers_with_http_info(**kwargs)
            return data

    def get_content_viewers_with_http_info(self, **kwargs):
        """
        Retrieves the registered content viewers.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_content_viewers()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ContentViewerEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_content_viewers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/content-viewers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ContentViewerEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_controller_service_definition(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Controller Service Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_controller_service_definition_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The controller service type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerServiceDefinition`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_controller_service_definition_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_controller_service_definition_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_controller_service_definition_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Controller Service Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_controller_service_definition()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The controller service type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerServiceDefinition`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_service_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_controller_service_definition`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_controller_service_definition`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_controller_service_definition`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_controller_service_definition`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/controller-service-definition/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerServiceDefinition',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_controller_service_types(self, **kwargs):
        """
        Retrieves the types of controller services that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_controller_service_types_with_http_info()`` method instead.
        
        Args:
            service_type (str): 
                If specified, will only return controller services that are compatible with this type of service.
            service_bundle_group (str): 
                If serviceType specified, is the bundle group of the serviceType.
            service_bundle_artifact (str): 
                If serviceType specified, is the bundle artifact of the serviceType.
            service_bundle_version (str): 
                If serviceType specified, is the bundle version of the serviceType.
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type_filter (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerServiceTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_controller_service_types_with_http_info(**kwargs)
        else:
            (data) = self.get_controller_service_types_with_http_info(**kwargs)
            return data

    def get_controller_service_types_with_http_info(self, **kwargs):
        """
        Retrieves the types of controller services that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_controller_service_types()`` method instead.
        
        Args:
            service_type (str): 
                If specified, will only return controller services that are compatible with this type of service.
            service_bundle_group (str): 
                If serviceType specified, is the bundle group of the serviceType.
            service_bundle_artifact (str): 
                If serviceType specified, is the bundle artifact of the serviceType.
            service_bundle_version (str): 
                If serviceType specified, is the bundle version of the serviceType.
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type_filter (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerServiceTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['service_type', 'service_bundle_group', 'service_bundle_artifact', 'service_bundle_version', 'bundle_group_filter', 'bundle_artifact_filter', 'type_filter']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_service_types" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
 
 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'service_type' in params:
            query_params.append(('serviceType', params['service_type']))
        if 'service_bundle_group' in params:
            query_params.append(('serviceBundleGroup', params['service_bundle_group']))
        if 'service_bundle_artifact' in params:
            query_params.append(('serviceBundleArtifact', params['service_bundle_artifact']))
        if 'service_bundle_version' in params:
            query_params.append(('serviceBundleVersion', params['service_bundle_version']))
        if 'bundle_group_filter' in params:
            query_params.append(('bundleGroupFilter', params['bundle_group_filter']))
        if 'bundle_artifact_filter' in params:
            query_params.append(('bundleArtifactFilter', params['bundle_artifact_filter']))
        if 'type_filter' in params:
            query_params.append(('typeFilter', params['type_filter']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/controller-service-types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerServiceTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_controller_services_from_controller(self, **kwargs):
        """
        Gets controller services for reporting tasks.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_controller_services_from_controller_with_http_info()`` method instead.
        
        Args:
            ui_only (bool):
            include_referencing_components (bool): 
                Whether or not to include services' referencing components in the response
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerServicesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_controller_services_from_controller_with_http_info(**kwargs)
        else:
            (data) = self.get_controller_services_from_controller_with_http_info(**kwargs)
            return data

    def get_controller_services_from_controller_with_http_info(self, **kwargs):
        """
        Gets controller services for reporting tasks.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_controller_services_from_controller()`` method instead.
        
        Args:
            ui_only (bool):
            include_referencing_components (bool): 
                Whether or not to include services' referencing components in the response
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerServicesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['ui_only', 'include_referencing_components']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_services_from_controller" % key
                )
            params[key] = val
        del params['kwargs']

 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ui_only' in params:
            query_params.append(('uiOnly', params['ui_only']))
        if 'include_referencing_components' in params:
            query_params.append(('includeReferencingComponents', params['include_referencing_components']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/controller/controller-services', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerServicesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_controller_services_from_group(self, id, **kwargs):
        """
        Gets all controller services.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_controller_services_from_group_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            include_ancestor_groups (bool): 
                Whether or not to include parent/ancestor process groups
            include_descendant_groups (bool): 
                Whether or not to include descendant process groups
            include_referencing_components (bool): 
                Whether or not to include services' referencing components in the response
            ui_only (bool):
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerServicesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_controller_services_from_group_with_http_info(id, **kwargs)
        else:
            (data) = self.get_controller_services_from_group_with_http_info(id, **kwargs)
            return data

    def get_controller_services_from_group_with_http_info(self, id, **kwargs):
        """
        Gets all controller services.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_controller_services_from_group()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            include_ancestor_groups (bool): 
                Whether or not to include parent/ancestor process groups
            include_descendant_groups (bool): 
                Whether or not to include descendant process groups
            include_referencing_components (bool): 
                Whether or not to include services' referencing components in the response
            ui_only (bool):
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerServicesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'include_ancestor_groups', 'include_descendant_groups', 'include_referencing_components', 'ui_only']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_services_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_controller_services_from_group`")

 
 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'include_ancestor_groups' in params:
            query_params.append(('includeAncestorGroups', params['include_ancestor_groups']))
        if 'include_descendant_groups' in params:
            query_params.append(('includeDescendantGroups', params['include_descendant_groups']))
        if 'include_referencing_components' in params:
            query_params.append(('includeReferencingComponents', params['include_referencing_components']))
        if 'ui_only' in params:
            query_params.append(('uiOnly', params['ui_only']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}/controller-services', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerServicesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_controller_status(self, **kwargs):
        """
        Gets the current status of this NiFi.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_controller_status_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ControllerStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_controller_status_with_http_info(**kwargs)
        else:
            (data) = self.get_controller_status_with_http_info(**kwargs)
            return data

    def get_controller_status_with_http_info(self, **kwargs):
        """
        Gets the current status of this NiFi.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_controller_status()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ControllerStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ControllerStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_current_user(self, **kwargs):
        """
        Retrieves the user identity of the user making the request.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_current_user_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.CurrentUserEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_current_user_with_http_info(**kwargs)
        else:
            (data) = self.get_current_user_with_http_info(**kwargs)
            return data

    def get_current_user_with_http_info(self, **kwargs):
        """
        Retrieves the user identity of the user making the request.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_current_user()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.CurrentUserEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_user" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/current-user', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CurrentUserEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_details(self, registry_id, bucket_id, flow_id, **kwargs):
        """
        Gets the details of a flow from the specified registry and bucket for the specified flow for the current user.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_details_with_http_info()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            flow_id (str): 
                The flow id. (required)
            branch (str): 
                The name of a branch to get the flow from. If not specified the default branch of the registry client will be used.
                
        Returns:
            :class:`~nipyapi.nifi.models.VersionedFlowEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_details_with_http_info(registry_id, bucket_id, flow_id, **kwargs)
        else:
            (data) = self.get_details_with_http_info(registry_id, bucket_id, flow_id, **kwargs)
            return data

    def get_details_with_http_info(self, registry_id, bucket_id, flow_id, **kwargs):
        """
        Gets the details of a flow from the specified registry and bucket for the specified flow for the current user.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_details()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            flow_id (str): 
                The flow id. (required)
            branch (str): 
                The name of a branch to get the flow from. If not specified the default branch of the registry client will be used.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VersionedFlowEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['registry_id', 'bucket_id', 'flow_id', 'branch']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `get_details`")
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params) or (params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `get_details`")
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_details`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registry-id'] = params['registry_id']
        if 'bucket_id' in params:
            path_params['bucket-id'] = params['bucket_id']
        if 'flow_id' in params:
            path_params['flow-id'] = params['flow_id']

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/details', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow(self, id, **kwargs):
        """
        Gets a process group.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            ui_only (bool):
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessGroupFlowEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_with_http_info(id, **kwargs)
        else:
            (data) = self.get_flow_with_http_info(id, **kwargs)
            return data

    def get_flow_with_http_info(self, id, **kwargs):
        """
        Gets a process group.

        If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            ui_only (bool):
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessGroupFlowEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'ui_only']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_flow`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'ui_only' in params:
            query_params.append(('uiOnly', params['ui_only']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessGroupFlowEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_analysis_results(self, process_group_id, **kwargs):
        """
        Returns flow analysis results produced by the analysis of a given process group.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_analysis_results_with_http_info()`` method instead.
        
        Args:
            process_group_id (str): 
                The id of the process group representing (a part of) the flow to be analyzed. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowAnalysisResultEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_analysis_results_with_http_info(process_group_id, **kwargs)
        else:
            (data) = self.get_flow_analysis_results_with_http_info(process_group_id, **kwargs)
            return data

    def get_flow_analysis_results_with_http_info(self, process_group_id, **kwargs):
        """
        Returns flow analysis results produced by the analysis of a given process group.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_analysis_results()`` method instead.
        
        Args:
            process_group_id (str): 
                The id of the process group representing (a part of) the flow to be analyzed. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowAnalysisResultEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['process_group_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_analysis_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_group_id' is set
        if ('process_group_id' not in params) or (params['process_group_id'] is None):
            raise ValueError("Missing the required parameter `process_group_id` when calling `get_flow_analysis_results`")

 
        collection_formats = {}

        path_params = {}
        if 'process_group_id' in params:
            path_params['processGroupId'] = params['process_group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/flow-analysis/results/{processGroupId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowAnalysisResultEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_analysis_rule_definition(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Flow Analysis Rule Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_analysis_rule_definition_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The flow analysis rule type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowAnalysisRuleDefinition`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_analysis_rule_definition_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_flow_analysis_rule_definition_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_flow_analysis_rule_definition_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Flow Analysis Rule Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_analysis_rule_definition()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The flow analysis rule type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowAnalysisRuleDefinition`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_analysis_rule_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_flow_analysis_rule_definition`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_flow_analysis_rule_definition`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_flow_analysis_rule_definition`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_flow_analysis_rule_definition`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/flow-analysis-rule-definition/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowAnalysisRuleDefinition',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_analysis_rule_types(self, **kwargs):
        """
        Retrieves the types of available Flow Analysis Rules.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_analysis_rule_types_with_http_info()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowAnalysisRuleTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_analysis_rule_types_with_http_info(**kwargs)
        else:
            (data) = self.get_flow_analysis_rule_types_with_http_info(**kwargs)
            return data

    def get_flow_analysis_rule_types_with_http_info(self, **kwargs):
        """
        Retrieves the types of available Flow Analysis Rules.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_analysis_rule_types()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowAnalysisRuleTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_group_filter', 'bundle_artifact_filter', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_analysis_rule_types" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundle_group_filter' in params:
            query_params.append(('bundleGroupFilter', params['bundle_group_filter']))
        if 'bundle_artifact_filter' in params:
            query_params.append(('bundleArtifactFilter', params['bundle_artifact_filter']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/flow-analysis-rule-types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowAnalysisRuleTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_config(self, **kwargs):
        """
        Retrieves the configuration for this NiFi flow.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_config_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowConfigurationEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_config_with_http_info(**kwargs)
        else:
            (data) = self.get_flow_config_with_http_info(**kwargs)
            return data

    def get_flow_config_with_http_info(self, **kwargs):
        """
        Retrieves the configuration for this NiFi flow.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_config()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowConfigurationEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/config', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowConfigurationEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flow_metrics(self, producer, **kwargs):
        """
        Gets all metrics for the flow from a particular node.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flow_metrics_with_http_info()`` method instead.
        
        Args:
            producer (str): 
                The producer for flow file metrics. Each producer may have its own output format. (required)
            included_registries (:class:`~nipyapi.nifi.models.list[str]`): 
                Set of included metrics registries. Duplicate the parameter to include multiple registries. All registries are included by default.
            sample_name (str): 
                Regular Expression Pattern to be applied against the sample name field
            sample_label_value (str): 
                Regular Expression Pattern to be applied against the sample label value field
            root_field_name (str): 
                Name of the first field of JSON object. Applicable for JSON producer only.
                
        Returns:
            :class:`~nipyapi.nifi.models.StreamingOutput`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flow_metrics_with_http_info(producer, **kwargs)
        else:
            (data) = self.get_flow_metrics_with_http_info(producer, **kwargs)
            return data

    def get_flow_metrics_with_http_info(self, producer, **kwargs):
        """
        Gets all metrics for the flow from a particular node.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flow_metrics()`` method instead.
        
        Args:
            producer (str): 
                The producer for flow file metrics. Each producer may have its own output format. (required)
            included_registries (:class:`~nipyapi.nifi.models.list[str]`): 
                Set of included metrics registries. Duplicate the parameter to include multiple registries. All registries are included by default.
            sample_name (str): 
                Regular Expression Pattern to be applied against the sample name field
            sample_label_value (str): 
                Regular Expression Pattern to be applied against the sample label value field
            root_field_name (str): 
                Name of the first field of JSON object. Applicable for JSON producer only.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StreamingOutput`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['producer', 'included_registries', 'sample_name', 'sample_label_value', 'root_field_name']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flow_metrics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'producer' is set
        if ('producer' not in params) or (params['producer'] is None):
            raise ValueError("Missing the required parameter `producer` when calling `get_flow_metrics`")

 
 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'producer' in params:
            path_params['producer'] = params['producer']

        query_params = []
        if 'included_registries' in params:
            query_params.append(('includedRegistries', params['included_registries']))
            collection_formats['includedRegistries'] = 'multi'
        if 'sample_name' in params:
            query_params.append(('sampleName', params['sample_name']))
        if 'sample_label_value' in params:
            query_params.append(('sampleLabelValue', params['sample_label_value']))
        if 'root_field_name' in params:
            query_params.append(('rootFieldName', params['root_field_name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['*/*'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/metrics/{producer}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StreamingOutput',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_flows(self, registry_id, bucket_id, **kwargs):
        """
        Gets the flows from the specified registry and bucket for the current user.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_flows_with_http_info()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            branch (str): 
                The name of a branch to get the flows from. If not specified the default branch of the registry client will be used.
                
        Returns:
            :class:`~nipyapi.nifi.models.VersionedFlowsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_flows_with_http_info(registry_id, bucket_id, **kwargs)
        else:
            (data) = self.get_flows_with_http_info(registry_id, bucket_id, **kwargs)
            return data

    def get_flows_with_http_info(self, registry_id, bucket_id, **kwargs):
        """
        Gets the flows from the specified registry and bucket for the current user.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_flows()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            branch (str): 
                The name of a branch to get the flows from. If not specified the default branch of the registry client will be used.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VersionedFlowsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['registry_id', 'bucket_id', 'branch']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_flows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `get_flows`")
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params) or (params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `get_flows`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registry-id'] = params['registry_id']
        if 'bucket_id' in params:
            path_params['bucket-id'] = params['bucket_id']

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{registry-id}/buckets/{bucket-id}/flows', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_input_port_status(self, id, **kwargs):
        """
        Gets status for an input port.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_input_port_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The input port id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.PortStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_input_port_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_input_port_status_with_http_info(id, **kwargs)
            return data

    def get_input_port_status_with_http_info(self, id, **kwargs):
        """
        Gets status for an input port.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_input_port_status()`` method instead.
        
        Args:
            id (str): 
                The input port id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.PortStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_input_port_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_input_port_status`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/input-ports/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PortStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_output_port_status(self, id, **kwargs):
        """
        Gets status for an output port.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_output_port_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The output port id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.PortStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_output_port_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_output_port_status_with_http_info(id, **kwargs)
            return data

    def get_output_port_status_with_http_info(self, id, **kwargs):
        """
        Gets status for an output port.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_output_port_status()`` method instead.
        
        Args:
            id (str): 
                The output port id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.PortStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_output_port_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_output_port_status`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/output-ports/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PortStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_contexts(self, **kwargs):
        """
        Gets all Parameter Contexts.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_contexts_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterContextsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_contexts_with_http_info(**kwargs)
        else:
            (data) = self.get_parameter_contexts_with_http_info(**kwargs)
            return data

    def get_parameter_contexts_with_http_info(self, **kwargs):
        """
        Gets all Parameter Contexts.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_contexts()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterContextsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_contexts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/parameter-contexts', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterContextsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_provider_definition(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Parameter Provider Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_provider_definition_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The parameter provider type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderDefinition`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_provider_definition_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_parameter_provider_definition_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_parameter_provider_definition_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Parameter Provider Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_provider_definition()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The parameter provider type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderDefinition`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_provider_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_parameter_provider_definition`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_parameter_provider_definition`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_parameter_provider_definition`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_parameter_provider_definition`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/parameter-provider-definition/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderDefinition',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_provider_types(self, **kwargs):
        """
        Retrieves the types of parameter providers that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_provider_types_with_http_info()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProviderTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_provider_types_with_http_info(**kwargs)
        else:
            (data) = self.get_parameter_provider_types_with_http_info(**kwargs)
            return data

    def get_parameter_provider_types_with_http_info(self, **kwargs):
        """
        Retrieves the types of parameter providers that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_provider_types()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProviderTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_group_filter', 'bundle_artifact_filter', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_provider_types" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundle_group_filter' in params:
            query_params.append(('bundleGroupFilter', params['bundle_group_filter']))
        if 'bundle_artifact_filter' in params:
            query_params.append(('bundleArtifactFilter', params['bundle_artifact_filter']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/parameter-provider-types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProviderTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parameter_providers(self, **kwargs):
        """
        Gets all parameter providers.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_parameter_providers_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ParameterProvidersEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parameter_providers_with_http_info(**kwargs)
        else:
            (data) = self.get_parameter_providers_with_http_info(**kwargs)
            return data

    def get_parameter_providers_with_http_info(self, **kwargs):
        """
        Gets all parameter providers.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_parameter_providers()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ParameterProvidersEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parameter_providers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/parameter-providers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ParameterProvidersEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_prioritizers(self, **kwargs):
        """
        Retrieves the types of prioritizers that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_prioritizers_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.PrioritizerTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_prioritizers_with_http_info(**kwargs)
        else:
            (data) = self.get_prioritizers_with_http_info(**kwargs)
            return data

    def get_prioritizers_with_http_info(self, **kwargs):
        """
        Retrieves the types of prioritizers that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_prioritizers()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.PrioritizerTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prioritizers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/prioritizers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PrioritizerTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_group_status(self, id, **kwargs):
        """
        Gets the status for a process group.

        The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_process_group_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            recursive (bool): 
                Whether all descendant groups and the status of their content will be included. Optional, defaults to false
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessGroupStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_group_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_process_group_status_with_http_info(id, **kwargs)
            return data

    def get_process_group_status_with_http_info(self, id, **kwargs):
        """
        Gets the status for a process group.

        The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_process_group_status()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
            recursive (bool): 
                Whether all descendant groups and the status of their content will be included. Optional, defaults to false
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessGroupStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'recursive', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_group_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_process_group_status`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'recursive' in params:
            query_params.append(('recursive', params['recursive']))
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessGroupStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_group_status_history(self, id, **kwargs):
        """
        Gets status history for a remote process group.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_process_group_status_history_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.StatusHistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_group_status_history_with_http_info(id, **kwargs)
        else:
            (data) = self.get_process_group_status_history_with_http_info(id, **kwargs)
            return data

    def get_process_group_status_history_with_http_info(self, id, **kwargs):
        """
        Gets status history for a remote process group.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_process_group_status_history()`` method instead.
        
        Args:
            id (str): 
                The process group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StatusHistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_group_status_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_process_group_status_history`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}/status/history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusHistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_definition(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Processor Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_definition_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The processor type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorDefinition`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_definition_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_processor_definition_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_processor_definition_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Processor Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_definition()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The processor type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorDefinition`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_processor_definition`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_processor_definition`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_processor_definition`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_processor_definition`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/processor-definition/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorDefinition',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_status(self, id, **kwargs):
        """
        Gets status for a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_processor_status_with_http_info(id, **kwargs)
            return data

    def get_processor_status_with_http_info(self, id, **kwargs):
        """
        Gets status for a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_status()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_processor_status`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/processors/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_status_history(self, id, **kwargs):
        """
        Gets status history for a processor.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_status_history_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.StatusHistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_status_history_with_http_info(id, **kwargs)
        else:
            (data) = self.get_processor_status_history_with_http_info(id, **kwargs)
            return data

    def get_processor_status_history_with_http_info(self, id, **kwargs):
        """
        Gets status history for a processor.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_status_history()`` method instead.
        
        Args:
            id (str): 
                The processor id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StatusHistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_status_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_processor_status_history`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/processors/{id}/status/history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusHistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_processor_types(self, **kwargs):
        """
        Retrieves the types of processors that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_processor_types_with_http_info()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            :class:`~nipyapi.nifi.models.ProcessorTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_processor_types_with_http_info(**kwargs)
        else:
            (data) = self.get_processor_types_with_http_info(**kwargs)
            return data

    def get_processor_types_with_http_info(self, **kwargs):
        """
        Retrieves the types of processors that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_processor_types()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ProcessorTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_group_filter', 'bundle_artifact_filter', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_processor_types" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundle_group_filter' in params:
            query_params.append(('bundleGroupFilter', params['bundle_group_filter']))
        if 'bundle_artifact_filter' in params:
            query_params.append(('bundleArtifactFilter', params['bundle_artifact_filter']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/processor-types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProcessorTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_registry_clients(self, **kwargs):
        """
        Gets the listing of available flow registry clients.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_registry_clients_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowRegistryClientsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_registry_clients_with_http_info(**kwargs)
        else:
            (data) = self.get_registry_clients_with_http_info(**kwargs)
            return data

    def get_registry_clients_with_http_info(self, **kwargs):
        """
        Gets the listing of available flow registry clients.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_registry_clients()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowRegistryClientsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry_clients" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowRegistryClientsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_remote_process_group_status(self, id, **kwargs):
        """
        Gets status for a remote process group.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_remote_process_group_status_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The remote process group id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            :class:`~nipyapi.nifi.models.RemoteProcessGroupStatusEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_remote_process_group_status_with_http_info(id, **kwargs)
        else:
            (data) = self.get_remote_process_group_status_with_http_info(id, **kwargs)
            return data

    def get_remote_process_group_status_with_http_info(self, id, **kwargs):
        """
        Gets status for a remote process group.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_remote_process_group_status()`` method instead.
        
        Args:
            id (str): 
                The remote process group id. (required)
            nodewise (bool): 
                Whether or not to include the breakdown per node. Optional, defaults to false
            cluster_node_id (str): 
                The id of the node where to get the status.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.RemoteProcessGroupStatusEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id', 'nodewise', 'cluster_node_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_process_group_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_remote_process_group_status`")

 
 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []
        if 'nodewise' in params:
            query_params.append(('nodewise', params['nodewise']))
        if 'cluster_node_id' in params:
            query_params.append(('clusterNodeId', params['cluster_node_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/remote-process-groups/{id}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RemoteProcessGroupStatusEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_remote_process_group_status_history(self, id, **kwargs):
        """
        Gets the status history.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_remote_process_group_status_history_with_http_info()`` method instead.
        
        Args:
            id (str): 
                The remote process group id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.StatusHistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_remote_process_group_status_history_with_http_info(id, **kwargs)
        else:
            (data) = self.get_remote_process_group_status_history_with_http_info(id, **kwargs)
            return data

    def get_remote_process_group_status_history_with_http_info(self, id, **kwargs):
        """
        Gets the status history.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_remote_process_group_status_history()`` method instead.
        
        Args:
            id (str): 
                The remote process group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.StatusHistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_process_group_status_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_remote_process_group_status_history`")

 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/remote-process-groups/{id}/status/history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StatusHistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reporting_task_definition(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Reporting Task Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_reporting_task_definition_with_http_info()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The reporting task type (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ReportingTaskDefinition`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reporting_task_definition_with_http_info(group, artifact, version, type, **kwargs)
        else:
            (data) = self.get_reporting_task_definition_with_http_info(group, artifact, version, type, **kwargs)
            return data

    def get_reporting_task_definition_with_http_info(self, group, artifact, version, type, **kwargs):
        """
        Retrieves the Reporting Task Definition for the specified component type..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_reporting_task_definition()`` method instead.
        
        Args:
            group (str): 
                The bundle group (required)
            artifact (str): 
                The bundle artifact (required)
            version (str): 
                The bundle version (required)
            type (str): 
                The reporting task type (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ReportingTaskDefinition`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['group', 'artifact', 'version', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reporting_task_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group' is set
        if ('group' not in params) or (params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `get_reporting_task_definition`")
        # verify the required parameter 'artifact' is set
        if ('artifact' not in params) or (params['artifact'] is None):
            raise ValueError("Missing the required parameter `artifact` when calling `get_reporting_task_definition`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `get_reporting_task_definition`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_reporting_task_definition`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'group' in params:
            path_params['group'] = params['group']
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/reporting-task-definition/{group}/{artifact}/{version}/{type}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportingTaskDefinition',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reporting_task_snapshot(self, **kwargs):
        """
        Get a snapshot of the given reporting tasks and any controller services they use.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_reporting_task_snapshot_with_http_info()`` method instead.
        
        Args:
            reporting_task_id (str): 
                Specifies a reporting task id to export. If not specified, all reporting tasks will be exported.
                
        Returns:
            :class:`~nipyapi.nifi.models.VersionedReportingTaskSnapshot`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reporting_task_snapshot_with_http_info(**kwargs)
        else:
            (data) = self.get_reporting_task_snapshot_with_http_info(**kwargs)
            return data

    def get_reporting_task_snapshot_with_http_info(self, **kwargs):
        """
        Get a snapshot of the given reporting tasks and any controller services they use.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_reporting_task_snapshot()`` method instead.
        
        Args:
            reporting_task_id (str): 
                Specifies a reporting task id to export. If not specified, all reporting tasks will be exported.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VersionedReportingTaskSnapshot`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['reporting_task_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reporting_task_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reporting_task_id' in params:
            query_params.append(('reportingTaskId', params['reporting_task_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/reporting-tasks/snapshot', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedReportingTaskSnapshot',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reporting_task_types(self, **kwargs):
        """
        Retrieves the types of reporting tasks that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_reporting_task_types_with_http_info()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            :class:`~nipyapi.nifi.models.ReportingTaskTypesEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reporting_task_types_with_http_info(**kwargs)
        else:
            (data) = self.get_reporting_task_types_with_http_info(**kwargs)
            return data

    def get_reporting_task_types_with_http_info(self, **kwargs):
        """
        Retrieves the types of reporting tasks that this NiFi supports.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_reporting_task_types()`` method instead.
        
        Args:
            bundle_group_filter (str): 
                If specified, will only return types that are a member of this bundle group.
            bundle_artifact_filter (str): 
                If specified, will only return types that are a member of this bundle artifact.
            type (str): 
                If specified, will only return types whose fully qualified classname matches.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ReportingTaskTypesEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['bundle_group_filter', 'bundle_artifact_filter', 'type']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reporting_task_types" % key
                )
            params[key] = val
        del params['kwargs']

 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'bundle_group_filter' in params:
            query_params.append(('bundleGroupFilter', params['bundle_group_filter']))
        if 'bundle_artifact_filter' in params:
            query_params.append(('bundleArtifactFilter', params['bundle_artifact_filter']))
        if 'type' in params:
            query_params.append(('type', params['type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/reporting-task-types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportingTaskTypesEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reporting_tasks(self, **kwargs):
        """
        Gets all reporting tasks.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_reporting_tasks_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.ReportingTasksEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reporting_tasks_with_http_info(**kwargs)
        else:
            (data) = self.get_reporting_tasks_with_http_info(**kwargs)
            return data

    def get_reporting_tasks_with_http_info(self, **kwargs):
        """
        Gets all reporting tasks.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_reporting_tasks()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ReportingTasksEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reporting_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/reporting-tasks', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ReportingTasksEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_runtime_manifest(self, **kwargs):
        """
        Retrieves the runtime manifest for this NiFi instance..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_runtime_manifest_with_http_info()`` method instead.
        
        Args:
                
        Returns:
            :class:`~nipyapi.nifi.models.RuntimeManifestEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_runtime_manifest_with_http_info(**kwargs)
        else:
            (data) = self.get_runtime_manifest_with_http_info(**kwargs)
            return data

    def get_runtime_manifest_with_http_info(self, **kwargs):
        """
        Retrieves the runtime manifest for this NiFi instance..

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_runtime_manifest()`` method instead.
        
        Args:
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.RuntimeManifestEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = []
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_runtime_manifest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/runtime-manifest', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RuntimeManifestEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_version_differences(self, registry_id, branch_id_a, bucket_id_a, flow_id_a, version_a, branch_id_b, bucket_id_b, flow_id_b, version_b, **kwargs):
        """
        Gets the differences between two versions of the same versioned flow, the basis of the comparison will be the first version.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_version_differences_with_http_info()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            branch_id_a (str): 
                The branch id for the base version. (required)
            bucket_id_a (str): 
                The bucket id for the base version. (required)
            flow_id_a (str): 
                The flow id for the base version. (required)
            version_a (str): 
                The base version. (required)
            branch_id_b (str): 
                The branch id for the compared version. (required)
            bucket_id_b (str): 
                The bucket id for the compared version. (required)
            flow_id_b (str): 
                The flow id for the compared version. (required)
            version_b (str): 
                The compared version. (required)
            offset (int): 
                Must be a non-negative number. Specifies the starting point of the listing. 0 means start from the beginning.
            limit (int): 
                Limits the number of differences listed. This might lead to partial result. 0 means no limitation is applied.
                
        Returns:
            :class:`~nipyapi.nifi.models.FlowComparisonEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_version_differences_with_http_info(registry_id, branch_id_a, bucket_id_a, flow_id_a, version_a, branch_id_b, bucket_id_b, flow_id_b, version_b, **kwargs)
        else:
            (data) = self.get_version_differences_with_http_info(registry_id, branch_id_a, bucket_id_a, flow_id_a, version_a, branch_id_b, bucket_id_b, flow_id_b, version_b, **kwargs)
            return data

    def get_version_differences_with_http_info(self, registry_id, branch_id_a, bucket_id_a, flow_id_a, version_a, branch_id_b, bucket_id_b, flow_id_b, version_b, **kwargs):
        """
        Gets the differences between two versions of the same versioned flow, the basis of the comparison will be the first version.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_version_differences()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            branch_id_a (str): 
                The branch id for the base version. (required)
            bucket_id_a (str): 
                The bucket id for the base version. (required)
            flow_id_a (str): 
                The flow id for the base version. (required)
            version_a (str): 
                The base version. (required)
            branch_id_b (str): 
                The branch id for the compared version. (required)
            bucket_id_b (str): 
                The bucket id for the compared version. (required)
            flow_id_b (str): 
                The flow id for the compared version. (required)
            version_b (str): 
                The compared version. (required)
            offset (int): 
                Must be a non-negative number. Specifies the starting point of the listing. 0 means start from the beginning.
            limit (int): 
                Limits the number of differences listed. This might lead to partial result. 0 means no limitation is applied.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.FlowComparisonEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['registry_id', 'branch_id_a', 'bucket_id_a', 'flow_id_a', 'version_a', 'branch_id_b', 'bucket_id_b', 'flow_id_b', 'version_b', 'offset', 'limit']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version_differences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `get_version_differences`")
        # verify the required parameter 'branch_id_a' is set
        if ('branch_id_a' not in params) or (params['branch_id_a'] is None):
            raise ValueError("Missing the required parameter `branch_id_a` when calling `get_version_differences`")
        # verify the required parameter 'bucket_id_a' is set
        if ('bucket_id_a' not in params) or (params['bucket_id_a'] is None):
            raise ValueError("Missing the required parameter `bucket_id_a` when calling `get_version_differences`")
        # verify the required parameter 'flow_id_a' is set
        if ('flow_id_a' not in params) or (params['flow_id_a'] is None):
            raise ValueError("Missing the required parameter `flow_id_a` when calling `get_version_differences`")
        # verify the required parameter 'version_a' is set
        if ('version_a' not in params) or (params['version_a'] is None):
            raise ValueError("Missing the required parameter `version_a` when calling `get_version_differences`")
        # verify the required parameter 'branch_id_b' is set
        if ('branch_id_b' not in params) or (params['branch_id_b'] is None):
            raise ValueError("Missing the required parameter `branch_id_b` when calling `get_version_differences`")
        # verify the required parameter 'bucket_id_b' is set
        if ('bucket_id_b' not in params) or (params['bucket_id_b'] is None):
            raise ValueError("Missing the required parameter `bucket_id_b` when calling `get_version_differences`")
        # verify the required parameter 'flow_id_b' is set
        if ('flow_id_b' not in params) or (params['flow_id_b'] is None):
            raise ValueError("Missing the required parameter `flow_id_b` when calling `get_version_differences`")
        # verify the required parameter 'version_b' is set
        if ('version_b' not in params) or (params['version_b'] is None):
            raise ValueError("Missing the required parameter `version_b` when calling `get_version_differences`")

 
 
 
 
 
 
 
 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registry-id'] = params['registry_id']
        if 'branch_id_a' in params:
            path_params['branch-id-a'] = params['branch_id_a']
        if 'bucket_id_a' in params:
            path_params['bucket-id-a'] = params['bucket_id_a']
        if 'flow_id_a' in params:
            path_params['flow-id-a'] = params['flow_id_a']
        if 'version_a' in params:
            path_params['version-a'] = params['version_a']
        if 'branch_id_b' in params:
            path_params['branch-id-b'] = params['branch_id_b']
        if 'bucket_id_b' in params:
            path_params['bucket-id-b'] = params['bucket_id_b']
        if 'flow_id_b' in params:
            path_params['flow-id-b'] = params['flow_id_b']
        if 'version_b' in params:
            path_params['version-b'] = params['version_b']

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{registry-id}/branches/{branch-id-a}/buckets/{bucket-id-a}/flows/{flow-id-a}/{version-a}/diff/branches/{branch-id-b}/buckets/{bucket-id-b}/flows/{flow-id-b}/{version-b}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FlowComparisonEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_versions(self, registry_id, bucket_id, flow_id, **kwargs):
        """
        Gets the flow versions from the specified registry and bucket for the specified flow for the current user.
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``get_versions_with_http_info()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            flow_id (str): 
                The flow id. (required)
            branch (str): 
                The name of a branch to get the flow versions from. If not specified the default branch of the registry client will be used.
                
        Returns:
            :class:`~nipyapi.nifi.models.VersionedFlowSnapshotMetadataSetEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_versions_with_http_info(registry_id, bucket_id, flow_id, **kwargs)
        else:
            (data) = self.get_versions_with_http_info(registry_id, bucket_id, flow_id, **kwargs)
            return data

    def get_versions_with_http_info(self, registry_id, bucket_id, flow_id, **kwargs):
        """
        Gets the flow versions from the specified registry and bucket for the specified flow for the current user.
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``get_versions()`` method instead.
        
        Args:
            registry_id (str): 
                The registry client id. (required)
            bucket_id (str): 
                The bucket id. (required)
            flow_id (str): 
                The flow id. (required)
            branch (str): 
                The name of a branch to get the flow versions from. If not specified the default branch of the registry client will be used.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.VersionedFlowSnapshotMetadataSetEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['registry_id', 'bucket_id', 'flow_id', 'branch']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_id' is set
        if ('registry_id' not in params) or (params['registry_id'] is None):
            raise ValueError("Missing the required parameter `registry_id` when calling `get_versions`")
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params) or (params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `get_versions`")
        # verify the required parameter 'flow_id' is set
        if ('flow_id' not in params) or (params['flow_id'] is None):
            raise ValueError("Missing the required parameter `flow_id` when calling `get_versions`")

 
 
 
 
        collection_formats = {}

        path_params = {}
        if 'registry_id' in params:
            path_params['registry-id'] = params['registry_id']
        if 'bucket_id' in params:
            path_params['bucket-id'] = params['bucket_id']
        if 'flow_id' in params:
            path_params['flow-id'] = params['flow_id']

        query_params = []
        if 'branch' in params:
            query_params.append(('branch', params['branch']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VersionedFlowSnapshotMetadataSetEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def query_history(self, offset, count, **kwargs):
        """
        Gets configuration history.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``query_history_with_http_info()`` method instead.
        
        Args:
            offset (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The offset into the result set. (required)
            count (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The number of actions to return. (required)
            sort_column (str): 
                The field to sort on.
            sort_order (str): 
                The direction to sort.
            start_date (:class:`~nipyapi.nifi.models.DateTimeParameter`): 
                Include actions after this date.
            end_date (:class:`~nipyapi.nifi.models.DateTimeParameter`): 
                Include actions before this date.
            user_identity (str): 
                Include actions performed by this user.
            source_id (str): 
                Include actions on this component.
                
        Returns:
            :class:`~nipyapi.nifi.models.HistoryEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_history_with_http_info(offset, count, **kwargs)
        else:
            (data) = self.query_history_with_http_info(offset, count, **kwargs)
            return data

    def query_history_with_http_info(self, offset, count, **kwargs):
        """
        Gets configuration history.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``query_history()`` method instead.
        
        Args:
            offset (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The offset into the result set. (required)
            count (:class:`~nipyapi.nifi.models.IntegerParameter`): 
                The number of actions to return. (required)
            sort_column (str): 
                The field to sort on.
            sort_order (str): 
                The direction to sort.
            start_date (:class:`~nipyapi.nifi.models.DateTimeParameter`): 
                Include actions after this date.
            end_date (:class:`~nipyapi.nifi.models.DateTimeParameter`): 
                Include actions before this date.
            user_identity (str): 
                Include actions performed by this user.
            source_id (str): 
                Include actions on this component.
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.HistoryEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['offset', 'count', 'sort_column', 'sort_order', 'start_date', 'end_date', 'user_identity', 'source_id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset' is set
        if ('offset' not in params) or (params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `query_history`")
        # verify the required parameter 'count' is set
        if ('count' not in params) or (params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `query_history`")

 
 
 
 
 
 
 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'sort_column' in params:
            query_params.append(('sortColumn', params['sort_column']))
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))
        if 'user_identity' in params:
            query_params.append(('userIdentity', params['user_identity']))
        if 'source_id' in params:
            query_params.append(('sourceId', params['source_id']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/history', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='HistoryEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def schedule_components(self, body, id, **kwargs):
        """
        Schedule or unschedule components in the specified Process Group..
        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``schedule_components_with_http_info()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ScheduleComponentsEntity`): 
                The request to schedule or unschedule. If the components in the request are not specified, all authorized components will be considered. (required)
            id (str): 
                The process group id. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ScheduleComponentsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.schedule_components_with_http_info(body, id, **kwargs)
        else:
            (data) = self.schedule_components_with_http_info(body, id, **kwargs)
            return data

    def schedule_components_with_http_info(self, body, id, **kwargs):
        """
        Schedule or unschedule components in the specified Process Group..
        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``schedule_components()`` method instead.
        
        Args:
            body (:class:`~nipyapi.nifi.models.ScheduleComponentsEntity`): 
                The request to schedule or unschedule. If the components in the request are not specified, all authorized components will be considered. (required)
            id (str): 
                The process group id. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ScheduleComponentsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['body', 'id']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schedule_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `schedule_components`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `schedule_components`")

 
 
        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/process-groups/{id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ScheduleComponentsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_cluster(self, q, **kwargs):
        """
        Searches the cluster for a node with the specified address.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``search_cluster_with_http_info()`` method instead.
        
        Args:
            q (str): 
                Node address to search for. (required)
                
        Returns:
            :class:`~nipyapi.nifi.models.ClusterSearchResultsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_cluster_with_http_info(q, **kwargs)
        else:
            (data) = self.search_cluster_with_http_info(q, **kwargs)
            return data

    def search_cluster_with_http_info(self, q, **kwargs):
        """
        Searches the cluster for a node with the specified address.

        Note: This endpoint is subject to change as NiFi and it's REST API evolve.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``search_cluster()`` method instead.
        
        Args:
            q (str): 
                Node address to search for. (required)
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.ClusterSearchResultsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['q']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `search_cluster`")

 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/cluster/search-results', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClusterSearchResultsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_flow(self, **kwargs):
        """
        Performs a search against this NiFi using the specified search term.

        Only search results from authorized components will be returned.

        This method makes a synchronous HTTP request and returns the response data directly.
        
        For full HTTP response details (status code, headers, etc.), use the corresponding 
        ``search_flow_with_http_info()`` method instead.
        
        Args:
            q (str):
            a (str):
                
        Returns:
            :class:`~nipyapi.nifi.models.SearchResultsEntity`: The response data.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_flow_with_http_info(**kwargs)
        else:
            (data) = self.search_flow_with_http_info(**kwargs)
            return data

    def search_flow_with_http_info(self, **kwargs):
        """
        Performs a search against this NiFi using the specified search term.

        Only search results from authorized components will be returned.

        This method makes a synchronous HTTP request and returns detailed response information.
        
        Returns the response data along with HTTP status code, headers, and other metadata.
        For just the response data, use the corresponding ``search_flow()`` method instead.
        
        Args:
            q (str):
            a (str):
                
        Returns:
            tuple: (:class:`~nipyapi.nifi.models.SearchResultsEntity`, status_code, headers) - Response data with HTTP details.
        """

        all_params = ['q', 'a']
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in params['kwargs'].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_flow" % key
                )
            params[key] = val
        del params['kwargs']

 
 
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'a' in params:
            query_params.append(('a', params['a']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['bearerAuth']

        return self.api_client.call_api('/flow/search-results', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SearchResultsEntity',
                                        auth_settings=auth_settings,
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

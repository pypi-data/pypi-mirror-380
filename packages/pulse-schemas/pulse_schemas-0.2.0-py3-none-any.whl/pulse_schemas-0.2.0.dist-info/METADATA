Metadata-Version: 2.4
Name: pulse_schemas
Version: 0.2.0
Summary: A pydantic schema manager
Author-email: Wilson <your.email@example.com>
License: MIT License
        
        Copyright (c) 2025 Wilson
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# pulse-schemas

A Python package for managing user profile schemas using Pydantic.

## Features

- Schema registry to store and retrieve Pydantic models
- Easily extensible for custom schemas

## Installation

```
pip install pulse-schemas
```

## Usage

This project includes a **schema manager** (`SchemaRegistry`) that makes it easy to register, retrieve, and validate Pydantic schemas. A default schema for creating a user profile is already included.

### Import the registry

```
from pulse_schemas.schema import SchemaRegistry
```

### Initialize the registry

```
registry = SchemaRegistry()
```

When initialized, the registry automatically registers the built-in schema `create_user_profile`.

### List available schemas

```
print(registry.list_schemas())
# ['create_user_profile']
```

### Retrieve a schema

```
ProfileSchema = registry.get_schema("create_user_profile")
```

### Validate data against a schema

```
data = {
    "demographics": {"age": 28, "biological_sex": "female"},
    "dietary_preferences": ["vegetarian"],
    "allergens": ["peanuts", "milk"],
    "health_conditions": ["hypertension"],
    "goals": ["improve cardio"]
}

profile = ProfileSchema.model_validate(data)
print(profile)
```

If the data is invalid, Pydantic will raise a `ValidationError`.

### Register custom schemas

You can register new schemas at runtime:

```python
from pydantic import BaseModel

class CustomSchema(BaseModel):
    name: str
    active: bool

registry.register_schema("custom_schema", CustomSchema)
print(registry.list_schemas())
# ['create_user_profile', 'custom_schema']
```

Now you can retrieve and validate against `custom_schema` in the same way.


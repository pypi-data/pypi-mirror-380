[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyjelly"
version = "0.6.2"
readme = "README.md"
description = "Jelly-RDF implementation for Python"
authors = [
    { name = "NeverBlink et al.", email = "contact@neverblink.eu" }
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Environment :: Console",
    "Environment :: Plugins",
    "Topic :: Database",
    "Topic :: File Formats",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["RDF", "Knowledge graph", "Jelly", "Serialization format"]
license = "Apache-2.0"
dependencies = [
    "protobuf>=6.30.0",
    "typing-extensions>=4.12.2", # revisit after 3.13 is older
]

[project.urls]
Homepage = "https://w3id.org/jelly/pyjelly"
Documentation = "https://w3id.org/jelly/pyjelly"
Repository = "https://github.com/Jelly-RDF/pyjelly"
Issues = "https://github.com/Jelly-RDF/pyjelly/issues"
Changelog = "https://github.com/Jelly-RDF/pyjelly/releases"

[project.optional-dependencies]
rdflib = ["rdflib>=7.1.4"]

[project.entry-points."rdf.plugins.parser"]
jelly = "pyjelly.integrations.rdflib.parse:RDFLibJellyParser"
"application/x-jelly-rdf" = "pyjelly.integrations.rdflib.parse:RDFLibJellyParser"

[project.entry-points."rdf.plugins.serializer"]
jelly = "pyjelly.integrations.rdflib.serialize:RDFLibJellySerializer"
"application/x-jelly-rdf" = "pyjelly.integrations.rdflib.serialize:RDFLibJellySerializer"

[dependency-groups]
dev = ["mypy>=1.13.0", "pre-commit>=4.2.0", "ruff>=0.11.8"]
# grpc doesn't support PyPy at the time of writing, see grpc/grpc#4221
protoc = ["grpcio-tools>=1.73.0; implementation_name != 'pypy'"]
profiling = ["scalene>=1.5.51", "memray>=1.16.0"]
test = [
    "detect-test-pollution>=1.2.0",
    "hypothesis>=6.131.0",
    "inline-snapshot>=0.20.8",
    "pytest>=8.3.4",
    "pytest-cov>=6.2.1",
    "pytest-accept>=0.1.12",
    "pytest-mock>=3.14.0",
    "pytest-subtests>=0.14.1",
    "pytest-sugar>=1.0.0",
]
extras = ["pyjelly[rdflib]"] # workaround for astral-sh/uv#8607
types = ["types-protobuf>=5.29.1.20250315"]
docs = [
    "markdown-exec>=1.10.3",
    "mike>=2.1.3",
    "mkdocs>=1.6.1",
    "mkdocs-git-revision-date-localized-plugin>=1.4.5",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-material>=9.6.13",
    "mkdocstrings>=0.29.1",
    "mkdocstrings-python>=1.16.10",
    "linkchecker~=10.6.0",
]

[tool.uv]
required-version = "~=0.7.3"
default-groups = ["dev", "extras", "test", "types"]

[tool.mypy]
strict = true
explicit_package_bases = true
exclude = [
    "build/", 
    "docs/", 
    ".*_pb2(_grpc)?\\.pyi?", 
    "examples/"
]

[[tool.mypy.overrides]]
module = "google.protobuf.proto"
ignore_errors = true
ignore_missing_imports = true

[tool.ruff.lint.isort]
extra-standard-library = ["typing_extensions"]

[tool.pytest.ini_options]
pythonpath = "."
addopts = ["--import-mode=importlib", "--doctest-modules", "--ignore-glob=**examples"]

[tool.ruff]
extend-exclude = ["*{_pb2,_pb2_grpc}.{py,pyi}"]

[tool.setuptools]
packages = ["pyjelly"]

[tool.ruff.lint]
extend-per-file-ignores = { "tests/unit_tests/**" = ["PLR2004"] }
exclude = [
    "**examples/**",
]
select = ["ALL"]
ignore = [
    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` as a gradual
    #  form is assignable to any type
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project
    "FIX002",

    # Description: Implicitly concatenated string literals on one line
    # Rationale: Conflicts with the formatter
    "ISC001",

    # Description: Trailing comma missing
    # Rationale: Conflicts with the formatter
    "COM812",

    # Description: File is part of an implicit namespace package. Add an `__init__.py`
    # Rationale: Implicit namespace packages are a feature
    "INP001",

    # Description: Missing documentation
    # Rationale: Important, but secondary concern
    "D100", # Public module
    "D101", # Public class
    "D102", # Public method
    "D103", # Public function
    "D104", # Public package
    "D105", # Magic method
    "D107", # __init__

    # Description: Use of `assert` detected
    # Rationale: Assertions aren't bad and can be disabled with `python -O`
    "S101",

    # Description: Missing issue link on the line following this TODO
    # Rationale: Own semantics
    "TD003",

    # Description: Wildcard imports used
    # Rationale: Waiting for red knot to understand them
    "F403",

    # Description: Move third-party import into a type-checking block
    # Rationale: Start-up time is not yet that important
    "TC",

    # Description: Private member accessed
    # Rationale: In reality, this check causes more trouble than prevents bad things
    "SLF001",
]

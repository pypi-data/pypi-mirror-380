[project]
name = "commitloom"
version = "1.6.4"
description = "Weave perfect git commits with AI-powered intelligence"
authors = [
    { name = "Petru Arakiss", email = "petruarakiss@gmail.com" }
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
keywords = [
    "git",
    "commit",
    "ai",
    "openai",
    "cli",
    "git-tools",
    "semantic-commits"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
    "Typing :: Typed"
]
dependencies = [
    "python-dotenv>=1.0.1",
    "rich>=13.9.4",
    "requests>=2.32.3",
    "click>=8.1.7",
]

[project.urls]
Homepage = "https://github.com/Arakiss/commitloom"
Repository = "https://github.com/Arakiss/commitloom"
Documentation = "https://github.com/Arakiss/commitloom#readme"
"Bug Tracker" = "https://github.com/Arakiss/commitloom/issues"

[project.scripts]
loom = "commitloom.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["commitloom"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.23.8",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "types-requests>=2.32.0",
    "pytest-mock>=3.14.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = """
    --cov=commitloom
    --cov-report=term-missing
    --cov-fail-under=68
    --strict-markers
    --strict-config
"""
asyncio_mode = "strict"
required_plugins = ["pytest-mock"]

[tool.pytest-asyncio]
asyncio_fixture_mode = "function"

[tool.coverage.run]
source = ["commitloom"]
omit = [
    "tests/*",
    "**/__init__.py",
    "commitloom/__main__.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "def __repr__",
    "@abstractmethod",
]
fail_under = 68

[tool.ruff]
line-length = 110
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E402", "E501", "I001", "F841", "B007", "F541", "W293", "UP012"]

[tool.ruff.lint.per-file-ignores]
"commitloom/cli/cli_handler.py" = ["C901"]
"commitloom/core/git.py" = ["B904"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = false
warn_unused_ignores = true

[tool.ruff.lint.isort]
known-first-party = ["commitloom"]
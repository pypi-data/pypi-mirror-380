// SPDX-License-Identifier: Apache-2.0

use anyhow::{anyhow, Result};
use clap::Parser;
use malwaredb_client::MdbClient;
use std::process::ExitCode;

#[derive(Debug, Clone, Eq, PartialEq, Parser)]
pub struct SearchRequest {
    /// Partial hash to search for
    #[clap(long)]
    pub hash: Option<String>,

    /// Hash algorith to search for, defaults to SHA-256
    #[clap(long, default_value = "sha256")]
    pub hash_type: String,

    /// Partial file name to search for
    #[clap(long)]
    pub file_name: Option<String>,

    /// Get the response type in the form of a specific hash
    #[clap(long, default_value = "sha256")]
    pub response_type: String,

    /// Maximum amount of search results to show
    #[clap(long, default_value_t = 100)]
    pub limit: u32,
}

impl SearchRequest {
    pub async fn exec(&self, config: &MdbClient) -> Result<ExitCode> {
        let hash_search = if let Some(hash) = &self.hash {
            let hash_type = self
                .hash_type
                .as_str()
                .try_into()
                .map_err(|e: String| anyhow!(e))?;
            Some((hash_type, hash.clone()))
        } else {
            None
        };

        let response = self
            .response_type
            .as_str()
            .try_into()
            .map_err(|e: String| anyhow!(e))?;
        let response = config
            .partial_search(hash_search, self.file_name.clone(), response, self.limit)
            .await?;

        if response.is_empty() {
            println!("No results!");
        } else {
            for result in response {
                println!("{result}");
            }
        }

        Ok(ExitCode::SUCCESS)
    }
}

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .address import Address, AddressTypedDict
from .cart_add_on import CartAddOn, CartAddOnTypedDict
from .cart_discount import CartDiscount, CartDiscountTypedDict
from .cart_fee import CartFee, CartFeeTypedDict
from .cart_item import CartItem, CartItemTypedDict
from .cart_loyalty_rewards import CartLoyaltyRewards, CartLoyaltyRewardsTypedDict
from .cart_shipment import CartShipment, CartShipmentTypedDict
from .fulfillment import Fulfillment, FulfillmentTypedDict
from .i_order_metadata import IOrderMetadata, IOrderMetadataTypedDict
from .in_store_cart_shipment import InStoreCartShipment, InStoreCartShipmentTypedDict
from .seller_split import SellerSplit, SellerSplitTypedDict
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import Dict, List, Optional
from typing_extensions import NotRequired, TypedDict


class CartTypedDict(TypedDict):
    r"""The cart_create object is a composite of the base_cart object and additional order details."""

    total_amount: float
    r"""The total amount, in cents, of the cart including its items and taxes (if applicable), e.g. $9.00 is 900. This total must match the sum of all other amounts."""
    currency: str
    order_reference: str
    r"""This value is used by Bolt as an external reference to a given order. This reference must be unique per successful transaction."""
    add_ons: NotRequired[List[CartAddOnTypedDict]]
    billing_address: NotRequired[AddressTypedDict]
    r"""The Address object is used for billing, shipping, and physical store address use cases."""
    discounts: NotRequired[List[CartDiscountTypedDict]]
    fees: NotRequired[List[CartFeeTypedDict]]
    fulfillments: NotRequired[List[FulfillmentTypedDict]]
    in_store_cart_shipments: NotRequired[List[InStoreCartShipmentTypedDict]]
    items: NotRequired[List[CartItemTypedDict]]
    r"""The list of items associated with the cart."""
    loyalty_rewards: NotRequired[List[CartLoyaltyRewardsTypedDict]]
    shipments: NotRequired[List[CartShipmentTypedDict]]
    tax_amount: NotRequired[float]
    r"""The total tax amount for all of the items associated with the cart."""
    cart_url: NotRequired[str]
    r"""Used to provide a link to the cart ID."""
    display_id: NotRequired[str]
    r"""This field, although required, can be an empty string."""
    metadata: NotRequired[Dict[str, str]]
    r"""Optional custom metadata."""
    order_description: NotRequired[str]
    r"""Used optionally to pass additional information like order numbers or other IDs as needed."""


class Cart(BaseModel):
    r"""The cart_create object is a composite of the base_cart object and additional order details."""

    total_amount: float
    r"""The total amount, in cents, of the cart including its items and taxes (if applicable), e.g. $9.00 is 900. This total must match the sum of all other amounts."""

    currency: str

    order_reference: str
    r"""This value is used by Bolt as an external reference to a given order. This reference must be unique per successful transaction."""

    add_ons: Optional[List[CartAddOn]] = None

    billing_address: Optional[Address] = None
    r"""The Address object is used for billing, shipping, and physical store address use cases."""

    discounts: Optional[List[CartDiscount]] = None

    fees: Optional[List[CartFee]] = None

    fulfillments: Optional[List[Fulfillment]] = None

    in_store_cart_shipments: Optional[List[InStoreCartShipment]] = None

    items: Optional[List[CartItem]] = None
    r"""The list of items associated with the cart."""

    loyalty_rewards: Optional[List[CartLoyaltyRewards]] = None

    shipments: Optional[List[CartShipment]] = None

    tax_amount: Optional[float] = None
    r"""The total tax amount for all of the items associated with the cart."""

    cart_url: Optional[str] = None
    r"""Used to provide a link to the cart ID."""

    display_id: Optional[str] = None
    r"""This field, although required, can be an empty string."""

    metadata: Optional[Dict[str, str]] = None
    r"""Optional custom metadata."""

    order_description: Optional[str] = None
    r"""Used optionally to pass additional information like order numbers or other IDs as needed."""


class Channel(str, Enum):
    r"""Used to determine the channel from which the order was created."""

    BROWSER = "browser"
    MOBILE_APP = "mobile_app"


class OrderCreateTypedDict(TypedDict):
    cart: CartTypedDict
    channel: Channel
    r"""Used to determine the channel from which the order was created."""
    create_cart_on_merchant_backend: NotRequired[Nullable[bool]]
    r"""Used to determine whether the order is created on your backend platform. This should almost always be `false`."""
    metadata: NotRequired[Nullable[IOrderMetadataTypedDict]]
    user_note: NotRequired[str]
    r"""Optionally used by shoppers to make extra requests or provide details for gift messages."""
    seller_splits: NotRequired[Nullable[List[SellerSplitTypedDict]]]
    r"""Array of seller splits for marketplace orders. This enables marketplaces to dynamically configure commission fees and payment splits per seller. Each split contains seller identification, scoped line items and shipments, and declarative amount breakdowns."""


class OrderCreate(BaseModel):
    cart: Cart

    channel: Channel
    r"""Used to determine the channel from which the order was created."""

    create_cart_on_merchant_backend: OptionalNullable[bool] = UNSET
    r"""Used to determine whether the order is created on your backend platform. This should almost always be `false`."""

    metadata: OptionalNullable[IOrderMetadata] = UNSET

    user_note: Optional[str] = None
    r"""Optionally used by shoppers to make extra requests or provide details for gift messages."""

    seller_splits: OptionalNullable[List[SellerSplit]] = UNSET
    r"""Array of seller splits for marketplace orders. This enables marketplaces to dynamically configure commission fees and payment splits per seller. Each split contains seller identification, scoped line items and shipments, and declarative amount breakdowns."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "create_cart_on_merchant_backend",
            "metadata",
            "user_note",
            "seller_splits",
        ]
        nullable_fields = [
            "create_cart_on_merchant_backend",
            "metadata",
            "seller_splits",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

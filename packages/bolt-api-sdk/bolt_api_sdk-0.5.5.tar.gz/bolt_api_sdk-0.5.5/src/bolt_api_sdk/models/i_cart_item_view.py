"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .amount_view import AmountView, AmountViewTypedDict
from .cart_item_customization import (
    CartItemCustomization,
    CartItemCustomizationTypedDict,
)
from .cart_item_property_view import CartItemPropertyView, CartItemPropertyViewTypedDict
from .gift_option_view import GiftOptionView, GiftOptionViewTypedDict
from .i_weight import IWeight, IWeightTypedDict
from .subscription import Subscription, SubscriptionTypedDict
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class ICartItemViewShipmentType(str, Enum):
    UNKNOWN = "unknown"
    DOOR_DELIVERY = "door_delivery"
    SHIP_TO_STORE = "ship_to_store"
    IN_STORE_PICKUP = "in_store_pickup"
    SHIP_TO_HOME_ONLY = "ship_to_home_only"


class ICartItemViewType(str, Enum):
    UNKNOWN = "unknown"
    DIGITAL = "digital"
    PHYSICAL = "physical"
    BUNDLED = "bundled"


class ICartItemViewTypedDict(TypedDict):
    bolt_product_id: NotRequired[str]
    brand: NotRequired[str]
    category: NotRequired[Nullable[str]]
    r"""Used to define a product category associated with the item."""
    collections: NotRequired[List[str]]
    color: NotRequired[str]
    r"""Used to define the color of the item."""
    customizations: NotRequired[List[CartItemCustomizationTypedDict]]
    description: NotRequired[str]
    details_url: NotRequired[str]
    r"""Used to provide a link to the item's product page."""
    gift_option: NotRequired[GiftOptionViewTypedDict]
    r"""Defines which gift options are hidden."""
    hide: NotRequired[bool]
    image_url: NotRequired[str]
    r"""Used to provide a link to the image associated with the item."""
    isbn: NotRequired[Nullable[str]]
    r"""Used to define the International Standard Book Number associated with the book."""
    item_group: NotRequired[str]
    manufacturer: NotRequired[Nullable[str]]
    r"""Used to define the organization that manufactured the item."""
    merchant_product_id: NotRequired[str]
    merchant_variant_id: NotRequired[str]
    msrp: NotRequired[AmountViewTypedDict]
    name: NotRequired[str]
    options: NotRequired[str]
    properties: NotRequired[List[CartItemPropertyViewTypedDict]]
    quantity: NotRequired[float]
    reference: NotRequired[str]
    shipment_id: NotRequired[str]
    shipment_type: NotRequired[ICartItemViewShipmentType]
    shopify_line_item_reference: NotRequired[float]
    shopify_product_reference: NotRequired[float]
    shopify_product_variant_reference: NotRequired[float]
    size: NotRequired[str]
    r"""Used to define the size of the item."""
    sku: NotRequired[Nullable[str]]
    r"""Used to define an alpha-numeric Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue."""
    subscription: NotRequired[SubscriptionTypedDict]
    r"""Describes a product added as a recurring subscription."""
    tags: NotRequired[str]
    r"""Used to define a comma-separated list of tags associated with the item."""
    tax_amount: NotRequired[AmountViewTypedDict]
    taxable: NotRequired[bool]
    total_amount: NotRequired[AmountViewTypedDict]
    type: NotRequired[ICartItemViewType]
    unit_price: NotRequired[AmountViewTypedDict]
    uom: NotRequired[Nullable[str]]
    r"""Used to define the unit of measure used to describe the product."""
    upc: NotRequired[Nullable[str]]
    r"""Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide."""
    weight: NotRequired[IWeightTypedDict]


class ICartItemView(BaseModel):
    bolt_product_id: Optional[str] = None

    brand: Optional[str] = None

    category: OptionalNullable[str] = UNSET
    r"""Used to define a product category associated with the item."""

    collections: Optional[List[str]] = None

    color: Optional[str] = None
    r"""Used to define the color of the item."""

    customizations: Optional[List[CartItemCustomization]] = None

    description: Optional[str] = None

    details_url: Optional[str] = None
    r"""Used to provide a link to the item's product page."""

    gift_option: Optional[GiftOptionView] = None
    r"""Defines which gift options are hidden."""

    hide: Optional[bool] = None

    image_url: Optional[str] = None
    r"""Used to provide a link to the image associated with the item."""

    isbn: OptionalNullable[str] = UNSET
    r"""Used to define the International Standard Book Number associated with the book."""

    item_group: Optional[str] = None

    manufacturer: OptionalNullable[str] = UNSET
    r"""Used to define the organization that manufactured the item."""

    merchant_product_id: Optional[str] = None

    merchant_variant_id: Optional[str] = None

    msrp: Optional[AmountView] = None

    name: Optional[str] = None

    options: Optional[str] = None

    properties: Optional[List[CartItemPropertyView]] = None

    quantity: Optional[float] = None

    reference: Optional[str] = None

    shipment_id: Optional[str] = None

    shipment_type: Optional[ICartItemViewShipmentType] = None

    shopify_line_item_reference: Optional[float] = None

    shopify_product_reference: Optional[float] = None

    shopify_product_variant_reference: Optional[float] = None

    size: Optional[str] = None
    r"""Used to define the size of the item."""

    sku: OptionalNullable[str] = UNSET
    r"""Used to define an alpha-numeric Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue."""

    subscription: Optional[Subscription] = None
    r"""Describes a product added as a recurring subscription."""

    tags: Optional[str] = None
    r"""Used to define a comma-separated list of tags associated with the item."""

    tax_amount: Optional[AmountView] = None

    taxable: Optional[bool] = None

    total_amount: Optional[AmountView] = None

    type: Optional[ICartItemViewType] = None

    unit_price: Optional[AmountView] = None

    uom: OptionalNullable[str] = UNSET
    r"""Used to define the unit of measure used to describe the product."""

    upc: OptionalNullable[str] = UNSET
    r"""Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide."""

    weight: Optional[IWeight] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "bolt_product_id",
            "brand",
            "category",
            "collections",
            "color",
            "customizations",
            "description",
            "details_url",
            "gift_option",
            "hide",
            "image_url",
            "isbn",
            "item_group",
            "manufacturer",
            "merchant_product_id",
            "merchant_variant_id",
            "msrp",
            "name",
            "options",
            "properties",
            "quantity",
            "reference",
            "shipment_id",
            "shipment_type",
            "shopify_line_item_reference",
            "shopify_product_reference",
            "shopify_product_variant_reference",
            "size",
            "sku",
            "subscription",
            "tags",
            "tax_amount",
            "taxable",
            "total_amount",
            "type",
            "unit_price",
            "uom",
            "upc",
            "weight",
        ]
        nullable_fields = ["category", "isbn", "manufacturer", "sku", "uom", "upc"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cart_item_customization import (
    CartItemCustomization,
    CartItemCustomizationTypedDict,
)
from .cart_item_gift_option import CartItemGiftOption, CartItemGiftOptionTypedDict
from .cart_item_property import CartItemProperty, CartItemPropertyTypedDict
from .cart_shipment import CartShipment, CartShipmentTypedDict
from .i_cart_item_external_inputs import (
    ICartItemExternalInputs,
    ICartItemExternalInputsTypedDict,
)
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class CartItemShipmentType(str, Enum):
    UNKNOWN = "unknown"
    DOOR_DELIVERY = "door_delivery"
    SHIP_TO_STORE = "ship_to_store"
    IN_STORE_PICKUP = "in_store_pickup"


class CartItemType(str, Enum):
    UNKNOWN = "unknown"
    DIGITAL = "digital"
    PHYSICAL = "physical"
    BUNDLED = "bundled"


class CartItemTypedDict(TypedDict):
    name: str
    quantity: float
    reference: str
    total_amount: float
    r"""The total amount, in cents, of the item including its taxes if applicable."""
    unit_price: float
    r"""The price of one unit of the item; for example, the price of one pack of socks."""
    brand: NotRequired[Nullable[str]]
    category: NotRequired[Nullable[str]]
    r"""Used to define a product category associated with the item."""
    collections: NotRequired[List[str]]
    color: NotRequired[Nullable[str]]
    r"""Used to define the color of the item."""
    customizations: NotRequired[List[CartItemCustomizationTypedDict]]
    description: NotRequired[Nullable[str]]
    details_url: NotRequired[str]
    r"""Used to provide a link to the item's product page."""
    external_inputs: NotRequired[ICartItemExternalInputsTypedDict]
    gift_option: NotRequired[CartItemGiftOptionTypedDict]
    r"""Contains the gift option settings for wrapping and custom messages."""
    image_url: NotRequired[str]
    r"""Used to provide a link to the image associated with the item."""
    isbn: NotRequired[Nullable[str]]
    r"""Used to define the International Standard Book Number associated with the book."""
    item_group: NotRequired[Nullable[str]]
    manufacturer: NotRequired[Nullable[str]]
    r"""Used to define the organization that manufactured the item."""
    merchant_product_id: NotRequired[str]
    r"""The merchant's unique ID for the product."""
    merchant_variant_id: NotRequired[str]
    r"""A merchant's unique ID for a given product's specific variant."""
    msrp: NotRequired[Nullable[float]]
    options: NotRequired[Nullable[str]]
    properties: NotRequired[List[CartItemPropertyTypedDict]]
    shipment: NotRequired[CartShipmentTypedDict]
    r"""A cart that is being prepared for shipment"""
    shipment_type: NotRequired[CartItemShipmentType]
    size: NotRequired[Nullable[str]]
    r"""Used to define the size of the item."""
    sku: NotRequired[Nullable[str]]
    r"""Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue."""
    source: NotRequired[Nullable[str]]
    seller_id: NotRequired[Nullable[str]]
    r"""The unique identifier for the seller within the marketplace ecosystem. This field ensures deterministic multi-party payout calculations."""
    tags: NotRequired[Nullable[str]]
    r"""Used to define a comma-separated list of tags associated with the item."""
    tax_amount: NotRequired[Nullable[float]]
    r"""The tax amount for the item; this value should scale with the quantity of units selected."""
    tax_code: NotRequired[Nullable[str]]
    taxable: NotRequired[Nullable[bool]]
    type: NotRequired[CartItemType]
    uom: NotRequired[Nullable[str]]
    r"""Used to define the unit of measure used to describe the item."""
    upc: NotRequired[Nullable[str]]
    r"""Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide."""
    weight: NotRequired[Nullable[float]]
    weight_unit: NotRequired[Nullable[str]]


class CartItem(BaseModel):
    name: str

    quantity: float

    reference: str

    total_amount: float
    r"""The total amount, in cents, of the item including its taxes if applicable."""

    unit_price: float
    r"""The price of one unit of the item; for example, the price of one pack of socks."""

    brand: OptionalNullable[str] = UNSET

    category: OptionalNullable[str] = UNSET
    r"""Used to define a product category associated with the item."""

    collections: Optional[List[str]] = None

    color: OptionalNullable[str] = UNSET
    r"""Used to define the color of the item."""

    customizations: Optional[List[CartItemCustomization]] = None

    description: OptionalNullable[str] = UNSET

    details_url: Optional[str] = None
    r"""Used to provide a link to the item's product page."""

    external_inputs: Optional[ICartItemExternalInputs] = None

    gift_option: Optional[CartItemGiftOption] = None
    r"""Contains the gift option settings for wrapping and custom messages."""

    image_url: Optional[str] = None
    r"""Used to provide a link to the image associated with the item."""

    isbn: OptionalNullable[str] = UNSET
    r"""Used to define the International Standard Book Number associated with the book."""

    item_group: OptionalNullable[str] = UNSET

    manufacturer: OptionalNullable[str] = UNSET
    r"""Used to define the organization that manufactured the item."""

    merchant_product_id: Optional[str] = None
    r"""The merchant's unique ID for the product."""

    merchant_variant_id: Optional[str] = None
    r"""A merchant's unique ID for a given product's specific variant."""

    msrp: OptionalNullable[float] = UNSET

    options: OptionalNullable[str] = UNSET

    properties: Optional[List[CartItemProperty]] = None

    shipment: Optional[CartShipment] = None
    r"""A cart that is being prepared for shipment"""

    shipment_type: Optional[CartItemShipmentType] = None

    size: OptionalNullable[str] = UNSET
    r"""Used to define the size of the item."""

    sku: OptionalNullable[str] = UNSET
    r"""Used to define the alpha-numberic Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue."""

    source: OptionalNullable[str] = UNSET

    seller_id: OptionalNullable[str] = UNSET
    r"""The unique identifier for the seller within the marketplace ecosystem. This field ensures deterministic multi-party payout calculations."""

    tags: OptionalNullable[str] = UNSET
    r"""Used to define a comma-separated list of tags associated with the item."""

    tax_amount: OptionalNullable[float] = UNSET
    r"""The tax amount for the item; this value should scale with the quantity of units selected."""

    tax_code: OptionalNullable[str] = UNSET

    taxable: OptionalNullable[bool] = UNSET

    type: Optional[CartItemType] = None

    uom: OptionalNullable[str] = UNSET
    r"""Used to define the unit of measure used to describe the item."""

    upc: OptionalNullable[str] = UNSET
    r"""Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide."""

    weight: OptionalNullable[float] = UNSET

    weight_unit: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "brand",
            "category",
            "collections",
            "color",
            "customizations",
            "description",
            "details_url",
            "external_inputs",
            "gift_option",
            "image_url",
            "isbn",
            "item_group",
            "manufacturer",
            "merchant_product_id",
            "merchant_variant_id",
            "msrp",
            "options",
            "properties",
            "shipment",
            "shipment_type",
            "size",
            "sku",
            "source",
            "seller_id",
            "tags",
            "tax_amount",
            "tax_code",
            "taxable",
            "type",
            "uom",
            "upc",
            "weight",
            "weight_unit",
        ]
        nullable_fields = [
            "brand",
            "category",
            "color",
            "description",
            "isbn",
            "item_group",
            "manufacturer",
            "msrp",
            "options",
            "size",
            "sku",
            "source",
            "seller_id",
            "tags",
            "tax_amount",
            "tax_code",
            "taxable",
            "uom",
            "upc",
            "weight",
            "weight_unit",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

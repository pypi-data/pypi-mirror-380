"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Dict
from typing_extensions import NotRequired, TypedDict


class MarketplaceCommissionFeeTypedDict(TypedDict):
    r"""Configures the marketplace commission fee structure for a seller split, supporting both percentage-based and flat fee models."""

    bps: float
    r"""The commission fee expressed in basis points (1 bps = 0.01%). For example, 100 bps = 1%, 250 bps = 2.5%."""
    flat_cents: float
    r"""The fixed commission fee amount in cents, applied regardless of transaction value."""
    metadata: NotRequired[Nullable[Dict[str, str]]]
    r"""Additional contextual information about the commission fee, such as plan type, tier level, or other business rules."""


class MarketplaceCommissionFee(BaseModel):
    r"""Configures the marketplace commission fee structure for a seller split, supporting both percentage-based and flat fee models."""

    bps: float
    r"""The commission fee expressed in basis points (1 bps = 0.01%). For example, 100 bps = 1%, 250 bps = 2.5%."""

    flat_cents: float
    r"""The fixed commission fee amount in cents, applied regardless of transaction value."""

    metadata: OptionalNullable[Dict[str, str]] = UNSET
    r"""Additional contextual information about the commission fee, such as plan type, tier level, or other business rules."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["metadata"]
        nullable_fields = ["metadata"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

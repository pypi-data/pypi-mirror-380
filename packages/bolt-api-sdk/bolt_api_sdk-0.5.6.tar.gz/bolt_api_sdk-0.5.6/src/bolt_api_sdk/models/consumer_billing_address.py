"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class ConsumerBillingAddressTypedDict(TypedDict):
    locality: str
    r"""A locale such as county, district, etc."""
    postal_code: str
    r"""The postal code."""
    region: str
    r"""A state, province, or similar region type."""
    street_address1: str
    r"""You can use up to 4 street address fields."""
    company: NotRequired[str]
    r"""The company's name"""
    country: NotRequired[str]
    r"""The country's name."""
    country_code: NotRequired[str]
    r"""The 2-digit country code."""
    email_address: NotRequired[str]
    r"""An email address."""
    first_name: NotRequired[str]
    r"""The person's first name."""
    id: NotRequired[Nullable[str]]
    r"""The unique Bolt ID associated with a previously saved billing address. Not applicable to new, unsaved addresses."""
    last_name: NotRequired[str]
    r"""The person's last name."""
    name: NotRequired[str]
    r"""The first and last name together as a string."""
    phone_number: NotRequired[str]
    r"""A phone number following E164 standards, in its globalized format, i.e. prepended with a plus sign."""
    street_address2: NotRequired[str]
    r"""You can use up to 4 street address fields."""
    street_address3: NotRequired[str]
    r"""You can use up to 4 street address fields."""
    street_address4: NotRequired[str]
    r"""You can use up to 4 street address fields."""


class ConsumerBillingAddress(BaseModel):
    locality: str
    r"""A locale such as county, district, etc."""

    postal_code: str
    r"""The postal code."""

    region: str
    r"""A state, province, or similar region type."""

    street_address1: str
    r"""You can use up to 4 street address fields."""

    company: Optional[str] = None
    r"""The company's name"""

    country: Optional[str] = None
    r"""The country's name."""

    country_code: Optional[str] = None
    r"""The 2-digit country code."""

    email_address: Optional[str] = None
    r"""An email address."""

    first_name: Optional[str] = None
    r"""The person's first name."""

    id: OptionalNullable[str] = UNSET
    r"""The unique Bolt ID associated with a previously saved billing address. Not applicable to new, unsaved addresses."""

    last_name: Optional[str] = None
    r"""The person's last name."""

    name: Optional[str] = None
    r"""The first and last name together as a string."""

    phone_number: Optional[str] = None
    r"""A phone number following E164 standards, in its globalized format, i.e. prepended with a plus sign."""

    street_address2: Optional[str] = None
    r"""You can use up to 4 street address fields."""

    street_address3: Optional[str] = None
    r"""You can use up to 4 street address fields."""

    street_address4: Optional[str] = None
    r"""You can use up to 4 street address fields."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "company",
            "country",
            "country_code",
            "email_address",
            "first_name",
            "id",
            "last_name",
            "name",
            "phone_number",
            "street_address2",
            "street_address3",
            "street_address4",
        ]
        nullable_fields = ["id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

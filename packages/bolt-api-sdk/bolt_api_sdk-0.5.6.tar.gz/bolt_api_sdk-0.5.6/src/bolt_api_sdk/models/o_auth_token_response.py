"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from bolt_api_sdk.types import BaseModel
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class OAuthTokenResponseTypedDict(TypedDict):
    access_token: NotRequired[str]
    r"""An access token you can use to make requests on behalf of a Bolt Account."""
    expires_in: NotRequired[int]
    r"""Access token’s expiration in seconds."""
    id_token: NotRequired[str]
    r"""A JWT token issued when the request includes the scope open_id."""
    refresh_token: NotRequired[str]
    r"""A refresh token you can use to issue a brand new access token without obtaining a new authorization code."""
    refresh_token_scope: NotRequired[str]
    r"""The scope granted to the refresh token. Currently this will always be bolt.account.view."""
    scope: NotRequired[str]
    r"""The scope granted to access token, depending on the scope granted to the authorization code as well as the scope parameter. Options include `bolt.account.manage`, `bolt.account.view`, `openid`."""
    token_type: NotRequired[str]
    r"""The token_type will always be bearer."""


class OAuthTokenResponse(BaseModel):
    access_token: Optional[str] = None
    r"""An access token you can use to make requests on behalf of a Bolt Account."""

    expires_in: Optional[int] = None
    r"""Access token’s expiration in seconds."""

    id_token: Optional[str] = None
    r"""A JWT token issued when the request includes the scope open_id."""

    refresh_token: Optional[str] = None
    r"""A refresh token you can use to issue a brand new access token without obtaining a new authorization code."""

    refresh_token_scope: Optional[str] = None
    r"""The scope granted to the refresh token. Currently this will always be bolt.account.view."""

    scope: Optional[str] = None
    r"""The scope granted to access token, depending on the scope granted to the authorization code as well as the scope parameter. Options include `bolt.account.manage`, `bolt.account.view`, `openid`."""

    token_type: Optional[str] = None
    r"""The token_type will always be bearer."""

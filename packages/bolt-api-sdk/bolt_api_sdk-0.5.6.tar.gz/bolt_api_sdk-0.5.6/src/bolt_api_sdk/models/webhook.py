"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .webhook_event_group import WebhookEventGroup
from .webhooks_type import WebhooksType
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List
from typing_extensions import NotRequired, TypedDict


class WebhookTypedDict(TypedDict):
    created_at: int
    r"""Webhook creation time in epoch timestamp milliseconds."""
    url: str
    r"""The full URL to receive webhook notifications."""
    webhook_id: str
    r"""A unique webhook ID. Reference this value to modify or delete the webhook subscription. operations as well."""
    event_group: NotRequired[Nullable[WebhookEventGroup]]
    r"""Subscribe to a group of events.
    `all`: subscribe to all existing and future event types

    """
    events: NotRequired[Nullable[List[WebhooksType]]]
    r"""All events the webhook is subscribed to. Null when `event_group` = `all`.

    """


class Webhook(BaseModel):
    created_at: int
    r"""Webhook creation time in epoch timestamp milliseconds."""

    url: str
    r"""The full URL to receive webhook notifications."""

    webhook_id: str
    r"""A unique webhook ID. Reference this value to modify or delete the webhook subscription. operations as well."""

    event_group: OptionalNullable[WebhookEventGroup] = UNSET
    r"""Subscribe to a group of events.
    `all`: subscribe to all existing and future event types

    """

    events: OptionalNullable[List[WebhooksType]] = UNSET
    r"""All events the webhook is subscribed to. Null when `event_group` = `all`.

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["event_group", "events"]
        nullable_fields = ["event_group", "events"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

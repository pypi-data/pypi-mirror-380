"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .amount_view import AmountView, AmountViewTypedDict
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class ICartFeeViewTypedDict(TypedDict):
    reference: NotRequired[str]
    r"""Unique reference used to identify the fee."""
    name: NotRequired[Nullable[str]]
    r"""Name of the fee that will appear in the order ledger."""
    description: NotRequired[Nullable[str]]
    r"""Description of the fee that will appear in the tooltip if the mouse hovers over the fee."""
    unit_price: NotRequired[AmountViewTypedDict]
    unit_tax_amount: NotRequired[AmountViewTypedDict]
    quantity: NotRequired[float]


class ICartFeeView(BaseModel):
    reference: Optional[str] = None
    r"""Unique reference used to identify the fee."""

    name: OptionalNullable[str] = UNSET
    r"""Name of the fee that will appear in the order ledger."""

    description: OptionalNullable[str] = UNSET
    r"""Description of the fee that will appear in the tooltip if the mouse hovers over the fee."""

    unit_price: Optional[AmountView] = None

    unit_tax_amount: Optional[AmountView] = None

    quantity: Optional[float] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "reference",
            "name",
            "description",
            "unit_price",
            "unit_tax_amount",
            "quantity",
        ]
        nullable_fields = ["name", "description"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

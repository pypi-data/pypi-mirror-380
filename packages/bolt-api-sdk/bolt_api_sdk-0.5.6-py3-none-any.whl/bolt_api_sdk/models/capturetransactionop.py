"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .capture_transaction_with_reference import (
    CaptureTransactionWithReference,
    CaptureTransactionWithReferenceTypedDict,
)
from bolt_api_sdk.types import BaseModel
from bolt_api_sdk.utils import FieldMetadata, HeaderMetadata, RequestMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CaptureTransactionRequestTypedDict(TypedDict):
    idempotency_key: NotRequired[str]
    r"""A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/)."""
    capture_transaction_with_reference: NotRequired[
        CaptureTransactionWithReferenceTypedDict
    ]
    r"""Capture a Transaction"""


class CaptureTransactionRequest(BaseModel):
    idempotency_key: Annotated[
        Optional[str],
        pydantic.Field(alias="Idempotency-Key"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""A key created by merchants that ensures `POST` and `PATCH` requests are only performed once. [Read more about Idempotent Requests here](/developers/references/idempotency/)."""

    capture_transaction_with_reference: Annotated[
        Optional[CaptureTransactionWithReference],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None
    r"""Capture a Transaction"""


class ErrorTypedDict(TypedDict):
    code: NotRequired[float]
    field: NotRequired[str]
    message: NotRequired[str]


class Error(BaseModel):
    code: Optional[float] = None

    field: Optional[str] = None

    message: Optional[str] = None


class ResultTypedDict(TypedDict):
    pass


class Result(BaseModel):
    pass

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class AddressTypedDict(TypedDict):
    r"""The Address object is used for billing, shipping, and physical store address use cases."""

    country_code: str
    r"""The ISO 3166-1 alpha-2 country code associated with this address."""
    email: str
    r"""An email address."""
    first_name: str
    r"""The given name of the person associated with this address."""
    last_name: str
    r"""The surname of the person associated with this address."""
    locality: str
    r"""The city name details associated with this address."""
    postal_code: str
    r"""The the postal or zip code associated with this address."""
    region: str
    r"""**Not Required for NON US addresses**. The region details such as state or province associated with this address."""
    street_address1: str
    r"""The street number and street name of the address."""
    company: NotRequired[str]
    r"""The company name associated with this address."""
    country: NotRequired[str]
    r"""The name of the country associated with this address."""
    default: NotRequired[bool]
    r"""Whether the added address is now the default address."""
    door_code: NotRequired[Nullable[str]]
    r"""The building door code or community gate code."""
    name: NotRequired[str]
    r"""The given and surname of the person associated with this address."""
    phone: NotRequired[str]
    r"""A phone number following E164 standards, in its globalized format, i.e. prepended with a plus sign."""
    region_code: NotRequired[Nullable[str]]
    r"""The ISO 3166-2 region code associated with this address.
    - * If specified, value must be valid for the `country`.
    - * If null, value is inferred from the `region`.

    """
    street_address2: NotRequired[str]
    r"""Any apartment, floor, or unit details."""
    street_address3: NotRequired[Nullable[str]]
    r"""Any additional street address details."""
    street_address4: NotRequired[Nullable[str]]
    r"""Any additional street address details."""


class Address(BaseModel):
    r"""The Address object is used for billing, shipping, and physical store address use cases."""

    country_code: str
    r"""The ISO 3166-1 alpha-2 country code associated with this address."""

    email: str
    r"""An email address."""

    first_name: str
    r"""The given name of the person associated with this address."""

    last_name: str
    r"""The surname of the person associated with this address."""

    locality: str
    r"""The city name details associated with this address."""

    postal_code: str
    r"""The the postal or zip code associated with this address."""

    region: str
    r"""**Not Required for NON US addresses**. The region details such as state or province associated with this address."""

    street_address1: str
    r"""The street number and street name of the address."""

    company: Optional[str] = None
    r"""The company name associated with this address."""

    country: Optional[str] = None
    r"""The name of the country associated with this address."""

    default: Optional[bool] = None
    r"""Whether the added address is now the default address."""

    door_code: OptionalNullable[str] = UNSET
    r"""The building door code or community gate code."""

    name: Optional[str] = None
    r"""The given and surname of the person associated with this address."""

    phone: Optional[str] = None
    r"""A phone number following E164 standards, in its globalized format, i.e. prepended with a plus sign."""

    region_code: OptionalNullable[str] = UNSET
    r"""The ISO 3166-2 region code associated with this address.
    - * If specified, value must be valid for the `country`.
    - * If null, value is inferred from the `region`.

    """

    street_address2: Optional[str] = None
    r"""Any apartment, floor, or unit details."""

    street_address3: OptionalNullable[str] = UNSET
    r"""Any additional street address details."""

    street_address4: OptionalNullable[str] = UNSET
    r"""Any additional street address details."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "company",
            "country",
            "default",
            "door_code",
            "name",
            "phone",
            "region_code",
            "street_address2",
            "street_address3",
            "street_address4",
        ]
        nullable_fields = [
            "door_code",
            "region_code",
            "street_address3",
            "street_address4",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .address_view import AddressView, AddressViewTypedDict
from .card_network import CardNetwork
from .shopper_metadata import ShopperMetadata, ShopperMetadataTypedDict
from bolt_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from enum import Enum
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class SavedCreditCardViewType(str, Enum):
    r"""The payment method type. If empty, the property defaults to `card`."""

    CARD = "card"
    PAYPAL = "paypal"


class SavedCreditCardViewTypedDict(TypedDict):
    r"""Saved Credit Card Detail"""

    billing_address: NotRequired[AddressViewTypedDict]
    r"""The address object returned in the response."""
    id: NotRequired[str]
    r"""The ID of the payment method associated with the Shopper's account."""
    last4: NotRequired[str]
    r"""The card's last 4 digits. **Nullable** for Transactions Details."""
    exp_month: NotRequired[int]
    r"""The expiration month of the credit card."""
    exp_year: NotRequired[int]
    r"""The expiration year of the credit card."""
    network: NotRequired[CardNetwork]
    r"""The card's network code. **Nullable** for Transactions Details. Note: LEGACY diners_club_us_ca now tagged as mastercard

    """
    default: NotRequired[bool]
    r"""The default card payment method chosen by the shopper."""
    type: NotRequired[SavedCreditCardViewType]
    r"""The payment method type. If empty, the property defaults to `card`."""
    description: NotRequired[str]
    r"""The APM account identifier; usually the email address."""
    metadata: NotRequired[Nullable[ShopperMetadataTypedDict]]
    r"""A key-value pair object that allows users to store arbitrary information associated with an object.  For any individual account object, we allow up to 50 keys. Keys can be up to 40 characters long and values can be up to 500 characters long.  Metadata should not contain any sensitive customer information, like PII (Personally Identifiable Information). For more information about metadata, see our [documentation](https://help.bolt.com/developers/references/embedded-metadata/).

    """


class SavedCreditCardView(BaseModel):
    r"""Saved Credit Card Detail"""

    billing_address: Optional[AddressView] = None
    r"""The address object returned in the response."""

    id: Optional[str] = None
    r"""The ID of the payment method associated with the Shopper's account."""

    last4: Optional[str] = None
    r"""The card's last 4 digits. **Nullable** for Transactions Details."""

    exp_month: Optional[int] = None
    r"""The expiration month of the credit card."""

    exp_year: Optional[int] = None
    r"""The expiration year of the credit card."""

    network: Optional[CardNetwork] = None
    r"""The card's network code. **Nullable** for Transactions Details. Note: LEGACY diners_club_us_ca now tagged as mastercard

    """

    default: Optional[bool] = None
    r"""The default card payment method chosen by the shopper."""

    type: Optional[SavedCreditCardViewType] = None
    r"""The payment method type. If empty, the property defaults to `card`."""

    description: Optional[str] = None
    r"""The APM account identifier; usually the email address."""

    metadata: OptionalNullable[ShopperMetadata] = UNSET
    r"""A key-value pair object that allows users to store arbitrary information associated with an object.  For any individual account object, we allow up to 50 keys. Keys can be up to 40 characters long and values can be up to 500 characters long.  Metadata should not contain any sensitive customer information, like PII (Personally Identifiable Information). For more information about metadata, see our [documentation](https://help.bolt.com/developers/references/embedded-metadata/).

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "billing_address",
            "id",
            "last4",
            "exp_month",
            "exp_year",
            "network",
            "default",
            "type",
            "description",
            "metadata",
        ]
        nullable_fields = ["metadata"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m

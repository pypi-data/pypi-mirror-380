[build-system]
requires = ["setuptools>=61.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "a-simple-llm-kit"
dynamic = ["version"]
description = "A lightweight, extensible server for working with large language models, focused on pipeline processing and multi-modal capabilities. Built with FastAPI and DSPy."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
authors = [{ name = "Charles Feinn", email = "charles@appsimple.io" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.10",
]
dependencies = [
    "fastapi[all]>=0.68.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=0.19.0",
    "pyyaml>=6.0.0",
    "dspy-ai>=2.0.0",
    "pillow>=10.0.0",
    "python-multipart>=0.0.5"
]

[project.urls]
Homepage = "https://github.com/chuckfinca/a-simple-llm-kit"

[project.optional-dependencies]
opentelemetry = [
    "opentelemetry-api~=1.25.0",
    "opentelemetry-sdk~=1.25.0",
    "opentelemetry-exporter-otlp~=1.25.0", 
    
    # Keep prometheus for local metrics, pinned to a compatible version
    "opentelemetry-exporter-prometheus~=0.46b0",
    "opentelemetry-semantic-conventions~=0.46b0", # Aligns with 1.25.0 SDK
    "prometheus-client>=0.17.0"
]
dev = [
    "mypy>=1.9.0",
    "pytest>=7.0.0",
    "ruff>=0.4.0",
    "httpx>=0.23.0",
    "email-validator>=2.0.0",
    "pillow-heif",
    "modal",
    "trio",
    "pytest-anyio",
    "a-simple-llm-kit[opentelemetry]"
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools]
package-dir = { "" = "src" }

[tool.ruff]
[tool.ruff.lint]
# The "Golden Standard" rule selection (Tier 2).
select = [
    "F",   # Pyflakes (finds bugs)
    "E",   # Pycodestyle Errors
    "W",   # Pycodestyle Warnings
    "I",   # isort (import sorting)
    "UP",  # pyupgrade (modernizes code)
    "C4",  # flake8-comprehensions (better comprehensions)
    "B",   # flake8-bugbear (finds more complex bugs)
]

# Disable a few rules that are often too noisy or handled by the formatter.
# The formatter handles E501 (line-too-long) automatically.
ignore = ["E501", "W293"]

# Allow unused variables in function signatures if they start with an underscore.
# This is essential for protocols, FastAPI dependencies, etc.
dummy-variable-rgx = "^(_+|unused_)"

[tool.ruff.lint.isort]
# Tell Ruff that "a-simple-llm-kit" is your own code, so it groups imports correctly.
known-first-party = ["a-simple-llm-kit"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
ignore_missing_imports = true

[tool.pyright]
include = ["src"]
reportMissingModuleSource = "none"

# Auto-generate a version file from the current Git tag for the build process.
[tool.setuptools_scm]
write_to = "src/a_simple_llm_kit/_version.py"
from _typeshed import Incomplete
from collections.abc import Callable

__all__ = ['State']

class State[S, A]:
    run: Incomplete
    def __init__(self, run: Callable[[S], tuple[A, S]]) -> None: ...
    def bind[B](self, g: Callable[[A], State[S, B]]) -> State[S, B]: ...
    def eval(self, init: S) -> A: ...
    def map[B](self, f: Callable[[A], B]) -> State[S, B]: ...
    def map2[B, C](self, sb: State[S, B], f: Callable[[A, B], C]) -> State[S, C]: ...
    def both[B](self, rb: State[S, B]) -> State[S, tuple[A, B]]: ...
    @staticmethod
    def unit[ST, B](b: B) -> State[ST, B]: ...
    @staticmethod
    def get[ST]() -> State[ST, ST]: ...
    @staticmethod
    def put[ST](s: ST) -> State[ST, tuple[()]]: ...
    @staticmethod
    def modify[ST](f: Callable[[ST], ST]) -> State[ST, tuple[()]]: ...
    @staticmethod
    def sequence[ST, AA](sas: list[State[ST, AA]]) -> State[ST, list[AA]]: ...

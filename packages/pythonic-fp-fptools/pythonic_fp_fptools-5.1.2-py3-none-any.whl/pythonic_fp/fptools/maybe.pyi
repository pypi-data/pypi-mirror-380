from _typeshed import Incomplete
from collections.abc import Callable, Iterator, Sequence
from typing import overload

__all__ = ['MayBe']

class MayBe[D]:
    __match_args__: Incomplete
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, item: D) -> None: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Iterator[D]: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    @overload
    def get(self) -> D: ...
    @overload
    def get(self, alt: D) -> D: ...
    def map[U](self, f: Callable[[D], U]) -> MayBe[U]: ...
    def bind[U](self, f: Callable[[D], MayBe[U]]) -> MayBe[U]: ...
    @staticmethod
    def sequence[U](sequence_mb_u: Sequence[MayBe[U]]) -> MayBe[Sequence[U]]: ...

# QuantRS2 GPU-Enabled Docker Image
# For high-performance quantum circuit simulation

FROM nvidia/cuda:11.8-devel-ubuntu22.04 as builder

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    CUDA_HOME=/usr/local/cuda \
    PATH="/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    build-essential \
    curl \
    git \
    pkg-config \
    libssl-dev \
    libffi-dev \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Create virtual environment
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install virtualenv
RUN python3 -m virtualenv /opt/venv
ENV PATH="/opt/venv/bin:${PATH}"

# Install CUDA-enabled packages
RUN pip install --no-cache-dir \
    torch \
    cupy-cuda11x \
    numba \
    cuda-python

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Copy source code and build
WORKDIR /app
COPY . .

# Build QuantRS2 with GPU support
ENV QUANTRS_GPU_ENABLED=1
RUN pip install -e .

# Production stage
FROM nvidia/cuda:11.8-runtime-ubuntu22.04 as production

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    CUDA_HOME=/usr/local/cuda \
    PATH="/opt/venv/bin:/usr/local/cuda/bin:${PATH}" \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Copy application
WORKDIR /app
COPY --from=builder /app .

# Create non-root user
RUN groupadd -r quantrs && useradd -r -g quantrs quantrs
RUN chown -R quantrs:quantrs /app
USER quantrs

# GPU health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "import quantrs2; import cupy; print('GPU support:', cupy.cuda.is_available())" || exit 1

# Default command
CMD ["python3", "-c", "import quantrs2; print('QuantRS2 GPU container ready!')"]

# Labels
LABEL maintainer="QuantRS2 Team" \
      version="0.1.0-gpu" \
      description="QuantRS2 with GPU acceleration support" \
      org.opencontainers.image.title="QuantRS2 GPU" \
      org.opencontainers.image.description="GPU-accelerated quantum computing framework"
# Security-Hardened Docker Compose for QuantRS2
# This configuration implements comprehensive container security measures

version: '3.9'

# Security: Define networks with restricted access
networks:
  quantrs_internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/24
  quantrs_external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24

# Security: Define named volumes with proper constraints
volumes:
  quantrs_data:
    driver: local
    driver_opts:
      type: none
      device: ${QUANTRS_DATA_PATH:-./data}
      o: bind,noexec,nosuid,nodev
  quantrs_logs:
    driver: local
    driver_opts:
      type: none  
      device: ${QUANTRS_LOGS_PATH:-./logs}
      o: bind,noexec,nosuid,nodev
  quantrs_config:
    driver: local
    driver_opts:
      type: none
      device: ${QUANTRS_CONFIG_PATH:-./config}
      o: bind,ro,noexec,nosuid,nodev

services:
  # Main QuantRS2 application with maximum security
  quantrs2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.secure
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: quantrs2_secure
    
    # Security: Run as non-root user
    user: "1000:1000"
    
    # Security: Comprehensive security options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined  # Consider custom seccomp profile
      - apparmor:docker-default
    
    # Security: Read-only filesystem with specific writable areas
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    
    # Security: Resource limits
    mem_limit: 4g
    mem_reservation: 2g
    cpus: 2.0
    pids_limit: 100
    ulimits:
      nproc: 1024
      nofile:
        soft: 1024
        hard: 2048
    
    # Security: Environment variables from secure sources
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONHASHSEED=random
      - TZ=UTC
      - QUANTRS2_ENVIRONMENT=${QUANTRS2_ENVIRONMENT:-production}
      - QUANTRS2_LOG_LEVEL=${QUANTRS2_LOG_LEVEL:-WARNING}
    
    # Security: Secrets management (use Docker secrets in production)
    env_file:
      - ../config/.env.secure
    
    # Security: Restricted volume mounts
    volumes:
      - quantrs_config:/app/config:ro
      - quantrs_logs:/app/logs:rw
      - quantrs_data:/app/data:rw
    
    # Security: Network restrictions
    networks:
      - quantrs_internal
      - quantrs_external
    
    # Security: Limited port exposure
    ports:
      - "127.0.0.1:8080:8080"  # Health check only on localhost
    
    # Security: Health check with timeout
    healthcheck:
      test: ["CMD", "python", "-c", "import quantrs2; print('healthy')"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Security: Restart policy
    restart: unless-stopped
    
    # Security: Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=quantrs2,environment=${QUANTRS2_ENVIRONMENT:-production}"
    
    # Security: Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Secure PostgreSQL database
  postgres:
    image: postgres:15.5-alpine
    container_name: quantrs2_postgres_secure
    
    # Security: Run as postgres user
    user: postgres
    
    # Security: Security options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    
    # Security: Read-only filesystem with writable data area
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=10m
    
    # Security: Resource limits
    mem_limit: 2g
    mem_reservation: 1g
    cpus: 1.0
    
    # Security: Environment configuration
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-quantrs2}
      - POSTGRES_USER=${POSTGRES_USER:-quantrs2}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    # Security: Secrets for sensitive data
    secrets:
      - postgres_password
    
    # Security: Secure volume mounts
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw,Z
      - ./postgres/init:/docker-entrypoint-initdb.d:ro,Z
    
    # Security: Internal network only
    networks:
      - quantrs_internal
    
    # Security: No exposed ports (internal access only)
    # ports: [] # No external access
    
    # Security: Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quantrs2} -d ${POSTGRES_DB:-quantrs2}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    restart: unless-stopped
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Secure Redis cache
  redis:
    image: redis:7.2.3-alpine
    container_name: quantrs2_redis_secure
    
    # Security: Run as redis user  
    user: redis
    
    # Security: Security options
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    
    # Security: Read-only filesystem
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      - /var/lib/redis:noexec,nosuid,size=100m
    
    # Security: Resource limits
    mem_limit: 1g
    mem_reservation: 512m
    cpus: 0.5
    
    # Security: Redis configuration with authentication
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changeme}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    
    # Security: Internal network only
    networks:
      - quantrs_internal
    
    # Security: Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    
    restart: unless-stopped
    
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"

  # Security monitoring container
  security_monitor:
    image: falcosecurity/falco:0.36.2
    container_name: quantrs2_security_monitor
    
    # Security: Privileged access required for monitoring
    privileged: true
    
    # Security: Host monitoring
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /dev:/host/dev:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./falco/falco.yaml:/etc/falco/falco.yaml:ro
    
    # Security: Network access for alerts
    networks:
      - quantrs_external
    
    # Security: Environment configuration
    environment:
      - FALCO_GRPC_ENABLED=true
      - FALCO_GRPC_BIND_ADDRESS=0.0.0.0:5060
    
    restart: unless-stopped
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

# Security: Named volumes with restricted access
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRES_DATA_PATH:-./postgres_data}
      o: bind,noexec,nosuid,nodev

# Security: Docker secrets for sensitive data
secrets:
  postgres_password:
    file: ${POSTGRES_PASSWORD_FILE:-./secrets/postgres_password.txt}
  quantrs2_jwt_secret:
    file: ${QUANTRS2_JWT_SECRET_FILE:-./secrets/jwt_secret.txt}
  quantrs2_encryption_key:
    file: ${QUANTRS2_ENCRYPTION_KEY_FILE:-./secrets/encryption_key.txt}
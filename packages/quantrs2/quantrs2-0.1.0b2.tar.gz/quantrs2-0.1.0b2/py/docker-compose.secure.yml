# QuantRS2 Secure Docker Compose Configuration
# Production-ready configuration with environment variable security
# Use with: docker-compose -f docker-compose.secure.yml up

version: '3.8'

services:
  # Base QuantRS2 service with security hardening
  quantrs2-base:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: quantrs2:latest
    container_name: quantrs2-base
    restart: unless-stopped
    user: "${QUANTRS2_UID:-1000}:${QUANTRS2_GID:-1000}"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    environment:
      - QUANTRS2_ENV=${QUANTRS2_ENV:-production}
      - QUANTRS2_LOG_LEVEL=${QUANTRS2_LOG_LEVEL:-INFO}
      - QUANTRS2_DEBUG=${QUANTRS2_DEBUG:-false}
      - QUANTRS2_MASTER_KEY=${QUANTRS2_MASTER_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - POSTGRES_HOST=${POSTGRES_HOST:-quantrs2-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-quantrs2}
      - POSTGRES_USER=${POSTGRES_USER:-quantrs2}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-quantrs2-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MAX_QUBITS=${MAX_QUBITS:-1024}
      - MAX_CIRCUIT_DEPTH=${MAX_CIRCUIT_DEPTH:-10000}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-10}
      - FEATURE_AUTHENTICATION=${FEATURE_AUTHENTICATION:-true}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
    volumes:
      - quantrs2-data:/app/data:rw
      - quantrs2-logs:/app/logs:rw
      - quantrs2-tmp:/tmp:rw
    networks:
      - quantrs2-network
    healthcheck:
      test: ["CMD", "python", "/app/docker/healthcheck.py", "--service-type", "base"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: ${PYTHON_MEMORY_LIMIT:-4g}
          cpus: '2.0'
        reservations:
          memory: 1g
          cpus: '0.5'

  # Jupyter environment with authentication
  quantrs2-jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.jupyter
    image: quantrs2:jupyter
    container_name: quantrs2-jupyter
    restart: unless-stopped
    user: "${QUANTRS2_UID:-1000}:${QUANTRS2_GID:-1000}"
    security_opt:
      - no-new-privileges:true
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
      - JUPYTER_PASSWORD=${JUPYTER_PASSWORD_HASH}
      - QUANTRS2_ENV=${QUANTRS2_ENV:-production}
      - QUANTRS2_LOG_LEVEL=${QUANTRS2_LOG_LEVEL:-INFO}
      - QUANTRS2_MASTER_KEY=${QUANTRS2_MASTER_KEY}
      - POSTGRES_HOST=${POSTGRES_HOST:-quantrs2-db}
      - POSTGRES_USER=${POSTGRES_USER:-quantrs2}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST:-quantrs2-redis}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - jupyter-notebooks:/home/quantrs/notebooks:rw
      - jupyter-data:/home/quantrs/.jupyter:rw
      - ../examples:/home/quantrs/examples:ro
    networks:
      - quantrs2-network
    depends_on:
      quantrs2-db:
        condition: service_healthy
      quantrs2-redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyter.rule=Host(`${TRAEFIK_DOMAIN:-localhost}`)"
      - "traefik.http.routers.jupyter.tls=true"
      - "traefik.http.services.jupyter.loadbalancer.server.port=8888"
      - "traefik.http.routers.jupyter.middlewares=auth"
    healthcheck:
      test: ["CMD", "python", "/app/docker/healthcheck.py", "--service-type", "jupyter"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # GPU-enabled service with security
  quantrs2-gpu:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gpu
    image: quantrs2:gpu
    container_name: quantrs2-gpu
    restart: unless-stopped
    runtime: nvidia
    user: "${QUANTRS2_UID:-1000}:${QUANTRS2_GID:-1000}"
    security_opt:
      - no-new-privileges:true
    environment:
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - QUANTRS2_GPU_ENABLED=1
      - QUANTRS2_ENV=${QUANTRS2_ENV:-production}
      - QUANTRS2_LOG_LEVEL=${QUANTRS2_LOG_LEVEL:-INFO}
      - QUANTRS2_MASTER_KEY=${QUANTRS2_MASTER_KEY}
      - POSTGRES_HOST=${POSTGRES_HOST:-quantrs2-db}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - gpu-data:/app/data:rw
    networks:
      - quantrs2-network
    depends_on:
      - quantrs2-base
    deploy:
      resources:
        limits:
          memory: ${GPU_MEMORY_LIMIT:-8g}
        reservations:
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-1}
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python", "/app/docker/healthcheck.py", "--service-type", "gpu"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development environment (only in dev mode)
  quantrs2-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    image: quantrs2:dev
    container_name: quantrs2-dev
    restart: unless-stopped
    profiles: ["development"]
    ports:
      - "${DEV_API_PORT:-8080}:8080"
      - "${DEV_FRONTEND_PORT:-3000}:3000"
      - "${DEV_DEBUG_PORT:-5000}:5000"
    environment:
      - QUANTRS2_ENV=development
      - QUANTRS2_LOG_LEVEL=DEBUG
      - QUANTRS2_DEBUG=true
      - QUANTRS2_MASTER_KEY=${QUANTRS2_MASTER_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../:/app:rw
      - dev-cache:/home/dev/.cache:rw
      - dev-cargo:/home/dev/.cargo:rw
    networks:
      - quantrs2-network
    working_dir: /app
    command: /bin/bash
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "python", "/app/docker/healthcheck.py", "--service-type", "dev"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Secure reverse proxy (Traefik)
  reverse-proxy:
    image: traefik:v2.10
    container_name: quantrs2-proxy
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8081}:8080"
    environment:
      - TRAEFIK_API_DASHBOARD=${TRAEFIK_DASHBOARD_ENABLED:-false}
      - TRAEFIK_API_INSECURE=${TRAEFIK_INSECURE:-false}
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_HTTP_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_HTTPS_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${TRAEFIK_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/acme/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=http
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certs:/etc/traefik/certs:rw
      - traefik-acme:/acme:rw
      - ./traefik-secure.yml:/etc/traefik/traefik.yml:ro
    networks:
      - quantrs2-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${TRAEFIK_DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Secure database with authentication
  quantrs2-db:
    image: postgres:15-alpine
    container_name: quantrs2-db
    restart: unless-stopped
    user: postgres
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-quantrs2}
      - POSTGRES_USER=${POSTGRES_USER:-quantrs2}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - postgres-logs:/var/log/postgresql:rw
    networks:
      - quantrs2-network
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-127.0.0.1:5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-quantrs2} -d ${POSTGRES_DB:-quantrs2}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.25'

  # Secure Redis with authentication
  quantrs2-redis:
    image: redis:7-alpine
    container_name: quantrs2-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes", "--save", "60", "1"]
    volumes:
      - redis-data:/data:rw
      - redis-logs:/var/log/redis:rw
    networks:
      - quantrs2-network
    ports:
      - "${REDIS_EXTERNAL_PORT:-127.0.0.1:6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.1'

  # Prometheus with security
  quantrs2-prometheus:
    image: prom/prometheus:latest
    container_name: quantrs2-prometheus
    restart: unless-stopped
    user: "${PROMETHEUS_UID:-65534}:${PROMETHEUS_GID:-65534}"
    security_opt:
      - no-new-privileges:true
    ports:
      - "${PROMETHEUS_PORT:-127.0.0.1:9090}:9090"
    environment:
      - PROMETHEUS_RETENTION_TIME=${PROMETHEUS_RETENTION_TIME:-30d}
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus:rw
      - prometheus-rules:/etc/prometheus/rules:ro
    networks:
      - quantrs2-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-30d}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.max-block-duration=2h'
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.25'

  # Grafana with secure authentication
  quantrs2-grafana:
    image: grafana/grafana:latest
    container_name: quantrs2-grafana
    restart: unless-stopped
    user: "${GRAFANA_UID:-472}:${GRAFANA_GID:-472}"
    security_opt:
      - no-new-privileges:true
    ports:
      - "${GRAFANA_PORT:-127.0.0.1:3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_SECURITY_CONTENT_TYPE_PROTECTION=true
      - GF_SECURITY_X_CONTENT_TYPE_OPTIONS=true
      - GF_SECURITY_X_XSS_PROTECTION=true
      - GF_SERVER_ROOT_URL=https://grafana.${TRAEFIK_DOMAIN:-localhost}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${POSTGRES_HOST:-quantrs2-db}:${POSTGRES_PORT:-5432}
      - GF_DATABASE_NAME=${POSTGRES_DB:-quantrs2}
      - GF_DATABASE_USER=${POSTGRES_USER:-quantrs2}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_SESSION_PROVIDER=redis
      - GF_SESSION_PROVIDER_CONFIG=addr=${REDIS_HOST:-quantrs2-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD},db=grafana
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana-logs:/var/log/grafana:rw
    networks:
      - quantrs2-network
    depends_on:
      quantrs2-db:
        condition: service_healthy
      quantrs2-redis:
        condition: service_healthy
      quantrs2-prometheus:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${TRAEFIK_DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.1'

  # Log aggregation (optional)
  quantrs2-logs:
    image: fluent/fluent-bit:latest
    container_name: quantrs2-logs
    restart: unless-stopped
    profiles: ["logging"]
    security_opt:
      - no-new-privileges:true
    environment:
      - FLB_LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - quantrs2-logs:/var/log/quantrs2:ro
      - postgres-logs:/var/log/postgresql:ro
      - redis-logs:/var/log/redis:ro
      - grafana-logs:/var/log/grafana:ro
    networks:
      - quantrs2-network

# Secure named volumes with proper permissions
volumes:
  quantrs2-data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=${QUANTRS2_UID:-1000},gid=${QUANTRS2_GID:-1000}
      device: ${DATA_DIR:-./data}/quantrs2
  quantrs2-logs:
    driver: local
  quantrs2-tmp:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=100m,uid=${QUANTRS2_UID:-1000},gid=${QUANTRS2_GID:-1000}
  jupyter-notebooks:
    driver: local
  jupyter-data:
    driver: local
  gpu-data:
    driver: local
  dev-cache:
    driver: local
  dev-cargo:
    driver: local
  traefik-certs:
    driver: local
  traefik-acme:
    driver: local
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=999,gid=999
      device: ${DATA_DIR:-./data}/postgres
  postgres-logs:
    driver: local
  redis-data:
    driver: local
    driver_opts:
      type: none  
      o: bind,uid=999,gid=999
      device: ${DATA_DIR:-./data}/redis
  redis-logs:
    driver: local
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=65534,gid=65534
      device: ${DATA_DIR:-./data}/prometheus
  prometheus-rules:
    driver: local
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind,uid=472,gid=472
      device: ${DATA_DIR:-./data}/grafana
  grafana-logs:
    driver: local

# Secure networks with custom subnets
networks:
  quantrs2-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}
          gateway: ${DOCKER_GATEWAY:-172.20.0.1}
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
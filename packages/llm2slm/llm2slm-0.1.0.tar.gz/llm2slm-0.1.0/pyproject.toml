[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm2slm"
version = "0.1.0"
description = "Convert Large Language Models to Small Language Models with CLI, Web UI, and IDE integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Kolerr Lab", email = "ricky@kolerr.com"}
]
maintainers = [
    {name = "Kolerr Lab", email = "lab.kolerr@kolerr.com"}
]
keywords = [
    "machine-learning",
    "llm",
    "slm",
    "model-compression",
    "ai",
    "nlp",
    "quantization",
    "distillation"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0.0",
    "fastapi>=0.104.0",
    "httpx>=0.25.0",
    "numpy>=1.21.0",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "tqdm>=4.64.0",
    "uvicorn[standard]>=0.24.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0"
]
server = [
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.0.0"
]
onnx = [
    "onnx>=1.14.0",
    "onnxruntime>=1.16.0"
]
tensorrt = [
    "tensorrt>=8.6.0",
    "pycuda>=2022.2"
]
all = [
    "llm2slm[dev,server,onnx,tensorrt]"
]

[project.urls]
Homepage = "https://github.com/Kolerr-Lab/llm2slm-oss"
Documentation = "https://llm2slm-oss.readthedocs.io"
Repository = "https://github.com/Kolerr-Lab/llm2slm-oss"
Issues = "https://github.com/Kolerr-Lab/llm2slm-oss/issues"
Changelog = "https://github.com/Kolerr-Lab/llm2slm-oss/blob/main/CHANGELOG.md"

[project.scripts]
llm2slm = "llm2slm.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
llm2slm = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  migrations
  | build
  | dist
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py38"
include = ["src/**/*.py", "tests/**/*.py"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.lint.isort]
known-first-party = ["llm2slm"]
known-third-party = ["fastapi", "pydantic", "httpx", "numpy", "yaml"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101"]

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["llm2slm"]
known_third_party = ["fastapi", "pydantic", "httpx", "numpy", "yaml"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "tensorrt.*",
    "pycuda.*",
    "onnx.*",
    "onnxruntime.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/llm2slm",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/llm2slm"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

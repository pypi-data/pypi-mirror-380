# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Vault(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'attributes': 'dict(str, object)',
        'change_history': 'list[ChangeHistory]',
        'client_id': 'str',
        'created_by': 'str',
        'dependencies': 'dict(str, object)',
        'description': 'str',
        'dt_create': 'datetime',
        'encrypted': 'bool',
        'identifier': 'str',
        'integration_id': 'str',
        'modified_by': 'str',
        'name': 'str',
        'product': 'str',
        'save_as': 'str',
        'status': 'str',
        'type': 'str',
        'usages': 'dict(str, object)',
        'value': 'str',
        'vault_manager': 'str'
    }

    attribute_map = {
        'id': '_id',
        'attributes': 'attributes',
        'change_history': 'change_history',
        'client_id': 'client_id',
        'created_by': 'created_by',
        'dependencies': 'dependencies',
        'description': 'description',
        'dt_create': 'dt_create',
        'encrypted': 'encrypted',
        'identifier': 'identifier',
        'integration_id': 'integration_id',
        'modified_by': 'modified_by',
        'name': 'name',
        'product': 'product',
        'save_as': 'save_as',
        'status': 'status',
        'type': 'type',
        'usages': 'usages',
        'value': 'value',
        'vault_manager': 'vault_manager'
    }

    def __init__(self, id=None, attributes=None, change_history=None, client_id=None, created_by=None, dependencies=None, description=None, dt_create=None, encrypted=None, identifier=None, integration_id=None, modified_by=None, name=None, product=None, save_as=None, status=None, type=None, usages=None, value=None, vault_manager=None):  # noqa: E501
        """Vault - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._attributes = None
        self._change_history = None
        self._client_id = None
        self._created_by = None
        self._dependencies = None
        self._description = None
        self._dt_create = None
        self._encrypted = None
        self._identifier = None
        self._integration_id = None
        self._modified_by = None
        self._name = None
        self._product = None
        self._save_as = None
        self._status = None
        self._type = None
        self._usages = None
        self._value = None
        self._vault_manager = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attributes is not None:
            self.attributes = attributes
        if change_history is not None:
            self.change_history = change_history
        if client_id is not None:
            self.client_id = client_id
        if created_by is not None:
            self.created_by = created_by
        if dependencies is not None:
            self.dependencies = dependencies
        if description is not None:
            self.description = description
        if dt_create is not None:
            self.dt_create = dt_create
        self.encrypted = encrypted
        if identifier is not None:
            self.identifier = identifier
        if integration_id is not None:
            self.integration_id = integration_id
        if modified_by is not None:
            self.modified_by = modified_by
        self.name = name
        self.product = product
        if save_as is not None:
            self.save_as = save_as
        if status is not None:
            self.status = status
        self.type = type
        if usages is not None:
            self.usages = usages
        if value is not None:
            self.value = value
        self.vault_manager = vault_manager

    @property
    def id(self):
        """Gets the id of this Vault.  # noqa: E501


        :return: The id of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vault.


        :param id: The id of this Vault.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def attributes(self):
        """Gets the attributes of this Vault.  # noqa: E501


        :return: The attributes of this Vault.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Vault.


        :param attributes: The attributes of this Vault.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def change_history(self):
        """Gets the change_history of this Vault.  # noqa: E501


        :return: The change_history of this Vault.  # noqa: E501
        :rtype: list[ChangeHistory]
        """
        return self._change_history

    @change_history.setter
    def change_history(self, change_history):
        """Sets the change_history of this Vault.


        :param change_history: The change_history of this Vault.  # noqa: E501
        :type: list[ChangeHistory]
        """

        self._change_history = change_history

    @property
    def client_id(self):
        """Gets the client_id of this Vault.  # noqa: E501


        :return: The client_id of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Vault.


        :param client_id: The client_id of this Vault.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def created_by(self):
        """Gets the created_by of this Vault.  # noqa: E501


        :return: The created_by of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Vault.


        :param created_by: The created_by of this Vault.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def dependencies(self):
        """Gets the dependencies of this Vault.  # noqa: E501


        :return: The dependencies of this Vault.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this Vault.


        :param dependencies: The dependencies of this Vault.  # noqa: E501
        :type: dict(str, object)
        """

        self._dependencies = dependencies

    @property
    def description(self):
        """Gets the description of this Vault.  # noqa: E501


        :return: The description of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vault.


        :param description: The description of this Vault.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dt_create(self):
        """Gets the dt_create of this Vault.  # noqa: E501


        :return: The dt_create of this Vault.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_create

    @dt_create.setter
    def dt_create(self, dt_create):
        """Sets the dt_create of this Vault.


        :param dt_create: The dt_create of this Vault.  # noqa: E501
        :type: datetime
        """

        self._dt_create = dt_create

    @property
    def encrypted(self):
        """Gets the encrypted of this Vault.  # noqa: E501


        :return: The encrypted of this Vault.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this Vault.


        :param encrypted: The encrypted of this Vault.  # noqa: E501
        :type: bool
        """
        if encrypted is None:
            raise ValueError("Invalid value for `encrypted`, must not be `None`")  # noqa: E501

        self._encrypted = encrypted

    @property
    def identifier(self):
        """Gets the identifier of this Vault.  # noqa: E501


        :return: The identifier of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Vault.


        :param identifier: The identifier of this Vault.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def integration_id(self):
        """Gets the integration_id of this Vault.  # noqa: E501


        :return: The integration_id of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Vault.


        :param integration_id: The integration_id of this Vault.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def modified_by(self):
        """Gets the modified_by of this Vault.  # noqa: E501


        :return: The modified_by of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this Vault.


        :param modified_by: The modified_by of this Vault.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def name(self):
        """Gets the name of this Vault.  # noqa: E501


        :return: The name of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vault.


        :param name: The name of this Vault.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def product(self):
        """Gets the product of this Vault.  # noqa: E501


        :return: The product of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Vault.


        :param product: The product of this Vault.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def save_as(self):
        """Gets the save_as of this Vault.  # noqa: E501


        :return: The save_as of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._save_as

    @save_as.setter
    def save_as(self, save_as):
        """Sets the save_as of this Vault.


        :param save_as: The save_as of this Vault.  # noqa: E501
        :type: str
        """

        self._save_as = save_as

    @property
    def status(self):
        """Gets the status of this Vault.  # noqa: E501


        :return: The status of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Vault.


        :param status: The status of this Vault.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Vault.  # noqa: E501


        :return: The type of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vault.


        :param type: The type of this Vault.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def usages(self):
        """Gets the usages of this Vault.  # noqa: E501


        :return: The usages of this Vault.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this Vault.


        :param usages: The usages of this Vault.  # noqa: E501
        :type: dict(str, object)
        """

        self._usages = usages

    @property
    def value(self):
        """Gets the value of this Vault.  # noqa: E501


        :return: The value of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Vault.


        :param value: The value of this Vault.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def vault_manager(self):
        """Gets the vault_manager of this Vault.  # noqa: E501


        :return: The vault_manager of this Vault.  # noqa: E501
        :rtype: str
        """
        return self._vault_manager

    @vault_manager.setter
    def vault_manager(self, vault_manager):
        """Sets the vault_manager of this Vault.


        :param vault_manager: The vault_manager of this Vault.  # noqa: E501
        :type: str
        """
        if vault_manager is None:
            raise ValueError("Invalid value for `vault_manager`, must not be `None`")  # noqa: E501

        self._vault_manager = vault_manager

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vault):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

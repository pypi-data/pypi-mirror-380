# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneHistoryItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_code': 'str',
        'client_id': 'str',
        'conf_id': 'str',
        'conf_name': 'str',
        'created': 'datetime',
        'current_count': 'int',
        'dt_activity': 'datetime',
        'dt_u': 'datetime',
        'ended': 'datetime',
        'is_etl': 'bool',
        'messages': 'list[str]',
        'nucleus_client_id': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'run_time_seconds': 'float',
        'server_id': 'str',
        'server_name': 'str',
        'service_id': 'str',
        'started': 'datetime',
        'status': 'str',
        'status_dt_u': 'datetime',
        'sync_id': 'str',
        'total_count': 'int',
        'type': 'str'
    }

    attribute_map = {
        'id': '_id',
        'client_code': 'client_code',
        'client_id': 'client_id',
        'conf_id': 'conf_id',
        'conf_name': 'conf_name',
        'created': 'created',
        'current_count': 'current_count',
        'dt_activity': 'dt_activity',
        'dt_u': 'dt_u',
        'ended': 'ended',
        'is_etl': 'is_etl',
        'messages': 'messages',
        'nucleus_client_id': 'nucleus_client_id',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'run_time_seconds': 'run_time_seconds',
        'server_id': 'server_id',
        'server_name': 'server_name',
        'service_id': 'service_id',
        'started': 'started',
        'status': 'status',
        'status_dt_u': 'status_dt_u',
        'sync_id': 'sync_id',
        'total_count': 'total_count',
        'type': 'type'
    }

    def __init__(self, id=None, client_code=None, client_id=None, conf_id=None, conf_name=None, created=None, current_count=None, dt_activity=None, dt_u=None, ended=None, is_etl=None, messages=None, nucleus_client_id=None, resource_id=None, resource_name=None, run_time_seconds=None, server_id=None, server_name=None, service_id=None, started=None, status=None, status_dt_u=None, sync_id=None, total_count=None, type=None):  # noqa: E501
        """CycloneHistoryItem - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_code = None
        self._client_id = None
        self._conf_id = None
        self._conf_name = None
        self._created = None
        self._current_count = None
        self._dt_activity = None
        self._dt_u = None
        self._ended = None
        self._is_etl = None
        self._messages = None
        self._nucleus_client_id = None
        self._resource_id = None
        self._resource_name = None
        self._run_time_seconds = None
        self._server_id = None
        self._server_name = None
        self._service_id = None
        self._started = None
        self._status = None
        self._status_dt_u = None
        self._sync_id = None
        self._total_count = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_code is not None:
            self.client_code = client_code
        if client_id is not None:
            self.client_id = client_id
        if conf_id is not None:
            self.conf_id = conf_id
        if conf_name is not None:
            self.conf_name = conf_name
        self.created = created
        if current_count is not None:
            self.current_count = current_count
        if dt_activity is not None:
            self.dt_activity = dt_activity
        if dt_u is not None:
            self.dt_u = dt_u
        if ended is not None:
            self.ended = ended
        if is_etl is not None:
            self.is_etl = is_etl
        if messages is not None:
            self.messages = messages
        if nucleus_client_id is not None:
            self.nucleus_client_id = nucleus_client_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if run_time_seconds is not None:
            self.run_time_seconds = run_time_seconds
        self.server_id = server_id
        if server_name is not None:
            self.server_name = server_name
        self.service_id = service_id
        if started is not None:
            self.started = started
        self.status = status
        self.status_dt_u = status_dt_u
        if sync_id is not None:
            self.sync_id = sync_id
        if total_count is not None:
            self.total_count = total_count
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this CycloneHistoryItem.  # noqa: E501


        :return: The id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CycloneHistoryItem.


        :param id: The id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_code(self):
        """Gets the client_code of this CycloneHistoryItem.  # noqa: E501


        :return: The client_code of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this CycloneHistoryItem.


        :param client_code: The client_code of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._client_code = client_code

    @property
    def client_id(self):
        """Gets the client_id of this CycloneHistoryItem.  # noqa: E501


        :return: The client_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CycloneHistoryItem.


        :param client_id: The client_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def conf_id(self):
        """Gets the conf_id of this CycloneHistoryItem.  # noqa: E501


        :return: The conf_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._conf_id

    @conf_id.setter
    def conf_id(self, conf_id):
        """Sets the conf_id of this CycloneHistoryItem.


        :param conf_id: The conf_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._conf_id = conf_id

    @property
    def conf_name(self):
        """Gets the conf_name of this CycloneHistoryItem.  # noqa: E501


        :return: The conf_name of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._conf_name

    @conf_name.setter
    def conf_name(self, conf_name):
        """Sets the conf_name of this CycloneHistoryItem.


        :param conf_name: The conf_name of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._conf_name = conf_name

    @property
    def created(self):
        """Gets the created of this CycloneHistoryItem.  # noqa: E501


        :return: The created of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CycloneHistoryItem.


        :param created: The created of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def current_count(self):
        """Gets the current_count of this CycloneHistoryItem.  # noqa: E501


        :return: The current_count of this CycloneHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """Sets the current_count of this CycloneHistoryItem.


        :param current_count: The current_count of this CycloneHistoryItem.  # noqa: E501
        :type: int
        """

        self._current_count = current_count

    @property
    def dt_activity(self):
        """Gets the dt_activity of this CycloneHistoryItem.  # noqa: E501


        :return: The dt_activity of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_activity

    @dt_activity.setter
    def dt_activity(self, dt_activity):
        """Sets the dt_activity of this CycloneHistoryItem.


        :param dt_activity: The dt_activity of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """

        self._dt_activity = dt_activity

    @property
    def dt_u(self):
        """Gets the dt_u of this CycloneHistoryItem.  # noqa: E501


        :return: The dt_u of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this CycloneHistoryItem.


        :param dt_u: The dt_u of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def ended(self):
        """Gets the ended of this CycloneHistoryItem.  # noqa: E501


        :return: The ended of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._ended

    @ended.setter
    def ended(self, ended):
        """Sets the ended of this CycloneHistoryItem.


        :param ended: The ended of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """

        self._ended = ended

    @property
    def is_etl(self):
        """Gets the is_etl of this CycloneHistoryItem.  # noqa: E501


        :return: The is_etl of this CycloneHistoryItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_etl

    @is_etl.setter
    def is_etl(self, is_etl):
        """Sets the is_etl of this CycloneHistoryItem.


        :param is_etl: The is_etl of this CycloneHistoryItem.  # noqa: E501
        :type: bool
        """

        self._is_etl = is_etl

    @property
    def messages(self):
        """Gets the messages of this CycloneHistoryItem.  # noqa: E501


        :return: The messages of this CycloneHistoryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this CycloneHistoryItem.


        :param messages: The messages of this CycloneHistoryItem.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def nucleus_client_id(self):
        """Gets the nucleus_client_id of this CycloneHistoryItem.  # noqa: E501


        :return: The nucleus_client_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_client_id

    @nucleus_client_id.setter
    def nucleus_client_id(self, nucleus_client_id):
        """Sets the nucleus_client_id of this CycloneHistoryItem.


        :param nucleus_client_id: The nucleus_client_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._nucleus_client_id = nucleus_client_id

    @property
    def resource_id(self):
        """Gets the resource_id of this CycloneHistoryItem.  # noqa: E501


        :return: The resource_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CycloneHistoryItem.


        :param resource_id: The resource_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this CycloneHistoryItem.  # noqa: E501


        :return: The resource_name of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this CycloneHistoryItem.


        :param resource_name: The resource_name of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def run_time_seconds(self):
        """Gets the run_time_seconds of this CycloneHistoryItem.  # noqa: E501


        :return: The run_time_seconds of this CycloneHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._run_time_seconds

    @run_time_seconds.setter
    def run_time_seconds(self, run_time_seconds):
        """Sets the run_time_seconds of this CycloneHistoryItem.


        :param run_time_seconds: The run_time_seconds of this CycloneHistoryItem.  # noqa: E501
        :type: float
        """

        self._run_time_seconds = run_time_seconds

    @property
    def server_id(self):
        """Gets the server_id of this CycloneHistoryItem.  # noqa: E501


        :return: The server_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this CycloneHistoryItem.


        :param server_id: The server_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")  # noqa: E501

        self._server_id = server_id

    @property
    def server_name(self):
        """Gets the server_name of this CycloneHistoryItem.  # noqa: E501


        :return: The server_name of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this CycloneHistoryItem.


        :param server_name: The server_name of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def service_id(self):
        """Gets the service_id of this CycloneHistoryItem.  # noqa: E501


        :return: The service_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CycloneHistoryItem.


        :param service_id: The service_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def started(self):
        """Gets the started of this CycloneHistoryItem.  # noqa: E501


        :return: The started of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this CycloneHistoryItem.


        :param started: The started of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this CycloneHistoryItem.  # noqa: E501


        :return: The status of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CycloneHistoryItem.


        :param status: The status of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_dt_u(self):
        """Gets the status_dt_u of this CycloneHistoryItem.  # noqa: E501


        :return: The status_dt_u of this CycloneHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._status_dt_u

    @status_dt_u.setter
    def status_dt_u(self, status_dt_u):
        """Sets the status_dt_u of this CycloneHistoryItem.


        :param status_dt_u: The status_dt_u of this CycloneHistoryItem.  # noqa: E501
        :type: datetime
        """
        if status_dt_u is None:
            raise ValueError("Invalid value for `status_dt_u`, must not be `None`")  # noqa: E501

        self._status_dt_u = status_dt_u

    @property
    def sync_id(self):
        """Gets the sync_id of this CycloneHistoryItem.  # noqa: E501


        :return: The sync_id of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id):
        """Sets the sync_id of this CycloneHistoryItem.


        :param sync_id: The sync_id of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._sync_id = sync_id

    @property
    def total_count(self):
        """Gets the total_count of this CycloneHistoryItem.  # noqa: E501


        :return: The total_count of this CycloneHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this CycloneHistoryItem.


        :param total_count: The total_count of this CycloneHistoryItem.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def type(self):
        """Gets the type of this CycloneHistoryItem.  # noqa: E501


        :return: The type of this CycloneHistoryItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CycloneHistoryItem.


        :param type: The type of this CycloneHistoryItem.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ActivityKeys(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'has_more': 'bool',
        'page': 'int',
        'page_size': 'int',
        'return_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'has_more': 'has_more',
        'page': 'page',
        'page_size': 'page_size',
        'return_count': 'return_count',
        'total_count': 'total_count'
    }

    def __init__(self, has_more=None, page=None, page_size=None, return_count=None, total_count=None):  # noqa: E501
        """ActivityKeys - a model defined in OpenAPI"""  # noqa: E501

        self._has_more = None
        self._page = None
        self._page_size = None
        self._return_count = None
        self._total_count = None
        self.discriminator = None

        if has_more is not None:
            self.has_more = has_more
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size
        if return_count is not None:
            self.return_count = return_count
        if total_count is not None:
            self.total_count = total_count

    @property
    def has_more(self):
        """Gets the has_more of this ActivityKeys.  # noqa: E501


        :return: The has_more of this ActivityKeys.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ActivityKeys.


        :param has_more: The has_more of this ActivityKeys.  # noqa: E501
        :type: bool
        """

        self._has_more = has_more

    @property
    def page(self):
        """Gets the page of this ActivityKeys.  # noqa: E501


        :return: The page of this ActivityKeys.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ActivityKeys.


        :param page: The page of this ActivityKeys.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this ActivityKeys.  # noqa: E501


        :return: The page_size of this ActivityKeys.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ActivityKeys.


        :param page_size: The page_size of this ActivityKeys.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def return_count(self):
        """Gets the return_count of this ActivityKeys.  # noqa: E501


        :return: The return_count of this ActivityKeys.  # noqa: E501
        :rtype: int
        """
        return self._return_count

    @return_count.setter
    def return_count(self, return_count):
        """Sets the return_count of this ActivityKeys.


        :param return_count: The return_count of this ActivityKeys.  # noqa: E501
        :type: int
        """

        self._return_count = return_count

    @property
    def total_count(self):
        """Gets the total_count of this ActivityKeys.  # noqa: E501


        :return: The total_count of this ActivityKeys.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ActivityKeys.


        :param total_count: The total_count of this ActivityKeys.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityKeys):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

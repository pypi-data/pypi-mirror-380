# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientPackageStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dt_activity': 'int',
        'elapsed_time': 'int',
        'final_status': 'str',
        'finished_time': 'int',
        'id': 'str',
        'launch_time': 'int',
        'name': 'str',
        'started_time': 'int',
        'state': 'str'
    }

    attribute_map = {
        'dt_activity': 'dt_activity',
        'elapsed_time': 'elapsed_time',
        'final_status': 'final_status',
        'finished_time': 'finished_time',
        'id': 'id',
        'launch_time': 'launch_time',
        'name': 'name',
        'started_time': 'started_time',
        'state': 'state'
    }

    def __init__(self, dt_activity=None, elapsed_time=None, final_status=None, finished_time=None, id=None, launch_time=None, name=None, started_time=None, state=None):  # noqa: E501
        """ClientPackageStatus - a model defined in OpenAPI"""  # noqa: E501

        self._dt_activity = None
        self._elapsed_time = None
        self._final_status = None
        self._finished_time = None
        self._id = None
        self._launch_time = None
        self._name = None
        self._started_time = None
        self._state = None
        self.discriminator = None

        if dt_activity is not None:
            self.dt_activity = dt_activity
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if final_status is not None:
            self.final_status = final_status
        if finished_time is not None:
            self.finished_time = finished_time
        if id is not None:
            self.id = id
        if launch_time is not None:
            self.launch_time = launch_time
        if name is not None:
            self.name = name
        if started_time is not None:
            self.started_time = started_time
        if state is not None:
            self.state = state

    @property
    def dt_activity(self):
        """Gets the dt_activity of this ClientPackageStatus.  # noqa: E501


        :return: The dt_activity of this ClientPackageStatus.  # noqa: E501
        :rtype: int
        """
        return self._dt_activity

    @dt_activity.setter
    def dt_activity(self, dt_activity):
        """Sets the dt_activity of this ClientPackageStatus.


        :param dt_activity: The dt_activity of this ClientPackageStatus.  # noqa: E501
        :type: int
        """

        self._dt_activity = dt_activity

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this ClientPackageStatus.  # noqa: E501


        :return: The elapsed_time of this ClientPackageStatus.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this ClientPackageStatus.


        :param elapsed_time: The elapsed_time of this ClientPackageStatus.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def final_status(self):
        """Gets the final_status of this ClientPackageStatus.  # noqa: E501


        :return: The final_status of this ClientPackageStatus.  # noqa: E501
        :rtype: str
        """
        return self._final_status

    @final_status.setter
    def final_status(self, final_status):
        """Sets the final_status of this ClientPackageStatus.


        :param final_status: The final_status of this ClientPackageStatus.  # noqa: E501
        :type: str
        """

        self._final_status = final_status

    @property
    def finished_time(self):
        """Gets the finished_time of this ClientPackageStatus.  # noqa: E501


        :return: The finished_time of this ClientPackageStatus.  # noqa: E501
        :rtype: int
        """
        return self._finished_time

    @finished_time.setter
    def finished_time(self, finished_time):
        """Sets the finished_time of this ClientPackageStatus.


        :param finished_time: The finished_time of this ClientPackageStatus.  # noqa: E501
        :type: int
        """

        self._finished_time = finished_time

    @property
    def id(self):
        """Gets the id of this ClientPackageStatus.  # noqa: E501


        :return: The id of this ClientPackageStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientPackageStatus.


        :param id: The id of this ClientPackageStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def launch_time(self):
        """Gets the launch_time of this ClientPackageStatus.  # noqa: E501


        :return: The launch_time of this ClientPackageStatus.  # noqa: E501
        :rtype: int
        """
        return self._launch_time

    @launch_time.setter
    def launch_time(self, launch_time):
        """Sets the launch_time of this ClientPackageStatus.


        :param launch_time: The launch_time of this ClientPackageStatus.  # noqa: E501
        :type: int
        """

        self._launch_time = launch_time

    @property
    def name(self):
        """Gets the name of this ClientPackageStatus.  # noqa: E501


        :return: The name of this ClientPackageStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientPackageStatus.


        :param name: The name of this ClientPackageStatus.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def started_time(self):
        """Gets the started_time of this ClientPackageStatus.  # noqa: E501


        :return: The started_time of this ClientPackageStatus.  # noqa: E501
        :rtype: int
        """
        return self._started_time

    @started_time.setter
    def started_time(self, started_time):
        """Sets the started_time of this ClientPackageStatus.


        :param started_time: The started_time of this ClientPackageStatus.  # noqa: E501
        :type: int
        """

        self._started_time = started_time

    @property
    def state(self):
        """Gets the state of this ClientPackageStatus.  # noqa: E501


        :return: The state of this ClientPackageStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientPackageStatus.


        :param state: The state of this ClientPackageStatus.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientPackageStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

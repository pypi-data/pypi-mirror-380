# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneHistorySearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_code': 'str',
        'client_id': 'str',
        'conf_id': 'str',
        'conf_name': 'str',
        'dt_u_sort': 'int',
        'filter_dt_u_begin': 'datetime',
        'filter_dt_u_end': 'datetime',
        'filter_issues': 'bool',
        'id': 'str',
        'limit': 'int',
        'nucleus_client_id': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'server_id': 'str',
        'server_name': 'str',
        'service_id': 'str',
        'status': 'str',
        'sync_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'client_code': 'client_code',
        'client_id': 'client_id',
        'conf_id': 'conf_id',
        'conf_name': 'conf_name',
        'dt_u_sort': 'dt_u_sort',
        'filter_dt_u_begin': 'filter_dt_u_begin',
        'filter_dt_u_end': 'filter_dt_u_end',
        'filter_issues': 'filter_issues',
        'id': 'id',
        'limit': 'limit',
        'nucleus_client_id': 'nucleus_client_id',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'server_id': 'server_id',
        'server_name': 'server_name',
        'service_id': 'service_id',
        'status': 'status',
        'sync_id': 'sync_id',
        'type': 'type'
    }

    def __init__(self, client_code=None, client_id=None, conf_id=None, conf_name=None, dt_u_sort=None, filter_dt_u_begin=None, filter_dt_u_end=None, filter_issues=None, id=None, limit=None, nucleus_client_id=None, resource_id=None, resource_name=None, server_id=None, server_name=None, service_id=None, status=None, sync_id=None, type=None):  # noqa: E501
        """CycloneHistorySearch - a model defined in OpenAPI"""  # noqa: E501

        self._client_code = None
        self._client_id = None
        self._conf_id = None
        self._conf_name = None
        self._dt_u_sort = None
        self._filter_dt_u_begin = None
        self._filter_dt_u_end = None
        self._filter_issues = None
        self._id = None
        self._limit = None
        self._nucleus_client_id = None
        self._resource_id = None
        self._resource_name = None
        self._server_id = None
        self._server_name = None
        self._service_id = None
        self._status = None
        self._sync_id = None
        self._type = None
        self.discriminator = None

        if client_code is not None:
            self.client_code = client_code
        if client_id is not None:
            self.client_id = client_id
        if conf_id is not None:
            self.conf_id = conf_id
        if conf_name is not None:
            self.conf_name = conf_name
        if dt_u_sort is not None:
            self.dt_u_sort = dt_u_sort
        if filter_dt_u_begin is not None:
            self.filter_dt_u_begin = filter_dt_u_begin
        if filter_dt_u_end is not None:
            self.filter_dt_u_end = filter_dt_u_end
        if filter_issues is not None:
            self.filter_issues = filter_issues
        if id is not None:
            self.id = id
        if limit is not None:
            self.limit = limit
        if nucleus_client_id is not None:
            self.nucleus_client_id = nucleus_client_id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if server_id is not None:
            self.server_id = server_id
        if server_name is not None:
            self.server_name = server_name
        if service_id is not None:
            self.service_id = service_id
        if status is not None:
            self.status = status
        if sync_id is not None:
            self.sync_id = sync_id
        if type is not None:
            self.type = type

    @property
    def client_code(self):
        """Gets the client_code of this CycloneHistorySearch.  # noqa: E501


        :return: The client_code of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this CycloneHistorySearch.


        :param client_code: The client_code of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._client_code = client_code

    @property
    def client_id(self):
        """Gets the client_id of this CycloneHistorySearch.  # noqa: E501


        :return: The client_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CycloneHistorySearch.


        :param client_id: The client_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def conf_id(self):
        """Gets the conf_id of this CycloneHistorySearch.  # noqa: E501


        :return: The conf_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._conf_id

    @conf_id.setter
    def conf_id(self, conf_id):
        """Sets the conf_id of this CycloneHistorySearch.


        :param conf_id: The conf_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._conf_id = conf_id

    @property
    def conf_name(self):
        """Gets the conf_name of this CycloneHistorySearch.  # noqa: E501


        :return: The conf_name of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._conf_name

    @conf_name.setter
    def conf_name(self, conf_name):
        """Sets the conf_name of this CycloneHistorySearch.


        :param conf_name: The conf_name of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._conf_name = conf_name

    @property
    def dt_u_sort(self):
        """Gets the dt_u_sort of this CycloneHistorySearch.  # noqa: E501


        :return: The dt_u_sort of this CycloneHistorySearch.  # noqa: E501
        :rtype: int
        """
        return self._dt_u_sort

    @dt_u_sort.setter
    def dt_u_sort(self, dt_u_sort):
        """Sets the dt_u_sort of this CycloneHistorySearch.


        :param dt_u_sort: The dt_u_sort of this CycloneHistorySearch.  # noqa: E501
        :type: int
        """

        self._dt_u_sort = dt_u_sort

    @property
    def filter_dt_u_begin(self):
        """Gets the filter_dt_u_begin of this CycloneHistorySearch.  # noqa: E501


        :return: The filter_dt_u_begin of this CycloneHistorySearch.  # noqa: E501
        :rtype: datetime
        """
        return self._filter_dt_u_begin

    @filter_dt_u_begin.setter
    def filter_dt_u_begin(self, filter_dt_u_begin):
        """Sets the filter_dt_u_begin of this CycloneHistorySearch.


        :param filter_dt_u_begin: The filter_dt_u_begin of this CycloneHistorySearch.  # noqa: E501
        :type: datetime
        """

        self._filter_dt_u_begin = filter_dt_u_begin

    @property
    def filter_dt_u_end(self):
        """Gets the filter_dt_u_end of this CycloneHistorySearch.  # noqa: E501


        :return: The filter_dt_u_end of this CycloneHistorySearch.  # noqa: E501
        :rtype: datetime
        """
        return self._filter_dt_u_end

    @filter_dt_u_end.setter
    def filter_dt_u_end(self, filter_dt_u_end):
        """Sets the filter_dt_u_end of this CycloneHistorySearch.


        :param filter_dt_u_end: The filter_dt_u_end of this CycloneHistorySearch.  # noqa: E501
        :type: datetime
        """

        self._filter_dt_u_end = filter_dt_u_end

    @property
    def filter_issues(self):
        """Gets the filter_issues of this CycloneHistorySearch.  # noqa: E501


        :return: The filter_issues of this CycloneHistorySearch.  # noqa: E501
        :rtype: bool
        """
        return self._filter_issues

    @filter_issues.setter
    def filter_issues(self, filter_issues):
        """Sets the filter_issues of this CycloneHistorySearch.


        :param filter_issues: The filter_issues of this CycloneHistorySearch.  # noqa: E501
        :type: bool
        """

        self._filter_issues = filter_issues

    @property
    def id(self):
        """Gets the id of this CycloneHistorySearch.  # noqa: E501


        :return: The id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CycloneHistorySearch.


        :param id: The id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this CycloneHistorySearch.  # noqa: E501


        :return: The limit of this CycloneHistorySearch.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CycloneHistorySearch.


        :param limit: The limit of this CycloneHistorySearch.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def nucleus_client_id(self):
        """Gets the nucleus_client_id of this CycloneHistorySearch.  # noqa: E501


        :return: The nucleus_client_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._nucleus_client_id

    @nucleus_client_id.setter
    def nucleus_client_id(self, nucleus_client_id):
        """Sets the nucleus_client_id of this CycloneHistorySearch.


        :param nucleus_client_id: The nucleus_client_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._nucleus_client_id = nucleus_client_id

    @property
    def resource_id(self):
        """Gets the resource_id of this CycloneHistorySearch.  # noqa: E501


        :return: The resource_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CycloneHistorySearch.


        :param resource_id: The resource_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this CycloneHistorySearch.  # noqa: E501


        :return: The resource_name of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this CycloneHistorySearch.


        :param resource_name: The resource_name of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def server_id(self):
        """Gets the server_id of this CycloneHistorySearch.  # noqa: E501


        :return: The server_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this CycloneHistorySearch.


        :param server_id: The server_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._server_id = server_id

    @property
    def server_name(self):
        """Gets the server_name of this CycloneHistorySearch.  # noqa: E501


        :return: The server_name of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this CycloneHistorySearch.


        :param server_name: The server_name of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def service_id(self):
        """Gets the service_id of this CycloneHistorySearch.  # noqa: E501


        :return: The service_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CycloneHistorySearch.


        :param service_id: The service_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def status(self):
        """Gets the status of this CycloneHistorySearch.  # noqa: E501


        :return: The status of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CycloneHistorySearch.


        :param status: The status of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def sync_id(self):
        """Gets the sync_id of this CycloneHistorySearch.  # noqa: E501


        :return: The sync_id of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id):
        """Sets the sync_id of this CycloneHistorySearch.


        :param sync_id: The sync_id of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._sync_id = sync_id

    @property
    def type(self):
        """Gets the type of this CycloneHistorySearch.  # noqa: E501


        :return: The type of this CycloneHistorySearch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CycloneHistorySearch.


        :param type: The type of this CycloneHistorySearch.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneHistorySearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

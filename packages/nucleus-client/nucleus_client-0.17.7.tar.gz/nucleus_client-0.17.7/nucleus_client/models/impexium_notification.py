# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ImpexiumNotification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'customer_id': 'str',
        'customer_type': 'str',
        'email_address': 'str',
        'first_name': 'str',
        'full_name': 'str',
        'invoice_number': 'str',
        'item_price': 'float',
        'last_name': 'str',
        'order_number': 'str',
        'parent_product_code': 'str',
        'product_code': 'str',
        'product_name': 'str',
        'product_type': 'str',
        'quantity': 'int',
        'record_number': 'str'
    }

    attribute_map = {
        'action': 'Action',
        'customer_id': 'CustomerId',
        'customer_type': 'CustomerType',
        'email_address': 'EmailAddress',
        'first_name': 'FirstName',
        'full_name': 'FullName',
        'invoice_number': 'InvoiceNumber',
        'item_price': 'ItemPrice',
        'last_name': 'LastName',
        'order_number': 'OrderNumber',
        'parent_product_code': 'ParentProductCode',
        'product_code': 'ProductCode',
        'product_name': 'ProductName',
        'product_type': 'ProductType',
        'quantity': 'Quantity',
        'record_number': 'RecordNumber'
    }

    def __init__(self, action=None, customer_id=None, customer_type=None, email_address=None, first_name=None, full_name=None, invoice_number=None, item_price=None, last_name=None, order_number=None, parent_product_code=None, product_code=None, product_name=None, product_type=None, quantity=None, record_number=None):  # noqa: E501
        """ImpexiumNotification - a model defined in OpenAPI"""  # noqa: E501

        self._action = None
        self._customer_id = None
        self._customer_type = None
        self._email_address = None
        self._first_name = None
        self._full_name = None
        self._invoice_number = None
        self._item_price = None
        self._last_name = None
        self._order_number = None
        self._parent_product_code = None
        self._product_code = None
        self._product_name = None
        self._product_type = None
        self._quantity = None
        self._record_number = None
        self.discriminator = None

        self.action = action
        self.customer_id = customer_id
        self.customer_type = customer_type
        self.email_address = email_address
        self.first_name = first_name
        self.full_name = full_name
        self.invoice_number = invoice_number
        self.item_price = item_price
        self.last_name = last_name
        self.order_number = order_number
        if parent_product_code is not None:
            self.parent_product_code = parent_product_code
        self.product_code = product_code
        self.product_name = product_name
        self.product_type = product_type
        self.quantity = quantity
        self.record_number = record_number

    @property
    def action(self):
        """Gets the action of this ImpexiumNotification.  # noqa: E501


        :return: The action of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ImpexiumNotification.


        :param action: The action of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def customer_id(self):
        """Gets the customer_id of this ImpexiumNotification.  # noqa: E501


        :return: The customer_id of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ImpexiumNotification.


        :param customer_id: The customer_id of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def customer_type(self):
        """Gets the customer_type of this ImpexiumNotification.  # noqa: E501


        :return: The customer_type of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this ImpexiumNotification.


        :param customer_type: The customer_type of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if customer_type is None:
            raise ValueError("Invalid value for `customer_type`, must not be `None`")  # noqa: E501

        self._customer_type = customer_type

    @property
    def email_address(self):
        """Gets the email_address of this ImpexiumNotification.  # noqa: E501


        :return: The email_address of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this ImpexiumNotification.


        :param email_address: The email_address of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this ImpexiumNotification.  # noqa: E501


        :return: The first_name of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ImpexiumNotification.


        :param first_name: The first_name of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this ImpexiumNotification.  # noqa: E501


        :return: The full_name of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ImpexiumNotification.


        :param full_name: The full_name of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ImpexiumNotification.  # noqa: E501


        :return: The invoice_number of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ImpexiumNotification.


        :param invoice_number: The invoice_number of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")  # noqa: E501

        self._invoice_number = invoice_number

    @property
    def item_price(self):
        """Gets the item_price of this ImpexiumNotification.  # noqa: E501


        :return: The item_price of this ImpexiumNotification.  # noqa: E501
        :rtype: float
        """
        return self._item_price

    @item_price.setter
    def item_price(self, item_price):
        """Sets the item_price of this ImpexiumNotification.


        :param item_price: The item_price of this ImpexiumNotification.  # noqa: E501
        :type: float
        """
        if item_price is None:
            raise ValueError("Invalid value for `item_price`, must not be `None`")  # noqa: E501

        self._item_price = item_price

    @property
    def last_name(self):
        """Gets the last_name of this ImpexiumNotification.  # noqa: E501


        :return: The last_name of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ImpexiumNotification.


        :param last_name: The last_name of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def order_number(self):
        """Gets the order_number of this ImpexiumNotification.  # noqa: E501


        :return: The order_number of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ImpexiumNotification.


        :param order_number: The order_number of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")  # noqa: E501

        self._order_number = order_number

    @property
    def parent_product_code(self):
        """Gets the parent_product_code of this ImpexiumNotification.  # noqa: E501


        :return: The parent_product_code of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._parent_product_code

    @parent_product_code.setter
    def parent_product_code(self, parent_product_code):
        """Sets the parent_product_code of this ImpexiumNotification.


        :param parent_product_code: The parent_product_code of this ImpexiumNotification.  # noqa: E501
        :type: str
        """

        self._parent_product_code = parent_product_code

    @property
    def product_code(self):
        """Gets the product_code of this ImpexiumNotification.  # noqa: E501


        :return: The product_code of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ImpexiumNotification.


        :param product_code: The product_code of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def product_name(self):
        """Gets the product_name of this ImpexiumNotification.  # noqa: E501


        :return: The product_name of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this ImpexiumNotification.


        :param product_name: The product_name of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501

        self._product_name = product_name

    @property
    def product_type(self):
        """Gets the product_type of this ImpexiumNotification.  # noqa: E501


        :return: The product_type of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this ImpexiumNotification.


        :param product_type: The product_type of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def quantity(self):
        """Gets the quantity of this ImpexiumNotification.  # noqa: E501


        :return: The quantity of this ImpexiumNotification.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ImpexiumNotification.


        :param quantity: The quantity of this ImpexiumNotification.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def record_number(self):
        """Gets the record_number of this ImpexiumNotification.  # noqa: E501


        :return: The record_number of this ImpexiumNotification.  # noqa: E501
        :rtype: str
        """
        return self._record_number

    @record_number.setter
    def record_number(self, record_number):
        """Sets the record_number of this ImpexiumNotification.


        :param record_number: The record_number of this ImpexiumNotification.  # noqa: E501
        :type: str
        """
        if record_number is None:
            raise ValueError("Invalid value for `record_number`, must not be `None`")  # noqa: E501

        self._record_number = record_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImpexiumNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

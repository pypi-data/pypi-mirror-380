# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneServerLogSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete': 'bool',
        'enabled': 'bool',
        'location': 'str',
        'name': 'str',
        'span': 'bool',
        'starts_with_date': 'bool',
        'use_latest': 'bool'
    }

    attribute_map = {
        'delete': 'delete',
        'enabled': 'enabled',
        'location': 'location',
        'name': 'name',
        'span': 'span',
        'starts_with_date': 'starts_with_date',
        'use_latest': 'use_latest'
    }

    def __init__(self, delete=None, enabled=None, location=None, name=None, span=None, starts_with_date=None, use_latest=None):  # noqa: E501
        """CycloneServerLogSettings - a model defined in OpenAPI"""  # noqa: E501

        self._delete = None
        self._enabled = None
        self._location = None
        self._name = None
        self._span = None
        self._starts_with_date = None
        self._use_latest = None
        self.discriminator = None

        if delete is not None:
            self.delete = delete
        if enabled is not None:
            self.enabled = enabled
        self.location = location
        self.name = name
        if span is not None:
            self.span = span
        if starts_with_date is not None:
            self.starts_with_date = starts_with_date
        if use_latest is not None:
            self.use_latest = use_latest

    @property
    def delete(self):
        """Gets the delete of this CycloneServerLogSettings.  # noqa: E501


        :return: The delete of this CycloneServerLogSettings.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CycloneServerLogSettings.


        :param delete: The delete of this CycloneServerLogSettings.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def enabled(self):
        """Gets the enabled of this CycloneServerLogSettings.  # noqa: E501


        :return: The enabled of this CycloneServerLogSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CycloneServerLogSettings.


        :param enabled: The enabled of this CycloneServerLogSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def location(self):
        """Gets the location of this CycloneServerLogSettings.  # noqa: E501


        :return: The location of this CycloneServerLogSettings.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CycloneServerLogSettings.


        :param location: The location of this CycloneServerLogSettings.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def name(self):
        """Gets the name of this CycloneServerLogSettings.  # noqa: E501


        :return: The name of this CycloneServerLogSettings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CycloneServerLogSettings.


        :param name: The name of this CycloneServerLogSettings.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def span(self):
        """Gets the span of this CycloneServerLogSettings.  # noqa: E501


        :return: The span of this CycloneServerLogSettings.  # noqa: E501
        :rtype: bool
        """
        return self._span

    @span.setter
    def span(self, span):
        """Sets the span of this CycloneServerLogSettings.


        :param span: The span of this CycloneServerLogSettings.  # noqa: E501
        :type: bool
        """

        self._span = span

    @property
    def starts_with_date(self):
        """Gets the starts_with_date of this CycloneServerLogSettings.  # noqa: E501


        :return: The starts_with_date of this CycloneServerLogSettings.  # noqa: E501
        :rtype: bool
        """
        return self._starts_with_date

    @starts_with_date.setter
    def starts_with_date(self, starts_with_date):
        """Sets the starts_with_date of this CycloneServerLogSettings.


        :param starts_with_date: The starts_with_date of this CycloneServerLogSettings.  # noqa: E501
        :type: bool
        """

        self._starts_with_date = starts_with_date

    @property
    def use_latest(self):
        """Gets the use_latest of this CycloneServerLogSettings.  # noqa: E501


        :return: The use_latest of this CycloneServerLogSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_latest

    @use_latest.setter
    def use_latest(self, use_latest):
        """Sets the use_latest of this CycloneServerLogSettings.


        :param use_latest: The use_latest of this CycloneServerLogSettings.  # noqa: E501
        :type: bool
        """

        self._use_latest = use_latest

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneServerLogSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

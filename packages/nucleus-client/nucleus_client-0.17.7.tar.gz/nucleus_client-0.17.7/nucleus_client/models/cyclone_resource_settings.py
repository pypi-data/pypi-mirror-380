# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneResourceSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'csv_location': 'str',
        'csv_s3_bucket': 'str',
        'csv_s3_prefix': 'str',
        'csv_transforms': 'dict(str, object)',
        'sql_config': 'CycloneSqlResource',
        'sql_file_others': 'str',
        'sql_file_text': 'str'
    }

    attribute_map = {
        'csv_location': 'csv_location',
        'csv_s3_bucket': 'csv_s3_bucket',
        'csv_s3_prefix': 'csv_s3_prefix',
        'csv_transforms': 'csv_transforms',
        'sql_config': 'sql_config',
        'sql_file_others': 'sql_file_others',
        'sql_file_text': 'sql_file_text'
    }

    def __init__(self, csv_location=None, csv_s3_bucket=None, csv_s3_prefix=None, csv_transforms=None, sql_config=None, sql_file_others=None, sql_file_text=None):  # noqa: E501
        """CycloneResourceSettings - a model defined in OpenAPI"""  # noqa: E501

        self._csv_location = None
        self._csv_s3_bucket = None
        self._csv_s3_prefix = None
        self._csv_transforms = None
        self._sql_config = None
        self._sql_file_others = None
        self._sql_file_text = None
        self.discriminator = None

        if csv_location is not None:
            self.csv_location = csv_location
        if csv_s3_bucket is not None:
            self.csv_s3_bucket = csv_s3_bucket
        if csv_s3_prefix is not None:
            self.csv_s3_prefix = csv_s3_prefix
        if csv_transforms is not None:
            self.csv_transforms = csv_transforms
        if sql_config is not None:
            self.sql_config = sql_config
        if sql_file_others is not None:
            self.sql_file_others = sql_file_others
        if sql_file_text is not None:
            self.sql_file_text = sql_file_text

    @property
    def csv_location(self):
        """Gets the csv_location of this CycloneResourceSettings.  # noqa: E501


        :return: The csv_location of this CycloneResourceSettings.  # noqa: E501
        :rtype: str
        """
        return self._csv_location

    @csv_location.setter
    def csv_location(self, csv_location):
        """Sets the csv_location of this CycloneResourceSettings.


        :param csv_location: The csv_location of this CycloneResourceSettings.  # noqa: E501
        :type: str
        """

        self._csv_location = csv_location

    @property
    def csv_s3_bucket(self):
        """Gets the csv_s3_bucket of this CycloneResourceSettings.  # noqa: E501


        :return: The csv_s3_bucket of this CycloneResourceSettings.  # noqa: E501
        :rtype: str
        """
        return self._csv_s3_bucket

    @csv_s3_bucket.setter
    def csv_s3_bucket(self, csv_s3_bucket):
        """Sets the csv_s3_bucket of this CycloneResourceSettings.


        :param csv_s3_bucket: The csv_s3_bucket of this CycloneResourceSettings.  # noqa: E501
        :type: str
        """

        self._csv_s3_bucket = csv_s3_bucket

    @property
    def csv_s3_prefix(self):
        """Gets the csv_s3_prefix of this CycloneResourceSettings.  # noqa: E501


        :return: The csv_s3_prefix of this CycloneResourceSettings.  # noqa: E501
        :rtype: str
        """
        return self._csv_s3_prefix

    @csv_s3_prefix.setter
    def csv_s3_prefix(self, csv_s3_prefix):
        """Sets the csv_s3_prefix of this CycloneResourceSettings.


        :param csv_s3_prefix: The csv_s3_prefix of this CycloneResourceSettings.  # noqa: E501
        :type: str
        """

        self._csv_s3_prefix = csv_s3_prefix

    @property
    def csv_transforms(self):
        """Gets the csv_transforms of this CycloneResourceSettings.  # noqa: E501


        :return: The csv_transforms of this CycloneResourceSettings.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._csv_transforms

    @csv_transforms.setter
    def csv_transforms(self, csv_transforms):
        """Sets the csv_transforms of this CycloneResourceSettings.


        :param csv_transforms: The csv_transforms of this CycloneResourceSettings.  # noqa: E501
        :type: dict(str, object)
        """

        self._csv_transforms = csv_transforms

    @property
    def sql_config(self):
        """Gets the sql_config of this CycloneResourceSettings.  # noqa: E501


        :return: The sql_config of this CycloneResourceSettings.  # noqa: E501
        :rtype: CycloneSqlResource
        """
        return self._sql_config

    @sql_config.setter
    def sql_config(self, sql_config):
        """Sets the sql_config of this CycloneResourceSettings.


        :param sql_config: The sql_config of this CycloneResourceSettings.  # noqa: E501
        :type: CycloneSqlResource
        """

        self._sql_config = sql_config

    @property
    def sql_file_others(self):
        """Gets the sql_file_others of this CycloneResourceSettings.  # noqa: E501


        :return: The sql_file_others of this CycloneResourceSettings.  # noqa: E501
        :rtype: str
        """
        return self._sql_file_others

    @sql_file_others.setter
    def sql_file_others(self, sql_file_others):
        """Sets the sql_file_others of this CycloneResourceSettings.


        :param sql_file_others: The sql_file_others of this CycloneResourceSettings.  # noqa: E501
        :type: str
        """

        self._sql_file_others = sql_file_others

    @property
    def sql_file_text(self):
        """Gets the sql_file_text of this CycloneResourceSettings.  # noqa: E501


        :return: The sql_file_text of this CycloneResourceSettings.  # noqa: E501
        :rtype: str
        """
        return self._sql_file_text

    @sql_file_text.setter
    def sql_file_text(self, sql_file_text):
        """Sets the sql_file_text of this CycloneResourceSettings.


        :param sql_file_text: The sql_file_text of this CycloneResourceSettings.  # noqa: E501
        :type: str
        """

        self._sql_file_text = sql_file_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneResourceSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

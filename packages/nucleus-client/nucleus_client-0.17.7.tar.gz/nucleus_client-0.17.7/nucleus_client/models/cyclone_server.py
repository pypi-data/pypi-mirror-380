# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneServer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'debug': 'bool',
        'description': 'str',
        'disabled_wait_secs': 'int',
        'dt_u': 'datetime',
        'enable_log_requests': 'bool',
        'error_wait_secs': 'int',
        'etl_settings': 'CycloneServerEtlSettings',
        'last_request': 'datetime',
        'location': 'str',
        'log_retention_days': 'int',
        'max_clients': 'int',
        'name': 'str',
        'ping_delay_seconds': 'int',
        'require_encryption': 'bool',
        'service_id': 'str',
        'settings_wait_secs': 'int',
        'status': 'str',
        'status_dt_u': 'datetime',
        'update_at': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'id': '_id',
        'debug': 'debug',
        'description': 'description',
        'disabled_wait_secs': 'disabled_wait_secs',
        'dt_u': 'dt_u',
        'enable_log_requests': 'enable_log_requests',
        'error_wait_secs': 'error_wait_secs',
        'etl_settings': 'etl_settings',
        'last_request': 'last_request',
        'location': 'location',
        'log_retention_days': 'log_retention_days',
        'max_clients': 'max_clients',
        'name': 'name',
        'ping_delay_seconds': 'ping_delay_seconds',
        'require_encryption': 'require_encryption',
        'service_id': 'service_id',
        'settings_wait_secs': 'settings_wait_secs',
        'status': 'status',
        'status_dt_u': 'status_dt_u',
        'update_at': 'update_at',
        'version': 'version'
    }

    def __init__(self, id=None, debug=None, description=None, disabled_wait_secs=None, dt_u=None, enable_log_requests=None, error_wait_secs=None, etl_settings=None, last_request=None, location=None, log_retention_days=None, max_clients=None, name=None, ping_delay_seconds=None, require_encryption=None, service_id=None, settings_wait_secs=None, status=None, status_dt_u=None, update_at=None, version=None):  # noqa: E501
        """CycloneServer - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._debug = None
        self._description = None
        self._disabled_wait_secs = None
        self._dt_u = None
        self._enable_log_requests = None
        self._error_wait_secs = None
        self._etl_settings = None
        self._last_request = None
        self._location = None
        self._log_retention_days = None
        self._max_clients = None
        self._name = None
        self._ping_delay_seconds = None
        self._require_encryption = None
        self._service_id = None
        self._settings_wait_secs = None
        self._status = None
        self._status_dt_u = None
        self._update_at = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if debug is not None:
            self.debug = debug
        if description is not None:
            self.description = description
        if disabled_wait_secs is not None:
            self.disabled_wait_secs = disabled_wait_secs
        if dt_u is not None:
            self.dt_u = dt_u
        if enable_log_requests is not None:
            self.enable_log_requests = enable_log_requests
        if error_wait_secs is not None:
            self.error_wait_secs = error_wait_secs
        self.etl_settings = etl_settings
        if last_request is not None:
            self.last_request = last_request
        if location is not None:
            self.location = location
        if log_retention_days is not None:
            self.log_retention_days = log_retention_days
        self.max_clients = max_clients
        self.name = name
        if ping_delay_seconds is not None:
            self.ping_delay_seconds = ping_delay_seconds
        self.require_encryption = require_encryption
        self.service_id = service_id
        if settings_wait_secs is not None:
            self.settings_wait_secs = settings_wait_secs
        if status is not None:
            self.status = status
        if status_dt_u is not None:
            self.status_dt_u = status_dt_u
        if update_at is not None:
            self.update_at = update_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this CycloneServer.  # noqa: E501


        :return: The id of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CycloneServer.


        :param id: The id of this CycloneServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def debug(self):
        """Gets the debug of this CycloneServer.  # noqa: E501


        :return: The debug of this CycloneServer.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this CycloneServer.


        :param debug: The debug of this CycloneServer.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def description(self):
        """Gets the description of this CycloneServer.  # noqa: E501


        :return: The description of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CycloneServer.


        :param description: The description of this CycloneServer.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled_wait_secs(self):
        """Gets the disabled_wait_secs of this CycloneServer.  # noqa: E501


        :return: The disabled_wait_secs of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._disabled_wait_secs

    @disabled_wait_secs.setter
    def disabled_wait_secs(self, disabled_wait_secs):
        """Sets the disabled_wait_secs of this CycloneServer.


        :param disabled_wait_secs: The disabled_wait_secs of this CycloneServer.  # noqa: E501
        :type: int
        """

        self._disabled_wait_secs = disabled_wait_secs

    @property
    def dt_u(self):
        """Gets the dt_u of this CycloneServer.  # noqa: E501


        :return: The dt_u of this CycloneServer.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this CycloneServer.


        :param dt_u: The dt_u of this CycloneServer.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def enable_log_requests(self):
        """Gets the enable_log_requests of this CycloneServer.  # noqa: E501


        :return: The enable_log_requests of this CycloneServer.  # noqa: E501
        :rtype: bool
        """
        return self._enable_log_requests

    @enable_log_requests.setter
    def enable_log_requests(self, enable_log_requests):
        """Sets the enable_log_requests of this CycloneServer.


        :param enable_log_requests: The enable_log_requests of this CycloneServer.  # noqa: E501
        :type: bool
        """

        self._enable_log_requests = enable_log_requests

    @property
    def error_wait_secs(self):
        """Gets the error_wait_secs of this CycloneServer.  # noqa: E501


        :return: The error_wait_secs of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._error_wait_secs

    @error_wait_secs.setter
    def error_wait_secs(self, error_wait_secs):
        """Sets the error_wait_secs of this CycloneServer.


        :param error_wait_secs: The error_wait_secs of this CycloneServer.  # noqa: E501
        :type: int
        """

        self._error_wait_secs = error_wait_secs

    @property
    def etl_settings(self):
        """Gets the etl_settings of this CycloneServer.  # noqa: E501


        :return: The etl_settings of this CycloneServer.  # noqa: E501
        :rtype: CycloneServerEtlSettings
        """
        return self._etl_settings

    @etl_settings.setter
    def etl_settings(self, etl_settings):
        """Sets the etl_settings of this CycloneServer.


        :param etl_settings: The etl_settings of this CycloneServer.  # noqa: E501
        :type: CycloneServerEtlSettings
        """
        if etl_settings is None:
            raise ValueError("Invalid value for `etl_settings`, must not be `None`")  # noqa: E501

        self._etl_settings = etl_settings

    @property
    def last_request(self):
        """Gets the last_request of this CycloneServer.  # noqa: E501


        :return: The last_request of this CycloneServer.  # noqa: E501
        :rtype: datetime
        """
        return self._last_request

    @last_request.setter
    def last_request(self, last_request):
        """Sets the last_request of this CycloneServer.


        :param last_request: The last_request of this CycloneServer.  # noqa: E501
        :type: datetime
        """

        self._last_request = last_request

    @property
    def location(self):
        """Gets the location of this CycloneServer.  # noqa: E501


        :return: The location of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CycloneServer.


        :param location: The location of this CycloneServer.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def log_retention_days(self):
        """Gets the log_retention_days of this CycloneServer.  # noqa: E501


        :return: The log_retention_days of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._log_retention_days

    @log_retention_days.setter
    def log_retention_days(self, log_retention_days):
        """Sets the log_retention_days of this CycloneServer.


        :param log_retention_days: The log_retention_days of this CycloneServer.  # noqa: E501
        :type: int
        """

        self._log_retention_days = log_retention_days

    @property
    def max_clients(self):
        """Gets the max_clients of this CycloneServer.  # noqa: E501


        :return: The max_clients of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._max_clients

    @max_clients.setter
    def max_clients(self, max_clients):
        """Sets the max_clients of this CycloneServer.


        :param max_clients: The max_clients of this CycloneServer.  # noqa: E501
        :type: int
        """
        if max_clients is None:
            raise ValueError("Invalid value for `max_clients`, must not be `None`")  # noqa: E501

        self._max_clients = max_clients

    @property
    def name(self):
        """Gets the name of this CycloneServer.  # noqa: E501


        :return: The name of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CycloneServer.


        :param name: The name of this CycloneServer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ping_delay_seconds(self):
        """Gets the ping_delay_seconds of this CycloneServer.  # noqa: E501


        :return: The ping_delay_seconds of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._ping_delay_seconds

    @ping_delay_seconds.setter
    def ping_delay_seconds(self, ping_delay_seconds):
        """Sets the ping_delay_seconds of this CycloneServer.


        :param ping_delay_seconds: The ping_delay_seconds of this CycloneServer.  # noqa: E501
        :type: int
        """

        self._ping_delay_seconds = ping_delay_seconds

    @property
    def require_encryption(self):
        """Gets the require_encryption of this CycloneServer.  # noqa: E501


        :return: The require_encryption of this CycloneServer.  # noqa: E501
        :rtype: bool
        """
        return self._require_encryption

    @require_encryption.setter
    def require_encryption(self, require_encryption):
        """Sets the require_encryption of this CycloneServer.


        :param require_encryption: The require_encryption of this CycloneServer.  # noqa: E501
        :type: bool
        """
        if require_encryption is None:
            raise ValueError("Invalid value for `require_encryption`, must not be `None`")  # noqa: E501

        self._require_encryption = require_encryption

    @property
    def service_id(self):
        """Gets the service_id of this CycloneServer.  # noqa: E501


        :return: The service_id of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this CycloneServer.


        :param service_id: The service_id of this CycloneServer.  # noqa: E501
        :type: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def settings_wait_secs(self):
        """Gets the settings_wait_secs of this CycloneServer.  # noqa: E501


        :return: The settings_wait_secs of this CycloneServer.  # noqa: E501
        :rtype: int
        """
        return self._settings_wait_secs

    @settings_wait_secs.setter
    def settings_wait_secs(self, settings_wait_secs):
        """Sets the settings_wait_secs of this CycloneServer.


        :param settings_wait_secs: The settings_wait_secs of this CycloneServer.  # noqa: E501
        :type: int
        """

        self._settings_wait_secs = settings_wait_secs

    @property
    def status(self):
        """Gets the status of this CycloneServer.  # noqa: E501


        :return: The status of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CycloneServer.


        :param status: The status of this CycloneServer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_dt_u(self):
        """Gets the status_dt_u of this CycloneServer.  # noqa: E501


        :return: The status_dt_u of this CycloneServer.  # noqa: E501
        :rtype: datetime
        """
        return self._status_dt_u

    @status_dt_u.setter
    def status_dt_u(self, status_dt_u):
        """Sets the status_dt_u of this CycloneServer.


        :param status_dt_u: The status_dt_u of this CycloneServer.  # noqa: E501
        :type: datetime
        """

        self._status_dt_u = status_dt_u

    @property
    def update_at(self):
        """Gets the update_at of this CycloneServer.  # noqa: E501


        :return: The update_at of this CycloneServer.  # noqa: E501
        :rtype: datetime
        """
        return self._update_at

    @update_at.setter
    def update_at(self, update_at):
        """Sets the update_at of this CycloneServer.


        :param update_at: The update_at of this CycloneServer.  # noqa: E501
        :type: datetime
        """

        self._update_at = update_at

    @property
    def version(self):
        """Gets the version of this CycloneServer.  # noqa: E501


        :return: The version of this CycloneServer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CycloneServer.


        :param version: The version of this CycloneServer.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

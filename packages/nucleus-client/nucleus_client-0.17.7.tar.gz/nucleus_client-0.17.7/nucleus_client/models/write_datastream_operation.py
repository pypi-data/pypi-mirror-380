# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WriteDatastreamOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'connector': 'str',
        'output_activity_type': 'str',
        'partner_id': 'str',
        'primary_key': 'str',
        'schema': 'JobOperationSchema',
        'schema_id': 'str',
        'stream_name': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'connector': 'connector',
        'output_activity_type': 'output_activity_type',
        'partner_id': 'partner_id',
        'primary_key': 'primary_key',
        'schema': 'schema',
        'schema_id': 'schema_id',
        'stream_name': 'stream_name'
    }

    def __init__(self, client_id=None, connector=None, output_activity_type=None, partner_id=None, primary_key=None, schema=None, schema_id=None, stream_name=None):  # noqa: E501
        """WriteDatastreamOperation - a model defined in OpenAPI"""  # noqa: E501

        self._client_id = None
        self._connector = None
        self._output_activity_type = None
        self._partner_id = None
        self._primary_key = None
        self._schema = None
        self._schema_id = None
        self._stream_name = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if connector is not None:
            self.connector = connector
        if output_activity_type is not None:
            self.output_activity_type = output_activity_type
        if partner_id is not None:
            self.partner_id = partner_id
        if primary_key is not None:
            self.primary_key = primary_key
        if schema is not None:
            self.schema = schema
        if schema_id is not None:
            self.schema_id = schema_id
        if stream_name is not None:
            self.stream_name = stream_name

    @property
    def client_id(self):
        """Gets the client_id of this WriteDatastreamOperation.  # noqa: E501


        :return: The client_id of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this WriteDatastreamOperation.


        :param client_id: The client_id of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def connector(self):
        """Gets the connector of this WriteDatastreamOperation.  # noqa: E501


        :return: The connector of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this WriteDatastreamOperation.


        :param connector: The connector of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._connector = connector

    @property
    def output_activity_type(self):
        """Gets the output_activity_type of this WriteDatastreamOperation.  # noqa: E501


        :return: The output_activity_type of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._output_activity_type

    @output_activity_type.setter
    def output_activity_type(self, output_activity_type):
        """Sets the output_activity_type of this WriteDatastreamOperation.


        :param output_activity_type: The output_activity_type of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._output_activity_type = output_activity_type

    @property
    def partner_id(self):
        """Gets the partner_id of this WriteDatastreamOperation.  # noqa: E501


        :return: The partner_id of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this WriteDatastreamOperation.


        :param partner_id: The partner_id of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def primary_key(self):
        """Gets the primary_key of this WriteDatastreamOperation.  # noqa: E501


        :return: The primary_key of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this WriteDatastreamOperation.


        :param primary_key: The primary_key of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._primary_key = primary_key

    @property
    def schema(self):
        """Gets the schema of this WriteDatastreamOperation.  # noqa: E501


        :return: The schema of this WriteDatastreamOperation.  # noqa: E501
        :rtype: JobOperationSchema
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this WriteDatastreamOperation.


        :param schema: The schema of this WriteDatastreamOperation.  # noqa: E501
        :type: JobOperationSchema
        """

        self._schema = schema

    @property
    def schema_id(self):
        """Gets the schema_id of this WriteDatastreamOperation.  # noqa: E501


        :return: The schema_id of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this WriteDatastreamOperation.


        :param schema_id: The schema_id of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._schema_id = schema_id

    @property
    def stream_name(self):
        """Gets the stream_name of this WriteDatastreamOperation.  # noqa: E501


        :return: The stream_name of this WriteDatastreamOperation.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this WriteDatastreamOperation.


        :param stream_name: The stream_name of this WriteDatastreamOperation.  # noqa: E501
        :type: str
        """

        self._stream_name = stream_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteDatastreamOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ClientFeatures(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admin_api_keys': 'bool',
        'admin_glossary': 'bool',
        'admin_goals': 'bool',
        'admin_user_self': 'bool',
        'admin_users': 'bool',
        'data_overview': 'bool',
        'data_tables': 'bool',
        'dataset_download': 'bool',
        'dataset_metadata_editor': 'bool',
        'dataset_upload': 'bool',
        'filters': 'bool',
        'glossary': 'bool',
        'glossary_full_access': 'bool',
        'help_button': 'bool',
        'logout': 'bool',
        'nav': 'bool',
        'page_editor': 'bool',
        'print_button': 'bool',
        'save_prefs': 'bool',
        'sql_query': 'bool',
        'sso': 'bool',
        'user_roles': 'bool',
        'user_survey': 'bool',
        'view_admin_page': 'bool',
        'view_data_overview_details': 'bool'
    }

    attribute_map = {
        'admin_api_keys': 'admin_api_keys',
        'admin_glossary': 'admin_glossary',
        'admin_goals': 'admin_goals',
        'admin_user_self': 'admin_user_self',
        'admin_users': 'admin_users',
        'data_overview': 'data_overview',
        'data_tables': 'data_tables',
        'dataset_download': 'dataset_download',
        'dataset_metadata_editor': 'dataset_metadata_editor',
        'dataset_upload': 'dataset_upload',
        'filters': 'filters',
        'glossary': 'glossary',
        'glossary_full_access': 'glossary_full_access',
        'help_button': 'help_button',
        'logout': 'logout',
        'nav': 'nav',
        'page_editor': 'page_editor',
        'print_button': 'print_button',
        'save_prefs': 'save_prefs',
        'sql_query': 'sql_query',
        'sso': 'sso',
        'user_roles': 'user_roles',
        'user_survey': 'user_survey',
        'view_admin_page': 'view_admin_page',
        'view_data_overview_details': 'view_data_overview_details'
    }

    def __init__(self, admin_api_keys=None, admin_glossary=None, admin_goals=None, admin_user_self=None, admin_users=None, data_overview=None, data_tables=None, dataset_download=None, dataset_metadata_editor=None, dataset_upload=None, filters=None, glossary=None, glossary_full_access=None, help_button=None, logout=None, nav=None, page_editor=None, print_button=None, save_prefs=None, sql_query=None, sso=None, user_roles=None, user_survey=None, view_admin_page=None, view_data_overview_details=None):  # noqa: E501
        """ClientFeatures - a model defined in OpenAPI"""  # noqa: E501

        self._admin_api_keys = None
        self._admin_glossary = None
        self._admin_goals = None
        self._admin_user_self = None
        self._admin_users = None
        self._data_overview = None
        self._data_tables = None
        self._dataset_download = None
        self._dataset_metadata_editor = None
        self._dataset_upload = None
        self._filters = None
        self._glossary = None
        self._glossary_full_access = None
        self._help_button = None
        self._logout = None
        self._nav = None
        self._page_editor = None
        self._print_button = None
        self._save_prefs = None
        self._sql_query = None
        self._sso = None
        self._user_roles = None
        self._user_survey = None
        self._view_admin_page = None
        self._view_data_overview_details = None
        self.discriminator = None

        if admin_api_keys is not None:
            self.admin_api_keys = admin_api_keys
        if admin_glossary is not None:
            self.admin_glossary = admin_glossary
        if admin_goals is not None:
            self.admin_goals = admin_goals
        if admin_user_self is not None:
            self.admin_user_self = admin_user_self
        if admin_users is not None:
            self.admin_users = admin_users
        if data_overview is not None:
            self.data_overview = data_overview
        if data_tables is not None:
            self.data_tables = data_tables
        if dataset_download is not None:
            self.dataset_download = dataset_download
        if dataset_metadata_editor is not None:
            self.dataset_metadata_editor = dataset_metadata_editor
        if dataset_upload is not None:
            self.dataset_upload = dataset_upload
        if filters is not None:
            self.filters = filters
        if glossary is not None:
            self.glossary = glossary
        if glossary_full_access is not None:
            self.glossary_full_access = glossary_full_access
        if help_button is not None:
            self.help_button = help_button
        if logout is not None:
            self.logout = logout
        if nav is not None:
            self.nav = nav
        if page_editor is not None:
            self.page_editor = page_editor
        if print_button is not None:
            self.print_button = print_button
        if save_prefs is not None:
            self.save_prefs = save_prefs
        if sql_query is not None:
            self.sql_query = sql_query
        if sso is not None:
            self.sso = sso
        if user_roles is not None:
            self.user_roles = user_roles
        if user_survey is not None:
            self.user_survey = user_survey
        if view_admin_page is not None:
            self.view_admin_page = view_admin_page
        if view_data_overview_details is not None:
            self.view_data_overview_details = view_data_overview_details

    @property
    def admin_api_keys(self):
        """Gets the admin_api_keys of this ClientFeatures.  # noqa: E501


        :return: The admin_api_keys of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._admin_api_keys

    @admin_api_keys.setter
    def admin_api_keys(self, admin_api_keys):
        """Sets the admin_api_keys of this ClientFeatures.


        :param admin_api_keys: The admin_api_keys of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._admin_api_keys = admin_api_keys

    @property
    def admin_glossary(self):
        """Gets the admin_glossary of this ClientFeatures.  # noqa: E501


        :return: The admin_glossary of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._admin_glossary

    @admin_glossary.setter
    def admin_glossary(self, admin_glossary):
        """Sets the admin_glossary of this ClientFeatures.


        :param admin_glossary: The admin_glossary of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._admin_glossary = admin_glossary

    @property
    def admin_goals(self):
        """Gets the admin_goals of this ClientFeatures.  # noqa: E501


        :return: The admin_goals of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._admin_goals

    @admin_goals.setter
    def admin_goals(self, admin_goals):
        """Sets the admin_goals of this ClientFeatures.


        :param admin_goals: The admin_goals of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._admin_goals = admin_goals

    @property
    def admin_user_self(self):
        """Gets the admin_user_self of this ClientFeatures.  # noqa: E501


        :return: The admin_user_self of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._admin_user_self

    @admin_user_self.setter
    def admin_user_self(self, admin_user_self):
        """Sets the admin_user_self of this ClientFeatures.


        :param admin_user_self: The admin_user_self of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._admin_user_self = admin_user_self

    @property
    def admin_users(self):
        """Gets the admin_users of this ClientFeatures.  # noqa: E501


        :return: The admin_users of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._admin_users

    @admin_users.setter
    def admin_users(self, admin_users):
        """Sets the admin_users of this ClientFeatures.


        :param admin_users: The admin_users of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._admin_users = admin_users

    @property
    def data_overview(self):
        """Gets the data_overview of this ClientFeatures.  # noqa: E501


        :return: The data_overview of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._data_overview

    @data_overview.setter
    def data_overview(self, data_overview):
        """Sets the data_overview of this ClientFeatures.


        :param data_overview: The data_overview of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._data_overview = data_overview

    @property
    def data_tables(self):
        """Gets the data_tables of this ClientFeatures.  # noqa: E501


        :return: The data_tables of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._data_tables

    @data_tables.setter
    def data_tables(self, data_tables):
        """Sets the data_tables of this ClientFeatures.


        :param data_tables: The data_tables of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._data_tables = data_tables

    @property
    def dataset_download(self):
        """Gets the dataset_download of this ClientFeatures.  # noqa: E501


        :return: The dataset_download of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._dataset_download

    @dataset_download.setter
    def dataset_download(self, dataset_download):
        """Sets the dataset_download of this ClientFeatures.


        :param dataset_download: The dataset_download of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._dataset_download = dataset_download

    @property
    def dataset_metadata_editor(self):
        """Gets the dataset_metadata_editor of this ClientFeatures.  # noqa: E501


        :return: The dataset_metadata_editor of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._dataset_metadata_editor

    @dataset_metadata_editor.setter
    def dataset_metadata_editor(self, dataset_metadata_editor):
        """Sets the dataset_metadata_editor of this ClientFeatures.


        :param dataset_metadata_editor: The dataset_metadata_editor of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._dataset_metadata_editor = dataset_metadata_editor

    @property
    def dataset_upload(self):
        """Gets the dataset_upload of this ClientFeatures.  # noqa: E501


        :return: The dataset_upload of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._dataset_upload

    @dataset_upload.setter
    def dataset_upload(self, dataset_upload):
        """Sets the dataset_upload of this ClientFeatures.


        :param dataset_upload: The dataset_upload of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._dataset_upload = dataset_upload

    @property
    def filters(self):
        """Gets the filters of this ClientFeatures.  # noqa: E501


        :return: The filters of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ClientFeatures.


        :param filters: The filters of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._filters = filters

    @property
    def glossary(self):
        """Gets the glossary of this ClientFeatures.  # noqa: E501


        :return: The glossary of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._glossary

    @glossary.setter
    def glossary(self, glossary):
        """Sets the glossary of this ClientFeatures.


        :param glossary: The glossary of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._glossary = glossary

    @property
    def glossary_full_access(self):
        """Gets the glossary_full_access of this ClientFeatures.  # noqa: E501


        :return: The glossary_full_access of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._glossary_full_access

    @glossary_full_access.setter
    def glossary_full_access(self, glossary_full_access):
        """Sets the glossary_full_access of this ClientFeatures.


        :param glossary_full_access: The glossary_full_access of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._glossary_full_access = glossary_full_access

    @property
    def help_button(self):
        """Gets the help_button of this ClientFeatures.  # noqa: E501


        :return: The help_button of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._help_button

    @help_button.setter
    def help_button(self, help_button):
        """Sets the help_button of this ClientFeatures.


        :param help_button: The help_button of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._help_button = help_button

    @property
    def logout(self):
        """Gets the logout of this ClientFeatures.  # noqa: E501


        :return: The logout of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this ClientFeatures.


        :param logout: The logout of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._logout = logout

    @property
    def nav(self):
        """Gets the nav of this ClientFeatures.  # noqa: E501


        :return: The nav of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this ClientFeatures.


        :param nav: The nav of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._nav = nav

    @property
    def page_editor(self):
        """Gets the page_editor of this ClientFeatures.  # noqa: E501


        :return: The page_editor of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._page_editor

    @page_editor.setter
    def page_editor(self, page_editor):
        """Sets the page_editor of this ClientFeatures.


        :param page_editor: The page_editor of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._page_editor = page_editor

    @property
    def print_button(self):
        """Gets the print_button of this ClientFeatures.  # noqa: E501


        :return: The print_button of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._print_button

    @print_button.setter
    def print_button(self, print_button):
        """Sets the print_button of this ClientFeatures.


        :param print_button: The print_button of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._print_button = print_button

    @property
    def save_prefs(self):
        """Gets the save_prefs of this ClientFeatures.  # noqa: E501


        :return: The save_prefs of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._save_prefs

    @save_prefs.setter
    def save_prefs(self, save_prefs):
        """Sets the save_prefs of this ClientFeatures.


        :param save_prefs: The save_prefs of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._save_prefs = save_prefs

    @property
    def sql_query(self):
        """Gets the sql_query of this ClientFeatures.  # noqa: E501


        :return: The sql_query of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._sql_query

    @sql_query.setter
    def sql_query(self, sql_query):
        """Sets the sql_query of this ClientFeatures.


        :param sql_query: The sql_query of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._sql_query = sql_query

    @property
    def sso(self):
        """Gets the sso of this ClientFeatures.  # noqa: E501


        :return: The sso of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this ClientFeatures.


        :param sso: The sso of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._sso = sso

    @property
    def user_roles(self):
        """Gets the user_roles of this ClientFeatures.  # noqa: E501


        :return: The user_roles of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this ClientFeatures.


        :param user_roles: The user_roles of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._user_roles = user_roles

    @property
    def user_survey(self):
        """Gets the user_survey of this ClientFeatures.  # noqa: E501


        :return: The user_survey of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._user_survey

    @user_survey.setter
    def user_survey(self, user_survey):
        """Sets the user_survey of this ClientFeatures.


        :param user_survey: The user_survey of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._user_survey = user_survey

    @property
    def view_admin_page(self):
        """Gets the view_admin_page of this ClientFeatures.  # noqa: E501


        :return: The view_admin_page of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._view_admin_page

    @view_admin_page.setter
    def view_admin_page(self, view_admin_page):
        """Sets the view_admin_page of this ClientFeatures.


        :param view_admin_page: The view_admin_page of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._view_admin_page = view_admin_page

    @property
    def view_data_overview_details(self):
        """Gets the view_data_overview_details of this ClientFeatures.  # noqa: E501


        :return: The view_data_overview_details of this ClientFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._view_data_overview_details

    @view_data_overview_details.setter
    def view_data_overview_details(self, view_data_overview_details):
        """Sets the view_data_overview_details of this ClientFeatures.


        :param view_data_overview_details: The view_data_overview_details of this ClientFeatures.  # noqa: E501
        :type: bool
        """

        self._view_data_overview_details = view_data_overview_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

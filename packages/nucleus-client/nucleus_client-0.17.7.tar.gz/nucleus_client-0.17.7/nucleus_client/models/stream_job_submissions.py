# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StreamJobSubmissions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'decodable_jobs': 'list[DecodableJobs]',
        'dt_submitted': 'str',
        'integration_id': 'str',
        'job_id': 'str',
        'job_name': 'str',
        'new_supervisor': 'dict(str, object)',
        'previous_datasources': 'StreamJobDruidDatasource',
        'previous_table': 'StreamJobDataHubTable',
        'proposed_datasource': 'StreamJobDruidDatasource',
        'proposed_table': 'StreamJobDataHubTable',
        'start_offset': 'str',
        'status': 'str',
        'stream_job_type': 'str',
        'sub_status': 'str',
        'submitted_to': 'str',
        'table_name': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'decodable_jobs': 'decodable_jobs',
        'dt_submitted': 'dt_submitted',
        'integration_id': 'integration_id',
        'job_id': 'job_id',
        'job_name': 'job_name',
        'new_supervisor': 'new_supervisor',
        'previous_datasources': 'previous_datasources',
        'previous_table': 'previous_table',
        'proposed_datasource': 'proposed_datasource',
        'proposed_table': 'proposed_table',
        'start_offset': 'start_offset',
        'status': 'status',
        'stream_job_type': 'stream_job_type',
        'sub_status': 'sub_status',
        'submitted_to': 'submitted_to',
        'table_name': 'table_name'
    }

    def __init__(self, client_id=None, decodable_jobs=None, dt_submitted=None, integration_id=None, job_id=None, job_name=None, new_supervisor=None, previous_datasources=None, previous_table=None, proposed_datasource=None, proposed_table=None, start_offset=None, status=None, stream_job_type=None, sub_status=None, submitted_to=None, table_name=None):  # noqa: E501
        """StreamJobSubmissions - a model defined in OpenAPI"""  # noqa: E501

        self._client_id = None
        self._decodable_jobs = None
        self._dt_submitted = None
        self._integration_id = None
        self._job_id = None
        self._job_name = None
        self._new_supervisor = None
        self._previous_datasources = None
        self._previous_table = None
        self._proposed_datasource = None
        self._proposed_table = None
        self._start_offset = None
        self._status = None
        self._stream_job_type = None
        self._sub_status = None
        self._submitted_to = None
        self._table_name = None
        self.discriminator = None

        self.client_id = client_id
        if decodable_jobs is not None:
            self.decodable_jobs = decodable_jobs
        if dt_submitted is not None:
            self.dt_submitted = dt_submitted
        if integration_id is not None:
            self.integration_id = integration_id
        if job_id is not None:
            self.job_id = job_id
        if job_name is not None:
            self.job_name = job_name
        if new_supervisor is not None:
            self.new_supervisor = new_supervisor
        if previous_datasources is not None:
            self.previous_datasources = previous_datasources
        if previous_table is not None:
            self.previous_table = previous_table
        if proposed_datasource is not None:
            self.proposed_datasource = proposed_datasource
        if proposed_table is not None:
            self.proposed_table = proposed_table
        if start_offset is not None:
            self.start_offset = start_offset
        if status is not None:
            self.status = status
        self.stream_job_type = stream_job_type
        if sub_status is not None:
            self.sub_status = sub_status
        if submitted_to is not None:
            self.submitted_to = submitted_to
        if table_name is not None:
            self.table_name = table_name

    @property
    def client_id(self):
        """Gets the client_id of this StreamJobSubmissions.  # noqa: E501


        :return: The client_id of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this StreamJobSubmissions.


        :param client_id: The client_id of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def decodable_jobs(self):
        """Gets the decodable_jobs of this StreamJobSubmissions.  # noqa: E501


        :return: The decodable_jobs of this StreamJobSubmissions.  # noqa: E501
        :rtype: list[DecodableJobs]
        """
        return self._decodable_jobs

    @decodable_jobs.setter
    def decodable_jobs(self, decodable_jobs):
        """Sets the decodable_jobs of this StreamJobSubmissions.


        :param decodable_jobs: The decodable_jobs of this StreamJobSubmissions.  # noqa: E501
        :type: list[DecodableJobs]
        """

        self._decodable_jobs = decodable_jobs

    @property
    def dt_submitted(self):
        """Gets the dt_submitted of this StreamJobSubmissions.  # noqa: E501


        :return: The dt_submitted of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._dt_submitted

    @dt_submitted.setter
    def dt_submitted(self, dt_submitted):
        """Sets the dt_submitted of this StreamJobSubmissions.


        :param dt_submitted: The dt_submitted of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._dt_submitted = dt_submitted

    @property
    def integration_id(self):
        """Gets the integration_id of this StreamJobSubmissions.  # noqa: E501


        :return: The integration_id of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this StreamJobSubmissions.


        :param integration_id: The integration_id of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def job_id(self):
        """Gets the job_id of this StreamJobSubmissions.  # noqa: E501


        :return: The job_id of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this StreamJobSubmissions.


        :param job_id: The job_id of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this StreamJobSubmissions.  # noqa: E501


        :return: The job_name of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StreamJobSubmissions.


        :param job_name: The job_name of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def new_supervisor(self):
        """Gets the new_supervisor of this StreamJobSubmissions.  # noqa: E501


        :return: The new_supervisor of this StreamJobSubmissions.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._new_supervisor

    @new_supervisor.setter
    def new_supervisor(self, new_supervisor):
        """Sets the new_supervisor of this StreamJobSubmissions.


        :param new_supervisor: The new_supervisor of this StreamJobSubmissions.  # noqa: E501
        :type: dict(str, object)
        """

        self._new_supervisor = new_supervisor

    @property
    def previous_datasources(self):
        """Gets the previous_datasources of this StreamJobSubmissions.  # noqa: E501


        :return: The previous_datasources of this StreamJobSubmissions.  # noqa: E501
        :rtype: StreamJobDruidDatasource
        """
        return self._previous_datasources

    @previous_datasources.setter
    def previous_datasources(self, previous_datasources):
        """Sets the previous_datasources of this StreamJobSubmissions.


        :param previous_datasources: The previous_datasources of this StreamJobSubmissions.  # noqa: E501
        :type: StreamJobDruidDatasource
        """

        self._previous_datasources = previous_datasources

    @property
    def previous_table(self):
        """Gets the previous_table of this StreamJobSubmissions.  # noqa: E501


        :return: The previous_table of this StreamJobSubmissions.  # noqa: E501
        :rtype: StreamJobDataHubTable
        """
        return self._previous_table

    @previous_table.setter
    def previous_table(self, previous_table):
        """Sets the previous_table of this StreamJobSubmissions.


        :param previous_table: The previous_table of this StreamJobSubmissions.  # noqa: E501
        :type: StreamJobDataHubTable
        """

        self._previous_table = previous_table

    @property
    def proposed_datasource(self):
        """Gets the proposed_datasource of this StreamJobSubmissions.  # noqa: E501


        :return: The proposed_datasource of this StreamJobSubmissions.  # noqa: E501
        :rtype: StreamJobDruidDatasource
        """
        return self._proposed_datasource

    @proposed_datasource.setter
    def proposed_datasource(self, proposed_datasource):
        """Sets the proposed_datasource of this StreamJobSubmissions.


        :param proposed_datasource: The proposed_datasource of this StreamJobSubmissions.  # noqa: E501
        :type: StreamJobDruidDatasource
        """

        self._proposed_datasource = proposed_datasource

    @property
    def proposed_table(self):
        """Gets the proposed_table of this StreamJobSubmissions.  # noqa: E501


        :return: The proposed_table of this StreamJobSubmissions.  # noqa: E501
        :rtype: StreamJobDataHubTable
        """
        return self._proposed_table

    @proposed_table.setter
    def proposed_table(self, proposed_table):
        """Sets the proposed_table of this StreamJobSubmissions.


        :param proposed_table: The proposed_table of this StreamJobSubmissions.  # noqa: E501
        :type: StreamJobDataHubTable
        """

        self._proposed_table = proposed_table

    @property
    def start_offset(self):
        """Gets the start_offset of this StreamJobSubmissions.  # noqa: E501


        :return: The start_offset of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this StreamJobSubmissions.


        :param start_offset: The start_offset of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._start_offset = start_offset

    @property
    def status(self):
        """Gets the status of this StreamJobSubmissions.  # noqa: E501


        :return: The status of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StreamJobSubmissions.


        :param status: The status of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stream_job_type(self):
        """Gets the stream_job_type of this StreamJobSubmissions.  # noqa: E501


        :return: The stream_job_type of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._stream_job_type

    @stream_job_type.setter
    def stream_job_type(self, stream_job_type):
        """Sets the stream_job_type of this StreamJobSubmissions.


        :param stream_job_type: The stream_job_type of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """
        if stream_job_type is None:
            raise ValueError("Invalid value for `stream_job_type`, must not be `None`")  # noqa: E501

        self._stream_job_type = stream_job_type

    @property
    def sub_status(self):
        """Gets the sub_status of this StreamJobSubmissions.  # noqa: E501


        :return: The sub_status of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this StreamJobSubmissions.


        :param sub_status: The sub_status of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._sub_status = sub_status

    @property
    def submitted_to(self):
        """Gets the submitted_to of this StreamJobSubmissions.  # noqa: E501


        :return: The submitted_to of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._submitted_to

    @submitted_to.setter
    def submitted_to(self, submitted_to):
        """Sets the submitted_to of this StreamJobSubmissions.


        :param submitted_to: The submitted_to of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._submitted_to = submitted_to

    @property
    def table_name(self):
        """Gets the table_name of this StreamJobSubmissions.  # noqa: E501


        :return: The table_name of this StreamJobSubmissions.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this StreamJobSubmissions.


        :param table_name: The table_name of this StreamJobSubmissions.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamJobSubmissions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

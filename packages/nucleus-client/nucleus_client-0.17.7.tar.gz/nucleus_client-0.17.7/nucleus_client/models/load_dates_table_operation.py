# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LoadDatesTableOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interval': 'str',
        'num_dates': 'int',
        'number_of_rows': 'int',
        'rows_per_second': 'int',
        'start_date': 'str',
        'table_name': 'str'
    }

    attribute_map = {
        'interval': 'interval',
        'num_dates': 'num_dates',
        'number_of_rows': 'number_of_rows',
        'rows_per_second': 'rows_per_second',
        'start_date': 'start_date',
        'table_name': 'table_name'
    }

    def __init__(self, interval=None, num_dates=None, number_of_rows=None, rows_per_second=None, start_date=None, table_name=None):  # noqa: E501
        """LoadDatesTableOperation - a model defined in OpenAPI"""  # noqa: E501

        self._interval = None
        self._num_dates = None
        self._number_of_rows = None
        self._rows_per_second = None
        self._start_date = None
        self._table_name = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if num_dates is not None:
            self.num_dates = num_dates
        if number_of_rows is not None:
            self.number_of_rows = number_of_rows
        if rows_per_second is not None:
            self.rows_per_second = rows_per_second
        if start_date is not None:
            self.start_date = start_date
        if table_name is not None:
            self.table_name = table_name

    @property
    def interval(self):
        """Gets the interval of this LoadDatesTableOperation.  # noqa: E501


        :return: The interval of this LoadDatesTableOperation.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this LoadDatesTableOperation.


        :param interval: The interval of this LoadDatesTableOperation.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def num_dates(self):
        """Gets the num_dates of this LoadDatesTableOperation.  # noqa: E501


        :return: The num_dates of this LoadDatesTableOperation.  # noqa: E501
        :rtype: int
        """
        return self._num_dates

    @num_dates.setter
    def num_dates(self, num_dates):
        """Sets the num_dates of this LoadDatesTableOperation.


        :param num_dates: The num_dates of this LoadDatesTableOperation.  # noqa: E501
        :type: int
        """

        self._num_dates = num_dates

    @property
    def number_of_rows(self):
        """Gets the number_of_rows of this LoadDatesTableOperation.  # noqa: E501


        :return: The number_of_rows of this LoadDatesTableOperation.  # noqa: E501
        :rtype: int
        """
        return self._number_of_rows

    @number_of_rows.setter
    def number_of_rows(self, number_of_rows):
        """Sets the number_of_rows of this LoadDatesTableOperation.


        :param number_of_rows: The number_of_rows of this LoadDatesTableOperation.  # noqa: E501
        :type: int
        """

        self._number_of_rows = number_of_rows

    @property
    def rows_per_second(self):
        """Gets the rows_per_second of this LoadDatesTableOperation.  # noqa: E501


        :return: The rows_per_second of this LoadDatesTableOperation.  # noqa: E501
        :rtype: int
        """
        return self._rows_per_second

    @rows_per_second.setter
    def rows_per_second(self, rows_per_second):
        """Sets the rows_per_second of this LoadDatesTableOperation.


        :param rows_per_second: The rows_per_second of this LoadDatesTableOperation.  # noqa: E501
        :type: int
        """

        self._rows_per_second = rows_per_second

    @property
    def start_date(self):
        """Gets the start_date of this LoadDatesTableOperation.  # noqa: E501


        :return: The start_date of this LoadDatesTableOperation.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LoadDatesTableOperation.


        :param start_date: The start_date of this LoadDatesTableOperation.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def table_name(self):
        """Gets the table_name of this LoadDatesTableOperation.  # noqa: E501


        :return: The table_name of this LoadDatesTableOperation.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this LoadDatesTableOperation.


        :param table_name: The table_name of this LoadDatesTableOperation.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadDatesTableOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneEntitiesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bulk_entity': 'EntityBatch',
        'cyclone_client_id': 'str',
        'server_id': 'str'
    }

    attribute_map = {
        'bulk_entity': 'bulk_entity',
        'cyclone_client_id': 'cyclone_client_id',
        'server_id': 'server_id'
    }

    def __init__(self, bulk_entity=None, cyclone_client_id=None, server_id=None):  # noqa: E501
        """CycloneEntitiesRequest - a model defined in OpenAPI"""  # noqa: E501

        self._bulk_entity = None
        self._cyclone_client_id = None
        self._server_id = None
        self.discriminator = None

        self.bulk_entity = bulk_entity
        if cyclone_client_id is not None:
            self.cyclone_client_id = cyclone_client_id
        self.server_id = server_id

    @property
    def bulk_entity(self):
        """Gets the bulk_entity of this CycloneEntitiesRequest.  # noqa: E501


        :return: The bulk_entity of this CycloneEntitiesRequest.  # noqa: E501
        :rtype: EntityBatch
        """
        return self._bulk_entity

    @bulk_entity.setter
    def bulk_entity(self, bulk_entity):
        """Sets the bulk_entity of this CycloneEntitiesRequest.


        :param bulk_entity: The bulk_entity of this CycloneEntitiesRequest.  # noqa: E501
        :type: EntityBatch
        """
        if bulk_entity is None:
            raise ValueError("Invalid value for `bulk_entity`, must not be `None`")  # noqa: E501

        self._bulk_entity = bulk_entity

    @property
    def cyclone_client_id(self):
        """Gets the cyclone_client_id of this CycloneEntitiesRequest.  # noqa: E501


        :return: The cyclone_client_id of this CycloneEntitiesRequest.  # noqa: E501
        :rtype: str
        """
        return self._cyclone_client_id

    @cyclone_client_id.setter
    def cyclone_client_id(self, cyclone_client_id):
        """Sets the cyclone_client_id of this CycloneEntitiesRequest.


        :param cyclone_client_id: The cyclone_client_id of this CycloneEntitiesRequest.  # noqa: E501
        :type: str
        """

        self._cyclone_client_id = cyclone_client_id

    @property
    def server_id(self):
        """Gets the server_id of this CycloneEntitiesRequest.  # noqa: E501


        :return: The server_id of this CycloneEntitiesRequest.  # noqa: E501
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this CycloneEntitiesRequest.


        :param server_id: The server_id of this CycloneEntitiesRequest.  # noqa: E501
        :type: str
        """
        if server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")  # noqa: E501

        self._server_id = server_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneEntitiesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneConfSnapshotConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_snapshot': 'bool',
        'offset_hours': 'int',
        'use_dt_activity': 'bool'
    }

    attribute_map = {
        'is_snapshot': 'is_snapshot',
        'offset_hours': 'offset_hours',
        'use_dt_activity': 'use_dt_activity'
    }

    def __init__(self, is_snapshot=None, offset_hours=None, use_dt_activity=None):  # noqa: E501
        """CycloneConfSnapshotConfig - a model defined in OpenAPI"""  # noqa: E501

        self._is_snapshot = None
        self._offset_hours = None
        self._use_dt_activity = None
        self.discriminator = None

        if is_snapshot is not None:
            self.is_snapshot = is_snapshot
        if offset_hours is not None:
            self.offset_hours = offset_hours
        if use_dt_activity is not None:
            self.use_dt_activity = use_dt_activity

    @property
    def is_snapshot(self):
        """Gets the is_snapshot of this CycloneConfSnapshotConfig.  # noqa: E501


        :return: The is_snapshot of this CycloneConfSnapshotConfig.  # noqa: E501
        :rtype: bool
        """
        return self._is_snapshot

    @is_snapshot.setter
    def is_snapshot(self, is_snapshot):
        """Sets the is_snapshot of this CycloneConfSnapshotConfig.


        :param is_snapshot: The is_snapshot of this CycloneConfSnapshotConfig.  # noqa: E501
        :type: bool
        """

        self._is_snapshot = is_snapshot

    @property
    def offset_hours(self):
        """Gets the offset_hours of this CycloneConfSnapshotConfig.  # noqa: E501


        :return: The offset_hours of this CycloneConfSnapshotConfig.  # noqa: E501
        :rtype: int
        """
        return self._offset_hours

    @offset_hours.setter
    def offset_hours(self, offset_hours):
        """Sets the offset_hours of this CycloneConfSnapshotConfig.


        :param offset_hours: The offset_hours of this CycloneConfSnapshotConfig.  # noqa: E501
        :type: int
        """

        self._offset_hours = offset_hours

    @property
    def use_dt_activity(self):
        """Gets the use_dt_activity of this CycloneConfSnapshotConfig.  # noqa: E501


        :return: The use_dt_activity of this CycloneConfSnapshotConfig.  # noqa: E501
        :rtype: bool
        """
        return self._use_dt_activity

    @use_dt_activity.setter
    def use_dt_activity(self, use_dt_activity):
        """Sets the use_dt_activity of this CycloneConfSnapshotConfig.


        :param use_dt_activity: The use_dt_activity of this CycloneConfSnapshotConfig.  # noqa: E501
        :type: bool
        """

        self._use_dt_activity = use_dt_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneConfSnapshotConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

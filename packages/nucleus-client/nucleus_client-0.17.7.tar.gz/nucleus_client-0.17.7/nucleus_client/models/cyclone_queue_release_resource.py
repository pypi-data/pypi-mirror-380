# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneQueueReleaseResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_etl': 'bool',
        'resource_id': 'str',
        'resource_name': 'str'
    }

    attribute_map = {
        'is_etl': 'is_etl',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name'
    }

    def __init__(self, is_etl=None, resource_id=None, resource_name=None):  # noqa: E501
        """CycloneQueueReleaseResource - a model defined in OpenAPI"""  # noqa: E501

        self._is_etl = None
        self._resource_id = None
        self._resource_name = None
        self.discriminator = None

        if is_etl is not None:
            self.is_etl = is_etl
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name

    @property
    def is_etl(self):
        """Gets the is_etl of this CycloneQueueReleaseResource.  # noqa: E501


        :return: The is_etl of this CycloneQueueReleaseResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_etl

    @is_etl.setter
    def is_etl(self, is_etl):
        """Sets the is_etl of this CycloneQueueReleaseResource.


        :param is_etl: The is_etl of this CycloneQueueReleaseResource.  # noqa: E501
        :type: bool
        """

        self._is_etl = is_etl

    @property
    def resource_id(self):
        """Gets the resource_id of this CycloneQueueReleaseResource.  # noqa: E501


        :return: The resource_id of this CycloneQueueReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CycloneQueueReleaseResource.


        :param resource_id: The resource_id of this CycloneQueueReleaseResource.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this CycloneQueueReleaseResource.  # noqa: E501


        :return: The resource_name of this CycloneQueueReleaseResource.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this CycloneQueueReleaseResource.


        :param resource_name: The resource_name of this CycloneQueueReleaseResource.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneQueueReleaseResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

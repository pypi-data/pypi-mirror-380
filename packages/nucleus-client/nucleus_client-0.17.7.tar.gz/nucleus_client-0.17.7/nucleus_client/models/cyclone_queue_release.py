# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneQueueRelease(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'completed': 'list[CycloneQueueReleaseConfs]',
        'record_count': 'int',
        'run_seconds': 'int',
        'server_name': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'completed': 'completed',
        'record_count': 'record_count',
        'run_seconds': 'run_seconds',
        'server_name': 'server_name'
    }

    def __init__(self, client_id=None, completed=None, record_count=None, run_seconds=None, server_name=None):  # noqa: E501
        """CycloneQueueRelease - a model defined in OpenAPI"""  # noqa: E501

        self._client_id = None
        self._completed = None
        self._record_count = None
        self._run_seconds = None
        self._server_name = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if completed is not None:
            self.completed = completed
        if record_count is not None:
            self.record_count = record_count
        if run_seconds is not None:
            self.run_seconds = run_seconds
        if server_name is not None:
            self.server_name = server_name

    @property
    def client_id(self):
        """Gets the client_id of this CycloneQueueRelease.  # noqa: E501


        :return: The client_id of this CycloneQueueRelease.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CycloneQueueRelease.


        :param client_id: The client_id of this CycloneQueueRelease.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def completed(self):
        """Gets the completed of this CycloneQueueRelease.  # noqa: E501


        :return: The completed of this CycloneQueueRelease.  # noqa: E501
        :rtype: list[CycloneQueueReleaseConfs]
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this CycloneQueueRelease.


        :param completed: The completed of this CycloneQueueRelease.  # noqa: E501
        :type: list[CycloneQueueReleaseConfs]
        """

        self._completed = completed

    @property
    def record_count(self):
        """Gets the record_count of this CycloneQueueRelease.  # noqa: E501


        :return: The record_count of this CycloneQueueRelease.  # noqa: E501
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """Sets the record_count of this CycloneQueueRelease.


        :param record_count: The record_count of this CycloneQueueRelease.  # noqa: E501
        :type: int
        """

        self._record_count = record_count

    @property
    def run_seconds(self):
        """Gets the run_seconds of this CycloneQueueRelease.  # noqa: E501


        :return: The run_seconds of this CycloneQueueRelease.  # noqa: E501
        :rtype: int
        """
        return self._run_seconds

    @run_seconds.setter
    def run_seconds(self, run_seconds):
        """Sets the run_seconds of this CycloneQueueRelease.


        :param run_seconds: The run_seconds of this CycloneQueueRelease.  # noqa: E501
        :type: int
        """

        self._run_seconds = run_seconds

    @property
    def server_name(self):
        """Gets the server_name of this CycloneQueueRelease.  # noqa: E501


        :return: The server_name of this CycloneQueueRelease.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this CycloneQueueRelease.


        :param server_name: The server_name of this CycloneQueueRelease.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneQueueRelease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

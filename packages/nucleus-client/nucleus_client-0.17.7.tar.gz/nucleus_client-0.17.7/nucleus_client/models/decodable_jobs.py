# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DecodableJobs(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'flow_type': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'tracking_url': 'str'
    }

    attribute_map = {
        'id': '_id',
        'flow_type': 'flow_type',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'resource_type': 'resource_type',
        'tracking_url': 'tracking_url'
    }

    def __init__(self, id=None, flow_type=None, resource_id=None, resource_name=None, resource_type=None, tracking_url=None):  # noqa: E501
        """DecodableJobs - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._flow_type = None
        self._resource_id = None
        self._resource_name = None
        self._resource_type = None
        self._tracking_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if flow_type is not None:
            self.flow_type = flow_type
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if tracking_url is not None:
            self.tracking_url = tracking_url

    @property
    def id(self):
        """Gets the id of this DecodableJobs.  # noqa: E501


        :return: The id of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecodableJobs.


        :param id: The id of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def flow_type(self):
        """Gets the flow_type of this DecodableJobs.  # noqa: E501


        :return: The flow_type of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._flow_type

    @flow_type.setter
    def flow_type(self, flow_type):
        """Sets the flow_type of this DecodableJobs.


        :param flow_type: The flow_type of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._flow_type = flow_type

    @property
    def resource_id(self):
        """Gets the resource_id of this DecodableJobs.  # noqa: E501


        :return: The resource_id of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this DecodableJobs.


        :param resource_id: The resource_id of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this DecodableJobs.  # noqa: E501


        :return: The resource_name of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this DecodableJobs.


        :param resource_name: The resource_name of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this DecodableJobs.  # noqa: E501


        :return: The resource_type of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DecodableJobs.


        :param resource_type: The resource_type of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def tracking_url(self):
        """Gets the tracking_url of this DecodableJobs.  # noqa: E501


        :return: The tracking_url of this DecodableJobs.  # noqa: E501
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this DecodableJobs.


        :param tracking_url: The tracking_url of this DecodableJobs.  # noqa: E501
        :type: str
        """

        self._tracking_url = tracking_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecodableJobs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

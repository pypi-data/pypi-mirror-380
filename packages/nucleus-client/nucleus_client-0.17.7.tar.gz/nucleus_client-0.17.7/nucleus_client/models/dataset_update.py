# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DatasetUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'change_history': 'list[ChangeHistory]',
        'created_by': 'str',
        'dataset_type': 'str',
        'description': 'str',
        'dt_create': 'datetime',
        'modified_by': 'str',
        'name': 'str',
        'schedule': 'RefreshSchedule',
        'settings': 'dict(str, object)'
    }

    attribute_map = {
        'change_history': 'change_history',
        'created_by': 'created_by',
        'dataset_type': 'dataset_type',
        'description': 'description',
        'dt_create': 'dt_create',
        'modified_by': 'modified_by',
        'name': 'name',
        'schedule': 'schedule',
        'settings': 'settings'
    }

    def __init__(self, change_history=None, created_by=None, dataset_type=None, description=None, dt_create=None, modified_by=None, name=None, schedule=None, settings=None):  # noqa: E501
        """DatasetUpdate - a model defined in OpenAPI"""  # noqa: E501

        self._change_history = None
        self._created_by = None
        self._dataset_type = None
        self._description = None
        self._dt_create = None
        self._modified_by = None
        self._name = None
        self._schedule = None
        self._settings = None
        self.discriminator = None

        if change_history is not None:
            self.change_history = change_history
        if created_by is not None:
            self.created_by = created_by
        if dataset_type is not None:
            self.dataset_type = dataset_type
        if description is not None:
            self.description = description
        if dt_create is not None:
            self.dt_create = dt_create
        if modified_by is not None:
            self.modified_by = modified_by
        if name is not None:
            self.name = name
        if schedule is not None:
            self.schedule = schedule
        if settings is not None:
            self.settings = settings

    @property
    def change_history(self):
        """Gets the change_history of this DatasetUpdate.  # noqa: E501


        :return: The change_history of this DatasetUpdate.  # noqa: E501
        :rtype: list[ChangeHistory]
        """
        return self._change_history

    @change_history.setter
    def change_history(self, change_history):
        """Sets the change_history of this DatasetUpdate.


        :param change_history: The change_history of this DatasetUpdate.  # noqa: E501
        :type: list[ChangeHistory]
        """

        self._change_history = change_history

    @property
    def created_by(self):
        """Gets the created_by of this DatasetUpdate.  # noqa: E501


        :return: The created_by of this DatasetUpdate.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DatasetUpdate.


        :param created_by: The created_by of this DatasetUpdate.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def dataset_type(self):
        """Gets the dataset_type of this DatasetUpdate.  # noqa: E501


        :return: The dataset_type of this DatasetUpdate.  # noqa: E501
        :rtype: str
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this DatasetUpdate.


        :param dataset_type: The dataset_type of this DatasetUpdate.  # noqa: E501
        :type: str
        """

        self._dataset_type = dataset_type

    @property
    def description(self):
        """Gets the description of this DatasetUpdate.  # noqa: E501


        :return: The description of this DatasetUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetUpdate.


        :param description: The description of this DatasetUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dt_create(self):
        """Gets the dt_create of this DatasetUpdate.  # noqa: E501


        :return: The dt_create of this DatasetUpdate.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_create

    @dt_create.setter
    def dt_create(self, dt_create):
        """Sets the dt_create of this DatasetUpdate.


        :param dt_create: The dt_create of this DatasetUpdate.  # noqa: E501
        :type: datetime
        """

        self._dt_create = dt_create

    @property
    def modified_by(self):
        """Gets the modified_by of this DatasetUpdate.  # noqa: E501


        :return: The modified_by of this DatasetUpdate.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this DatasetUpdate.


        :param modified_by: The modified_by of this DatasetUpdate.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def name(self):
        """Gets the name of this DatasetUpdate.  # noqa: E501


        :return: The name of this DatasetUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasetUpdate.


        :param name: The name of this DatasetUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def schedule(self):
        """Gets the schedule of this DatasetUpdate.  # noqa: E501


        :return: The schedule of this DatasetUpdate.  # noqa: E501
        :rtype: RefreshSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this DatasetUpdate.


        :param schedule: The schedule of this DatasetUpdate.  # noqa: E501
        :type: RefreshSchedule
        """

        self._schedule = schedule

    @property
    def settings(self):
        """Gets the settings of this DatasetUpdate.  # noqa: E501


        :return: The settings of this DatasetUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DatasetUpdate.


        :param settings: The settings of this DatasetUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneAddClientEtlItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conf_key': 'str',
        'resource_key': 'str',
        'start_after': 'str'
    }

    attribute_map = {
        'conf_key': 'conf_key',
        'resource_key': 'resource_key',
        'start_after': 'start_after'
    }

    def __init__(self, conf_key=None, resource_key=None, start_after=None):  # noqa: E501
        """CycloneAddClientEtlItem - a model defined in OpenAPI"""  # noqa: E501

        self._conf_key = None
        self._resource_key = None
        self._start_after = None
        self.discriminator = None

        self.conf_key = conf_key
        if resource_key is not None:
            self.resource_key = resource_key
        if start_after is not None:
            self.start_after = start_after

    @property
    def conf_key(self):
        """Gets the conf_key of this CycloneAddClientEtlItem.  # noqa: E501


        :return: The conf_key of this CycloneAddClientEtlItem.  # noqa: E501
        :rtype: str
        """
        return self._conf_key

    @conf_key.setter
    def conf_key(self, conf_key):
        """Sets the conf_key of this CycloneAddClientEtlItem.


        :param conf_key: The conf_key of this CycloneAddClientEtlItem.  # noqa: E501
        :type: str
        """
        if conf_key is None:
            raise ValueError("Invalid value for `conf_key`, must not be `None`")  # noqa: E501

        self._conf_key = conf_key

    @property
    def resource_key(self):
        """Gets the resource_key of this CycloneAddClientEtlItem.  # noqa: E501


        :return: The resource_key of this CycloneAddClientEtlItem.  # noqa: E501
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this CycloneAddClientEtlItem.


        :param resource_key: The resource_key of this CycloneAddClientEtlItem.  # noqa: E501
        :type: str
        """

        self._resource_key = resource_key

    @property
    def start_after(self):
        """Gets the start_after of this CycloneAddClientEtlItem.  # noqa: E501


        :return: The start_after of this CycloneAddClientEtlItem.  # noqa: E501
        :rtype: str
        """
        return self._start_after

    @start_after.setter
    def start_after(self, start_after):
        """Sets the start_after of this CycloneAddClientEtlItem.


        :param start_after: The start_after of this CycloneAddClientEtlItem.  # noqa: E501
        :type: str
        """

        self._start_after = start_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneAddClientEtlItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneSqlResourceExtId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto': 'bool',
        'conversions': 'list[str]',
        'delimiter': 'str',
        'fields_or_values': 'list[CycloneSqlResourceExtIdFOV]'
    }

    attribute_map = {
        'auto': 'auto',
        'conversions': 'conversions',
        'delimiter': 'delimiter',
        'fields_or_values': 'fields_or_values'
    }

    def __init__(self, auto=None, conversions=None, delimiter=None, fields_or_values=None):  # noqa: E501
        """CycloneSqlResourceExtId - a model defined in OpenAPI"""  # noqa: E501

        self._auto = None
        self._conversions = None
        self._delimiter = None
        self._fields_or_values = None
        self.discriminator = None

        if auto is not None:
            self.auto = auto
        if conversions is not None:
            self.conversions = conversions
        if delimiter is not None:
            self.delimiter = delimiter
        if fields_or_values is not None:
            self.fields_or_values = fields_or_values

    @property
    def auto(self):
        """Gets the auto of this CycloneSqlResourceExtId.  # noqa: E501


        :return: The auto of this CycloneSqlResourceExtId.  # noqa: E501
        :rtype: bool
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this CycloneSqlResourceExtId.


        :param auto: The auto of this CycloneSqlResourceExtId.  # noqa: E501
        :type: bool
        """

        self._auto = auto

    @property
    def conversions(self):
        """Gets the conversions of this CycloneSqlResourceExtId.  # noqa: E501


        :return: The conversions of this CycloneSqlResourceExtId.  # noqa: E501
        :rtype: list[str]
        """
        return self._conversions

    @conversions.setter
    def conversions(self, conversions):
        """Sets the conversions of this CycloneSqlResourceExtId.


        :param conversions: The conversions of this CycloneSqlResourceExtId.  # noqa: E501
        :type: list[str]
        """

        self._conversions = conversions

    @property
    def delimiter(self):
        """Gets the delimiter of this CycloneSqlResourceExtId.  # noqa: E501


        :return: The delimiter of this CycloneSqlResourceExtId.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this CycloneSqlResourceExtId.


        :param delimiter: The delimiter of this CycloneSqlResourceExtId.  # noqa: E501
        :type: str
        """

        self._delimiter = delimiter

    @property
    def fields_or_values(self):
        """Gets the fields_or_values of this CycloneSqlResourceExtId.  # noqa: E501


        :return: The fields_or_values of this CycloneSqlResourceExtId.  # noqa: E501
        :rtype: list[CycloneSqlResourceExtIdFOV]
        """
        return self._fields_or_values

    @fields_or_values.setter
    def fields_or_values(self, fields_or_values):
        """Sets the fields_or_values of this CycloneSqlResourceExtId.


        :param fields_or_values: The fields_or_values of this CycloneSqlResourceExtId.  # noqa: E501
        :type: list[CycloneSqlResourceExtIdFOV]
        """

        self._fields_or_values = fields_or_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneSqlResourceExtId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

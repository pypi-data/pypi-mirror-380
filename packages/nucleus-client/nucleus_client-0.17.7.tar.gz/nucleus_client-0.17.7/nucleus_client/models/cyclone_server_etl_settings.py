# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneServerEtlSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_size': 'int',
        'concurrency': 'int',
        'max_retries': 'int',
        'resource_concurrency': 'int'
    }

    attribute_map = {
        'batch_size': 'batch_size',
        'concurrency': 'concurrency',
        'max_retries': 'max_retries',
        'resource_concurrency': 'resource_concurrency'
    }

    def __init__(self, batch_size=None, concurrency=None, max_retries=None, resource_concurrency=None):  # noqa: E501
        """CycloneServerEtlSettings - a model defined in OpenAPI"""  # noqa: E501

        self._batch_size = None
        self._concurrency = None
        self._max_retries = None
        self._resource_concurrency = None
        self.discriminator = None

        self.batch_size = batch_size
        self.concurrency = concurrency
        self.max_retries = max_retries
        if resource_concurrency is not None:
            self.resource_concurrency = resource_concurrency

    @property
    def batch_size(self):
        """Gets the batch_size of this CycloneServerEtlSettings.  # noqa: E501


        :return: The batch_size of this CycloneServerEtlSettings.  # noqa: E501
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this CycloneServerEtlSettings.


        :param batch_size: The batch_size of this CycloneServerEtlSettings.  # noqa: E501
        :type: int
        """
        if batch_size is None:
            raise ValueError("Invalid value for `batch_size`, must not be `None`")  # noqa: E501

        self._batch_size = batch_size

    @property
    def concurrency(self):
        """Gets the concurrency of this CycloneServerEtlSettings.  # noqa: E501


        :return: The concurrency of this CycloneServerEtlSettings.  # noqa: E501
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this CycloneServerEtlSettings.


        :param concurrency: The concurrency of this CycloneServerEtlSettings.  # noqa: E501
        :type: int
        """
        if concurrency is None:
            raise ValueError("Invalid value for `concurrency`, must not be `None`")  # noqa: E501

        self._concurrency = concurrency

    @property
    def max_retries(self):
        """Gets the max_retries of this CycloneServerEtlSettings.  # noqa: E501


        :return: The max_retries of this CycloneServerEtlSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this CycloneServerEtlSettings.


        :param max_retries: The max_retries of this CycloneServerEtlSettings.  # noqa: E501
        :type: int
        """
        if max_retries is None:
            raise ValueError("Invalid value for `max_retries`, must not be `None`")  # noqa: E501

        self._max_retries = max_retries

    @property
    def resource_concurrency(self):
        """Gets the resource_concurrency of this CycloneServerEtlSettings.  # noqa: E501


        :return: The resource_concurrency of this CycloneServerEtlSettings.  # noqa: E501
        :rtype: int
        """
        return self._resource_concurrency

    @resource_concurrency.setter
    def resource_concurrency(self, resource_concurrency):
        """Sets the resource_concurrency of this CycloneServerEtlSettings.


        :param resource_concurrency: The resource_concurrency of this CycloneServerEtlSettings.  # noqa: E501
        :type: int
        """

        self._resource_concurrency = resource_concurrency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneServerEtlSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

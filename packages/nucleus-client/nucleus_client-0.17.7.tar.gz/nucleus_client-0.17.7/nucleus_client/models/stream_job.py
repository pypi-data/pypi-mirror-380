# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StreamJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'client_id': 'str',
        'datahub': 'dict(str, object)',
        'datahub_metadata': 'StreamJobDataHubMetadata',
        'decodable_conf': 'dict(str, object)',
        'druid': 'dict(str, object)',
        'druid_metadata': 'StreamJobDruidMetadata',
        'dt_u': 'datetime',
        'execution_mode': 'str',
        'flink_conf': 'dict(str, object)',
        'flink_jobs': 'list[dict(str, object)]',
        'job_name': 'str',
        'operations': 'list[StreamJobOperation]',
        'partner_id': 'str',
        'reload_schedule': 'dict(str, object)',
        'rockset': 'dict(str, object)',
        'rockset_metadata': 'StreamJobRocksetMetadata',
        'slug': 'str',
        'test_flink_conf': 'dict(str, object)',
        'yarn_applications': 'list[dict(str, object)]'
    }

    attribute_map = {
        'id': '_id',
        'client_id': 'client_id',
        'datahub': 'datahub',
        'datahub_metadata': 'datahub_metadata',
        'decodable_conf': 'decodable_conf',
        'druid': 'druid',
        'druid_metadata': 'druid_metadata',
        'dt_u': 'dt_u',
        'execution_mode': 'execution_mode',
        'flink_conf': 'flink_conf',
        'flink_jobs': 'flink_jobs',
        'job_name': 'job_name',
        'operations': 'operations',
        'partner_id': 'partner_id',
        'reload_schedule': 'reload_schedule',
        'rockset': 'rockset',
        'rockset_metadata': 'rockset_metadata',
        'slug': 'slug',
        'test_flink_conf': 'test_flink_conf',
        'yarn_applications': 'yarn_applications'
    }

    def __init__(self, id=None, client_id=None, datahub=None, datahub_metadata=None, decodable_conf=None, druid=None, druid_metadata=None, dt_u=None, execution_mode=None, flink_conf=None, flink_jobs=None, job_name=None, operations=None, partner_id=None, reload_schedule=None, rockset=None, rockset_metadata=None, slug=None, test_flink_conf=None, yarn_applications=None):  # noqa: E501
        """StreamJob - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._datahub = None
        self._datahub_metadata = None
        self._decodable_conf = None
        self._druid = None
        self._druid_metadata = None
        self._dt_u = None
        self._execution_mode = None
        self._flink_conf = None
        self._flink_jobs = None
        self._job_name = None
        self._operations = None
        self._partner_id = None
        self._reload_schedule = None
        self._rockset = None
        self._rockset_metadata = None
        self._slug = None
        self._test_flink_conf = None
        self._yarn_applications = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if datahub is not None:
            self.datahub = datahub
        if datahub_metadata is not None:
            self.datahub_metadata = datahub_metadata
        if decodable_conf is not None:
            self.decodable_conf = decodable_conf
        if druid is not None:
            self.druid = druid
        if druid_metadata is not None:
            self.druid_metadata = druid_metadata
        if dt_u is not None:
            self.dt_u = dt_u
        self.execution_mode = execution_mode
        if flink_conf is not None:
            self.flink_conf = flink_conf
        if flink_jobs is not None:
            self.flink_jobs = flink_jobs
        self.job_name = job_name
        if operations is not None:
            self.operations = operations
        if partner_id is not None:
            self.partner_id = partner_id
        if reload_schedule is not None:
            self.reload_schedule = reload_schedule
        if rockset is not None:
            self.rockset = rockset
        if rockset_metadata is not None:
            self.rockset_metadata = rockset_metadata
        if slug is not None:
            self.slug = slug
        if test_flink_conf is not None:
            self.test_flink_conf = test_flink_conf
        if yarn_applications is not None:
            self.yarn_applications = yarn_applications

    @property
    def id(self):
        """Gets the id of this StreamJob.  # noqa: E501


        :return: The id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StreamJob.


        :param id: The id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this StreamJob.  # noqa: E501


        :return: The client_id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this StreamJob.


        :param client_id: The client_id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def datahub(self):
        """Gets the datahub of this StreamJob.  # noqa: E501


        :return: The datahub of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._datahub

    @datahub.setter
    def datahub(self, datahub):
        """Sets the datahub of this StreamJob.


        :param datahub: The datahub of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._datahub = datahub

    @property
    def datahub_metadata(self):
        """Gets the datahub_metadata of this StreamJob.  # noqa: E501


        :return: The datahub_metadata of this StreamJob.  # noqa: E501
        :rtype: StreamJobDataHubMetadata
        """
        return self._datahub_metadata

    @datahub_metadata.setter
    def datahub_metadata(self, datahub_metadata):
        """Sets the datahub_metadata of this StreamJob.


        :param datahub_metadata: The datahub_metadata of this StreamJob.  # noqa: E501
        :type: StreamJobDataHubMetadata
        """

        self._datahub_metadata = datahub_metadata

    @property
    def decodable_conf(self):
        """Gets the decodable_conf of this StreamJob.  # noqa: E501


        :return: The decodable_conf of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._decodable_conf

    @decodable_conf.setter
    def decodable_conf(self, decodable_conf):
        """Sets the decodable_conf of this StreamJob.


        :param decodable_conf: The decodable_conf of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._decodable_conf = decodable_conf

    @property
    def druid(self):
        """Gets the druid of this StreamJob.  # noqa: E501


        :return: The druid of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._druid

    @druid.setter
    def druid(self, druid):
        """Sets the druid of this StreamJob.


        :param druid: The druid of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._druid = druid

    @property
    def druid_metadata(self):
        """Gets the druid_metadata of this StreamJob.  # noqa: E501


        :return: The druid_metadata of this StreamJob.  # noqa: E501
        :rtype: StreamJobDruidMetadata
        """
        return self._druid_metadata

    @druid_metadata.setter
    def druid_metadata(self, druid_metadata):
        """Sets the druid_metadata of this StreamJob.


        :param druid_metadata: The druid_metadata of this StreamJob.  # noqa: E501
        :type: StreamJobDruidMetadata
        """

        self._druid_metadata = druid_metadata

    @property
    def dt_u(self):
        """Gets the dt_u of this StreamJob.  # noqa: E501


        :return: The dt_u of this StreamJob.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this StreamJob.


        :param dt_u: The dt_u of this StreamJob.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def execution_mode(self):
        """Gets the execution_mode of this StreamJob.  # noqa: E501


        :return: The execution_mode of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this StreamJob.


        :param execution_mode: The execution_mode of this StreamJob.  # noqa: E501
        :type: str
        """
        if execution_mode is None:
            raise ValueError("Invalid value for `execution_mode`, must not be `None`")  # noqa: E501

        self._execution_mode = execution_mode

    @property
    def flink_conf(self):
        """Gets the flink_conf of this StreamJob.  # noqa: E501


        :return: The flink_conf of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._flink_conf

    @flink_conf.setter
    def flink_conf(self, flink_conf):
        """Sets the flink_conf of this StreamJob.


        :param flink_conf: The flink_conf of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._flink_conf = flink_conf

    @property
    def flink_jobs(self):
        """Gets the flink_jobs of this StreamJob.  # noqa: E501


        :return: The flink_jobs of this StreamJob.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._flink_jobs

    @flink_jobs.setter
    def flink_jobs(self, flink_jobs):
        """Sets the flink_jobs of this StreamJob.


        :param flink_jobs: The flink_jobs of this StreamJob.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._flink_jobs = flink_jobs

    @property
    def job_name(self):
        """Gets the job_name of this StreamJob.  # noqa: E501


        :return: The job_name of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StreamJob.


        :param job_name: The job_name of this StreamJob.  # noqa: E501
        :type: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")  # noqa: E501

        self._job_name = job_name

    @property
    def operations(self):
        """Gets the operations of this StreamJob.  # noqa: E501


        :return: The operations of this StreamJob.  # noqa: E501
        :rtype: list[StreamJobOperation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this StreamJob.


        :param operations: The operations of this StreamJob.  # noqa: E501
        :type: list[StreamJobOperation]
        """

        self._operations = operations

    @property
    def partner_id(self):
        """Gets the partner_id of this StreamJob.  # noqa: E501


        :return: The partner_id of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._partner_id

    @partner_id.setter
    def partner_id(self, partner_id):
        """Sets the partner_id of this StreamJob.


        :param partner_id: The partner_id of this StreamJob.  # noqa: E501
        :type: str
        """

        self._partner_id = partner_id

    @property
    def reload_schedule(self):
        """Gets the reload_schedule of this StreamJob.  # noqa: E501


        :return: The reload_schedule of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._reload_schedule

    @reload_schedule.setter
    def reload_schedule(self, reload_schedule):
        """Sets the reload_schedule of this StreamJob.


        :param reload_schedule: The reload_schedule of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._reload_schedule = reload_schedule

    @property
    def rockset(self):
        """Gets the rockset of this StreamJob.  # noqa: E501


        :return: The rockset of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._rockset

    @rockset.setter
    def rockset(self, rockset):
        """Sets the rockset of this StreamJob.


        :param rockset: The rockset of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._rockset = rockset

    @property
    def rockset_metadata(self):
        """Gets the rockset_metadata of this StreamJob.  # noqa: E501


        :return: The rockset_metadata of this StreamJob.  # noqa: E501
        :rtype: StreamJobRocksetMetadata
        """
        return self._rockset_metadata

    @rockset_metadata.setter
    def rockset_metadata(self, rockset_metadata):
        """Sets the rockset_metadata of this StreamJob.


        :param rockset_metadata: The rockset_metadata of this StreamJob.  # noqa: E501
        :type: StreamJobRocksetMetadata
        """

        self._rockset_metadata = rockset_metadata

    @property
    def slug(self):
        """Gets the slug of this StreamJob.  # noqa: E501


        :return: The slug of this StreamJob.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this StreamJob.


        :param slug: The slug of this StreamJob.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def test_flink_conf(self):
        """Gets the test_flink_conf of this StreamJob.  # noqa: E501


        :return: The test_flink_conf of this StreamJob.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._test_flink_conf

    @test_flink_conf.setter
    def test_flink_conf(self, test_flink_conf):
        """Sets the test_flink_conf of this StreamJob.


        :param test_flink_conf: The test_flink_conf of this StreamJob.  # noqa: E501
        :type: dict(str, object)
        """

        self._test_flink_conf = test_flink_conf

    @property
    def yarn_applications(self):
        """Gets the yarn_applications of this StreamJob.  # noqa: E501


        :return: The yarn_applications of this StreamJob.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._yarn_applications

    @yarn_applications.setter
    def yarn_applications(self, yarn_applications):
        """Sets the yarn_applications of this StreamJob.


        :param yarn_applications: The yarn_applications of this StreamJob.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._yarn_applications = yarn_applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneConf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'destinations': 'list[CycloneConfDestination]',
        'dt_u': 'datetime',
        'is_etl': 'bool',
        'last_run': 'datetime',
        'last_run_lengths_secs': 'int',
        'last_run_records_sent': 'int',
        'last_server_id': 'str',
        'last_server_name': 'str',
        'name': 'str',
        'old_name': 'str',
        'run_once': 'bool',
        'run_once_complete': 'bool',
        'schedule': 'str',
        'schedules': 'list[str]',
        'snapshot': 'bool',
        'snapshot_config': 'CycloneConfSnapshotConfig',
        'source': 'CycloneConfSource',
        'status': 'str',
        'status_dt_u': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'destinations': 'destinations',
        'dt_u': 'dt_u',
        'is_etl': 'is_etl',
        'last_run': 'last_run',
        'last_run_lengths_secs': 'last_run_lengths_secs',
        'last_run_records_sent': 'last_run_records_sent',
        'last_server_id': 'last_server_id',
        'last_server_name': 'last_server_name',
        'name': 'name',
        'old_name': 'old_name',
        'run_once': 'run_once',
        'run_once_complete': 'run_once_complete',
        'schedule': 'schedule',
        'schedules': 'schedules',
        'snapshot': 'snapshot',
        'snapshot_config': 'snapshot_config',
        'source': 'source',
        'status': 'status',
        'status_dt_u': 'status_dt_u'
    }

    def __init__(self, description=None, destinations=None, dt_u=None, is_etl=None, last_run=None, last_run_lengths_secs=None, last_run_records_sent=None, last_server_id=None, last_server_name=None, name=None, old_name=None, run_once=None, run_once_complete=None, schedule=None, schedules=None, snapshot=None, snapshot_config=None, source=None, status=None, status_dt_u=None):  # noqa: E501
        """CycloneConf - a model defined in OpenAPI"""  # noqa: E501

        self._description = None
        self._destinations = None
        self._dt_u = None
        self._is_etl = None
        self._last_run = None
        self._last_run_lengths_secs = None
        self._last_run_records_sent = None
        self._last_server_id = None
        self._last_server_name = None
        self._name = None
        self._old_name = None
        self._run_once = None
        self._run_once_complete = None
        self._schedule = None
        self._schedules = None
        self._snapshot = None
        self._snapshot_config = None
        self._source = None
        self._status = None
        self._status_dt_u = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.destinations = destinations
        if dt_u is not None:
            self.dt_u = dt_u
        if is_etl is not None:
            self.is_etl = is_etl
        if last_run is not None:
            self.last_run = last_run
        if last_run_lengths_secs is not None:
            self.last_run_lengths_secs = last_run_lengths_secs
        if last_run_records_sent is not None:
            self.last_run_records_sent = last_run_records_sent
        if last_server_id is not None:
            self.last_server_id = last_server_id
        if last_server_name is not None:
            self.last_server_name = last_server_name
        self.name = name
        if old_name is not None:
            self.old_name = old_name
        if run_once is not None:
            self.run_once = run_once
        if run_once_complete is not None:
            self.run_once_complete = run_once_complete
        if schedule is not None:
            self.schedule = schedule
        if schedules is not None:
            self.schedules = schedules
        if snapshot is not None:
            self.snapshot = snapshot
        if snapshot_config is not None:
            self.snapshot_config = snapshot_config
        self.source = source
        self.status = status
        if status_dt_u is not None:
            self.status_dt_u = status_dt_u

    @property
    def description(self):
        """Gets the description of this CycloneConf.  # noqa: E501


        :return: The description of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CycloneConf.


        :param description: The description of this CycloneConf.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def destinations(self):
        """Gets the destinations of this CycloneConf.  # noqa: E501


        :return: The destinations of this CycloneConf.  # noqa: E501
        :rtype: list[CycloneConfDestination]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this CycloneConf.


        :param destinations: The destinations of this CycloneConf.  # noqa: E501
        :type: list[CycloneConfDestination]
        """
        if destinations is None:
            raise ValueError("Invalid value for `destinations`, must not be `None`")  # noqa: E501

        self._destinations = destinations

    @property
    def dt_u(self):
        """Gets the dt_u of this CycloneConf.  # noqa: E501


        :return: The dt_u of this CycloneConf.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """Sets the dt_u of this CycloneConf.


        :param dt_u: The dt_u of this CycloneConf.  # noqa: E501
        :type: datetime
        """

        self._dt_u = dt_u

    @property
    def is_etl(self):
        """Gets the is_etl of this CycloneConf.  # noqa: E501


        :return: The is_etl of this CycloneConf.  # noqa: E501
        :rtype: bool
        """
        return self._is_etl

    @is_etl.setter
    def is_etl(self, is_etl):
        """Sets the is_etl of this CycloneConf.


        :param is_etl: The is_etl of this CycloneConf.  # noqa: E501
        :type: bool
        """

        self._is_etl = is_etl

    @property
    def last_run(self):
        """Gets the last_run of this CycloneConf.  # noqa: E501


        :return: The last_run of this CycloneConf.  # noqa: E501
        :rtype: datetime
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this CycloneConf.


        :param last_run: The last_run of this CycloneConf.  # noqa: E501
        :type: datetime
        """

        self._last_run = last_run

    @property
    def last_run_lengths_secs(self):
        """Gets the last_run_lengths_secs of this CycloneConf.  # noqa: E501


        :return: The last_run_lengths_secs of this CycloneConf.  # noqa: E501
        :rtype: int
        """
        return self._last_run_lengths_secs

    @last_run_lengths_secs.setter
    def last_run_lengths_secs(self, last_run_lengths_secs):
        """Sets the last_run_lengths_secs of this CycloneConf.


        :param last_run_lengths_secs: The last_run_lengths_secs of this CycloneConf.  # noqa: E501
        :type: int
        """

        self._last_run_lengths_secs = last_run_lengths_secs

    @property
    def last_run_records_sent(self):
        """Gets the last_run_records_sent of this CycloneConf.  # noqa: E501


        :return: The last_run_records_sent of this CycloneConf.  # noqa: E501
        :rtype: int
        """
        return self._last_run_records_sent

    @last_run_records_sent.setter
    def last_run_records_sent(self, last_run_records_sent):
        """Sets the last_run_records_sent of this CycloneConf.


        :param last_run_records_sent: The last_run_records_sent of this CycloneConf.  # noqa: E501
        :type: int
        """

        self._last_run_records_sent = last_run_records_sent

    @property
    def last_server_id(self):
        """Gets the last_server_id of this CycloneConf.  # noqa: E501


        :return: The last_server_id of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._last_server_id

    @last_server_id.setter
    def last_server_id(self, last_server_id):
        """Sets the last_server_id of this CycloneConf.


        :param last_server_id: The last_server_id of this CycloneConf.  # noqa: E501
        :type: str
        """

        self._last_server_id = last_server_id

    @property
    def last_server_name(self):
        """Gets the last_server_name of this CycloneConf.  # noqa: E501


        :return: The last_server_name of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._last_server_name

    @last_server_name.setter
    def last_server_name(self, last_server_name):
        """Sets the last_server_name of this CycloneConf.


        :param last_server_name: The last_server_name of this CycloneConf.  # noqa: E501
        :type: str
        """

        self._last_server_name = last_server_name

    @property
    def name(self):
        """Gets the name of this CycloneConf.  # noqa: E501


        :return: The name of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CycloneConf.


        :param name: The name of this CycloneConf.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def old_name(self):
        """Gets the old_name of this CycloneConf.  # noqa: E501


        :return: The old_name of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name):
        """Sets the old_name of this CycloneConf.


        :param old_name: The old_name of this CycloneConf.  # noqa: E501
        :type: str
        """

        self._old_name = old_name

    @property
    def run_once(self):
        """Gets the run_once of this CycloneConf.  # noqa: E501


        :return: The run_once of this CycloneConf.  # noqa: E501
        :rtype: bool
        """
        return self._run_once

    @run_once.setter
    def run_once(self, run_once):
        """Sets the run_once of this CycloneConf.


        :param run_once: The run_once of this CycloneConf.  # noqa: E501
        :type: bool
        """

        self._run_once = run_once

    @property
    def run_once_complete(self):
        """Gets the run_once_complete of this CycloneConf.  # noqa: E501


        :return: The run_once_complete of this CycloneConf.  # noqa: E501
        :rtype: bool
        """
        return self._run_once_complete

    @run_once_complete.setter
    def run_once_complete(self, run_once_complete):
        """Sets the run_once_complete of this CycloneConf.


        :param run_once_complete: The run_once_complete of this CycloneConf.  # noqa: E501
        :type: bool
        """

        self._run_once_complete = run_once_complete

    @property
    def schedule(self):
        """Gets the schedule of this CycloneConf.  # noqa: E501


        :return: The schedule of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CycloneConf.


        :param schedule: The schedule of this CycloneConf.  # noqa: E501
        :type: str
        """

        self._schedule = schedule

    @property
    def schedules(self):
        """Gets the schedules of this CycloneConf.  # noqa: E501


        :return: The schedules of this CycloneConf.  # noqa: E501
        :rtype: list[str]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this CycloneConf.


        :param schedules: The schedules of this CycloneConf.  # noqa: E501
        :type: list[str]
        """

        self._schedules = schedules

    @property
    def snapshot(self):
        """Gets the snapshot of this CycloneConf.  # noqa: E501


        :return: The snapshot of this CycloneConf.  # noqa: E501
        :rtype: bool
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this CycloneConf.


        :param snapshot: The snapshot of this CycloneConf.  # noqa: E501
        :type: bool
        """

        self._snapshot = snapshot

    @property
    def snapshot_config(self):
        """Gets the snapshot_config of this CycloneConf.  # noqa: E501


        :return: The snapshot_config of this CycloneConf.  # noqa: E501
        :rtype: CycloneConfSnapshotConfig
        """
        return self._snapshot_config

    @snapshot_config.setter
    def snapshot_config(self, snapshot_config):
        """Sets the snapshot_config of this CycloneConf.


        :param snapshot_config: The snapshot_config of this CycloneConf.  # noqa: E501
        :type: CycloneConfSnapshotConfig
        """

        self._snapshot_config = snapshot_config

    @property
    def source(self):
        """Gets the source of this CycloneConf.  # noqa: E501


        :return: The source of this CycloneConf.  # noqa: E501
        :rtype: CycloneConfSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CycloneConf.


        :param source: The source of this CycloneConf.  # noqa: E501
        :type: CycloneConfSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def status(self):
        """Gets the status of this CycloneConf.  # noqa: E501


        :return: The status of this CycloneConf.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CycloneConf.


        :param status: The status of this CycloneConf.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_dt_u(self):
        """Gets the status_dt_u of this CycloneConf.  # noqa: E501


        :return: The status_dt_u of this CycloneConf.  # noqa: E501
        :rtype: datetime
        """
        return self._status_dt_u

    @status_dt_u.setter
    def status_dt_u(self, status_dt_u):
        """Sets the status_dt_u of this CycloneConf.


        :param status_dt_u: The status_dt_u of this CycloneConf.  # noqa: E501
        :type: datetime
        """

        self._status_dt_u = status_dt_u

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneConf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

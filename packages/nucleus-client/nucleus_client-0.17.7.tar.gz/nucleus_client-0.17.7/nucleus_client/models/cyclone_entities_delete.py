# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneEntitiesDelete(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_id': 'str',
        'cyclone_client_id': 'str',
        'entity_type': 'str',
        'external_keys': 'list[str]',
        'integration_id': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'cyclone_client_id': 'cyclone_client_id',
        'entity_type': 'entity_type',
        'external_keys': 'external_keys',
        'integration_id': 'integration_id'
    }

    def __init__(self, client_id=None, cyclone_client_id=None, entity_type=None, external_keys=None, integration_id=None):  # noqa: E501
        """CycloneEntitiesDelete - a model defined in OpenAPI"""  # noqa: E501

        self._client_id = None
        self._cyclone_client_id = None
        self._entity_type = None
        self._external_keys = None
        self._integration_id = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if cyclone_client_id is not None:
            self.cyclone_client_id = cyclone_client_id
        self.entity_type = entity_type
        self.external_keys = external_keys
        if integration_id is not None:
            self.integration_id = integration_id

    @property
    def client_id(self):
        """Gets the client_id of this CycloneEntitiesDelete.  # noqa: E501


        :return: The client_id of this CycloneEntitiesDelete.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CycloneEntitiesDelete.


        :param client_id: The client_id of this CycloneEntitiesDelete.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def cyclone_client_id(self):
        """Gets the cyclone_client_id of this CycloneEntitiesDelete.  # noqa: E501


        :return: The cyclone_client_id of this CycloneEntitiesDelete.  # noqa: E501
        :rtype: str
        """
        return self._cyclone_client_id

    @cyclone_client_id.setter
    def cyclone_client_id(self, cyclone_client_id):
        """Sets the cyclone_client_id of this CycloneEntitiesDelete.


        :param cyclone_client_id: The cyclone_client_id of this CycloneEntitiesDelete.  # noqa: E501
        :type: str
        """

        self._cyclone_client_id = cyclone_client_id

    @property
    def entity_type(self):
        """Gets the entity_type of this CycloneEntitiesDelete.  # noqa: E501


        :return: The entity_type of this CycloneEntitiesDelete.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this CycloneEntitiesDelete.


        :param entity_type: The entity_type of this CycloneEntitiesDelete.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def external_keys(self):
        """Gets the external_keys of this CycloneEntitiesDelete.  # noqa: E501


        :return: The external_keys of this CycloneEntitiesDelete.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_keys

    @external_keys.setter
    def external_keys(self, external_keys):
        """Sets the external_keys of this CycloneEntitiesDelete.


        :param external_keys: The external_keys of this CycloneEntitiesDelete.  # noqa: E501
        :type: list[str]
        """
        if external_keys is None:
            raise ValueError("Invalid value for `external_keys`, must not be `None`")  # noqa: E501

        self._external_keys = external_keys

    @property
    def integration_id(self):
        """Gets the integration_id of this CycloneEntitiesDelete.  # noqa: E501


        :return: The integration_id of this CycloneEntitiesDelete.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this CycloneEntitiesDelete.


        :param integration_id: The integration_id of this CycloneEntitiesDelete.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneEntitiesDelete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

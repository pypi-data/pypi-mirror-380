# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class StreamJobDruidDatasource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'datasource_name': 'str',
        'max_ingested_event_time': 'datetime',
        'segment_count': 'int'
    }

    attribute_map = {
        'datasource_name': 'datasource_name',
        'max_ingested_event_time': 'max_ingested_event_time',
        'segment_count': 'segment_count'
    }

    def __init__(self, datasource_name=None, max_ingested_event_time=None, segment_count=None):  # noqa: E501
        """StreamJobDruidDatasource - a model defined in OpenAPI"""  # noqa: E501

        self._datasource_name = None
        self._max_ingested_event_time = None
        self._segment_count = None
        self.discriminator = None

        if datasource_name is not None:
            self.datasource_name = datasource_name
        if max_ingested_event_time is not None:
            self.max_ingested_event_time = max_ingested_event_time
        if segment_count is not None:
            self.segment_count = segment_count

    @property
    def datasource_name(self):
        """Gets the datasource_name of this StreamJobDruidDatasource.  # noqa: E501


        :return: The datasource_name of this StreamJobDruidDatasource.  # noqa: E501
        :rtype: str
        """
        return self._datasource_name

    @datasource_name.setter
    def datasource_name(self, datasource_name):
        """Sets the datasource_name of this StreamJobDruidDatasource.


        :param datasource_name: The datasource_name of this StreamJobDruidDatasource.  # noqa: E501
        :type: str
        """

        self._datasource_name = datasource_name

    @property
    def max_ingested_event_time(self):
        """Gets the max_ingested_event_time of this StreamJobDruidDatasource.  # noqa: E501


        :return: The max_ingested_event_time of this StreamJobDruidDatasource.  # noqa: E501
        :rtype: datetime
        """
        return self._max_ingested_event_time

    @max_ingested_event_time.setter
    def max_ingested_event_time(self, max_ingested_event_time):
        """Sets the max_ingested_event_time of this StreamJobDruidDatasource.


        :param max_ingested_event_time: The max_ingested_event_time of this StreamJobDruidDatasource.  # noqa: E501
        :type: datetime
        """

        self._max_ingested_event_time = max_ingested_event_time

    @property
    def segment_count(self):
        """Gets the segment_count of this StreamJobDruidDatasource.  # noqa: E501


        :return: The segment_count of this StreamJobDruidDatasource.  # noqa: E501
        :rtype: int
        """
        return self._segment_count

    @segment_count.setter
    def segment_count(self, segment_count):
        """Sets the segment_count of this StreamJobDruidDatasource.


        :param segment_count: The segment_count of this StreamJobDruidDatasource.  # noqa: E501
        :type: int
        """

        self._segment_count = segment_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StreamJobDruidDatasource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DatasetMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'active_metadata': 'dict(str, object)',
        'activity_type': 'str',
        'change_history': 'list[ChangeHistory]',
        'client_id': 'str',
        'created_by': 'str',
        'custom_metadata': 'dict(str, object)',
        'download_disabled': 'bool',
        'dt_create': 'datetime',
        'modified_by': 'str',
        'schema': 'dict(str, object)',
        'staged_metadata': 'dict(str, object)',
        'threshold': 'dict(str, object)'
    }

    attribute_map = {
        'id': '_id',
        'active_metadata': 'active_metadata',
        'activity_type': 'activity_type',
        'change_history': 'change_history',
        'client_id': 'client_id',
        'created_by': 'created_by',
        'custom_metadata': 'custom_metadata',
        'download_disabled': 'download_disabled',
        'dt_create': 'dt_create',
        'modified_by': 'modified_by',
        'schema': 'schema',
        'staged_metadata': 'staged_metadata',
        'threshold': 'threshold'
    }

    def __init__(self, id=None, active_metadata=None, activity_type=None, change_history=None, client_id=None, created_by=None, custom_metadata=None, download_disabled=None, dt_create=None, modified_by=None, schema=None, staged_metadata=None, threshold=None):  # noqa: E501
        """DatasetMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._active_metadata = None
        self._activity_type = None
        self._change_history = None
        self._client_id = None
        self._created_by = None
        self._custom_metadata = None
        self._download_disabled = None
        self._dt_create = None
        self._modified_by = None
        self._schema = None
        self._staged_metadata = None
        self._threshold = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if active_metadata is not None:
            self.active_metadata = active_metadata
        self.activity_type = activity_type
        if change_history is not None:
            self.change_history = change_history
        self.client_id = client_id
        if created_by is not None:
            self.created_by = created_by
        if custom_metadata is not None:
            self.custom_metadata = custom_metadata
        if download_disabled is not None:
            self.download_disabled = download_disabled
        if dt_create is not None:
            self.dt_create = dt_create
        if modified_by is not None:
            self.modified_by = modified_by
        if schema is not None:
            self.schema = schema
        if staged_metadata is not None:
            self.staged_metadata = staged_metadata
        if threshold is not None:
            self.threshold = threshold

    @property
    def id(self):
        """Gets the id of this DatasetMetadata.  # noqa: E501


        :return: The id of this DatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetMetadata.


        :param id: The id of this DatasetMetadata.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def active_metadata(self):
        """Gets the active_metadata of this DatasetMetadata.  # noqa: E501


        :return: The active_metadata of this DatasetMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._active_metadata

    @active_metadata.setter
    def active_metadata(self, active_metadata):
        """Sets the active_metadata of this DatasetMetadata.


        :param active_metadata: The active_metadata of this DatasetMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._active_metadata = active_metadata

    @property
    def activity_type(self):
        """Gets the activity_type of this DatasetMetadata.  # noqa: E501


        :return: The activity_type of this DatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this DatasetMetadata.


        :param activity_type: The activity_type of this DatasetMetadata.  # noqa: E501
        :type: str
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")  # noqa: E501

        self._activity_type = activity_type

    @property
    def change_history(self):
        """Gets the change_history of this DatasetMetadata.  # noqa: E501


        :return: The change_history of this DatasetMetadata.  # noqa: E501
        :rtype: list[ChangeHistory]
        """
        return self._change_history

    @change_history.setter
    def change_history(self, change_history):
        """Sets the change_history of this DatasetMetadata.


        :param change_history: The change_history of this DatasetMetadata.  # noqa: E501
        :type: list[ChangeHistory]
        """

        self._change_history = change_history

    @property
    def client_id(self):
        """Gets the client_id of this DatasetMetadata.  # noqa: E501


        :return: The client_id of this DatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DatasetMetadata.


        :param client_id: The client_id of this DatasetMetadata.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def created_by(self):
        """Gets the created_by of this DatasetMetadata.  # noqa: E501


        :return: The created_by of this DatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DatasetMetadata.


        :param created_by: The created_by of this DatasetMetadata.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this DatasetMetadata.  # noqa: E501


        :return: The custom_metadata of this DatasetMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this DatasetMetadata.


        :param custom_metadata: The custom_metadata of this DatasetMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_metadata = custom_metadata

    @property
    def download_disabled(self):
        """Gets the download_disabled of this DatasetMetadata.  # noqa: E501


        :return: The download_disabled of this DatasetMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._download_disabled

    @download_disabled.setter
    def download_disabled(self, download_disabled):
        """Sets the download_disabled of this DatasetMetadata.


        :param download_disabled: The download_disabled of this DatasetMetadata.  # noqa: E501
        :type: bool
        """

        self._download_disabled = download_disabled

    @property
    def dt_create(self):
        """Gets the dt_create of this DatasetMetadata.  # noqa: E501


        :return: The dt_create of this DatasetMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._dt_create

    @dt_create.setter
    def dt_create(self, dt_create):
        """Sets the dt_create of this DatasetMetadata.


        :param dt_create: The dt_create of this DatasetMetadata.  # noqa: E501
        :type: datetime
        """

        self._dt_create = dt_create

    @property
    def modified_by(self):
        """Gets the modified_by of this DatasetMetadata.  # noqa: E501


        :return: The modified_by of this DatasetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this DatasetMetadata.


        :param modified_by: The modified_by of this DatasetMetadata.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def schema(self):
        """Gets the schema of this DatasetMetadata.  # noqa: E501


        :return: The schema of this DatasetMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this DatasetMetadata.


        :param schema: The schema of this DatasetMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._schema = schema

    @property
    def staged_metadata(self):
        """Gets the staged_metadata of this DatasetMetadata.  # noqa: E501


        :return: The staged_metadata of this DatasetMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._staged_metadata

    @staged_metadata.setter
    def staged_metadata(self, staged_metadata):
        """Sets the staged_metadata of this DatasetMetadata.


        :param staged_metadata: The staged_metadata of this DatasetMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._staged_metadata = staged_metadata

    @property
    def threshold(self):
        """Gets the threshold of this DatasetMetadata.  # noqa: E501


        :return: The threshold of this DatasetMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this DatasetMetadata.


        :param threshold: The threshold of this DatasetMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

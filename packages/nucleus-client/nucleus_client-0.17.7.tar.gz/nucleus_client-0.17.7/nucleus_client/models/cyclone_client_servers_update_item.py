# coding: utf-8

"""
    Nucleus API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CycloneClientServersUpdateItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'add': 'bool',
        'client_ids_or_names': 'list[str]',
        'exact': 'bool',
        'remove': 'bool',
        'server_ids_or_names': 'list[str]'
    }

    attribute_map = {
        'add': 'add',
        'client_ids_or_names': 'client_ids_or_names',
        'exact': 'exact',
        'remove': 'remove',
        'server_ids_or_names': 'server_ids_or_names'
    }

    def __init__(self, add=None, client_ids_or_names=None, exact=None, remove=None, server_ids_or_names=None):  # noqa: E501
        """CycloneClientServersUpdateItem - a model defined in OpenAPI"""  # noqa: E501

        self._add = None
        self._client_ids_or_names = None
        self._exact = None
        self._remove = None
        self._server_ids_or_names = None
        self.discriminator = None

        if add is not None:
            self.add = add
        self.client_ids_or_names = client_ids_or_names
        if exact is not None:
            self.exact = exact
        if remove is not None:
            self.remove = remove
        self.server_ids_or_names = server_ids_or_names

    @property
    def add(self):
        """Gets the add of this CycloneClientServersUpdateItem.  # noqa: E501


        :return: The add of this CycloneClientServersUpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._add

    @add.setter
    def add(self, add):
        """Sets the add of this CycloneClientServersUpdateItem.


        :param add: The add of this CycloneClientServersUpdateItem.  # noqa: E501
        :type: bool
        """

        self._add = add

    @property
    def client_ids_or_names(self):
        """Gets the client_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501


        :return: The client_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_ids_or_names

    @client_ids_or_names.setter
    def client_ids_or_names(self, client_ids_or_names):
        """Sets the client_ids_or_names of this CycloneClientServersUpdateItem.


        :param client_ids_or_names: The client_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501
        :type: list[str]
        """
        if client_ids_or_names is None:
            raise ValueError("Invalid value for `client_ids_or_names`, must not be `None`")  # noqa: E501

        self._client_ids_or_names = client_ids_or_names

    @property
    def exact(self):
        """Gets the exact of this CycloneClientServersUpdateItem.  # noqa: E501


        :return: The exact of this CycloneClientServersUpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._exact

    @exact.setter
    def exact(self, exact):
        """Sets the exact of this CycloneClientServersUpdateItem.


        :param exact: The exact of this CycloneClientServersUpdateItem.  # noqa: E501
        :type: bool
        """

        self._exact = exact

    @property
    def remove(self):
        """Gets the remove of this CycloneClientServersUpdateItem.  # noqa: E501


        :return: The remove of this CycloneClientServersUpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this CycloneClientServersUpdateItem.


        :param remove: The remove of this CycloneClientServersUpdateItem.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    @property
    def server_ids_or_names(self):
        """Gets the server_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501


        :return: The server_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._server_ids_or_names

    @server_ids_or_names.setter
    def server_ids_or_names(self, server_ids_or_names):
        """Sets the server_ids_or_names of this CycloneClientServersUpdateItem.


        :param server_ids_or_names: The server_ids_or_names of this CycloneClientServersUpdateItem.  # noqa: E501
        :type: list[str]
        """
        if server_ids_or_names is None:
            raise ValueError("Invalid value for `server_ids_or_names`, must not be `None`")  # noqa: E501

        self._server_ids_or_names = server_ids_or_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CycloneClientServersUpdateItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

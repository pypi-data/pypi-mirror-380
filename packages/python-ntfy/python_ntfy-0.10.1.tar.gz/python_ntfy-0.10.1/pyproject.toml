[project]
name = "python-ntfy"
version = "0.10.1"
description = "An easy-to-use library for the ntfy notification service."
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
dependencies = ["requests>=2.31.0"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Communications",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["ntfy", "notifications", "push", "http", "api"]
authors = [{ name = "Matthew Cane", email = "matthew.cane0@gmail.com" }]

[project.urls]
Homepage = "https://github.com/matthewcane/python-ntfy"
Documentation = "https://matthewcane.github.io/python-ntfy/"
Repository = "https://github.com/matthewcane/python-ntfy"
Issues = "https://github.com/matthewcane/python-ntfy/issues"
Changelog = "https://github.com/matthewcane/python-ntfy/releases"

[build-system]
requires = ["uv_build"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "python_ntfy"
module-root = ""

[dependency-groups]
dev = [
    "mkdocstrings[python]>=0.26.2",
    "mypy                >=1.12.0",
    "pytest              >=7.4.1",
    "python-dotenv       >=1.0.0",
    "pytest-asyncio      >=0.21.1",
    "pytest-codecov      >=0.5.1",
    "ruff                >=0.7",
    "mkdocs-material     >=9.5.41",
    "mkdocstrings-python >=1.12.1",
    "types-pygments      >=2.18.0.20240506",
    "types-colorama      >=0.4.15.20240311",
    "types-requests      >=2.32.0.20241016",
    "types-setuptools    >=75.2.0.20241018",
]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint]
select = [
    "E",    # PycodeStyle errors
    "W",    # PycodeStyle warnings
    "F",    # PyFlakes
    "I",    # Isort
    "N",    # pep8-naming
    "D",    # Pydocstyle
    "UP",   # PyUpgrade
    "ANN",  # Flake8-annotations
    "S",    # Flake8-bandit
    "BLE",  # Flake8-blind-except
    "B",    # Flake8-bugbear
    "A",    # Flake8-builtins
    "C4",   # Flake8-comprehensions
    "T10",  # Flake8-debugger
    "EM",   # Flake8-errmessages
    "Q",    # Flake8-quotes
    "RET",  # Flake8-return
    "TRY",  # Triceratops
    "FURB", # Refurb
    "RUF",  # Ruff
    "PERF", # Perflint
]
ignore = [
    "E501",   # Line too long
    "D103",   # Missing docstring in public function
    "D417",   # Undocumented parameters
    "D104",   # First line of docstring should be in imperative moof
    "D100",   # Missing docstring in public module
    "ANN001", # Missing type annotation for function argument
    "S101",   # Use of assert detected
    "TRY003", # Use of vanilla exception messages
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=python_ntfy",
    "--cov-fail-under=95",
    "--cov-report=term-missing",
]

[tool.mypy]
python_version = "3.12"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
no_implicit_optional = true
strict_equality = true
pretty = true
# Default expectations for the codebase; public modules may override to be stricter.
disallow_incomplete_defs = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["python_ntfy.client", "python_ntfy.__init__"]
disallow_incomplete_defs = true
disallow_untyped_defs = true

[tool.ty.environment]
root = ["."]
python = "./.venv"

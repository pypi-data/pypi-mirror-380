from _typeshed import Incomplete
from minjiang_host_client.utils.device import Device as Device
from minjiang_host_client.utils.local import get_cache_dir as get_cache_dir

class DeviceManager:
    plugin_desc: Incomplete
    plugins: Incomplete
    device_detail: Incomplete
    device_models: Incomplete
    device_group_name: Incomplete
    group_dir: Incomplete
    group_dev_dir: Incomplete
    group_snapshot_dir: Incomplete
    conn: Incomplete
    lock: Incomplete
    dev_obj_modified: Incomplete
    dev_obj: dict[str, Device]
    dev_sn: Incomplete
    ctrl_to_dev_chl: Incomplete
    dev_chl_to_ctrl: Incomplete
    ctrl_to_dev_obj: Incomplete
    def __init__(self, device_group_name: str) -> None: ...
    def get_model_config_items(self, model: str): ...
    def get_plugin_status(self): ...
    def get_dev_obj(self, sn: str = None): ...
    def create_dev_obj(self, sn: str = None, model: str = None, name: str = None, enable: bool = True): ...
    def get_devices_list_by_group(self) -> list[dict]: ...
    def get_device_snapshot(self, sn): ...
    def scan(self): ...
    def refresh_parameters_from_file(self) -> None: ...
    def add_device(self, device: dict): ...
    def select_devices(self, sn_list: list[str]): ...
    def delete_device(self, sn: str): ...
    def get_device(self, sn: str) -> dict | None: ...
    def get_devices_by_model(self, model: str) -> dict | None: ...
    def get_mapping_by_group(self): ...
    def update_device_file(self, sn: str, update_data: dict): ...
    def connect(self, connect_order_by_dev_model: list[str] = None): ...
    def snapshot(self) -> None: ...
    def stop_trigger(self, ctrl: str | list[str] = None): ...
    def set_shots(self, shots: int): ...
    def upload_waveforms(self, ctrl_chl_waveforms: dict): ...
    def set_channel_trigger_delay(self, ctrl_chl_delay: dict): ...
    def set_channel_offset(self, ctrl_chl_offset: dict): ...
    def set_adc_demod(self, ctrl_chl_demod) -> None: ...
    def run(self, run_order_by_dev_model: list[str] = None): ...
    def download_iq(self, ctrl_chl_adc): ...
    def set_enable_z_dc(self, ctrl_chl_dc_enable) -> None: ...
    def set_disable_z_dc(self, ctrl_chl_dc_disable) -> None: ...
    def set_z_dc(self, ctrl_chl_dc_vol) -> None: ...

import requests
from _typeshed import Incomplete
from minjiang_client.experiment.experiment import Experiment
from minjiang_client.experiment.result import Result
from minjiang_client.group.cloud_group import CloudGroup
from minjiang_client.utils.json_database import JSONDatatable as JSONDatatable
from typing import Any

class DirectLinkWorkerClient:
    base_url: Incomplete
    session: requests.Session | None
    def __init__(self, port: int = 6887) -> None: ...
    def upload_exp(self, exp_obj: Experiment, group_name: str, space_name: str, exp_id: int = None) -> dict: ...
    def get_next_exp(self) -> tuple[dict[str, Any] | None, list]: ...
    def terminate_direct_exp(self, direct_exp_id: int) -> bool: ...
    def upload_result(self, direct_exp_id: int, result: dict[str, Any]) -> bool: ...
    def get_result(self, direct_exp_id: int, waiting_for_finished: bool = True, timeout: int = 300) -> Result | None: ...

class DirectGroup(CloudGroup):
    minio: Incomplete
    push_res_reg: Incomplete
    direct_client: Incomplete
    current_direct_exp_id: Incomplete
    current_exp_id: Incomplete
    def __init__(self, group_name: str | None = None, space_name: str | None = None, space_version: int | None = None, space_parameters: dict[str, Any] | None = None, temporary_parameters: dict[str, Any] | None = None, direct_server_port: int = 6887) -> None: ...
    def submit_direct_exp(self, exp_obj: Experiment, reg_cloud_exp_id: bool = False, task_id: int | None = None) -> int: ...
    def pull_direct_result(self, direct_exp_id: int, waiting_for_finished: bool = True, timeout: int = 300) -> Result | None: ...
    def reg_exp_id(self, task_id: int, exp_obj: Experiment | None = None, data_shape: dict | None = None, title: str | None = None, desc: str | None = None, space_timestamp: int | None = None): ...
    def push_result(self, exp_id: int, direct_exp_id: int, res_obj: Result): ...
    def fit_png(self, exp_id: int, device_group_name: str, create_time: int): ...
    def fit_tbl(self, exp_id: int, device_group_name: str, create_time: int, data: dict | None = None): ...
    def submit_fit(self, task_id: int, exp_id: int, fit_png: str, fit_tbl: str, space_parameters: dict | None = None): ...
    def terminate_direct_exp(self, direct_exp_id: int | None = None) -> bool: ...
    def terminate_exp(self, exp_id: int): ...
    def run_exp(self, exp_id: int): ...
    def complete_exp(self, exp_id: int): ...
    def error_exp(self, exp_id: int): ...

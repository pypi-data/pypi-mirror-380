from _typeshed import Incomplete
from minjiang_client.utils.config_manager import ConfigManager
from typing import Any

class Device:
    name: Incomplete
    model: Incomplete
    sn: Incomplete
    config_manager: Incomplete
    conn: Incomplete
    filename: Incomplete
    latest_file_update: int
    parameter_cache: Incomplete
    force_update_fields: Incomplete
    snapshot_file: Incomplete
    def __init__(self, filename: str = None) -> None: ...
    @staticmethod
    def setup_config(cm: ConfigManager): ...
    @staticmethod
    def setup_command() -> None: ...
    @property
    def cm(self) -> ConfigManager: ...
    @property
    def parameters(self) -> dict: ...
    @property
    def enable(self): ...
    @enable.setter
    def enable(self, value: bool): ...
    def check_update(self, field: str, value: Any, chn: Any = None): ...
    def load_file(self): ...
    def save_file(self) -> None: ...
    def update_device_file(self, field: str | list[str], value: Any | list[Any]): ...
    def snapshot(self) -> None: ...
    def connect(self) -> None: ...
    def refresh_parameters_from_file(self) -> None: ...
    def upload_to_device(self, field: str, value: Any, **kw): ...
    def stop_trigger(self) -> None: ...
    def set_shots(self, shots) -> None: ...
    def set_channel_trigger_delay(self, dev_chl_delay: dict): ...
    def upload_waveforms(self, dev_chl_waves: dict): ...
    def set_adc_demod(self, dev_chl_demod: dict): ...
    def run(self) -> None: ...
    def switch_internal_trigger(self, internal_trigger: bool = True): ...
    def switch_dac_replay(self, dev_chl_replay) -> None: ...
    def download_iq(self, dev_chl_list) -> None: ...

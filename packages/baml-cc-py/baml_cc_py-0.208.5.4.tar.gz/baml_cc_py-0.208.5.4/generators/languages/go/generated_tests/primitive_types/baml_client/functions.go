// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

import (
    "context"

    "primitive_types/baml_client/types"
    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
)



func TestEmptyCollections(ctx context.Context, input string, opts ...CallOptionFunc) (types.PrimitiveArrays, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestEmptyCollections", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveArrays{}, err
        }

        if result.Error != nil {
            return types.PrimitiveArrays{}, result.Error
        }

        casted := (result.Data).(types.PrimitiveArrays)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestEmptyCollections", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveArrays{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.PrimitiveArrays{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.PrimitiveArrays), nil
            }
        }

        return types.PrimitiveArrays{}, fmt.Errorf("No data returned from stream")
    }
}


func TestMixedPrimitives(ctx context.Context, input string, opts ...CallOptionFunc) (types.MixedPrimitives, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestMixedPrimitives", encoded, callOpts.onTick)
        if err != nil {
            return types.MixedPrimitives{}, err
        }

        if result.Error != nil {
            return types.MixedPrimitives{}, result.Error
        }

        casted := (result.Data).(types.MixedPrimitives)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestMixedPrimitives", encoded, callOpts.onTick)
        if err != nil {
            return types.MixedPrimitives{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.MixedPrimitives{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.MixedPrimitives), nil
            }
        }

        return types.MixedPrimitives{}, fmt.Errorf("No data returned from stream")
    }
}


func TestPrimitiveArrays(ctx context.Context, input string, opts ...CallOptionFunc) (types.PrimitiveArrays, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestPrimitiveArrays", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveArrays{}, err
        }

        if result.Error != nil {
            return types.PrimitiveArrays{}, result.Error
        }

        casted := (result.Data).(types.PrimitiveArrays)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestPrimitiveArrays", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveArrays{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.PrimitiveArrays{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.PrimitiveArrays), nil
            }
        }

        return types.PrimitiveArrays{}, fmt.Errorf("No data returned from stream")
    }
}


func TestPrimitiveMaps(ctx context.Context, input string, opts ...CallOptionFunc) (types.PrimitiveMaps, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestPrimitiveMaps", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveMaps{}, err
        }

        if result.Error != nil {
            return types.PrimitiveMaps{}, result.Error
        }

        casted := (result.Data).(types.PrimitiveMaps)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestPrimitiveMaps", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveMaps{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.PrimitiveMaps{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.PrimitiveMaps), nil
            }
        }

        return types.PrimitiveMaps{}, fmt.Errorf("No data returned from stream")
    }
}


func TestPrimitiveTypes(ctx context.Context, input string, opts ...CallOptionFunc) (types.PrimitiveTypes, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestPrimitiveTypes", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveTypes{}, err
        }

        if result.Error != nil {
            return types.PrimitiveTypes{}, result.Error
        }

        casted := (result.Data).(types.PrimitiveTypes)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestPrimitiveTypes", encoded, callOpts.onTick)
        if err != nil {
            return types.PrimitiveTypes{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.PrimitiveTypes{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.PrimitiveTypes), nil
            }
        }

        return types.PrimitiveTypes{}, fmt.Errorf("No data returned from stream")
    }
}


func TestTopLevelBool(ctx context.Context, input string, opts ...CallOptionFunc) (bool, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestTopLevelBool", encoded, callOpts.onTick)
        if err != nil {
            return false, err
        }

        if result.Error != nil {
            return false, result.Error
        }

        casted := (result.Data).(bool)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelBool", encoded, callOpts.onTick)
        if err != nil {
            return false, err
        }

        for result := range channel {
            if result.Error != nil {
                return false, result.Error
            }

            if result.HasData {
                return result.Data.(bool), nil
            }
        }

        return false, fmt.Errorf("No data returned from stream")
    }
}


func TestTopLevelFloat(ctx context.Context, input string, opts ...CallOptionFunc) (float64, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestTopLevelFloat", encoded, callOpts.onTick)
        if err != nil {
            return 0.0, err
        }

        if result.Error != nil {
            return 0.0, result.Error
        }

        casted := (result.Data).(float64)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelFloat", encoded, callOpts.onTick)
        if err != nil {
            return 0.0, err
        }

        for result := range channel {
            if result.Error != nil {
                return 0.0, result.Error
            }

            if result.HasData {
                return result.Data.(float64), nil
            }
        }

        return 0.0, fmt.Errorf("No data returned from stream")
    }
}


func TestTopLevelInt(ctx context.Context, input string, opts ...CallOptionFunc) (int64, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestTopLevelInt", encoded, callOpts.onTick)
        if err != nil {
            return 0, err
        }

        if result.Error != nil {
            return 0, result.Error
        }

        casted := (result.Data).(int64)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelInt", encoded, callOpts.onTick)
        if err != nil {
            return 0, err
        }

        for result := range channel {
            if result.Error != nil {
                return 0, result.Error
            }

            if result.HasData {
                return result.Data.(int64), nil
            }
        }

        return 0, fmt.Errorf("No data returned from stream")
    }
}


func TestTopLevelNull(ctx context.Context, input string, opts ...CallOptionFunc) (any, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestTopLevelNull", encoded, callOpts.onTick)
        if err != nil {
            return nil, err
        }

        if result.Error != nil {
            return nil, result.Error
        }

        casted := (result.Data).(any)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelNull", encoded, callOpts.onTick)
        if err != nil {
            return nil, err
        }

        for result := range channel {
            if result.Error != nil {
                return nil, result.Error
            }

            if result.HasData {
                return result.Data.(any), nil
            }
        }

        return nil, fmt.Errorf("No data returned from stream")
    }
}


func TestTopLevelString(ctx context.Context, input string, opts ...CallOptionFunc) (string, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestTopLevelString", encoded, callOpts.onTick)
        if err != nil {
            return "", err
        }

        if result.Error != nil {
            return "", result.Error
        }

        casted := (result.Data).(string)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelString", encoded, callOpts.onTick)
        if err != nil {
            return "", err
        }

        for result := range channel {
            if result.Error != nil {
                return "", result.Error
            }

            if result.HasData {
                return result.Data.(string), nil
            }
        }

        return "", fmt.Errorf("No data returned from stream")
    }
}

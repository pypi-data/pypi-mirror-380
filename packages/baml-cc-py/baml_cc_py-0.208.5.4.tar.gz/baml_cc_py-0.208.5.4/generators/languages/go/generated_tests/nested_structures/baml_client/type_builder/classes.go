// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type AddressClassView struct {
    inner baml.ClassBuilder
}

func (t *AddressClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *AddressClassView) PropertyStreet() (ClassPropertyView, error) {
    return t.inner.Property("street")
}

func (t *AddressClassView) PropertyCity() (ClassPropertyView, error) {
    return t.inner.Property("city")
}

func (t *AddressClassView) PropertyState() (ClassPropertyView, error) {
    return t.inner.Property("state")
}

func (t *AddressClassView) PropertyCountry() (ClassPropertyView, error) {
    return t.inner.Property("country")
}

func (t *AddressClassView) PropertyPostalCode() (ClassPropertyView, error) {
    return t.inner.Property("postalCode")
}

func (t *AddressClassView) PropertyCoordinates() (ClassPropertyView, error) {
    return t.inner.Property("coordinates")
}


func (t *TypeBuilder) Address() (*AddressClassView, error) {
	bld, err := t.inner.Class("Address")
	if err != nil {
		return nil, err
	}
	return &AddressClassView{inner: bld}, nil
}

func (t *AddressClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ApprovalClassView struct {
    inner baml.ClassBuilder
}

func (t *ApprovalClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ApprovalClassView) PropertyApprover() (ClassPropertyView, error) {
    return t.inner.Property("approver")
}

func (t *ApprovalClassView) PropertyDate() (ClassPropertyView, error) {
    return t.inner.Property("date")
}

func (t *ApprovalClassView) PropertyAmount() (ClassPropertyView, error) {
    return t.inner.Property("amount")
}

func (t *ApprovalClassView) PropertyNotes() (ClassPropertyView, error) {
    return t.inner.Property("notes")
}


func (t *TypeBuilder) Approval() (*ApprovalClassView, error) {
	bld, err := t.inner.Class("Approval")
	if err != nil {
		return nil, err
	}
	return &ApprovalClassView{inner: bld}, nil
}

func (t *ApprovalClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type BudgetClassView struct {
    inner baml.ClassBuilder
}

func (t *BudgetClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *BudgetClassView) PropertyTotal() (ClassPropertyView, error) {
    return t.inner.Property("total")
}

func (t *BudgetClassView) PropertySpent() (ClassPropertyView, error) {
    return t.inner.Property("spent")
}

func (t *BudgetClassView) PropertyCategories() (ClassPropertyView, error) {
    return t.inner.Property("categories")
}

func (t *BudgetClassView) PropertyApprovals() (ClassPropertyView, error) {
    return t.inner.Property("approvals")
}


func (t *TypeBuilder) Budget() (*BudgetClassView, error) {
	bld, err := t.inner.Class("Budget")
	if err != nil {
		return nil, err
	}
	return &BudgetClassView{inner: bld}, nil
}

func (t *BudgetClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type CompanyClassView struct {
    inner baml.ClassBuilder
}

func (t *CompanyClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *CompanyClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *CompanyClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *CompanyClassView) PropertyAddress() (ClassPropertyView, error) {
    return t.inner.Property("address")
}

func (t *CompanyClassView) PropertyDepartments() (ClassPropertyView, error) {
    return t.inner.Property("departments")
}

func (t *CompanyClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) Company() (*CompanyClassView, error) {
	bld, err := t.inner.Class("Company")
	if err != nil {
		return nil, err
	}
	return &CompanyClassView{inner: bld}, nil
}

func (t *CompanyClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type CompanyMetadataClassView struct {
    inner baml.ClassBuilder
}

func (t *CompanyMetadataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *CompanyMetadataClassView) PropertyFounded() (ClassPropertyView, error) {
    return t.inner.Property("founded")
}

func (t *CompanyMetadataClassView) PropertyIndustry() (ClassPropertyView, error) {
    return t.inner.Property("industry")
}

func (t *CompanyMetadataClassView) PropertySize() (ClassPropertyView, error) {
    return t.inner.Property("size")
}

func (t *CompanyMetadataClassView) PropertyCertifications() (ClassPropertyView, error) {
    return t.inner.Property("certifications")
}

func (t *CompanyMetadataClassView) PropertyPartnerships() (ClassPropertyView, error) {
    return t.inner.Property("partnerships")
}


func (t *TypeBuilder) CompanyMetadata() (*CompanyMetadataClassView, error) {
	bld, err := t.inner.Class("CompanyMetadata")
	if err != nil {
		return nil, err
	}
	return &CompanyMetadataClassView{inner: bld}, nil
}

func (t *CompanyMetadataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ComplexNestedClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexNestedClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexNestedClassView) PropertyCompany() (ClassPropertyView, error) {
    return t.inner.Property("company")
}

func (t *ComplexNestedClassView) PropertyEmployees() (ClassPropertyView, error) {
    return t.inner.Property("employees")
}

func (t *ComplexNestedClassView) PropertyProjects() (ClassPropertyView, error) {
    return t.inner.Property("projects")
}


func (t *TypeBuilder) ComplexNested() (*ComplexNestedClassView, error) {
	bld, err := t.inner.Class("ComplexNested")
	if err != nil {
		return nil, err
	}
	return &ComplexNestedClassView{inner: bld}, nil
}

func (t *ComplexNestedClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ContactClassView struct {
    inner baml.ClassBuilder
}

func (t *ContactClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ContactClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ContactClassView) PropertyRelationship() (ClassPropertyView, error) {
    return t.inner.Property("relationship")
}

func (t *ContactClassView) PropertyPhone() (ClassPropertyView, error) {
    return t.inner.Property("phone")
}

func (t *ContactClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}


func (t *TypeBuilder) Contact() (*ContactClassView, error) {
	bld, err := t.inner.Class("Contact")
	if err != nil {
		return nil, err
	}
	return &ContactClassView{inner: bld}, nil
}

func (t *ContactClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type CoordinatesClassView struct {
    inner baml.ClassBuilder
}

func (t *CoordinatesClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *CoordinatesClassView) PropertyLatitude() (ClassPropertyView, error) {
    return t.inner.Property("latitude")
}

func (t *CoordinatesClassView) PropertyLongitude() (ClassPropertyView, error) {
    return t.inner.Property("longitude")
}


func (t *TypeBuilder) Coordinates() (*CoordinatesClassView, error) {
	bld, err := t.inner.Class("Coordinates")
	if err != nil {
		return nil, err
	}
	return &CoordinatesClassView{inner: bld}, nil
}

func (t *CoordinatesClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DeeplyNestedClassView struct {
    inner baml.ClassBuilder
}

func (t *DeeplyNestedClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DeeplyNestedClassView) PropertyLevel1() (ClassPropertyView, error) {
    return t.inner.Property("level1")
}


func (t *TypeBuilder) DeeplyNested() (*DeeplyNestedClassView, error) {
	bld, err := t.inner.Class("DeeplyNested")
	if err != nil {
		return nil, err
	}
	return &DeeplyNestedClassView{inner: bld}, nil
}

func (t *DeeplyNestedClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DepartmentClassView struct {
    inner baml.ClassBuilder
}

func (t *DepartmentClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DepartmentClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *DepartmentClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *DepartmentClassView) PropertyManager() (ClassPropertyView, error) {
    return t.inner.Property("manager")
}

func (t *DepartmentClassView) PropertyMembers() (ClassPropertyView, error) {
    return t.inner.Property("members")
}

func (t *DepartmentClassView) PropertyBudget() (ClassPropertyView, error) {
    return t.inner.Property("budget")
}

func (t *DepartmentClassView) PropertyProjects() (ClassPropertyView, error) {
    return t.inner.Property("projects")
}


func (t *TypeBuilder) Department() (*DepartmentClassView, error) {
	bld, err := t.inner.Class("Department")
	if err != nil {
		return nil, err
	}
	return &DepartmentClassView{inner: bld}, nil
}

func (t *DepartmentClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type DisplaySettingsClassView struct {
    inner baml.ClassBuilder
}

func (t *DisplaySettingsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *DisplaySettingsClassView) PropertyFontSize() (ClassPropertyView, error) {
    return t.inner.Property("fontSize")
}

func (t *DisplaySettingsClassView) PropertyColorScheme() (ClassPropertyView, error) {
    return t.inner.Property("colorScheme")
}

func (t *DisplaySettingsClassView) PropertyLayout() (ClassPropertyView, error) {
    return t.inner.Property("layout")
}


func (t *TypeBuilder) DisplaySettings() (*DisplaySettingsClassView, error) {
	bld, err := t.inner.Class("DisplaySettings")
	if err != nil {
		return nil, err
	}
	return &DisplaySettingsClassView{inner: bld}, nil
}

func (t *DisplaySettingsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type EmployeeClassView struct {
    inner baml.ClassBuilder
}

func (t *EmployeeClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *EmployeeClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *EmployeeClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *EmployeeClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *EmployeeClassView) PropertyRole() (ClassPropertyView, error) {
    return t.inner.Property("role")
}

func (t *EmployeeClassView) PropertyDepartment() (ClassPropertyView, error) {
    return t.inner.Property("department")
}

func (t *EmployeeClassView) PropertySkills() (ClassPropertyView, error) {
    return t.inner.Property("skills")
}

func (t *EmployeeClassView) PropertyAddress() (ClassPropertyView, error) {
    return t.inner.Property("address")
}

func (t *EmployeeClassView) PropertyEmergencyContact() (ClassPropertyView, error) {
    return t.inner.Property("emergencyContact")
}


func (t *TypeBuilder) Employee() (*EmployeeClassView, error) {
	bld, err := t.inner.Class("Employee")
	if err != nil {
		return nil, err
	}
	return &EmployeeClassView{inner: bld}, nil
}

func (t *EmployeeClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Level1ClassView struct {
    inner baml.ClassBuilder
}

func (t *Level1ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Level1ClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *Level1ClassView) PropertyLevel2() (ClassPropertyView, error) {
    return t.inner.Property("level2")
}


func (t *TypeBuilder) Level1() (*Level1ClassView, error) {
	bld, err := t.inner.Class("Level1")
	if err != nil {
		return nil, err
	}
	return &Level1ClassView{inner: bld}, nil
}

func (t *Level1ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Level2ClassView struct {
    inner baml.ClassBuilder
}

func (t *Level2ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Level2ClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *Level2ClassView) PropertyLevel3() (ClassPropertyView, error) {
    return t.inner.Property("level3")
}


func (t *TypeBuilder) Level2() (*Level2ClassView, error) {
	bld, err := t.inner.Class("Level2")
	if err != nil {
		return nil, err
	}
	return &Level2ClassView{inner: bld}, nil
}

func (t *Level2ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Level3ClassView struct {
    inner baml.ClassBuilder
}

func (t *Level3ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Level3ClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *Level3ClassView) PropertyLevel4() (ClassPropertyView, error) {
    return t.inner.Property("level4")
}


func (t *TypeBuilder) Level3() (*Level3ClassView, error) {
	bld, err := t.inner.Class("Level3")
	if err != nil {
		return nil, err
	}
	return &Level3ClassView{inner: bld}, nil
}

func (t *Level3ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Level4ClassView struct {
    inner baml.ClassBuilder
}

func (t *Level4ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Level4ClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *Level4ClassView) PropertyLevel5() (ClassPropertyView, error) {
    return t.inner.Property("level5")
}


func (t *TypeBuilder) Level4() (*Level4ClassView, error) {
	bld, err := t.inner.Class("Level4")
	if err != nil {
		return nil, err
	}
	return &Level4ClassView{inner: bld}, nil
}

func (t *Level4ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Level5ClassView struct {
    inner baml.ClassBuilder
}

func (t *Level5ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Level5ClassView) PropertyData() (ClassPropertyView, error) {
    return t.inner.Property("data")
}

func (t *Level5ClassView) PropertyItems() (ClassPropertyView, error) {
    return t.inner.Property("items")
}

func (t *Level5ClassView) PropertyMapping() (ClassPropertyView, error) {
    return t.inner.Property("mapping")
}


func (t *TypeBuilder) Level5() (*Level5ClassView, error) {
	bld, err := t.inner.Class("Level5")
	if err != nil {
		return nil, err
	}
	return &Level5ClassView{inner: bld}, nil
}

func (t *Level5ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MetadataClassView struct {
    inner baml.ClassBuilder
}

func (t *MetadataClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MetadataClassView) PropertyCreatedAt() (ClassPropertyView, error) {
    return t.inner.Property("createdAt")
}

func (t *MetadataClassView) PropertyUpdatedAt() (ClassPropertyView, error) {
    return t.inner.Property("updatedAt")
}

func (t *MetadataClassView) PropertyVersion() (ClassPropertyView, error) {
    return t.inner.Property("version")
}

func (t *MetadataClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *MetadataClassView) PropertyAttributes() (ClassPropertyView, error) {
    return t.inner.Property("attributes")
}


func (t *TypeBuilder) Metadata() (*MetadataClassView, error) {
	bld, err := t.inner.Class("Metadata")
	if err != nil {
		return nil, err
	}
	return &MetadataClassView{inner: bld}, nil
}

func (t *MetadataClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MilestoneClassView struct {
    inner baml.ClassBuilder
}

func (t *MilestoneClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MilestoneClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *MilestoneClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *MilestoneClassView) PropertyDueDate() (ClassPropertyView, error) {
    return t.inner.Property("dueDate")
}

func (t *MilestoneClassView) PropertyCompleted() (ClassPropertyView, error) {
    return t.inner.Property("completed")
}

func (t *MilestoneClassView) PropertyTasks() (ClassPropertyView, error) {
    return t.inner.Property("tasks")
}


func (t *TypeBuilder) Milestone() (*MilestoneClassView, error) {
	bld, err := t.inner.Class("Milestone")
	if err != nil {
		return nil, err
	}
	return &MilestoneClassView{inner: bld}, nil
}

func (t *MilestoneClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NotificationSettingsClassView struct {
    inner baml.ClassBuilder
}

func (t *NotificationSettingsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NotificationSettingsClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *NotificationSettingsClassView) PropertyPush() (ClassPropertyView, error) {
    return t.inner.Property("push")
}

func (t *NotificationSettingsClassView) PropertySms() (ClassPropertyView, error) {
    return t.inner.Property("sms")
}

func (t *NotificationSettingsClassView) PropertyFrequency() (ClassPropertyView, error) {
    return t.inner.Property("frequency")
}


func (t *TypeBuilder) NotificationSettings() (*NotificationSettingsClassView, error) {
	bld, err := t.inner.Class("NotificationSettings")
	if err != nil {
		return nil, err
	}
	return &NotificationSettingsClassView{inner: bld}, nil
}

func (t *NotificationSettingsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PreferencesClassView struct {
    inner baml.ClassBuilder
}

func (t *PreferencesClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PreferencesClassView) PropertyTheme() (ClassPropertyView, error) {
    return t.inner.Property("theme")
}

func (t *PreferencesClassView) PropertyLanguage() (ClassPropertyView, error) {
    return t.inner.Property("language")
}

func (t *PreferencesClassView) PropertyNotifications() (ClassPropertyView, error) {
    return t.inner.Property("notifications")
}


func (t *TypeBuilder) Preferences() (*PreferencesClassView, error) {
	bld, err := t.inner.Class("Preferences")
	if err != nil {
		return nil, err
	}
	return &PreferencesClassView{inner: bld}, nil
}

func (t *PreferencesClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrivacySettingsClassView struct {
    inner baml.ClassBuilder
}

func (t *PrivacySettingsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrivacySettingsClassView) PropertyProfileVisibility() (ClassPropertyView, error) {
    return t.inner.Property("profileVisibility")
}

func (t *PrivacySettingsClassView) PropertyShowEmail() (ClassPropertyView, error) {
    return t.inner.Property("showEmail")
}

func (t *PrivacySettingsClassView) PropertyShowPhone() (ClassPropertyView, error) {
    return t.inner.Property("showPhone")
}


func (t *TypeBuilder) PrivacySettings() (*PrivacySettingsClassView, error) {
	bld, err := t.inner.Class("PrivacySettings")
	if err != nil {
		return nil, err
	}
	return &PrivacySettingsClassView{inner: bld}, nil
}

func (t *PrivacySettingsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProfileClassView struct {
    inner baml.ClassBuilder
}

func (t *ProfileClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProfileClassView) PropertyBio() (ClassPropertyView, error) {
    return t.inner.Property("bio")
}

func (t *ProfileClassView) PropertyAvatar() (ClassPropertyView, error) {
    return t.inner.Property("avatar")
}

func (t *ProfileClassView) PropertySocial() (ClassPropertyView, error) {
    return t.inner.Property("social")
}

func (t *ProfileClassView) PropertyPreferences() (ClassPropertyView, error) {
    return t.inner.Property("preferences")
}


func (t *TypeBuilder) Profile() (*ProfileClassView, error) {
	bld, err := t.inner.Class("Profile")
	if err != nil {
		return nil, err
	}
	return &ProfileClassView{inner: bld}, nil
}

func (t *ProfileClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProjectClassView struct {
    inner baml.ClassBuilder
}

func (t *ProjectClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProjectClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ProjectClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ProjectClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *ProjectClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *ProjectClassView) PropertyTeam() (ClassPropertyView, error) {
    return t.inner.Property("team")
}

func (t *ProjectClassView) PropertyMilestones() (ClassPropertyView, error) {
    return t.inner.Property("milestones")
}

func (t *ProjectClassView) PropertyBudget() (ClassPropertyView, error) {
    return t.inner.Property("budget")
}


func (t *TypeBuilder) Project() (*ProjectClassView, error) {
	bld, err := t.inner.Class("Project")
	if err != nil {
		return nil, err
	}
	return &ProjectClassView{inner: bld}, nil
}

func (t *ProjectClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type RecursiveStructureClassView struct {
    inner baml.ClassBuilder
}

func (t *RecursiveStructureClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *RecursiveStructureClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *RecursiveStructureClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *RecursiveStructureClassView) PropertyChildren() (ClassPropertyView, error) {
    return t.inner.Property("children")
}

func (t *RecursiveStructureClassView) PropertyParent() (ClassPropertyView, error) {
    return t.inner.Property("parent")
}

func (t *RecursiveStructureClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) RecursiveStructure() (*RecursiveStructureClassView, error) {
	bld, err := t.inner.Class("RecursiveStructure")
	if err != nil {
		return nil, err
	}
	return &RecursiveStructureClassView{inner: bld}, nil
}

func (t *RecursiveStructureClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SimpleNestedClassView struct {
    inner baml.ClassBuilder
}

func (t *SimpleNestedClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SimpleNestedClassView) PropertyUser() (ClassPropertyView, error) {
    return t.inner.Property("user")
}

func (t *SimpleNestedClassView) PropertyAddress() (ClassPropertyView, error) {
    return t.inner.Property("address")
}

func (t *SimpleNestedClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}


func (t *TypeBuilder) SimpleNested() (*SimpleNestedClassView, error) {
	bld, err := t.inner.Class("SimpleNested")
	if err != nil {
		return nil, err
	}
	return &SimpleNestedClassView{inner: bld}, nil
}

func (t *SimpleNestedClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SocialLinksClassView struct {
    inner baml.ClassBuilder
}

func (t *SocialLinksClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SocialLinksClassView) PropertyTwitter() (ClassPropertyView, error) {
    return t.inner.Property("twitter")
}

func (t *SocialLinksClassView) PropertyGithub() (ClassPropertyView, error) {
    return t.inner.Property("github")
}

func (t *SocialLinksClassView) PropertyLinkedin() (ClassPropertyView, error) {
    return t.inner.Property("linkedin")
}

func (t *SocialLinksClassView) PropertyWebsite() (ClassPropertyView, error) {
    return t.inner.Property("website")
}


func (t *TypeBuilder) SocialLinks() (*SocialLinksClassView, error) {
	bld, err := t.inner.Class("SocialLinks")
	if err != nil {
		return nil, err
	}
	return &SocialLinksClassView{inner: bld}, nil
}

func (t *SocialLinksClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type TaskClassView struct {
    inner baml.ClassBuilder
}

func (t *TaskClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *TaskClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *TaskClassView) PropertyTitle() (ClassPropertyView, error) {
    return t.inner.Property("title")
}

func (t *TaskClassView) PropertyDescription() (ClassPropertyView, error) {
    return t.inner.Property("description")
}

func (t *TaskClassView) PropertyAssignee() (ClassPropertyView, error) {
    return t.inner.Property("assignee")
}

func (t *TaskClassView) PropertyPriority() (ClassPropertyView, error) {
    return t.inner.Property("priority")
}

func (t *TaskClassView) PropertyStatus() (ClassPropertyView, error) {
    return t.inner.Property("status")
}

func (t *TaskClassView) PropertySubtasks() (ClassPropertyView, error) {
    return t.inner.Property("subtasks")
}


func (t *TypeBuilder) Task() (*TaskClassView, error) {
	bld, err := t.inner.Class("Task")
	if err != nil {
		return nil, err
	}
	return &TaskClassView{inner: bld}, nil
}

func (t *TaskClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserClassView) PropertyProfile() (ClassPropertyView, error) {
    return t.inner.Property("profile")
}

func (t *UserClassView) PropertySettings() (ClassPropertyView, error) {
    return t.inner.Property("settings")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserSettingsClassView struct {
    inner baml.ClassBuilder
}

func (t *UserSettingsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserSettingsClassView) PropertyPrivacy() (ClassPropertyView, error) {
    return t.inner.Property("privacy")
}

func (t *UserSettingsClassView) PropertyDisplay() (ClassPropertyView, error) {
    return t.inner.Property("display")
}

func (t *UserSettingsClassView) PropertyAdvanced() (ClassPropertyView, error) {
    return t.inner.Property("advanced")
}


func (t *TypeBuilder) UserSettings() (*UserSettingsClassView, error) {
	bld, err := t.inner.Class("UserSettings")
	if err != nil {
		return nil, err
	}
	return &UserSettingsClassView{inner: bld}, nil
}

func (t *UserSettingsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

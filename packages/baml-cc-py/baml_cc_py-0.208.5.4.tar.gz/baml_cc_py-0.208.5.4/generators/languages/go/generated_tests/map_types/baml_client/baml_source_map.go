// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

var file_map = map[string]string{
  
  "baml_src/main.baml": "// Test map types in BAML\n\nclass SimpleMaps {\n  stringToString map<string, string>\n  stringToInt map<string, int>\n  stringToFloat map<string, float>\n  stringToBool map<string, bool>\n  intToString map<string, string>\n}\n\nclass ComplexMaps {\n  userMap map<string, User>\n  productMap map<string, Product>\n  nestedMap map<string, map<string, string>>\n  arrayMap map<string, int[]>\n  mapArray map<string, string>[]\n}\n\nclass User {\n  id int\n  name string\n  email string\n  active bool\n}\n\nclass Product {\n  id int\n  name string\n  price float\n  tags string[]\n}\n\nclass MixedKeyMaps {\n  stringIntMap map<string, int>\n  intStringMap map<string, string>\n  // TODO: Fix Go code generation for enum and literal string keys\n  // Should be: enumMap map<Status, string> but Go generator has issues with DecodeMap returning map[string]T instead of map[Status]T\n  enumMap map<string, string>\n  // Should be: literalMap map<\"dev\" | \"staging\" | \"prod\", Config> but Go generator has similar issues\n  literalMap map<string, Config>\n}\n\nenum Status {\n  ACTIVE\n  INACTIVE\n  PENDING\n}\n\nclass Config {\n  url string\n  port int\n  debug bool\n}\n\nclass NestedMaps {\n  simple map<string, string>\n  oneLevelNested map<string, map<string, int>>\n  twoLevelNested map<string, map<string, map<string, bool>>>\n  mapOfArrays map<string, string[]>\n  mapOfMaps map<string, map<string, float>>\n}\n\nclass EdgeCaseMaps {\n  emptyMap map<string, string>\n  nullableValues map<string, string | null>\n  optionalValues map<string, string?>\n  unionValues map<string, string | int | bool>\n}\n\nfunction TestSimpleMaps(input: string) -> SimpleMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleMaps object with:\n    - stringToString: {\"key1\": \"value1\", \"key2\": \"value2\"}\n    - stringToInt: {\"one\": 1, \"two\": 2, \"three\": 3}\n    - stringToFloat: {\"pi\": 3.14159, \"e\": 2.71828}\n    - stringToBool: {\"isTrue\": true, \"isFalse\": false}\n    - intToString: {\"1\": \"one\", \"2\": \"two\", \"3\": \"three\"}\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestComplexMaps(input: string) -> ComplexMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a ComplexMaps object with:\n    - userMap: map with 2 users keyed by username\n    - productMap: map with 3 products keyed by product id as strings\n    - nestedMap: {\"outer1\": {\"inner1\": \"value1\", \"inner2\": \"value2\"}}\n    - arrayMap: {\"numbers\": [1, 2, 3], \"primes\": [2, 3, 5, 7]}\n    - mapArray: array of 2 different maps\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestNestedMaps(input: string) -> NestedMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a NestedMaps object with various levels of nesting.\n    Include at least 2 entries at each level.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestEdgeCaseMaps(input: string) -> EdgeCaseMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an EdgeCaseMaps object with:\n    - emptyMap: {}\n    - nullableValues: {\"present\": \"value\", \"absent\": null}\n    - optionalValues: {\"required\": \"value\", \"optional\": null}\n    - unionValues: {\"string\": \"hello\", \"number\": 42, \"boolean\": true}\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestLargeMaps(input: string) -> SimpleMaps {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleMaps object where each map has at least 20 entries.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\n// Top-level map return type tests\nfunction TestTopLevelStringMap(input: string) -> map<string, string> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map with the following key-value pairs:\n    - \"first\": \"Hello\"\n    - \"second\": \"World\"\n    - \"third\": \"BAML\"\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelIntMap(input: string) -> map<string, int> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map with the following key-value pairs:\n    - \"one\": 1\n    - \"two\": 2\n    - \"ten\": 10\n    - \"hundred\": 100\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelFloatMap(input: string) -> map<string, float> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map with the following key-value pairs:\n    - \"pi\": 3.14159\n    - \"e\": 2.71828\n    - \"golden\": 1.61803\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelBoolMap(input: string) -> map<string, bool> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map with the following key-value pairs:\n    - \"isActive\": true\n    - \"isDisabled\": false\n    - \"isEnabled\": true\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelNestedMap(input: string) -> map<string, map<string, string>> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a nested map with the following structure:\n    {\n      \"users\": {\"alice\": \"admin\", \"bob\": \"user\"},\n      \"roles\": {\"admin\": \"full-access\", \"user\": \"read-only\"}\n    }\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelMapOfArrays(input: string) -> map<string, int[]> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map where values are integer arrays:\n    - \"evens\": [2, 4, 6, 8]\n    - \"odds\": [1, 3, 5, 7]\n    - \"primes\": [2, 3, 5, 7, 11]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelEmptyMap(input: string) -> map<string, string> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an empty map: {}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelMapWithNullable(input: string) -> map<string, string | null> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map with nullable values:\n    - \"present\": \"value\"\n    - \"absent\": null\n    - \"another\": \"data\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction TestTopLevelMapOfObjects(input: string) -> map<string, User> {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a map of User objects with keys \"user1\" and \"user2\".\n    Each user should have realistic data.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",  
}

func getBamlFiles() map[string]string {
  return file_map
}
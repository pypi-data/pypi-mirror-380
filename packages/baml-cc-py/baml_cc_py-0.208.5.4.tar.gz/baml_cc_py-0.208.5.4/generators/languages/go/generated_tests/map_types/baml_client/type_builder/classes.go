// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ComplexMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *ComplexMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ComplexMapsClassView) PropertyUserMap() (ClassPropertyView, error) {
    return t.inner.Property("userMap")
}

func (t *ComplexMapsClassView) PropertyProductMap() (ClassPropertyView, error) {
    return t.inner.Property("productMap")
}

func (t *ComplexMapsClassView) PropertyNestedMap() (ClassPropertyView, error) {
    return t.inner.Property("nestedMap")
}

func (t *ComplexMapsClassView) PropertyArrayMap() (ClassPropertyView, error) {
    return t.inner.Property("arrayMap")
}

func (t *ComplexMapsClassView) PropertyMapArray() (ClassPropertyView, error) {
    return t.inner.Property("mapArray")
}


func (t *TypeBuilder) ComplexMaps() (*ComplexMapsClassView, error) {
	bld, err := t.inner.Class("ComplexMaps")
	if err != nil {
		return nil, err
	}
	return &ComplexMapsClassView{inner: bld}, nil
}

func (t *ComplexMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ConfigClassView struct {
    inner baml.ClassBuilder
}

func (t *ConfigClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ConfigClassView) PropertyUrl() (ClassPropertyView, error) {
    return t.inner.Property("url")
}

func (t *ConfigClassView) PropertyPort() (ClassPropertyView, error) {
    return t.inner.Property("port")
}

func (t *ConfigClassView) PropertyDebug() (ClassPropertyView, error) {
    return t.inner.Property("debug")
}


func (t *TypeBuilder) Config() (*ConfigClassView, error) {
	bld, err := t.inner.Class("Config")
	if err != nil {
		return nil, err
	}
	return &ConfigClassView{inner: bld}, nil
}

func (t *ConfigClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type EdgeCaseMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *EdgeCaseMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *EdgeCaseMapsClassView) PropertyEmptyMap() (ClassPropertyView, error) {
    return t.inner.Property("emptyMap")
}

func (t *EdgeCaseMapsClassView) PropertyNullableValues() (ClassPropertyView, error) {
    return t.inner.Property("nullableValues")
}

func (t *EdgeCaseMapsClassView) PropertyOptionalValues() (ClassPropertyView, error) {
    return t.inner.Property("optionalValues")
}

func (t *EdgeCaseMapsClassView) PropertyUnionValues() (ClassPropertyView, error) {
    return t.inner.Property("unionValues")
}


func (t *TypeBuilder) EdgeCaseMaps() (*EdgeCaseMapsClassView, error) {
	bld, err := t.inner.Class("EdgeCaseMaps")
	if err != nil {
		return nil, err
	}
	return &EdgeCaseMapsClassView{inner: bld}, nil
}

func (t *EdgeCaseMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type MixedKeyMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedKeyMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedKeyMapsClassView) PropertyStringIntMap() (ClassPropertyView, error) {
    return t.inner.Property("stringIntMap")
}

func (t *MixedKeyMapsClassView) PropertyIntStringMap() (ClassPropertyView, error) {
    return t.inner.Property("intStringMap")
}

func (t *MixedKeyMapsClassView) PropertyEnumMap() (ClassPropertyView, error) {
    return t.inner.Property("enumMap")
}

func (t *MixedKeyMapsClassView) PropertyLiteralMap() (ClassPropertyView, error) {
    return t.inner.Property("literalMap")
}


func (t *TypeBuilder) MixedKeyMaps() (*MixedKeyMapsClassView, error) {
	bld, err := t.inner.Class("MixedKeyMaps")
	if err != nil {
		return nil, err
	}
	return &MixedKeyMapsClassView{inner: bld}, nil
}

func (t *MixedKeyMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type NestedMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *NestedMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *NestedMapsClassView) PropertySimple() (ClassPropertyView, error) {
    return t.inner.Property("simple")
}

func (t *NestedMapsClassView) PropertyOneLevelNested() (ClassPropertyView, error) {
    return t.inner.Property("oneLevelNested")
}

func (t *NestedMapsClassView) PropertyTwoLevelNested() (ClassPropertyView, error) {
    return t.inner.Property("twoLevelNested")
}

func (t *NestedMapsClassView) PropertyMapOfArrays() (ClassPropertyView, error) {
    return t.inner.Property("mapOfArrays")
}

func (t *NestedMapsClassView) PropertyMapOfMaps() (ClassPropertyView, error) {
    return t.inner.Property("mapOfMaps")
}


func (t *TypeBuilder) NestedMaps() (*NestedMapsClassView, error) {
	bld, err := t.inner.Class("NestedMaps")
	if err != nil {
		return nil, err
	}
	return &NestedMapsClassView{inner: bld}, nil
}

func (t *NestedMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ProductClassView struct {
    inner baml.ClassBuilder
}

func (t *ProductClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ProductClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *ProductClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *ProductClassView) PropertyPrice() (ClassPropertyView, error) {
    return t.inner.Property("price")
}

func (t *ProductClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}


func (t *TypeBuilder) Product() (*ProductClassView, error) {
	bld, err := t.inner.Class("Product")
	if err != nil {
		return nil, err
	}
	return &ProductClassView{inner: bld}, nil
}

func (t *ProductClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SimpleMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *SimpleMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SimpleMapsClassView) PropertyStringToString() (ClassPropertyView, error) {
    return t.inner.Property("stringToString")
}

func (t *SimpleMapsClassView) PropertyStringToInt() (ClassPropertyView, error) {
    return t.inner.Property("stringToInt")
}

func (t *SimpleMapsClassView) PropertyStringToFloat() (ClassPropertyView, error) {
    return t.inner.Property("stringToFloat")
}

func (t *SimpleMapsClassView) PropertyStringToBool() (ClassPropertyView, error) {
    return t.inner.Property("stringToBool")
}

func (t *SimpleMapsClassView) PropertyIntToString() (ClassPropertyView, error) {
    return t.inner.Property("intToString")
}


func (t *TypeBuilder) SimpleMaps() (*SimpleMapsClassView, error) {
	bld, err := t.inner.Class("SimpleMaps")
	if err != nil {
		return nil, err
	}
	return &SimpleMapsClassView{inner: bld}, nil
}

func (t *SimpleMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type UserClassView struct {
    inner baml.ClassBuilder
}

func (t *UserClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *UserClassView) PropertyId() (ClassPropertyView, error) {
    return t.inner.Property("id")
}

func (t *UserClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *UserClassView) PropertyEmail() (ClassPropertyView, error) {
    return t.inner.Property("email")
}

func (t *UserClassView) PropertyActive() (ClassPropertyView, error) {
    return t.inner.Property("active")
}


func (t *TypeBuilder) User() (*UserClassView, error) {
	bld, err := t.inner.Class("User")
	if err != nil {
		return nil, err
	}
	return &UserClassView{inner: bld}, nil
}

func (t *UserClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

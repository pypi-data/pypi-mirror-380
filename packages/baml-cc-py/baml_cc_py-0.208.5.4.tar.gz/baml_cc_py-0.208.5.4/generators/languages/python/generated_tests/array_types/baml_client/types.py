# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (0)
# #########################################################################

# #########################################################################
# Generated classes (8)
# #########################################################################

class ArrayWithConstraints(BaseModel):
    nonEmptyStrings: typing.List[str]
    limitedInts: typing.List[int]
    positiveFloats: typing.List[float]

class MixedArrays(BaseModel):
    primitiveArray: typing.List[typing.Union[str, int, float, bool]]
    nullableArray: typing.List[typing.Optional[str]]
    optionalItems: typing.List[typing.Optional[str]]
    arrayOfArrays: typing.List[typing.List[str]]
    complexMixed: typing.List[typing.Union["User", "Product", "Tag"]]

class NestedArrays(BaseModel):
    matrix: typing.List[typing.List[int]]
    stringMatrix: typing.List[typing.List[str]]
    threeDimensional: typing.List[typing.List[typing.List[float]]]

class ObjectArrays(BaseModel):
    users: typing.List["User"]
    products: typing.List["Product"]
    tags: typing.List["Tag"]

class Product(BaseModel):
    id: int
    name: str
    price: float
    tags: typing.List[str]
    inStock: bool

class SimpleArrays(BaseModel):
    strings: typing.List[str]
    integers: typing.List[int]
    floats: typing.List[float]
    booleans: typing.List[bool]

class Tag(BaseModel):
    id: int
    name: str
    color: str

class User(BaseModel):
    id: int
    name: str
    email: str
    isActive: bool

# #########################################################################
# Generated type aliases (0)
# #########################################################################

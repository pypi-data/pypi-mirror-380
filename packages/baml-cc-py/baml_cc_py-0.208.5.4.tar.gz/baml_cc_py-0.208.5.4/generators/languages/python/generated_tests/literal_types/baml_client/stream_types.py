# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (5)
# #########################################################################

class BooleanLiterals(BaseModel):
    alwaysTrue: typing.Optional[bool] = None
    alwaysFalse: typing.Optional[bool] = None
    eitherBool: typing.Optional[typing.Union[bool, bool]] = None

class ComplexLiterals(BaseModel):
    state: typing.Optional[typing.Union[str, str, str, str]] = None
    retryCount: typing.Optional[typing.Union[int, int, int, int, int, int, int]] = None
    response: typing.Optional[typing.Union[str, str, str]] = None
    flags: typing.List[typing.Union[bool, bool]]
    codes: typing.List[typing.Union[int, int, int]]

class IntegerLiterals(BaseModel):
    priority: typing.Optional[typing.Union[int, int, int, int, int]] = None
    httpStatus: typing.Optional[typing.Union[int, int, int, int, int]] = None
    maxRetries: typing.Optional[typing.Union[int, int, int, int]] = None

class MixedLiterals(BaseModel):
    id: typing.Optional[int] = None
    type: typing.Optional[typing.Union[str, str, str]] = None
    level: typing.Optional[typing.Union[int, int, int]] = None
    isActive: typing.Optional[typing.Union[bool, bool]] = None
    apiVersion: typing.Optional[typing.Union[str, str, str]] = None

class StringLiterals(BaseModel):
    status: typing.Optional[typing.Union[str, str, str]] = None
    environment: typing.Optional[typing.Union[str, str, str]] = None
    method: typing.Optional[typing.Union[str, str, str, str]] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

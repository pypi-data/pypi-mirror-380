# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (4)
# #########################################################################

class ClassWithBlockDone(BaseModel):
    i_16_digits: typing.Optional[int] = None
    s_20_words: typing.Optional[str] = None

class ClassWithoutDone(BaseModel):
    i_16_digits: typing.Optional[int] = None
    s_20_words: StreamState[typing.Optional[str]]

class SemanticContainer(BaseModel):
    sixteen_digit_number: typing.Optional[int] = None
    string_with_twenty_words: typing.Optional[str] = None
    class_1: typing.Optional["ClassWithoutDone"] = None
    class_2: typing.Optional["types.ClassWithBlockDone"] = None
    class_done_needed: "types.ClassWithBlockDone"
    class_needed: "ClassWithoutDone"
    three_small_things: typing.List["SmallThing"]
    final_string: typing.Optional[str] = None

class SmallThing(BaseModel):
    i_16_digits: int
    i_8_digits: typing.Optional[int] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################

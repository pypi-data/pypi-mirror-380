# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestEmptyCollections(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveArrays:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestEmptyCollections", llm_response=llm_response, mode="request")
        return typing.cast(types.PrimitiveArrays, result)

    def TestMixedPrimitives(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MixedPrimitives:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestMixedPrimitives", llm_response=llm_response, mode="request")
        return typing.cast(types.MixedPrimitives, result)

    def TestPrimitiveArrays(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveArrays:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveArrays", llm_response=llm_response, mode="request")
        return typing.cast(types.PrimitiveArrays, result)

    def TestPrimitiveMaps(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveMaps:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveMaps", llm_response=llm_response, mode="request")
        return typing.cast(types.PrimitiveMaps, result)

    def TestPrimitiveTypes(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveTypes:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveTypes", llm_response=llm_response, mode="request")
        return typing.cast(types.PrimitiveTypes, result)

    def TestTopLevelBool(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> bool:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelBool", llm_response=llm_response, mode="request")
        return typing.cast(bool, result)

    def TestTopLevelFloat(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> float:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelFloat", llm_response=llm_response, mode="request")
        return typing.cast(float, result)

    def TestTopLevelInt(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> int:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelInt", llm_response=llm_response, mode="request")
        return typing.cast(int, result)

    def TestTopLevelNull(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Any:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelNull", llm_response=llm_response, mode="request")
        return typing.cast(typing.Any, result)

    def TestTopLevelString(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelString", llm_response=llm_response, mode="request")
        return typing.cast(str, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestEmptyCollections(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PrimitiveArrays:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestEmptyCollections", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PrimitiveArrays, result)

    def TestMixedPrimitives(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MixedPrimitives:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestMixedPrimitives", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MixedPrimitives, result)

    def TestPrimitiveArrays(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PrimitiveArrays:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveArrays", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PrimitiveArrays, result)

    def TestPrimitiveMaps(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PrimitiveMaps:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveMaps", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PrimitiveMaps, result)

    def TestPrimitiveTypes(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PrimitiveTypes:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestPrimitiveTypes", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PrimitiveTypes, result)

    def TestTopLevelBool(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> bool:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelBool", llm_response=llm_response, mode="stream")
        return typing.cast(bool, result)

    def TestTopLevelFloat(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> float:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelFloat", llm_response=llm_response, mode="stream")
        return typing.cast(float, result)

    def TestTopLevelInt(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> int:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelInt", llm_response=llm_response, mode="stream")
        return typing.cast(int, result)

    def TestTopLevelNull(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> typing.Any:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelNull", llm_response=llm_response, mode="stream")
        return typing.cast(typing.Any, result)

    def TestTopLevelString(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> str:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TestTopLevelString", llm_response=llm_response, mode="stream")
        return typing.cast(str, result)

    
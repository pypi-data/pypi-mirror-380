# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def TestEmptyCollections(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestEmptyCollections(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestEmptyCollections", args={
                "input": input,
            })
            return typing.cast(types.PrimitiveArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestMixedPrimitives(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.MixedPrimitives:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestMixedPrimitives(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestMixedPrimitives", args={
                "input": input,
            })
            return typing.cast(types.MixedPrimitives, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestPrimitiveArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveArrays:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestPrimitiveArrays(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestPrimitiveArrays", args={
                "input": input,
            })
            return typing.cast(types.PrimitiveArrays, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestPrimitiveMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveMaps:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestPrimitiveMaps(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestPrimitiveMaps", args={
                "input": input,
            })
            return typing.cast(types.PrimitiveMaps, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestPrimitiveTypes(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PrimitiveTypes:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestPrimitiveTypes(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestPrimitiveTypes", args={
                "input": input,
            })
            return typing.cast(types.PrimitiveTypes, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelBool(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> bool:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelBool(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelBool", args={
                "input": input,
            })
            return typing.cast(bool, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelFloat(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> float:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelFloat(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelFloat", args={
                "input": input,
            })
            return typing.cast(float, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelInt(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> int:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelInt(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelInt", args={
                "input": input,
            })
            return typing.cast(int, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelNull(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> typing.Any:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelNull(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelNull", args={
                "input": input,
            })
            return typing.cast(typing.Any, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestTopLevelString(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> str:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestTopLevelString(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestTopLevelString", args={
                "input": input,
            })
            return typing.cast(str, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestEmptyCollections(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PrimitiveArrays, types.PrimitiveArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestEmptyCollections", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PrimitiveArrays, types.PrimitiveArrays](
          result,
          lambda x: typing.cast(stream_types.PrimitiveArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PrimitiveArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestMixedPrimitives(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.MixedPrimitives, types.MixedPrimitives]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestMixedPrimitives", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.MixedPrimitives, types.MixedPrimitives](
          result,
          lambda x: typing.cast(stream_types.MixedPrimitives, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.MixedPrimitives, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestPrimitiveArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PrimitiveArrays, types.PrimitiveArrays]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestPrimitiveArrays", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PrimitiveArrays, types.PrimitiveArrays](
          result,
          lambda x: typing.cast(stream_types.PrimitiveArrays, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PrimitiveArrays, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestPrimitiveMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PrimitiveMaps, types.PrimitiveMaps]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestPrimitiveMaps", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PrimitiveMaps, types.PrimitiveMaps](
          result,
          lambda x: typing.cast(stream_types.PrimitiveMaps, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PrimitiveMaps, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestPrimitiveTypes(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PrimitiveTypes, types.PrimitiveTypes]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestPrimitiveTypes", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PrimitiveTypes, types.PrimitiveTypes](
          result,
          lambda x: typing.cast(stream_types.PrimitiveTypes, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PrimitiveTypes, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelBool(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[bool, bool]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelBool", args={
            "input": input,
        })
        return baml_py.BamlStream[bool, bool](
          result,
          lambda x: typing.cast(bool, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(bool, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelFloat(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[float, float]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelFloat", args={
            "input": input,
        })
        return baml_py.BamlStream[float, float](
          result,
          lambda x: typing.cast(float, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(float, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelInt(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[int, int]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelInt", args={
            "input": input,
        })
        return baml_py.BamlStream[int, int](
          result,
          lambda x: typing.cast(int, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(int, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelNull(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[typing.Any, typing.Any]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelNull", args={
            "input": input,
        })
        return baml_py.BamlStream[typing.Any, typing.Any](
          result,
          lambda x: typing.cast(typing.Any, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(typing.Any, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestTopLevelString(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[str, str]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestTopLevelString", args={
            "input": input,
        })
        return baml_py.BamlStream[str, str](
          result,
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(str, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestEmptyCollections(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestEmptyCollections", args={
            "input": input,
        }, mode="request")
        return result
    async def TestMixedPrimitives(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestMixedPrimitives", args={
            "input": input,
        }, mode="request")
        return result
    async def TestPrimitiveArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveArrays", args={
            "input": input,
        }, mode="request")
        return result
    async def TestPrimitiveMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveMaps", args={
            "input": input,
        }, mode="request")
        return result
    async def TestPrimitiveTypes(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveTypes", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelBool(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelBool", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelFloat(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelFloat", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelInt(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelInt", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelNull(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNull", args={
            "input": input,
        }, mode="request")
        return result
    async def TestTopLevelString(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelString", args={
            "input": input,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestEmptyCollections(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestEmptyCollections", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestMixedPrimitives(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestMixedPrimitives", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestPrimitiveArrays(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveArrays", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestPrimitiveMaps(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveMaps", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestPrimitiveTypes(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestPrimitiveTypes", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelBool(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelBool", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelFloat(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelFloat", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelInt(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelInt", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelNull(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelNull", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestTopLevelString(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestTopLevelString", args={
            "input": input,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))
# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "baml_src/main.baml": "// Test edge cases in BAML\n\nclass EmptyCollections {\n  emptyStringArray string[]\n  emptyIntArray int[]\n  emptyObjectArray User[]\n  emptyMap map<string, string>\n  emptyNestedArray string[][]\n}\n\nclass User {\n  id int\n  name string\n}\n\nclass LargeStructure {\n  // Test with many fields\n  field1 string\n  field2 string\n  field3 string\n  field4 string\n  field5 string\n  field6 int\n  field7 int\n  field8 int\n  field9 int\n  field10 int\n  field11 float\n  field12 float\n  field13 float\n  field14 float\n  field15 float\n  field16 bool\n  field17 bool\n  field18 bool\n  field19 bool\n  field20 bool\n  // Arrays\n  array1 string[]\n  array2 int[]\n  array3 float[]\n  array4 bool[]\n  array5 User[]\n  // Maps\n  map1 map<string, string>\n  map2 map<string, int>\n  map3 map<string, float>\n  map4 map<string, bool>\n  map5 map<string, User>\n}\n\nclass DeepRecursion {\n  value string\n  next DeepRecursion?\n}\n\nclass VeryLongStrings {\n  shortString string\n  mediumString string\n  longString string\n  veryLongString string\n  extremelyLongString string\n}\n\nclass SpecialCharacters {\n  normalText string\n  withNewlines string\n  withTabs string\n  withQuotes string\n  withBackslashes string\n  withUnicode string\n  withEmoji string\n  withMixedSpecial string\n}\n\nclass NumberEdgeCases {\n  zero int\n  negativeInt int\n  largeInt int\n  veryLargeInt int @description(#\"\n    i64 max value\n  \"#)\n  smallFloat float\n  largeFloat float\n  negativeFloat float\n  scientificNotation float\n  infinity float?\n  notANumber float?\n}\n\nclass BooleanEdgeCases {\n  explicitTrue bool\n  explicitFalse bool\n  arrayOfTrue bool[]\n  arrayOfFalse bool[]\n  mixedBoolArray bool[]\n}\n\nclass NullEdgeCases {\n  allNull AllNullable\n  someNull SomeNullable\n  nestedNull NestedNullable\n}\n\nclass AllNullable {\n  nullString string | null\n  nullInt int | null\n  nullFloat float | null\n  nullBool bool | null\n  nullArray string[] | null\n  nullObject User | null\n}\n\nclass SomeNullable {\n  presentString string | null\n  nullString string | null\n  presentInt int | null\n  nullInt int | null\n}\n\nclass NestedNullable {\n  outer OuterNullable | null\n}\n\nclass OuterNullable {\n  inner InnerNullable | null\n}\n\nclass InnerNullable {\n  value string | null\n}\n\nclass CircularReference {\n  id int\n  name string\n  parent CircularReference?\n  children CircularReference[]\n  relatedItems CircularReference[]\n}\n\nclass MixedEdgeCases {\n  emptyString string\n  singleChar string\n  veryLongArray string[]\n  deeplyNestedMap map<string, map<string, map<string, string>>>\n  mixedTypeArray (string | int | bool | null)[]\n  optionalEverything OptionalEverything?\n}\n\nclass OptionalEverything {\n  optString string?\n  optInt int?\n  optFloat float?\n  optBool bool?\n  optArray string[]?\n  optMap map<string, string>?\n  optObject User?\n}\n\nfunction TestEmptyCollections(input: string) -> EmptyCollections {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an EmptyCollections object with all collections empty.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestLargeStructure(input: string) -> LargeStructure {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a LargeStructure object with all fields populated with appropriate test data.\n    Arrays should have 3-5 items each.\n    Maps should have 2-3 entries each.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestDeepRecursion(depth: int) -> DeepRecursion {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a DeepRecursion object nested to depth {{ depth }}.\n    Each level should have value \"Level X\" where X is the level number.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ depth }}\n  \"#\n}\n\nfunction TestSpecialCharacters(input: string) -> SpecialCharacters {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SpecialCharacters object with:\n    - normalText: \"Hello World\"\n    - withNewlines: \"Line 1\\nLine 2\\nLine 3\"\n    - withTabs: \"Column1\\tColumn2\\tColumn3\"\n    - withQuotes: \"She said \\\"Hello\\\" to him\"\n    - withBackslashes: \"C:\\\\Users\\\\Name\\\\Documents\"\n    - withUnicode: \"Hello 世界 🌍\"\n    - withEmoji: \"Happy 😊 Sad 😢 Love ❤️\"\n    - withMixedSpecial: \"Mix: \\n\\t\\\"Hello\\\\World\\\" 🌟\"\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestNumberEdgeCases(input: string) -> NumberEdgeCases {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a NumberEdgeCases object with various edge case numbers.\n    Include zero, negatives, very large numbers, and scientific notation.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestCircularReference(input: string) -> CircularReference {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a CircularReference object representing a tree structure:\n    - Root node with id 1\n    - Two children with ids 2 and 3\n    - Child 2 has parent reference to node 1\n    - Child 3 has parent reference to node 1\n    - Some related items referencing other nodes\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",
}

def get_baml_files():
    return _file_map
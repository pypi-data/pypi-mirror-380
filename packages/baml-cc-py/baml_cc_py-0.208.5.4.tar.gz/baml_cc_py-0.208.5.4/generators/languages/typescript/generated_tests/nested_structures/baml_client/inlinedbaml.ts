/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "baml_src/main.baml": "// Test deeply nested structures in BAML\n\nclass SimpleNested {\n  user User\n  address Address\n  metadata Metadata\n}\n\nclass User {\n  id int\n  name string\n  profile Profile\n  settings UserSettings\n}\n\nclass Profile {\n  bio string\n  avatar string\n  social SocialLinks\n  preferences Preferences\n}\n\nclass SocialLinks {\n  twitter string?\n  github string?\n  linkedin string?\n  website string?\n}\n\nclass Preferences {\n  theme \"light\" | \"dark\"\n  language string\n  notifications NotificationSettings\n}\n\nclass NotificationSettings {\n  email bool\n  push bool\n  sms bool\n  frequency \"immediate\" | \"daily\" | \"weekly\"\n}\n\nclass UserSettings {\n  privacy PrivacySettings\n  display DisplaySettings\n  advanced map<string, string>\n}\n\nclass PrivacySettings {\n  profileVisibility \"public\" | \"private\" | \"friends\"\n  showEmail bool\n  showPhone bool\n}\n\nclass DisplaySettings {\n  fontSize int\n  colorScheme string\n  layout \"grid\" | \"list\"\n}\n\nclass Address {\n  street string\n  city string\n  state string\n  country string\n  postalCode string\n  coordinates Coordinates?\n}\n\nclass Coordinates {\n  latitude float\n  longitude float\n}\n\nclass Metadata {\n  createdAt string\n  updatedAt string\n  version int\n  tags string[]\n  attributes map<string, string>\n}\n\nclass DeeplyNested {\n  level1 Level1\n}\n\nclass Level1 {\n  data string\n  level2 Level2\n}\n\nclass Level2 {\n  data string\n  level3 Level3\n}\n\nclass Level3 {\n  data string\n  level4 Level4\n}\n\nclass Level4 {\n  data string\n  level5 Level5\n}\n\nclass Level5 {\n  data string\n  items string[]\n  mapping map<string, int>\n}\n\nclass ComplexNested {\n  company Company\n  employees Employee[]\n  projects Project[]\n}\n\nclass Company {\n  id int\n  name string\n  address Address\n  departments Department[]\n  metadata CompanyMetadata\n}\n\nclass Department {\n  id int\n  name string\n  manager Employee?\n  members Employee[]\n  budget float\n  projects Project[]\n}\n\nclass Employee {\n  id int\n  name string\n  email string\n  role string\n  department string\n  skills string[]\n  address Address?\n  emergencyContact Contact?\n}\n\nclass Contact {\n  name string\n  relationship string\n  phone string\n  email string?\n}\n\nclass Project {\n  id int\n  name string\n  description string\n  status \"planning\" | \"active\" | \"completed\" | \"cancelled\"\n  team Employee[]\n  milestones Milestone[]\n  budget Budget\n}\n\nclass Milestone {\n  id int\n  name string\n  dueDate string\n  completed bool\n  tasks Task[]\n}\n\nclass Task {\n  id int\n  title string\n  description string\n  assignee string\n  priority \"low\" | \"medium\" | \"high\"\n  status \"todo\" | \"in_progress\" | \"done\"\n  subtasks Task[]?\n}\n\nclass Budget {\n  total float\n  spent float\n  categories map<string, float>\n  approvals Approval[]\n}\n\nclass Approval {\n  approver string\n  date string\n  amount float\n  notes string?\n}\n\nclass CompanyMetadata {\n  founded string\n  industry string\n  size \"small\" | \"medium\" | \"large\" | \"enterprise\"\n  certifications string[]\n  partnerships Company[]?\n}\n\nclass RecursiveStructure {\n  id int\n  name string\n  children RecursiveStructure[]\n  parent RecursiveStructure?\n  metadata map<string, string | int | bool>\n}\n\nfunction TestSimpleNested(input: string) -> SimpleNested {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleNested object with realistic data for:\n    - A user with complete profile and settings\n    - A full address with coordinates\n    - Metadata with various attributes\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestDeeplyNested(input: string) -> DeeplyNested {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a DeeplyNested object with data at all 5 levels.\n    Each level should have meaningful data.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestComplexNested(input: string) -> ComplexNested {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a ComplexNested object representing a small tech company with:\n    - Company details with 2 departments\n    - 5 employees across departments\n    - 2 active projects with milestones and tasks\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestRecursiveStructure(input: string) -> RecursiveStructure {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a RecursiveStructure representing a tree with:\n    - Root node\n    - At least 2 child nodes\n    - Some children have their own children (3 levels deep)\n    - Include parent references where applicable\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}
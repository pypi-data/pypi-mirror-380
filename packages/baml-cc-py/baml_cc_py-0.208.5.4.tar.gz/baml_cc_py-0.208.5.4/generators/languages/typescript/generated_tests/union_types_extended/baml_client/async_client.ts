/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, FunctionResult, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog, HTTPRequest } from "@boundaryml/baml"
import { toBamlError, BamlStream, BamlAbortError, Collector } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {Admin, ApiError, ApiPending, ApiSuccess, Bird, Cat, Circle, ComplexUnions, DataResponse, DiscriminatedUnions, Dog, Error, ErrorResponse, PrimitiveUnions, Product, Rectangle, RecursiveUnion, Result, Success, Triangle, UnionArrays, User, Warning} from "./types"
import type TypeBuilder from "./type_builder"
import { AsyncHttpRequest, AsyncHttpStreamRequest } from "./async_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
  env?: Record<string, string | undefined>
  abortSignal?: AbortSignal
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class BamlAsyncClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private streamClient: BamlStreamClient
  private httpRequest: AsyncHttpRequest
  private httpStreamRequest: AsyncHttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.streamClient = new BamlStreamClient(runtime, ctxManager, bamlOptions)
    this.httpRequest = new AsyncHttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new AsyncHttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlAsyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  get stream() {
    return this.streamClient
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  async TestComplexUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.ComplexUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.TestComplexUnions(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "TestComplexUnions",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.ComplexUnions
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async TestDiscriminatedUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.DiscriminatedUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.TestDiscriminatedUnions(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "TestDiscriminatedUnions",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.DiscriminatedUnions
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async TestPrimitiveUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.PrimitiveUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.TestPrimitiveUnions(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "TestPrimitiveUnions",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.PrimitiveUnions
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async TestUnionArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): Promise<types.UnionArrays> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      // Check if onTick is provided - route through streaming if so
      if (options.onTick) {
        const stream = this.stream.TestUnionArrays(
          input,
          __baml_options__
        );
        
        return await stream.getFinalResponse();
      }
      
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = await this.runtime.callFunction(
        "TestUnionArrays",
        {
          "input": input
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      )
      return raw.parsed(false) as types.UnionArrays
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

class BamlStreamClient {
  private runtime: BamlRuntime
  private ctxManager: BamlCtxManager
  private bamlOptions: BamlCallOptions

  constructor(runtime: BamlRuntime, ctxManager: BamlCtxManager, bamlOptions?: BamlCallOptions) {
    this.runtime = runtime
    this.ctxManager = ctxManager
    this.bamlOptions = bamlOptions || {}
  }

  
  TestComplexUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.ComplexUnions, types.ComplexUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for TestComplexUnions", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "TestComplexUnions",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.ComplexUnions, types.ComplexUnions>(
        raw,
        (a): partial_types.ComplexUnions => a,
        (a): types.ComplexUnions => a,
        this.ctxManager.cloneContext(),
        options.abortSignal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TestDiscriminatedUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.DiscriminatedUnions, types.DiscriminatedUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for TestDiscriminatedUnions", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "TestDiscriminatedUnions",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.DiscriminatedUnions, types.DiscriminatedUnions>(
        raw,
        (a): partial_types.DiscriminatedUnions => a,
        (a): types.DiscriminatedUnions => a,
        this.ctxManager.cloneContext(),
        options.abortSignal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TestPrimitiveUnions(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.PrimitiveUnions, types.PrimitiveUnions> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for TestPrimitiveUnions", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "TestPrimitiveUnions",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.PrimitiveUnions, types.PrimitiveUnions>(
        raw,
        (a): partial_types.PrimitiveUnions => a,
        (a): types.PrimitiveUnions => a,
        this.ctxManager.cloneContext(),
        options.abortSignal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  TestUnionArrays(
      input: string,
      __baml_options__?: BamlCallOptions
  ): BamlStream<partial_types.UnionArrays, types.UnionArrays> {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const signal = options.abortSignal;
      
      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }
      
      let collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      
      let onTickWrapper: (() => void) | undefined;
      
      // Create collector and wrap onTick if provided
      if (options.onTick) {
        const tickCollector = new Collector("on-tick-collector");
        collector = [...collector, tickCollector];
        
        onTickWrapper = () => {
          const log = tickCollector.last;
          if (log) {
            try {
              options.onTick!("Unknown", log);
            } catch (error) {
              console.error("Error in onTick callback for TestUnionArrays", error);
            }
          }
        };
      }

      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      const raw = this.runtime.streamFunction(
        "TestUnionArrays",
        {
          "input": input
        },
        undefined,
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
        onTickWrapper,
      )
      return new BamlStream<partial_types.UnionArrays, types.UnionArrays>(
        raw,
        (a): partial_types.UnionArrays => a,
        (a): types.UnionArrays => a,
        this.ctxManager.cloneContext(),
        options.abortSignal,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)
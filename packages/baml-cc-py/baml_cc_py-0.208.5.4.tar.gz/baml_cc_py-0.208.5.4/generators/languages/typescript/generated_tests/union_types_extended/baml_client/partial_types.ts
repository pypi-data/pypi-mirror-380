/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Admin,  ApiError,  ApiPending,  ApiSuccess,  Bird,  Cat,  Circle,  ComplexUnions,  DataResponse,  DiscriminatedUnions,  Dog,  Error,  ErrorResponse,  PrimitiveUnions,  Product,  Rectangle,  RecursiveUnion,  Result,  Success,  Triangle,  UnionArrays,  User,  Warning } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Admin {
      id?: number | null
      name?: string | null
      permissions: string[]
      type?: "admin" | null
    }
    export interface ApiError {
      status?: "error" | null
      message?: string | null
      code?: number | null
    }
    export interface ApiPending {
      status?: "pending" | null
      progress?: number | null
      eta?: number | null
    }
    export interface ApiSuccess {
      status?: "success" | null
      data: Record<string, string>
    }
    export interface Bird {
      species?: "bird" | null
      canFly?: boolean | null
      wingspan?: number | null
    }
    export interface Cat {
      species?: "cat" | null
      color?: string | null
      lives?: number | null
    }
    export interface Circle {
      shape?: "circle" | null
      radius?: number | null
    }
    export interface ComplexUnions {
      userOrProduct?: User | Product | null
      userOrProductOrAdmin?: User | Product | Admin | null
      dataOrError?: DataResponse | ErrorResponse | null
      resultOrNull?: Result | null
      multiTypeResult?: Success | Warning | Error | null
    }
    export interface DataResponse {
      data?: string | null
      timestamp?: number | null
      status?: "success" | null
    }
    export interface DiscriminatedUnions {
      shape?: Circle | Rectangle | Triangle | null
      animal?: Dog | Cat | Bird | null
      response?: ApiSuccess | ApiError | ApiPending | null
    }
    export interface Dog {
      species?: "dog" | null
      breed?: string | null
      goodBoy?: boolean | null
    }
    export interface Error {
      type?: "error" | null
      message?: string | null
      code?: number | null
      details?: string | null
    }
    export interface ErrorResponse {
      error?: string | null
      code?: number | null
      status?: "error" | null
    }
    export interface PrimitiveUnions {
      stringOrInt?: string | number | null
      stringOrFloat?: string | number | null
      intOrFloat?: number | number | null
      boolOrString?: boolean | string | null
      anyPrimitive?: string | number | number | boolean | null
    }
    export interface Product {
      id?: number | null
      name?: string | null
      price?: number | null
      type?: "product" | null
    }
    export interface Rectangle {
      shape?: "rectangle" | null
      width?: number | null
      height?: number | null
    }
    export interface RecursiveUnion {
      value?: string | number | RecursiveUnion | null
      children: (string | RecursiveUnion)[]
    }
    export interface Result {
      value?: string | number | number | null
      metadata: Record<string, string>
    }
    export interface Success {
      type?: "success" | null
      message?: string | null
      data: Record<string, string>
    }
    export interface Triangle {
      shape?: "triangle" | null
      base?: number | null
      height?: number | null
    }
    export interface UnionArrays {
      mixedArray: (string | number)[]
      nullableItems: (string | null)[]
      objectArray: (User | Product)[]
      nestedUnionArray: (string | number[])[]
    }
    export interface User {
      id?: number | null
      name?: string | null
      type?: "user" | null
    }
    export interface Warning {
      type?: "warning" | null
      message?: string | null
      level?: number | null
    }
}
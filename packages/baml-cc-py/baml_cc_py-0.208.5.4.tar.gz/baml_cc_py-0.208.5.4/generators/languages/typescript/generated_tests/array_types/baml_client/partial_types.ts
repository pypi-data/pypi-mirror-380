/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  ArrayWithConstraints,  MixedArrays,  NestedArrays,  ObjectArrays,  Product,  SimpleArrays,  Tag,  User } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface ArrayWithConstraints {
      nonEmptyStrings: string[]
      limitedInts: number[]
      positiveFloats: number[]
    }
    export interface MixedArrays {
      primitiveArray: (string | number | number | boolean)[]
      nullableArray: (string | null)[]
      optionalItems: (string | null)[]
      arrayOfArrays: string[][]
      complexMixed: (User | Product | Tag)[]
    }
    export interface NestedArrays {
      matrix: number[][]
      stringMatrix: string[][]
      threeDimensional: number[][][]
    }
    export interface ObjectArrays {
      users: User[]
      products: Product[]
      tags: Tag[]
    }
    export interface Product {
      id?: number | null
      name?: string | null
      price?: number | null
      tags: string[]
      inStock?: boolean | null
    }
    export interface SimpleArrays {
      strings: string[]
      integers: number[]
      floats: number[]
      booleans: boolean[]
    }
    export interface Tag {
      id?: number | null
      name?: string | null
      color?: string | null
    }
    export interface User {
      id?: number | null
      name?: string | null
      email?: string | null
      isActive?: boolean | null
    }
}
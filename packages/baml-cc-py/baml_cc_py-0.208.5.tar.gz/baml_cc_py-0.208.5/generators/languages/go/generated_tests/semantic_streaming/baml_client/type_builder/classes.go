// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ClassWithBlockDoneClassView struct {
    inner baml.ClassBuilder
}

func (t *ClassWithBlockDoneClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ClassWithBlockDoneClassView) PropertyI_16_digits() (ClassPropertyView, error) {
    return t.inner.Property("i_16_digits")
}

func (t *ClassWithBlockDoneClassView) PropertyS_20_words() (ClassPropertyView, error) {
    return t.inner.Property("s_20_words")
}


func (t *TypeBuilder) ClassWithBlockDone() (*ClassWithBlockDoneClassView, error) {
	bld, err := t.inner.Class("ClassWithBlockDone")
	if err != nil {
		return nil, err
	}
	return &ClassWithBlockDoneClassView{inner: bld}, nil
}

func (t *ClassWithBlockDoneClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type ClassWithoutDoneClassView struct {
    inner baml.ClassBuilder
}

func (t *ClassWithoutDoneClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ClassWithoutDoneClassView) PropertyI_16_digits() (ClassPropertyView, error) {
    return t.inner.Property("i_16_digits")
}

func (t *ClassWithoutDoneClassView) PropertyS_20_words() (ClassPropertyView, error) {
    return t.inner.Property("s_20_words")
}


func (t *TypeBuilder) ClassWithoutDone() (*ClassWithoutDoneClassView, error) {
	bld, err := t.inner.Class("ClassWithoutDone")
	if err != nil {
		return nil, err
	}
	return &ClassWithoutDoneClassView{inner: bld}, nil
}

func (t *ClassWithoutDoneClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SemanticContainerClassView struct {
    inner baml.ClassBuilder
}

func (t *SemanticContainerClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SemanticContainerClassView) PropertySixteen_digit_number() (ClassPropertyView, error) {
    return t.inner.Property("sixteen_digit_number")
}

func (t *SemanticContainerClassView) PropertyString_with_twenty_words() (ClassPropertyView, error) {
    return t.inner.Property("string_with_twenty_words")
}

func (t *SemanticContainerClassView) PropertyClass_1() (ClassPropertyView, error) {
    return t.inner.Property("class_1")
}

func (t *SemanticContainerClassView) PropertyClass_2() (ClassPropertyView, error) {
    return t.inner.Property("class_2")
}

func (t *SemanticContainerClassView) PropertyClass_done_needed() (ClassPropertyView, error) {
    return t.inner.Property("class_done_needed")
}

func (t *SemanticContainerClassView) PropertyClass_needed() (ClassPropertyView, error) {
    return t.inner.Property("class_needed")
}

func (t *SemanticContainerClassView) PropertyThree_small_things() (ClassPropertyView, error) {
    return t.inner.Property("three_small_things")
}

func (t *SemanticContainerClassView) PropertyFinal_string() (ClassPropertyView, error) {
    return t.inner.Property("final_string")
}


func (t *TypeBuilder) SemanticContainer() (*SemanticContainerClassView, error) {
	bld, err := t.inner.Class("SemanticContainer")
	if err != nil {
		return nil, err
	}
	return &SemanticContainerClassView{inner: bld}, nil
}

func (t *SemanticContainerClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type SmallThingClassView struct {
    inner baml.ClassBuilder
}

func (t *SmallThingClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *SmallThingClassView) PropertyI_16_digits() (ClassPropertyView, error) {
    return t.inner.Property("i_16_digits")
}

func (t *SmallThingClassView) PropertyI_8_digits() (ClassPropertyView, error) {
    return t.inner.Property("i_8_digits")
}


func (t *TypeBuilder) SmallThing() (*SmallThingClassView, error) {
	bld, err := t.inner.Class("SmallThing")
	if err != nil {
		return nil, err
	}
	return &SmallThingClassView{inner: bld}, nil
}

func (t *SmallThingClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

import (
    "context"

    "edge_cases/baml_client/types"
    "edge_cases/baml_client/stream_types"
    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
)

type parse struct {}
var Parse = &parse{}


/// Parse version of TestCircularReference (Takes in string and returns types.CircularReference)
func (*parse) TestCircularReference(text string, opts ...CallOptionFunc) (types.CircularReference, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestCircularReference: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestCircularReference", encoded)
    if err != nil {
        return types.CircularReference{}, err
    }

    casted := (result).(types.CircularReference)

    return casted, nil
}

/// Parse version of TestDeepRecursion (Takes in string and returns types.DeepRecursion)
func (*parse) TestDeepRecursion(text string, opts ...CallOptionFunc) (types.DeepRecursion, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestDeepRecursion: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestDeepRecursion", encoded)
    if err != nil {
        return types.DeepRecursion{}, err
    }

    casted := (result).(types.DeepRecursion)

    return casted, nil
}

/// Parse version of TestEmptyCollections (Takes in string and returns types.EmptyCollections)
func (*parse) TestEmptyCollections(text string, opts ...CallOptionFunc) (types.EmptyCollections, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestEmptyCollections: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestEmptyCollections", encoded)
    if err != nil {
        return types.EmptyCollections{}, err
    }

    casted := (result).(types.EmptyCollections)

    return casted, nil
}

/// Parse version of TestLargeStructure (Takes in string and returns types.LargeStructure)
func (*parse) TestLargeStructure(text string, opts ...CallOptionFunc) (types.LargeStructure, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestLargeStructure: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestLargeStructure", encoded)
    if err != nil {
        return types.LargeStructure{}, err
    }

    casted := (result).(types.LargeStructure)

    return casted, nil
}

/// Parse version of TestNumberEdgeCases (Takes in string and returns types.NumberEdgeCases)
func (*parse) TestNumberEdgeCases(text string, opts ...CallOptionFunc) (types.NumberEdgeCases, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestNumberEdgeCases: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestNumberEdgeCases", encoded)
    if err != nil {
        return types.NumberEdgeCases{}, err
    }

    casted := (result).(types.NumberEdgeCases)

    return casted, nil
}

/// Parse version of TestSpecialCharacters (Takes in string and returns types.SpecialCharacters)
func (*parse) TestSpecialCharacters(text string, opts ...CallOptionFunc) (types.SpecialCharacters, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "text": text, "stream": false },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestSpecialCharacters: %w", err)
        panic(wrapped_err)
    }

    result, err := bamlRuntime.CallFunctionParse(context.Background(), "TestSpecialCharacters", encoded)
    if err != nil {
        return types.SpecialCharacters{}, err
    }

    casted := (result).(types.SpecialCharacters)

    return casted, nil
}

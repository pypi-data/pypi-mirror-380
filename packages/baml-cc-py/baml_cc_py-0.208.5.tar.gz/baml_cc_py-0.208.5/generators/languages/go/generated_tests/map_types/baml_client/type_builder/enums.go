// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type StatusEnumView struct {
    inner baml.EnumBuilder
}

func (t *StatusEnumView) ListValues() ([]EnumValueView, error) {
    result, err := t.inner.ListValues()
	if err != nil {
		return nil, err
	}
	builders := make([]EnumValueView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *StatusEnumView) ValueACTIVE() (EnumValueView, error) {
    return t.inner.Value("ACTIVE")
}

func (t *StatusEnumView) ValueINACTIVE() (EnumValueView, error) {
    return t.inner.Value("INACTIVE")
}

func (t *StatusEnumView) ValuePENDING() (EnumValueView, error) {
    return t.inner.Value("PENDING")
}


func (t *TypeBuilder) Status() (*StatusEnumView, error) {
	bld, err := t.inner.Enum("Status")
	if err != nil {
		return nil, err
	}
	return &StatusEnumView{inner: bld}, nil
}

func (t *StatusEnumView) Type() (baml.Type, error) {
	return t.inner.Type()
}

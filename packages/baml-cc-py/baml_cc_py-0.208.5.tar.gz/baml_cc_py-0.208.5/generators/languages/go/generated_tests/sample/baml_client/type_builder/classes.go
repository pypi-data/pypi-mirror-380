// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type ExampleClassView struct {
    inner baml.ClassBuilder
}

func (t *ExampleClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *ExampleClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *ExampleClassView) PropertyA() (ClassPropertyView, error) {
    return t.inner.Property("a")
}

func (t *ExampleClassView) PropertyB() (ClassPropertyView, error) {
    return t.inner.Property("b")
}


func (t *TypeBuilder) Example() (*ExampleClassView, error) {
	bld, err := t.inner.Class("Example")
	if err != nil {
		return nil, err
	}
	return &ExampleClassView{inner: bld}, nil
}

func (t *ExampleClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type Example2ClassView struct {
    inner baml.ClassBuilder
}

func (t *Example2ClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *Example2ClassView) PropertyType() (ClassPropertyView, error) {
    return t.inner.Property("type")
}

func (t *Example2ClassView) PropertyItem() (ClassPropertyView, error) {
    return t.inner.Property("item")
}

func (t *Example2ClassView) PropertyElement() (ClassPropertyView, error) {
    return t.inner.Property("element")
}

func (t *Example2ClassView) PropertyElement2() (ClassPropertyView, error) {
    return t.inner.Property("element2")
}


func (t *TypeBuilder) Example2() (*Example2ClassView, error) {
	bld, err := t.inner.Class("Example2")
	if err != nil {
		return nil, err
	}
	return &Example2ClassView{inner: bld}, nil
}

func (t *Example2ClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

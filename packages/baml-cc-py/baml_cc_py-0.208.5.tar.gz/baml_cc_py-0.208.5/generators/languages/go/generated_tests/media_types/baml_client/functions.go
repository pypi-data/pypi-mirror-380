// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

import (
    "context"

    "media_types/baml_client/types"
    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
)



func TestMediaArrayInputs(ctx context.Context, imageArray []types.Image, textInput string, opts ...CallOptionFunc) (types.MediaArrayAnalysisResult, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "imageArray": imageArray,"textInput": textInput, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestMediaArrayInputs", encoded, callOpts.onTick)
        if err != nil {
            return types.MediaArrayAnalysisResult{}, err
        }

        if result.Error != nil {
            return types.MediaArrayAnalysisResult{}, result.Error
        }

        casted := (result.Data).(types.MediaArrayAnalysisResult)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestMediaArrayInputs", encoded, callOpts.onTick)
        if err != nil {
            return types.MediaArrayAnalysisResult{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.MediaArrayAnalysisResult{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.MediaArrayAnalysisResult), nil
            }
        }

        return types.MediaArrayAnalysisResult{}, fmt.Errorf("No data returned from stream")
    }
}


func TestMediaInput(ctx context.Context, media types.Union4AudioOrImageOrPDFOrVideo, textInput string, opts ...CallOptionFunc) (types.MediaAnalysisResult, error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "media": media,"textInput": textInput, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        panic(err)
    }

    if callOpts.onTick == nil {
        result, err := bamlRuntime.CallFunction(ctx, "TestMediaInput", encoded, callOpts.onTick)
        if err != nil {
            return types.MediaAnalysisResult{}, err
        }

        if result.Error != nil {
            return types.MediaAnalysisResult{}, result.Error
        }

        casted := (result.Data).(types.MediaAnalysisResult)

        return casted, nil
    } else {
        channel, err := bamlRuntime.CallFunctionStream(ctx, "TestMediaInput", encoded, callOpts.onTick)
        if err != nil {
            return types.MediaAnalysisResult{}, err
        }

        for result := range channel {
            if result.Error != nil {
                return types.MediaAnalysisResult{}, result.Error
            }

            if result.HasData {
                return result.Data.(types.MediaAnalysisResult), nil
            }
        }

        return types.MediaAnalysisResult{}, fmt.Errorf("No data returned from stream")
    }
}

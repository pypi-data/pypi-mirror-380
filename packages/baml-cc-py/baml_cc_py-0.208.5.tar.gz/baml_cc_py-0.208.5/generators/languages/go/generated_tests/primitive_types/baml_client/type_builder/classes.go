// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package type_builder

import baml "github.com/boundaryml/baml/engine/language_client_go/pkg"


type MixedPrimitivesClassView struct {
    inner baml.ClassBuilder
}

func (t *MixedPrimitivesClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *MixedPrimitivesClassView) PropertyName() (ClassPropertyView, error) {
    return t.inner.Property("name")
}

func (t *MixedPrimitivesClassView) PropertyAge() (ClassPropertyView, error) {
    return t.inner.Property("age")
}

func (t *MixedPrimitivesClassView) PropertyHeight() (ClassPropertyView, error) {
    return t.inner.Property("height")
}

func (t *MixedPrimitivesClassView) PropertyIsActive() (ClassPropertyView, error) {
    return t.inner.Property("isActive")
}

func (t *MixedPrimitivesClassView) PropertyMetadata() (ClassPropertyView, error) {
    return t.inner.Property("metadata")
}

func (t *MixedPrimitivesClassView) PropertyTags() (ClassPropertyView, error) {
    return t.inner.Property("tags")
}

func (t *MixedPrimitivesClassView) PropertyScores() (ClassPropertyView, error) {
    return t.inner.Property("scores")
}

func (t *MixedPrimitivesClassView) PropertyMeasurements() (ClassPropertyView, error) {
    return t.inner.Property("measurements")
}

func (t *MixedPrimitivesClassView) PropertyFlags() (ClassPropertyView, error) {
    return t.inner.Property("flags")
}


func (t *TypeBuilder) MixedPrimitives() (*MixedPrimitivesClassView, error) {
	bld, err := t.inner.Class("MixedPrimitives")
	if err != nil {
		return nil, err
	}
	return &MixedPrimitivesClassView{inner: bld}, nil
}

func (t *MixedPrimitivesClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrimitiveArraysClassView struct {
    inner baml.ClassBuilder
}

func (t *PrimitiveArraysClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrimitiveArraysClassView) PropertyStringArray() (ClassPropertyView, error) {
    return t.inner.Property("stringArray")
}

func (t *PrimitiveArraysClassView) PropertyIntArray() (ClassPropertyView, error) {
    return t.inner.Property("intArray")
}

func (t *PrimitiveArraysClassView) PropertyFloatArray() (ClassPropertyView, error) {
    return t.inner.Property("floatArray")
}

func (t *PrimitiveArraysClassView) PropertyBoolArray() (ClassPropertyView, error) {
    return t.inner.Property("boolArray")
}


func (t *TypeBuilder) PrimitiveArrays() (*PrimitiveArraysClassView, error) {
	bld, err := t.inner.Class("PrimitiveArrays")
	if err != nil {
		return nil, err
	}
	return &PrimitiveArraysClassView{inner: bld}, nil
}

func (t *PrimitiveArraysClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrimitiveMapsClassView struct {
    inner baml.ClassBuilder
}

func (t *PrimitiveMapsClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrimitiveMapsClassView) PropertyStringMap() (ClassPropertyView, error) {
    return t.inner.Property("stringMap")
}

func (t *PrimitiveMapsClassView) PropertyIntMap() (ClassPropertyView, error) {
    return t.inner.Property("intMap")
}

func (t *PrimitiveMapsClassView) PropertyFloatMap() (ClassPropertyView, error) {
    return t.inner.Property("floatMap")
}

func (t *PrimitiveMapsClassView) PropertyBoolMap() (ClassPropertyView, error) {
    return t.inner.Property("boolMap")
}


func (t *TypeBuilder) PrimitiveMaps() (*PrimitiveMapsClassView, error) {
	bld, err := t.inner.Class("PrimitiveMaps")
	if err != nil {
		return nil, err
	}
	return &PrimitiveMapsClassView{inner: bld}, nil
}

func (t *PrimitiveMapsClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

type PrimitiveTypesClassView struct {
    inner baml.ClassBuilder
}

func (t *PrimitiveTypesClassView) ListProperties() ([]ClassPropertyView, error) {
    result, err := t.inner.ListProperties()
	if err != nil {
		return nil, err
	}
	builders := make([]ClassPropertyView, len(result))
	for i, p := range result {
		builders[i] = p
	}
	return builders, nil
}




func (t *PrimitiveTypesClassView) PropertyStringField() (ClassPropertyView, error) {
    return t.inner.Property("stringField")
}

func (t *PrimitiveTypesClassView) PropertyIntField() (ClassPropertyView, error) {
    return t.inner.Property("intField")
}

func (t *PrimitiveTypesClassView) PropertyFloatField() (ClassPropertyView, error) {
    return t.inner.Property("floatField")
}

func (t *PrimitiveTypesClassView) PropertyBoolField() (ClassPropertyView, error) {
    return t.inner.Property("boolField")
}

func (t *PrimitiveTypesClassView) PropertyNullField() (ClassPropertyView, error) {
    return t.inner.Property("nullField")
}


func (t *TypeBuilder) PrimitiveTypes() (*PrimitiveTypesClassView, error) {
	bld, err := t.inner.Class("PrimitiveTypes")
	if err != nil {
		return nil, err
	}
	return &PrimitiveTypesClassView{inner: bld}, nil
}

func (t *PrimitiveTypesClassView) Type() (baml.Type, error) {
	return t.inner.Type()
}

// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

import (
    "context"

    "map_types/baml_client/types"
    "map_types/baml_client/stream_types"
    baml "github.com/boundaryml/baml/engine/language_client_go/pkg"
)

type stream struct {}
var Stream = &stream{}

type StreamValue[TStream any, TFinal any] struct {
    IsError   bool
    Error     error
    IsFinal   bool
    as_final  *TFinal
    as_stream *TStream
}

func (s *StreamValue[TStream, TFinal]) Final() *TFinal {
    return s.as_final
}

func (s *StreamValue[TStream, TFinal]) Stream() *TStream {
    return s.as_stream
}


/// Streaming version of TestComplexMaps
func (*stream) TestComplexMaps(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.ComplexMaps, types.ComplexMaps], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestComplexMaps: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestComplexMaps", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.ComplexMaps, types.ComplexMaps])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.ComplexMaps, types.ComplexMaps]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.ComplexMaps)
                    channel <- StreamValue[stream_types.ComplexMaps, types.ComplexMaps]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.ComplexMaps)
                channel <- StreamValue[stream_types.ComplexMaps, types.ComplexMaps]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestEdgeCaseMaps
func (*stream) TestEdgeCaseMaps(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.EdgeCaseMaps, types.EdgeCaseMaps], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestEdgeCaseMaps: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestEdgeCaseMaps", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.EdgeCaseMaps, types.EdgeCaseMaps])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.EdgeCaseMaps, types.EdgeCaseMaps]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.EdgeCaseMaps)
                    channel <- StreamValue[stream_types.EdgeCaseMaps, types.EdgeCaseMaps]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.EdgeCaseMaps)
                channel <- StreamValue[stream_types.EdgeCaseMaps, types.EdgeCaseMaps]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestLargeMaps
func (*stream) TestLargeMaps(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.SimpleMaps, types.SimpleMaps], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestLargeMaps: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestLargeMaps", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.SimpleMaps, types.SimpleMaps])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.SimpleMaps)
                    channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.SimpleMaps)
                channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestNestedMaps
func (*stream) TestNestedMaps(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.NestedMaps, types.NestedMaps], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestNestedMaps: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestNestedMaps", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.NestedMaps, types.NestedMaps])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.NestedMaps, types.NestedMaps]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.NestedMaps)
                    channel <- StreamValue[stream_types.NestedMaps, types.NestedMaps]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.NestedMaps)
                channel <- StreamValue[stream_types.NestedMaps, types.NestedMaps]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestSimpleMaps
func (*stream) TestSimpleMaps(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[stream_types.SimpleMaps, types.SimpleMaps], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestSimpleMaps: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestSimpleMaps", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[stream_types.SimpleMaps, types.SimpleMaps])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(types.SimpleMaps)
                    channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(stream_types.SimpleMaps)
                channel <- StreamValue[stream_types.SimpleMaps, types.SimpleMaps]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelBoolMap
func (*stream) TestTopLevelBoolMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]bool, map[string]bool], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelBoolMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelBoolMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]bool, map[string]bool])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]bool, map[string]bool]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]bool)
                    channel <- StreamValue[map[string]bool, map[string]bool]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]bool)
                channel <- StreamValue[map[string]bool, map[string]bool]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelEmptyMap
func (*stream) TestTopLevelEmptyMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]string, map[string]string], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelEmptyMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelEmptyMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]string, map[string]string])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]string, map[string]string]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]string)
                    channel <- StreamValue[map[string]string, map[string]string]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]string)
                channel <- StreamValue[map[string]string, map[string]string]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelFloatMap
func (*stream) TestTopLevelFloatMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]float64, map[string]float64], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelFloatMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelFloatMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]float64, map[string]float64])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]float64, map[string]float64]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]float64)
                    channel <- StreamValue[map[string]float64, map[string]float64]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]float64)
                channel <- StreamValue[map[string]float64, map[string]float64]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelIntMap
func (*stream) TestTopLevelIntMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]int64, map[string]int64], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelIntMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelIntMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]int64, map[string]int64])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]int64, map[string]int64]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]int64)
                    channel <- StreamValue[map[string]int64, map[string]int64]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]int64)
                channel <- StreamValue[map[string]int64, map[string]int64]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelMapOfArrays
func (*stream) TestTopLevelMapOfArrays(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string][]int64, map[string][]int64], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelMapOfArrays: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelMapOfArrays", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string][]int64, map[string][]int64])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string][]int64, map[string][]int64]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string][]int64)
                    channel <- StreamValue[map[string][]int64, map[string][]int64]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string][]int64)
                channel <- StreamValue[map[string][]int64, map[string][]int64]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelMapOfObjects
func (*stream) TestTopLevelMapOfObjects(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]stream_types.User, map[string]types.User], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelMapOfObjects: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelMapOfObjects", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]stream_types.User, map[string]types.User])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]stream_types.User, map[string]types.User]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]types.User)
                    channel <- StreamValue[map[string]stream_types.User, map[string]types.User]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]stream_types.User)
                channel <- StreamValue[map[string]stream_types.User, map[string]types.User]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelMapWithNullable
func (*stream) TestTopLevelMapWithNullable(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]*string, map[string]*string], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelMapWithNullable: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelMapWithNullable", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]*string, map[string]*string])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]*string, map[string]*string]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]*string)
                    channel <- StreamValue[map[string]*string, map[string]*string]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]*string)
                channel <- StreamValue[map[string]*string, map[string]*string]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelNestedMap
func (*stream) TestTopLevelNestedMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]map[string]string, map[string]map[string]string], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelNestedMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelNestedMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]map[string]string, map[string]map[string]string])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]map[string]string, map[string]map[string]string]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]map[string]string)
                    channel <- StreamValue[map[string]map[string]string, map[string]map[string]string]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]map[string]string)
                channel <- StreamValue[map[string]map[string]string, map[string]map[string]string]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

/// Streaming version of TestTopLevelStringMap
func (*stream) TestTopLevelStringMap(ctx context.Context, input string, opts ...CallOptionFunc) (<-chan StreamValue[map[string]string, map[string]string], error) {

    var callOpts callOption
    for _, opt := range opts {
        opt(&callOpts)
    }

    args := baml.BamlFunctionArguments{
        Kwargs: map[string]any{ "input": input, },
        Env: getEnvVars(callOpts.env),
    }

    if callOpts.clientRegistry != nil {
        args.ClientRegistry = callOpts.clientRegistry
    }

    if callOpts.collectors != nil {
        args.Collectors = callOpts.collectors
    }

    if callOpts.typeBuilder != nil {
        args.TypeBuilder = callOpts.typeBuilder
    }

    encoded, err := args.Encode()
    if err != nil {
        // This should never happen. if it does, please file an issue at https://github.com/boundaryml/baml/issues
        // and include the type of the args you're passing in.
        wrapped_err := fmt.Errorf("BAML INTERNAL ERROR: TestTopLevelStringMap: %w", err)
        panic(wrapped_err)
    }

    internal_channel, err := bamlRuntime.CallFunctionStream(ctx, "TestTopLevelStringMap", encoded, callOpts.onTick)
    if err != nil {
        return nil, err
    }

    channel := make(chan StreamValue[map[string]string, map[string]string])
    go func() {
        for result := range internal_channel {
            if result.Error != nil {
                channel <- StreamValue[map[string]string, map[string]string]{
                    IsError: true,
                    Error:   result.Error,
                }
                close(channel)
                return
            }
            if result.HasData {
                    data := (result.Data).(map[string]string)
                    channel <- StreamValue[map[string]string, map[string]string]{
                        IsFinal: true,
                        as_final: &data,
                    }
            } else {
                data := (result.StreamData).(map[string]string)
                channel <- StreamValue[map[string]string, map[string]string]{
                    IsFinal: false,
                    as_stream: &data,
                }
            }
        }

		// when internal_channel is closed, close the output too
		close(channel)
    }()
    return channel, nil
}

// ----------------------------------------------------------------------------
//
//  Welcome to Baml! To use this generated code, please run the following:
//
//  $ go get github.com/boundaryml/baml
//
// ----------------------------------------------------------------------------

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ go install github.com/boundaryml/baml/baml-cli

package baml_client

var file_map = map[string]string{
  
  "baml_src/main.baml": "// Test array types in BAML\n\nclass SimpleArrays {\n  strings string[]\n  integers int[]\n  floats float[]\n  booleans bool[]\n}\n\nclass NestedArrays {\n  matrix int[][]\n  stringMatrix string[][]\n  threeDimensional float[][][]\n}\n\nclass ObjectArrays {\n  users User[]\n  products Product[]\n  tags Tag[]\n}\n\nclass User {\n  id int\n  name string\n  email string\n  isActive bool\n}\n\nclass Product {\n  id int\n  name string\n  price float\n  tags string[]\n  inStock bool\n}\n\nclass Tag {\n  id int\n  name string\n  color string\n}\n\nclass MixedArrays {\n  primitiveArray (string | int | float | bool)[]\n  nullableArray (string | null)[]\n  optionalItems (string?)[]\n  arrayOfArrays string[][]\n  complexMixed (User | Product | Tag)[]\n}\n\nclass ArrayWithConstraints {\n  nonEmptyStrings string[]\n  limitedInts int[]\n  positiveFloats float[]\n}\n\nfunction TestSimpleArrays(input: string) -> SimpleArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleArrays object with:\n    - strings: [\"hello\", \"world\", \"test\"]\n    - integers: [1, 2, 3, 4, 5]\n    - floats: [1.1, 2.2, 3.3]\n    - booleans: [true, false, true, false]\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestNestedArrays(input: string) -> NestedArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a NestedArrays object with:\n    - matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    - stringMatrix: [[\"a\", \"b\"], [\"c\", \"d\"]]\n    - threeDimensional: [[[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0]]]\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestObjectArrays(input: string) -> ObjectArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an ObjectArrays object with:\n    - users: 3 user objects with different data\n    - products: 2 product objects with realistic data\n    - tags: 4 tag objects with different colors\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestMixedArrays(input: string) -> MixedArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a MixedArrays object with:\n    - primitiveArray: [\"hello\", 42, 3.14, true]\n    - nullableArray: [\"hello\", null, \"world\", null]\n    - optionalItems: [\"present\", null, \"also present\"]\n    - arrayOfArrays: [[\"a\", \"b\"], [\"c\", \"d\", \"e\"]]\n    - complexMixed: mix of User, Product, and Tag objects\n\n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestEmptyArrays(input: string) -> SimpleArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleArrays object with all empty arrays.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestLargeArrays(input: string) -> SimpleArrays {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a SimpleArrays object with:\n    - strings: array of 50 different words\n    - integers: array of integers from 1 to 100\n    - floats: array of 25 different decimal numbers\n    - booleans: array of 20 alternating true/false values\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\n// Top-level array return type tests\nfunction TestTopLevelStringArray(input: string) -> string[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of strings: [\"apple\", \"banana\", \"cherry\", \"date\"]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelIntArray(input: string) -> int[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of integers: [10, 20, 30, 40, 50]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelFloatArray(input: string) -> float[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of floats: [1.5, 2.5, 3.5, 4.5]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelBoolArray(input: string) -> bool[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of booleans: [true, false, true, false, true]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelNestedArray(input: string) -> int[][] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a 2D array of integers:\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevel3DArray(input: string) -> string[][][] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a 3D array of strings:\n    [[[\"a\", \"b\"], [\"c\", \"d\"]], [[\"e\", \"f\"], [\"g\", \"h\"]]]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelEmptyArray(input: string) -> string[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an empty array: []\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelNullableArray(input: string) -> (string | null)[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array with nullable strings: [\"hello\", null, \"world\", null, \"!\"]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelObjectArray(input: string) -> User[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of 3 User objects with realistic data.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelMixedArray(input: string) -> (string | int | bool)[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return a mixed type array: [\"hello\", 42, true, \"world\", 100, false]\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestTopLevelArrayOfMaps(input: string) -> map<string, int>[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Return an array of maps:\n    [{\"a\": 1, \"b\": 2}, {\"x\": 10, \"y\": 20}, {\"foo\": 100, \"bar\": 200}]\n    \n    Input: {{ input }}\n  \"#\n}",  
}

func getBamlFiles() map[string]string {
  return file_map
}
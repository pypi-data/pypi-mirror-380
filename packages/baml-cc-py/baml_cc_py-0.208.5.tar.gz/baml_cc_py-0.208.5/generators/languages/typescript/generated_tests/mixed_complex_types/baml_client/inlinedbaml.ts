/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "baml_src/main.baml": "// Test mixed complex type combinations in BAML\n\nclass KitchenSink {\n  // Primitives\n  id int\n  name string\n  score float\n  active bool\n  nothing null\n  \n  // Literals\n  status \"draft\" | \"published\" | \"archived\"\n  priority 1 | 2 | 3 | 4 | 5\n  \n  // Arrays\n  tags string[]\n  numbers int[]\n  matrix int[][]\n  \n  // Maps\n  metadata map<string, string>\n  scores map<string, float>\n  \n  // Optional/Nullable\n  description string?\n  notes string | null\n  \n  // Unions\n  data string | int | DataObject\n  result Success | Error\n  \n  // Complex nested\n  user User\n  items Item[]\n  config Configuration\n}\n\nclass DataObject {\n  type \"object\"\n  value map<string, string>\n}\n\nclass Success {\n  type \"success\"\n  data map<string, string>\n}\n\nclass Error {\n  type \"error\"\n  message string\n  code int\n}\n\nclass User {\n  id int\n  profile UserProfile\n  settings map<string, Setting>\n}\n\nclass UserProfile {\n  name string\n  email string\n  // TODO: Go generator doesn't support image type yet\n  // avatar image?\n  bio string?\n  links string[]\n}\n\nclass Setting {\n  key string\n  value string | int | bool\n  metadata map<string, string>?\n}\n\nclass Item {\n  id int\n  name string\n  variants Variant[]\n  attributes map<string, string | int | float | bool>\n}\n\nclass Variant {\n  sku string\n  price float\n  stock int\n  options map<string, string>\n}\n\nclass Configuration {\n  version string\n  features Feature[]\n  environments map<string, Environment>\n  rules Rule[]\n}\n\nclass Feature {\n  name string\n  enabled bool\n  config map<string, string | int | bool>?\n  dependencies string[]\n}\n\nclass Environment {\n  name string\n  url string\n  variables map<string, string>\n  secrets map<string, string>?\n}\n\nclass Rule {\n  id int\n  name string\n  condition Condition\n  actions Action[]\n  priority int\n}\n\nclass Condition {\n  type \"and\" | \"or\" | \"not\"\n  conditions (Condition | SimpleCondition)[]\n}\n\nclass SimpleCondition {\n  field string\n  operator \"eq\" | \"ne\" | \"gt\" | \"lt\" | \"contains\"\n  value string | int | float | bool\n}\n\nclass Action {\n  type string\n  parameters map<string, string | int | bool>\n  async_ bool @alias(\"async\")\n}\n\nclass UltraComplex {\n  // Recursive union with arrays and maps\n  tree Node\n  \n  // Discriminated union with nested complexity\n  widgets Widget[]\n  \n  // Multi-level optional/nullable\n  data ComplexData?\n  \n  // Response structure\n  response UserResponse\n  \n  // Mixed media\n  assets Asset[]\n}\n\nclass Node {\n  id int\n  type \"leaf\" | \"branch\"\n  value string | int | Node[] | map<string, Node>\n  metadata NodeMetadata?\n}\n\nclass NodeMetadata {\n  created string\n  modified string\n  tags string[]\n  attributes map<string, string | int | bool | null>\n}\n\nclass Widget {\n  type \"button\" | \"text\" | \"image\" | \"container\"\n  button ButtonWidget?\n  text TextWidget?\n  image ImageWidget?\n  container ContainerWidget?\n}\n\nclass ButtonWidget {\n  label string\n  action string\n  style map<string, string>\n}\n\nclass TextWidget {\n  content string\n  format \"plain\" | \"markdown\" | \"html\"\n  style map<string, string>\n}\n\nclass ImageWidget {\n  // TODO: Go generator doesn't support image type yet\n  // source image\n  alt string\n  dimensions Dimensions\n}\n\nclass Dimensions {\n  width int\n  height int\n}\n\nclass ContainerWidget {\n  layout \"flex\" | \"grid\" | \"stack\"\n  children Widget[]\n  style map<string, string>\n}\n\nclass ComplexData {\n  primary PrimaryData\n  secondary SecondaryData?\n  tertiary TertiaryData | null\n}\n\nclass PrimaryData {\n  values (string | int | float)[]\n  mappings map<string, map<string, string>>\n  flags bool[]\n}\n\nclass SecondaryData {\n  records Record[]\n  index map<string, Record>\n}\n\nclass Record {\n  id int\n  data map<string, string | int | bool | null>\n  related Record[]?\n}\n\nclass TertiaryData {\n  raw string\n  parsed map<string, string>?\n  valid bool\n}\n\n// User response\nclass UserResponse {\n  status \"success\" | \"error\"\n  data User?\n  error ErrorDetail?\n  metadata ResponseMetadata\n}\n\nclass ErrorDetail {\n  code string\n  message string\n  details map<string, string>?\n}\n\nclass ResponseMetadata {\n  timestamp string\n  requestId string\n  duration int\n  retries int\n}\n\nclass Asset {\n  id int\n  type \"image\" | \"audio\" | \"document\"\n  // TODO: Go generator doesn't support image/audio types yet\n  // media image | audio | null\n  metadata AssetMetadata\n  tags string[]\n}\n\nclass AssetMetadata {\n  filename string\n  size int\n  mimeType string\n  uploaded string\n  checksum string\n}\n\nfunction TestKitchenSink(input: string) -> KitchenSink {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Create a KitchenSink object with all fields populated with realistic test data.\n    Mix different types appropriately in unions and complex fields.\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestUltraComplex(input: string) -> UltraComplex {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Create an UltraComplex object demonstrating:\n    - A tree structure with mixed node types\n    - Various widget types in the array\n    - Complex nested data structures\n    - A successful response with user data\n    - Mixed media assets\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}\n\nfunction TestRecursiveComplexity(input: string) -> Node {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Create a Node tree structure that demonstrates:\n    - Leaf nodes with string and int values\n    - Branch nodes with array children\n    - Nodes with map values containing other nodes\n    - At least 3 levels of nesting\n    \n    {{ ctx.output_format }}\n    \n    Input: {{ input }}\n  \"#\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}
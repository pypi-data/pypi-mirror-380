/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  MixedPrimitives,  PrimitiveArrays,  PrimitiveMaps,  PrimitiveTypes } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface MixedPrimitives {
      name?: string | null
      age?: number | null
      height?: number | null
      isActive?: boolean | null
      metadata: undefined
      tags: string[]
      scores: number[]
      measurements: number[]
      flags: boolean[]
    }
    export interface PrimitiveArrays {
      stringArray: string[]
      intArray: number[]
      floatArray: number[]
      boolArray: boolean[]
    }
    export interface PrimitiveMaps {
      stringMap: Record<string, string>
      intMap: Record<string, number>
      floatMap: Record<string, number>
      boolMap: Record<string, boolean>
    }
    export interface PrimitiveTypes {
      stringField?: string | null
      intField?: number | null
      floatField?: number | null
      boolField?: boolean | null
      nullField: undefined
    }
}
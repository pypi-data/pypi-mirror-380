/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Action {
  type: string
  parameters: Record<string, string | number | boolean>
  async_: boolean
  
}

export interface Asset {
  id: number
  type: "image" | "audio" | "document"
  metadata: AssetMetadata
  tags: string[]
  
}

export interface AssetMetadata {
  filename: string
  size: number
  mimeType: string
  uploaded: string
  checksum: string
  
}

export interface ButtonWidget {
  label: string
  action: string
  style: Record<string, string>
  
}

export interface ComplexData {
  primary: PrimaryData
  secondary?: SecondaryData | null
  tertiary?: TertiaryData | null
  
}

export interface Condition {
  type: "and" | "or" | "not"
  conditions: (Condition | SimpleCondition)[]
  
}

export interface Configuration {
  version: string
  features: Feature[]
  environments: Record<string, Environment>
  rules: Rule[]
  
}

export interface ContainerWidget {
  layout: "flex" | "grid" | "stack"
  children: Widget[]
  style: Record<string, string>
  
}

export interface DataObject {
  type: "object"
  value: Record<string, string>
  
}

export interface Dimensions {
  width: number
  height: number
  
}

export interface Environment {
  name: string
  url: string
  variables: Record<string, string>
  secrets?: Record<string, string> | null
  
}

export interface Error {
  type: "error"
  message: string
  code: number
  
}

export interface ErrorDetail {
  code: string
  message: string
  details?: Record<string, string> | null
  
}

export interface Feature {
  name: string
  enabled: boolean
  config?: Record<string, string | number | boolean> | null
  dependencies: string[]
  
}

export interface ImageWidget {
  alt: string
  dimensions: Dimensions
  
}

export interface Item {
  id: number
  name: string
  variants: Variant[]
  attributes: Record<string, string | number | number | boolean>
  
}

export interface KitchenSink {
  id: number
  name: string
  score: number
  active: boolean
  nothing: undefined
  status: "draft" | "published" | "archived"
  priority: 1 | 2 | 3 | 4 | 5
  tags: string[]
  numbers: number[]
  matrix: number[][]
  metadata: Record<string, string>
  scores: Record<string, number>
  description?: string | null
  notes?: string | null
  data: string | number | DataObject
  result: Success | Error
  user: User
  items: Item[]
  config: Configuration
  
}

export interface Node {
  id: number
  type: "leaf" | "branch"
  value: string | number | Node[] | Record<string, Node>
  metadata?: NodeMetadata | null
  
}

export interface NodeMetadata {
  created: string
  modified: string
  tags: string[]
  attributes: Record<string, string | number | boolean | null>
  
}

export interface PrimaryData {
  values: (string | number | number)[]
  mappings: Record<string, Record<string, string>>
  flags: boolean[]
  
}

export interface Record {
  id: number
  data: Record<string, string | number | boolean | null>
  related?: Record[] | null
  
}

export interface ResponseMetadata {
  timestamp: string
  requestId: string
  duration: number
  retries: number
  
}

export interface Rule {
  id: number
  name: string
  condition: Condition
  actions: Action[]
  priority: number
  
}

export interface SecondaryData {
  records: Record[]
  index: Record<string, Record>
  
}

export interface Setting {
  key: string
  value: string | number | boolean
  metadata?: Record<string, string> | null
  
}

export interface SimpleCondition {
  field: string
  operator: "eq" | "ne" | "gt" | "lt" | "contains"
  value: string | number | number | boolean
  
}

export interface Success {
  type: "success"
  data: Record<string, string>
  
}

export interface TertiaryData {
  raw: string
  parsed?: Record<string, string> | null
  valid: boolean
  
}

export interface TextWidget {
  content: string
  format: "plain" | "markdown" | "html"
  style: Record<string, string>
  
}

export interface UltraComplex {
  tree: Node
  widgets: Widget[]
  data?: ComplexData | null
  response: UserResponse
  assets: Asset[]
  
}

export interface User {
  id: number
  profile: UserProfile
  settings: Record<string, Setting>
  
}

export interface UserProfile {
  name: string
  email: string
  bio?: string | null
  links: string[]
  
}

export interface UserResponse {
  status: "success" | "error"
  data?: User | null
  error?: ErrorDetail | null
  metadata: ResponseMetadata
  
}

export interface Variant {
  sku: string
  price: number
  stock: number
  options: Record<string, string>
  
}

export interface Widget {
  type: "button" | "text" | "image" | "container"
  button?: ButtonWidget | null
  text?: TextWidget | null
  image?: ImageWidget | null
  container?: ContainerWidget | null
  
}

/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface AllNullable {
  nullString?: string | null
  nullInt?: number | null
  nullFloat?: number | null
  nullBool?: boolean | null
  nullArray?: string[] | null
  nullObject?: User | null
  
}

export interface BooleanEdgeCases {
  explicitTrue: boolean
  explicitFalse: boolean
  arrayOfTrue: boolean[]
  arrayOfFalse: boolean[]
  mixedBoolArray: boolean[]
  
}

export interface CircularReference {
  id: number
  name: string
  parent?: CircularReference | null
  children: CircularReference[]
  relatedItems: CircularReference[]
  
}

export interface DeepRecursion {
  value: string
  next?: DeepRecursion | null
  
}

export interface EmptyCollections {
  emptyStringArray: string[]
  emptyIntArray: number[]
  emptyObjectArray: User[]
  emptyMap: Record<string, string>
  emptyNestedArray: string[][]
  
}

export interface InnerNullable {
  value?: string | null
  
}

export interface LargeStructure {
  field1: string
  field2: string
  field3: string
  field4: string
  field5: string
  field6: number
  field7: number
  field8: number
  field9: number
  field10: number
  field11: number
  field12: number
  field13: number
  field14: number
  field15: number
  field16: boolean
  field17: boolean
  field18: boolean
  field19: boolean
  field20: boolean
  array1: string[]
  array2: number[]
  array3: number[]
  array4: boolean[]
  array5: User[]
  map1: Record<string, string>
  map2: Record<string, number>
  map3: Record<string, number>
  map4: Record<string, boolean>
  map5: Record<string, User>
  
}

export interface MixedEdgeCases {
  emptyString: string
  singleChar: string
  veryLongArray: string[]
  deeplyNestedMap: Record<string, Record<string, Record<string, string>>>
  mixedTypeArray: (string | number | boolean)[]
  optionalEverything?: OptionalEverything | null
  
}

export interface NestedNullable {
  outer?: OuterNullable | null
  
}

export interface NullEdgeCases {
  allNull: AllNullable
  someNull: SomeNullable
  nestedNull: NestedNullable
  
}

export interface NumberEdgeCases {
  zero: number
  negativeInt: number
  largeInt: number
  veryLargeInt: number
  smallFloat: number
  largeFloat: number
  negativeFloat: number
  scientificNotation: number
  infinity?: number | null
  notANumber?: number | null
  
}

export interface OptionalEverything {
  optString?: string | null
  optInt?: number | null
  optFloat?: number | null
  optBool?: boolean | null
  optArray?: string[] | null
  optMap?: Record<string, string> | null
  optObject?: User | null
  
}

export interface OuterNullable {
  inner?: InnerNullable | null
  
}

export interface SomeNullable {
  presentString?: string | null
  nullString?: string | null
  presentInt?: number | null
  nullInt?: number | null
  
}

export interface SpecialCharacters {
  normalText: string
  withNewlines: string
  withTabs: string
  withQuotes: string
  withBackslashes: string
  withUnicode: string
  withEmoji: string
  withMixedSpecial: string
  
}

export interface User {
  id: number
  name: string
  
}

export interface VeryLongStrings {
  shortString: string
  mediumString: string
  longString: string
  veryLongString: string
  extremelyLongString: string
  
}

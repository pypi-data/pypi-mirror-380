# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        on_tick: typing.Optional[typing.Callable[[str, baml_py.baml_py.FunctionLog], None]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        if on_tick is not None:
            options["on_tick"] = on_tick
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def TestComplexNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ComplexNested:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestComplexNested(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestComplexNested", args={
                "input": input,
            })
            return typing.cast(types.ComplexNested, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestDeeplyNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DeeplyNested:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestDeeplyNested(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestDeeplyNested", args={
                "input": input,
            })
            return typing.cast(types.DeeplyNested, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestRecursiveStructure(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.RecursiveStructure:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestRecursiveStructure(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestRecursiveStructure", args={
                "input": input,
            })
            return typing.cast(types.RecursiveStructure, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TestSimpleNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimpleNested:
        # Check if on_tick is provided
        if 'on_tick' in baml_options:
            # Use streaming internally when on_tick is provided
            stream = self.stream.TestSimpleNested(input=input,
                baml_options=baml_options)
            return await stream.get_final_response()
        else:
            # Original non-streaming code
            result = await self.__options.merge_options(baml_options).call_function_async(function_name="TestSimpleNested", args={
                "input": input,
            })
            return typing.cast(types.SimpleNested, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def TestComplexNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ComplexNested, types.ComplexNested]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestComplexNested", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ComplexNested, types.ComplexNested](
          result,
          lambda x: typing.cast(stream_types.ComplexNested, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ComplexNested, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestDeeplyNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.DeeplyNested, types.DeeplyNested]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestDeeplyNested", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.DeeplyNested, types.DeeplyNested](
          result,
          lambda x: typing.cast(stream_types.DeeplyNested, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.DeeplyNested, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestRecursiveStructure(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.RecursiveStructure, types.RecursiveStructure]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestRecursiveStructure", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.RecursiveStructure, types.RecursiveStructure](
          result,
          lambda x: typing.cast(stream_types.RecursiveStructure, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.RecursiveStructure, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TestSimpleNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SimpleNested, types.SimpleNested]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TestSimpleNested", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SimpleNested, types.SimpleNested](
          result,
          lambda x: typing.cast(stream_types.SimpleNested, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SimpleNested, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestComplexNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestComplexNested", args={
            "input": input,
        }, mode="request")
        return result
    async def TestDeeplyNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestDeeplyNested", args={
            "input": input,
        }, mode="request")
        return result
    async def TestRecursiveStructure(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestRecursiveStructure", args={
            "input": input,
        }, mode="request")
        return result
    async def TestSimpleNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestSimpleNested", args={
            "input": input,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def TestComplexNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestComplexNested", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestDeeplyNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestDeeplyNested", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestRecursiveStructure(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestRecursiveStructure", args={
            "input": input,
        }, mode="stream")
        return result
    async def TestSimpleNested(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TestSimpleNested", args={
            "input": input,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))
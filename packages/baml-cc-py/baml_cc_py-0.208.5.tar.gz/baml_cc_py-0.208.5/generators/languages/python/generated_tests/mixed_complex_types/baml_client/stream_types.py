# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (35)
# #########################################################################

class Action(BaseModel):
    type: typing.Optional[str] = None
    parameters: typing.Dict[str, typing.Union[str, int, bool]]
    async_: typing.Optional[bool] = None

class Asset(BaseModel):
    id: typing.Optional[int] = None
    type: typing.Optional[typing.Union[str, str, str]] = None
    metadata: typing.Optional["AssetMetadata"] = None
    tags: typing.List[str]

class AssetMetadata(BaseModel):
    filename: typing.Optional[str] = None
    size: typing.Optional[int] = None
    mimeType: typing.Optional[str] = None
    uploaded: typing.Optional[str] = None
    checksum: typing.Optional[str] = None

class ButtonWidget(BaseModel):
    label: typing.Optional[str] = None
    action: typing.Optional[str] = None
    style: typing.Dict[str, str]

class ComplexData(BaseModel):
    primary: typing.Optional["PrimaryData"] = None
    secondary: typing.Optional["SecondaryData"] = None
    tertiary: typing.Optional["TertiaryData"] = None

class Condition(BaseModel):
    type: typing.Optional[typing.Union[str, str, str]] = None
    conditions: typing.List[typing.Union["Condition", "SimpleCondition"]]

class Configuration(BaseModel):
    version: typing.Optional[str] = None
    features: typing.List["Feature"]
    environments: typing.Dict[str, "Environment"]
    rules: typing.List["Rule"]

class ContainerWidget(BaseModel):
    layout: typing.Optional[typing.Union[str, str, str]] = None
    children: typing.List["Widget"]
    style: typing.Dict[str, str]

class DataObject(BaseModel):
    type: typing.Optional[str] = None
    value: typing.Dict[str, str]

class Dimensions(BaseModel):
    width: typing.Optional[int] = None
    height: typing.Optional[int] = None

class Environment(BaseModel):
    name: typing.Optional[str] = None
    url: typing.Optional[str] = None
    variables: typing.Dict[str, str]
    secrets: typing.Optional[typing.Dict[str, str]] = None

class Error(BaseModel):
    type: typing.Optional[str] = None
    message: typing.Optional[str] = None
    code: typing.Optional[int] = None

class ErrorDetail(BaseModel):
    code: typing.Optional[str] = None
    message: typing.Optional[str] = None
    details: typing.Optional[typing.Dict[str, str]] = None

class Feature(BaseModel):
    name: typing.Optional[str] = None
    enabled: typing.Optional[bool] = None
    config: typing.Optional[typing.Dict[str, typing.Union[str, int, bool]]] = None
    dependencies: typing.List[str]

class ImageWidget(BaseModel):
    alt: typing.Optional[str] = None
    dimensions: typing.Optional["Dimensions"] = None

class Item(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    variants: typing.List["Variant"]
    attributes: typing.Dict[str, typing.Union[str, int, float, bool]]

class KitchenSink(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    score: typing.Optional[float] = None
    active: typing.Optional[bool] = None
    nothing: typing.Any
    status: typing.Optional[typing.Union[str, str, str]] = None
    priority: typing.Optional[typing.Union[int, int, int, int, int]] = None
    tags: typing.List[str]
    numbers: typing.List[int]
    matrix: typing.List[typing.List[int]]
    metadata: typing.Dict[str, str]
    scores: typing.Dict[str, float]
    description: typing.Optional[str] = None
    notes: typing.Optional[str] = None
    data: typing.Optional[typing.Union[str, int, "DataObject"]] = None
    result: typing.Optional[typing.Union["Success", "Error"]] = None
    user: typing.Optional["User"] = None
    items: typing.List["Item"]
    config: typing.Optional["Configuration"] = None

class Node(BaseModel):
    id: typing.Optional[int] = None
    type: typing.Optional[typing.Union[str, str]] = None
    value: typing.Optional[typing.Union[str, int, typing.List["Node"], typing.Dict[str, "Node"]]] = None
    metadata: typing.Optional["NodeMetadata"] = None

class NodeMetadata(BaseModel):
    created: typing.Optional[str] = None
    modified: typing.Optional[str] = None
    tags: typing.List[str]
    attributes: typing.Dict[str, typing.Optional[typing.Union[str, int, bool]]]

class PrimaryData(BaseModel):
    values: typing.List[typing.Union[str, int, float]]
    mappings: typing.Dict[str, typing.Dict[str, str]]
    flags: typing.List[bool]

class Record(BaseModel):
    id: typing.Optional[int] = None
    data: typing.Dict[str, typing.Optional[typing.Union[str, int, bool]]]
    related: typing.Optional[typing.List["Record"]] = None

class ResponseMetadata(BaseModel):
    timestamp: typing.Optional[str] = None
    requestId: typing.Optional[str] = None
    duration: typing.Optional[int] = None
    retries: typing.Optional[int] = None

class Rule(BaseModel):
    id: typing.Optional[int] = None
    name: typing.Optional[str] = None
    condition: typing.Optional["Condition"] = None
    actions: typing.List["Action"]
    priority: typing.Optional[int] = None

class SecondaryData(BaseModel):
    records: typing.List["Record"]
    index: typing.Dict[str, "Record"]

class Setting(BaseModel):
    key: typing.Optional[str] = None
    value: typing.Optional[typing.Union[str, int, bool]] = None
    metadata: typing.Optional[typing.Dict[str, str]] = None

class SimpleCondition(BaseModel):
    field: typing.Optional[str] = None
    operator: typing.Optional[typing.Union[str, str, str, str, str]] = None
    value: typing.Optional[typing.Union[str, int, float, bool]] = None

class Success(BaseModel):
    type: typing.Optional[str] = None
    data: typing.Dict[str, str]

class TertiaryData(BaseModel):
    raw: typing.Optional[str] = None
    parsed: typing.Optional[typing.Dict[str, str]] = None
    valid: typing.Optional[bool] = None

class TextWidget(BaseModel):
    content: typing.Optional[str] = None
    format: typing.Optional[typing.Union[str, str, str]] = None
    style: typing.Dict[str, str]

class UltraComplex(BaseModel):
    tree: typing.Optional["Node"] = None
    widgets: typing.List["Widget"]
    data: typing.Optional["ComplexData"] = None
    response: typing.Optional["UserResponse"] = None
    assets: typing.List["Asset"]

class User(BaseModel):
    id: typing.Optional[int] = None
    profile: typing.Optional["UserProfile"] = None
    settings: typing.Dict[str, "Setting"]

class UserProfile(BaseModel):
    name: typing.Optional[str] = None
    email: typing.Optional[str] = None
    bio: typing.Optional[str] = None
    links: typing.List[str]

class UserResponse(BaseModel):
    status: typing.Optional[typing.Union[str, str]] = None
    data: typing.Optional["User"] = None
    error: typing.Optional["ErrorDetail"] = None
    metadata: typing.Optional["ResponseMetadata"] = None

class Variant(BaseModel):
    sku: typing.Optional[str] = None
    price: typing.Optional[float] = None
    stock: typing.Optional[int] = None
    options: typing.Dict[str, str]

class Widget(BaseModel):
    type: typing.Optional[typing.Union[str, str, str, str]] = None
    button: typing.Optional["ButtonWidget"] = None
    text: typing.Optional["TextWidget"] = None
    image: typing.Optional["ImageWidget"] = None
    container: typing.Optional["ContainerWidget"] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
